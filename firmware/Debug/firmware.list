
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f22c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  0800f3cc  0800f3cc  000103cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010964  08010964  00012184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010964  08010964  00011964  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801096c  0801096c  00012184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801096c  0801096c  0001196c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010970  08010970  00011970  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08010974  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001adc  20000184  08010af8  00012184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  08010af8  00012c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac87  00000000  00000000  000121b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434b  00000000  00000000  0002ce3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00031188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001a5a5  00000000  00000000  00032a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002008b  00000000  00000000  0004cfad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a0110  00000000  00000000  0006d038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010d148  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000012d4  00000000  00000000  0010d18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d18  00000000  00000000  0010e460  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00115178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f3b4 	.word	0x0800f3b4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800f3b4 	.word	0x0800f3b4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b988 	b.w	8000bc4 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	468e      	mov	lr, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	4688      	mov	r8, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d962      	bls.n	80009a8 <__udivmoddi4+0xdc>
 80008e2:	fab2 f682 	clz	r6, r2
 80008e6:	b14e      	cbz	r6, 80008fc <__udivmoddi4+0x30>
 80008e8:	f1c6 0320 	rsb	r3, r6, #32
 80008ec:	fa01 f806 	lsl.w	r8, r1, r6
 80008f0:	fa20 f303 	lsr.w	r3, r0, r3
 80008f4:	40b7      	lsls	r7, r6
 80008f6:	ea43 0808 	orr.w	r8, r3, r8
 80008fa:	40b4      	lsls	r4, r6
 80008fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000900:	fa1f fc87 	uxth.w	ip, r7
 8000904:	fbb8 f1fe 	udiv	r1, r8, lr
 8000908:	0c23      	lsrs	r3, r4, #16
 800090a:	fb0e 8811 	mls	r8, lr, r1, r8
 800090e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000912:	fb01 f20c 	mul.w	r2, r1, ip
 8000916:	429a      	cmp	r2, r3
 8000918:	d909      	bls.n	800092e <__udivmoddi4+0x62>
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000920:	f080 80ea 	bcs.w	8000af8 <__udivmoddi4+0x22c>
 8000924:	429a      	cmp	r2, r3
 8000926:	f240 80e7 	bls.w	8000af8 <__udivmoddi4+0x22c>
 800092a:	3902      	subs	r1, #2
 800092c:	443b      	add	r3, r7
 800092e:	1a9a      	subs	r2, r3, r2
 8000930:	b2a3      	uxth	r3, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800093e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000942:	459c      	cmp	ip, r3
 8000944:	d909      	bls.n	800095a <__udivmoddi4+0x8e>
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	f100 32ff 	add.w	r2, r0, #4294967295
 800094c:	f080 80d6 	bcs.w	8000afc <__udivmoddi4+0x230>
 8000950:	459c      	cmp	ip, r3
 8000952:	f240 80d3 	bls.w	8000afc <__udivmoddi4+0x230>
 8000956:	443b      	add	r3, r7
 8000958:	3802      	subs	r0, #2
 800095a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800095e:	eba3 030c 	sub.w	r3, r3, ip
 8000962:	2100      	movs	r1, #0
 8000964:	b11d      	cbz	r5, 800096e <__udivmoddi4+0xa2>
 8000966:	40f3      	lsrs	r3, r6
 8000968:	2200      	movs	r2, #0
 800096a:	e9c5 3200 	strd	r3, r2, [r5]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d905      	bls.n	8000982 <__udivmoddi4+0xb6>
 8000976:	b10d      	cbz	r5, 800097c <__udivmoddi4+0xb0>
 8000978:	e9c5 0100 	strd	r0, r1, [r5]
 800097c:	2100      	movs	r1, #0
 800097e:	4608      	mov	r0, r1
 8000980:	e7f5      	b.n	800096e <__udivmoddi4+0xa2>
 8000982:	fab3 f183 	clz	r1, r3
 8000986:	2900      	cmp	r1, #0
 8000988:	d146      	bne.n	8000a18 <__udivmoddi4+0x14c>
 800098a:	4573      	cmp	r3, lr
 800098c:	d302      	bcc.n	8000994 <__udivmoddi4+0xc8>
 800098e:	4282      	cmp	r2, r0
 8000990:	f200 8105 	bhi.w	8000b9e <__udivmoddi4+0x2d2>
 8000994:	1a84      	subs	r4, r0, r2
 8000996:	eb6e 0203 	sbc.w	r2, lr, r3
 800099a:	2001      	movs	r0, #1
 800099c:	4690      	mov	r8, r2
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d0e5      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a2:	e9c5 4800 	strd	r4, r8, [r5]
 80009a6:	e7e2      	b.n	800096e <__udivmoddi4+0xa2>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	f000 8090 	beq.w	8000ace <__udivmoddi4+0x202>
 80009ae:	fab2 f682 	clz	r6, r2
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	f040 80a4 	bne.w	8000b00 <__udivmoddi4+0x234>
 80009b8:	1a8a      	subs	r2, r1, r2
 80009ba:	0c03      	lsrs	r3, r0, #16
 80009bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c0:	b280      	uxth	r0, r0
 80009c2:	b2bc      	uxth	r4, r7
 80009c4:	2101      	movs	r1, #1
 80009c6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ca:	fb0e 221c 	mls	r2, lr, ip, r2
 80009ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009d2:	fb04 f20c 	mul.w	r2, r4, ip
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d907      	bls.n	80009ea <__udivmoddi4+0x11e>
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009e0:	d202      	bcs.n	80009e8 <__udivmoddi4+0x11c>
 80009e2:	429a      	cmp	r2, r3
 80009e4:	f200 80e0 	bhi.w	8000ba8 <__udivmoddi4+0x2dc>
 80009e8:	46c4      	mov	ip, r8
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	fbb3 f2fe 	udiv	r2, r3, lr
 80009f0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009f4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009f8:	fb02 f404 	mul.w	r4, r2, r4
 80009fc:	429c      	cmp	r4, r3
 80009fe:	d907      	bls.n	8000a10 <__udivmoddi4+0x144>
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0x142>
 8000a08:	429c      	cmp	r4, r3
 8000a0a:	f200 80ca 	bhi.w	8000ba2 <__udivmoddi4+0x2d6>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	1b1b      	subs	r3, r3, r4
 8000a12:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a16:	e7a5      	b.n	8000964 <__udivmoddi4+0x98>
 8000a18:	f1c1 0620 	rsb	r6, r1, #32
 8000a1c:	408b      	lsls	r3, r1
 8000a1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a22:	431f      	orrs	r7, r3
 8000a24:	fa0e f401 	lsl.w	r4, lr, r1
 8000a28:	fa20 f306 	lsr.w	r3, r0, r6
 8000a2c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a30:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a34:	4323      	orrs	r3, r4
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	fa1f fc87 	uxth.w	ip, r7
 8000a3e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a42:	0c1c      	lsrs	r4, r3, #16
 8000a44:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a48:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a4c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	fa02 f201 	lsl.w	r2, r2, r1
 8000a56:	d909      	bls.n	8000a6c <__udivmoddi4+0x1a0>
 8000a58:	193c      	adds	r4, r7, r4
 8000a5a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a5e:	f080 809c 	bcs.w	8000b9a <__udivmoddi4+0x2ce>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f240 8099 	bls.w	8000b9a <__udivmoddi4+0x2ce>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	443c      	add	r4, r7
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	fa1f fe83 	uxth.w	lr, r3
 8000a74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a78:	fb09 4413 	mls	r4, r9, r3, r4
 8000a7c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a80:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a84:	45a4      	cmp	ip, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x1ce>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a8e:	f080 8082 	bcs.w	8000b96 <__udivmoddi4+0x2ca>
 8000a92:	45a4      	cmp	ip, r4
 8000a94:	d97f      	bls.n	8000b96 <__udivmoddi4+0x2ca>
 8000a96:	3b02      	subs	r3, #2
 8000a98:	443c      	add	r4, r7
 8000a9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a9e:	eba4 040c 	sub.w	r4, r4, ip
 8000aa2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000aa6:	4564      	cmp	r4, ip
 8000aa8:	4673      	mov	r3, lr
 8000aaa:	46e1      	mov	r9, ip
 8000aac:	d362      	bcc.n	8000b74 <__udivmoddi4+0x2a8>
 8000aae:	d05f      	beq.n	8000b70 <__udivmoddi4+0x2a4>
 8000ab0:	b15d      	cbz	r5, 8000aca <__udivmoddi4+0x1fe>
 8000ab2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ab6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aba:	fa04 f606 	lsl.w	r6, r4, r6
 8000abe:	fa22 f301 	lsr.w	r3, r2, r1
 8000ac2:	431e      	orrs	r6, r3
 8000ac4:	40cc      	lsrs	r4, r1
 8000ac6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aca:	2100      	movs	r1, #0
 8000acc:	e74f      	b.n	800096e <__udivmoddi4+0xa2>
 8000ace:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ad2:	0c01      	lsrs	r1, r0, #16
 8000ad4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ad8:	b280      	uxth	r0, r0
 8000ada:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	463c      	mov	r4, r7
 8000ae4:	46b8      	mov	r8, r7
 8000ae6:	46be      	mov	lr, r7
 8000ae8:	2620      	movs	r6, #32
 8000aea:	fbb1 f1f7 	udiv	r1, r1, r7
 8000aee:	eba2 0208 	sub.w	r2, r2, r8
 8000af2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000af6:	e766      	b.n	80009c6 <__udivmoddi4+0xfa>
 8000af8:	4601      	mov	r1, r0
 8000afa:	e718      	b.n	800092e <__udivmoddi4+0x62>
 8000afc:	4610      	mov	r0, r2
 8000afe:	e72c      	b.n	800095a <__udivmoddi4+0x8e>
 8000b00:	f1c6 0220 	rsb	r2, r6, #32
 8000b04:	fa2e f302 	lsr.w	r3, lr, r2
 8000b08:	40b7      	lsls	r7, r6
 8000b0a:	40b1      	lsls	r1, r6
 8000b0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b14:	430a      	orrs	r2, r1
 8000b16:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b1a:	b2bc      	uxth	r4, r7
 8000b1c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b20:	0c11      	lsrs	r1, r2, #16
 8000b22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b26:	fb08 f904 	mul.w	r9, r8, r4
 8000b2a:	40b0      	lsls	r0, r6
 8000b2c:	4589      	cmp	r9, r1
 8000b2e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b32:	b280      	uxth	r0, r0
 8000b34:	d93e      	bls.n	8000bb4 <__udivmoddi4+0x2e8>
 8000b36:	1879      	adds	r1, r7, r1
 8000b38:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b3c:	d201      	bcs.n	8000b42 <__udivmoddi4+0x276>
 8000b3e:	4589      	cmp	r9, r1
 8000b40:	d81f      	bhi.n	8000b82 <__udivmoddi4+0x2b6>
 8000b42:	eba1 0109 	sub.w	r1, r1, r9
 8000b46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b4a:	fb09 f804 	mul.w	r8, r9, r4
 8000b4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b52:	b292      	uxth	r2, r2
 8000b54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b58:	4542      	cmp	r2, r8
 8000b5a:	d229      	bcs.n	8000bb0 <__udivmoddi4+0x2e4>
 8000b5c:	18ba      	adds	r2, r7, r2
 8000b5e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b62:	d2c4      	bcs.n	8000aee <__udivmoddi4+0x222>
 8000b64:	4542      	cmp	r2, r8
 8000b66:	d2c2      	bcs.n	8000aee <__udivmoddi4+0x222>
 8000b68:	f1a9 0102 	sub.w	r1, r9, #2
 8000b6c:	443a      	add	r2, r7
 8000b6e:	e7be      	b.n	8000aee <__udivmoddi4+0x222>
 8000b70:	45f0      	cmp	r8, lr
 8000b72:	d29d      	bcs.n	8000ab0 <__udivmoddi4+0x1e4>
 8000b74:	ebbe 0302 	subs.w	r3, lr, r2
 8000b78:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	46e1      	mov	r9, ip
 8000b80:	e796      	b.n	8000ab0 <__udivmoddi4+0x1e4>
 8000b82:	eba7 0909 	sub.w	r9, r7, r9
 8000b86:	4449      	add	r1, r9
 8000b88:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b8c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b90:	fb09 f804 	mul.w	r8, r9, r4
 8000b94:	e7db      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b96:	4673      	mov	r3, lr
 8000b98:	e77f      	b.n	8000a9a <__udivmoddi4+0x1ce>
 8000b9a:	4650      	mov	r0, sl
 8000b9c:	e766      	b.n	8000a6c <__udivmoddi4+0x1a0>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e6fd      	b.n	800099e <__udivmoddi4+0xd2>
 8000ba2:	443b      	add	r3, r7
 8000ba4:	3a02      	subs	r2, #2
 8000ba6:	e733      	b.n	8000a10 <__udivmoddi4+0x144>
 8000ba8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bac:	443b      	add	r3, r7
 8000bae:	e71c      	b.n	80009ea <__udivmoddi4+0x11e>
 8000bb0:	4649      	mov	r1, r9
 8000bb2:	e79c      	b.n	8000aee <__udivmoddi4+0x222>
 8000bb4:	eba1 0109 	sub.w	r1, r1, r9
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bbe:	fb09 f804 	mul.w	r8, r9, r4
 8000bc2:	e7c4      	b.n	8000b4e <__udivmoddi4+0x282>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	e00a      	b.n	8000bec <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_ADC_ConvCpltCallback+0x38>)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000bde:	4a09      	ldr	r2, [pc, #36]	@ (8000c04 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3301      	adds	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	ddf1      	ble.n	8000bd6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	20000480 	.word	0x20000480
 8000c04:	20000490 	.word	0x20000490

08000c08 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	200006bd 	.word	0x200006bd

08000c28 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200006be 	.word	0x200006be

08000c48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) { //250us
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d116      	bne.n	8000c88 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c64:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b28      	cmp	r3, #40	@ 0x28
 8000c6c:	d107      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000c74:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c76:	7813      	ldrb	r3, [r2, #0]
 8000c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c7c:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000c7e:	2208      	movs	r2, #8
 8000c80:	4906      	ldr	r1, [pc, #24]	@ (8000c9c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c82:	4807      	ldr	r0, [pc, #28]	@ (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c84:	f002 ff08 	bl	8003a98 <HAL_ADC_Start_DMA>
	}

	if(htim->Instance ==TIM4){ //100ms
		//ONDISPLAY=TRUE;
	}
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40010000 	.word	0x40010000
 8000c94:	2000047c 	.word	0x2000047c
 8000c98:	200006bc 	.word	0x200006bc
 8000c9c:	20000480 	.word	0x20000480
 8000ca0:	200001a0 	.word	0x200001a0

08000ca4 <USBRxData>:


void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000ca4:	b490      	push	{r4, r7}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	e018      	b.n	8000ce6 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	441a      	add	r2, r3
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <USBRxData+0x58>)
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <USBRxData+0x58>)
 8000cc0:	795b      	ldrb	r3, [r3, #5]
 8000cc2:	1c58      	adds	r0, r3, #1
 8000cc4:	b2c4      	uxtb	r4, r0
 8000cc6:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <USBRxData+0x58>)
 8000cc8:	7144      	strb	r4, [r0, #5]
 8000cca:	440b      	add	r3, r1
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <USBRxData+0x58>)
 8000cd2:	795a      	ldrb	r2, [r3, #5]
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <USBRxData+0x58>)
 8000cd6:	799b      	ldrb	r3, [r3, #6]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <USBRxData+0x58>)
 8000cde:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d8e2      	bhi.n	8000cb4 <USBRxData+0x10>
	}

}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc90      	pop	{r4, r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200004ac 	.word	0x200004ac

08000d00 <USBTask>:

void USBTask() {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0c2      	sub	sp, #264	@ 0x108
 8000d04:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000d06:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <USBTask+0x90>)
 8000d08:	791a      	ldrb	r2, [r3, #4]
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <USBTask+0x90>)
 8000d0c:	795b      	ldrb	r3, [r3, #5]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d039      	beq.n	8000d86 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 8000d12:	481f      	ldr	r0, [pc, #124]	@ (8000d90 <USBTask+0x90>)
 8000d14:	f002 fb76 	bl	8003404 <unerPrtcl_DecodeHeader>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000d1e:	491d      	ldr	r1, [pc, #116]	@ (8000d94 <USBTask+0x94>)
 8000d20:	481b      	ldr	r0, [pc, #108]	@ (8000d90 <USBTask+0x90>)
 8000d22:	f000 f839 	bl	8000d98 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000d2c:	e01d      	b.n	8000d6a <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <USBTask+0x94>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <USBTask+0x94>)
 8000d34:	7a1b      	ldrb	r3, [r3, #8]
 8000d36:	1c59      	adds	r1, r3, #1
 8000d38:	b2c8      	uxtb	r0, r1
 8000d3a:	4916      	ldr	r1, [pc, #88]	@ (8000d94 <USBTask+0x94>)
 8000d3c:	7208      	strb	r0, [r1, #8]
 8000d3e:	441a      	add	r2, r3
 8000d40:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000d44:	7811      	ldrb	r1, [r2, #0]
 8000d46:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000d4a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000d4e:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <USBTask+0x94>)
 8000d52:	7a1a      	ldrb	r2, [r3, #8]
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <USBTask+0x94>)
 8000d56:	799b      	ldrb	r3, [r3, #6]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <USBTask+0x94>)
 8000d5e:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000d60:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000d64:	3301      	adds	r3, #1
 8000d66:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <USBTask+0x94>)
 8000d6c:	79db      	ldrb	r3, [r3, #7]
 8000d6e:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3db      	bcc.n	8000d2e <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <USBTask+0x94>)
 8000d78:	79db      	ldrb	r3, [r3, #7]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00d fa01 	bl	800e188 <CDC_Transmit_FS>
	}

}
 8000d86:	bf00      	nop
 8000d88:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200004ac 	.word	0x200004ac
 8000d94:	200004a0 	.word	0x200004a0

08000d98 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	7a12      	ldrb	r2, [r2, #8]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	3bf0      	subs	r3, #240	@ 0xf0
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	f200 8129 	bhi.w	8001008 <decodeCommand+0x270>
 8000db6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dbc <decodeCommand+0x24>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000dcd 	.word	0x08000dcd
 8000dc0:	08000ded 	.word	0x08000ded
 8000dc4:	08000e0d 	.word	0x08000e0d
 8000dc8:	08000ef1 	.word	0x08000ef1
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000dcc:	2202      	movs	r2, #2
 8000dce:	21f0      	movs	r1, #240	@ 0xf0
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f002 f9f5 	bl	80031c0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 8000dd6:	210d      	movs	r1, #13
 8000dd8:	6838      	ldr	r0, [r7, #0]
 8000dda:	f002 faa0 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	7a5b      	ldrb	r3, [r3, #9]
 8000de2:	4619      	mov	r1, r3
 8000de4:	6838      	ldr	r0, [r7, #0]
 8000de6:	f002 fa9a 	bl	800331e <unerPrtcl_PutByteOnTx>
		break;
 8000dea:	e123      	b.n	8001034 <decodeCommand+0x29c>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000dec:	220d      	movs	r2, #13
 8000dee:	21f1      	movs	r1, #241	@ 0xf1
 8000df0:	6838      	ldr	r0, [r7, #0]
 8000df2:	f002 f9e5 	bl	80031c0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000df6:	4991      	ldr	r1, [pc, #580]	@ (800103c <decodeCommand+0x2a4>)
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f002 fabe 	bl	800337a <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	7a5b      	ldrb	r3, [r3, #9]
 8000e02:	4619      	mov	r1, r3
 8000e04:	6838      	ldr	r0, [r7, #0]
 8000e06:	f002 fa8a 	bl	800331e <unerPrtcl_PutByteOnTx>
		break;
 8000e0a:	e113      	b.n	8001034 <decodeCommand+0x29c>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 8000e0c:	220d      	movs	r2, #13
 8000e0e:	21f2      	movs	r1, #242	@ 0xf2
 8000e10:	6838      	ldr	r0, [r7, #0]
 8000e12:	f002 f9d5 	bl	80031c0 <unerPrtcl_PutHeaderOnTx>
		myWord.i16[0] = ax;
 8000e16:	4b8a      	ldr	r3, [pc, #552]	@ (8001040 <decodeCommand+0x2a8>)
 8000e18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e1c:	4b89      	ldr	r3, [pc, #548]	@ (8001044 <decodeCommand+0x2ac>)
 8000e1e:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000e20:	4b88      	ldr	r3, [pc, #544]	@ (8001044 <decodeCommand+0x2ac>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	6838      	ldr	r0, [r7, #0]
 8000e28:	f002 fa79 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000e2c:	4b85      	ldr	r3, [pc, #532]	@ (8001044 <decodeCommand+0x2ac>)
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6838      	ldr	r0, [r7, #0]
 8000e34:	f002 fa73 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = ay;
 8000e38:	4b83      	ldr	r3, [pc, #524]	@ (8001048 <decodeCommand+0x2b0>)
 8000e3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e3e:	4b81      	ldr	r3, [pc, #516]	@ (8001044 <decodeCommand+0x2ac>)
 8000e40:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000e42:	4b80      	ldr	r3, [pc, #512]	@ (8001044 <decodeCommand+0x2ac>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4619      	mov	r1, r3
 8000e48:	6838      	ldr	r0, [r7, #0]
 8000e4a:	f002 fa68 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000e4e:	4b7d      	ldr	r3, [pc, #500]	@ (8001044 <decodeCommand+0x2ac>)
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	4619      	mov	r1, r3
 8000e54:	6838      	ldr	r0, [r7, #0]
 8000e56:	f002 fa62 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = az;
 8000e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800104c <decodeCommand+0x2b4>)
 8000e5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e60:	4b78      	ldr	r3, [pc, #480]	@ (8001044 <decodeCommand+0x2ac>)
 8000e62:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000e64:	4b77      	ldr	r3, [pc, #476]	@ (8001044 <decodeCommand+0x2ac>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6838      	ldr	r0, [r7, #0]
 8000e6c:	f002 fa57 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000e70:	4b74      	ldr	r3, [pc, #464]	@ (8001044 <decodeCommand+0x2ac>)
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	4619      	mov	r1, r3
 8000e76:	6838      	ldr	r0, [r7, #0]
 8000e78:	f002 fa51 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gx;
 8000e7c:	4b74      	ldr	r3, [pc, #464]	@ (8001050 <decodeCommand+0x2b8>)
 8000e7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e82:	4b70      	ldr	r3, [pc, #448]	@ (8001044 <decodeCommand+0x2ac>)
 8000e84:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000e86:	4b6f      	ldr	r3, [pc, #444]	@ (8001044 <decodeCommand+0x2ac>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6838      	ldr	r0, [r7, #0]
 8000e8e:	f002 fa46 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000e92:	4b6c      	ldr	r3, [pc, #432]	@ (8001044 <decodeCommand+0x2ac>)
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	4619      	mov	r1, r3
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f002 fa40 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gy;
 8000e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001054 <decodeCommand+0x2bc>)
 8000ea0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ea4:	4b67      	ldr	r3, [pc, #412]	@ (8001044 <decodeCommand+0x2ac>)
 8000ea6:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000ea8:	4b66      	ldr	r3, [pc, #408]	@ (8001044 <decodeCommand+0x2ac>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	6838      	ldr	r0, [r7, #0]
 8000eb0:	f002 fa35 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000eb4:	4b63      	ldr	r3, [pc, #396]	@ (8001044 <decodeCommand+0x2ac>)
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	6838      	ldr	r0, [r7, #0]
 8000ebc:	f002 fa2f 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gz;
 8000ec0:	4b65      	ldr	r3, [pc, #404]	@ (8001058 <decodeCommand+0x2c0>)
 8000ec2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8001044 <decodeCommand+0x2ac>)
 8000ec8:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000eca:	4b5e      	ldr	r3, [pc, #376]	@ (8001044 <decodeCommand+0x2ac>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	f002 fa24 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8001044 <decodeCommand+0x2ac>)
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	4619      	mov	r1, r3
 8000edc:	6838      	ldr	r0, [r7, #0]
 8000ede:	f002 fa1e 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	7a5b      	ldrb	r3, [r3, #9]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f002 fa18 	bl	800331e <unerPrtcl_PutByteOnTx>
		break;
 8000eee:	e0a1      	b.n	8001034 <decodeCommand+0x29c>
	case GETADC:
		unerPrtcl_PutHeaderOnTx(dataTx, GETADC, 17);
 8000ef0:	2211      	movs	r2, #17
 8000ef2:	21f3      	movs	r1, #243	@ 0xf3
 8000ef4:	6838      	ldr	r0, [r7, #0]
 8000ef6:	f002 f963 	bl	80031c0 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = adcDataTx[0];
 8000efa:	4b58      	ldr	r3, [pc, #352]	@ (800105c <decodeCommand+0x2c4>)
 8000efc:	881a      	ldrh	r2, [r3, #0]
 8000efe:	4b51      	ldr	r3, [pc, #324]	@ (8001044 <decodeCommand+0x2ac>)
 8000f00:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f02:	4b50      	ldr	r3, [pc, #320]	@ (8001044 <decodeCommand+0x2ac>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	6838      	ldr	r0, [r7, #0]
 8000f0a:	f002 fa08 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001044 <decodeCommand+0x2ac>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	4619      	mov	r1, r3
 8000f14:	6838      	ldr	r0, [r7, #0]
 8000f16:	f002 fa02 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[1];
 8000f1a:	4b50      	ldr	r3, [pc, #320]	@ (800105c <decodeCommand+0x2c4>)
 8000f1c:	885a      	ldrh	r2, [r3, #2]
 8000f1e:	4b49      	ldr	r3, [pc, #292]	@ (8001044 <decodeCommand+0x2ac>)
 8000f20:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f22:	4b48      	ldr	r3, [pc, #288]	@ (8001044 <decodeCommand+0x2ac>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	f002 f9f8 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f2e:	4b45      	ldr	r3, [pc, #276]	@ (8001044 <decodeCommand+0x2ac>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	4619      	mov	r1, r3
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f002 f9f2 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[2];
 8000f3a:	4b48      	ldr	r3, [pc, #288]	@ (800105c <decodeCommand+0x2c4>)
 8000f3c:	889a      	ldrh	r2, [r3, #4]
 8000f3e:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <decodeCommand+0x2ac>)
 8000f40:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f42:	4b40      	ldr	r3, [pc, #256]	@ (8001044 <decodeCommand+0x2ac>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4619      	mov	r1, r3
 8000f48:	6838      	ldr	r0, [r7, #0]
 8000f4a:	f002 f9e8 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001044 <decodeCommand+0x2ac>)
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	4619      	mov	r1, r3
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f002 f9e2 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[3];
 8000f5a:	4b40      	ldr	r3, [pc, #256]	@ (800105c <decodeCommand+0x2c4>)
 8000f5c:	88da      	ldrh	r2, [r3, #6]
 8000f5e:	4b39      	ldr	r3, [pc, #228]	@ (8001044 <decodeCommand+0x2ac>)
 8000f60:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f62:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <decodeCommand+0x2ac>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	6838      	ldr	r0, [r7, #0]
 8000f6a:	f002 f9d8 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f6e:	4b35      	ldr	r3, [pc, #212]	@ (8001044 <decodeCommand+0x2ac>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	4619      	mov	r1, r3
 8000f74:	6838      	ldr	r0, [r7, #0]
 8000f76:	f002 f9d2 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[4];
 8000f7a:	4b38      	ldr	r3, [pc, #224]	@ (800105c <decodeCommand+0x2c4>)
 8000f7c:	891a      	ldrh	r2, [r3, #8]
 8000f7e:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <decodeCommand+0x2ac>)
 8000f80:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f82:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <decodeCommand+0x2ac>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4619      	mov	r1, r3
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f002 f9c8 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <decodeCommand+0x2ac>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	4619      	mov	r1, r3
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	f002 f9c2 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[5];
 8000f9a:	4b30      	ldr	r3, [pc, #192]	@ (800105c <decodeCommand+0x2c4>)
 8000f9c:	895a      	ldrh	r2, [r3, #10]
 8000f9e:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <decodeCommand+0x2ac>)
 8000fa0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fa2:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <decodeCommand+0x2ac>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f002 f9b8 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fae:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <decodeCommand+0x2ac>)
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f002 f9b2 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[6];
 8000fba:	4b28      	ldr	r3, [pc, #160]	@ (800105c <decodeCommand+0x2c4>)
 8000fbc:	899a      	ldrh	r2, [r3, #12]
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <decodeCommand+0x2ac>)
 8000fc0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <decodeCommand+0x2ac>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f002 f9a8 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <decodeCommand+0x2ac>)
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f002 f9a2 	bl	800331e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[7];
 8000fda:	4b20      	ldr	r3, [pc, #128]	@ (800105c <decodeCommand+0x2c4>)
 8000fdc:	89da      	ldrh	r2, [r3, #14]
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <decodeCommand+0x2ac>)
 8000fe0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <decodeCommand+0x2ac>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	6838      	ldr	r0, [r7, #0]
 8000fea:	f002 f998 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <decodeCommand+0x2ac>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f002 f992 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	7a5b      	ldrb	r3, [r3, #9]
 8000ffe:	4619      	mov	r1, r3
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f002 f98c 	bl	800331e <unerPrtcl_PutByteOnTx>
		break;
 8001006:	e015      	b.n	8001034 <decodeCommand+0x29c>
		break;
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	7a12      	ldrb	r2, [r2, #8]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	4619      	mov	r1, r3
 8001018:	6838      	ldr	r0, [r7, #0]
 800101a:	f002 f8d1 	bl	80031c0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 800101e:	21ff      	movs	r1, #255	@ 0xff
 8001020:	6838      	ldr	r0, [r7, #0]
 8001022:	f002 f97c 	bl	800331e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	7a5b      	ldrb	r3, [r3, #9]
 800102a:	4619      	mov	r1, r3
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f002 f976 	bl	800331e <unerPrtcl_PutByteOnTx>
		break;
 8001032:	bf00      	nop
	}
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	08010900 	.word	0x08010900
 8001040:	200006c0 	.word	0x200006c0
 8001044:	200006b8 	.word	0x200006b8
 8001048:	200006c2 	.word	0x200006c2
 800104c:	200006c4 	.word	0x200006c4
 8001050:	200006c6 	.word	0x200006c6
 8001054:	200006c8 	.word	0x200006c8
 8001058:	200006ca 	.word	0x200006ca
 800105c:	20000490 	.word	0x20000490

08001060 <do10ms>:

void do10ms() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	if (IS10MS) {
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <do10ms+0x80>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d034      	beq.n	80010dc <do10ms+0x7c>
		IS10MS = FALSE;
 8001072:	4a1b      	ldr	r2, [pc, #108]	@ (80010e0 <do10ms+0x80>)
 8001074:	7813      	ldrb	r3, [r2, #0]
 8001076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800107a:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 800107c:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <do10ms+0x84>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3b01      	subs	r3, #1
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <do10ms+0x84>)
 8001086:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <do10ms+0x88>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	3b01      	subs	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <do10ms+0x88>)
 8001092:	701a      	strb	r2, [r3, #0]
		if (!tmo20ms) {
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <do10ms+0x88>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10c      	bne.n	80010b6 <do10ms+0x56>
			tmo20ms = 2;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <do10ms+0x88>)
 800109e:	2202      	movs	r2, #2
 80010a0:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 80010a2:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <do10ms+0x80>)
 80010a4:	7813      	ldrb	r3, [r2, #0]
 80010a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010aa:	7013      	strb	r3, [r2, #0]
			ONMPU = TRUE;
 80010ac:	4a0c      	ldr	r2, [pc, #48]	@ (80010e0 <do10ms+0x80>)
 80010ae:	7813      	ldrb	r3, [r2, #0]
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 80010b6:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <do10ms+0x84>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10e      	bne.n	80010dc <do10ms+0x7c>
			tmo100ms = 10;
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <do10ms+0x84>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 80010c4:	4a06      	ldr	r2, [pc, #24]	@ (80010e0 <do10ms+0x80>)
 80010c6:	7813      	ldrb	r3, [r2, #0]
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	7013      	strb	r3, [r2, #0]
			ONDISPLAY = TRUE;
 80010ce:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <do10ms+0x80>)
 80010d0:	7813      	ldrb	r3, [r2, #0]
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 80010d8:	f000 f808 	bl	80010ec <heartBeatTask>
		}
	}
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200006bc 	.word	0x200006bc
 80010e4:	20000028 	.word	0x20000028
 80010e8:	20000029 	.word	0x20000029

080010ec <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <heartBeatTask+0x44>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <heartBeatTask+0x48>)
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4611      	mov	r1, r2
 80010fc:	2201      	movs	r2, #1
 80010fe:	408a      	lsls	r2, r1
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 8001106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110a:	480b      	ldr	r0, [pc, #44]	@ (8001138 <heartBeatTask+0x4c>)
 800110c:	f003 feeb 	bl	8004ee6 <HAL_GPIO_TogglePin>

	times++;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <heartBeatTask+0x48>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <heartBeatTask+0x48>)
 800111a:	701a      	strb	r2, [r3, #0]
	times &= 31;
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <heartBeatTask+0x48>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <heartBeatTask+0x48>)
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000
 8001134:	200006cc 	.word	0x200006cc
 8001138:	40020800 	.word	0x40020800

0800113c <displayMemWrite>:

void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af04      	add	r7, sp, #16
 8001142:	6039      	str	r1, [r7, #0]
 8001144:	4611      	mov	r1, r2
 8001146:	461a      	mov	r2, r3
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	460b      	mov	r3, r1
 800114e:	71bb      	strb	r3, [r7, #6]
 8001150:	4613      	mov	r3, r2
 8001152:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	b299      	uxth	r1, r3
 8001158:	797b      	ldrb	r3, [r7, #5]
 800115a:	b29a      	uxth	r2, r3
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	b29b      	uxth	r3, r3
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	9002      	str	r0, [sp, #8]
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	4803      	ldr	r0, [pc, #12]	@ (800117c <displayMemWrite+0x40>)
 8001170:	f004 f82e 	bl	80051d0 <HAL_I2C_Mem_Write>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000248 	.word	0x20000248

08001180 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af02      	add	r7, sp, #8
 8001186:	6039      	str	r1, [r7, #0]
 8001188:	4611      	mov	r1, r2
 800118a:	461a      	mov	r2, r3
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	460b      	mov	r3, r1
 8001192:	71bb      	strb	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	b299      	uxth	r1, r3
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	4803      	ldr	r0, [pc, #12]	@ (80011bc <displayMemWriteDMA+0x3c>)
 80011ae:	f004 f909 	bl	80053c4 <HAL_I2C_Mem_Write_DMA>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000248 	.word	0x20000248

080011c0 <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	6039      	str	r1, [r7, #0]
 80011c8:	4611      	mov	r1, r2
 80011ca:	461a      	mov	r2, r3
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	460b      	mov	r3, r1
 80011d2:	71bb      	strb	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	b299      	uxth	r1, r3
 80011dc:	797b      	ldrb	r3, [r7, #5]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	9002      	str	r0, [sp, #8]
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2301      	movs	r3, #1
 80011f2:	4803      	ldr	r0, [pc, #12]	@ (8001200 <mpuMemWrite+0x40>)
 80011f4:	f003 ffec 	bl	80051d0 <HAL_I2C_Mem_Write>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000248 	.word	0x20000248

08001204 <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
 800120a:	6039      	str	r1, [r7, #0]
 800120c:	4611      	mov	r1, r2
 800120e:	461a      	mov	r2, r3
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	460b      	mov	r3, r1
 8001216:	71bb      	strb	r3, [r7, #6]
 8001218:	4613      	mov	r3, r2
 800121a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	b299      	uxth	r1, r3
 8001220:	797b      	ldrb	r3, [r7, #5]
 8001222:	b29a      	uxth	r2, r3
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	b29b      	uxth	r3, r3
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <mpuMemReadDMA+0x3c>)
 8001232:	f004 fa25 	bl	8005680 <HAL_I2C_Mem_Read_DMA>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000248 	.word	0x20000248

08001244 <displayTask>:

void displayTask() {
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
	char data[8];
	uint8_t y = 0, x = 2;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	2302      	movs	r3, #2
 8001250:	73bb      	strb	r3, [r7, #14]
	static uint8_t init = FALSE;
	static uint8_t wait = FALSE;
	static uint8_t over = TRUE;

	if(!over){
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <displayTask+0x40>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d104      	bne.n	8001264 <displayTask+0x20>
		ONMPU=FALSE;
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <displayTask+0x44>)
 800125c:	7813      	ldrb	r3, [r2, #0]
 800125e:	f023 0302 	bic.w	r3, r3, #2
 8001262:	7013      	strb	r3, [r2, #0]
	}

	if (ONMPU) { //Espera de la pantalla
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <displayTask+0x44>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00e      	beq.n	8001290 <displayTask+0x4c>
		wait = TRUE;
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <displayTask+0x48>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
		ONDISPLAY = FALSE;
 8001278:	4a03      	ldr	r2, [pc, #12]	@ (8001288 <displayTask+0x44>)
 800127a:	7813      	ldrb	r3, [r2, #0]
 800127c:	f023 0308 	bic.w	r3, r3, #8
 8001280:	7013      	strb	r3, [r2, #0]
 8001282:	e1eb      	b.n	800165c <displayTask+0x418>
 8001284:	2000002a 	.word	0x2000002a
 8001288:	200006bc 	.word	0x200006bc
 800128c:	200006cd 	.word	0x200006cd
		return;
	}

	if (wait && !ONMPU) { //MPU terminó, entra pantalla
 8001290:	4bbf      	ldr	r3, [pc, #764]	@ (8001590 <displayTask+0x34c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d011      	beq.n	80012bc <displayTask+0x78>
 8001298:	4bbe      	ldr	r3, [pc, #760]	@ (8001594 <displayTask+0x350>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10a      	bne.n	80012bc <displayTask+0x78>
		wait = FALSE;
 80012a6:	4bba      	ldr	r3, [pc, #744]	@ (8001590 <displayTask+0x34c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
		init = TRUE;
 80012ac:	4bba      	ldr	r3, [pc, #744]	@ (8001598 <displayTask+0x354>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		ONDISPLAY = TRUE;
 80012b2:	4ab8      	ldr	r2, [pc, #736]	@ (8001594 <displayTask+0x350>)
 80012b4:	7813      	ldrb	r3, [r2, #0]
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	7013      	strb	r3, [r2, #0]
	}

	if(ONDISPLAY){
 80012bc:	4bb5      	ldr	r3, [pc, #724]	@ (8001594 <displayTask+0x350>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 81c8 	beq.w	800165c <displayTask+0x418>
	if (init) {
 80012cc:	4bb2      	ldr	r3, [pc, #712]	@ (8001598 <displayTask+0x354>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 81b3 	beq.w	800163c <displayTask+0x3f8>
		init = FALSE;
 80012d6:	4bb0      	ldr	r3, [pc, #704]	@ (8001598 <displayTask+0x354>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
		over = FALSE;
 80012dc:	4baf      	ldr	r3, [pc, #700]	@ (800159c <displayTask+0x358>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
		ssd1306_Fill(White);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f001 f996 	bl	8002614 <ssd1306_Fill>

		ssd1306_FillRectangle(30, 0, 32, 64, Black);
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2340      	movs	r3, #64	@ 0x40
 80012ee:	2220      	movs	r2, #32
 80012f0:	2100      	movs	r1, #0
 80012f2:	201e      	movs	r0, #30
 80012f4:	f001 fbbe 	bl	8002a74 <ssd1306_FillRectangle>

		ssd1306_FillRectangle(0, 20, 128, 22, Black);
 80012f8:	2300      	movs	r3, #0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2316      	movs	r3, #22
 80012fe:	2280      	movs	r2, #128	@ 0x80
 8001300:	2114      	movs	r1, #20
 8001302:	2000      	movs	r0, #0
 8001304:	f001 fbb6 	bl	8002a74 <ssd1306_FillRectangle>

		ssd1306_FillRectangle(80,0, 82, 64, Black);
 8001308:	2300      	movs	r3, #0
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2340      	movs	r3, #64	@ 0x40
 800130e:	2252      	movs	r2, #82	@ 0x52
 8001310:	2100      	movs	r1, #0
 8001312:	2050      	movs	r0, #80	@ 0x50
 8001314:	f001 fbae 	bl	8002a74 <ssd1306_FillRectangle>

		x = SSD1306_SNDCOL;
 8001318:	2328      	movs	r3, #40	@ 0x28
 800131a:	73bb      	strb	r3, [r7, #14]
		y = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(x, y);
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fb20 	bl	800296c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "ACC");
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4a9c      	ldr	r2, [pc, #624]	@ (80015a0 <displayTask+0x35c>)
 8001330:	2108      	movs	r1, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f00d fb8a 	bl	800ea4c <sniprintf>
		ssd1306_WriteString(data, Font_11x18, Black);
 8001338:	4b9a      	ldr	r3, [pc, #616]	@ (80015a4 <displayTask+0x360>)
 800133a:	1d38      	adds	r0, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001342:	f001 faed 	bl	8002920 <ssd1306_WriteString>
		x = SSD1306_TRDCOL;
 8001346:	2355      	movs	r3, #85	@ 0x55
 8001348:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fb0b 	bl	800296c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "GYR");
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4a93      	ldr	r2, [pc, #588]	@ (80015a8 <displayTask+0x364>)
 800135a:	2108      	movs	r1, #8
 800135c:	4618      	mov	r0, r3
 800135e:	f00d fb75 	bl	800ea4c <sniprintf>
		ssd1306_WriteString(data, Font_11x18, Black);
 8001362:	4b90      	ldr	r3, [pc, #576]	@ (80015a4 <displayTask+0x360>)
 8001364:	1d38      	adds	r0, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	9200      	str	r2, [sp, #0]
 800136a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136c:	f001 fad8 	bl	8002920 <ssd1306_WriteString>

		x = SSD1306_SNDCOL;
 8001370:	2328      	movs	r3, #40	@ 0x28
 8001372:	73bb      	strb	r3, [r7, #14]
		y+=25;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	3319      	adds	r3, #25
 8001378:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(x, y);
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f001 faf3 	bl	800296c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", ax);
 8001386:	4b89      	ldr	r3, [pc, #548]	@ (80015ac <displayTask+0x368>)
 8001388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138c:	1d38      	adds	r0, r7, #4
 800138e:	4a88      	ldr	r2, [pc, #544]	@ (80015b0 <displayTask+0x36c>)
 8001390:	2108      	movs	r1, #8
 8001392:	f00d fb5b 	bl	800ea4c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 8001396:	4b87      	ldr	r3, [pc, #540]	@ (80015b4 <displayTask+0x370>)
 8001398:	1d38      	adds	r0, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a0:	f001 fabe 	bl	8002920 <ssd1306_WriteString>
		x = SSD1306_TRDCOL;
 80013a4:	2355      	movs	r3, #85	@ 0x55
 80013a6:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fadc 	bl	800296c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", gx);
 80013b4:	4b80      	ldr	r3, [pc, #512]	@ (80015b8 <displayTask+0x374>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	1d38      	adds	r0, r7, #4
 80013bc:	4a7c      	ldr	r2, [pc, #496]	@ (80015b0 <displayTask+0x36c>)
 80013be:	2108      	movs	r1, #8
 80013c0:	f00d fb44 	bl	800ea4c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 80013c4:	4b7b      	ldr	r3, [pc, #492]	@ (80015b4 <displayTask+0x370>)
 80013c6:	1d38      	adds	r0, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ce:	f001 faa7 	bl	8002920 <ssd1306_WriteString>

		x = SSD1306_SNDCOL;
 80013d2:	2328      	movs	r3, #40	@ 0x28
 80013d4:	73bb      	strb	r3, [r7, #14]
		y+=12;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	330c      	adds	r3, #12
 80013da:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(x, y);
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 fac2 	bl	800296c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", ay);
 80013e8:	4b74      	ldr	r3, [pc, #464]	@ (80015bc <displayTask+0x378>)
 80013ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ee:	1d38      	adds	r0, r7, #4
 80013f0:	4a6f      	ldr	r2, [pc, #444]	@ (80015b0 <displayTask+0x36c>)
 80013f2:	2108      	movs	r1, #8
 80013f4:	f00d fb2a 	bl	800ea4c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 80013f8:	4b6e      	ldr	r3, [pc, #440]	@ (80015b4 <displayTask+0x370>)
 80013fa:	1d38      	adds	r0, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	9200      	str	r2, [sp, #0]
 8001400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001402:	f001 fa8d 	bl	8002920 <ssd1306_WriteString>
		x = SSD1306_TRDCOL;
 8001406:	2355      	movs	r3, #85	@ 0x55
 8001408:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	7bbb      	ldrb	r3, [r7, #14]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f001 faab 	bl	800296c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", gy);
 8001416:	4b6a      	ldr	r3, [pc, #424]	@ (80015c0 <displayTask+0x37c>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	1d38      	adds	r0, r7, #4
 800141e:	4a64      	ldr	r2, [pc, #400]	@ (80015b0 <displayTask+0x36c>)
 8001420:	2108      	movs	r1, #8
 8001422:	f00d fb13 	bl	800ea4c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 8001426:	4b63      	ldr	r3, [pc, #396]	@ (80015b4 <displayTask+0x370>)
 8001428:	1d38      	adds	r0, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	9200      	str	r2, [sp, #0]
 800142e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001430:	f001 fa76 	bl	8002920 <ssd1306_WriteString>

		x = SSD1306_SNDCOL;
 8001434:	2328      	movs	r3, #40	@ 0x28
 8001436:	73bb      	strb	r3, [r7, #14]
		y+=12;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	330c      	adds	r3, #12
 800143c:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(x, y);
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	7bbb      	ldrb	r3, [r7, #14]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f001 fa91 	bl	800296c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", az);
 800144a:	4b5e      	ldr	r3, [pc, #376]	@ (80015c4 <displayTask+0x380>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	1d38      	adds	r0, r7, #4
 8001452:	4a57      	ldr	r2, [pc, #348]	@ (80015b0 <displayTask+0x36c>)
 8001454:	2108      	movs	r1, #8
 8001456:	f00d faf9 	bl	800ea4c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 800145a:	4b56      	ldr	r3, [pc, #344]	@ (80015b4 <displayTask+0x370>)
 800145c:	1d38      	adds	r0, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	9200      	str	r2, [sp, #0]
 8001462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001464:	f001 fa5c 	bl	8002920 <ssd1306_WriteString>
		x = SSD1306_TRDCOL;
 8001468:	2355      	movs	r3, #85	@ 0x55
 800146a:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fa7a 	bl	800296c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", gz);
 8001478:	4b53      	ldr	r3, [pc, #332]	@ (80015c8 <displayTask+0x384>)
 800147a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147e:	1d38      	adds	r0, r7, #4
 8001480:	4a4b      	ldr	r2, [pc, #300]	@ (80015b0 <displayTask+0x36c>)
 8001482:	2108      	movs	r1, #8
 8001484:	f00d fae2 	bl	800ea4c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 8001488:	4b4a      	ldr	r3, [pc, #296]	@ (80015b4 <displayTask+0x370>)
 800148a:	1d38      	adds	r0, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	9200      	str	r2, [sp, #0]
 8001490:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001492:	f001 fa45 	bl	8002920 <ssd1306_WriteString>

		ssd1306_Line(3, 60, 3, (SSD1306_MINADC - (adcDataTx[0] / 4090) * SSD1306_MAXADC), Black);
 8001496:	4b4d      	ldr	r3, [pc, #308]	@ (80015cc <displayTask+0x388>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	4a4d      	ldr	r2, [pc, #308]	@ (80015d0 <displayTask+0x38c>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	0adb      	lsrs	r3, r3, #11
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	333c      	adds	r3, #60	@ 0x3c
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2200      	movs	r2, #0
 80014b6:	9200      	str	r2, [sp, #0]
 80014b8:	2203      	movs	r2, #3
 80014ba:	213c      	movs	r1, #60	@ 0x3c
 80014bc:	2003      	movs	r0, #3
 80014be:	f001 fa6d 	bl	800299c <ssd1306_Line>
		ssd1306_Line(6, 60, 6, (SSD1306_MINADC - (adcDataTx[1] / 4090) * SSD1306_MAXADC), Black);
 80014c2:	4b42      	ldr	r3, [pc, #264]	@ (80015cc <displayTask+0x388>)
 80014c4:	885b      	ldrh	r3, [r3, #2]
 80014c6:	4a42      	ldr	r2, [pc, #264]	@ (80015d0 <displayTask+0x38c>)
 80014c8:	fba2 2303 	umull	r2, r3, r2, r3
 80014cc:	0adb      	lsrs	r3, r3, #11
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	333c      	adds	r3, #60	@ 0x3c
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2200      	movs	r2, #0
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	2206      	movs	r2, #6
 80014e6:	213c      	movs	r1, #60	@ 0x3c
 80014e8:	2006      	movs	r0, #6
 80014ea:	f001 fa57 	bl	800299c <ssd1306_Line>
		ssd1306_Line(9, 60, 9, (SSD1306_MINADC - (adcDataTx[2] / 4090) * SSD1306_MAXADC), Black);
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <displayTask+0x388>)
 80014f0:	889b      	ldrh	r3, [r3, #4]
 80014f2:	4a37      	ldr	r2, [pc, #220]	@ (80015d0 <displayTask+0x38c>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	0adb      	lsrs	r3, r3, #11
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	333c      	adds	r3, #60	@ 0x3c
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2200      	movs	r2, #0
 800150e:	9200      	str	r2, [sp, #0]
 8001510:	2209      	movs	r2, #9
 8001512:	213c      	movs	r1, #60	@ 0x3c
 8001514:	2009      	movs	r0, #9
 8001516:	f001 fa41 	bl	800299c <ssd1306_Line>
		ssd1306_Line(12, 60, 12, (SSD1306_MINADC - (adcDataTx[3] / 4090) * SSD1306_MAXADC), Black);
 800151a:	4b2c      	ldr	r3, [pc, #176]	@ (80015cc <displayTask+0x388>)
 800151c:	88db      	ldrh	r3, [r3, #6]
 800151e:	4a2c      	ldr	r2, [pc, #176]	@ (80015d0 <displayTask+0x38c>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0adb      	lsrs	r3, r3, #11
 8001526:	b29b      	uxth	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	333c      	adds	r3, #60	@ 0x3c
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2200      	movs	r2, #0
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	220c      	movs	r2, #12
 800153e:	213c      	movs	r1, #60	@ 0x3c
 8001540:	200c      	movs	r0, #12
 8001542:	f001 fa2b 	bl	800299c <ssd1306_Line>
		ssd1306_Line(15, 60, 15, (SSD1306_MINADC - (adcDataTx[4] / 4090) * SSD1306_MAXADC), Black);
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <displayTask+0x388>)
 8001548:	891b      	ldrh	r3, [r3, #8]
 800154a:	4a21      	ldr	r2, [pc, #132]	@ (80015d0 <displayTask+0x38c>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	0adb      	lsrs	r3, r3, #11
 8001552:	b29b      	uxth	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	333c      	adds	r3, #60	@ 0x3c
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2200      	movs	r2, #0
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	220f      	movs	r2, #15
 800156a:	213c      	movs	r1, #60	@ 0x3c
 800156c:	200f      	movs	r0, #15
 800156e:	f001 fa15 	bl	800299c <ssd1306_Line>
		ssd1306_Line(18, 60, 18, (SSD1306_MINADC - (adcDataTx[5] / 4090) * SSD1306_MAXADC), Black);
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <displayTask+0x388>)
 8001574:	895b      	ldrh	r3, [r3, #10]
 8001576:	4a16      	ldr	r2, [pc, #88]	@ (80015d0 <displayTask+0x38c>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	0adb      	lsrs	r3, r3, #11
 800157e:	b29b      	uxth	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	333c      	adds	r3, #60	@ 0x3c
 800158e:	e021      	b.n	80015d4 <displayTask+0x390>
 8001590:	200006cd 	.word	0x200006cd
 8001594:	200006bc 	.word	0x200006bc
 8001598:	200006ce 	.word	0x200006ce
 800159c:	2000002a 	.word	0x2000002a
 80015a0:	0800f3cc 	.word	0x0800f3cc
 80015a4:	080108f4 	.word	0x080108f4
 80015a8:	0800f3d0 	.word	0x0800f3d0
 80015ac:	200006c0 	.word	0x200006c0
 80015b0:	0800f3d4 	.word	0x0800f3d4
 80015b4:	080108e8 	.word	0x080108e8
 80015b8:	200006c6 	.word	0x200006c6
 80015bc:	200006c2 	.word	0x200006c2
 80015c0:	200006c8 	.word	0x200006c8
 80015c4:	200006c4 	.word	0x200006c4
 80015c8:	200006ca 	.word	0x200006ca
 80015cc:	20000490 	.word	0x20000490
 80015d0:	80301207 	.word	0x80301207
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2200      	movs	r2, #0
 80015d8:	9200      	str	r2, [sp, #0]
 80015da:	2212      	movs	r2, #18
 80015dc:	213c      	movs	r1, #60	@ 0x3c
 80015de:	2012      	movs	r0, #18
 80015e0:	f001 f9dc 	bl	800299c <ssd1306_Line>
		ssd1306_Line(21, 60, 21, (SSD1306_MINADC - (adcDataTx[6] / 4090) * SSD1306_MAXADC), Black);
 80015e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <displayTask+0x420>)
 80015e6:	899b      	ldrh	r3, [r3, #12]
 80015e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001668 <displayTask+0x424>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0adb      	lsrs	r3, r3, #11
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	333c      	adds	r3, #60	@ 0x3c
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2200      	movs	r2, #0
 8001604:	9200      	str	r2, [sp, #0]
 8001606:	2215      	movs	r2, #21
 8001608:	213c      	movs	r1, #60	@ 0x3c
 800160a:	2015      	movs	r0, #21
 800160c:	f001 f9c6 	bl	800299c <ssd1306_Line>
		ssd1306_Line(24, 60, 24, (SSD1306_MINADC - (adcDataTx[7] / 4090) * SSD1306_MAXADC), Black);
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <displayTask+0x420>)
 8001612:	89db      	ldrh	r3, [r3, #14]
 8001614:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <displayTask+0x424>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0adb      	lsrs	r3, r3, #11
 800161c:	b29b      	uxth	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	333c      	adds	r3, #60	@ 0x3c
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2200      	movs	r2, #0
 8001630:	9200      	str	r2, [sp, #0]
 8001632:	2218      	movs	r2, #24
 8001634:	213c      	movs	r1, #60	@ 0x3c
 8001636:	2018      	movs	r0, #24
 8001638:	f001 f9b0 	bl	800299c <ssd1306_Line>
	}

	if (ssd1306_UpdateScreenDMA()) {
 800163c:	f001 f82a 	bl	8002694 <ssd1306_UpdateScreenDMA>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00a      	beq.n	800165c <displayTask+0x418>
		ONDISPLAY = FALSE;
 8001646:	4a09      	ldr	r2, [pc, #36]	@ (800166c <displayTask+0x428>)
 8001648:	7813      	ldrb	r3, [r2, #0]
 800164a:	f023 0308 	bic.w	r3, r3, #8
 800164e:	7013      	strb	r3, [r2, #0]
		over = TRUE;
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <displayTask+0x42c>)
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
		init = TRUE;
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <displayTask+0x430>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
	}
	}
}
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000490 	.word	0x20000490
 8001668:	80301207 	.word	0x80301207
 800166c:	200006bc 	.word	0x200006bc
 8001670:	2000002a 	.word	0x2000002a
 8001674:	200006ce 	.word	0x200006ce

08001678 <mpuTask>:


void mpuTask() {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af02      	add	r7, sp, #8

	if (ONMPU) {
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <mpuTask+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <mpuTask+0x3c>
		if (mpu6050_Read()) {
 800168c:	f000 fcd8 	bl	8002040 <mpu6050_Read>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00e      	beq.n	80016b4 <mpuTask+0x3c>
			ONMPU = FALSE;
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <mpuTask+0x44>)
 8001698:	7813      	ldrb	r3, [r2, #0]
 800169a:	f023 0302 	bic.w	r3, r3, #2
 800169e:	7013      	strb	r3, [r2, #0]
			mpu6050_GetData(&ax, &ay, &az, &gx, &gy, &gz);
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <mpuTask+0x48>)
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <mpuTask+0x4c>)
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <mpuTask+0x50>)
 80016aa:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <mpuTask+0x54>)
 80016ac:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <mpuTask+0x58>)
 80016ae:	4809      	ldr	r0, [pc, #36]	@ (80016d4 <mpuTask+0x5c>)
 80016b0:	f000 fe78 	bl	80023a4 <mpu6050_GetData>
		}
	}

}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200006bc 	.word	0x200006bc
 80016c0:	200006ca 	.word	0x200006ca
 80016c4:	200006c8 	.word	0x200006c8
 80016c8:	200006c6 	.word	0x200006c6
 80016cc:	200006c4 	.word	0x200006c4
 80016d0:	200006c2 	.word	0x200006c2
 80016d4:	200006c0 	.word	0x200006c0

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016dc:	f001 fff2 	bl	80036c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e0:	f000 f872 	bl	80017c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e4:	f000 fbd4 	bl	8001e90 <MX_GPIO_Init>
  MX_DMA_Init();
 80016e8:	f000 fb94 	bl	8001e14 <MX_DMA_Init>
  MX_ADC1_Init();
 80016ec:	f000 f8d4 	bl	8001898 <MX_ADC1_Init>
  MX_I2C1_Init();
 80016f0:	f000 f986 	bl	8001a00 <MX_I2C1_Init>
  MX_TIM1_Init();
 80016f4:	f000 f9b2 	bl	8001a5c <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80016f8:	f00c fc2c 	bl	800df54 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80016fc:	f000 fa14 	bl	8001b28 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001700:	f000 fa76 	bl	8001bf0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001704:	f000 fb22 	bl	8001d4c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8001708:	481e      	ldr	r0, [pc, #120]	@ (8001784 <main+0xac>)
 800170a:	f00c fd75 	bl	800e1f8 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1);
 800170e:	481e      	ldr	r0, [pc, #120]	@ (8001788 <main+0xb0>)
 8001710:	f008 f982 	bl	8009a18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001714:	481d      	ldr	r0, [pc, #116]	@ (800178c <main+0xb4>)
 8001716:	f008 f97f 	bl	8009a18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800171a:	481d      	ldr	r0, [pc, #116]	@ (8001790 <main+0xb8>)
 800171c:	f008 f97c 	bl	8009a18 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001720:	481c      	ldr	r0, [pc, #112]	@ (8001794 <main+0xbc>)
 8001722:	f008 f979 	bl	8009a18 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800172c:	481a      	ldr	r0, [pc, #104]	@ (8001798 <main+0xc0>)
 800172e:	f003 fbc1 	bl	8004eb4 <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 8001732:	481a      	ldr	r0, [pc, #104]	@ (800179c <main+0xc4>)
 8001734:	f000 fef4 	bl	8002520 <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 8001738:	4819      	ldr	r0, [pc, #100]	@ (80017a0 <main+0xc8>)
 800173a:	f000 fee1 	bl	8002500 <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 800173e:	4819      	ldr	r0, [pc, #100]	@ (80017a4 <main+0xcc>)
 8001740:	f000 fece 	bl	80024e0 <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 8001744:	f000 fefc 	bl	8002540 <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 8001748:	4817      	ldr	r0, [pc, #92]	@ (80017a8 <main+0xd0>)
 800174a:	f000 fc07 	bl	8001f5c <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 800174e:	4817      	ldr	r0, [pc, #92]	@ (80017ac <main+0xd4>)
 8001750:	f000 fc14 	bl	8001f7c <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 8001754:	4816      	ldr	r0, [pc, #88]	@ (80017b0 <main+0xd8>)
 8001756:	f000 fc21 	bl	8001f9c <mpu6050_Attach_MemReadDMA>
	MPU6050_Init();
 800175a:	f000 fc59 	bl	8002010 <MPU6050_Init>

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 800175e:	4b15      	ldr	r3, [pc, #84]	@ (80017b4 <main+0xdc>)
 8001760:	4a15      	ldr	r2, [pc, #84]	@ (80017b8 <main+0xe0>)
 8001762:	4916      	ldr	r1, [pc, #88]	@ (80017bc <main+0xe4>)
 8001764:	4816      	ldr	r0, [pc, #88]	@ (80017c0 <main+0xe8>)
 8001766:	f001 ff4b 	bl	8003600 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 800176a:	4b16      	ldr	r3, [pc, #88]	@ (80017c4 <main+0xec>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 8001770:	f7ff fc76 	bl	8001060 <do10ms>
		USBTask();
 8001774:	f7ff fac4 	bl	8000d00 <USBTask>
		displayTask();
 8001778:	f7ff fd64 	bl	8001244 <displayTask>
		mpuTask();
 800177c:	f7ff ff7c 	bl	8001678 <mpuTask>
		do10ms();
 8001780:	bf00      	nop
 8001782:	e7f5      	b.n	8001770 <main+0x98>
 8001784:	08000ca5 	.word	0x08000ca5
 8001788:	2000035c 	.word	0x2000035c
 800178c:	200003a4 	.word	0x200003a4
 8001790:	200003ec 	.word	0x200003ec
 8001794:	20000434 	.word	0x20000434
 8001798:	40020800 	.word	0x40020800
 800179c:	200006bd 	.word	0x200006bd
 80017a0:	0800113d 	.word	0x0800113d
 80017a4:	08001181 	.word	0x08001181
 80017a8:	200006be 	.word	0x200006be
 80017ac:	080011c1 	.word	0x080011c1
 80017b0:	08001205 	.word	0x08001205
 80017b4:	200004b8 	.word	0x200004b8
 80017b8:	200005b8 	.word	0x200005b8
 80017bc:	200004a0 	.word	0x200004a0
 80017c0:	200004ac 	.word	0x200004ac
 80017c4:	200006bc 	.word	0x200006bc

080017c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b094      	sub	sp, #80	@ 0x50
 80017cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ce:	f107 0320 	add.w	r3, r7, #32
 80017d2:	2230      	movs	r2, #48	@ 0x30
 80017d4:	2100      	movs	r1, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	f00d f96e 	bl	800eab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017dc:	f107 030c 	add.w	r3, r7, #12
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ec:	2300      	movs	r3, #0
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	4b27      	ldr	r3, [pc, #156]	@ (8001890 <SystemClock_Config+0xc8>)
 80017f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f4:	4a26      	ldr	r2, [pc, #152]	@ (8001890 <SystemClock_Config+0xc8>)
 80017f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80017fc:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <SystemClock_Config+0xc8>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001804:	60bb      	str	r3, [r7, #8]
 8001806:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001808:	2300      	movs	r3, #0
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	4b21      	ldr	r3, [pc, #132]	@ (8001894 <SystemClock_Config+0xcc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a20      	ldr	r2, [pc, #128]	@ (8001894 <SystemClock_Config+0xcc>)
 8001812:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b1e      	ldr	r3, [pc, #120]	@ (8001894 <SystemClock_Config+0xcc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001820:	607b      	str	r3, [r7, #4]
 8001822:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001824:	2301      	movs	r3, #1
 8001826:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001828:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800182e:	2302      	movs	r3, #2
 8001830:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001832:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001836:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001838:	2319      	movs	r3, #25
 800183a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 800183c:	23c0      	movs	r3, #192	@ 0xc0
 800183e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001840:	2302      	movs	r3, #2
 8001842:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001844:	2304      	movs	r3, #4
 8001846:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001848:	f107 0320 	add.w	r3, r7, #32
 800184c:	4618      	mov	r0, r3
 800184e:	f007 fc4f 	bl	80090f0 <HAL_RCC_OscConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001858:	f000 fb7a 	bl	8001f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800185c:	230f      	movs	r3, #15
 800185e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001860:	2302      	movs	r3, #2
 8001862:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001868:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800186c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001872:	f107 030c 	add.w	r3, r7, #12
 8001876:	2103      	movs	r1, #3
 8001878:	4618      	mov	r0, r3
 800187a:	f007 feb1 	bl	80095e0 <HAL_RCC_ClockConfig>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001884:	f000 fb64 	bl	8001f50 <Error_Handler>
  }
}
 8001888:	bf00      	nop
 800188a:	3750      	adds	r7, #80	@ 0x50
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	40023800 	.word	0x40023800
 8001894:	40007000 	.word	0x40007000

08001898 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800189e:	463b      	mov	r3, r7
 80018a0:	2200      	movs	r2, #0
 80018a2:	601a      	str	r2, [r3, #0]
 80018a4:	605a      	str	r2, [r3, #4]
 80018a6:	609a      	str	r2, [r3, #8]
 80018a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018aa:	4b52      	ldr	r3, [pc, #328]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018ac:	4a52      	ldr	r2, [pc, #328]	@ (80019f8 <MX_ADC1_Init+0x160>)
 80018ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018b0:	4b50      	ldr	r3, [pc, #320]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018b8:	4b4e      	ldr	r3, [pc, #312]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018be:	4b4d      	ldr	r3, [pc, #308]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018c4:	4b4b      	ldr	r3, [pc, #300]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018ca:	4b4a      	ldr	r3, [pc, #296]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018d2:	4b48      	ldr	r3, [pc, #288]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018d8:	4b46      	ldr	r3, [pc, #280]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018da:	4a48      	ldr	r2, [pc, #288]	@ (80019fc <MX_ADC1_Init+0x164>)
 80018dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018de:	4b45      	ldr	r3, [pc, #276]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80018e4:	4b43      	ldr	r3, [pc, #268]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018e6:	2208      	movs	r2, #8
 80018e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018ea:	4b42      	ldr	r3, [pc, #264]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018f2:	4b40      	ldr	r3, [pc, #256]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018f8:	483e      	ldr	r0, [pc, #248]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80018fa:	f001 ff79 	bl	80037f0 <HAL_ADC_Init>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001904:	f000 fb24 	bl	8001f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001908:	2300      	movs	r3, #0
 800190a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800190c:	2301      	movs	r3, #1
 800190e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001914:	463b      	mov	r3, r7
 8001916:	4619      	mov	r1, r3
 8001918:	4836      	ldr	r0, [pc, #216]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 800191a:	f002 f9cf 	bl	8003cbc <HAL_ADC_ConfigChannel>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001924:	f000 fb14 	bl	8001f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001928:	2301      	movs	r3, #1
 800192a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800192c:	2302      	movs	r3, #2
 800192e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001930:	463b      	mov	r3, r7
 8001932:	4619      	mov	r1, r3
 8001934:	482f      	ldr	r0, [pc, #188]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 8001936:	f002 f9c1 	bl	8003cbc <HAL_ADC_ConfigChannel>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001940:	f000 fb06 	bl	8001f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001944:	2302      	movs	r3, #2
 8001946:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001948:	2303      	movs	r3, #3
 800194a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800194c:	463b      	mov	r3, r7
 800194e:	4619      	mov	r1, r3
 8001950:	4828      	ldr	r0, [pc, #160]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 8001952:	f002 f9b3 	bl	8003cbc <HAL_ADC_ConfigChannel>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	d001      	beq.n	8001960 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800195c:	f000 faf8 	bl	8001f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001960:	2303      	movs	r3, #3
 8001962:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001964:	2304      	movs	r3, #4
 8001966:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001968:	463b      	mov	r3, r7
 800196a:	4619      	mov	r1, r3
 800196c:	4821      	ldr	r0, [pc, #132]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 800196e:	f002 f9a5 	bl	8003cbc <HAL_ADC_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001978:	f000 faea 	bl	8001f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800197c:	2304      	movs	r3, #4
 800197e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001980:	2305      	movs	r3, #5
 8001982:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001984:	463b      	mov	r3, r7
 8001986:	4619      	mov	r1, r3
 8001988:	481a      	ldr	r0, [pc, #104]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 800198a:	f002 f997 	bl	8003cbc <HAL_ADC_ConfigChannel>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001994:	f000 fadc 	bl	8001f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001998:	2305      	movs	r3, #5
 800199a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 800199c:	2306      	movs	r3, #6
 800199e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019a0:	463b      	mov	r3, r7
 80019a2:	4619      	mov	r1, r3
 80019a4:	4813      	ldr	r0, [pc, #76]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80019a6:	f002 f989 	bl	8003cbc <HAL_ADC_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80019b0:	f000 face 	bl	8001f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80019b4:	2306      	movs	r3, #6
 80019b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80019b8:	2307      	movs	r3, #7
 80019ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019bc:	463b      	mov	r3, r7
 80019be:	4619      	mov	r1, r3
 80019c0:	480c      	ldr	r0, [pc, #48]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80019c2:	f002 f97b 	bl	8003cbc <HAL_ADC_ConfigChannel>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80019cc:	f000 fac0 	bl	8001f50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019d0:	2307      	movs	r3, #7
 80019d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80019d4:	2308      	movs	r3, #8
 80019d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d8:	463b      	mov	r3, r7
 80019da:	4619      	mov	r1, r3
 80019dc:	4805      	ldr	r0, [pc, #20]	@ (80019f4 <MX_ADC1_Init+0x15c>)
 80019de:	f002 f96d 	bl	8003cbc <HAL_ADC_ConfigChannel>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80019e8:	f000 fab2 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019ec:	bf00      	nop
 80019ee:	3710      	adds	r7, #16
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200001a0 	.word	0x200001a0
 80019f8:	40012000 	.word	0x40012000
 80019fc:	0f000001 	.word	0x0f000001

08001a00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <MX_I2C1_Init+0x50>)
 8001a06:	4a13      	ldr	r2, [pc, #76]	@ (8001a54 <MX_I2C1_Init+0x54>)
 8001a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <MX_I2C1_Init+0x50>)
 8001a0c:	4a12      	ldr	r2, [pc, #72]	@ (8001a58 <MX_I2C1_Init+0x58>)
 8001a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <MX_I2C1_Init+0x50>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <MX_I2C1_Init+0x50>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <MX_I2C1_Init+0x50>)
 8001a1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <MX_I2C1_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <MX_I2C1_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <MX_I2C1_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <MX_I2C1_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <MX_I2C1_Init+0x50>)
 8001a3e:	f003 fa6d 	bl	8004f1c <HAL_I2C_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a48:	f000 fa82 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	20000248 	.word	0x20000248
 8001a54:	40005400 	.word	0x40005400
 8001a58:	00061a80 	.word	0x00061a80

08001a5c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08c      	sub	sp, #48	@ 0x30
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	f107 0320 	add.w	r3, r7, #32
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a70:	f107 030c 	add.w	r3, r7, #12
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a88:	4b25      	ldr	r3, [pc, #148]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001a8a:	4a26      	ldr	r2, [pc, #152]	@ (8001b24 <MX_TIM1_Init+0xc8>)
 8001a8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8001a8e:	4b24      	ldr	r3, [pc, #144]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001a90:	225f      	movs	r2, #95	@ 0x5f
 8001a92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b22      	ldr	r3, [pc, #136]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001a9a:	4b21      	ldr	r3, [pc, #132]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001a9c:	22f9      	movs	r2, #249	@ 0xf9
 8001a9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa0:	4b1f      	ldr	r3, [pc, #124]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b1c      	ldr	r3, [pc, #112]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001ab2:	481b      	ldr	r0, [pc, #108]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001ab4:	f007 ff60 	bl	8009978 <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001abe:	f000 fa47 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac6:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ac8:	f107 0320 	add.w	r3, r7, #32
 8001acc:	4619      	mov	r1, r3
 8001ace:	4814      	ldr	r0, [pc, #80]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001ad0:	f008 fa10 	bl	8009ef4 <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001ada:	f000 fa39 	bl	8001f50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001ae6:	f107 030c 	add.w	r3, r7, #12
 8001aea:	4619      	mov	r1, r3
 8001aec:	480c      	ldr	r0, [pc, #48]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001aee:	f008 fac8 	bl	800a082 <HAL_TIM_SlaveConfigSynchro>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001af8:	f000 fa2a 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b04:	1d3b      	adds	r3, r7, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4805      	ldr	r0, [pc, #20]	@ (8001b20 <MX_TIM1_Init+0xc4>)
 8001b0a:	f008 fe63 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001b14:	f000 fa1c 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b18:	bf00      	nop
 8001b1a:	3730      	adds	r7, #48	@ 0x30
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	2000035c 	.word	0x2000035c
 8001b24:	40010000 	.word	0x40010000

08001b28 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b08c      	sub	sp, #48	@ 0x30
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2e:	f107 0320 	add.w	r3, r7, #32
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b3c:	f107 030c 	add.w	r3, r7, #12
 8001b40:	2200      	movs	r2, #0
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	605a      	str	r2, [r3, #4]
 8001b46:	609a      	str	r2, [r3, #8]
 8001b48:	60da      	str	r2, [r3, #12]
 8001b4a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b4c:	1d3b      	adds	r3, r7, #4
 8001b4e:	2200      	movs	r2, #0
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b54:	4b25      	ldr	r3, [pc, #148]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b56:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b5a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001b5c:	4b23      	ldr	r3, [pc, #140]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b5e:	225f      	movs	r2, #95	@ 0x5f
 8001b60:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b22      	ldr	r3, [pc, #136]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001b68:	4b20      	ldr	r3, [pc, #128]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b6a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b6e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b70:	4b1e      	ldr	r3, [pc, #120]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b7c:	481b      	ldr	r0, [pc, #108]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b7e:	f007 fefb 	bl	8009978 <HAL_TIM_Base_Init>
 8001b82:	4603      	mov	r3, r0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d001      	beq.n	8001b8c <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001b88:	f000 f9e2 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b90:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b92:	f107 0320 	add.w	r3, r7, #32
 8001b96:	4619      	mov	r1, r3
 8001b98:	4814      	ldr	r0, [pc, #80]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001b9a:	f008 f9ab 	bl	8009ef4 <HAL_TIM_ConfigClockSource>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001ba4:	f000 f9d4 	bl	8001f50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001bb0:	f107 030c 	add.w	r3, r7, #12
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	480d      	ldr	r0, [pc, #52]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001bb8:	f008 fa63 	bl	800a082 <HAL_TIM_SlaveConfigSynchro>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001bc2:	f000 f9c5 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bce:	1d3b      	adds	r3, r7, #4
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	4806      	ldr	r0, [pc, #24]	@ (8001bec <MX_TIM2_Init+0xc4>)
 8001bd4:	f008 fdfe 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d001      	beq.n	8001be2 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001bde:	f000 f9b7 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001be2:	bf00      	nop
 8001be4:	3730      	adds	r7, #48	@ 0x30
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200003a4 	.word	0x200003a4

08001bf0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b092      	sub	sp, #72	@ 0x48
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bf6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c1e:	463b      	mov	r3, r7
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	605a      	str	r2, [r3, #4]
 8001c26:	609a      	str	r2, [r3, #8]
 8001c28:	60da      	str	r2, [r3, #12]
 8001c2a:	611a      	str	r2, [r3, #16]
 8001c2c:	615a      	str	r2, [r3, #20]
 8001c2e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c30:	4b44      	ldr	r3, [pc, #272]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001c32:	4a45      	ldr	r2, [pc, #276]	@ (8001d48 <MX_TIM3_Init+0x158>)
 8001c34:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8001c36:	4b43      	ldr	r3, [pc, #268]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001c38:	225f      	movs	r2, #95	@ 0x5f
 8001c3a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c3c:	4b41      	ldr	r3, [pc, #260]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001c42:	4b40      	ldr	r3, [pc, #256]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001c44:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c48:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c4a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c50:	4b3c      	ldr	r3, [pc, #240]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c56:	483b      	ldr	r0, [pc, #236]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001c58:	f007 fe8e 	bl	8009978 <HAL_TIM_Base_Init>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c62:	f000 f975 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c66:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c6c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c70:	4619      	mov	r1, r3
 8001c72:	4834      	ldr	r0, [pc, #208]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001c74:	f008 f93e 	bl	8009ef4 <HAL_TIM_ConfigClockSource>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c7e:	f000 f967 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c82:	4830      	ldr	r0, [pc, #192]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001c84:	f007 ff2a 	bl	8009adc <HAL_TIM_PWM_Init>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c8e:	f000 f95f 	bl	8001f50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001c96:	2300      	movs	r3, #0
 8001c98:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4828      	ldr	r0, [pc, #160]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001ca2:	f008 f9ee 	bl	800a082 <HAL_TIM_SlaveConfigSynchro>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001cac:	f000 f950 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cb8:	f107 031c 	add.w	r3, r7, #28
 8001cbc:	4619      	mov	r1, r3
 8001cbe:	4821      	ldr	r0, [pc, #132]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001cc0:	f008 fd88 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001cca:	f000 f941 	bl	8001f50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cce:	2360      	movs	r3, #96	@ 0x60
 8001cd0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cde:	463b      	mov	r3, r7
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4817      	ldr	r0, [pc, #92]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001ce6:	f008 f843 	bl	8009d70 <HAL_TIM_PWM_ConfigChannel>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001cf0:	f000 f92e 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	2204      	movs	r2, #4
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4812      	ldr	r0, [pc, #72]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001cfc:	f008 f838 	bl	8009d70 <HAL_TIM_PWM_ConfigChannel>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001d06:	f000 f923 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d0a:	463b      	mov	r3, r7
 8001d0c:	2208      	movs	r2, #8
 8001d0e:	4619      	mov	r1, r3
 8001d10:	480c      	ldr	r0, [pc, #48]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001d12:	f008 f82d 	bl	8009d70 <HAL_TIM_PWM_ConfigChannel>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001d1c:	f000 f918 	bl	8001f50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d20:	463b      	mov	r3, r7
 8001d22:	220c      	movs	r2, #12
 8001d24:	4619      	mov	r1, r3
 8001d26:	4807      	ldr	r0, [pc, #28]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001d28:	f008 f822 	bl	8009d70 <HAL_TIM_PWM_ConfigChannel>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001d32:	f000 f90d 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d36:	4803      	ldr	r0, [pc, #12]	@ (8001d44 <MX_TIM3_Init+0x154>)
 8001d38:	f001 f90e 	bl	8002f58 <HAL_TIM_MspPostInit>

}
 8001d3c:	bf00      	nop
 8001d3e:	3748      	adds	r7, #72	@ 0x48
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	200003ec 	.word	0x200003ec
 8001d48:	40000400 	.word	0x40000400

08001d4c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	@ 0x30
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d60:	f107 030c 	add.w	r3, r7, #12
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d78:	4b24      	ldr	r3, [pc, #144]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d7a:	4a25      	ldr	r2, [pc, #148]	@ (8001e10 <MX_TIM4_Init+0xc4>)
 8001d7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 191;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d80:	22bf      	movs	r2, #191	@ 0xbf
 8001d82:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d84:	4b21      	ldr	r3, [pc, #132]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d8c:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001d90:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d9e:	481b      	ldr	r0, [pc, #108]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001da0:	f007 fdea 	bl	8009978 <HAL_TIM_Base_Init>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d001      	beq.n	8001dae <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001daa:	f000 f8d1 	bl	8001f50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001db2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001db4:	f107 0320 	add.w	r3, r7, #32
 8001db8:	4619      	mov	r1, r3
 8001dba:	4814      	ldr	r0, [pc, #80]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001dbc:	f008 f89a 	bl	8009ef4 <HAL_TIM_ConfigClockSource>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001dc6:	f000 f8c3 	bl	8001f50 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001dd2:	f107 030c 	add.w	r3, r7, #12
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001dda:	f008 f952 	bl	800a082 <HAL_TIM_SlaveConfigSynchro>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001de4:	f000 f8b4 	bl	8001f50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dec:	2300      	movs	r3, #0
 8001dee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <MX_TIM4_Init+0xc0>)
 8001df6:	f008 fced 	bl	800a7d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8001e00:	f000 f8a6 	bl	8001f50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e04:	bf00      	nop
 8001e06:	3730      	adds	r7, #48	@ 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000434 	.word	0x20000434
 8001e10:	40000800 	.word	0x40000800

08001e14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	607b      	str	r3, [r7, #4]
 8001e1e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e8c <MX_DMA_Init+0x78>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e22:	4a1a      	ldr	r2, [pc, #104]	@ (8001e8c <MX_DMA_Init+0x78>)
 8001e24:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e2a:	4b18      	ldr	r3, [pc, #96]	@ (8001e8c <MX_DMA_Init+0x78>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e32:	607b      	str	r3, [r7, #4]
 8001e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <MX_DMA_Init+0x78>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3e:	4a13      	ldr	r2, [pc, #76]	@ (8001e8c <MX_DMA_Init+0x78>)
 8001e40:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <MX_DMA_Init+0x78>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e4e:	603b      	str	r3, [r7, #0]
 8001e50:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	200b      	movs	r0, #11
 8001e58:	f002 fac5 	bl	80043e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e5c:	200b      	movs	r0, #11
 8001e5e:	f002 fade 	bl	800441e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e62:	2200      	movs	r2, #0
 8001e64:	2100      	movs	r1, #0
 8001e66:	200c      	movs	r0, #12
 8001e68:	f002 fabd 	bl	80043e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e6c:	200c      	movs	r0, #12
 8001e6e:	f002 fad6 	bl	800441e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2038      	movs	r0, #56	@ 0x38
 8001e78:	f002 fab5 	bl	80043e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e7c:	2038      	movs	r0, #56	@ 0x38
 8001e7e:	f002 face 	bl	800441e <HAL_NVIC_EnableIRQ>

}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800

08001e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	@ 0x28
 8001e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e96:	f107 0314 	add.w	r3, r7, #20
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
 8001ea0:	609a      	str	r2, [r3, #8]
 8001ea2:	60da      	str	r2, [r3, #12]
 8001ea4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b27      	ldr	r3, [pc, #156]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a26      	ldr	r2, [pc, #152]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001eb0:	f043 0304 	orr.w	r3, r3, #4
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0304 	and.w	r3, r3, #4
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b20      	ldr	r3, [pc, #128]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a1f      	ldr	r2, [pc, #124]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001ecc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b19      	ldr	r3, [pc, #100]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a18      	ldr	r2, [pc, #96]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001ee8:	f043 0301 	orr.w	r3, r3, #1
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b16      	ldr	r3, [pc, #88]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	4b12      	ldr	r3, [pc, #72]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a11      	ldr	r2, [pc, #68]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001f04:	f043 0302 	orr.w	r3, r3, #2
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f48 <MX_GPIO_Init+0xb8>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0302 	and.w	r3, r3, #2
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f16:	2200      	movs	r2, #0
 8001f18:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f1c:	480b      	ldr	r0, [pc, #44]	@ (8001f4c <MX_GPIO_Init+0xbc>)
 8001f1e:	f002 ffc9 	bl	8004eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001f22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f30:	2300      	movs	r3, #0
 8001f32:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f34:	f107 0314 	add.w	r3, r7, #20
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <MX_GPIO_Init+0xbc>)
 8001f3c:	f002 fe36 	bl	8004bac <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f40:	bf00      	nop
 8001f42:	3728      	adds	r7, #40	@ 0x28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	40020800 	.word	0x40020800

08001f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f54:	b672      	cpsid	i
}
 8001f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f58:	bf00      	nop
 8001f5a:	e7fd      	b.n	8001f58 <Error_Handler+0x8>

08001f5c <mpu6050_ADC_ConfCpltCallback>:
int16_t gz_real;

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = (uint8_t *)PtrRx;
 8001f64:	4a04      	ldr	r2, [pc, #16]	@ (8001f78 <mpu6050_ADC_ConfCpltCallback+0x1c>)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6013      	str	r3, [r2, #0]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	200006d0 	.word	0x200006d0

08001f7c <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001f84:	4a04      	ldr	r2, [pc, #16]	@ (8001f98 <mpu6050_Attach_MemWrite+0x1c>)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6013      	str	r3, [r2, #0]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	200006d4 	.word	0x200006d4

08001f9c <mpu6050_Attach_MemReadDMA>:

void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 8001fa4:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <mpu6050_Attach_MemReadDMA+0x1c>)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6013      	str	r3, [r2, #0]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200006d8 	.word	0x200006d8

08001fbc <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 8001fbc:	b590      	push	{r4, r7, lr}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 8001fc8:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <mpu6050_WriteData+0x24>)
 8001fca:	681c      	ldr	r4, [r3, #0]
 8001fcc:	78fb      	ldrb	r3, [r7, #3]
 8001fce:	2201      	movs	r2, #1
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	20d0      	movs	r0, #208	@ 0xd0
 8001fd4:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd90      	pop	{r4, r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200006d4 	.word	0x200006d4

08001fe4 <mpu6050_ReadDataDMA>:

void mpu6050_ReadDataDMA(uint8_t* buffer, size_t size, uint8_t type) {
 8001fe4:	b590      	push	{r4, r7, lr}
 8001fe6:	b085      	sub	sp, #20
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	71fb      	strb	r3, [r7, #7]
	memReadDMA(MPU6050_ADDR, buffer, size, type);
 8001ff2:	4b06      	ldr	r3, [pc, #24]	@ (800200c <mpu6050_ReadDataDMA+0x28>)
 8001ff4:	681c      	ldr	r4, [r3, #0]
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	68f9      	ldr	r1, [r7, #12]
 8001ffe:	20d0      	movs	r0, #208	@ 0xd0
 8002000:	47a0      	blx	r4
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
}
 8002002:	bf00      	nop
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	bd90      	pop	{r4, r7, pc}
 800200a:	bf00      	nop
 800200c:	200006d8 	.word	0x200006d8

08002010 <MPU6050_Init>:


void MPU6050_Init(void)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 8002016:	2300      	movs	r3, #0
 8002018:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 800201a:	1dfb      	adds	r3, r7, #7
 800201c:	216b      	movs	r1, #107	@ 0x6b
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff ffcc 	bl	8001fbc <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    //data = 0x00;
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 8002024:	1dfb      	adds	r3, r7, #7
 8002026:	211c      	movs	r1, #28
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ffc7 	bl	8001fbc <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    //data = 0x00;
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 800202e:	1dfb      	adds	r3, r7, #7
 8002030:	211b      	movs	r1, #27
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ffc2 	bl	8001fbc <mpu6050_WriteData>

}
 8002038:	bf00      	nop
 800203a:	3708      	adds	r7, #8
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <mpu6050_Read>:

char mpu6050_Read(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
	static uint8_t Rec_Data[14];
	static uint8_t state = 1;

	if (*mpu6050_RxCplt || state == 1) {
 8002044:	4ba0      	ldr	r3, [pc, #640]	@ (80022c8 <mpu6050_Read+0x288>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d104      	bne.n	8002058 <mpu6050_Read+0x18>
 800204e:	4b9f      	ldr	r3, [pc, #636]	@ (80022cc <mpu6050_Read+0x28c>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	f040 8196 	bne.w	8002384 <mpu6050_Read+0x344>
		*mpu6050_RxCplt = 0;  // Reset completion flag
 8002058:	4b9b      	ldr	r3, [pc, #620]	@ (80022c8 <mpu6050_Read+0x288>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
		switch (state) {
 8002060:	4b9a      	ldr	r3, [pc, #616]	@ (80022cc <mpu6050_Read+0x28c>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d002      	beq.n	800206e <mpu6050_Read+0x2e>
 8002068:	2b02      	cmp	r3, #2
 800206a:	d009      	beq.n	8002080 <mpu6050_Read+0x40>
 800206c:	e18a      	b.n	8002384 <mpu6050_Read+0x344>
		case 1:
			state=2;
 800206e:	4b97      	ldr	r3, [pc, #604]	@ (80022cc <mpu6050_Read+0x28c>)
 8002070:	2202      	movs	r2, #2
 8002072:	701a      	strb	r2, [r3, #0]
			// Leer 6 bytes desde ACCEL_XOUT_H (registro 0x3B)
			mpu6050_ReadDataDMA(Rec_Data, 14, ACCEL_XOUT_H_REG);
 8002074:	223b      	movs	r2, #59	@ 0x3b
 8002076:	210e      	movs	r1, #14
 8002078:	4895      	ldr	r0, [pc, #596]	@ (80022d0 <mpu6050_Read+0x290>)
 800207a:	f7ff ffb3 	bl	8001fe4 <mpu6050_ReadDataDMA>
			break;
 800207e:	e181      	b.n	8002384 <mpu6050_Read+0x344>
		case 2:
			state=1;
 8002080:	4b92      	ldr	r3, [pc, #584]	@ (80022cc <mpu6050_Read+0x28c>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
			// Combinar bytes altos y bajos en variables de 16 bits con signo
			//Valores accelerometro
			ax = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); //primer byte  es la parte alta, segundo parte baja
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <mpu6050_Read+0x290>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b21b      	sxth	r3, r3
 800208c:	021b      	lsls	r3, r3, #8
 800208e:	b21a      	sxth	r2, r3
 8002090:	4b8f      	ldr	r3, [pc, #572]	@ (80022d0 <mpu6050_Read+0x290>)
 8002092:	785b      	ldrb	r3, [r3, #1]
 8002094:	b21b      	sxth	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	b21b      	sxth	r3, r3
 800209a:	461a      	mov	r2, r3
 800209c:	4b8d      	ldr	r3, [pc, #564]	@ (80022d4 <mpu6050_Read+0x294>)
 800209e:	601a      	str	r2, [r3, #0]
			ay = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80020a0:	4b8b      	ldr	r3, [pc, #556]	@ (80022d0 <mpu6050_Read+0x290>)
 80020a2:	789b      	ldrb	r3, [r3, #2]
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	021b      	lsls	r3, r3, #8
 80020a8:	b21a      	sxth	r2, r3
 80020aa:	4b89      	ldr	r3, [pc, #548]	@ (80022d0 <mpu6050_Read+0x290>)
 80020ac:	78db      	ldrb	r3, [r3, #3]
 80020ae:	b21b      	sxth	r3, r3
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b21b      	sxth	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b88      	ldr	r3, [pc, #544]	@ (80022d8 <mpu6050_Read+0x298>)
 80020b8:	601a      	str	r2, [r3, #0]
			az = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80020ba:	4b85      	ldr	r3, [pc, #532]	@ (80022d0 <mpu6050_Read+0x290>)
 80020bc:	791b      	ldrb	r3, [r3, #4]
 80020be:	b21b      	sxth	r3, r3
 80020c0:	021b      	lsls	r3, r3, #8
 80020c2:	b21a      	sxth	r2, r3
 80020c4:	4b82      	ldr	r3, [pc, #520]	@ (80022d0 <mpu6050_Read+0x290>)
 80020c6:	795b      	ldrb	r3, [r3, #5]
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	4313      	orrs	r3, r2
 80020cc:	b21b      	sxth	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	4b82      	ldr	r3, [pc, #520]	@ (80022dc <mpu6050_Read+0x29c>)
 80020d2:	601a      	str	r2, [r3, #0]
			//Medida temperatura
			//t = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
			//Valores del giroscopio
			gx = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80020d4:	4b7e      	ldr	r3, [pc, #504]	@ (80022d0 <mpu6050_Read+0x290>)
 80020d6:	7a1b      	ldrb	r3, [r3, #8]
 80020d8:	b21b      	sxth	r3, r3
 80020da:	021b      	lsls	r3, r3, #8
 80020dc:	b21a      	sxth	r2, r3
 80020de:	4b7c      	ldr	r3, [pc, #496]	@ (80022d0 <mpu6050_Read+0x290>)
 80020e0:	7a5b      	ldrb	r3, [r3, #9]
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b7d      	ldr	r3, [pc, #500]	@ (80022e0 <mpu6050_Read+0x2a0>)
 80020ec:	601a      	str	r2, [r3, #0]
			gy = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80020ee:	4b78      	ldr	r3, [pc, #480]	@ (80022d0 <mpu6050_Read+0x290>)
 80020f0:	7a9b      	ldrb	r3, [r3, #10]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	021b      	lsls	r3, r3, #8
 80020f6:	b21a      	sxth	r2, r3
 80020f8:	4b75      	ldr	r3, [pc, #468]	@ (80022d0 <mpu6050_Read+0x290>)
 80020fa:	7adb      	ldrb	r3, [r3, #11]
 80020fc:	b21b      	sxth	r3, r3
 80020fe:	4313      	orrs	r3, r2
 8002100:	b21b      	sxth	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	4b77      	ldr	r3, [pc, #476]	@ (80022e4 <mpu6050_Read+0x2a4>)
 8002106:	601a      	str	r2, [r3, #0]
			gz = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <mpu6050_Read+0x290>)
 800210a:	7b1b      	ldrb	r3, [r3, #12]
 800210c:	b21b      	sxth	r3, r3
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	b21a      	sxth	r2, r3
 8002112:	4b6f      	ldr	r3, [pc, #444]	@ (80022d0 <mpu6050_Read+0x290>)
 8002114:	7b5b      	ldrb	r3, [r3, #13]
 8002116:	b21b      	sxth	r3, r3
 8002118:	4313      	orrs	r3, r2
 800211a:	b21b      	sxth	r3, r3
 800211c:	461a      	mov	r2, r3
 800211e:	4b72      	ldr	r3, [pc, #456]	@ (80022e8 <mpu6050_Read+0x2a8>)
 8002120:	601a      	str	r2, [r3, #0]


			if (abs(ax) <= OFFSET_AX)
 8002122:	4b6c      	ldr	r3, [pc, #432]	@ (80022d4 <mpu6050_Read+0x294>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 800212a:	db08      	blt.n	800213e <mpu6050_Read+0xfe>
 800212c:	4b69      	ldr	r3, [pc, #420]	@ (80022d4 <mpu6050_Read+0x294>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8002134:	dc03      	bgt.n	800213e <mpu6050_Read+0xfe>
				ax_real = 0;
 8002136:	4b6d      	ldr	r3, [pc, #436]	@ (80022ec <mpu6050_Read+0x2ac>)
 8002138:	2200      	movs	r2, #0
 800213a:	801a      	strh	r2, [r3, #0]
 800213c:	e025      	b.n	800218a <mpu6050_Read+0x14a>
			else
				ax_real = (ax / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 800213e:	4b65      	ldr	r3, [pc, #404]	@ (80022d4 <mpu6050_Read+0x294>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800214a:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 80022f0 <mpu6050_Read+0x2b0>
 800214e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002152:	ee16 0a90 	vmov	r0, s13
 8002156:	f7fe fb21 	bl	800079c <__aeabi_f2d>
 800215a:	a359      	add	r3, pc, #356	@ (adr r3, 80022c0 <mpu6050_Read+0x280>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe f88e 	bl	8000280 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	4b60      	ldr	r3, [pc, #384]	@ (80022f4 <mpu6050_Read+0x2b4>)
 8002172:	f7fe f885 	bl	8000280 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f7fe fb65 	bl	800084c <__aeabi_d2iz>
 8002182:	4603      	mov	r3, r0
 8002184:	b21a      	sxth	r2, r3
 8002186:	4b59      	ldr	r3, [pc, #356]	@ (80022ec <mpu6050_Read+0x2ac>)
 8002188:	801a      	strh	r2, [r3, #0]

			if (abs(ay) <= OFFSET_AY)
 800218a:	4b53      	ldr	r3, [pc, #332]	@ (80022d8 <mpu6050_Read+0x298>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8002192:	db08      	blt.n	80021a6 <mpu6050_Read+0x166>
 8002194:	4b50      	ldr	r3, [pc, #320]	@ (80022d8 <mpu6050_Read+0x298>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 800219c:	dc03      	bgt.n	80021a6 <mpu6050_Read+0x166>
				ay_real = 0;
 800219e:	4b56      	ldr	r3, [pc, #344]	@ (80022f8 <mpu6050_Read+0x2b8>)
 80021a0:	2200      	movs	r2, #0
 80021a2:	801a      	strh	r2, [r3, #0]
 80021a4:	e025      	b.n	80021f2 <mpu6050_Read+0x1b2>
			else
				ay_real = (ay / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 80021a6:	4b4c      	ldr	r3, [pc, #304]	@ (80022d8 <mpu6050_Read+0x298>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	ee07 3a90 	vmov	s15, r3
 80021ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021b2:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80022f0 <mpu6050_Read+0x2b0>
 80021b6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021ba:	ee16 0a90 	vmov	r0, s13
 80021be:	f7fe faed 	bl	800079c <__aeabi_f2d>
 80021c2:	a33f      	add	r3, pc, #252	@ (adr r3, 80022c0 <mpu6050_Read+0x280>)
 80021c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c8:	f7fe f85a 	bl	8000280 <__aeabi_dmul>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4610      	mov	r0, r2
 80021d2:	4619      	mov	r1, r3
 80021d4:	f04f 0200 	mov.w	r2, #0
 80021d8:	4b46      	ldr	r3, [pc, #280]	@ (80022f4 <mpu6050_Read+0x2b4>)
 80021da:	f7fe f851 	bl	8000280 <__aeabi_dmul>
 80021de:	4602      	mov	r2, r0
 80021e0:	460b      	mov	r3, r1
 80021e2:	4610      	mov	r0, r2
 80021e4:	4619      	mov	r1, r3
 80021e6:	f7fe fb31 	bl	800084c <__aeabi_d2iz>
 80021ea:	4603      	mov	r3, r0
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	4b42      	ldr	r3, [pc, #264]	@ (80022f8 <mpu6050_Read+0x2b8>)
 80021f0:	801a      	strh	r2, [r3, #0]

			if (abs(az) <= OFFSET_AZ)
 80021f2:	4b3a      	ldr	r3, [pc, #232]	@ (80022dc <mpu6050_Read+0x29c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 80021fa:	db08      	blt.n	800220e <mpu6050_Read+0x1ce>
 80021fc:	4b37      	ldr	r3, [pc, #220]	@ (80022dc <mpu6050_Read+0x29c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8002204:	dc03      	bgt.n	800220e <mpu6050_Read+0x1ce>
				az_real = 0;//9.81 * MULTIPLICADORFLOAT; // en reposo debería medir ~1g hacia Z
 8002206:	4b3d      	ldr	r3, [pc, #244]	@ (80022fc <mpu6050_Read+0x2bc>)
 8002208:	2200      	movs	r2, #0
 800220a:	801a      	strh	r2, [r3, #0]
 800220c:	e025      	b.n	800225a <mpu6050_Read+0x21a>
			else
				az_real = (az / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 800220e:	4b33      	ldr	r3, [pc, #204]	@ (80022dc <mpu6050_Read+0x29c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800221a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80022f0 <mpu6050_Read+0x2b0>
 800221e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002222:	ee16 0a90 	vmov	r0, s13
 8002226:	f7fe fab9 	bl	800079c <__aeabi_f2d>
 800222a:	a325      	add	r3, pc, #148	@ (adr r3, 80022c0 <mpu6050_Read+0x280>)
 800222c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002230:	f7fe f826 	bl	8000280 <__aeabi_dmul>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	4b2c      	ldr	r3, [pc, #176]	@ (80022f4 <mpu6050_Read+0x2b4>)
 8002242:	f7fe f81d 	bl	8000280 <__aeabi_dmul>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	4610      	mov	r0, r2
 800224c:	4619      	mov	r1, r3
 800224e:	f7fe fafd 	bl	800084c <__aeabi_d2iz>
 8002252:	4603      	mov	r3, r0
 8002254:	b21a      	sxth	r2, r3
 8002256:	4b29      	ldr	r3, [pc, #164]	@ (80022fc <mpu6050_Read+0x2bc>)
 8002258:	801a      	strh	r2, [r3, #0]

			// Aplicar offset y escalar a grados/segundo (centésimas)
			if (abs(gx) <= OFFSET_GX)
 800225a:	4b21      	ldr	r3, [pc, #132]	@ (80022e0 <mpu6050_Read+0x2a0>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8002262:	db08      	blt.n	8002276 <mpu6050_Read+0x236>
 8002264:	4b1e      	ldr	r3, [pc, #120]	@ (80022e0 <mpu6050_Read+0x2a0>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 800226c:	dc03      	bgt.n	8002276 <mpu6050_Read+0x236>
				gx_real = 0;
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <mpu6050_Read+0x2c0>)
 8002270:	2200      	movs	r2, #0
 8002272:	801a      	strh	r2, [r3, #0]
 8002274:	e014      	b.n	80022a0 <mpu6050_Read+0x260>
			else
				gx_real = (gx / 131.0f) * MULTIPLICADORFLOAT;
 8002276:	4b1a      	ldr	r3, [pc, #104]	@ (80022e0 <mpu6050_Read+0x2a0>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	ee07 3a90 	vmov	s15, r3
 800227e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002282:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002304 <mpu6050_Read+0x2c4>
 8002286:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800228a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002308 <mpu6050_Read+0x2c8>
 800228e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002292:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002296:	ee17 3a90 	vmov	r3, s15
 800229a:	b21a      	sxth	r2, r3
 800229c:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <mpu6050_Read+0x2c0>)
 800229e:	801a      	strh	r2, [r3, #0]

			if (abs(gy) <= OFFSET_GY)
 80022a0:	4b10      	ldr	r3, [pc, #64]	@ (80022e4 <mpu6050_Read+0x2a4>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 80022a8:	db32      	blt.n	8002310 <mpu6050_Read+0x2d0>
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <mpu6050_Read+0x2a4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80022b2:	dc2d      	bgt.n	8002310 <mpu6050_Read+0x2d0>
				gy_real = 0;
 80022b4:	4b15      	ldr	r3, [pc, #84]	@ (800230c <mpu6050_Read+0x2cc>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	801a      	strh	r2, [r3, #0]
 80022ba:	e03e      	b.n	800233a <mpu6050_Read+0x2fa>
 80022bc:	f3af 8000 	nop.w
 80022c0:	51eb851f 	.word	0x51eb851f
 80022c4:	40239eb8 	.word	0x40239eb8
 80022c8:	200006d0 	.word	0x200006d0
 80022cc:	2000002b 	.word	0x2000002b
 80022d0:	20000700 	.word	0x20000700
 80022d4:	200006e8 	.word	0x200006e8
 80022d8:	200006ec 	.word	0x200006ec
 80022dc:	200006f0 	.word	0x200006f0
 80022e0:	200006f4 	.word	0x200006f4
 80022e4:	200006f8 	.word	0x200006f8
 80022e8:	200006fc 	.word	0x200006fc
 80022ec:	200006dc 	.word	0x200006dc
 80022f0:	46800000 	.word	0x46800000
 80022f4:	40590000 	.word	0x40590000
 80022f8:	200006de 	.word	0x200006de
 80022fc:	200006e0 	.word	0x200006e0
 8002300:	200006e2 	.word	0x200006e2
 8002304:	43030000 	.word	0x43030000
 8002308:	42c80000 	.word	0x42c80000
 800230c:	200006e4 	.word	0x200006e4
			else
				gy_real = (gy / 131.0f) * MULTIPLICADORFLOAT;
 8002310:	4b1e      	ldr	r3, [pc, #120]	@ (800238c <mpu6050_Read+0x34c>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	ee07 3a90 	vmov	s15, r3
 8002318:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800231c:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 8002390 <mpu6050_Read+0x350>
 8002320:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002324:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8002394 <mpu6050_Read+0x354>
 8002328:	ee67 7a87 	vmul.f32	s15, s15, s14
 800232c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002330:	ee17 3a90 	vmov	r3, s15
 8002334:	b21a      	sxth	r2, r3
 8002336:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <mpu6050_Read+0x358>)
 8002338:	801a      	strh	r2, [r3, #0]

			if (abs(gz) <= OFFSET_GZ)
 800233a:	4b18      	ldr	r3, [pc, #96]	@ (800239c <mpu6050_Read+0x35c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8002342:	db08      	blt.n	8002356 <mpu6050_Read+0x316>
 8002344:	4b15      	ldr	r3, [pc, #84]	@ (800239c <mpu6050_Read+0x35c>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800234c:	dc03      	bgt.n	8002356 <mpu6050_Read+0x316>
				gz_real = 0;
 800234e:	4b14      	ldr	r3, [pc, #80]	@ (80023a0 <mpu6050_Read+0x360>)
 8002350:	2200      	movs	r2, #0
 8002352:	801a      	strh	r2, [r3, #0]
 8002354:	e014      	b.n	8002380 <mpu6050_Read+0x340>
			else
				gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
 8002356:	4b11      	ldr	r3, [pc, #68]	@ (800239c <mpu6050_Read+0x35c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002362:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 8002390 <mpu6050_Read+0x350>
 8002366:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800236a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 8002394 <mpu6050_Read+0x354>
 800236e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002376:	ee17 3a90 	vmov	r3, s15
 800237a:	b21a      	sxth	r2, r3
 800237c:	4b08      	ldr	r3, [pc, #32]	@ (80023a0 <mpu6050_Read+0x360>)
 800237e:	801a      	strh	r2, [r3, #0]

			return 1;
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <mpu6050_Read+0x346>
			break;
		}
	}
	return 0;
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	200006f8 	.word	0x200006f8
 8002390:	43030000 	.word	0x43030000
 8002394:	42c80000 	.word	0x42c80000
 8002398:	200006e4 	.word	0x200006e4
 800239c:	200006fc 	.word	0x200006fc
 80023a0:	200006e6 	.word	0x200006e6

080023a4 <mpu6050_GetData>:

void mpu6050_GetData(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz) {
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	603b      	str	r3, [r7, #0]
    if (ax) *ax = ax_real;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d004      	beq.n	80023c2 <mpu6050_GetData+0x1e>
 80023b8:	4b19      	ldr	r3, [pc, #100]	@ (8002420 <mpu6050_GetData+0x7c>)
 80023ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	801a      	strh	r2, [r3, #0]
    if (ay) *ay = ay_real;
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d004      	beq.n	80023d2 <mpu6050_GetData+0x2e>
 80023c8:	4b16      	ldr	r3, [pc, #88]	@ (8002424 <mpu6050_GetData+0x80>)
 80023ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023ce:	68bb      	ldr	r3, [r7, #8]
 80023d0:	801a      	strh	r2, [r3, #0]
    if (az) *az = az_real;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <mpu6050_GetData+0x3e>
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <mpu6050_GetData+0x84>)
 80023da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	801a      	strh	r2, [r3, #0]

    if (gx) *gx = gx_real;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <mpu6050_GetData+0x4e>
 80023e8:	4b10      	ldr	r3, [pc, #64]	@ (800242c <mpu6050_GetData+0x88>)
 80023ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	801a      	strh	r2, [r3, #0]
    if (gy) *gy = gy_real;
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <mpu6050_GetData+0x5e>
 80023f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002430 <mpu6050_GetData+0x8c>)
 80023fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	801a      	strh	r2, [r3, #0]
    if (gz) *gz = gz_real;
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <mpu6050_GetData+0x6e>
 8002408:	4b0a      	ldr	r3, [pc, #40]	@ (8002434 <mpu6050_GetData+0x90>)
 800240a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	801a      	strh	r2, [r3, #0]
}
 8002412:	bf00      	nop
 8002414:	3714      	adds	r7, #20
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	200006dc 	.word	0x200006dc
 8002424:	200006de 	.word	0x200006de
 8002428:	200006e0 	.word	0x200006e0
 800242c:	200006e2 	.word	0x200006e2
 8002430:	200006e4 	.word	0x200006e4
 8002434:	200006e6 	.word	0x200006e6

08002438 <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4603      	mov	r3, r0
 8002450:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8002452:	4b05      	ldr	r3, [pc, #20]	@ (8002468 <ssd1306_WriteCommand+0x20>)
 8002454:	681c      	ldr	r4, [r3, #0]
 8002456:	1df9      	adds	r1, r7, #7
 8002458:	2300      	movs	r3, #0
 800245a:	2201      	movs	r2, #1
 800245c:	2078      	movs	r0, #120	@ 0x78
 800245e:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	bd90      	pop	{r4, r7, pc}
 8002468:	20000714 	.word	0x20000714

0800246c <ssd1306_WriteCommandDMA>:

void ssd1306_WriteCommandDMA(uint8_t byte) {
 800246c:	b590      	push	{r4, r7, lr}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	4603      	mov	r3, r0
 8002474:	71fb      	strb	r3, [r7, #7]
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8002476:	4b05      	ldr	r3, [pc, #20]	@ (800248c <ssd1306_WriteCommandDMA+0x20>)
 8002478:	681c      	ldr	r4, [r3, #0]
 800247a:	1df9      	adds	r1, r7, #7
 800247c:	2300      	movs	r3, #0
 800247e:	2201      	movs	r2, #1
 8002480:	2078      	movs	r0, #120	@ 0x78
 8002482:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bd90      	pop	{r4, r7, pc}
 800248c:	20000718 	.word	0x20000718

08002490 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002490:	b590      	push	{r4, r7, lr}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 800249a:	4b06      	ldr	r3, [pc, #24]	@ (80024b4 <ssd1306_WriteData+0x24>)
 800249c:	681c      	ldr	r4, [r3, #0]
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	b2da      	uxtb	r2, r3
 80024a2:	2340      	movs	r3, #64	@ 0x40
 80024a4:	6879      	ldr	r1, [r7, #4]
 80024a6:	2078      	movs	r0, #120	@ 0x78
 80024a8:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bd90      	pop	{r4, r7, pc}
 80024b2:	bf00      	nop
 80024b4:	20000714 	.word	0x20000714

080024b8 <ssd1306_WriteDataDMA>:

void ssd1306_WriteDataDMA(uint8_t* buffer, size_t buff_size) {
 80024b8:	b590      	push	{r4, r7, lr}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
	memWriteDMA(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 80024c2:	4b06      	ldr	r3, [pc, #24]	@ (80024dc <ssd1306_WriteDataDMA+0x24>)
 80024c4:	681c      	ldr	r4, [r3, #0]
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	2340      	movs	r3, #64	@ 0x40
 80024cc:	6879      	ldr	r1, [r7, #4]
 80024ce:	2078      	movs	r0, #120	@ 0x78
 80024d0:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd90      	pop	{r4, r7, pc}
 80024da:	bf00      	nop
 80024dc:	20000718 	.word	0x20000718

080024e0 <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 80024e8:	4a04      	ldr	r2, [pc, #16]	@ (80024fc <ssd1306_Attach_MemWriteDMA+0x1c>)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6013      	str	r3, [r2, #0]
}
 80024ee:	bf00      	nop
 80024f0:	370c      	adds	r7, #12
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	20000718 	.word	0x20000718

08002500 <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8002508:	4a04      	ldr	r2, [pc, #16]	@ (800251c <ssd1306_Attach_MemWrite+0x1c>)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6013      	str	r3, [r2, #0]
}
 800250e:	bf00      	nop
 8002510:	370c      	adds	r7, #12
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000714 	.word	0x20000714

08002520 <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 8002528:	4a04      	ldr	r2, [pc, #16]	@ (800253c <ssd1306_ADC_ConfCpltCallback+0x1c>)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6013      	str	r3, [r2, #0]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	20000710 	.word	0x20000710

08002540 <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002544:	f7ff ff78 	bl	8002438 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002548:	2064      	movs	r0, #100	@ 0x64
 800254a:	f001 f92d 	bl	80037a8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800254e:	2000      	movs	r0, #0
 8002550:	f000 faf2 	bl	8002b38 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002554:	2020      	movs	r0, #32
 8002556:	f7ff ff77 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800255a:	2000      	movs	r0, #0
 800255c:	f7ff ff74 	bl	8002448 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002560:	20b0      	movs	r0, #176	@ 0xb0
 8002562:	f7ff ff71 	bl	8002448 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002566:	20c8      	movs	r0, #200	@ 0xc8
 8002568:	f7ff ff6e 	bl	8002448 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800256c:	2000      	movs	r0, #0
 800256e:	f7ff ff6b 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002572:	2010      	movs	r0, #16
 8002574:	f7ff ff68 	bl	8002448 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002578:	2040      	movs	r0, #64	@ 0x40
 800257a:	f7ff ff65 	bl	8002448 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800257e:	20ff      	movs	r0, #255	@ 0xff
 8002580:	f000 fac6 	bl	8002b10 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002584:	20a1      	movs	r0, #161	@ 0xa1
 8002586:	f7ff ff5f 	bl	8002448 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800258a:	20a6      	movs	r0, #166	@ 0xa6
 800258c:	f7ff ff5c 	bl	8002448 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002590:	20a8      	movs	r0, #168	@ 0xa8
 8002592:	f7ff ff59 	bl	8002448 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002596:	203f      	movs	r0, #63	@ 0x3f
 8002598:	f7ff ff56 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800259c:	20a4      	movs	r0, #164	@ 0xa4
 800259e:	f7ff ff53 	bl	8002448 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80025a2:	20d3      	movs	r0, #211	@ 0xd3
 80025a4:	f7ff ff50 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff ff4d 	bl	8002448 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80025ae:	20d5      	movs	r0, #213	@ 0xd5
 80025b0:	f7ff ff4a 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80025b4:	20f0      	movs	r0, #240	@ 0xf0
 80025b6:	f7ff ff47 	bl	8002448 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80025ba:	20d9      	movs	r0, #217	@ 0xd9
 80025bc:	f7ff ff44 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80025c0:	2022      	movs	r0, #34	@ 0x22
 80025c2:	f7ff ff41 	bl	8002448 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80025c6:	20da      	movs	r0, #218	@ 0xda
 80025c8:	f7ff ff3e 	bl	8002448 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80025cc:	2012      	movs	r0, #18
 80025ce:	f7ff ff3b 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80025d2:	20db      	movs	r0, #219	@ 0xdb
 80025d4:	f7ff ff38 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80025d8:	2020      	movs	r0, #32
 80025da:	f7ff ff35 	bl	8002448 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80025de:	208d      	movs	r0, #141	@ 0x8d
 80025e0:	f7ff ff32 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80025e4:	2014      	movs	r0, #20
 80025e6:	f7ff ff2f 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80025ea:	2001      	movs	r0, #1
 80025ec:	f000 faa4 	bl	8002b38 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80025f0:	2000      	movs	r0, #0
 80025f2:	f000 f80f 	bl	8002614 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80025f6:	f000 f825 	bl	8002644 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80025fa:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <ssd1306_Init+0xd0>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002600:	4b03      	ldr	r3, [pc, #12]	@ (8002610 <ssd1306_Init+0xd0>)
 8002602:	2200      	movs	r2, #0
 8002604:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002606:	4b02      	ldr	r3, [pc, #8]	@ (8002610 <ssd1306_Init+0xd0>)
 8002608:	2201      	movs	r2, #1
 800260a:	711a      	strb	r2, [r3, #4]
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}
 8002610:	20000b1c 	.word	0x20000b1c

08002614 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <ssd1306_Fill+0x14>
 8002624:	2300      	movs	r3, #0
 8002626:	e000      	b.n	800262a <ssd1306_Fill+0x16>
 8002628:	23ff      	movs	r3, #255	@ 0xff
 800262a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800262e:	4619      	mov	r1, r3
 8002630:	4803      	ldr	r0, [pc, #12]	@ (8002640 <ssd1306_Fill+0x2c>)
 8002632:	f00c fa41 	bl	800eab8 <memset>
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	2000071c 	.word	0x2000071c

08002644 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800264a:	2300      	movs	r3, #0
 800264c:	71fb      	strb	r3, [r7, #7]
 800264e:	e016      	b.n	800267e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	3b50      	subs	r3, #80	@ 0x50
 8002654:	b2db      	uxtb	r3, r3
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff fef6 	bl	8002448 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800265c:	2000      	movs	r0, #0
 800265e:	f7ff fef3 	bl	8002448 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002662:	2010      	movs	r0, #16
 8002664:	f7ff fef0 	bl	8002448 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002668:	79fb      	ldrb	r3, [r7, #7]
 800266a:	01db      	lsls	r3, r3, #7
 800266c:	4a08      	ldr	r2, [pc, #32]	@ (8002690 <ssd1306_UpdateScreen+0x4c>)
 800266e:	4413      	add	r3, r2
 8002670:	2180      	movs	r1, #128	@ 0x80
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff0c 	bl	8002490 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	3301      	adds	r3, #1
 800267c:	71fb      	strb	r3, [r7, #7]
 800267e:	79fb      	ldrb	r3, [r7, #7]
 8002680:	2b07      	cmp	r3, #7
 8002682:	d9e5      	bls.n	8002650 <ssd1306_UpdateScreen+0xc>
    }
}
 8002684:	bf00      	nop
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	2000071c 	.word	0x2000071c

08002694 <ssd1306_UpdateScreenDMA>:


/* Write the screenbuffer with changed to the screen */
char ssd1306_UpdateScreenDMA(void) {
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	// Only proceed if I2C is ready or we're starting a new transaction

	if (*SSD1306_TxCplt || state == 1) {
 8002698:	4b2a      	ldr	r3, [pc, #168]	@ (8002744 <ssd1306_UpdateScreenDMA+0xb0>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d103      	bne.n	80026aa <ssd1306_UpdateScreenDMA+0x16>
 80026a2:	4b29      	ldr	r3, [pc, #164]	@ (8002748 <ssd1306_UpdateScreenDMA+0xb4>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d149      	bne.n	800273e <ssd1306_UpdateScreenDMA+0xaa>
		*SSD1306_TxCplt = 0;  // Reset completion flag
 80026aa:	4b26      	ldr	r3, [pc, #152]	@ (8002744 <ssd1306_UpdateScreenDMA+0xb0>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	2200      	movs	r2, #0
 80026b0:	701a      	strb	r2, [r3, #0]

		switch (state) {
 80026b2:	4b25      	ldr	r3, [pc, #148]	@ (8002748 <ssd1306_UpdateScreenDMA+0xb4>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	3b01      	subs	r3, #1
 80026b8:	2b03      	cmp	r3, #3
 80026ba:	d840      	bhi.n	800273e <ssd1306_UpdateScreenDMA+0xaa>
 80026bc:	a201      	add	r2, pc, #4	@ (adr r2, 80026c4 <ssd1306_UpdateScreenDMA+0x30>)
 80026be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c2:	bf00      	nop
 80026c4:	080026d5 	.word	0x080026d5
 80026c8:	080026eb 	.word	0x080026eb
 80026cc:	080026f9 	.word	0x080026f9
 80026d0:	08002707 	.word	0x08002707
		case 1:  // Set page address
			ssd1306_WriteCommandDMA(0xB0 + current_page);
 80026d4:	4b1d      	ldr	r3, [pc, #116]	@ (800274c <ssd1306_UpdateScreenDMA+0xb8>)
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	3b50      	subs	r3, #80	@ 0x50
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff fec5 	bl	800246c <ssd1306_WriteCommandDMA>
			state = 2;
 80026e2:	4b19      	ldr	r3, [pc, #100]	@ (8002748 <ssd1306_UpdateScreenDMA+0xb4>)
 80026e4:	2202      	movs	r2, #2
 80026e6:	701a      	strb	r2, [r3, #0]
			break;
 80026e8:	e029      	b.n	800273e <ssd1306_UpdateScreenDMA+0xaa>
		case 2:  // Set column address low nibble
			ssd1306_WriteCommandDMA(0x00 + SSD1306_X_OFFSET_LOWER);
 80026ea:	2000      	movs	r0, #0
 80026ec:	f7ff febe 	bl	800246c <ssd1306_WriteCommandDMA>
			state = 3;
 80026f0:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <ssd1306_UpdateScreenDMA+0xb4>)
 80026f2:	2203      	movs	r2, #3
 80026f4:	701a      	strb	r2, [r3, #0]
			break;
 80026f6:	e022      	b.n	800273e <ssd1306_UpdateScreenDMA+0xaa>
		case 3:  // Set column address high nibble
			ssd1306_WriteCommandDMA(0x10 + SSD1306_X_OFFSET_UPPER);
 80026f8:	2010      	movs	r0, #16
 80026fa:	f7ff feb7 	bl	800246c <ssd1306_WriteCommandDMA>
			state = 4;
 80026fe:	4b12      	ldr	r3, [pc, #72]	@ (8002748 <ssd1306_UpdateScreenDMA+0xb4>)
 8002700:	2204      	movs	r2, #4
 8002702:	701a      	strb	r2, [r3, #0]
			break;
 8002704:	e01b      	b.n	800273e <ssd1306_UpdateScreenDMA+0xaa>
		case 4:  // Write page data
			ssd1306_WriteDataDMA(&SSD1306_Buffer[SSD1306_WIDTH*current_page],SSD1306_WIDTH);
 8002706:	4b11      	ldr	r3, [pc, #68]	@ (800274c <ssd1306_UpdateScreenDMA+0xb8>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	01db      	lsls	r3, r3, #7
 800270c:	4a10      	ldr	r2, [pc, #64]	@ (8002750 <ssd1306_UpdateScreenDMA+0xbc>)
 800270e:	4413      	add	r3, r2
 8002710:	2180      	movs	r1, #128	@ 0x80
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff fed0 	bl	80024b8 <ssd1306_WriteDataDMA>
			current_page++;
 8002718:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <ssd1306_UpdateScreenDMA+0xb8>)
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	3301      	adds	r3, #1
 800271e:	b2da      	uxtb	r2, r3
 8002720:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <ssd1306_UpdateScreenDMA+0xb8>)
 8002722:	701a      	strb	r2, [r3, #0]
			state = 1;  // Start over with next page
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <ssd1306_UpdateScreenDMA+0xb4>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]

			if (current_page > 7){//SSD1306_HEIGHT/8) {
 800272a:	4b08      	ldr	r3, [pc, #32]	@ (800274c <ssd1306_UpdateScreenDMA+0xb8>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	2b07      	cmp	r3, #7
 8002730:	d904      	bls.n	800273c <ssd1306_UpdateScreenDMA+0xa8>
				current_page = 0;
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <ssd1306_UpdateScreenDMA+0xb8>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
				return 1;
 8002738:	2301      	movs	r3, #1
 800273a:	e001      	b.n	8002740 <ssd1306_UpdateScreenDMA+0xac>
			}
			break;
 800273c:	bf00      	nop
		}
	}
	return 0;
 800273e:	2300      	movs	r3, #0
}
 8002740:	4618      	mov	r0, r3
 8002742:	bd80      	pop	{r7, pc}
 8002744:	20000710 	.word	0x20000710
 8002748:	2000002c 	.word	0x2000002c
 800274c:	20000b22 	.word	0x20000b22
 8002750:	2000071c 	.word	0x2000071c

08002754 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
 800275e:	460b      	mov	r3, r1
 8002760:	71bb      	strb	r3, [r7, #6]
 8002762:	4613      	mov	r3, r2
 8002764:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	2b00      	cmp	r3, #0
 800276c:	db3d      	blt.n	80027ea <ssd1306_DrawPixel+0x96>
 800276e:	79bb      	ldrb	r3, [r7, #6]
 8002770:	2b3f      	cmp	r3, #63	@ 0x3f
 8002772:	d83a      	bhi.n	80027ea <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8002774:	797b      	ldrb	r3, [r7, #5]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d11a      	bne.n	80027b0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800277a:	79fa      	ldrb	r2, [r7, #7]
 800277c:	79bb      	ldrb	r3, [r7, #6]
 800277e:	08db      	lsrs	r3, r3, #3
 8002780:	b2d8      	uxtb	r0, r3
 8002782:	4603      	mov	r3, r0
 8002784:	01db      	lsls	r3, r3, #7
 8002786:	4413      	add	r3, r2
 8002788:	4a1b      	ldr	r2, [pc, #108]	@ (80027f8 <ssd1306_DrawPixel+0xa4>)
 800278a:	5cd3      	ldrb	r3, [r2, r3]
 800278c:	b25a      	sxtb	r2, r3
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	f003 0307 	and.w	r3, r3, #7
 8002794:	2101      	movs	r1, #1
 8002796:	fa01 f303 	lsl.w	r3, r1, r3
 800279a:	b25b      	sxtb	r3, r3
 800279c:	4313      	orrs	r3, r2
 800279e:	b259      	sxtb	r1, r3
 80027a0:	79fa      	ldrb	r2, [r7, #7]
 80027a2:	4603      	mov	r3, r0
 80027a4:	01db      	lsls	r3, r3, #7
 80027a6:	4413      	add	r3, r2
 80027a8:	b2c9      	uxtb	r1, r1
 80027aa:	4a13      	ldr	r2, [pc, #76]	@ (80027f8 <ssd1306_DrawPixel+0xa4>)
 80027ac:	54d1      	strb	r1, [r2, r3]
 80027ae:	e01d      	b.n	80027ec <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	79bb      	ldrb	r3, [r7, #6]
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	b2d8      	uxtb	r0, r3
 80027b8:	4603      	mov	r3, r0
 80027ba:	01db      	lsls	r3, r3, #7
 80027bc:	4413      	add	r3, r2
 80027be:	4a0e      	ldr	r2, [pc, #56]	@ (80027f8 <ssd1306_DrawPixel+0xa4>)
 80027c0:	5cd3      	ldrb	r3, [r2, r3]
 80027c2:	b25a      	sxtb	r2, r3
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	f003 0307 	and.w	r3, r3, #7
 80027ca:	2101      	movs	r1, #1
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	43db      	mvns	r3, r3
 80027d4:	b25b      	sxtb	r3, r3
 80027d6:	4013      	ands	r3, r2
 80027d8:	b259      	sxtb	r1, r3
 80027da:	79fa      	ldrb	r2, [r7, #7]
 80027dc:	4603      	mov	r3, r0
 80027de:	01db      	lsls	r3, r3, #7
 80027e0:	4413      	add	r3, r2
 80027e2:	b2c9      	uxtb	r1, r1
 80027e4:	4a04      	ldr	r2, [pc, #16]	@ (80027f8 <ssd1306_DrawPixel+0xa4>)
 80027e6:	54d1      	strb	r1, [r2, r3]
 80027e8:	e000      	b.n	80027ec <ssd1306_DrawPixel+0x98>
        return;
 80027ea:	bf00      	nop
    }
}
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	2000071c 	.word	0x2000071c

080027fc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80027fc:	b590      	push	{r4, r7, lr}
 80027fe:	b089      	sub	sp, #36	@ 0x24
 8002800:	af00      	add	r7, sp, #0
 8002802:	4604      	mov	r4, r0
 8002804:	4638      	mov	r0, r7
 8002806:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800280a:	4623      	mov	r3, r4
 800280c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	2b1f      	cmp	r3, #31
 8002812:	d902      	bls.n	800281a <ssd1306_WriteChar+0x1e>
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b7e      	cmp	r3, #126	@ 0x7e
 8002818:	d901      	bls.n	800281e <ssd1306_WriteChar+0x22>
        return 0;
 800281a:	2300      	movs	r3, #0
 800281c:	e079      	b.n	8002912 <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <ssd1306_WriteChar+0x34>
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	3b20      	subs	r3, #32
 800282a:	4413      	add	r3, r2
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	e000      	b.n	8002832 <ssd1306_WriteChar+0x36>
 8002830:	783b      	ldrb	r3, [r7, #0]
 8002832:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002834:	4b39      	ldr	r3, [pc, #228]	@ (800291c <ssd1306_WriteChar+0x120>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	7dfb      	ldrb	r3, [r7, #23]
 800283c:	4413      	add	r3, r2
 800283e:	2b80      	cmp	r3, #128	@ 0x80
 8002840:	dc06      	bgt.n	8002850 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002842:	4b36      	ldr	r3, [pc, #216]	@ (800291c <ssd1306_WriteChar+0x120>)
 8002844:	885b      	ldrh	r3, [r3, #2]
 8002846:	461a      	mov	r2, r3
 8002848:	787b      	ldrb	r3, [r7, #1]
 800284a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800284c:	2b40      	cmp	r3, #64	@ 0x40
 800284e:	dd01      	ble.n	8002854 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002850:	2300      	movs	r3, #0
 8002852:	e05e      	b.n	8002912 <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002854:	2300      	movs	r3, #0
 8002856:	61fb      	str	r3, [r7, #28]
 8002858:	e04d      	b.n	80028f6 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	7bfb      	ldrb	r3, [r7, #15]
 800285e:	3b20      	subs	r3, #32
 8002860:	7879      	ldrb	r1, [r7, #1]
 8002862:	fb01 f303 	mul.w	r3, r1, r3
 8002866:	4619      	mov	r1, r3
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	440b      	add	r3, r1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	4413      	add	r3, r2
 8002870:	881b      	ldrh	r3, [r3, #0]
 8002872:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8002874:	2300      	movs	r3, #0
 8002876:	61bb      	str	r3, [r7, #24]
 8002878:	e036      	b.n	80028e8 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d013      	beq.n	80028b2 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800288a:	4b24      	ldr	r3, [pc, #144]	@ (800291c <ssd1306_WriteChar+0x120>)
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	b2da      	uxtb	r2, r3
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	4413      	add	r3, r2
 8002896:	b2d8      	uxtb	r0, r3
 8002898:	4b20      	ldr	r3, [pc, #128]	@ (800291c <ssd1306_WriteChar+0x120>)
 800289a:	885b      	ldrh	r3, [r3, #2]
 800289c:	b2da      	uxtb	r2, r3
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4413      	add	r3, r2
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7ff ff52 	bl	8002754 <ssd1306_DrawPixel>
 80028b0:	e017      	b.n	80028e2 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028b2:	4b1a      	ldr	r3, [pc, #104]	@ (800291c <ssd1306_WriteChar+0x120>)
 80028b4:	881b      	ldrh	r3, [r3, #0]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b2d8      	uxtb	r0, r3
 80028c0:	4b16      	ldr	r3, [pc, #88]	@ (800291c <ssd1306_WriteChar+0x120>)
 80028c2:	885b      	ldrh	r3, [r3, #2]
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	b2d9      	uxtb	r1, r3
 80028ce:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	bf0c      	ite	eq
 80028d6:	2301      	moveq	r3, #1
 80028d8:	2300      	movne	r3, #0
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	461a      	mov	r2, r3
 80028de:	f7ff ff39 	bl	8002754 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	3301      	adds	r3, #1
 80028e6:	61bb      	str	r3, [r7, #24]
 80028e8:	7dfb      	ldrb	r3, [r7, #23]
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d3c4      	bcc.n	800287a <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	3301      	adds	r3, #1
 80028f4:	61fb      	str	r3, [r7, #28]
 80028f6:	787b      	ldrb	r3, [r7, #1]
 80028f8:	461a      	mov	r2, r3
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d3ac      	bcc.n	800285a <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002900:	4b06      	ldr	r3, [pc, #24]	@ (800291c <ssd1306_WriteChar+0x120>)
 8002902:	881a      	ldrh	r2, [r3, #0]
 8002904:	7dfb      	ldrb	r3, [r7, #23]
 8002906:	b29b      	uxth	r3, r3
 8002908:	4413      	add	r3, r2
 800290a:	b29a      	uxth	r2, r3
 800290c:	4b03      	ldr	r3, [pc, #12]	@ (800291c <ssd1306_WriteChar+0x120>)
 800290e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002910:	7bfb      	ldrb	r3, [r7, #15]
}
 8002912:	4618      	mov	r0, r3
 8002914:	3724      	adds	r7, #36	@ 0x24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd90      	pop	{r4, r7, pc}
 800291a:	bf00      	nop
 800291c:	20000b1c 	.word	0x20000b1c

08002920 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af02      	add	r7, sp, #8
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	4638      	mov	r0, r7
 800292a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800292e:	e013      	b.n	8002958 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	7818      	ldrb	r0, [r3, #0]
 8002934:	7e3b      	ldrb	r3, [r7, #24]
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	463b      	mov	r3, r7
 800293a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800293c:	f7ff ff5e 	bl	80027fc <ssd1306_WriteChar>
 8002940:	4603      	mov	r3, r0
 8002942:	461a      	mov	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	429a      	cmp	r2, r3
 800294a:	d002      	beq.n	8002952 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	e008      	b.n	8002964 <ssd1306_WriteString+0x44>
        }
        str++;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	3301      	adds	r3, #1
 8002956:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e7      	bne.n	8002930 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	781b      	ldrb	r3, [r3, #0]
}
 8002964:	4618      	mov	r0, r3
 8002966:	3710      	adds	r7, #16
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800296c:	b480      	push	{r7}
 800296e:	b083      	sub	sp, #12
 8002970:	af00      	add	r7, sp, #0
 8002972:	4603      	mov	r3, r0
 8002974:	460a      	mov	r2, r1
 8002976:	71fb      	strb	r3, [r7, #7]
 8002978:	4613      	mov	r3, r2
 800297a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800297c:	79fb      	ldrb	r3, [r7, #7]
 800297e:	b29a      	uxth	r2, r3
 8002980:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <ssd1306_SetCursor+0x2c>)
 8002982:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002984:	79bb      	ldrb	r3, [r7, #6]
 8002986:	b29a      	uxth	r2, r3
 8002988:	4b03      	ldr	r3, [pc, #12]	@ (8002998 <ssd1306_SetCursor+0x2c>)
 800298a:	805a      	strh	r2, [r3, #2]
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	20000b1c 	.word	0x20000b1c

0800299c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800299c:	b590      	push	{r4, r7, lr}
 800299e:	b089      	sub	sp, #36	@ 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	4604      	mov	r4, r0
 80029a4:	4608      	mov	r0, r1
 80029a6:	4611      	mov	r1, r2
 80029a8:	461a      	mov	r2, r3
 80029aa:	4623      	mov	r3, r4
 80029ac:	71fb      	strb	r3, [r7, #7]
 80029ae:	4603      	mov	r3, r0
 80029b0:	71bb      	strb	r3, [r7, #6]
 80029b2:	460b      	mov	r3, r1
 80029b4:	717b      	strb	r3, [r7, #5]
 80029b6:	4613      	mov	r3, r2
 80029b8:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80029ba:	797a      	ldrb	r2, [r7, #5]
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	bfb8      	it	lt
 80029c4:	425b      	neglt	r3, r3
 80029c6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80029c8:	793a      	ldrb	r2, [r7, #4]
 80029ca:	79bb      	ldrb	r3, [r7, #6]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	bfb8      	it	lt
 80029d2:	425b      	neglt	r3, r3
 80029d4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80029d6:	79fa      	ldrb	r2, [r7, #7]
 80029d8:	797b      	ldrb	r3, [r7, #5]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d201      	bcs.n	80029e2 <ssd1306_Line+0x46>
 80029de:	2301      	movs	r3, #1
 80029e0:	e001      	b.n	80029e6 <ssd1306_Line+0x4a>
 80029e2:	f04f 33ff 	mov.w	r3, #4294967295
 80029e6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80029e8:	79ba      	ldrb	r2, [r7, #6]
 80029ea:	793b      	ldrb	r3, [r7, #4]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d201      	bcs.n	80029f4 <ssd1306_Line+0x58>
 80029f0:	2301      	movs	r3, #1
 80029f2:	e001      	b.n	80029f8 <ssd1306_Line+0x5c>
 80029f4:	f04f 33ff 	mov.w	r3, #4294967295
 80029f8:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8002a02:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002a06:	7939      	ldrb	r1, [r7, #4]
 8002a08:	797b      	ldrb	r3, [r7, #5]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f7ff fea2 	bl	8002754 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002a10:	e024      	b.n	8002a5c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002a12:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002a16:	79b9      	ldrb	r1, [r7, #6]
 8002a18:	79fb      	ldrb	r3, [r7, #7]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fe9a 	bl	8002754 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	425b      	negs	r3, r3
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	dd08      	ble.n	8002a42 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002a30:	69fa      	ldr	r2, [r7, #28]
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	b2da      	uxtb	r2, r3
 8002a3c:	79fb      	ldrb	r3, [r7, #7]
 8002a3e:	4413      	add	r3, r2
 8002a40:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	da08      	bge.n	8002a5c <ssd1306_Line+0xc0>
            error += deltaX;
 8002a4a:	69fa      	ldr	r2, [r7, #28]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	4413      	add	r3, r2
 8002a50:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	b2da      	uxtb	r2, r3
 8002a56:	79bb      	ldrb	r3, [r7, #6]
 8002a58:	4413      	add	r3, r2
 8002a5a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002a5c:	79fa      	ldrb	r2, [r7, #7]
 8002a5e:	797b      	ldrb	r3, [r7, #5]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1d6      	bne.n	8002a12 <ssd1306_Line+0x76>
 8002a64:	79ba      	ldrb	r2, [r7, #6]
 8002a66:	793b      	ldrb	r3, [r7, #4]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d1d2      	bne.n	8002a12 <ssd1306_Line+0x76>
        }
    }
    return;
 8002a6c:	bf00      	nop
}
 8002a6e:	3724      	adds	r7, #36	@ 0x24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd90      	pop	{r4, r7, pc}

08002a74 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	4604      	mov	r4, r0
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4623      	mov	r3, r4
 8002a84:	71fb      	strb	r3, [r7, #7]
 8002a86:	4603      	mov	r3, r0
 8002a88:	71bb      	strb	r3, [r7, #6]
 8002a8a:	460b      	mov	r3, r1
 8002a8c:	717b      	strb	r3, [r7, #5]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002a92:	79fa      	ldrb	r2, [r7, #7]
 8002a94:	797b      	ldrb	r3, [r7, #5]
 8002a96:	4293      	cmp	r3, r2
 8002a98:	bf28      	it	cs
 8002a9a:	4613      	movcs	r3, r2
 8002a9c:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002a9e:	797a      	ldrb	r2, [r7, #5]
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	bf38      	it	cc
 8002aa6:	4613      	movcc	r3, r2
 8002aa8:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002aaa:	79ba      	ldrb	r2, [r7, #6]
 8002aac:	793b      	ldrb	r3, [r7, #4]
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	bf28      	it	cs
 8002ab2:	4613      	movcs	r3, r2
 8002ab4:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002ab6:	793a      	ldrb	r2, [r7, #4]
 8002ab8:	79bb      	ldrb	r3, [r7, #6]
 8002aba:	4293      	cmp	r3, r2
 8002abc:	bf38      	it	cc
 8002abe:	4613      	movcc	r3, r2
 8002ac0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
 8002ac4:	73fb      	strb	r3, [r7, #15]
 8002ac6:	e017      	b.n	8002af8 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002ac8:	7b7b      	ldrb	r3, [r7, #13]
 8002aca:	73bb      	strb	r3, [r7, #14]
 8002acc:	e009      	b.n	8002ae2 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002ace:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ad2:	7bf9      	ldrb	r1, [r7, #15]
 8002ad4:	7bbb      	ldrb	r3, [r7, #14]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f7ff fe3c 	bl	8002754 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002adc:	7bbb      	ldrb	r3, [r7, #14]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	73bb      	strb	r3, [r7, #14]
 8002ae2:	7bba      	ldrb	r2, [r7, #14]
 8002ae4:	7b3b      	ldrb	r3, [r7, #12]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d803      	bhi.n	8002af2 <ssd1306_FillRectangle+0x7e>
 8002aea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	daed      	bge.n	8002ace <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002af2:	7bfb      	ldrb	r3, [r7, #15]
 8002af4:	3301      	adds	r3, #1
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	7bfa      	ldrb	r2, [r7, #15]
 8002afa:	7abb      	ldrb	r3, [r7, #10]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d803      	bhi.n	8002b08 <ssd1306_FillRectangle+0x94>
 8002b00:	7bfb      	ldrb	r3, [r7, #15]
 8002b02:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b04:	d9e0      	bls.n	8002ac8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002b06:	bf00      	nop
 8002b08:	bf00      	nop
}
 8002b0a:	3714      	adds	r7, #20
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd90      	pop	{r4, r7, pc}

08002b10 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002b1a:	2381      	movs	r3, #129	@ 0x81
 8002b1c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002b1e:	7bfb      	ldrb	r3, [r7, #15]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fc91 	bl	8002448 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002b26:	79fb      	ldrb	r3, [r7, #7]
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fc8d 	bl	8002448 <ssd1306_WriteCommand>
}
 8002b2e:	bf00      	nop
 8002b30:	3710      	adds	r7, #16
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
	...

08002b38 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	4603      	mov	r3, r0
 8002b40:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002b42:	79fb      	ldrb	r3, [r7, #7]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d005      	beq.n	8002b54 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002b48:	23af      	movs	r3, #175	@ 0xaf
 8002b4a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002b4c:	4b08      	ldr	r3, [pc, #32]	@ (8002b70 <ssd1306_SetDisplayOn+0x38>)
 8002b4e:	2201      	movs	r2, #1
 8002b50:	715a      	strb	r2, [r3, #5]
 8002b52:	e004      	b.n	8002b5e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002b54:	23ae      	movs	r3, #174	@ 0xae
 8002b56:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002b58:	4b05      	ldr	r3, [pc, #20]	@ (8002b70 <ssd1306_SetDisplayOn+0x38>)
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002b5e:	7bfb      	ldrb	r3, [r7, #15]
 8002b60:	4618      	mov	r0, r3
 8002b62:	f7ff fc71 	bl	8002448 <ssd1306_WriteCommand>
}
 8002b66:	bf00      	nop
 8002b68:	3710      	adds	r7, #16
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	20000b1c 	.word	0x20000b1c

08002b74 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	607b      	str	r3, [r7, #4]
 8002b7e:	4b10      	ldr	r3, [pc, #64]	@ (8002bc0 <HAL_MspInit+0x4c>)
 8002b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b82:	4a0f      	ldr	r2, [pc, #60]	@ (8002bc0 <HAL_MspInit+0x4c>)
 8002b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <HAL_MspInit+0x4c>)
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b92:	607b      	str	r3, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	603b      	str	r3, [r7, #0]
 8002b9a:	4b09      	ldr	r3, [pc, #36]	@ (8002bc0 <HAL_MspInit+0x4c>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9e:	4a08      	ldr	r2, [pc, #32]	@ (8002bc0 <HAL_MspInit+0x4c>)
 8002ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ba6:	4b06      	ldr	r3, [pc, #24]	@ (8002bc0 <HAL_MspInit+0x4c>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bae:	603b      	str	r3, [r7, #0]
 8002bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800

08002bc4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b08a      	sub	sp, #40	@ 0x28
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bcc:	f107 0314 	add.w	r3, r7, #20
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	605a      	str	r2, [r3, #4]
 8002bd6:	609a      	str	r2, [r3, #8]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a32      	ldr	r2, [pc, #200]	@ (8002cac <HAL_ADC_MspInit+0xe8>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d15e      	bne.n	8002ca4 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]
 8002bea:	4b31      	ldr	r3, [pc, #196]	@ (8002cb0 <HAL_ADC_MspInit+0xec>)
 8002bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bee:	4a30      	ldr	r2, [pc, #192]	@ (8002cb0 <HAL_ADC_MspInit+0xec>)
 8002bf0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bf6:	4b2e      	ldr	r3, [pc, #184]	@ (8002cb0 <HAL_ADC_MspInit+0xec>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	613b      	str	r3, [r7, #16]
 8002c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c02:	2300      	movs	r3, #0
 8002c04:	60fb      	str	r3, [r7, #12]
 8002c06:	4b2a      	ldr	r3, [pc, #168]	@ (8002cb0 <HAL_ADC_MspInit+0xec>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	4a29      	ldr	r2, [pc, #164]	@ (8002cb0 <HAL_ADC_MspInit+0xec>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c12:	4b27      	ldr	r3, [pc, #156]	@ (8002cb0 <HAL_ADC_MspInit+0xec>)
 8002c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	60fb      	str	r3, [r7, #12]
 8002c1c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c1e:	23ff      	movs	r3, #255	@ 0xff
 8002c20:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c22:	2303      	movs	r3, #3
 8002c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4820      	ldr	r0, [pc, #128]	@ (8002cb4 <HAL_ADC_MspInit+0xf0>)
 8002c32:	f001 ffbb 	bl	8004bac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c36:	4b20      	ldr	r3, [pc, #128]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c38:	4a20      	ldr	r2, [pc, #128]	@ (8002cbc <HAL_ADC_MspInit+0xf8>)
 8002c3a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c3c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c42:	4b1d      	ldr	r3, [pc, #116]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c50:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c54:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c56:	4b18      	ldr	r3, [pc, #96]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c5c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c5e:	4b16      	ldr	r3, [pc, #88]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c60:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c64:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002c66:	4b14      	ldr	r3, [pc, #80]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c72:	4b11      	ldr	r3, [pc, #68]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c78:	480f      	ldr	r0, [pc, #60]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c7a:	f001 fbeb 	bl	8004454 <HAL_DMA_Init>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002c84:	f7ff f964 	bl	8001f50 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	4a0b      	ldr	r2, [pc, #44]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c8c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cb8 <HAL_ADC_MspInit+0xf4>)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002c94:	2200      	movs	r2, #0
 8002c96:	2100      	movs	r1, #0
 8002c98:	2012      	movs	r0, #18
 8002c9a:	f001 fba4 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002c9e:	2012      	movs	r0, #18
 8002ca0:	f001 fbbd 	bl	800441e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002ca4:	bf00      	nop
 8002ca6:	3728      	adds	r7, #40	@ 0x28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40012000 	.word	0x40012000
 8002cb0:	40023800 	.word	0x40023800
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	200001e8 	.word	0x200001e8
 8002cbc:	40026410 	.word	0x40026410

08002cc0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b08a      	sub	sp, #40	@ 0x28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc8:	f107 0314 	add.w	r3, r7, #20
 8002ccc:	2200      	movs	r2, #0
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	60da      	str	r2, [r3, #12]
 8002cd6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a4f      	ldr	r2, [pc, #316]	@ (8002e1c <HAL_I2C_MspInit+0x15c>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	f040 8097 	bne.w	8002e12 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	613b      	str	r3, [r7, #16]
 8002ce8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e20 <HAL_I2C_MspInit+0x160>)
 8002cea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cec:	4a4c      	ldr	r2, [pc, #304]	@ (8002e20 <HAL_I2C_MspInit+0x160>)
 8002cee:	f043 0302 	orr.w	r3, r3, #2
 8002cf2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cf4:	4b4a      	ldr	r3, [pc, #296]	@ (8002e20 <HAL_I2C_MspInit+0x160>)
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	613b      	str	r3, [r7, #16]
 8002cfe:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d00:	23c0      	movs	r3, #192	@ 0xc0
 8002d02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d04:	2312      	movs	r3, #18
 8002d06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d10:	2304      	movs	r3, #4
 8002d12:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	4619      	mov	r1, r3
 8002d1a:	4842      	ldr	r0, [pc, #264]	@ (8002e24 <HAL_I2C_MspInit+0x164>)
 8002d1c:	f001 ff46 	bl	8004bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d20:	2300      	movs	r3, #0
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	4b3e      	ldr	r3, [pc, #248]	@ (8002e20 <HAL_I2C_MspInit+0x160>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d28:	4a3d      	ldr	r2, [pc, #244]	@ (8002e20 <HAL_I2C_MspInit+0x160>)
 8002d2a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d2e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d30:	4b3b      	ldr	r3, [pc, #236]	@ (8002e20 <HAL_I2C_MspInit+0x160>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002d3c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d3e:	4a3b      	ldr	r2, [pc, #236]	@ (8002e2c <HAL_I2C_MspInit+0x16c>)
 8002d40:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002d42:	4b39      	ldr	r3, [pc, #228]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d48:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d4a:	4b37      	ldr	r3, [pc, #220]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d50:	4b35      	ldr	r3, [pc, #212]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d56:	4b34      	ldr	r3, [pc, #208]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d5c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d5e:	4b32      	ldr	r3, [pc, #200]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d64:	4b30      	ldr	r3, [pc, #192]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002d6a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d70:	4b2d      	ldr	r3, [pc, #180]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d76:	4b2c      	ldr	r3, [pc, #176]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002d7c:	482a      	ldr	r0, [pc, #168]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d7e:	f001 fb69 	bl	8004454 <HAL_DMA_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002d88:	f7ff f8e2 	bl	8001f50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a26      	ldr	r2, [pc, #152]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d90:	639a      	str	r2, [r3, #56]	@ 0x38
 8002d92:	4a25      	ldr	r2, [pc, #148]	@ (8002e28 <HAL_I2C_MspInit+0x168>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002d98:	4b25      	ldr	r3, [pc, #148]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002d9a:	4a26      	ldr	r2, [pc, #152]	@ (8002e34 <HAL_I2C_MspInit+0x174>)
 8002d9c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002d9e:	4b24      	ldr	r3, [pc, #144]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002da4:	4b22      	ldr	r3, [pc, #136]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002da6:	2240      	movs	r2, #64	@ 0x40
 8002da8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002daa:	4b21      	ldr	r3, [pc, #132]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002db0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002db2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002db6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002db8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dbe:	4b1c      	ldr	r3, [pc, #112]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002dc4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dca:	4b19      	ldr	r3, [pc, #100]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dd0:	4b17      	ldr	r3, [pc, #92]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002dd6:	4816      	ldr	r0, [pc, #88]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002dd8:	f001 fb3c 	bl	8004454 <HAL_DMA_Init>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d001      	beq.n	8002de6 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002de2:	f7ff f8b5 	bl	8001f50 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a11      	ldr	r2, [pc, #68]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002dea:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dec:	4a10      	ldr	r2, [pc, #64]	@ (8002e30 <HAL_I2C_MspInit+0x170>)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	201f      	movs	r0, #31
 8002df8:	f001 faf5 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002dfc:	201f      	movs	r0, #31
 8002dfe:	f001 fb0e 	bl	800441e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	2020      	movs	r0, #32
 8002e08:	f001 faed 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002e0c:	2020      	movs	r0, #32
 8002e0e:	f001 fb06 	bl	800441e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e12:	bf00      	nop
 8002e14:	3728      	adds	r7, #40	@ 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	40005400 	.word	0x40005400
 8002e20:	40023800 	.word	0x40023800
 8002e24:	40020400 	.word	0x40020400
 8002e28:	2000029c 	.word	0x2000029c
 8002e2c:	40026010 	.word	0x40026010
 8002e30:	200002fc 	.word	0x200002fc
 8002e34:	40026028 	.word	0x40026028

08002e38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a40      	ldr	r2, [pc, #256]	@ (8002f48 <HAL_TIM_Base_MspInit+0x110>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d12e      	bne.n	8002ea8 <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
 8002e4e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	4a3e      	ldr	r2, [pc, #248]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002e54:	f043 0301 	orr.w	r3, r3, #1
 8002e58:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e5a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	617b      	str	r3, [r7, #20]
 8002e64:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002e66:	2200      	movs	r2, #0
 8002e68:	2100      	movs	r1, #0
 8002e6a:	2018      	movs	r0, #24
 8002e6c:	f001 fabb 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002e70:	2018      	movs	r0, #24
 8002e72:	f001 fad4 	bl	800441e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2019      	movs	r0, #25
 8002e7c:	f001 fab3 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e80:	2019      	movs	r0, #25
 8002e82:	f001 facc 	bl	800441e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	201a      	movs	r0, #26
 8002e8c:	f001 faab 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002e90:	201a      	movs	r0, #26
 8002e92:	f001 fac4 	bl	800441e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	201b      	movs	r0, #27
 8002e9c:	f001 faa3 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002ea0:	201b      	movs	r0, #27
 8002ea2:	f001 fabc 	bl	800441e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002ea6:	e04a      	b.n	8002f3e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002eb0:	d116      	bne.n	8002ee0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	613b      	str	r3, [r7, #16]
 8002eb6:	4b25      	ldr	r3, [pc, #148]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eba:	4a24      	ldr	r2, [pc, #144]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002ebc:	f043 0301 	orr.w	r3, r3, #1
 8002ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ec2:	4b22      	ldr	r3, [pc, #136]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	613b      	str	r3, [r7, #16]
 8002ecc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2100      	movs	r1, #0
 8002ed2:	201c      	movs	r0, #28
 8002ed4:	f001 fa87 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ed8:	201c      	movs	r0, #28
 8002eda:	f001 faa0 	bl	800441e <HAL_NVIC_EnableIRQ>
}
 8002ede:	e02e      	b.n	8002f3e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f50 <HAL_TIM_Base_MspInit+0x118>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d116      	bne.n	8002f18 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ef2:	4a16      	ldr	r2, [pc, #88]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002ef4:	f043 0302 	orr.w	r3, r3, #2
 8002ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8002efa:	4b14      	ldr	r3, [pc, #80]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efe:	f003 0302 	and.w	r3, r3, #2
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f06:	2200      	movs	r2, #0
 8002f08:	2100      	movs	r1, #0
 8002f0a:	201d      	movs	r0, #29
 8002f0c:	f001 fa6b 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f10:	201d      	movs	r0, #29
 8002f12:	f001 fa84 	bl	800441e <HAL_NVIC_EnableIRQ>
}
 8002f16:	e012      	b.n	8002f3e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f54 <HAL_TIM_Base_MspInit+0x11c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d10d      	bne.n	8002f3e <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f22:	2300      	movs	r3, #0
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	4b09      	ldr	r3, [pc, #36]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	4a08      	ldr	r2, [pc, #32]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002f2c:	f043 0304 	orr.w	r3, r3, #4
 8002f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_TIM_Base_MspInit+0x114>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f36:	f003 0304 	and.w	r3, r3, #4
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
}
 8002f3e:	bf00      	nop
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	40010000 	.word	0x40010000
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40000400 	.word	0x40000400
 8002f54:	40000800 	.word	0x40000800

08002f58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b088      	sub	sp, #32
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f60:	f107 030c 	add.w	r3, r7, #12
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	605a      	str	r2, [r3, #4]
 8002f6a:	609a      	str	r2, [r3, #8]
 8002f6c:	60da      	str	r2, [r3, #12]
 8002f6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a12      	ldr	r2, [pc, #72]	@ (8002fc0 <HAL_TIM_MspPostInit+0x68>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d11d      	bne.n	8002fb6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	4b11      	ldr	r3, [pc, #68]	@ (8002fc4 <HAL_TIM_MspPostInit+0x6c>)
 8002f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f82:	4a10      	ldr	r2, [pc, #64]	@ (8002fc4 <HAL_TIM_MspPostInit+0x6c>)
 8002f84:	f043 0302 	orr.w	r3, r3, #2
 8002f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f8a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc4 <HAL_TIM_MspPostInit+0x6c>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	60bb      	str	r3, [r7, #8]
 8002f94:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002f96:	2333      	movs	r3, #51	@ 0x33
 8002f98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002faa:	f107 030c 	add.w	r3, r7, #12
 8002fae:	4619      	mov	r1, r3
 8002fb0:	4805      	ldr	r0, [pc, #20]	@ (8002fc8 <HAL_TIM_MspPostInit+0x70>)
 8002fb2:	f001 fdfb 	bl	8004bac <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002fb6:	bf00      	nop
 8002fb8:	3720      	adds	r7, #32
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	40020400 	.word	0x40020400

08002fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fd0:	bf00      	nop
 8002fd2:	e7fd      	b.n	8002fd0 <NMI_Handler+0x4>

08002fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fd8:	bf00      	nop
 8002fda:	e7fd      	b.n	8002fd8 <HardFault_Handler+0x4>

08002fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <MemManage_Handler+0x4>

08002fe4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <BusFault_Handler+0x4>

08002fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <UsageFault_Handler+0x4>

08002ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ff8:	bf00      	nop
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr

08003002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003002:	b480      	push	{r7}
 8003004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003010:	b480      	push	{r7}
 8003012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003022:	f000 fba1 	bl	8003768 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
	...

0800302c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003030:	4802      	ldr	r0, [pc, #8]	@ (800303c <DMA1_Stream0_IRQHandler+0x10>)
 8003032:	f001 fb37 	bl	80046a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
 800303a:	bf00      	nop
 800303c:	2000029c 	.word	0x2000029c

08003040 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003044:	4802      	ldr	r0, [pc, #8]	@ (8003050 <DMA1_Stream1_IRQHandler+0x10>)
 8003046:	f001 fb2d 	bl	80046a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800304a:	bf00      	nop
 800304c:	bd80      	pop	{r7, pc}
 800304e:	bf00      	nop
 8003050:	200002fc 	.word	0x200002fc

08003054 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003058:	4802      	ldr	r0, [pc, #8]	@ (8003064 <ADC_IRQHandler+0x10>)
 800305a:	f000 fc0c 	bl	8003876 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}
 8003062:	bf00      	nop
 8003064:	200001a0 	.word	0x200001a0

08003068 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800306c:	4802      	ldr	r0, [pc, #8]	@ (8003078 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800306e:	f006 fd8e 	bl	8009b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003072:	bf00      	nop
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	2000035c 	.word	0x2000035c

0800307c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003080:	4802      	ldr	r0, [pc, #8]	@ (800308c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003082:	f006 fd84 	bl	8009b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003086:	bf00      	nop
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	2000035c 	.word	0x2000035c

08003090 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003094:	4802      	ldr	r0, [pc, #8]	@ (80030a0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8003096:	f006 fd7a 	bl	8009b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	2000035c 	.word	0x2000035c

080030a4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030a8:	4802      	ldr	r0, [pc, #8]	@ (80030b4 <TIM1_CC_IRQHandler+0x10>)
 80030aa:	f006 fd70 	bl	8009b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80030ae:	bf00      	nop
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	2000035c 	.word	0x2000035c

080030b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030bc:	4802      	ldr	r0, [pc, #8]	@ (80030c8 <TIM2_IRQHandler+0x10>)
 80030be:	f006 fd66 	bl	8009b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030c2:	bf00      	nop
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	200003a4 	.word	0x200003a4

080030cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030d0:	4802      	ldr	r0, [pc, #8]	@ (80030dc <TIM3_IRQHandler+0x10>)
 80030d2:	f006 fd5c 	bl	8009b8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200003ec 	.word	0x200003ec

080030e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80030e4:	4802      	ldr	r0, [pc, #8]	@ (80030f0 <I2C1_EV_IRQHandler+0x10>)
 80030e6:	f002 fc5b 	bl	80059a0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	20000248 	.word	0x20000248

080030f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80030f8:	4802      	ldr	r0, [pc, #8]	@ (8003104 <I2C1_ER_IRQHandler+0x10>)
 80030fa:	f002 fdc2 	bl	8005c82 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000248 	.word	0x20000248

08003108 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800310c:	4802      	ldr	r0, [pc, #8]	@ (8003118 <DMA2_Stream0_IRQHandler+0x10>)
 800310e:	f001 fac9 	bl	80046a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200001e8 	.word	0x200001e8

0800311c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003120:	4802      	ldr	r0, [pc, #8]	@ (800312c <OTG_FS_IRQHandler+0x10>)
 8003122:	f004 fed7 	bl	8007ed4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20001414 	.word	0x20001414

08003130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003138:	4a14      	ldr	r2, [pc, #80]	@ (800318c <_sbrk+0x5c>)
 800313a:	4b15      	ldr	r3, [pc, #84]	@ (8003190 <_sbrk+0x60>)
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003144:	4b13      	ldr	r3, [pc, #76]	@ (8003194 <_sbrk+0x64>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d102      	bne.n	8003152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800314c:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <_sbrk+0x64>)
 800314e:	4a12      	ldr	r2, [pc, #72]	@ (8003198 <_sbrk+0x68>)
 8003150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003152:	4b10      	ldr	r3, [pc, #64]	@ (8003194 <_sbrk+0x64>)
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4413      	add	r3, r2
 800315a:	693a      	ldr	r2, [r7, #16]
 800315c:	429a      	cmp	r2, r3
 800315e:	d207      	bcs.n	8003170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003160:	f00b fcb2 	bl	800eac8 <__errno>
 8003164:	4603      	mov	r3, r0
 8003166:	220c      	movs	r2, #12
 8003168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800316a:	f04f 33ff 	mov.w	r3, #4294967295
 800316e:	e009      	b.n	8003184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003170:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <_sbrk+0x64>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003176:	4b07      	ldr	r3, [pc, #28]	@ (8003194 <_sbrk+0x64>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	4a05      	ldr	r2, [pc, #20]	@ (8003194 <_sbrk+0x64>)
 8003180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003182:	68fb      	ldr	r3, [r7, #12]
}
 8003184:	4618      	mov	r0, r3
 8003186:	3718      	adds	r7, #24
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	20020000 	.word	0x20020000
 8003190:	00000400 	.word	0x00000400
 8003194:	20000b24 	.word	0x20000b24
 8003198:	20001c60 	.word	0x20001c60

0800319c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031a0:	4b06      	ldr	r3, [pc, #24]	@ (80031bc <SystemInit+0x20>)
 80031a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a6:	4a05      	ldr	r2, [pc, #20]	@ (80031bc <SystemInit+0x20>)
 80031a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031b0:	bf00      	nop
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	460b      	mov	r3, r1
 80031ca:	70fb      	strb	r3, [r7, #3]
 80031cc:	4613      	mov	r3, r2
 80031ce:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 80031d0:	78bb      	ldrb	r3, [r7, #2]
 80031d2:	3301      	adds	r3, #1
 80031d4:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	795a      	ldrb	r2, [r3, #5]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	795b      	ldrb	r3, [r3, #5]
 80031ec:	1c59      	adds	r1, r3, #1
 80031ee:	b2c8      	uxtb	r0, r1
 80031f0:	6879      	ldr	r1, [r7, #4]
 80031f2:	7148      	strb	r0, [r1, #5]
 80031f4:	4413      	add	r3, r2
 80031f6:	2255      	movs	r2, #85	@ 0x55
 80031f8:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	795a      	ldrb	r2, [r3, #5]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	799b      	ldrb	r3, [r3, #6]
 8003202:	4013      	ands	r3, r2
 8003204:	b2da      	uxtb	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	795b      	ldrb	r3, [r3, #5]
 8003212:	1c59      	adds	r1, r3, #1
 8003214:	b2c8      	uxtb	r0, r1
 8003216:	6879      	ldr	r1, [r7, #4]
 8003218:	7148      	strb	r0, [r1, #5]
 800321a:	4413      	add	r3, r2
 800321c:	224e      	movs	r2, #78	@ 0x4e
 800321e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	795a      	ldrb	r2, [r3, #5]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	799b      	ldrb	r3, [r3, #6]
 8003228:	4013      	ands	r3, r2
 800322a:	b2da      	uxtb	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	795b      	ldrb	r3, [r3, #5]
 8003238:	1c59      	adds	r1, r3, #1
 800323a:	b2c8      	uxtb	r0, r1
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	7148      	strb	r0, [r1, #5]
 8003240:	4413      	add	r3, r2
 8003242:	2245      	movs	r2, #69	@ 0x45
 8003244:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	795a      	ldrb	r2, [r3, #5]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	799b      	ldrb	r3, [r3, #6]
 800324e:	4013      	ands	r3, r2
 8003250:	b2da      	uxtb	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	795b      	ldrb	r3, [r3, #5]
 800325e:	1c59      	adds	r1, r3, #1
 8003260:	b2c8      	uxtb	r0, r1
 8003262:	6879      	ldr	r1, [r7, #4]
 8003264:	7148      	strb	r0, [r1, #5]
 8003266:	4413      	add	r3, r2
 8003268:	2252      	movs	r2, #82	@ 0x52
 800326a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	795a      	ldrb	r2, [r3, #5]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	799b      	ldrb	r3, [r3, #6]
 8003274:	4013      	ands	r3, r2
 8003276:	b2da      	uxtb	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681a      	ldr	r2, [r3, #0]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	795b      	ldrb	r3, [r3, #5]
 8003284:	1c59      	adds	r1, r3, #1
 8003286:	b2c8      	uxtb	r0, r1
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	7148      	strb	r0, [r1, #5]
 800328c:	4413      	add	r3, r2
 800328e:	78ba      	ldrb	r2, [r7, #2]
 8003290:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	795a      	ldrb	r2, [r3, #5]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	799b      	ldrb	r3, [r3, #6]
 800329a:	4013      	ands	r3, r2
 800329c:	b2da      	uxtb	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	795b      	ldrb	r3, [r3, #5]
 80032aa:	1c59      	adds	r1, r3, #1
 80032ac:	b2c8      	uxtb	r0, r1
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	7148      	strb	r0, [r1, #5]
 80032b2:	4413      	add	r3, r2
 80032b4:	223a      	movs	r2, #58	@ 0x3a
 80032b6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	795a      	ldrb	r2, [r3, #5]
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	799b      	ldrb	r3, [r3, #6]
 80032c0:	4013      	ands	r3, r2
 80032c2:	b2da      	uxtb	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	795b      	ldrb	r3, [r3, #5]
 80032d0:	1c59      	adds	r1, r3, #1
 80032d2:	b2c8      	uxtb	r0, r1
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	7148      	strb	r0, [r1, #5]
 80032d8:	4413      	add	r3, r2
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	795a      	ldrb	r2, [r3, #5]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	799b      	ldrb	r3, [r3, #6]
 80032e6:	4013      	ands	r3, r2
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2207      	movs	r2, #7
 80032f2:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	7a5a      	ldrb	r2, [r3, #9]
 80032f8:	78b9      	ldrb	r1, [r7, #2]
 80032fa:	78fb      	ldrb	r3, [r7, #3]
 80032fc:	404b      	eors	r3, r1
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	4053      	eors	r3, r2
 8003302:	b2db      	uxtb	r3, r3
 8003304:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8003308:	b2da      	uxtb	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	7a5b      	ldrb	r3, [r3, #9]
}
 8003312:	4618      	mov	r0, r3
 8003314:	370c      	adds	r7, #12
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 800331e:	b480      	push	{r7}
 8003320:	b083      	sub	sp, #12
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	460b      	mov	r3, r1
 8003328:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	79db      	ldrb	r3, [r3, #7]
 800332e:	3301      	adds	r3, #1
 8003330:	b2da      	uxtb	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	795b      	ldrb	r3, [r3, #5]
 800333e:	1c59      	adds	r1, r3, #1
 8003340:	b2c8      	uxtb	r0, r1
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	7148      	strb	r0, [r1, #5]
 8003346:	4413      	add	r3, r2
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	795a      	ldrb	r2, [r3, #5]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	799b      	ldrb	r3, [r3, #6]
 8003354:	4013      	ands	r3, r2
 8003356:	b2da      	uxtb	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	7a5a      	ldrb	r2, [r3, #9]
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	4053      	eors	r3, r2
 8003364:	b2da      	uxtb	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	7a5b      	ldrb	r3, [r3, #9]
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr

0800337a <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 800337a:	b490      	push	{r4, r7}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	6078      	str	r0, [r7, #4]
 8003382:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8003384:	2300      	movs	r3, #0
 8003386:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8003388:	e02c      	b.n	80033e4 <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	79db      	ldrb	r3, [r3, #7]
 800338e:	3301      	adds	r3, #1
 8003390:	b2da      	uxtb	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 8003396:	7bfb      	ldrb	r3, [r7, #15]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	461a      	mov	r2, r3
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	441a      	add	r2, r3
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6819      	ldr	r1, [r3, #0]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	795b      	ldrb	r3, [r3, #5]
 80033a8:	1c58      	adds	r0, r3, #1
 80033aa:	b2c4      	uxtb	r4, r0
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	7144      	strb	r4, [r0, #5]
 80033b0:	440b      	add	r3, r1
 80033b2:	7812      	ldrb	r2, [r2, #0]
 80033b4:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	795a      	ldrb	r2, [r3, #5]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	799b      	ldrb	r3, [r3, #6]
 80033be:	4013      	ands	r3, r2
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	1c5a      	adds	r2, r3, #1
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	73fa      	strb	r2, [r7, #15]
 80033d0:	461a      	mov	r2, r3
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	4413      	add	r3, r2
 80033d6:	781a      	ldrb	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	7a5b      	ldrb	r3, [r3, #9]
 80033dc:	4053      	eors	r3, r2
 80033de:	b2da      	uxtb	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	461a      	mov	r2, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	4413      	add	r3, r2
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1ca      	bne.n	800338a <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	7a5b      	ldrb	r3, [r3, #9]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bc90      	pop	{r4, r7}
 8003400:	4770      	bx	lr
	...

08003404 <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	795b      	ldrb	r3, [r3, #5]
 8003414:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8003416:	e0e4      	b.n	80035e2 <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 8003418:	4b78      	ldr	r3, [pc, #480]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b07      	cmp	r3, #7
 800341e:	f200 80c9 	bhi.w	80035b4 <unerPrtcl_DecodeHeader+0x1b0>
 8003422:	a201      	add	r2, pc, #4	@ (adr r2, 8003428 <unerPrtcl_DecodeHeader+0x24>)
 8003424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003428:	08003449 	.word	0x08003449
 800342c:	08003463 	.word	0x08003463
 8003430:	080034a1 	.word	0x080034a1
 8003434:	080034cd 	.word	0x080034cd
 8003438:	080034f9 	.word	0x080034f9
 800343c:	0800350f 	.word	0x0800350f
 8003440:	080035b5 	.word	0x080035b5
 8003444:	08003571 	.word	0x08003571
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	7912      	ldrb	r2, [r2, #4]
 8003450:	4413      	add	r3, r2
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b55      	cmp	r3, #85	@ 0x55
 8003456:	f040 80b1 	bne.w	80035bc <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 800345a:	4b68      	ldr	r3, [pc, #416]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 800345c:	2201      	movs	r2, #1
 800345e:	701a      	strb	r2, [r3, #0]
                }
            break;
 8003460:	e0ac      	b.n	80035bc <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	7912      	ldrb	r2, [r2, #4]
 800346a:	4413      	add	r3, r2
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003470:	d103      	bne.n	800347a <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8003472:	4b62      	ldr	r3, [pc, #392]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 8003474:	2202      	movs	r2, #2
 8003476:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8003478:	e0a2      	b.n	80035c0 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	7912      	ldrb	r2, [r2, #4]
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b55      	cmp	r3, #85	@ 0x55
 8003488:	f000 809a 	beq.w	80035c0 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 800348c:	4b5b      	ldr	r3, [pc, #364]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	791b      	ldrb	r3, [r3, #4]
 8003496:	3b01      	subs	r3, #1
 8003498:	b2da      	uxtb	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	711a      	strb	r2, [r3, #4]
            break;
 800349e:	e08f      	b.n	80035c0 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	687a      	ldr	r2, [r7, #4]
 80034a6:	7912      	ldrb	r2, [r2, #4]
 80034a8:	4413      	add	r3, r2
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b45      	cmp	r3, #69	@ 0x45
 80034ae:	d103      	bne.n	80034b8 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 80034b0:	4b52      	ldr	r3, [pc, #328]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 80034b2:	2203      	movs	r2, #3
 80034b4:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80034b6:	e086      	b.n	80035c6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80034b8:	4b50      	ldr	r3, [pc, #320]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	791b      	ldrb	r3, [r3, #4]
 80034c2:	3b01      	subs	r3, #1
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	711a      	strb	r2, [r3, #4]
            break;
 80034ca:	e07c      	b.n	80035c6 <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	7912      	ldrb	r2, [r2, #4]
 80034d4:	4413      	add	r3, r2
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b52      	cmp	r3, #82	@ 0x52
 80034da:	d103      	bne.n	80034e4 <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 80034dc:	4b47      	ldr	r3, [pc, #284]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 80034de:	2204      	movs	r2, #4
 80034e0:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80034e2:	e070      	b.n	80035c6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80034e4:	4b45      	ldr	r3, [pc, #276]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	791b      	ldrb	r3, [r3, #4]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	711a      	strb	r2, [r3, #4]
            break;
 80034f6:	e066      	b.n	80035c6 <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	7912      	ldrb	r2, [r2, #4]
 8003500:	4413      	add	r3, r2
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8003506:	4b3d      	ldr	r3, [pc, #244]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 8003508:	2205      	movs	r2, #5
 800350a:	701a      	strb	r2, [r3, #0]
            break;
 800350c:	e05b      	b.n	80035c6 <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	7912      	ldrb	r2, [r2, #4]
 8003516:	4413      	add	r3, r2
 8003518:	781b      	ldrb	r3, [r3, #0]
 800351a:	2b3a      	cmp	r3, #58	@ 0x3a
 800351c:	d11e      	bne.n	800355c <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 800351e:	4b37      	ldr	r3, [pc, #220]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 8003520:	2207      	movs	r2, #7
 8003522:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	791b      	ldrb	r3, [r3, #4]
 8003528:	3301      	adds	r3, #1
 800352a:	b2da      	uxtb	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	7a1a      	ldrb	r2, [r3, #8]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	799b      	ldrb	r3, [r3, #6]
 8003538:	4013      	ands	r3, r2
 800353a:	b2da      	uxtb	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	7a5a      	ldrb	r2, [r3, #9]
 800354a:	7bfb      	ldrb	r3, [r7, #15]
 800354c:	4053      	eors	r3, r2
 800354e:	b2db      	uxtb	r3, r3
 8003550:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8003554:	b2da      	uxtb	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800355a:	e034      	b.n	80035c6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 800355c:	4b27      	ldr	r3, [pc, #156]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 800355e:	2200      	movs	r2, #0
 8003560:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	791b      	ldrb	r3, [r3, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	b2da      	uxtb	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	711a      	strb	r2, [r3, #4]
            break;
 800356e:	e02a      	b.n	80035c6 <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8003570:	7bfb      	ldrb	r3, [r7, #15]
 8003572:	3b01      	subs	r3, #1
 8003574:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8003576:	7bfb      	ldrb	r3, [r7, #15]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00c      	beq.n	8003596 <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	7a5a      	ldrb	r2, [r3, #9]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	7909      	ldrb	r1, [r1, #4]
 8003588:	440b      	add	r3, r1
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	4053      	eors	r3, r2
 800358e:	b2da      	uxtb	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8003594:	e016      	b.n	80035c4 <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 8003596:	4b19      	ldr	r3, [pc, #100]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 8003598:	2200      	movs	r2, #0
 800359a:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	687a      	ldr	r2, [r7, #4]
 80035a2:	7912      	ldrb	r2, [r2, #4]
 80035a4:	4413      	add	r3, r2
 80035a6:	781a      	ldrb	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7a5b      	ldrb	r3, [r3, #9]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d109      	bne.n	80035c4 <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e01d      	b.n	80035f0 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 80035b4:	4b11      	ldr	r3, [pc, #68]	@ (80035fc <unerPrtcl_DecodeHeader+0x1f8>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]
            break;
 80035ba:	e004      	b.n	80035c6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80035bc:	bf00      	nop
 80035be:	e002      	b.n	80035c6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80035c0:	bf00      	nop
 80035c2:	e000      	b.n	80035c6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80035c4:	bf00      	nop
        }
        dataRx->indexR++;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	791b      	ldrb	r3, [r3, #4]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	791a      	ldrb	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	799b      	ldrb	r3, [r3, #6]
 80035da:	4013      	ands	r3, r2
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	791b      	ldrb	r3, [r3, #4]
 80035e6:	7bba      	ldrb	r2, [r7, #14]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	f47f af15 	bne.w	8003418 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	20000b28 	.word	0x20000b28

08003600 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
 800360c:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	22ff      	movs	r2, #255	@ 0xff
 8003630:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	2200      	movs	r2, #0
 8003636:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2200      	movs	r2, #0
 8003642:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	2200      	movs	r2, #0
 8003648:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	2200      	movs	r2, #0
 800364e:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2200      	movs	r2, #0
 8003654:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	22ff      	movs	r2, #255	@ 0xff
 800365a:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	2200      	movs	r2, #0
 8003660:	725a      	strb	r2, [r3, #9]

}
 8003662:	bf00      	nop
 8003664:	3714      	adds	r7, #20
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
	...

08003670 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003670:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036a8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003674:	f7ff fd92 	bl	800319c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003678:	480c      	ldr	r0, [pc, #48]	@ (80036ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800367a:	490d      	ldr	r1, [pc, #52]	@ (80036b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800367c:	4a0d      	ldr	r2, [pc, #52]	@ (80036b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800367e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003680:	e002      	b.n	8003688 <LoopCopyDataInit>

08003682 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003682:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003684:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003686:	3304      	adds	r3, #4

08003688 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003688:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800368a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800368c:	d3f9      	bcc.n	8003682 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800368e:	4a0a      	ldr	r2, [pc, #40]	@ (80036b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003690:	4c0a      	ldr	r4, [pc, #40]	@ (80036bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8003692:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003694:	e001      	b.n	800369a <LoopFillZerobss>

08003696 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003696:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003698:	3204      	adds	r2, #4

0800369a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800369a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800369c:	d3fb      	bcc.n	8003696 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800369e:	f00b fa19 	bl	800ead4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036a2:	f7fe f819 	bl	80016d8 <main>
  bx  lr    
 80036a6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036b0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80036b4:	08010974 	.word	0x08010974
  ldr r2, =_sbss
 80036b8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80036bc:	20001c60 	.word	0x20001c60

080036c0 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036c0:	e7fe      	b.n	80036c0 <DMA1_Stream2_IRQHandler>
	...

080036c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036c8:	4b0e      	ldr	r3, [pc, #56]	@ (8003704 <HAL_Init+0x40>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a0d      	ldr	r2, [pc, #52]	@ (8003704 <HAL_Init+0x40>)
 80036ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <HAL_Init+0x40>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a0a      	ldr	r2, [pc, #40]	@ (8003704 <HAL_Init+0x40>)
 80036da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036e0:	4b08      	ldr	r3, [pc, #32]	@ (8003704 <HAL_Init+0x40>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a07      	ldr	r2, [pc, #28]	@ (8003704 <HAL_Init+0x40>)
 80036e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036ec:	2003      	movs	r0, #3
 80036ee:	f000 fe6f 	bl	80043d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80036f2:	200f      	movs	r0, #15
 80036f4:	f000 f808 	bl	8003708 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80036f8:	f7ff fa3c 	bl	8002b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	40023c00 	.word	0x40023c00

08003708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003710:	4b12      	ldr	r3, [pc, #72]	@ (800375c <HAL_InitTick+0x54>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b12      	ldr	r3, [pc, #72]	@ (8003760 <HAL_InitTick+0x58>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4619      	mov	r1, r3
 800371a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800371e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	4618      	mov	r0, r3
 8003728:	f000 fe87 	bl	800443a <HAL_SYSTICK_Config>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e00e      	b.n	8003754 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b0f      	cmp	r3, #15
 800373a:	d80a      	bhi.n	8003752 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800373c:	2200      	movs	r2, #0
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	f04f 30ff 	mov.w	r0, #4294967295
 8003744:	f000 fe4f 	bl	80043e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003748:	4a06      	ldr	r2, [pc, #24]	@ (8003764 <HAL_InitTick+0x5c>)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800374e:	2300      	movs	r3, #0
 8003750:	e000      	b.n	8003754 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003752:	2301      	movs	r3, #1
}
 8003754:	4618      	mov	r0, r3
 8003756:	3708      	adds	r7, #8
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	20000030 	.word	0x20000030
 8003760:	20000038 	.word	0x20000038
 8003764:	20000034 	.word	0x20000034

08003768 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800376c:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_IncTick+0x20>)
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	461a      	mov	r2, r3
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <HAL_IncTick+0x24>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4413      	add	r3, r2
 8003778:	4a04      	ldr	r2, [pc, #16]	@ (800378c <HAL_IncTick+0x24>)
 800377a:	6013      	str	r3, [r2, #0]
}
 800377c:	bf00      	nop
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000038 	.word	0x20000038
 800378c:	20000b2c 	.word	0x20000b2c

08003790 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003790:	b480      	push	{r7}
 8003792:	af00      	add	r7, sp, #0
  return uwTick;
 8003794:	4b03      	ldr	r3, [pc, #12]	@ (80037a4 <HAL_GetTick+0x14>)
 8003796:	681b      	ldr	r3, [r3, #0]
}
 8003798:	4618      	mov	r0, r3
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000b2c 	.word	0x20000b2c

080037a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7ff ffee 	bl	8003790 <HAL_GetTick>
 80037b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d005      	beq.n	80037ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037c2:	4b0a      	ldr	r3, [pc, #40]	@ (80037ec <HAL_Delay+0x44>)
 80037c4:	781b      	ldrb	r3, [r3, #0]
 80037c6:	461a      	mov	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4413      	add	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037ce:	bf00      	nop
 80037d0:	f7ff ffde 	bl	8003790 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	68fa      	ldr	r2, [r7, #12]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d8f7      	bhi.n	80037d0 <HAL_Delay+0x28>
  {
  }
}
 80037e0:	bf00      	nop
 80037e2:	bf00      	nop
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	20000038 	.word	0x20000038

080037f0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037f8:	2300      	movs	r3, #0
 80037fa:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d101      	bne.n	8003806 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e033      	b.n	800386e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d109      	bne.n	8003822 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7ff f9d8 	bl	8002bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003826:	f003 0310 	and.w	r3, r3, #16
 800382a:	2b00      	cmp	r3, #0
 800382c:	d118      	bne.n	8003860 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003832:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003836:	f023 0302 	bic.w	r3, r3, #2
 800383a:	f043 0202 	orr.w	r2, r3, #2
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	f000 fb6c 	bl	8003f20 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003852:	f023 0303 	bic.w	r3, r3, #3
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	641a      	str	r2, [r3, #64]	@ 0x40
 800385e:	e001      	b.n	8003864 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
}
 800386e:	4618      	mov	r0, r3
 8003870:	3710      	adds	r7, #16
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b086      	sub	sp, #24
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800387e:	2300      	movs	r3, #0
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	2300      	movs	r3, #0
 8003884:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	f003 0320 	and.w	r3, r3, #32
 80038a4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d049      	beq.n	8003940 <HAL_ADC_IRQHandler+0xca>
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d046      	beq.n	8003940 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b6:	f003 0310 	and.w	r3, r3, #16
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d105      	bne.n	80038ca <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d12b      	bne.n	8003930 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d127      	bne.n	8003930 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038e6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d006      	beq.n	80038fc <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	689b      	ldr	r3, [r3, #8]
 80038f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d119      	bne.n	8003930 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0220 	bic.w	r2, r2, #32
 800390a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003910:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d105      	bne.n	8003930 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003928:	f043 0201 	orr.w	r2, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f7fd f949 	bl	8000bc8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f06f 0212 	mvn.w	r2, #18
 800393e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800394e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d057      	beq.n	8003a06 <HAL_ADC_IRQHandler+0x190>
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d054      	beq.n	8003a06 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b00      	cmp	r3, #0
 8003966:	d105      	bne.n	8003974 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d139      	bne.n	80039f6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003988:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800398c:	2b00      	cmp	r3, #0
 800398e:	d006      	beq.n	800399e <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800399a:	2b00      	cmp	r3, #0
 800399c:	d12b      	bne.n	80039f6 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d124      	bne.n	80039f6 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11d      	bne.n	80039f6 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d119      	bne.n	80039f6 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039d0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d105      	bne.n	80039f6 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039ee:	f043 0201 	orr.w	r2, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fc10 	bl	800421c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f06f 020c 	mvn.w	r2, #12
 8003a04:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a14:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d017      	beq.n	8003a4c <HAL_ADC_IRQHandler+0x1d6>
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d014      	beq.n	8003a4c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d10d      	bne.n	8003a4c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a34:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f929 	bl	8003c94 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f06f 0201 	mvn.w	r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a5a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d015      	beq.n	8003a8e <HAL_ADC_IRQHandler+0x218>
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d012      	beq.n	8003a8e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6c:	f043 0202 	orr.w	r2, r3, #2
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f06f 0220 	mvn.w	r2, #32
 8003a7c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f912 	bl	8003ca8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0220 	mvn.w	r2, #32
 8003a8c:	601a      	str	r2, [r3, #0]
  }
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b088      	sub	sp, #32
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	60f8      	str	r0, [r7, #12]
 8003aa0:	60b9      	str	r1, [r7, #8]
 8003aa2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ab2:	2b01      	cmp	r3, #1
 8003ab4:	d101      	bne.n	8003aba <HAL_ADC_Start_DMA+0x22>
 8003ab6:	2302      	movs	r3, #2
 8003ab8:	e0d0      	b.n	8003c5c <HAL_ADC_Start_DMA+0x1c4>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	f003 0301 	and.w	r3, r3, #1
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d018      	beq.n	8003b02 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f042 0201 	orr.w	r2, r2, #1
 8003ade:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003ae0:	4b60      	ldr	r3, [pc, #384]	@ (8003c64 <HAL_ADC_Start_DMA+0x1cc>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a60      	ldr	r2, [pc, #384]	@ (8003c68 <HAL_ADC_Start_DMA+0x1d0>)
 8003ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aea:	0c9a      	lsrs	r2, r3, #18
 8003aec:	4613      	mov	r3, r2
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	4413      	add	r3, r2
 8003af2:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003af4:	e002      	b.n	8003afc <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	3b01      	subs	r3, #1
 8003afa:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1f9      	bne.n	8003af6 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b0c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b10:	d107      	bne.n	8003b22 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689a      	ldr	r2, [r3, #8]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b20:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f003 0301 	and.w	r3, r3, #1
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	f040 8088 	bne.w	8003c42 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b3a:	f023 0301 	bic.w	r3, r3, #1
 8003b3e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d007      	beq.n	8003b64 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b5c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b6c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b70:	d106      	bne.n	8003b80 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b76:	f023 0206 	bic.w	r2, r3, #6
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b7e:	e002      	b.n	8003b86 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b8e:	4b37      	ldr	r3, [pc, #220]	@ (8003c6c <HAL_ADC_Start_DMA+0x1d4>)
 8003b90:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b96:	4a36      	ldr	r2, [pc, #216]	@ (8003c70 <HAL_ADC_Start_DMA+0x1d8>)
 8003b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9e:	4a35      	ldr	r2, [pc, #212]	@ (8003c74 <HAL_ADC_Start_DMA+0x1dc>)
 8003ba0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	4a34      	ldr	r2, [pc, #208]	@ (8003c78 <HAL_ADC_Start_DMA+0x1e0>)
 8003ba8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003bc2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	689a      	ldr	r2, [r3, #8]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003bd2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	334c      	adds	r3, #76	@ 0x4c
 8003bde:	4619      	mov	r1, r3
 8003be0:	68ba      	ldr	r2, [r7, #8]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f000 fce4 	bl	80045b0 <HAL_DMA_Start_IT>
 8003be8:	4603      	mov	r3, r0
 8003bea:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 031f 	and.w	r3, r3, #31
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10f      	bne.n	8003c18 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d129      	bne.n	8003c5a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c14:	609a      	str	r2, [r3, #8]
 8003c16:	e020      	b.n	8003c5a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4a17      	ldr	r2, [pc, #92]	@ (8003c7c <HAL_ADC_Start_DMA+0x1e4>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d11b      	bne.n	8003c5a <HAL_ADC_Start_DMA+0x1c2>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d114      	bne.n	8003c5a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	689a      	ldr	r2, [r3, #8]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c3e:	609a      	str	r2, [r3, #8]
 8003c40:	e00b      	b.n	8003c5a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	f043 0210 	orr.w	r2, r3, #16
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	f043 0201 	orr.w	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3720      	adds	r7, #32
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000030 	.word	0x20000030
 8003c68:	431bde83 	.word	0x431bde83
 8003c6c:	40012300 	.word	0x40012300
 8003c70:	08004119 	.word	0x08004119
 8003c74:	080041d3 	.word	0x080041d3
 8003c78:	080041ef 	.word	0x080041ef
 8003c7c:	40012000 	.word	0x40012000

08003c80 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003c9c:	bf00      	nop
 8003c9e:	370c      	adds	r7, #12
 8003ca0:	46bd      	mov	sp, r7
 8003ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca6:	4770      	bx	lr

08003ca8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b083      	sub	sp, #12
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr

08003cbc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b085      	sub	sp, #20
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
 8003cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd0:	2b01      	cmp	r3, #1
 8003cd2:	d101      	bne.n	8003cd8 <HAL_ADC_ConfigChannel+0x1c>
 8003cd4:	2302      	movs	r3, #2
 8003cd6:	e113      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x244>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b09      	cmp	r3, #9
 8003ce6:	d925      	bls.n	8003d34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	68d9      	ldr	r1, [r3, #12]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	005b      	lsls	r3, r3, #1
 8003cfa:	4413      	add	r3, r2
 8003cfc:	3b1e      	subs	r3, #30
 8003cfe:	2207      	movs	r2, #7
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43da      	mvns	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	400a      	ands	r2, r1
 8003d0c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68d9      	ldr	r1, [r3, #12]
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	4618      	mov	r0, r3
 8003d20:	4603      	mov	r3, r0
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	4403      	add	r3, r0
 8003d26:	3b1e      	subs	r3, #30
 8003d28:	409a      	lsls	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	430a      	orrs	r2, r1
 8003d30:	60da      	str	r2, [r3, #12]
 8003d32:	e022      	b.n	8003d7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6919      	ldr	r1, [r3, #16]
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	461a      	mov	r2, r3
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	2207      	movs	r2, #7
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	43da      	mvns	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	400a      	ands	r2, r1
 8003d56:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	6919      	ldr	r1, [r3, #16]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	689a      	ldr	r2, [r3, #8]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	4618      	mov	r0, r3
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	005b      	lsls	r3, r3, #1
 8003d6e:	4403      	add	r3, r0
 8003d70:	409a      	lsls	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	2b06      	cmp	r3, #6
 8003d80:	d824      	bhi.n	8003dcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	3b05      	subs	r3, #5
 8003d94:	221f      	movs	r2, #31
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	43da      	mvns	r2, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	400a      	ands	r2, r1
 8003da2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	4618      	mov	r0, r3
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685a      	ldr	r2, [r3, #4]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	3b05      	subs	r3, #5
 8003dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	430a      	orrs	r2, r1
 8003dc8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dca:	e04c      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b0c      	cmp	r3, #12
 8003dd2:	d824      	bhi.n	8003e1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	685a      	ldr	r2, [r3, #4]
 8003dde:	4613      	mov	r3, r2
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	4413      	add	r3, r2
 8003de4:	3b23      	subs	r3, #35	@ 0x23
 8003de6:	221f      	movs	r2, #31
 8003de8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dec:	43da      	mvns	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	400a      	ands	r2, r1
 8003df4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	b29b      	uxth	r3, r3
 8003e02:	4618      	mov	r0, r3
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	685a      	ldr	r2, [r3, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	009b      	lsls	r3, r3, #2
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3b23      	subs	r3, #35	@ 0x23
 8003e10:	fa00 f203 	lsl.w	r2, r0, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e1c:	e023      	b.n	8003e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685a      	ldr	r2, [r3, #4]
 8003e28:	4613      	mov	r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	4413      	add	r3, r2
 8003e2e:	3b41      	subs	r3, #65	@ 0x41
 8003e30:	221f      	movs	r2, #31
 8003e32:	fa02 f303 	lsl.w	r3, r2, r3
 8003e36:	43da      	mvns	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	400a      	ands	r2, r1
 8003e3e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	685a      	ldr	r2, [r3, #4]
 8003e52:	4613      	mov	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4413      	add	r3, r2
 8003e58:	3b41      	subs	r3, #65	@ 0x41
 8003e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e66:	4b29      	ldr	r3, [pc, #164]	@ (8003f0c <HAL_ADC_ConfigChannel+0x250>)
 8003e68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a28      	ldr	r2, [pc, #160]	@ (8003f10 <HAL_ADC_ConfigChannel+0x254>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10f      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x1d8>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	2b12      	cmp	r3, #18
 8003e7a:	d10b      	bne.n	8003e94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1d      	ldr	r2, [pc, #116]	@ (8003f10 <HAL_ADC_ConfigChannel+0x254>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d12b      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x23a>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f14 <HAL_ADC_ConfigChannel+0x258>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <HAL_ADC_ConfigChannel+0x1f4>
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b11      	cmp	r3, #17
 8003eae:	d122      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a11      	ldr	r2, [pc, #68]	@ (8003f14 <HAL_ADC_ConfigChannel+0x258>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d111      	bne.n	8003ef6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ed2:	4b11      	ldr	r3, [pc, #68]	@ (8003f18 <HAL_ADC_ConfigChannel+0x25c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a11      	ldr	r2, [pc, #68]	@ (8003f1c <HAL_ADC_ConfigChannel+0x260>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	0c9a      	lsrs	r2, r3, #18
 8003ede:	4613      	mov	r3, r2
 8003ee0:	009b      	lsls	r3, r3, #2
 8003ee2:	4413      	add	r3, r2
 8003ee4:	005b      	lsls	r3, r3, #1
 8003ee6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ee8:	e002      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d1f9      	bne.n	8003eea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3714      	adds	r7, #20
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40012300 	.word	0x40012300
 8003f10:	40012000 	.word	0x40012000
 8003f14:	10000012 	.word	0x10000012
 8003f18:	20000030 	.word	0x20000030
 8003f1c:	431bde83 	.word	0x431bde83

08003f20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f28:	4b79      	ldr	r3, [pc, #484]	@ (8004110 <ADC_Init+0x1f0>)
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	6859      	ldr	r1, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	691b      	ldr	r3, [r3, #16]
 8003f60:	021a      	lsls	r2, r3, #8
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	6859      	ldr	r1, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	689a      	ldr	r2, [r3, #8]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	689a      	ldr	r2, [r3, #8]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6899      	ldr	r1, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fb2:	4a58      	ldr	r2, [pc, #352]	@ (8004114 <ADC_Init+0x1f4>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d022      	beq.n	8003ffe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689a      	ldr	r2, [r3, #8]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6899      	ldr	r1, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689a      	ldr	r2, [r3, #8]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	430a      	orrs	r2, r1
 8003ffa:	609a      	str	r2, [r3, #8]
 8003ffc:	e00f      	b.n	800401e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	689a      	ldr	r2, [r3, #8]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800400c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800401c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0202 	bic.w	r2, r2, #2
 800402c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6899      	ldr	r1, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	7e1b      	ldrb	r3, [r3, #24]
 8004038:	005a      	lsls	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d01b      	beq.n	8004084 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685a      	ldr	r2, [r3, #4]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800405a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800406a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004076:	3b01      	subs	r3, #1
 8004078:	035a      	lsls	r2, r3, #13
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	430a      	orrs	r2, r1
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	e007      	b.n	8004094 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004092:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80040a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	3b01      	subs	r3, #1
 80040b0:	051a      	lsls	r2, r3, #20
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689a      	ldr	r2, [r3, #8]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80040c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6899      	ldr	r1, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040d6:	025a      	lsls	r2, r3, #9
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	430a      	orrs	r2, r1
 80040de:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689a      	ldr	r2, [r3, #8]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	6899      	ldr	r1, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	029a      	lsls	r2, r3, #10
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	430a      	orrs	r2, r1
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	40012300 	.word	0x40012300
 8004114:	0f000001 	.word	0x0f000001

08004118 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004124:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800412e:	2b00      	cmp	r3, #0
 8004130:	d13c      	bne.n	80041ac <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004136:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d12b      	bne.n	80041a4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004150:	2b00      	cmp	r3, #0
 8004152:	d127      	bne.n	80041a4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800415a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800415e:	2b00      	cmp	r3, #0
 8004160:	d006      	beq.n	8004170 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800416c:	2b00      	cmp	r3, #0
 800416e:	d119      	bne.n	80041a4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	685a      	ldr	r2, [r3, #4]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f022 0220 	bic.w	r2, r2, #32
 800417e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004184:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004190:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004194:	2b00      	cmp	r3, #0
 8004196:	d105      	bne.n	80041a4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	f043 0201 	orr.w	r2, r3, #1
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f7fc fd0f 	bl	8000bc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041aa:	e00e      	b.n	80041ca <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b0:	f003 0310 	and.w	r3, r3, #16
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d003      	beq.n	80041c0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7ff fd75 	bl	8003ca8 <HAL_ADC_ErrorCallback>
}
 80041be:	e004      	b.n	80041ca <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041de:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f7ff fd4d 	bl	8003c80 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041e6:	bf00      	nop
 80041e8:	3710      	adds	r7, #16
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}

080041ee <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041ee:	b580      	push	{r7, lr}
 80041f0:	b084      	sub	sp, #16
 80041f2:	af00      	add	r7, sp, #0
 80041f4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041fa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2240      	movs	r2, #64	@ 0x40
 8004200:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004206:	f043 0204 	orr.w	r2, r3, #4
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800420e:	68f8      	ldr	r0, [r7, #12]
 8004210:	f7ff fd4a 	bl	8003ca8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004214:	bf00      	nop
 8004216:	3710      	adds	r7, #16
 8004218:	46bd      	mov	sp, r7
 800421a:	bd80      	pop	{r7, pc}

0800421c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004240:	4b0c      	ldr	r3, [pc, #48]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004246:	68ba      	ldr	r2, [r7, #8]
 8004248:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800424c:	4013      	ands	r3, r2
 800424e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004258:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800425c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004262:	4a04      	ldr	r2, [pc, #16]	@ (8004274 <__NVIC_SetPriorityGrouping+0x44>)
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	60d3      	str	r3, [r2, #12]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	e000ed00 	.word	0xe000ed00

08004278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004278:	b480      	push	{r7}
 800427a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800427c:	4b04      	ldr	r3, [pc, #16]	@ (8004290 <__NVIC_GetPriorityGrouping+0x18>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	0a1b      	lsrs	r3, r3, #8
 8004282:	f003 0307 	and.w	r3, r3, #7
}
 8004286:	4618      	mov	r0, r3
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr
 8004290:	e000ed00 	.word	0xe000ed00

08004294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
 800429a:	4603      	mov	r3, r0
 800429c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800429e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	db0b      	blt.n	80042be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042a6:	79fb      	ldrb	r3, [r7, #7]
 80042a8:	f003 021f 	and.w	r2, r3, #31
 80042ac:	4907      	ldr	r1, [pc, #28]	@ (80042cc <__NVIC_EnableIRQ+0x38>)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	095b      	lsrs	r3, r3, #5
 80042b4:	2001      	movs	r0, #1
 80042b6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042be:	bf00      	nop
 80042c0:	370c      	adds	r7, #12
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	e000e100 	.word	0xe000e100

080042d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	6039      	str	r1, [r7, #0]
 80042da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	db0a      	blt.n	80042fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	b2da      	uxtb	r2, r3
 80042e8:	490c      	ldr	r1, [pc, #48]	@ (800431c <__NVIC_SetPriority+0x4c>)
 80042ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ee:	0112      	lsls	r2, r2, #4
 80042f0:	b2d2      	uxtb	r2, r2
 80042f2:	440b      	add	r3, r1
 80042f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042f8:	e00a      	b.n	8004310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	4908      	ldr	r1, [pc, #32]	@ (8004320 <__NVIC_SetPriority+0x50>)
 8004300:	79fb      	ldrb	r3, [r7, #7]
 8004302:	f003 030f 	and.w	r3, r3, #15
 8004306:	3b04      	subs	r3, #4
 8004308:	0112      	lsls	r2, r2, #4
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	440b      	add	r3, r1
 800430e:	761a      	strb	r2, [r3, #24]
}
 8004310:	bf00      	nop
 8004312:	370c      	adds	r7, #12
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	e000e100 	.word	0xe000e100
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004324:	b480      	push	{r7}
 8004326:	b089      	sub	sp, #36	@ 0x24
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	f1c3 0307 	rsb	r3, r3, #7
 800433e:	2b04      	cmp	r3, #4
 8004340:	bf28      	it	cs
 8004342:	2304      	movcs	r3, #4
 8004344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	3304      	adds	r3, #4
 800434a:	2b06      	cmp	r3, #6
 800434c:	d902      	bls.n	8004354 <NVIC_EncodePriority+0x30>
 800434e:	69fb      	ldr	r3, [r7, #28]
 8004350:	3b03      	subs	r3, #3
 8004352:	e000      	b.n	8004356 <NVIC_EncodePriority+0x32>
 8004354:	2300      	movs	r3, #0
 8004356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004358:	f04f 32ff 	mov.w	r2, #4294967295
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	fa02 f303 	lsl.w	r3, r2, r3
 8004362:	43da      	mvns	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	401a      	ands	r2, r3
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800436c:	f04f 31ff 	mov.w	r1, #4294967295
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	43d9      	mvns	r1, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800437c:	4313      	orrs	r3, r2
         );
}
 800437e:	4618      	mov	r0, r3
 8004380:	3724      	adds	r7, #36	@ 0x24
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
	...

0800438c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3b01      	subs	r3, #1
 8004398:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800439c:	d301      	bcc.n	80043a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800439e:	2301      	movs	r3, #1
 80043a0:	e00f      	b.n	80043c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043a2:	4a0a      	ldr	r2, [pc, #40]	@ (80043cc <SysTick_Config+0x40>)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043aa:	210f      	movs	r1, #15
 80043ac:	f04f 30ff 	mov.w	r0, #4294967295
 80043b0:	f7ff ff8e 	bl	80042d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043b4:	4b05      	ldr	r3, [pc, #20]	@ (80043cc <SysTick_Config+0x40>)
 80043b6:	2200      	movs	r2, #0
 80043b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ba:	4b04      	ldr	r3, [pc, #16]	@ (80043cc <SysTick_Config+0x40>)
 80043bc:	2207      	movs	r2, #7
 80043be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}
 80043ca:	bf00      	nop
 80043cc:	e000e010 	.word	0xe000e010

080043d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	f7ff ff29 	bl	8004230 <__NVIC_SetPriorityGrouping>
}
 80043de:	bf00      	nop
 80043e0:	3708      	adds	r7, #8
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b086      	sub	sp, #24
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	4603      	mov	r3, r0
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043f4:	2300      	movs	r3, #0
 80043f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043f8:	f7ff ff3e 	bl	8004278 <__NVIC_GetPriorityGrouping>
 80043fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	68b9      	ldr	r1, [r7, #8]
 8004402:	6978      	ldr	r0, [r7, #20]
 8004404:	f7ff ff8e 	bl	8004324 <NVIC_EncodePriority>
 8004408:	4602      	mov	r2, r0
 800440a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800440e:	4611      	mov	r1, r2
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ff5d 	bl	80042d0 <__NVIC_SetPriority>
}
 8004416:	bf00      	nop
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b082      	sub	sp, #8
 8004422:	af00      	add	r7, sp, #0
 8004424:	4603      	mov	r3, r0
 8004426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff ff31 	bl	8004294 <__NVIC_EnableIRQ>
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b082      	sub	sp, #8
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f7ff ffa2 	bl	800438c <SysTick_Config>
 8004448:	4603      	mov	r3, r0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004460:	f7ff f996 	bl	8003790 <HAL_GetTick>
 8004464:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d101      	bne.n	8004470 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e099      	b.n	80045a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2202      	movs	r2, #2
 8004474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f022 0201 	bic.w	r2, r2, #1
 800448e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004490:	e00f      	b.n	80044b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004492:	f7ff f97d 	bl	8003790 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	2b05      	cmp	r3, #5
 800449e:	d908      	bls.n	80044b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2220      	movs	r2, #32
 80044a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2203      	movs	r2, #3
 80044aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e078      	b.n	80045a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0301 	and.w	r3, r3, #1
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1e8      	bne.n	8004492 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044c8:	697a      	ldr	r2, [r7, #20]
 80044ca:	4b38      	ldr	r3, [pc, #224]	@ (80045ac <HAL_DMA_Init+0x158>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	685a      	ldr	r2, [r3, #4]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6a1b      	ldr	r3, [r3, #32]
 80044fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044fe:	697a      	ldr	r2, [r7, #20]
 8004500:	4313      	orrs	r3, r2
 8004502:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004508:	2b04      	cmp	r3, #4
 800450a:	d107      	bne.n	800451c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004514:	4313      	orrs	r3, r2
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	695b      	ldr	r3, [r3, #20]
 800452a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	f023 0307 	bic.w	r3, r3, #7
 8004532:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004542:	2b04      	cmp	r3, #4
 8004544:	d117      	bne.n	8004576 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00e      	beq.n	8004576 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 faab 	bl	8004ab4 <DMA_CheckFifoParam>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	d008      	beq.n	8004576 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2240      	movs	r2, #64	@ 0x40
 8004568:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004572:	2301      	movs	r3, #1
 8004574:	e016      	b.n	80045a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fa62 	bl	8004a48 <DMA_CalcBaseAndBitshift>
 8004584:	4603      	mov	r3, r0
 8004586:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800458c:	223f      	movs	r2, #63	@ 0x3f
 800458e:	409a      	lsls	r2, r3
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3718      	adds	r7, #24
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	f010803f 	.word	0xf010803f

080045b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d101      	bne.n	80045d6 <HAL_DMA_Start_IT+0x26>
 80045d2:	2302      	movs	r3, #2
 80045d4:	e040      	b.n	8004658 <HAL_DMA_Start_IT+0xa8>
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b01      	cmp	r3, #1
 80045e8:	d12f      	bne.n	800464a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2202      	movs	r2, #2
 80045ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	68b9      	ldr	r1, [r7, #8]
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f000 f9f4 	bl	80049ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004608:	223f      	movs	r2, #63	@ 0x3f
 800460a:	409a      	lsls	r2, r3
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f042 0216 	orr.w	r2, r2, #22
 800461e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d007      	beq.n	8004638 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0208 	orr.w	r2, r2, #8
 8004636:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0201 	orr.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	e005      	b.n	8004656 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004652:	2302      	movs	r3, #2
 8004654:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004656:	7dfb      	ldrb	r3, [r7, #23]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800466e:	b2db      	uxtb	r3, r3
 8004670:	2b02      	cmp	r3, #2
 8004672:	d004      	beq.n	800467e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2280      	movs	r2, #128	@ 0x80
 8004678:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e00c      	b.n	8004698 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2205      	movs	r2, #5
 8004682:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681a      	ldr	r2, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0201 	bic.w	r2, r2, #1
 8004694:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046b0:	4b8e      	ldr	r3, [pc, #568]	@ (80048ec <HAL_DMA_IRQHandler+0x248>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a8e      	ldr	r2, [pc, #568]	@ (80048f0 <HAL_DMA_IRQHandler+0x24c>)
 80046b6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ba:	0a9b      	lsrs	r3, r3, #10
 80046bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046ce:	2208      	movs	r2, #8
 80046d0:	409a      	lsls	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	4013      	ands	r3, r2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d01a      	beq.n	8004710 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d013      	beq.n	8004710 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 0204 	bic.w	r2, r2, #4
 80046f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fc:	2208      	movs	r2, #8
 80046fe:	409a      	lsls	r2, r3
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004708:	f043 0201 	orr.w	r2, r3, #1
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004714:	2201      	movs	r2, #1
 8004716:	409a      	lsls	r2, r3
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4013      	ands	r3, r2
 800471c:	2b00      	cmp	r3, #0
 800471e:	d012      	beq.n	8004746 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00b      	beq.n	8004746 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004732:	2201      	movs	r2, #1
 8004734:	409a      	lsls	r2, r3
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800473e:	f043 0202 	orr.w	r2, r3, #2
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474a:	2204      	movs	r2, #4
 800474c:	409a      	lsls	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	4013      	ands	r3, r2
 8004752:	2b00      	cmp	r3, #0
 8004754:	d012      	beq.n	800477c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f003 0302 	and.w	r3, r3, #2
 8004760:	2b00      	cmp	r3, #0
 8004762:	d00b      	beq.n	800477c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004768:	2204      	movs	r2, #4
 800476a:	409a      	lsls	r2, r3
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004774:	f043 0204 	orr.w	r2, r3, #4
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004780:	2210      	movs	r2, #16
 8004782:	409a      	lsls	r2, r3
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4013      	ands	r3, r2
 8004788:	2b00      	cmp	r3, #0
 800478a:	d043      	beq.n	8004814 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f003 0308 	and.w	r3, r3, #8
 8004796:	2b00      	cmp	r3, #0
 8004798:	d03c      	beq.n	8004814 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800479e:	2210      	movs	r2, #16
 80047a0:	409a      	lsls	r2, r3
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d018      	beq.n	80047e6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d108      	bne.n	80047d4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d024      	beq.n	8004814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	4798      	blx	r3
 80047d2:	e01f      	b.n	8004814 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d01b      	beq.n	8004814 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	4798      	blx	r3
 80047e4:	e016      	b.n	8004814 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d107      	bne.n	8004804 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f022 0208 	bic.w	r2, r2, #8
 8004802:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004818:	2220      	movs	r2, #32
 800481a:	409a      	lsls	r2, r3
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	4013      	ands	r3, r2
 8004820:	2b00      	cmp	r3, #0
 8004822:	f000 808f 	beq.w	8004944 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8087 	beq.w	8004944 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483a:	2220      	movs	r2, #32
 800483c:	409a      	lsls	r2, r3
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b05      	cmp	r3, #5
 800484c:	d136      	bne.n	80048bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0216 	bic.w	r2, r2, #22
 800485c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800486c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <HAL_DMA_IRQHandler+0x1da>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0208 	bic.w	r2, r2, #8
 800488c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004892:	223f      	movs	r2, #63	@ 0x3f
 8004894:	409a      	lsls	r2, r3
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d07e      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	4798      	blx	r3
        }
        return;
 80048ba:	e079      	b.n	80049b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d01d      	beq.n	8004906 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d10d      	bne.n	80048f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d031      	beq.n	8004944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	4798      	blx	r3
 80048e8:	e02c      	b.n	8004944 <HAL_DMA_IRQHandler+0x2a0>
 80048ea:	bf00      	nop
 80048ec:	20000030 	.word	0x20000030
 80048f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d023      	beq.n	8004944 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	4798      	blx	r3
 8004904:	e01e      	b.n	8004944 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004910:	2b00      	cmp	r3, #0
 8004912:	d10f      	bne.n	8004934 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	681a      	ldr	r2, [r3, #0]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f022 0210 	bic.w	r2, r2, #16
 8004922:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004948:	2b00      	cmp	r3, #0
 800494a:	d032      	beq.n	80049b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d022      	beq.n	800499e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2205      	movs	r2, #5
 800495c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0201 	bic.w	r2, r2, #1
 800496e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	3301      	adds	r3, #1
 8004974:	60bb      	str	r3, [r7, #8]
 8004976:	697a      	ldr	r2, [r7, #20]
 8004978:	429a      	cmp	r2, r3
 800497a:	d307      	bcc.n	800498c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f2      	bne.n	8004970 <HAL_DMA_IRQHandler+0x2cc>
 800498a:	e000      	b.n	800498e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800498c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2201      	movs	r2, #1
 8004992:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d005      	beq.n	80049b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	4798      	blx	r3
 80049ae:	e000      	b.n	80049b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80049b0:	bf00      	nop
    }
  }
}
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b083      	sub	sp, #12
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049c6:	b2db      	uxtb	r3, r3
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b085      	sub	sp, #20
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	60b9      	str	r1, [r7, #8]
 80049f6:	607a      	str	r2, [r7, #4]
 80049f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a08:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	683a      	ldr	r2, [r7, #0]
 8004a10:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	2b40      	cmp	r3, #64	@ 0x40
 8004a18:	d108      	bne.n	8004a2c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a2a:	e007      	b.n	8004a3c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	68ba      	ldr	r2, [r7, #8]
 8004a32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	60da      	str	r2, [r3, #12]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	3b10      	subs	r3, #16
 8004a58:	4a14      	ldr	r2, [pc, #80]	@ (8004aac <DMA_CalcBaseAndBitshift+0x64>)
 8004a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5e:	091b      	lsrs	r3, r3, #4
 8004a60:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a62:	4a13      	ldr	r2, [pc, #76]	@ (8004ab0 <DMA_CalcBaseAndBitshift+0x68>)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2b03      	cmp	r3, #3
 8004a74:	d909      	bls.n	8004a8a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a7e:	f023 0303 	bic.w	r3, r3, #3
 8004a82:	1d1a      	adds	r2, r3, #4
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a88:	e007      	b.n	8004a9a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a92:	f023 0303 	bic.w	r3, r3, #3
 8004a96:	687a      	ldr	r2, [r7, #4]
 8004a98:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr
 8004aaa:	bf00      	nop
 8004aac:	aaaaaaab 	.word	0xaaaaaaab
 8004ab0:	08010928 	.word	0x08010928

08004ab4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004abc:	2300      	movs	r3, #0
 8004abe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d11f      	bne.n	8004b0e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d856      	bhi.n	8004b82 <DMA_CheckFifoParam+0xce>
 8004ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8004adc <DMA_CheckFifoParam+0x28>)
 8004ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ada:	bf00      	nop
 8004adc:	08004aed 	.word	0x08004aed
 8004ae0:	08004aff 	.word	0x08004aff
 8004ae4:	08004aed 	.word	0x08004aed
 8004ae8:	08004b83 	.word	0x08004b83
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d046      	beq.n	8004b86 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004afc:	e043      	b.n	8004b86 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b02:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b06:	d140      	bne.n	8004b8a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0c:	e03d      	b.n	8004b8a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b16:	d121      	bne.n	8004b5c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	2b03      	cmp	r3, #3
 8004b1c:	d837      	bhi.n	8004b8e <DMA_CheckFifoParam+0xda>
 8004b1e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <DMA_CheckFifoParam+0x70>)
 8004b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b24:	08004b35 	.word	0x08004b35
 8004b28:	08004b3b 	.word	0x08004b3b
 8004b2c:	08004b35 	.word	0x08004b35
 8004b30:	08004b4d 	.word	0x08004b4d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	73fb      	strb	r3, [r7, #15]
      break;
 8004b38:	e030      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b3e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d025      	beq.n	8004b92 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b4a:	e022      	b.n	8004b92 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b54:	d11f      	bne.n	8004b96 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b5a:	e01c      	b.n	8004b96 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d903      	bls.n	8004b6a <DMA_CheckFifoParam+0xb6>
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	2b03      	cmp	r3, #3
 8004b66:	d003      	beq.n	8004b70 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b68:	e018      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b6e:	e015      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d00e      	beq.n	8004b9a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b80:	e00b      	b.n	8004b9a <DMA_CheckFifoParam+0xe6>
      break;
 8004b82:	bf00      	nop
 8004b84:	e00a      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;
 8004b86:	bf00      	nop
 8004b88:	e008      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;
 8004b8a:	bf00      	nop
 8004b8c:	e006      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;
 8004b8e:	bf00      	nop
 8004b90:	e004      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;
 8004b92:	bf00      	nop
 8004b94:	e002      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;   
 8004b96:	bf00      	nop
 8004b98:	e000      	b.n	8004b9c <DMA_CheckFifoParam+0xe8>
      break;
 8004b9a:	bf00      	nop
    }
  } 
  
  return status; 
 8004b9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop

08004bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b089      	sub	sp, #36	@ 0x24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	61fb      	str	r3, [r7, #28]
 8004bc6:	e159      	b.n	8004e7c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bc8:	2201      	movs	r2, #1
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	4013      	ands	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	f040 8148 	bne.w	8004e76 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d005      	beq.n	8004bfe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bfa:	2b02      	cmp	r3, #2
 8004bfc:	d130      	bne.n	8004c60 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c04:	69fb      	ldr	r3, [r7, #28]
 8004c06:	005b      	lsls	r3, r3, #1
 8004c08:	2203      	movs	r2, #3
 8004c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c0e:	43db      	mvns	r3, r3
 8004c10:	69ba      	ldr	r2, [r7, #24]
 8004c12:	4013      	ands	r3, r2
 8004c14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	005b      	lsls	r3, r3, #1
 8004c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c22:	69ba      	ldr	r2, [r7, #24]
 8004c24:	4313      	orrs	r3, r2
 8004c26:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c34:	2201      	movs	r2, #1
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3c:	43db      	mvns	r3, r3
 8004c3e:	69ba      	ldr	r2, [r7, #24]
 8004c40:	4013      	ands	r3, r2
 8004c42:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	091b      	lsrs	r3, r3, #4
 8004c4a:	f003 0201 	and.w	r2, r3, #1
 8004c4e:	69fb      	ldr	r3, [r7, #28]
 8004c50:	fa02 f303 	lsl.w	r3, r2, r3
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	4313      	orrs	r3, r2
 8004c58:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f003 0303 	and.w	r3, r3, #3
 8004c68:	2b03      	cmp	r3, #3
 8004c6a:	d017      	beq.n	8004c9c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	005b      	lsls	r3, r3, #1
 8004c76:	2203      	movs	r2, #3
 8004c78:	fa02 f303 	lsl.w	r3, r2, r3
 8004c7c:	43db      	mvns	r3, r3
 8004c7e:	69ba      	ldr	r2, [r7, #24]
 8004c80:	4013      	ands	r3, r2
 8004c82:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	689a      	ldr	r2, [r3, #8]
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	005b      	lsls	r3, r3, #1
 8004c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c90:	69ba      	ldr	r2, [r7, #24]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f003 0303 	and.w	r3, r3, #3
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d123      	bne.n	8004cf0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	08da      	lsrs	r2, r3, #3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	3208      	adds	r2, #8
 8004cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	220f      	movs	r2, #15
 8004cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc4:	43db      	mvns	r3, r3
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	4013      	ands	r3, r2
 8004cca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	691a      	ldr	r2, [r3, #16]
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	f003 0307 	and.w	r3, r3, #7
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cdc:	69ba      	ldr	r2, [r7, #24]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	08da      	lsrs	r2, r3, #3
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	3208      	adds	r2, #8
 8004cea:	69b9      	ldr	r1, [r7, #24]
 8004cec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	2203      	movs	r2, #3
 8004cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8004d00:	43db      	mvns	r3, r3
 8004d02:	69ba      	ldr	r2, [r7, #24]
 8004d04:	4013      	ands	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f003 0203 	and.w	r2, r3, #3
 8004d10:	69fb      	ldr	r3, [r7, #28]
 8004d12:	005b      	lsls	r3, r3, #1
 8004d14:	fa02 f303 	lsl.w	r3, r2, r3
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	69ba      	ldr	r2, [r7, #24]
 8004d22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80a2 	beq.w	8004e76 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d32:	2300      	movs	r3, #0
 8004d34:	60fb      	str	r3, [r7, #12]
 8004d36:	4b57      	ldr	r3, [pc, #348]	@ (8004e94 <HAL_GPIO_Init+0x2e8>)
 8004d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3a:	4a56      	ldr	r2, [pc, #344]	@ (8004e94 <HAL_GPIO_Init+0x2e8>)
 8004d3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d42:	4b54      	ldr	r3, [pc, #336]	@ (8004e94 <HAL_GPIO_Init+0x2e8>)
 8004d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d46:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d4a:	60fb      	str	r3, [r7, #12]
 8004d4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d4e:	4a52      	ldr	r2, [pc, #328]	@ (8004e98 <HAL_GPIO_Init+0x2ec>)
 8004d50:	69fb      	ldr	r3, [r7, #28]
 8004d52:	089b      	lsrs	r3, r3, #2
 8004d54:	3302      	adds	r3, #2
 8004d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d5c:	69fb      	ldr	r3, [r7, #28]
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	220f      	movs	r2, #15
 8004d66:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6a:	43db      	mvns	r3, r3
 8004d6c:	69ba      	ldr	r2, [r7, #24]
 8004d6e:	4013      	ands	r3, r2
 8004d70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a49      	ldr	r2, [pc, #292]	@ (8004e9c <HAL_GPIO_Init+0x2f0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d019      	beq.n	8004dae <HAL_GPIO_Init+0x202>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a48      	ldr	r2, [pc, #288]	@ (8004ea0 <HAL_GPIO_Init+0x2f4>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d013      	beq.n	8004daa <HAL_GPIO_Init+0x1fe>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a47      	ldr	r2, [pc, #284]	@ (8004ea4 <HAL_GPIO_Init+0x2f8>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d00d      	beq.n	8004da6 <HAL_GPIO_Init+0x1fa>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a46      	ldr	r2, [pc, #280]	@ (8004ea8 <HAL_GPIO_Init+0x2fc>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d007      	beq.n	8004da2 <HAL_GPIO_Init+0x1f6>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a45      	ldr	r2, [pc, #276]	@ (8004eac <HAL_GPIO_Init+0x300>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d101      	bne.n	8004d9e <HAL_GPIO_Init+0x1f2>
 8004d9a:	2304      	movs	r3, #4
 8004d9c:	e008      	b.n	8004db0 <HAL_GPIO_Init+0x204>
 8004d9e:	2307      	movs	r3, #7
 8004da0:	e006      	b.n	8004db0 <HAL_GPIO_Init+0x204>
 8004da2:	2303      	movs	r3, #3
 8004da4:	e004      	b.n	8004db0 <HAL_GPIO_Init+0x204>
 8004da6:	2302      	movs	r3, #2
 8004da8:	e002      	b.n	8004db0 <HAL_GPIO_Init+0x204>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <HAL_GPIO_Init+0x204>
 8004dae:	2300      	movs	r3, #0
 8004db0:	69fa      	ldr	r2, [r7, #28]
 8004db2:	f002 0203 	and.w	r2, r2, #3
 8004db6:	0092      	lsls	r2, r2, #2
 8004db8:	4093      	lsls	r3, r2
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dc0:	4935      	ldr	r1, [pc, #212]	@ (8004e98 <HAL_GPIO_Init+0x2ec>)
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	089b      	lsrs	r3, r3, #2
 8004dc6:	3302      	adds	r3, #2
 8004dc8:	69ba      	ldr	r2, [r7, #24]
 8004dca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dce:	4b38      	ldr	r3, [pc, #224]	@ (8004eb0 <HAL_GPIO_Init+0x304>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	43db      	mvns	r3, r3
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	4013      	ands	r3, r2
 8004ddc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d003      	beq.n	8004df2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004df2:	4a2f      	ldr	r2, [pc, #188]	@ (8004eb0 <HAL_GPIO_Init+0x304>)
 8004df4:	69bb      	ldr	r3, [r7, #24]
 8004df6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004df8:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb0 <HAL_GPIO_Init+0x304>)
 8004dfa:	68db      	ldr	r3, [r3, #12]
 8004dfc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	43db      	mvns	r3, r3
 8004e02:	69ba      	ldr	r2, [r7, #24]
 8004e04:	4013      	ands	r3, r2
 8004e06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e1c:	4a24      	ldr	r2, [pc, #144]	@ (8004eb0 <HAL_GPIO_Init+0x304>)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e22:	4b23      	ldr	r3, [pc, #140]	@ (8004eb0 <HAL_GPIO_Init+0x304>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4013      	ands	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d003      	beq.n	8004e46 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e46:	4a1a      	ldr	r2, [pc, #104]	@ (8004eb0 <HAL_GPIO_Init+0x304>)
 8004e48:	69bb      	ldr	r3, [r7, #24]
 8004e4a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e4c:	4b18      	ldr	r3, [pc, #96]	@ (8004eb0 <HAL_GPIO_Init+0x304>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d003      	beq.n	8004e70 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e70:	4a0f      	ldr	r2, [pc, #60]	@ (8004eb0 <HAL_GPIO_Init+0x304>)
 8004e72:	69bb      	ldr	r3, [r7, #24]
 8004e74:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	3301      	adds	r3, #1
 8004e7a:	61fb      	str	r3, [r7, #28]
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	2b0f      	cmp	r3, #15
 8004e80:	f67f aea2 	bls.w	8004bc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop
 8004e88:	3724      	adds	r7, #36	@ 0x24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40023800 	.word	0x40023800
 8004e98:	40013800 	.word	0x40013800
 8004e9c:	40020000 	.word	0x40020000
 8004ea0:	40020400 	.word	0x40020400
 8004ea4:	40020800 	.word	0x40020800
 8004ea8:	40020c00 	.word	0x40020c00
 8004eac:	40021000 	.word	0x40021000
 8004eb0:	40013c00 	.word	0x40013c00

08004eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b083      	sub	sp, #12
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	460b      	mov	r3, r1
 8004ebe:	807b      	strh	r3, [r7, #2]
 8004ec0:	4613      	mov	r3, r2
 8004ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ec4:	787b      	ldrb	r3, [r7, #1]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eca:	887a      	ldrh	r2, [r7, #2]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ed0:	e003      	b.n	8004eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ed2:	887b      	ldrh	r3, [r7, #2]
 8004ed4:	041a      	lsls	r2, r3, #16
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	619a      	str	r2, [r3, #24]
}
 8004eda:	bf00      	nop
 8004edc:	370c      	adds	r7, #12
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr

08004ee6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ee6:	b480      	push	{r7}
 8004ee8:	b085      	sub	sp, #20
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
 8004eee:	460b      	mov	r3, r1
 8004ef0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ef8:	887a      	ldrh	r2, [r7, #2]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4013      	ands	r3, r2
 8004efe:	041a      	lsls	r2, r3, #16
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	43d9      	mvns	r1, r3
 8004f04:	887b      	ldrh	r3, [r7, #2]
 8004f06:	400b      	ands	r3, r1
 8004f08:	431a      	orrs	r2, r3
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	619a      	str	r2, [r3, #24]
}
 8004f0e:	bf00      	nop
 8004f10:	3714      	adds	r7, #20
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
	...

08004f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e12b      	b.n	8005186 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d106      	bne.n	8004f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f7fd febc 	bl	8002cc0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2224      	movs	r2, #36	@ 0x24
 8004f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f022 0201 	bic.w	r2, r2, #1
 8004f5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f80:	f004 fce6 	bl	8009950 <HAL_RCC_GetPCLK1Freq>
 8004f84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	4a81      	ldr	r2, [pc, #516]	@ (8005190 <HAL_I2C_Init+0x274>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d807      	bhi.n	8004fa0 <HAL_I2C_Init+0x84>
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a80      	ldr	r2, [pc, #512]	@ (8005194 <HAL_I2C_Init+0x278>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	bf94      	ite	ls
 8004f98:	2301      	movls	r3, #1
 8004f9a:	2300      	movhi	r3, #0
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	e006      	b.n	8004fae <HAL_I2C_Init+0x92>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a7d      	ldr	r2, [pc, #500]	@ (8005198 <HAL_I2C_Init+0x27c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	bf94      	ite	ls
 8004fa8:	2301      	movls	r3, #1
 8004faa:	2300      	movhi	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d001      	beq.n	8004fb6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e0e7      	b.n	8005186 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	4a78      	ldr	r2, [pc, #480]	@ (800519c <HAL_I2C_Init+0x280>)
 8004fba:	fba2 2303 	umull	r2, r3, r2, r3
 8004fbe:	0c9b      	lsrs	r3, r3, #18
 8004fc0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	68ba      	ldr	r2, [r7, #8]
 8004fd2:	430a      	orrs	r2, r1
 8004fd4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	6a1b      	ldr	r3, [r3, #32]
 8004fdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	4a6a      	ldr	r2, [pc, #424]	@ (8005190 <HAL_I2C_Init+0x274>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d802      	bhi.n	8004ff0 <HAL_I2C_Init+0xd4>
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	3301      	adds	r3, #1
 8004fee:	e009      	b.n	8005004 <HAL_I2C_Init+0xe8>
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ff6:	fb02 f303 	mul.w	r3, r2, r3
 8004ffa:	4a69      	ldr	r2, [pc, #420]	@ (80051a0 <HAL_I2C_Init+0x284>)
 8004ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8005000:	099b      	lsrs	r3, r3, #6
 8005002:	3301      	adds	r3, #1
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	430b      	orrs	r3, r1
 800500a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	69db      	ldr	r3, [r3, #28]
 8005012:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005016:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	495c      	ldr	r1, [pc, #368]	@ (8005190 <HAL_I2C_Init+0x274>)
 8005020:	428b      	cmp	r3, r1
 8005022:	d819      	bhi.n	8005058 <HAL_I2C_Init+0x13c>
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	1e59      	subs	r1, r3, #1
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	005b      	lsls	r3, r3, #1
 800502e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005032:	1c59      	adds	r1, r3, #1
 8005034:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005038:	400b      	ands	r3, r1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <HAL_I2C_Init+0x138>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	1e59      	subs	r1, r3, #1
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fbb1 f3f3 	udiv	r3, r1, r3
 800504c:	3301      	adds	r3, #1
 800504e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005052:	e051      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 8005054:	2304      	movs	r3, #4
 8005056:	e04f      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d111      	bne.n	8005084 <HAL_I2C_Init+0x168>
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	1e58      	subs	r0, r3, #1
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6859      	ldr	r1, [r3, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	440b      	add	r3, r1
 800506e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005072:	3301      	adds	r3, #1
 8005074:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005078:	2b00      	cmp	r3, #0
 800507a:	bf0c      	ite	eq
 800507c:	2301      	moveq	r3, #1
 800507e:	2300      	movne	r3, #0
 8005080:	b2db      	uxtb	r3, r3
 8005082:	e012      	b.n	80050aa <HAL_I2C_Init+0x18e>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	1e58      	subs	r0, r3, #1
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6859      	ldr	r1, [r3, #4]
 800508c:	460b      	mov	r3, r1
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	0099      	lsls	r1, r3, #2
 8005094:	440b      	add	r3, r1
 8005096:	fbb0 f3f3 	udiv	r3, r0, r3
 800509a:	3301      	adds	r3, #1
 800509c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	bf0c      	ite	eq
 80050a4:	2301      	moveq	r3, #1
 80050a6:	2300      	movne	r3, #0
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d001      	beq.n	80050b2 <HAL_I2C_Init+0x196>
 80050ae:	2301      	movs	r3, #1
 80050b0:	e022      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d10e      	bne.n	80050d8 <HAL_I2C_Init+0x1bc>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	1e58      	subs	r0, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6859      	ldr	r1, [r3, #4]
 80050c2:	460b      	mov	r3, r1
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	440b      	add	r3, r1
 80050c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80050cc:	3301      	adds	r3, #1
 80050ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050d2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050d6:	e00f      	b.n	80050f8 <HAL_I2C_Init+0x1dc>
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	1e58      	subs	r0, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6859      	ldr	r1, [r3, #4]
 80050e0:	460b      	mov	r3, r1
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	440b      	add	r3, r1
 80050e6:	0099      	lsls	r1, r3, #2
 80050e8:	440b      	add	r3, r1
 80050ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80050ee:	3301      	adds	r3, #1
 80050f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80050f8:	6879      	ldr	r1, [r7, #4]
 80050fa:	6809      	ldr	r1, [r1, #0]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	69da      	ldr	r2, [r3, #28]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
 8005112:	431a      	orrs	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005126:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800512a:	687a      	ldr	r2, [r7, #4]
 800512c:	6911      	ldr	r1, [r2, #16]
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	68d2      	ldr	r2, [r2, #12]
 8005132:	4311      	orrs	r1, r2
 8005134:	687a      	ldr	r2, [r7, #4]
 8005136:	6812      	ldr	r2, [r2, #0]
 8005138:	430b      	orrs	r3, r1
 800513a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695a      	ldr	r2, [r3, #20]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	431a      	orrs	r2, r3
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	681a      	ldr	r2, [r3, #0]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f042 0201 	orr.w	r2, r2, #1
 8005166:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2220      	movs	r2, #32
 8005172:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005184:	2300      	movs	r3, #0
}
 8005186:	4618      	mov	r0, r3
 8005188:	3710      	adds	r7, #16
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	000186a0 	.word	0x000186a0
 8005194:	001e847f 	.word	0x001e847f
 8005198:	003d08ff 	.word	0x003d08ff
 800519c:	431bde83 	.word	0x431bde83
 80051a0:	10624dd3 	.word	0x10624dd3

080051a4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	695b      	ldr	r3, [r3, #20]
 80051b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051b6:	2b80      	cmp	r3, #128	@ 0x80
 80051b8:	d103      	bne.n	80051c2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2200      	movs	r2, #0
 80051c0:	611a      	str	r2, [r3, #16]
  }
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b088      	sub	sp, #32
 80051d4:	af02      	add	r7, sp, #8
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	4608      	mov	r0, r1
 80051da:	4611      	mov	r1, r2
 80051dc:	461a      	mov	r2, r3
 80051de:	4603      	mov	r3, r0
 80051e0:	817b      	strh	r3, [r7, #10]
 80051e2:	460b      	mov	r3, r1
 80051e4:	813b      	strh	r3, [r7, #8]
 80051e6:	4613      	mov	r3, r2
 80051e8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051ea:	f7fe fad1 	bl	8003790 <HAL_GetTick>
 80051ee:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b20      	cmp	r3, #32
 80051fa:	f040 80d9 	bne.w	80053b0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	2319      	movs	r3, #25
 8005204:	2201      	movs	r2, #1
 8005206:	496d      	ldr	r1, [pc, #436]	@ (80053bc <HAL_I2C_Mem_Write+0x1ec>)
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f002 faf9 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005214:	2302      	movs	r3, #2
 8005216:	e0cc      	b.n	80053b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800521e:	2b01      	cmp	r3, #1
 8005220:	d101      	bne.n	8005226 <HAL_I2C_Mem_Write+0x56>
 8005222:	2302      	movs	r3, #2
 8005224:	e0c5      	b.n	80053b2 <HAL_I2C_Mem_Write+0x1e2>
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f003 0301 	and.w	r3, r3, #1
 8005238:	2b01      	cmp	r3, #1
 800523a:	d007      	beq.n	800524c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0201 	orr.w	r2, r2, #1
 800524a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800525a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2221      	movs	r2, #33	@ 0x21
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2240      	movs	r2, #64	@ 0x40
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2200      	movs	r2, #0
 8005270:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	6a3a      	ldr	r2, [r7, #32]
 8005276:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800527c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005282:	b29a      	uxth	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a4d      	ldr	r2, [pc, #308]	@ (80053c0 <HAL_I2C_Mem_Write+0x1f0>)
 800528c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800528e:	88f8      	ldrh	r0, [r7, #6]
 8005290:	893a      	ldrh	r2, [r7, #8]
 8005292:	8979      	ldrh	r1, [r7, #10]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	9301      	str	r3, [sp, #4]
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	9300      	str	r3, [sp, #0]
 800529c:	4603      	mov	r3, r0
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	f001 ff6c 	bl	800717c <I2C_RequestMemoryWrite>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d052      	beq.n	8005350 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e081      	b.n	80053b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f002 fbbe 	bl	8007a34 <I2C_WaitOnTXEFlagUntilTimeout>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00d      	beq.n	80052da <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052c2:	2b04      	cmp	r3, #4
 80052c4:	d107      	bne.n	80052d6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e06b      	b.n	80053b2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	781a      	ldrb	r2, [r3, #0]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ea:	1c5a      	adds	r2, r3, #1
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052f4:	3b01      	subs	r3, #1
 80052f6:	b29a      	uxth	r2, r3
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29a      	uxth	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b04      	cmp	r3, #4
 8005316:	d11b      	bne.n	8005350 <HAL_I2C_Mem_Write+0x180>
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800531c:	2b00      	cmp	r3, #0
 800531e:	d017      	beq.n	8005350 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005324:	781a      	ldrb	r2, [r3, #0]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800533a:	3b01      	subs	r3, #1
 800533c:	b29a      	uxth	r2, r3
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005346:	b29b      	uxth	r3, r3
 8005348:	3b01      	subs	r3, #1
 800534a:	b29a      	uxth	r2, r3
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1aa      	bne.n	80052ae <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005358:	697a      	ldr	r2, [r7, #20]
 800535a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f002 fbb1 	bl	8007ac4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005362:	4603      	mov	r3, r0
 8005364:	2b00      	cmp	r3, #0
 8005366:	d00d      	beq.n	8005384 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536c:	2b04      	cmp	r3, #4
 800536e:	d107      	bne.n	8005380 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800537e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e016      	b.n	80053b2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053ac:	2300      	movs	r3, #0
 80053ae:	e000      	b.n	80053b2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80053b0:	2302      	movs	r3, #2
  }
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3718      	adds	r7, #24
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	00100002 	.word	0x00100002
 80053c0:	ffff0000 	.word	0xffff0000

080053c4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b08a      	sub	sp, #40	@ 0x28
 80053c8:	af02      	add	r7, sp, #8
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	4608      	mov	r0, r1
 80053ce:	4611      	mov	r1, r2
 80053d0:	461a      	mov	r2, r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	817b      	strh	r3, [r7, #10]
 80053d6:	460b      	mov	r3, r1
 80053d8:	813b      	strh	r3, [r7, #8]
 80053da:	4613      	mov	r3, r2
 80053dc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80053de:	2300      	movs	r3, #0
 80053e0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053e2:	f7fe f9d5 	bl	8003790 <HAL_GetTick>
 80053e6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	f040 8136 	bne.w	8005662 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80053f6:	4b9d      	ldr	r3, [pc, #628]	@ (800566c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	08db      	lsrs	r3, r3, #3
 80053fc:	4a9c      	ldr	r2, [pc, #624]	@ (8005670 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	0a1a      	lsrs	r2, r3, #8
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009a      	lsls	r2, r3, #2
 800540c:	4413      	add	r3, r2
 800540e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	3b01      	subs	r3, #1
 8005414:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d112      	bne.n	8005442 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2220      	movs	r2, #32
 8005426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2200      	movs	r2, #0
 800542e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005436:	f043 0220 	orr.w	r2, r3, #32
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800543e:	2302      	movs	r3, #2
 8005440:	e110      	b.n	8005664 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f003 0302 	and.w	r3, r3, #2
 800544c:	2b02      	cmp	r3, #2
 800544e:	d0df      	beq.n	8005410 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_I2C_Mem_Write_DMA+0x9a>
 800545a:	2302      	movs	r3, #2
 800545c:	e102      	b.n	8005664 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b01      	cmp	r3, #1
 8005472:	d007      	beq.n	8005484 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005492:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2221      	movs	r2, #33	@ 0x21
 8005498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2240      	movs	r2, #64	@ 0x40
 80054a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80054b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	4a6c      	ldr	r2, [pc, #432]	@ (8005674 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80054c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80054c6:	897a      	ldrh	r2, [r7, #10]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80054cc:	893a      	ldrh	r2, [r7, #8]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80054d2:	88fa      	ldrh	r2, [r7, #6]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 80a9 	beq.w	800563a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d02a      	beq.n	8005546 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f4:	4a60      	ldr	r2, [pc, #384]	@ (8005678 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80054f6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fc:	4a5f      	ldr	r2, [pc, #380]	@ (800567c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80054fe:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005504:	2200      	movs	r2, #0
 8005506:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550c:	2200      	movs	r2, #0
 800550e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005514:	2200      	movs	r2, #0
 8005516:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551c:	2200      	movs	r2, #0
 800551e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005528:	4619      	mov	r1, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3310      	adds	r3, #16
 8005530:	461a      	mov	r2, r3
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005536:	f7ff f83b 	bl	80045b0 <HAL_DMA_Start_IT>
 800553a:	4603      	mov	r3, r0
 800553c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800553e:	7efb      	ldrb	r3, [r7, #27]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d166      	bne.n	8005612 <HAL_I2C_Mem_Write_DMA+0x24e>
 8005544:	e013      	b.n	800556e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800555a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	2200      	movs	r2, #0
 8005566:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e07a      	b.n	8005664 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800556e:	88f8      	ldrh	r0, [r7, #6]
 8005570:	893a      	ldrh	r2, [r7, #8]
 8005572:	8979      	ldrh	r1, [r7, #10]
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	9301      	str	r3, [sp, #4]
 8005578:	2323      	movs	r3, #35	@ 0x23
 800557a:	9300      	str	r3, [sp, #0]
 800557c:	4603      	mov	r3, r0
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	f001 fdfc 	bl	800717c <I2C_RequestMemoryWrite>
 8005584:	4603      	mov	r3, r0
 8005586:	2b00      	cmp	r3, #0
 8005588:	d022      	beq.n	80055d0 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800558e:	4618      	mov	r0, r3
 8005590:	f7ff f866 	bl	8004660 <HAL_DMA_Abort_IT>
 8005594:	4603      	mov	r3, r0
 8005596:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559c:	2200      	movs	r2, #0
 800559e:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055ae:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2200      	movs	r2, #0
 80055b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2200      	movs	r2, #0
 80055ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80055cc:	2301      	movs	r3, #1
 80055ce:	e049      	b.n	8005664 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055d0:	2300      	movs	r3, #0
 80055d2:	613b      	str	r3, [r7, #16]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	613b      	str	r3, [r7, #16]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2200      	movs	r2, #0
 80055ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80055fc:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800560c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e028      	b.n	8005664 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2220      	movs	r2, #32
 8005616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2200      	movs	r2, #0
 800561e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	f043 0210 	orr.w	r2, r3, #16
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e014      	b.n	8005664 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2220      	movs	r2, #32
 800563e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e000      	b.n	8005664 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005662:	2302      	movs	r3, #2
  }
}
 8005664:	4618      	mov	r0, r3
 8005666:	3720      	adds	r7, #32
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}
 800566c:	20000030 	.word	0x20000030
 8005670:	14f8b589 	.word	0x14f8b589
 8005674:	ffff0000 	.word	0xffff0000
 8005678:	08007479 	.word	0x08007479
 800567c:	08007637 	.word	0x08007637

08005680 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b08c      	sub	sp, #48	@ 0x30
 8005684:	af02      	add	r7, sp, #8
 8005686:	60f8      	str	r0, [r7, #12]
 8005688:	4608      	mov	r0, r1
 800568a:	4611      	mov	r1, r2
 800568c:	461a      	mov	r2, r3
 800568e:	4603      	mov	r3, r0
 8005690:	817b      	strh	r3, [r7, #10]
 8005692:	460b      	mov	r3, r1
 8005694:	813b      	strh	r3, [r7, #8]
 8005696:	4613      	mov	r3, r2
 8005698:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800569a:	f7fe f879 	bl	8003790 <HAL_GetTick>
 800569e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	f040 8172 	bne.w	8005996 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80056b2:	4b93      	ldr	r3, [pc, #588]	@ (8005900 <HAL_I2C_Mem_Read_DMA+0x280>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	08db      	lsrs	r3, r3, #3
 80056b8:	4a92      	ldr	r2, [pc, #584]	@ (8005904 <HAL_I2C_Mem_Read_DMA+0x284>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	0a1a      	lsrs	r2, r3, #8
 80056c0:	4613      	mov	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	4413      	add	r3, r2
 80056c6:	009a      	lsls	r2, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	3b01      	subs	r3, #1
 80056d0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d112      	bne.n	80056fe <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2200      	movs	r2, #0
 80056dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f2:	f043 0220 	orr.w	r2, r3, #32
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80056fa:	2302      	movs	r3, #2
 80056fc:	e14c      	b.n	8005998 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	699b      	ldr	r3, [r3, #24]
 8005704:	f003 0302 	and.w	r3, r3, #2
 8005708:	2b02      	cmp	r3, #2
 800570a:	d0df      	beq.n	80056cc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005712:	2b01      	cmp	r3, #1
 8005714:	d101      	bne.n	800571a <HAL_I2C_Mem_Read_DMA+0x9a>
 8005716:	2302      	movs	r3, #2
 8005718:	e13e      	b.n	8005998 <HAL_I2C_Mem_Read_DMA+0x318>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2201      	movs	r2, #1
 800571e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b01      	cmp	r3, #1
 800572e:	d007      	beq.n	8005740 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800574e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2222      	movs	r2, #34	@ 0x22
 8005754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2240      	movs	r2, #64	@ 0x40
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800576a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005770:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4a62      	ldr	r2, [pc, #392]	@ (8005908 <HAL_I2C_Mem_Read_DMA+0x288>)
 8005780:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005782:	897a      	ldrh	r2, [r7, #10]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005788:	893a      	ldrh	r2, [r7, #8]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800578e:	88fa      	ldrh	r2, [r7, #6]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800579e:	2b00      	cmp	r3, #0
 80057a0:	f000 80cc 	beq.w	800593c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d02d      	beq.n	8005808 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b0:	4a56      	ldr	r2, [pc, #344]	@ (800590c <HAL_I2C_Mem_Read_DMA+0x28c>)
 80057b2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	4a55      	ldr	r2, [pc, #340]	@ (8005910 <HAL_I2C_Mem_Read_DMA+0x290>)
 80057ba:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c0:	2200      	movs	r2, #0
 80057c2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c8:	2200      	movs	r2, #0
 80057ca:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d0:	2200      	movs	r2, #0
 80057d2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d8:	2200      	movs	r2, #0
 80057da:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	3310      	adds	r3, #16
 80057e6:	4619      	mov	r1, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ec:	461a      	mov	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057f2:	f7fe fedd 	bl	80045b0 <HAL_DMA_Start_IT>
 80057f6:	4603      	mov	r3, r0
 80057f8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80057fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005800:	2b00      	cmp	r3, #0
 8005802:	f040 8087 	bne.w	8005914 <HAL_I2C_Mem_Read_DMA+0x294>
 8005806:	e013      	b.n	8005830 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800581c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e0b3      	b.n	8005998 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005830:	88f8      	ldrh	r0, [r7, #6]
 8005832:	893a      	ldrh	r2, [r7, #8]
 8005834:	8979      	ldrh	r1, [r7, #10]
 8005836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005838:	9301      	str	r3, [sp, #4]
 800583a:	2323      	movs	r3, #35	@ 0x23
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	4603      	mov	r3, r0
 8005840:	68f8      	ldr	r0, [r7, #12]
 8005842:	f001 fd31 	bl	80072a8 <I2C_RequestMemoryRead>
 8005846:	4603      	mov	r3, r0
 8005848:	2b00      	cmp	r3, #0
 800584a:	d023      	beq.n	8005894 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	4618      	mov	r0, r3
 8005852:	f7fe ff05 	bl	8004660 <HAL_DMA_Abort_IT>
 8005856:	4603      	mov	r3, r0
 8005858:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005860:	2200      	movs	r2, #0
 8005862:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005872:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0201 	bic.w	r2, r2, #1
 800588e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e081      	b.n	8005998 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005898:	2b01      	cmp	r3, #1
 800589a:	d108      	bne.n	80058ae <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058aa:	601a      	str	r2, [r3, #0]
 80058ac:	e007      	b.n	80058be <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058be:	2300      	movs	r3, #0
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695b      	ldr	r3, [r3, #20]
 80058c8:	61bb      	str	r3, [r7, #24]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2200      	movs	r2, #0
 80058d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058ea:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80058fa:	605a      	str	r2, [r3, #4]
 80058fc:	e049      	b.n	8005992 <HAL_I2C_Mem_Read_DMA+0x312>
 80058fe:	bf00      	nop
 8005900:	20000030 	.word	0x20000030
 8005904:	14f8b589 	.word	0x14f8b589
 8005908:	ffff0000 	.word	0xffff0000
 800590c:	08007479 	.word	0x08007479
 8005910:	08007637 	.word	0x08007637
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2220      	movs	r2, #32
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005928:	f043 0210 	orr.w	r2, r3, #16
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e02d      	b.n	8005998 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800593c:	88f8      	ldrh	r0, [r7, #6]
 800593e:	893a      	ldrh	r2, [r7, #8]
 8005940:	8979      	ldrh	r1, [r7, #10]
 8005942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005944:	9301      	str	r3, [sp, #4]
 8005946:	2323      	movs	r3, #35	@ 0x23
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	4603      	mov	r3, r0
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f001 fcab 	bl	80072a8 <I2C_RequestMemoryRead>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d001      	beq.n	800595c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e01d      	b.n	8005998 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	699b      	ldr	r3, [r3, #24]
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005980:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2220      	movs	r2, #32
 8005986:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	e000      	b.n	8005998 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8005996:	2302      	movs	r3, #2
  }
}
 8005998:	4618      	mov	r0, r3
 800599a:	3728      	adds	r7, #40	@ 0x28
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059b8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059c0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059c8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b10      	cmp	r3, #16
 80059ce:	d003      	beq.n	80059d8 <HAL_I2C_EV_IRQHandler+0x38>
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	2b40      	cmp	r3, #64	@ 0x40
 80059d4:	f040 80c1 	bne.w	8005b5a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10d      	bne.n	8005a0e <HAL_I2C_EV_IRQHandler+0x6e>
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80059f8:	d003      	beq.n	8005a02 <HAL_I2C_EV_IRQHandler+0x62>
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005a00:	d101      	bne.n	8005a06 <HAL_I2C_EV_IRQHandler+0x66>
 8005a02:	2301      	movs	r3, #1
 8005a04:	e000      	b.n	8005a08 <HAL_I2C_EV_IRQHandler+0x68>
 8005a06:	2300      	movs	r3, #0
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	f000 8132 	beq.w	8005c72 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	f003 0301 	and.w	r3, r3, #1
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <HAL_I2C_EV_IRQHandler+0x92>
 8005a18:	697b      	ldr	r3, [r7, #20]
 8005a1a:	0a5b      	lsrs	r3, r3, #9
 8005a1c:	f003 0301 	and.w	r3, r3, #1
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f002 f8f6 	bl	8007c16 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fd87 	bl	800653e <I2C_Master_SB>
 8005a30:	e092      	b.n	8005b58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a32:	69fb      	ldr	r3, [r7, #28]
 8005a34:	08db      	lsrs	r3, r3, #3
 8005a36:	f003 0301 	and.w	r3, r3, #1
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <HAL_I2C_EV_IRQHandler+0xb2>
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	0a5b      	lsrs	r3, r3, #9
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d003      	beq.n	8005a52 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	f000 fdfd 	bl	800664a <I2C_Master_ADD10>
 8005a50:	e082      	b.n	8005b58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	085b      	lsrs	r3, r3, #1
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d009      	beq.n	8005a72 <HAL_I2C_EV_IRQHandler+0xd2>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	0a5b      	lsrs	r3, r3, #9
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 fe17 	bl	800669e <I2C_Master_ADDR>
 8005a70:	e072      	b.n	8005b58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005a72:	69bb      	ldr	r3, [r7, #24]
 8005a74:	089b      	lsrs	r3, r3, #2
 8005a76:	f003 0301 	and.w	r3, r3, #1
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d03b      	beq.n	8005af6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a8c:	f000 80f3 	beq.w	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	09db      	lsrs	r3, r3, #7
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d00f      	beq.n	8005abc <HAL_I2C_EV_IRQHandler+0x11c>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	0a9b      	lsrs	r3, r3, #10
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <HAL_I2C_EV_IRQHandler+0x11c>
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	089b      	lsrs	r3, r3, #2
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d103      	bne.n	8005abc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f9df 	bl	8005e78 <I2C_MasterTransmit_TXE>
 8005aba:	e04d      	b.n	8005b58 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	089b      	lsrs	r3, r3, #2
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	f000 80d6 	beq.w	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	0a5b      	lsrs	r3, r3, #9
 8005ace:	f003 0301 	and.w	r3, r3, #1
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	f000 80cf 	beq.w	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ad8:	7bbb      	ldrb	r3, [r7, #14]
 8005ada:	2b21      	cmp	r3, #33	@ 0x21
 8005adc:	d103      	bne.n	8005ae6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fa66 	bl	8005fb0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005ae4:	e0c7      	b.n	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005ae6:	7bfb      	ldrb	r3, [r7, #15]
 8005ae8:	2b40      	cmp	r3, #64	@ 0x40
 8005aea:	f040 80c4 	bne.w	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fad4 	bl	800609c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005af4:	e0bf      	b.n	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	685b      	ldr	r3, [r3, #4]
 8005afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b04:	f000 80b7 	beq.w	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	099b      	lsrs	r3, r3, #6
 8005b0c:	f003 0301 	and.w	r3, r3, #1
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00f      	beq.n	8005b34 <HAL_I2C_EV_IRQHandler+0x194>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	0a9b      	lsrs	r3, r3, #10
 8005b18:	f003 0301 	and.w	r3, r3, #1
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d009      	beq.n	8005b34 <HAL_I2C_EV_IRQHandler+0x194>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	089b      	lsrs	r3, r3, #2
 8005b24:	f003 0301 	and.w	r3, r3, #1
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d103      	bne.n	8005b34 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fb4d 	bl	80061cc <I2C_MasterReceive_RXNE>
 8005b32:	e011      	b.n	8005b58 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	089b      	lsrs	r3, r3, #2
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	f000 809a 	beq.w	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	0a5b      	lsrs	r3, r3, #9
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f000 8093 	beq.w	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fc03 	bl	800635c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b56:	e08e      	b.n	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b58:	e08d      	b.n	8005c76 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d004      	beq.n	8005b6c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	695b      	ldr	r3, [r3, #20]
 8005b68:	61fb      	str	r3, [r7, #28]
 8005b6a:	e007      	b.n	8005b7c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
 8005b7a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	085b      	lsrs	r3, r3, #1
 8005b80:	f003 0301 	and.w	r3, r3, #1
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d012      	beq.n	8005bae <HAL_I2C_EV_IRQHandler+0x20e>
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	0a5b      	lsrs	r3, r3, #9
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00c      	beq.n	8005bae <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d003      	beq.n	8005ba4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	699b      	ldr	r3, [r3, #24]
 8005ba2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005ba4:	69b9      	ldr	r1, [r7, #24]
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 ffc8 	bl	8006b3c <I2C_Slave_ADDR>
 8005bac:	e066      	b.n	8005c7c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <HAL_I2C_EV_IRQHandler+0x22e>
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	0a5b      	lsrs	r3, r3, #9
 8005bbe:	f003 0301 	and.w	r3, r3, #1
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f001 f802 	bl	8006bd0 <I2C_Slave_STOPF>
 8005bcc:	e056      	b.n	8005c7c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bce:	7bbb      	ldrb	r3, [r7, #14]
 8005bd0:	2b21      	cmp	r3, #33	@ 0x21
 8005bd2:	d002      	beq.n	8005bda <HAL_I2C_EV_IRQHandler+0x23a>
 8005bd4:	7bbb      	ldrb	r3, [r7, #14]
 8005bd6:	2b29      	cmp	r3, #41	@ 0x29
 8005bd8:	d125      	bne.n	8005c26 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	09db      	lsrs	r3, r3, #7
 8005bde:	f003 0301 	and.w	r3, r3, #1
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d00f      	beq.n	8005c06 <HAL_I2C_EV_IRQHandler+0x266>
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	0a9b      	lsrs	r3, r3, #10
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d009      	beq.n	8005c06 <HAL_I2C_EV_IRQHandler+0x266>
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	089b      	lsrs	r3, r3, #2
 8005bf6:	f003 0301 	and.w	r3, r3, #1
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fede 	bl	80069c0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c04:	e039      	b.n	8005c7a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	089b      	lsrs	r3, r3, #2
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d033      	beq.n	8005c7a <HAL_I2C_EV_IRQHandler+0x2da>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	0a5b      	lsrs	r3, r3, #9
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d02d      	beq.n	8005c7a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 ff0b 	bl	8006a3a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c24:	e029      	b.n	8005c7a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c26:	69fb      	ldr	r3, [r7, #28]
 8005c28:	099b      	lsrs	r3, r3, #6
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00f      	beq.n	8005c52 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c32:	697b      	ldr	r3, [r7, #20]
 8005c34:	0a9b      	lsrs	r3, r3, #10
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d009      	beq.n	8005c52 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	089b      	lsrs	r3, r3, #2
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d103      	bne.n	8005c52 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 ff16 	bl	8006a7c <I2C_SlaveReceive_RXNE>
 8005c50:	e014      	b.n	8005c7c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	089b      	lsrs	r3, r3, #2
 8005c56:	f003 0301 	and.w	r3, r3, #1
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d00e      	beq.n	8005c7c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	0a5b      	lsrs	r3, r3, #9
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d008      	beq.n	8005c7c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 ff44 	bl	8006af8 <I2C_SlaveReceive_BTF>
 8005c70:	e004      	b.n	8005c7c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005c72:	bf00      	nop
 8005c74:	e002      	b.n	8005c7c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c76:	bf00      	nop
 8005c78:	e000      	b.n	8005c7c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c7a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005c7c:	3720      	adds	r7, #32
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b08a      	sub	sp, #40	@ 0x28
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	695b      	ldr	r3, [r3, #20]
 8005c90:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ca4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ca6:	6a3b      	ldr	r3, [r7, #32]
 8005ca8:	0a1b      	lsrs	r3, r3, #8
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d00e      	beq.n	8005cd0 <HAL_I2C_ER_IRQHandler+0x4e>
 8005cb2:	69fb      	ldr	r3, [r7, #28]
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d008      	beq.n	8005cd0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cce:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	0a5b      	lsrs	r3, r3, #9
 8005cd4:	f003 0301 	and.w	r3, r3, #1
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00e      	beq.n	8005cfa <HAL_I2C_ER_IRQHandler+0x78>
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	0a1b      	lsrs	r3, r3, #8
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d008      	beq.n	8005cfa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	f043 0302 	orr.w	r3, r3, #2
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005cf8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cfa:	6a3b      	ldr	r3, [r7, #32]
 8005cfc:	0a9b      	lsrs	r3, r3, #10
 8005cfe:	f003 0301 	and.w	r3, r3, #1
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d03f      	beq.n	8005d86 <HAL_I2C_ER_IRQHandler+0x104>
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	0a1b      	lsrs	r3, r3, #8
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d039      	beq.n	8005d86 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005d12:	7efb      	ldrb	r3, [r7, #27]
 8005d14:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d24:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d2a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005d2c:	7ebb      	ldrb	r3, [r7, #26]
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d112      	bne.n	8005d58 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10f      	bne.n	8005d58 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d38:	7cfb      	ldrb	r3, [r7, #19]
 8005d3a:	2b21      	cmp	r3, #33	@ 0x21
 8005d3c:	d008      	beq.n	8005d50 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005d3e:	7cfb      	ldrb	r3, [r7, #19]
 8005d40:	2b29      	cmp	r3, #41	@ 0x29
 8005d42:	d005      	beq.n	8005d50 <HAL_I2C_ER_IRQHandler+0xce>
 8005d44:	7cfb      	ldrb	r3, [r7, #19]
 8005d46:	2b28      	cmp	r3, #40	@ 0x28
 8005d48:	d106      	bne.n	8005d58 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	2b21      	cmp	r3, #33	@ 0x21
 8005d4e:	d103      	bne.n	8005d58 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f001 f86d 	bl	8006e30 <I2C_Slave_AF>
 8005d56:	e016      	b.n	8005d86 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d60:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d64:	f043 0304 	orr.w	r3, r3, #4
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d6a:	7efb      	ldrb	r3, [r7, #27]
 8005d6c:	2b10      	cmp	r3, #16
 8005d6e:	d002      	beq.n	8005d76 <HAL_I2C_ER_IRQHandler+0xf4>
 8005d70:	7efb      	ldrb	r3, [r7, #27]
 8005d72:	2b40      	cmp	r3, #64	@ 0x40
 8005d74:	d107      	bne.n	8005d86 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d84:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d86:	6a3b      	ldr	r3, [r7, #32]
 8005d88:	0adb      	lsrs	r3, r3, #11
 8005d8a:	f003 0301 	and.w	r3, r3, #1
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00e      	beq.n	8005db0 <HAL_I2C_ER_IRQHandler+0x12e>
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	0a1b      	lsrs	r3, r3, #8
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d008      	beq.n	8005db0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da0:	f043 0308 	orr.w	r3, r3, #8
 8005da4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005dae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d008      	beq.n	8005dc8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005dc2:	6878      	ldr	r0, [r7, #4]
 8005dc4:	f001 f8a8 	bl	8006f18 <I2C_ITError>
  }
}
 8005dc8:	bf00      	nop
 8005dca:	3728      	adds	r7, #40	@ 0x28
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}

08005dd0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b083      	sub	sp, #12
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005dd8:	bf00      	nop
 8005dda:	370c      	adds	r7, #12
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr

08005de4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005dec:	bf00      	nop
 8005dee:	370c      	adds	r7, #12
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr

08005df8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005e00:	bf00      	nop
 8005e02:	370c      	adds	r7, #12
 8005e04:	46bd      	mov	sp, r7
 8005e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0a:	4770      	bx	lr

08005e0c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e14:	bf00      	nop
 8005e16:	370c      	adds	r7, #12
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b083      	sub	sp, #12
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e58:	bf00      	nop
 8005e5a:	370c      	adds	r7, #12
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e64:	b480      	push	{r7}
 8005e66:	b083      	sub	sp, #12
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e6c:	bf00      	nop
 8005e6e:	370c      	adds	r7, #12
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr

08005e78 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e86:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e8e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e94:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d150      	bne.n	8005f40 <I2C_MasterTransmit_TXE+0xc8>
 8005e9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ea0:	2b21      	cmp	r3, #33	@ 0x21
 8005ea2:	d14d      	bne.n	8005f40 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2b08      	cmp	r3, #8
 8005ea8:	d01d      	beq.n	8005ee6 <I2C_MasterTransmit_TXE+0x6e>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	2b20      	cmp	r3, #32
 8005eae:	d01a      	beq.n	8005ee6 <I2C_MasterTransmit_TXE+0x6e>
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005eb6:	d016      	beq.n	8005ee6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ec6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2211      	movs	r2, #17
 8005ecc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2220      	movs	r2, #32
 8005eda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f7ff ff76 	bl	8005dd0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ee4:	e060      	b.n	8005fa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	685a      	ldr	r2, [r3, #4]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ef4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	681a      	ldr	r2, [r3, #0]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f04:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2220      	movs	r2, #32
 8005f10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	2b40      	cmp	r3, #64	@ 0x40
 8005f1e:	d107      	bne.n	8005f30 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7fa fe6d 	bl	8000c08 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f2e:	e03b      	b.n	8005fa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff ff49 	bl	8005dd0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f3e:	e033      	b.n	8005fa8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b21      	cmp	r3, #33	@ 0x21
 8005f44:	d005      	beq.n	8005f52 <I2C_MasterTransmit_TXE+0xda>
 8005f46:	7bbb      	ldrb	r3, [r7, #14]
 8005f48:	2b40      	cmp	r3, #64	@ 0x40
 8005f4a:	d12d      	bne.n	8005fa8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b22      	cmp	r3, #34	@ 0x22
 8005f50:	d12a      	bne.n	8005fa8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f56:	b29b      	uxth	r3, r3
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d108      	bne.n	8005f6e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f6a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005f6c:	e01c      	b.n	8005fa8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b40      	cmp	r3, #64	@ 0x40
 8005f78:	d103      	bne.n	8005f82 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f88e 	bl	800609c <I2C_MemoryTransmit_TXE_BTF>
}
 8005f80:	e012      	b.n	8005fa8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	781a      	ldrb	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	b29a      	uxth	r2, r3
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005fa6:	e7ff      	b.n	8005fa8 <I2C_MasterTransmit_TXE+0x130>
 8005fa8:	bf00      	nop
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}

08005fb0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fbc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b21      	cmp	r3, #33	@ 0x21
 8005fc8:	d164      	bne.n	8006094 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fce:	b29b      	uxth	r3, r3
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d012      	beq.n	8005ffa <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fd8:	781a      	ldrb	r2, [r3, #0]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe4:	1c5a      	adds	r2, r3, #1
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	3b01      	subs	r3, #1
 8005ff2:	b29a      	uxth	r2, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005ff8:	e04c      	b.n	8006094 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d01d      	beq.n	800603c <I2C_MasterTransmit_BTF+0x8c>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b20      	cmp	r3, #32
 8006004:	d01a      	beq.n	800603c <I2C_MasterTransmit_BTF+0x8c>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800600c:	d016      	beq.n	800603c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	685a      	ldr	r2, [r3, #4]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800601c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2211      	movs	r2, #17
 8006022:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2220      	movs	r2, #32
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7ff fecb 	bl	8005dd0 <HAL_I2C_MasterTxCpltCallback>
}
 800603a:	e02b      	b.n	8006094 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800604a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800605a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006070:	b2db      	uxtb	r3, r3
 8006072:	2b40      	cmp	r3, #64	@ 0x40
 8006074:	d107      	bne.n	8006086 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fa fdc2 	bl	8000c08 <HAL_I2C_MemTxCpltCallback>
}
 8006084:	e006      	b.n	8006094 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff fe9e 	bl	8005dd0 <HAL_I2C_MasterTxCpltCallback>
}
 8006094:	bf00      	nop
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060aa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d11d      	bne.n	80060f0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d10b      	bne.n	80060d4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060cc:	1c9a      	adds	r2, r3, #2
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80060d2:	e077      	b.n	80061c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d8:	b29b      	uxth	r3, r3
 80060da:	121b      	asrs	r3, r3, #8
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060ee:	e069      	b.n	80061c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	d10b      	bne.n	8006110 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006108:	1c5a      	adds	r2, r3, #1
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800610e:	e059      	b.n	80061c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006114:	2b02      	cmp	r3, #2
 8006116:	d152      	bne.n	80061be <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2b22      	cmp	r3, #34	@ 0x22
 800611c:	d10d      	bne.n	800613a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800612c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006132:	1c5a      	adds	r2, r3, #1
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006138:	e044      	b.n	80061c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800613e:	b29b      	uxth	r3, r3
 8006140:	2b00      	cmp	r3, #0
 8006142:	d015      	beq.n	8006170 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b21      	cmp	r3, #33	@ 0x21
 8006148:	d112      	bne.n	8006170 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614e:	781a      	ldrb	r2, [r3, #0]
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615a:	1c5a      	adds	r2, r3, #1
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800616e:	e029      	b.n	80061c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d124      	bne.n	80061c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800617a:	7bfb      	ldrb	r3, [r7, #15]
 800617c:	2b21      	cmp	r3, #33	@ 0x21
 800617e:	d121      	bne.n	80061c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800618e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800619e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fa fd26 	bl	8000c08 <HAL_I2C_MemTxCpltCallback>
}
 80061bc:	e002      	b.n	80061c4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f7fe fff0 	bl	80051a4 <I2C_Flush_DR>
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b22      	cmp	r3, #34	@ 0x22
 80061de:	f040 80b9 	bne.w	8006354 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061e6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	2b03      	cmp	r3, #3
 80061f4:	d921      	bls.n	800623a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006220:	b29b      	uxth	r3, r3
 8006222:	2b03      	cmp	r3, #3
 8006224:	f040 8096 	bne.w	8006354 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006236:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006238:	e08c      	b.n	8006354 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800623e:	2b02      	cmp	r3, #2
 8006240:	d07f      	beq.n	8006342 <I2C_MasterReceive_RXNE+0x176>
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	2b01      	cmp	r3, #1
 8006246:	d002      	beq.n	800624e <I2C_MasterReceive_RXNE+0x82>
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d179      	bne.n	8006342 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f001 fc80 	bl	8007b54 <I2C_WaitOnSTOPRequestThroughIT>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d14c      	bne.n	80062f4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006268:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006278:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	691a      	ldr	r2, [r3, #16]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628c:	1c5a      	adds	r2, r3, #1
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006296:	b29b      	uxth	r3, r3
 8006298:	3b01      	subs	r3, #1
 800629a:	b29a      	uxth	r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2220      	movs	r2, #32
 80062a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	2b40      	cmp	r3, #64	@ 0x40
 80062b2:	d10a      	bne.n	80062ca <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fa fcb0 	bl	8000c28 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062c8:	e044      	b.n	8006354 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2b08      	cmp	r3, #8
 80062d6:	d002      	beq.n	80062de <I2C_MasterReceive_RXNE+0x112>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b20      	cmp	r3, #32
 80062dc:	d103      	bne.n	80062e6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80062e4:	e002      	b.n	80062ec <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2212      	movs	r2, #18
 80062ea:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80062ec:	6878      	ldr	r0, [r7, #4]
 80062ee:	f7ff fd79 	bl	8005de4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062f2:	e02f      	b.n	8006354 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006302:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800630e:	b2d2      	uxtb	r2, r2
 8006310:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006316:	1c5a      	adds	r2, r3, #1
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006320:	b29b      	uxth	r3, r3
 8006322:	3b01      	subs	r3, #1
 8006324:	b29a      	uxth	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	2220      	movs	r2, #32
 800632e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2200      	movs	r2, #0
 8006336:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	f7ff fd88 	bl	8005e50 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006340:	e008      	b.n	8006354 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006350:	605a      	str	r2, [r3, #4]
}
 8006352:	e7ff      	b.n	8006354 <I2C_MasterReceive_RXNE+0x188>
 8006354:	bf00      	nop
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b084      	sub	sp, #16
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006368:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800636e:	b29b      	uxth	r3, r3
 8006370:	2b04      	cmp	r3, #4
 8006372:	d11b      	bne.n	80063ac <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685a      	ldr	r2, [r3, #4]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006382:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	691a      	ldr	r2, [r3, #16]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29a      	uxth	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80063aa:	e0c4      	b.n	8006536 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d129      	bne.n	800640a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063c4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2b04      	cmp	r3, #4
 80063ca:	d00a      	beq.n	80063e2 <I2C_MasterReceive_BTF+0x86>
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	2b02      	cmp	r3, #2
 80063d0:	d007      	beq.n	80063e2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063e0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	691a      	ldr	r2, [r3, #16]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063ec:	b2d2      	uxtb	r2, r2
 80063ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063f4:	1c5a      	adds	r2, r3, #1
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063fe:	b29b      	uxth	r3, r3
 8006400:	3b01      	subs	r3, #1
 8006402:	b29a      	uxth	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006408:	e095      	b.n	8006536 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640e:	b29b      	uxth	r3, r3
 8006410:	2b02      	cmp	r3, #2
 8006412:	d17d      	bne.n	8006510 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	2b01      	cmp	r3, #1
 8006418:	d002      	beq.n	8006420 <I2C_MasterReceive_BTF+0xc4>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b10      	cmp	r3, #16
 800641e:	d108      	bne.n	8006432 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	e016      	b.n	8006460 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b04      	cmp	r3, #4
 8006436:	d002      	beq.n	800643e <I2C_MasterReceive_BTF+0xe2>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d108      	bne.n	8006450 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	e007      	b.n	8006460 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800645e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800646a:	b2d2      	uxtb	r2, r2
 800646c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006472:	1c5a      	adds	r2, r3, #1
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800647c:	b29b      	uxth	r3, r3
 800647e:	3b01      	subs	r3, #1
 8006480:	b29a      	uxth	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006490:	b2d2      	uxtb	r2, r2
 8006492:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685a      	ldr	r2, [r3, #4]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064ba:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2220      	movs	r2, #32
 80064c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b40      	cmp	r3, #64	@ 0x40
 80064ce:	d10a      	bne.n	80064e6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2200      	movs	r2, #0
 80064dc:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fa fba2 	bl	8000c28 <HAL_I2C_MemRxCpltCallback>
}
 80064e4:	e027      	b.n	8006536 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b08      	cmp	r3, #8
 80064f2:	d002      	beq.n	80064fa <I2C_MasterReceive_BTF+0x19e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b20      	cmp	r3, #32
 80064f8:	d103      	bne.n	8006502 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2200      	movs	r2, #0
 80064fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8006500:	e002      	b.n	8006508 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2212      	movs	r2, #18
 8006506:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f7ff fc6b 	bl	8005de4 <HAL_I2C_MasterRxCpltCallback>
}
 800650e:	e012      	b.n	8006536 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	691a      	ldr	r2, [r3, #16]
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800651a:	b2d2      	uxtb	r2, r2
 800651c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800652c:	b29b      	uxth	r3, r3
 800652e:	3b01      	subs	r3, #1
 8006530:	b29a      	uxth	r2, r3
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006536:	bf00      	nop
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}

0800653e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800654c:	b2db      	uxtb	r3, r3
 800654e:	2b40      	cmp	r3, #64	@ 0x40
 8006550:	d117      	bne.n	8006582 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006556:	2b00      	cmp	r3, #0
 8006558:	d109      	bne.n	800656e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800655e:	b2db      	uxtb	r3, r3
 8006560:	461a      	mov	r2, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800656a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800656c:	e067      	b.n	800663e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006572:	b2db      	uxtb	r3, r3
 8006574:	f043 0301 	orr.w	r3, r3, #1
 8006578:	b2da      	uxtb	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	611a      	str	r2, [r3, #16]
}
 8006580:	e05d      	b.n	800663e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800658a:	d133      	bne.n	80065f4 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b21      	cmp	r3, #33	@ 0x21
 8006596:	d109      	bne.n	80065ac <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800659c:	b2db      	uxtb	r3, r3
 800659e:	461a      	mov	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80065a8:	611a      	str	r2, [r3, #16]
 80065aa:	e008      	b.n	80065be <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	f043 0301 	orr.w	r3, r3, #1
 80065b6:	b2da      	uxtb	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d004      	beq.n	80065d0 <I2C_Master_SB+0x92>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d108      	bne.n	80065e2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d032      	beq.n	800663e <I2C_Master_SB+0x100>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d02d      	beq.n	800663e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80065f0:	605a      	str	r2, [r3, #4]
}
 80065f2:	e024      	b.n	800663e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10e      	bne.n	800661a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006600:	b29b      	uxth	r3, r3
 8006602:	11db      	asrs	r3, r3, #7
 8006604:	b2db      	uxtb	r3, r3
 8006606:	f003 0306 	and.w	r3, r3, #6
 800660a:	b2db      	uxtb	r3, r3
 800660c:	f063 030f 	orn	r3, r3, #15
 8006610:	b2da      	uxtb	r2, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	611a      	str	r2, [r3, #16]
}
 8006618:	e011      	b.n	800663e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800661e:	2b01      	cmp	r3, #1
 8006620:	d10d      	bne.n	800663e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006626:	b29b      	uxth	r3, r3
 8006628:	11db      	asrs	r3, r3, #7
 800662a:	b2db      	uxtb	r3, r3
 800662c:	f003 0306 	and.w	r3, r3, #6
 8006630:	b2db      	uxtb	r3, r3
 8006632:	f063 030e 	orn	r3, r3, #14
 8006636:	b2da      	uxtb	r2, r3
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	611a      	str	r2, [r3, #16]
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006656:	b2da      	uxtb	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006662:	2b00      	cmp	r3, #0
 8006664:	d004      	beq.n	8006670 <I2C_Master_ADD10+0x26>
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800666c:	2b00      	cmp	r3, #0
 800666e:	d108      	bne.n	8006682 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00c      	beq.n	8006692 <I2C_Master_ADD10+0x48>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800667c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667e:	2b00      	cmp	r3, #0
 8006680:	d007      	beq.n	8006692 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	685a      	ldr	r2, [r3, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006690:	605a      	str	r2, [r3, #4]
  }
}
 8006692:	bf00      	nop
 8006694:	370c      	adds	r7, #12
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr

0800669e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800669e:	b480      	push	{r7}
 80066a0:	b091      	sub	sp, #68	@ 0x44
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ba:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	2b22      	cmp	r3, #34	@ 0x22
 80066c6:	f040 8169 	bne.w	800699c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d10f      	bne.n	80066f2 <I2C_Master_ADDR+0x54>
 80066d2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80066d6:	2b40      	cmp	r3, #64	@ 0x40
 80066d8:	d10b      	bne.n	80066f2 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066da:	2300      	movs	r3, #0
 80066dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	695b      	ldr	r3, [r3, #20]
 80066e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	699b      	ldr	r3, [r3, #24]
 80066ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066f0:	e160      	b.n	80069b4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d11d      	bne.n	8006736 <I2C_Master_ADDR+0x98>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	691b      	ldr	r3, [r3, #16]
 80066fe:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006702:	d118      	bne.n	8006736 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006704:	2300      	movs	r3, #0
 8006706:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	699b      	ldr	r3, [r3, #24]
 8006716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006728:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	651a      	str	r2, [r3, #80]	@ 0x50
 8006734:	e13e      	b.n	80069b4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800673a:	b29b      	uxth	r3, r3
 800673c:	2b00      	cmp	r3, #0
 800673e:	d113      	bne.n	8006768 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006740:	2300      	movs	r3, #0
 8006742:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695b      	ldr	r3, [r3, #20]
 800674a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	699b      	ldr	r3, [r3, #24]
 8006752:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006754:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006764:	601a      	str	r2, [r3, #0]
 8006766:	e115      	b.n	8006994 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800676c:	b29b      	uxth	r3, r3
 800676e:	2b01      	cmp	r3, #1
 8006770:	f040 808a 	bne.w	8006888 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006776:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800677a:	d137      	bne.n	80067ec <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800678a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006796:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800679a:	d113      	bne.n	80067c4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067aa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067ac:	2300      	movs	r3, #0
 80067ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	695b      	ldr	r3, [r3, #20]
 80067b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c2:	e0e7      	b.n	8006994 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067c4:	2300      	movs	r3, #0
 80067c6:	623b      	str	r3, [r7, #32]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	623b      	str	r3, [r7, #32]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	623b      	str	r3, [r7, #32]
 80067d8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	681a      	ldr	r2, [r3, #0]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067e8:	601a      	str	r2, [r3, #0]
 80067ea:	e0d3      	b.n	8006994 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80067ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067ee:	2b08      	cmp	r3, #8
 80067f0:	d02e      	beq.n	8006850 <I2C_Master_ADDR+0x1b2>
 80067f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067f4:	2b20      	cmp	r3, #32
 80067f6:	d02b      	beq.n	8006850 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80067f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067fa:	2b12      	cmp	r3, #18
 80067fc:	d102      	bne.n	8006804 <I2C_Master_ADDR+0x166>
 80067fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006800:	2b01      	cmp	r3, #1
 8006802:	d125      	bne.n	8006850 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006806:	2b04      	cmp	r3, #4
 8006808:	d00e      	beq.n	8006828 <I2C_Master_ADDR+0x18a>
 800680a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680c:	2b02      	cmp	r3, #2
 800680e:	d00b      	beq.n	8006828 <I2C_Master_ADDR+0x18a>
 8006810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006812:	2b10      	cmp	r3, #16
 8006814:	d008      	beq.n	8006828 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006824:	601a      	str	r2, [r3, #0]
 8006826:	e007      	b.n	8006838 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	681a      	ldr	r2, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006836:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	61fb      	str	r3, [r7, #28]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	699b      	ldr	r3, [r3, #24]
 800684a:	61fb      	str	r3, [r7, #28]
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	e0a1      	b.n	8006994 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800685e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006860:	2300      	movs	r3, #0
 8006862:	61bb      	str	r3, [r7, #24]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	61bb      	str	r3, [r7, #24]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	699b      	ldr	r3, [r3, #24]
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681a      	ldr	r2, [r3, #0]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006884:	601a      	str	r2, [r3, #0]
 8006886:	e085      	b.n	8006994 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800688c:	b29b      	uxth	r3, r3
 800688e:	2b02      	cmp	r3, #2
 8006890:	d14d      	bne.n	800692e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006894:	2b04      	cmp	r3, #4
 8006896:	d016      	beq.n	80068c6 <I2C_Master_ADDR+0x228>
 8006898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800689a:	2b02      	cmp	r3, #2
 800689c:	d013      	beq.n	80068c6 <I2C_Master_ADDR+0x228>
 800689e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a0:	2b10      	cmp	r3, #16
 80068a2:	d010      	beq.n	80068c6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068b2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068c2:	601a      	str	r2, [r3, #0]
 80068c4:	e007      	b.n	80068d6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681a      	ldr	r2, [r3, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068d4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068e0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068e4:	d117      	bne.n	8006916 <I2C_Master_ADDR+0x278>
 80068e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068ec:	d00b      	beq.n	8006906 <I2C_Master_ADDR+0x268>
 80068ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d008      	beq.n	8006906 <I2C_Master_ADDR+0x268>
 80068f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f6:	2b08      	cmp	r3, #8
 80068f8:	d005      	beq.n	8006906 <I2C_Master_ADDR+0x268>
 80068fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d002      	beq.n	8006906 <I2C_Master_ADDR+0x268>
 8006900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006902:	2b20      	cmp	r3, #32
 8006904:	d107      	bne.n	8006916 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006914:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006916:	2300      	movs	r3, #0
 8006918:	617b      	str	r3, [r7, #20]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	617b      	str	r3, [r7, #20]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	699b      	ldr	r3, [r3, #24]
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	e032      	b.n	8006994 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800693c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006948:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800694c:	d117      	bne.n	800697e <I2C_Master_ADDR+0x2e0>
 800694e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006954:	d00b      	beq.n	800696e <I2C_Master_ADDR+0x2d0>
 8006956:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006958:	2b01      	cmp	r3, #1
 800695a:	d008      	beq.n	800696e <I2C_Master_ADDR+0x2d0>
 800695c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800695e:	2b08      	cmp	r3, #8
 8006960:	d005      	beq.n	800696e <I2C_Master_ADDR+0x2d0>
 8006962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006964:	2b10      	cmp	r3, #16
 8006966:	d002      	beq.n	800696e <I2C_Master_ADDR+0x2d0>
 8006968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696a:	2b20      	cmp	r3, #32
 800696c:	d107      	bne.n	800697e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800697c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800697e:	2300      	movs	r3, #0
 8006980:	613b      	str	r3, [r7, #16]
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	613b      	str	r3, [r7, #16]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	699b      	ldr	r3, [r3, #24]
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2200      	movs	r2, #0
 8006998:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800699a:	e00b      	b.n	80069b4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800699c:	2300      	movs	r3, #0
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	695b      	ldr	r3, [r3, #20]
 80069a6:	60fb      	str	r3, [r7, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	699b      	ldr	r3, [r3, #24]
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	68fb      	ldr	r3, [r7, #12]
}
 80069b2:	e7ff      	b.n	80069b4 <I2C_Master_ADDR+0x316>
 80069b4:	bf00      	nop
 80069b6:	3744      	adds	r7, #68	@ 0x44
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr

080069c0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069ce:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d02b      	beq.n	8006a32 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069de:	781a      	ldrb	r2, [r3, #0]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	1c5a      	adds	r2, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069f4:	b29b      	uxth	r3, r3
 80069f6:	3b01      	subs	r3, #1
 80069f8:	b29a      	uxth	r2, r3
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d114      	bne.n	8006a32 <I2C_SlaveTransmit_TXE+0x72>
 8006a08:	7bfb      	ldrb	r3, [r7, #15]
 8006a0a:	2b29      	cmp	r3, #41	@ 0x29
 8006a0c:	d111      	bne.n	8006a32 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685a      	ldr	r2, [r3, #4]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a1c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2221      	movs	r2, #33	@ 0x21
 8006a22:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2228      	movs	r2, #40	@ 0x28
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff f9e3 	bl	8005df8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a32:	bf00      	nop
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b083      	sub	sp, #12
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d011      	beq.n	8006a70 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	781a      	ldrb	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a5c:	1c5a      	adds	r2, r3, #1
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a66:	b29b      	uxth	r3, r3
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	b29a      	uxth	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006a70:	bf00      	nop
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b084      	sub	sp, #16
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a8a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d02c      	beq.n	8006af0 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	691a      	ldr	r2, [r3, #16]
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	b2d2      	uxtb	r2, r2
 8006aa2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d114      	bne.n	8006af0 <I2C_SlaveReceive_RXNE+0x74>
 8006ac6:	7bfb      	ldrb	r3, [r7, #15]
 8006ac8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006aca:	d111      	bne.n	8006af0 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685a      	ldr	r2, [r3, #4]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ada:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2222      	movs	r2, #34	@ 0x22
 8006ae0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2228      	movs	r2, #40	@ 0x28
 8006ae6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f7ff f98e 	bl	8005e0c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006af0:	bf00      	nop
 8006af2:	3710      	adds	r7, #16
 8006af4:	46bd      	mov	sp, r7
 8006af6:	bd80      	pop	{r7, pc}

08006af8 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b083      	sub	sp, #12
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b04:	b29b      	uxth	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d012      	beq.n	8006b30 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	691a      	ldr	r2, [r3, #16]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b14:	b2d2      	uxtb	r2, r2
 8006b16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b1c:	1c5a      	adds	r2, r3, #1
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	b29a      	uxth	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
 8006b44:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b56:	2b28      	cmp	r3, #40	@ 0x28
 8006b58:	d127      	bne.n	8006baa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	685a      	ldr	r2, [r3, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b68:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	089b      	lsrs	r3, r3, #2
 8006b6e:	f003 0301 	and.w	r3, r3, #1
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b76:	2301      	movs	r3, #1
 8006b78:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	09db      	lsrs	r3, r3, #7
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	81bb      	strh	r3, [r7, #12]
 8006b8c:	e002      	b.n	8006b94 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	699b      	ldr	r3, [r3, #24]
 8006b92:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006b9c:	89ba      	ldrh	r2, [r7, #12]
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
 8006ba0:	4619      	mov	r1, r3
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	f7ff f93c 	bl	8005e20 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006ba8:	e00e      	b.n	8006bc8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006baa:	2300      	movs	r3, #0
 8006bac:	60bb      	str	r3, [r7, #8]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	695b      	ldr	r3, [r3, #20]
 8006bb4:	60bb      	str	r3, [r7, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	699b      	ldr	r3, [r3, #24]
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006bc8:	bf00      	nop
 8006bca:	3710      	adds	r7, #16
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bde:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685a      	ldr	r2, [r3, #4]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006bee:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60bb      	str	r3, [r7, #8]
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	60bb      	str	r3, [r7, #8]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f042 0201 	orr.w	r2, r2, #1
 8006c0a:	601a      	str	r2, [r3, #0]
 8006c0c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c1c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	685b      	ldr	r3, [r3, #4]
 8006c24:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c2c:	d172      	bne.n	8006d14 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c2e:	7bfb      	ldrb	r3, [r7, #15]
 8006c30:	2b22      	cmp	r3, #34	@ 0x22
 8006c32:	d002      	beq.n	8006c3a <I2C_Slave_STOPF+0x6a>
 8006c34:	7bfb      	ldrb	r3, [r7, #15]
 8006c36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c38:	d135      	bne.n	8006ca6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	b29a      	uxth	r2, r3
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d005      	beq.n	8006c5e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c56:	f043 0204 	orr.w	r2, r3, #4
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c6c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fd fea0 	bl	80049b8 <HAL_DMA_GetState>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d049      	beq.n	8006d12 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	4a69      	ldr	r2, [pc, #420]	@ (8006e28 <I2C_Slave_STOPF+0x258>)
 8006c84:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7fd fce8 	bl	8004660 <HAL_DMA_Abort_IT>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d03d      	beq.n	8006d12 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006c9c:	687a      	ldr	r2, [r7, #4]
 8006c9e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ca0:	4610      	mov	r0, r2
 8006ca2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006ca4:	e035      	b.n	8006d12 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d005      	beq.n	8006cca <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cc2:	f043 0204 	orr.w	r2, r3, #4
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	685a      	ldr	r2, [r3, #4]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cd8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f7fd fe6a 	bl	80049b8 <HAL_DMA_GetState>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d014      	beq.n	8006d14 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cee:	4a4e      	ldr	r2, [pc, #312]	@ (8006e28 <I2C_Slave_STOPF+0x258>)
 8006cf0:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fd fcb2 	bl	8004660 <HAL_DMA_Abort_IT>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d008      	beq.n	8006d14 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
 8006d10:	e000      	b.n	8006d14 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d12:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d18:	b29b      	uxth	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d03e      	beq.n	8006d9c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	695b      	ldr	r3, [r3, #20]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b04      	cmp	r3, #4
 8006d2a:	d112      	bne.n	8006d52 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691a      	ldr	r2, [r3, #16]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d36:	b2d2      	uxtb	r2, r2
 8006d38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d5c:	2b40      	cmp	r3, #64	@ 0x40
 8006d5e:	d112      	bne.n	8006d86 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	691a      	ldr	r2, [r3, #16]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d6a:	b2d2      	uxtb	r2, r2
 8006d6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d8a:	b29b      	uxth	r3, r3
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d005      	beq.n	8006d9c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d94:	f043 0204 	orr.w	r2, r3, #4
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d003      	beq.n	8006dac <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f000 f8b7 	bl	8006f18 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006daa:	e039      	b.n	8006e20 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006dac:	7bfb      	ldrb	r3, [r7, #15]
 8006dae:	2b2a      	cmp	r3, #42	@ 0x2a
 8006db0:	d109      	bne.n	8006dc6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2228      	movs	r2, #40	@ 0x28
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7ff f823 	bl	8005e0c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dcc:	b2db      	uxtb	r3, r3
 8006dce:	2b28      	cmp	r3, #40	@ 0x28
 8006dd0:	d111      	bne.n	8006df6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a15      	ldr	r2, [pc, #84]	@ (8006e2c <I2C_Slave_STOPF+0x25c>)
 8006dd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2200      	movs	r2, #0
 8006ddc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2220      	movs	r2, #32
 8006de2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2200      	movs	r2, #0
 8006dea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f7ff f824 	bl	8005e3c <HAL_I2C_ListenCpltCallback>
}
 8006df4:	e014      	b.n	8006e20 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dfa:	2b22      	cmp	r3, #34	@ 0x22
 8006dfc:	d002      	beq.n	8006e04 <I2C_Slave_STOPF+0x234>
 8006dfe:	7bfb      	ldrb	r3, [r7, #15]
 8006e00:	2b22      	cmp	r3, #34	@ 0x22
 8006e02:	d10d      	bne.n	8006e20 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2220      	movs	r2, #32
 8006e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2200      	movs	r2, #0
 8006e16:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fe fff6 	bl	8005e0c <HAL_I2C_SlaveRxCpltCallback>
}
 8006e20:	bf00      	nop
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}
 8006e28:	080076b1 	.word	0x080076b1
 8006e2c:	ffff0000 	.word	0xffff0000

08006e30 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e3e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e44:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b08      	cmp	r3, #8
 8006e4a:	d002      	beq.n	8006e52 <I2C_Slave_AF+0x22>
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2b20      	cmp	r3, #32
 8006e50:	d129      	bne.n	8006ea6 <I2C_Slave_AF+0x76>
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	2b28      	cmp	r3, #40	@ 0x28
 8006e56:	d126      	bne.n	8006ea6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f14 <I2C_Slave_AF+0xe4>)
 8006e5c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	685a      	ldr	r2, [r3, #4]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e6c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e76:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681a      	ldr	r2, [r3, #0]
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e86:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2220      	movs	r2, #32
 8006e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2200      	movs	r2, #0
 8006e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fe ffcc 	bl	8005e3c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006ea4:	e031      	b.n	8006f0a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
 8006ea8:	2b21      	cmp	r3, #33	@ 0x21
 8006eaa:	d129      	bne.n	8006f00 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a19      	ldr	r2, [pc, #100]	@ (8006f14 <I2C_Slave_AF+0xe4>)
 8006eb0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2221      	movs	r2, #33	@ 0x21
 8006eb6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2220      	movs	r2, #32
 8006ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	685a      	ldr	r2, [r3, #4]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ed6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ee0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006ef0:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fe f956 	bl	80051a4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f7fe ff7d 	bl	8005df8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006efe:	e004      	b.n	8006f0a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f08:	615a      	str	r2, [r3, #20]
}
 8006f0a:	bf00      	nop
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	ffff0000 	.word	0xffff0000

08006f18 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f26:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f2e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b10      	cmp	r3, #16
 8006f34:	d002      	beq.n	8006f3c <I2C_ITError+0x24>
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	2b40      	cmp	r3, #64	@ 0x40
 8006f3a:	d10a      	bne.n	8006f52 <I2C_ITError+0x3a>
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	2b22      	cmp	r3, #34	@ 0x22
 8006f40:	d107      	bne.n	8006f52 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	681a      	ldr	r2, [r3, #0]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f50:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f52:	7bfb      	ldrb	r3, [r7, #15]
 8006f54:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f58:	2b28      	cmp	r3, #40	@ 0x28
 8006f5a:	d107      	bne.n	8006f6c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2228      	movs	r2, #40	@ 0x28
 8006f66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006f6a:	e015      	b.n	8006f98 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	685b      	ldr	r3, [r3, #4]
 8006f72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f7a:	d00a      	beq.n	8006f92 <I2C_ITError+0x7a>
 8006f7c:	7bfb      	ldrb	r3, [r7, #15]
 8006f7e:	2b60      	cmp	r3, #96	@ 0x60
 8006f80:	d007      	beq.n	8006f92 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fa2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fa6:	d162      	bne.n	800706e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685a      	ldr	r2, [r3, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fb6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fbc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d020      	beq.n	8007008 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fca:	4a6a      	ldr	r2, [pc, #424]	@ (8007174 <I2C_ITError+0x25c>)
 8006fcc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f7fd fb44 	bl	8004660 <HAL_DMA_Abort_IT>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	f000 8089 	beq.w	80070f2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f022 0201 	bic.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2220      	movs	r2, #32
 8006ff4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ffc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007002:	4610      	mov	r0, r2
 8007004:	4798      	blx	r3
 8007006:	e074      	b.n	80070f2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800700c:	4a59      	ldr	r2, [pc, #356]	@ (8007174 <I2C_ITError+0x25c>)
 800700e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007014:	4618      	mov	r0, r3
 8007016:	f7fd fb23 	bl	8004660 <HAL_DMA_Abort_IT>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d068      	beq.n	80070f2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	695b      	ldr	r3, [r3, #20]
 8007026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800702a:	2b40      	cmp	r3, #64	@ 0x40
 800702c:	d10b      	bne.n	8007046 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	691a      	ldr	r2, [r3, #16]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007038:	b2d2      	uxtb	r2, r2
 800703a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007040:	1c5a      	adds	r2, r3, #1
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f022 0201 	bic.w	r2, r2, #1
 8007054:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2220      	movs	r2, #32
 800705a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007064:	687a      	ldr	r2, [r7, #4]
 8007066:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007068:	4610      	mov	r0, r2
 800706a:	4798      	blx	r3
 800706c:	e041      	b.n	80070f2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b60      	cmp	r3, #96	@ 0x60
 8007078:	d125      	bne.n	80070c6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2220      	movs	r2, #32
 800707e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2200      	movs	r2, #0
 8007086:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007092:	2b40      	cmp	r3, #64	@ 0x40
 8007094:	d10b      	bne.n	80070ae <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	691a      	ldr	r2, [r3, #16]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a0:	b2d2      	uxtb	r2, r2
 80070a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070a8:	1c5a      	adds	r2, r3, #1
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	681a      	ldr	r2, [r3, #0]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f022 0201 	bic.w	r2, r2, #1
 80070bc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f7fe fed0 	bl	8005e64 <HAL_I2C_AbortCpltCallback>
 80070c4:	e015      	b.n	80070f2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070d0:	2b40      	cmp	r3, #64	@ 0x40
 80070d2:	d10b      	bne.n	80070ec <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	1c5a      	adds	r2, r3, #1
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f7fe feaf 	bl	8005e50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070f6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	f003 0301 	and.w	r3, r3, #1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d10e      	bne.n	8007120 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007108:	2b00      	cmp	r3, #0
 800710a:	d109      	bne.n	8007120 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007116:	68bb      	ldr	r3, [r7, #8]
 8007118:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800711c:	2b00      	cmp	r3, #0
 800711e:	d007      	beq.n	8007130 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	685a      	ldr	r2, [r3, #4]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800712e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007136:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800713c:	f003 0304 	and.w	r3, r3, #4
 8007140:	2b04      	cmp	r3, #4
 8007142:	d113      	bne.n	800716c <I2C_ITError+0x254>
 8007144:	7bfb      	ldrb	r3, [r7, #15]
 8007146:	2b28      	cmp	r3, #40	@ 0x28
 8007148:	d110      	bne.n	800716c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a0a      	ldr	r2, [pc, #40]	@ (8007178 <I2C_ITError+0x260>)
 800714e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2220      	movs	r2, #32
 800715a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f7fe fe68 	bl	8005e3c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800716c:	bf00      	nop
 800716e:	3710      	adds	r7, #16
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	080076b1 	.word	0x080076b1
 8007178:	ffff0000 	.word	0xffff0000

0800717c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af02      	add	r7, sp, #8
 8007182:	60f8      	str	r0, [r7, #12]
 8007184:	4608      	mov	r0, r1
 8007186:	4611      	mov	r1, r2
 8007188:	461a      	mov	r2, r3
 800718a:	4603      	mov	r3, r0
 800718c:	817b      	strh	r3, [r7, #10]
 800718e:	460b      	mov	r3, r1
 8007190:	813b      	strh	r3, [r7, #8]
 8007192:	4613      	mov	r3, r2
 8007194:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	6a3b      	ldr	r3, [r7, #32]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f000 fb24 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d00d      	beq.n	80071da <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071cc:	d103      	bne.n	80071d6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e05f      	b.n	800729a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071da:	897b      	ldrh	r3, [r7, #10]
 80071dc:	b2db      	uxtb	r3, r3
 80071de:	461a      	mov	r2, r3
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80071e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ec:	6a3a      	ldr	r2, [r7, #32]
 80071ee:	492d      	ldr	r1, [pc, #180]	@ (80072a4 <I2C_RequestMemoryWrite+0x128>)
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fb7f 	bl	80078f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80071fc:	2301      	movs	r3, #1
 80071fe:	e04c      	b.n	800729a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007200:	2300      	movs	r3, #0
 8007202:	617b      	str	r3, [r7, #20]
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	617b      	str	r3, [r7, #20]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007216:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007218:	6a39      	ldr	r1, [r7, #32]
 800721a:	68f8      	ldr	r0, [r7, #12]
 800721c:	f000 fc0a 	bl	8007a34 <I2C_WaitOnTXEFlagUntilTimeout>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	d00d      	beq.n	8007242 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800722a:	2b04      	cmp	r3, #4
 800722c:	d107      	bne.n	800723e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800723c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800723e:	2301      	movs	r3, #1
 8007240:	e02b      	b.n	800729a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007242:	88fb      	ldrh	r3, [r7, #6]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d105      	bne.n	8007254 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007248:	893b      	ldrh	r3, [r7, #8]
 800724a:	b2da      	uxtb	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	611a      	str	r2, [r3, #16]
 8007252:	e021      	b.n	8007298 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007254:	893b      	ldrh	r3, [r7, #8]
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	b29b      	uxth	r3, r3
 800725a:	b2da      	uxtb	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007264:	6a39      	ldr	r1, [r7, #32]
 8007266:	68f8      	ldr	r0, [r7, #12]
 8007268:	f000 fbe4 	bl	8007a34 <I2C_WaitOnTXEFlagUntilTimeout>
 800726c:	4603      	mov	r3, r0
 800726e:	2b00      	cmp	r3, #0
 8007270:	d00d      	beq.n	800728e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007276:	2b04      	cmp	r3, #4
 8007278:	d107      	bne.n	800728a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007288:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e005      	b.n	800729a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800728e:	893b      	ldrh	r3, [r7, #8]
 8007290:	b2da      	uxtb	r2, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8007298:	2300      	movs	r3, #0
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	00010002 	.word	0x00010002

080072a8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af02      	add	r7, sp, #8
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	4608      	mov	r0, r1
 80072b2:	4611      	mov	r1, r2
 80072b4:	461a      	mov	r2, r3
 80072b6:	4603      	mov	r3, r0
 80072b8:	817b      	strh	r3, [r7, #10]
 80072ba:	460b      	mov	r3, r1
 80072bc:	813b      	strh	r3, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072d0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e4:	9300      	str	r3, [sp, #0]
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 fa86 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00d      	beq.n	8007316 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007304:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007308:	d103      	bne.n	8007312 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007310:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007312:	2303      	movs	r3, #3
 8007314:	e0aa      	b.n	800746c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007316:	897b      	ldrh	r3, [r7, #10]
 8007318:	b2db      	uxtb	r3, r3
 800731a:	461a      	mov	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007324:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007328:	6a3a      	ldr	r2, [r7, #32]
 800732a:	4952      	ldr	r1, [pc, #328]	@ (8007474 <I2C_RequestMemoryRead+0x1cc>)
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fae1 	bl	80078f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e097      	b.n	800746c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733c:	2300      	movs	r3, #0
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	695b      	ldr	r3, [r3, #20]
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007354:	6a39      	ldr	r1, [r7, #32]
 8007356:	68f8      	ldr	r0, [r7, #12]
 8007358:	f000 fb6c 	bl	8007a34 <I2C_WaitOnTXEFlagUntilTimeout>
 800735c:	4603      	mov	r3, r0
 800735e:	2b00      	cmp	r3, #0
 8007360:	d00d      	beq.n	800737e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007366:	2b04      	cmp	r3, #4
 8007368:	d107      	bne.n	800737a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681a      	ldr	r2, [r3, #0]
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007378:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e076      	b.n	800746c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800737e:	88fb      	ldrh	r3, [r7, #6]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d105      	bne.n	8007390 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007384:	893b      	ldrh	r3, [r7, #8]
 8007386:	b2da      	uxtb	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	611a      	str	r2, [r3, #16]
 800738e:	e021      	b.n	80073d4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007390:	893b      	ldrh	r3, [r7, #8]
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	b29b      	uxth	r3, r3
 8007396:	b2da      	uxtb	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800739e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a0:	6a39      	ldr	r1, [r7, #32]
 80073a2:	68f8      	ldr	r0, [r7, #12]
 80073a4:	f000 fb46 	bl	8007a34 <I2C_WaitOnTXEFlagUntilTimeout>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00d      	beq.n	80073ca <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073b2:	2b04      	cmp	r3, #4
 80073b4:	d107      	bne.n	80073c6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e050      	b.n	800746c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073ca:	893b      	ldrh	r3, [r7, #8]
 80073cc:	b2da      	uxtb	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d6:	6a39      	ldr	r1, [r7, #32]
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f000 fb2b 	bl	8007a34 <I2C_WaitOnTXEFlagUntilTimeout>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00d      	beq.n	8007400 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e8:	2b04      	cmp	r3, #4
 80073ea:	d107      	bne.n	80073fc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	681a      	ldr	r2, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073fa:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e035      	b.n	800746c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800740e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	9300      	str	r3, [sp, #0]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	2200      	movs	r2, #0
 8007418:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f000 f9ef 	bl	8007800 <I2C_WaitOnFlagUntilTimeout>
 8007422:	4603      	mov	r3, r0
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00d      	beq.n	8007444 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007432:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007436:	d103      	bne.n	8007440 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800743e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007440:	2303      	movs	r3, #3
 8007442:	e013      	b.n	800746c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007444:	897b      	ldrh	r3, [r7, #10]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	f043 0301 	orr.w	r3, r3, #1
 800744c:	b2da      	uxtb	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007454:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007456:	6a3a      	ldr	r2, [r7, #32]
 8007458:	4906      	ldr	r1, [pc, #24]	@ (8007474 <I2C_RequestMemoryRead+0x1cc>)
 800745a:	68f8      	ldr	r0, [r7, #12]
 800745c:	f000 fa4a 	bl	80078f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d001      	beq.n	800746a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e000      	b.n	800746c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800746a:	2300      	movs	r3, #0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3718      	adds	r7, #24
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}
 8007474:	00010002 	.word	0x00010002

08007478 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b086      	sub	sp, #24
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007484:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800748c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007494:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800749a:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685a      	ldr	r2, [r3, #4]
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80074aa:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d003      	beq.n	80074bc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074b8:	2200      	movs	r2, #0
 80074ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074c8:	2200      	movs	r2, #0
 80074ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80074cc:	7cfb      	ldrb	r3, [r7, #19]
 80074ce:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80074d2:	2b21      	cmp	r3, #33	@ 0x21
 80074d4:	d007      	beq.n	80074e6 <I2C_DMAXferCplt+0x6e>
 80074d6:	7cfb      	ldrb	r3, [r7, #19]
 80074d8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80074dc:	2b22      	cmp	r3, #34	@ 0x22
 80074de:	d131      	bne.n	8007544 <I2C_DMAXferCplt+0xcc>
 80074e0:	7cbb      	ldrb	r3, [r7, #18]
 80074e2:	2b20      	cmp	r3, #32
 80074e4:	d12e      	bne.n	8007544 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074f4:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	2200      	movs	r2, #0
 80074fa:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80074fc:	7cfb      	ldrb	r3, [r7, #19]
 80074fe:	2b29      	cmp	r3, #41	@ 0x29
 8007500:	d10a      	bne.n	8007518 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2221      	movs	r2, #33	@ 0x21
 8007506:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	2228      	movs	r2, #40	@ 0x28
 800750c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007510:	6978      	ldr	r0, [r7, #20]
 8007512:	f7fe fc71 	bl	8005df8 <HAL_I2C_SlaveTxCpltCallback>
 8007516:	e00c      	b.n	8007532 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007518:	7cfb      	ldrb	r3, [r7, #19]
 800751a:	2b2a      	cmp	r3, #42	@ 0x2a
 800751c:	d109      	bne.n	8007532 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2222      	movs	r2, #34	@ 0x22
 8007522:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007524:	697b      	ldr	r3, [r7, #20]
 8007526:	2228      	movs	r2, #40	@ 0x28
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800752c:	6978      	ldr	r0, [r7, #20]
 800752e:	f7fe fc6d 	bl	8005e0c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007540:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007542:	e074      	b.n	800762e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007544:	697b      	ldr	r3, [r7, #20]
 8007546:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800754a:	b2db      	uxtb	r3, r3
 800754c:	2b00      	cmp	r3, #0
 800754e:	d06e      	beq.n	800762e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007554:	b29b      	uxth	r3, r3
 8007556:	2b01      	cmp	r3, #1
 8007558:	d107      	bne.n	800756a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755a:	697b      	ldr	r3, [r7, #20]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007568:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007578:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007580:	d009      	beq.n	8007596 <I2C_DMAXferCplt+0x11e>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2b08      	cmp	r3, #8
 8007586:	d006      	beq.n	8007596 <I2C_DMAXferCplt+0x11e>
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800758e:	d002      	beq.n	8007596 <I2C_DMAXferCplt+0x11e>
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2b20      	cmp	r3, #32
 8007594:	d107      	bne.n	80075a6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	681a      	ldr	r2, [r3, #0]
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075a4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	685a      	ldr	r2, [r3, #4]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075b4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075c4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	2200      	movs	r2, #0
 80075ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d003      	beq.n	80075dc <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80075d4:	6978      	ldr	r0, [r7, #20]
 80075d6:	f7fe fc3b 	bl	8005e50 <HAL_I2C_ErrorCallback>
}
 80075da:	e028      	b.n	800762e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	2220      	movs	r2, #32
 80075e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	2b40      	cmp	r3, #64	@ 0x40
 80075ee:	d10a      	bne.n	8007606 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2200      	movs	r2, #0
 80075f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2200      	movs	r2, #0
 80075fc:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80075fe:	6978      	ldr	r0, [r7, #20]
 8007600:	f7f9 fb12 	bl	8000c28 <HAL_I2C_MemRxCpltCallback>
}
 8007604:	e013      	b.n	800762e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007606:	697b      	ldr	r3, [r7, #20]
 8007608:	2200      	movs	r2, #0
 800760a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2b08      	cmp	r3, #8
 8007612:	d002      	beq.n	800761a <I2C_DMAXferCplt+0x1a2>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2b20      	cmp	r3, #32
 8007618:	d103      	bne.n	8007622 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	2200      	movs	r2, #0
 800761e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007620:	e002      	b.n	8007628 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2212      	movs	r2, #18
 8007626:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007628:	6978      	ldr	r0, [r7, #20]
 800762a:	f7fe fbdb 	bl	8005de4 <HAL_I2C_MasterRxCpltCallback>
}
 800762e:	bf00      	nop
 8007630:	3718      	adds	r7, #24
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}

08007636 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007636:	b580      	push	{r7, lr}
 8007638:	b084      	sub	sp, #16
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007642:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007648:	2b00      	cmp	r3, #0
 800764a:	d003      	beq.n	8007654 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007650:	2200      	movs	r2, #0
 8007652:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007660:	2200      	movs	r2, #0
 8007662:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f7fd f9b5 	bl	80049d4 <HAL_DMA_GetError>
 800766a:	4603      	mov	r3, r0
 800766c:	2b02      	cmp	r3, #2
 800766e:	d01b      	beq.n	80076a8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	681a      	ldr	r2, [r3, #0]
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800767e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2220      	movs	r2, #32
 800768a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800769a:	f043 0210 	orr.w	r2, r3, #16
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f7fe fbd4 	bl	8005e50 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b086      	sub	sp, #24
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076c0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076c8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80076ca:	4b4b      	ldr	r3, [pc, #300]	@ (80077f8 <I2C_DMAAbort+0x148>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	08db      	lsrs	r3, r3, #3
 80076d0:	4a4a      	ldr	r2, [pc, #296]	@ (80077fc <I2C_DMAAbort+0x14c>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	0a1a      	lsrs	r2, r3, #8
 80076d8:	4613      	mov	r3, r2
 80076da:	009b      	lsls	r3, r3, #2
 80076dc:	4413      	add	r3, r2
 80076de:	00da      	lsls	r2, r3, #3
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076ee:	f043 0220 	orr.w	r2, r3, #32
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80076f6:	e00a      	b.n	800770e <I2C_DMAAbort+0x5e>
    }
    count--;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	3b01      	subs	r3, #1
 80076fc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007708:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800770c:	d0ea      	beq.n	80076e4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007712:	2b00      	cmp	r3, #0
 8007714:	d003      	beq.n	800771e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800771a:	2200      	movs	r2, #0
 800771c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800772a:	2200      	movs	r2, #0
 800772c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681a      	ldr	r2, [r3, #0]
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800773c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	2200      	movs	r2, #0
 8007742:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007750:	2200      	movs	r2, #0
 8007752:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007760:	2200      	movs	r2, #0
 8007762:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	697b      	ldr	r3, [r7, #20]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f022 0201 	bic.w	r2, r2, #1
 8007772:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b60      	cmp	r3, #96	@ 0x60
 800777e:	d10e      	bne.n	800779e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	2220      	movs	r2, #32
 8007784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007788:	697b      	ldr	r3, [r7, #20]
 800778a:	2200      	movs	r2, #0
 800778c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2200      	movs	r2, #0
 8007794:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007796:	6978      	ldr	r0, [r7, #20]
 8007798:	f7fe fb64 	bl	8005e64 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800779c:	e027      	b.n	80077ee <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800779e:	7cfb      	ldrb	r3, [r7, #19]
 80077a0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80077a4:	2b28      	cmp	r3, #40	@ 0x28
 80077a6:	d117      	bne.n	80077d8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681a      	ldr	r2, [r3, #0]
 80077ae:	697b      	ldr	r3, [r7, #20]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f042 0201 	orr.w	r2, r2, #1
 80077b6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80077c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2200      	movs	r2, #0
 80077cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2228      	movs	r2, #40	@ 0x28
 80077d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80077d6:	e007      	b.n	80077e8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80077e8:	6978      	ldr	r0, [r7, #20]
 80077ea:	f7fe fb31 	bl	8005e50 <HAL_I2C_ErrorCallback>
}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20000030 	.word	0x20000030
 80077fc:	14f8b589 	.word	0x14f8b589

08007800 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b084      	sub	sp, #16
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	603b      	str	r3, [r7, #0]
 800780c:	4613      	mov	r3, r2
 800780e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007810:	e048      	b.n	80078a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007818:	d044      	beq.n	80078a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800781a:	f7fb ffb9 	bl	8003790 <HAL_GetTick>
 800781e:	4602      	mov	r2, r0
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	1ad3      	subs	r3, r2, r3
 8007824:	683a      	ldr	r2, [r7, #0]
 8007826:	429a      	cmp	r2, r3
 8007828:	d302      	bcc.n	8007830 <I2C_WaitOnFlagUntilTimeout+0x30>
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d139      	bne.n	80078a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	0c1b      	lsrs	r3, r3, #16
 8007834:	b2db      	uxtb	r3, r3
 8007836:	2b01      	cmp	r3, #1
 8007838:	d10d      	bne.n	8007856 <I2C_WaitOnFlagUntilTimeout+0x56>
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	43da      	mvns	r2, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4013      	ands	r3, r2
 8007846:	b29b      	uxth	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	bf0c      	ite	eq
 800784c:	2301      	moveq	r3, #1
 800784e:	2300      	movne	r3, #0
 8007850:	b2db      	uxtb	r3, r3
 8007852:	461a      	mov	r2, r3
 8007854:	e00c      	b.n	8007870 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	43da      	mvns	r2, r3
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	4013      	ands	r3, r2
 8007862:	b29b      	uxth	r3, r3
 8007864:	2b00      	cmp	r3, #0
 8007866:	bf0c      	ite	eq
 8007868:	2301      	moveq	r3, #1
 800786a:	2300      	movne	r3, #0
 800786c:	b2db      	uxtb	r3, r3
 800786e:	461a      	mov	r2, r3
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	429a      	cmp	r2, r3
 8007874:	d116      	bne.n	80078a4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2200      	movs	r2, #0
 800787a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2220      	movs	r2, #32
 8007880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007890:	f043 0220 	orr.w	r2, r3, #32
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078a0:	2301      	movs	r3, #1
 80078a2:	e023      	b.n	80078ec <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	0c1b      	lsrs	r3, r3, #16
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d10d      	bne.n	80078ca <I2C_WaitOnFlagUntilTimeout+0xca>
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	695b      	ldr	r3, [r3, #20]
 80078b4:	43da      	mvns	r2, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	4013      	ands	r3, r2
 80078ba:	b29b      	uxth	r3, r3
 80078bc:	2b00      	cmp	r3, #0
 80078be:	bf0c      	ite	eq
 80078c0:	2301      	moveq	r3, #1
 80078c2:	2300      	movne	r3, #0
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	461a      	mov	r2, r3
 80078c8:	e00c      	b.n	80078e4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	699b      	ldr	r3, [r3, #24]
 80078d0:	43da      	mvns	r2, r3
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	4013      	ands	r3, r2
 80078d6:	b29b      	uxth	r3, r3
 80078d8:	2b00      	cmp	r3, #0
 80078da:	bf0c      	ite	eq
 80078dc:	2301      	moveq	r3, #1
 80078de:	2300      	movne	r3, #0
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	461a      	mov	r2, r3
 80078e4:	79fb      	ldrb	r3, [r7, #7]
 80078e6:	429a      	cmp	r2, r3
 80078e8:	d093      	beq.n	8007812 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3710      	adds	r7, #16
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}

080078f4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b084      	sub	sp, #16
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	60f8      	str	r0, [r7, #12]
 80078fc:	60b9      	str	r1, [r7, #8]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007902:	e071      	b.n	80079e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800790e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007912:	d123      	bne.n	800795c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007922:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800792c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2200      	movs	r2, #0
 8007932:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2220      	movs	r2, #32
 8007938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007948:	f043 0204 	orr.w	r2, r3, #4
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007958:	2301      	movs	r3, #1
 800795a:	e067      	b.n	8007a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007962:	d041      	beq.n	80079e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007964:	f7fb ff14 	bl	8003790 <HAL_GetTick>
 8007968:	4602      	mov	r2, r0
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	1ad3      	subs	r3, r2, r3
 800796e:	687a      	ldr	r2, [r7, #4]
 8007970:	429a      	cmp	r2, r3
 8007972:	d302      	bcc.n	800797a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2b00      	cmp	r3, #0
 8007978:	d136      	bne.n	80079e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	0c1b      	lsrs	r3, r3, #16
 800797e:	b2db      	uxtb	r3, r3
 8007980:	2b01      	cmp	r3, #1
 8007982:	d10c      	bne.n	800799e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	43da      	mvns	r2, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	4013      	ands	r3, r2
 8007990:	b29b      	uxth	r3, r3
 8007992:	2b00      	cmp	r3, #0
 8007994:	bf14      	ite	ne
 8007996:	2301      	movne	r3, #1
 8007998:	2300      	moveq	r3, #0
 800799a:	b2db      	uxtb	r3, r3
 800799c:	e00b      	b.n	80079b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	43da      	mvns	r2, r3
 80079a6:	68bb      	ldr	r3, [r7, #8]
 80079a8:	4013      	ands	r3, r2
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	bf14      	ite	ne
 80079b0:	2301      	movne	r3, #1
 80079b2:	2300      	moveq	r3, #0
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d016      	beq.n	80079e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2200      	movs	r2, #0
 80079be:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2220      	movs	r2, #32
 80079c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d4:	f043 0220 	orr.w	r2, r3, #32
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2200      	movs	r2, #0
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079e4:	2301      	movs	r3, #1
 80079e6:	e021      	b.n	8007a2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	0c1b      	lsrs	r3, r3, #16
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b01      	cmp	r3, #1
 80079f0:	d10c      	bne.n	8007a0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	695b      	ldr	r3, [r3, #20]
 80079f8:	43da      	mvns	r2, r3
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	4013      	ands	r3, r2
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	bf14      	ite	ne
 8007a04:	2301      	movne	r3, #1
 8007a06:	2300      	moveq	r3, #0
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	e00b      	b.n	8007a24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	43da      	mvns	r2, r3
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	4013      	ands	r3, r2
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	bf14      	ite	ne
 8007a1e:	2301      	movne	r3, #1
 8007a20:	2300      	moveq	r3, #0
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f47f af6d 	bne.w	8007904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007a2a:	2300      	movs	r3, #0
}
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	3710      	adds	r7, #16
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a40:	e034      	b.n	8007aac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a42:	68f8      	ldr	r0, [r7, #12]
 8007a44:	f000 f8b8 	bl	8007bb8 <I2C_IsAcknowledgeFailed>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e034      	b.n	8007abc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a58:	d028      	beq.n	8007aac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a5a:	f7fb fe99 	bl	8003790 <HAL_GetTick>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	1ad3      	subs	r3, r2, r3
 8007a64:	68ba      	ldr	r2, [r7, #8]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d302      	bcc.n	8007a70 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d11d      	bne.n	8007aac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	695b      	ldr	r3, [r3, #20]
 8007a76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a7a:	2b80      	cmp	r3, #128	@ 0x80
 8007a7c:	d016      	beq.n	8007aac <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2200      	movs	r2, #0
 8007a82:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a98:	f043 0220 	orr.w	r2, r3, #32
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	e007      	b.n	8007abc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ab6:	2b80      	cmp	r3, #128	@ 0x80
 8007ab8:	d1c3      	bne.n	8007a42 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007aba:	2300      	movs	r3, #0
}
 8007abc:	4618      	mov	r0, r3
 8007abe:	3710      	adds	r7, #16
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ad0:	e034      	b.n	8007b3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ad2:	68f8      	ldr	r0, [r7, #12]
 8007ad4:	f000 f870 	bl	8007bb8 <I2C_IsAcknowledgeFailed>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e034      	b.n	8007b4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ae8:	d028      	beq.n	8007b3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aea:	f7fb fe51 	bl	8003790 <HAL_GetTick>
 8007aee:	4602      	mov	r2, r0
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	68ba      	ldr	r2, [r7, #8]
 8007af6:	429a      	cmp	r2, r3
 8007af8:	d302      	bcc.n	8007b00 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d11d      	bne.n	8007b3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	f003 0304 	and.w	r3, r3, #4
 8007b0a:	2b04      	cmp	r3, #4
 8007b0c:	d016      	beq.n	8007b3c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	2200      	movs	r2, #0
 8007b12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	2220      	movs	r2, #32
 8007b18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b28:	f043 0220 	orr.w	r2, r3, #32
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e007      	b.n	8007b4c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	f003 0304 	and.w	r3, r3, #4
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d1c3      	bne.n	8007ad2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b4a:	2300      	movs	r3, #0
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007b54:	b480      	push	{r7}
 8007b56:	b085      	sub	sp, #20
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b60:	4b13      	ldr	r3, [pc, #76]	@ (8007bb0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	08db      	lsrs	r3, r3, #3
 8007b66:	4a13      	ldr	r2, [pc, #76]	@ (8007bb4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007b68:	fba2 2303 	umull	r2, r3, r2, r3
 8007b6c:	0a1a      	lsrs	r2, r3, #8
 8007b6e:	4613      	mov	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	4413      	add	r3, r2
 8007b74:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	3b01      	subs	r3, #1
 8007b7a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d107      	bne.n	8007b92 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b86:	f043 0220 	orr.w	r2, r3, #32
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	e008      	b.n	8007ba4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ba0:	d0e9      	beq.n	8007b76 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007ba2:	2300      	movs	r3, #0
}
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	3714      	adds	r7, #20
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr
 8007bb0:	20000030 	.word	0x20000030
 8007bb4:	14f8b589 	.word	0x14f8b589

08007bb8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bb8:	b480      	push	{r7}
 8007bba:	b083      	sub	sp, #12
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bce:	d11b      	bne.n	8007c08 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007bd8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2220      	movs	r2, #32
 8007be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bf4:	f043 0204 	orr.w	r2, r3, #4
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e000      	b.n	8007c0a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	370c      	adds	r7, #12
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007c16:	b480      	push	{r7}
 8007c18:	b083      	sub	sp, #12
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c22:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007c26:	d103      	bne.n	8007c30 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c2e:	e007      	b.n	8007c40 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c34:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007c38:	d102      	bne.n	8007c40 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2208      	movs	r2, #8
 8007c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d101      	bne.n	8007c5e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e101      	b.n	8007e62 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c78:	6878      	ldr	r0, [r7, #4]
 8007c7a:	f006 fbdd 	bl	800e438 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2203      	movs	r2, #3
 8007c82:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007c86:	68bb      	ldr	r3, [r7, #8]
 8007c88:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c8c:	d102      	bne.n	8007c94 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2200      	movs	r2, #0
 8007c92:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f002 ff34 	bl	800ab06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	7c1a      	ldrb	r2, [r3, #16]
 8007ca6:	f88d 2000 	strb.w	r2, [sp]
 8007caa:	3304      	adds	r3, #4
 8007cac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cae:	f002 fe13 	bl	800a8d8 <USB_CoreInit>
 8007cb2:	4603      	mov	r3, r0
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d005      	beq.n	8007cc4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2202      	movs	r2, #2
 8007cbc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007cc0:	2301      	movs	r3, #1
 8007cc2:	e0ce      	b.n	8007e62 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2100      	movs	r1, #0
 8007cca:	4618      	mov	r0, r3
 8007ccc:	f002 ff2c 	bl	800ab28 <USB_SetCurrentMode>
 8007cd0:	4603      	mov	r3, r0
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d005      	beq.n	8007ce2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2202      	movs	r2, #2
 8007cda:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	e0bf      	b.n	8007e62 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	73fb      	strb	r3, [r7, #15]
 8007ce6:	e04a      	b.n	8007d7e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ce8:	7bfa      	ldrb	r2, [r7, #15]
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	00db      	lsls	r3, r3, #3
 8007cf0:	4413      	add	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	3315      	adds	r3, #21
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007cfc:	7bfa      	ldrb	r2, [r7, #15]
 8007cfe:	6879      	ldr	r1, [r7, #4]
 8007d00:	4613      	mov	r3, r2
 8007d02:	00db      	lsls	r3, r3, #3
 8007d04:	4413      	add	r3, r2
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	440b      	add	r3, r1
 8007d0a:	3314      	adds	r3, #20
 8007d0c:	7bfa      	ldrb	r2, [r7, #15]
 8007d0e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007d10:	7bfa      	ldrb	r2, [r7, #15]
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	b298      	uxth	r0, r3
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	4613      	mov	r3, r2
 8007d1a:	00db      	lsls	r3, r3, #3
 8007d1c:	4413      	add	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	440b      	add	r3, r1
 8007d22:	332e      	adds	r3, #46	@ 0x2e
 8007d24:	4602      	mov	r2, r0
 8007d26:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d28:	7bfa      	ldrb	r2, [r7, #15]
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	00db      	lsls	r3, r3, #3
 8007d30:	4413      	add	r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	3318      	adds	r3, #24
 8007d38:	2200      	movs	r2, #0
 8007d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d3c:	7bfa      	ldrb	r2, [r7, #15]
 8007d3e:	6879      	ldr	r1, [r7, #4]
 8007d40:	4613      	mov	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	4413      	add	r3, r2
 8007d46:	009b      	lsls	r3, r3, #2
 8007d48:	440b      	add	r3, r1
 8007d4a:	331c      	adds	r3, #28
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d50:	7bfa      	ldrb	r2, [r7, #15]
 8007d52:	6879      	ldr	r1, [r7, #4]
 8007d54:	4613      	mov	r3, r2
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	4413      	add	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	3320      	adds	r3, #32
 8007d60:	2200      	movs	r2, #0
 8007d62:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d64:	7bfa      	ldrb	r2, [r7, #15]
 8007d66:	6879      	ldr	r1, [r7, #4]
 8007d68:	4613      	mov	r3, r2
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	4413      	add	r3, r2
 8007d6e:	009b      	lsls	r3, r3, #2
 8007d70:	440b      	add	r3, r1
 8007d72:	3324      	adds	r3, #36	@ 0x24
 8007d74:	2200      	movs	r2, #0
 8007d76:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	73fb      	strb	r3, [r7, #15]
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	791b      	ldrb	r3, [r3, #4]
 8007d82:	7bfa      	ldrb	r2, [r7, #15]
 8007d84:	429a      	cmp	r2, r3
 8007d86:	d3af      	bcc.n	8007ce8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d88:	2300      	movs	r3, #0
 8007d8a:	73fb      	strb	r3, [r7, #15]
 8007d8c:	e044      	b.n	8007e18 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d8e:	7bfa      	ldrb	r2, [r7, #15]
 8007d90:	6879      	ldr	r1, [r7, #4]
 8007d92:	4613      	mov	r3, r2
 8007d94:	00db      	lsls	r3, r3, #3
 8007d96:	4413      	add	r3, r2
 8007d98:	009b      	lsls	r3, r3, #2
 8007d9a:	440b      	add	r3, r1
 8007d9c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007da0:	2200      	movs	r2, #0
 8007da2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007da4:	7bfa      	ldrb	r2, [r7, #15]
 8007da6:	6879      	ldr	r1, [r7, #4]
 8007da8:	4613      	mov	r3, r2
 8007daa:	00db      	lsls	r3, r3, #3
 8007dac:	4413      	add	r3, r2
 8007dae:	009b      	lsls	r3, r3, #2
 8007db0:	440b      	add	r3, r1
 8007db2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007db6:	7bfa      	ldrb	r2, [r7, #15]
 8007db8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007dba:	7bfa      	ldrb	r2, [r7, #15]
 8007dbc:	6879      	ldr	r1, [r7, #4]
 8007dbe:	4613      	mov	r3, r2
 8007dc0:	00db      	lsls	r3, r3, #3
 8007dc2:	4413      	add	r3, r2
 8007dc4:	009b      	lsls	r3, r3, #2
 8007dc6:	440b      	add	r3, r1
 8007dc8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007dcc:	2200      	movs	r2, #0
 8007dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007dd0:	7bfa      	ldrb	r2, [r7, #15]
 8007dd2:	6879      	ldr	r1, [r7, #4]
 8007dd4:	4613      	mov	r3, r2
 8007dd6:	00db      	lsls	r3, r3, #3
 8007dd8:	4413      	add	r3, r2
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	440b      	add	r3, r1
 8007dde:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007de2:	2200      	movs	r2, #0
 8007de4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007de6:	7bfa      	ldrb	r2, [r7, #15]
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	4613      	mov	r3, r2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	440b      	add	r3, r1
 8007df4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007df8:	2200      	movs	r2, #0
 8007dfa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007dfc:	7bfa      	ldrb	r2, [r7, #15]
 8007dfe:	6879      	ldr	r1, [r7, #4]
 8007e00:	4613      	mov	r3, r2
 8007e02:	00db      	lsls	r3, r3, #3
 8007e04:	4413      	add	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007e0e:	2200      	movs	r2, #0
 8007e10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e12:	7bfb      	ldrb	r3, [r7, #15]
 8007e14:	3301      	adds	r3, #1
 8007e16:	73fb      	strb	r3, [r7, #15]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	791b      	ldrb	r3, [r3, #4]
 8007e1c:	7bfa      	ldrb	r2, [r7, #15]
 8007e1e:	429a      	cmp	r2, r3
 8007e20:	d3b5      	bcc.n	8007d8e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6818      	ldr	r0, [r3, #0]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	7c1a      	ldrb	r2, [r3, #16]
 8007e2a:	f88d 2000 	strb.w	r2, [sp]
 8007e2e:	3304      	adds	r3, #4
 8007e30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e32:	f002 fec5 	bl	800abc0 <USB_DevInit>
 8007e36:	4603      	mov	r3, r0
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d005      	beq.n	8007e48 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	e00c      	b.n	8007e62 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f003 ff0f 	bl	800bc7e <USB_DevDisconnect>

  return HAL_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3710      	adds	r7, #16
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}

08007e6a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d101      	bne.n	8007e86 <HAL_PCD_Start+0x1c>
 8007e82:	2302      	movs	r3, #2
 8007e84:	e022      	b.n	8007ecc <HAL_PCD_Start+0x62>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2201      	movs	r2, #1
 8007e8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	68db      	ldr	r3, [r3, #12]
 8007e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d009      	beq.n	8007eae <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d105      	bne.n	8007eae <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ea6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f002 fe16 	bl	800aae4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f003 febd 	bl	800bc3c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007eca:	2300      	movs	r3, #0
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	3710      	adds	r7, #16
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}

08007ed4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007ed4:	b590      	push	{r4, r7, lr}
 8007ed6:	b08d      	sub	sp, #52	@ 0x34
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ee2:	6a3b      	ldr	r3, [r7, #32]
 8007ee4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f003 ff7b 	bl	800bde6 <USB_GetMode>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f040 848c 	bne.w	8008810 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f003 fedf 	bl	800bcc0 <USB_ReadInterrupts>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	f000 8482 	beq.w	800880e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	0a1b      	lsrs	r3, r3, #8
 8007f14:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f003 fecc 	bl	800bcc0 <USB_ReadInterrupts>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	f003 0302 	and.w	r3, r3, #2
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d107      	bne.n	8007f42 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	695a      	ldr	r2, [r3, #20]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f002 0202 	and.w	r2, r2, #2
 8007f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4618      	mov	r0, r3
 8007f48:	f003 feba 	bl	800bcc0 <USB_ReadInterrupts>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	f003 0310 	and.w	r3, r3, #16
 8007f52:	2b10      	cmp	r3, #16
 8007f54:	d161      	bne.n	800801a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	699a      	ldr	r2, [r3, #24]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f022 0210 	bic.w	r2, r2, #16
 8007f64:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007f66:	6a3b      	ldr	r3, [r7, #32]
 8007f68:	6a1b      	ldr	r3, [r3, #32]
 8007f6a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	f003 020f 	and.w	r2, r3, #15
 8007f72:	4613      	mov	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	4413      	add	r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	4413      	add	r3, r2
 8007f82:	3304      	adds	r3, #4
 8007f84:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007f86:	69bb      	ldr	r3, [r7, #24]
 8007f88:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007f8c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007f90:	d124      	bne.n	8007fdc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007f92:	69ba      	ldr	r2, [r7, #24]
 8007f94:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007f98:	4013      	ands	r3, r2
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d035      	beq.n	800800a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	091b      	lsrs	r3, r3, #4
 8007fa6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	461a      	mov	r2, r3
 8007fb0:	6a38      	ldr	r0, [r7, #32]
 8007fb2:	f003 fcf1 	bl	800b998 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	68da      	ldr	r2, [r3, #12]
 8007fba:	69bb      	ldr	r3, [r7, #24]
 8007fbc:	091b      	lsrs	r3, r3, #4
 8007fbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fc2:	441a      	add	r2, r3
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	695a      	ldr	r2, [r3, #20]
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	091b      	lsrs	r3, r3, #4
 8007fd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fd4:	441a      	add	r2, r3
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	615a      	str	r2, [r3, #20]
 8007fda:	e016      	b.n	800800a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007fe2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007fe6:	d110      	bne.n	800800a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007fee:	2208      	movs	r2, #8
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6a38      	ldr	r0, [r7, #32]
 8007ff4:	f003 fcd0 	bl	800b998 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	695a      	ldr	r2, [r3, #20]
 8007ffc:	69bb      	ldr	r3, [r7, #24]
 8007ffe:	091b      	lsrs	r3, r3, #4
 8008000:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008004:	441a      	add	r2, r3
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	699a      	ldr	r2, [r3, #24]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	f042 0210 	orr.w	r2, r2, #16
 8008018:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	4618      	mov	r0, r3
 8008020:	f003 fe4e 	bl	800bcc0 <USB_ReadInterrupts>
 8008024:	4603      	mov	r3, r0
 8008026:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800802a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800802e:	f040 80a7 	bne.w	8008180 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008032:	2300      	movs	r3, #0
 8008034:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	4618      	mov	r0, r3
 800803c:	f003 fe53 	bl	800bce6 <USB_ReadDevAllOutEpInterrupt>
 8008040:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008042:	e099      	b.n	8008178 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	2b00      	cmp	r3, #0
 800804c:	f000 808e 	beq.w	800816c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008056:	b2d2      	uxtb	r2, r2
 8008058:	4611      	mov	r1, r2
 800805a:	4618      	mov	r0, r3
 800805c:	f003 fe77 	bl	800bd4e <USB_ReadDevOutEPInterrupt>
 8008060:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d00c      	beq.n	8008086 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800806c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806e:	015a      	lsls	r2, r3, #5
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	4413      	add	r3, r2
 8008074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008078:	461a      	mov	r2, r3
 800807a:	2301      	movs	r3, #1
 800807c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800807e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 fea3 	bl	8008dcc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008086:	693b      	ldr	r3, [r7, #16]
 8008088:	f003 0308 	and.w	r3, r3, #8
 800808c:	2b00      	cmp	r3, #0
 800808e:	d00c      	beq.n	80080aa <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008092:	015a      	lsls	r2, r3, #5
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	4413      	add	r3, r2
 8008098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800809c:	461a      	mov	r2, r3
 800809e:	2308      	movs	r3, #8
 80080a0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80080a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 ff79 	bl	8008f9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	f003 0310 	and.w	r3, r3, #16
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d008      	beq.n	80080c6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80080b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b6:	015a      	lsls	r2, r3, #5
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	4413      	add	r3, r2
 80080bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080c0:	461a      	mov	r2, r3
 80080c2:	2310      	movs	r3, #16
 80080c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f003 0302 	and.w	r3, r3, #2
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d030      	beq.n	8008132 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80080d0:	6a3b      	ldr	r3, [r7, #32]
 80080d2:	695b      	ldr	r3, [r3, #20]
 80080d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080d8:	2b80      	cmp	r3, #128	@ 0x80
 80080da:	d109      	bne.n	80080f0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80080dc:	69fb      	ldr	r3, [r7, #28]
 80080de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080e2:	685b      	ldr	r3, [r3, #4]
 80080e4:	69fa      	ldr	r2, [r7, #28]
 80080e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080ee:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80080f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080f2:	4613      	mov	r3, r2
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	4413      	add	r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	4413      	add	r3, r2
 8008102:	3304      	adds	r3, #4
 8008104:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	78db      	ldrb	r3, [r3, #3]
 800810a:	2b01      	cmp	r3, #1
 800810c:	d108      	bne.n	8008120 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	2200      	movs	r2, #0
 8008112:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008116:	b2db      	uxtb	r3, r3
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f006 fa88 	bl	800e630 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008122:	015a      	lsls	r2, r3, #5
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	4413      	add	r3, r2
 8008128:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812c:	461a      	mov	r2, r3
 800812e:	2302      	movs	r3, #2
 8008130:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	f003 0320 	and.w	r3, r3, #32
 8008138:	2b00      	cmp	r3, #0
 800813a:	d008      	beq.n	800814e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800813c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008148:	461a      	mov	r2, r3
 800814a:	2320      	movs	r3, #32
 800814c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800814e:	693b      	ldr	r3, [r7, #16]
 8008150:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d009      	beq.n	800816c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800815a:	015a      	lsls	r2, r3, #5
 800815c:	69fb      	ldr	r3, [r7, #28]
 800815e:	4413      	add	r3, r2
 8008160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008164:	461a      	mov	r2, r3
 8008166:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800816a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800816c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816e:	3301      	adds	r3, #1
 8008170:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008174:	085b      	lsrs	r3, r3, #1
 8008176:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800817a:	2b00      	cmp	r3, #0
 800817c:	f47f af62 	bne.w	8008044 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4618      	mov	r0, r3
 8008186:	f003 fd9b 	bl	800bcc0 <USB_ReadInterrupts>
 800818a:	4603      	mov	r3, r0
 800818c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8008190:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008194:	f040 80db 	bne.w	800834e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f003 fdbc 	bl	800bd1a <USB_ReadDevAllInEpInterrupt>
 80081a2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80081a4:	2300      	movs	r3, #0
 80081a6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80081a8:	e0cd      	b.n	8008346 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80081aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 80c2 	beq.w	800833a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081bc:	b2d2      	uxtb	r2, r2
 80081be:	4611      	mov	r1, r2
 80081c0:	4618      	mov	r0, r3
 80081c2:	f003 fde2 	bl	800bd8a <USB_ReadDevInEPInterrupt>
 80081c6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	f003 0301 	and.w	r3, r3, #1
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d057      	beq.n	8008282 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80081d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081d4:	f003 030f 	and.w	r3, r3, #15
 80081d8:	2201      	movs	r2, #1
 80081da:	fa02 f303 	lsl.w	r3, r2, r3
 80081de:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081e0:	69fb      	ldr	r3, [r7, #28]
 80081e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	43db      	mvns	r3, r3
 80081ec:	69f9      	ldr	r1, [r7, #28]
 80081ee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80081f2:	4013      	ands	r3, r2
 80081f4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80081f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008202:	461a      	mov	r2, r3
 8008204:	2301      	movs	r3, #1
 8008206:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	799b      	ldrb	r3, [r3, #6]
 800820c:	2b01      	cmp	r3, #1
 800820e:	d132      	bne.n	8008276 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008210:	6879      	ldr	r1, [r7, #4]
 8008212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008214:	4613      	mov	r3, r2
 8008216:	00db      	lsls	r3, r3, #3
 8008218:	4413      	add	r3, r2
 800821a:	009b      	lsls	r3, r3, #2
 800821c:	440b      	add	r3, r1
 800821e:	3320      	adds	r3, #32
 8008220:	6819      	ldr	r1, [r3, #0]
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008226:	4613      	mov	r3, r2
 8008228:	00db      	lsls	r3, r3, #3
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	4403      	add	r3, r0
 8008230:	331c      	adds	r3, #28
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4419      	add	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800823a:	4613      	mov	r3, r2
 800823c:	00db      	lsls	r3, r3, #3
 800823e:	4413      	add	r3, r2
 8008240:	009b      	lsls	r3, r3, #2
 8008242:	4403      	add	r3, r0
 8008244:	3320      	adds	r3, #32
 8008246:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800824a:	2b00      	cmp	r3, #0
 800824c:	d113      	bne.n	8008276 <HAL_PCD_IRQHandler+0x3a2>
 800824e:	6879      	ldr	r1, [r7, #4]
 8008250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008252:	4613      	mov	r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	4413      	add	r3, r2
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	440b      	add	r3, r1
 800825c:	3324      	adds	r3, #36	@ 0x24
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d108      	bne.n	8008276 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800826e:	461a      	mov	r2, r3
 8008270:	2101      	movs	r1, #1
 8008272:	f003 fde9 	bl	800be48 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	b2db      	uxtb	r3, r3
 800827a:	4619      	mov	r1, r3
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f006 f95c 	bl	800e53a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	f003 0308 	and.w	r3, r3, #8
 8008288:	2b00      	cmp	r3, #0
 800828a:	d008      	beq.n	800829e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	69fb      	ldr	r3, [r7, #28]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008298:	461a      	mov	r2, r3
 800829a:	2308      	movs	r3, #8
 800829c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f003 0310 	and.w	r3, r3, #16
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d008      	beq.n	80082ba <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80082a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082aa:	015a      	lsls	r2, r3, #5
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	4413      	add	r3, r2
 80082b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b4:	461a      	mov	r2, r3
 80082b6:	2310      	movs	r3, #16
 80082b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80082ba:	693b      	ldr	r3, [r7, #16]
 80082bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d008      	beq.n	80082d6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80082c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	69fb      	ldr	r3, [r7, #28]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d0:	461a      	mov	r2, r3
 80082d2:	2340      	movs	r3, #64	@ 0x40
 80082d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f003 0302 	and.w	r3, r3, #2
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d023      	beq.n	8008328 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80082e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082e2:	6a38      	ldr	r0, [r7, #32]
 80082e4:	f002 fdd0 	bl	800ae88 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80082e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082ea:	4613      	mov	r3, r2
 80082ec:	00db      	lsls	r3, r3, #3
 80082ee:	4413      	add	r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	3310      	adds	r3, #16
 80082f4:	687a      	ldr	r2, [r7, #4]
 80082f6:	4413      	add	r3, r2
 80082f8:	3304      	adds	r3, #4
 80082fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	78db      	ldrb	r3, [r3, #3]
 8008300:	2b01      	cmp	r3, #1
 8008302:	d108      	bne.n	8008316 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	2200      	movs	r2, #0
 8008308:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800830a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800830c:	b2db      	uxtb	r3, r3
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f006 f99f 	bl	800e654 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008318:	015a      	lsls	r2, r3, #5
 800831a:	69fb      	ldr	r3, [r7, #28]
 800831c:	4413      	add	r3, r2
 800831e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008322:	461a      	mov	r2, r3
 8008324:	2302      	movs	r3, #2
 8008326:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800832e:	2b00      	cmp	r3, #0
 8008330:	d003      	beq.n	800833a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008332:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008334:	6878      	ldr	r0, [r7, #4]
 8008336:	f000 fcbd 	bl	8008cb4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800833a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833c:	3301      	adds	r3, #1
 800833e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008340:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008342:	085b      	lsrs	r3, r3, #1
 8008344:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008348:	2b00      	cmp	r3, #0
 800834a:	f47f af2e 	bne.w	80081aa <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4618      	mov	r0, r3
 8008354:	f003 fcb4 	bl	800bcc0 <USB_ReadInterrupts>
 8008358:	4603      	mov	r3, r0
 800835a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800835e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008362:	d122      	bne.n	80083aa <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008364:	69fb      	ldr	r3, [r7, #28]
 8008366:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	69fa      	ldr	r2, [r7, #28]
 800836e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008372:	f023 0301 	bic.w	r3, r3, #1
 8008376:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800837e:	2b01      	cmp	r3, #1
 8008380:	d108      	bne.n	8008394 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800838a:	2100      	movs	r1, #0
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fea3 	bl	80090d8 <HAL_PCDEx_LPM_Callback>
 8008392:	e002      	b.n	800839a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f006 f93d 	bl	800e614 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	695a      	ldr	r2, [r3, #20]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80083a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f003 fc86 	bl	800bcc0 <USB_ReadInterrupts>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083be:	d112      	bne.n	80083e6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80083c0:	69fb      	ldr	r3, [r7, #28]
 80083c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	f003 0301 	and.w	r3, r3, #1
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d102      	bne.n	80083d6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f006 f8f9 	bl	800e5c8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	695a      	ldr	r2, [r3, #20]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80083e4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f003 fc68 	bl	800bcc0 <USB_ReadInterrupts>
 80083f0:	4603      	mov	r3, r0
 80083f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80083f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083fa:	f040 80b7 	bne.w	800856c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80083fe:	69fb      	ldr	r3, [r7, #28]
 8008400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008404:	685b      	ldr	r3, [r3, #4]
 8008406:	69fa      	ldr	r2, [r7, #28]
 8008408:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800840c:	f023 0301 	bic.w	r3, r3, #1
 8008410:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	2110      	movs	r1, #16
 8008418:	4618      	mov	r0, r3
 800841a:	f002 fd35 	bl	800ae88 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800841e:	2300      	movs	r3, #0
 8008420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008422:	e046      	b.n	80084b2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008426:	015a      	lsls	r2, r3, #5
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	4413      	add	r3, r2
 800842c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008430:	461a      	mov	r2, r3
 8008432:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008436:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843a:	015a      	lsls	r2, r3, #5
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	4413      	add	r3, r2
 8008440:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008448:	0151      	lsls	r1, r2, #5
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	440a      	add	r2, r1
 800844e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008452:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008456:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008458:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845a:	015a      	lsls	r2, r3, #5
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	4413      	add	r3, r2
 8008460:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008464:	461a      	mov	r2, r3
 8008466:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800846a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800846c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846e:	015a      	lsls	r2, r3, #5
 8008470:	69fb      	ldr	r3, [r7, #28]
 8008472:	4413      	add	r3, r2
 8008474:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800847c:	0151      	lsls	r1, r2, #5
 800847e:	69fa      	ldr	r2, [r7, #28]
 8008480:	440a      	add	r2, r1
 8008482:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008486:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800848a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800848c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848e:	015a      	lsls	r2, r3, #5
 8008490:	69fb      	ldr	r3, [r7, #28]
 8008492:	4413      	add	r3, r2
 8008494:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800849c:	0151      	lsls	r1, r2, #5
 800849e:	69fa      	ldr	r2, [r7, #28]
 80084a0:	440a      	add	r2, r1
 80084a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084a6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ae:	3301      	adds	r3, #1
 80084b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	791b      	ldrb	r3, [r3, #4]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ba:	4293      	cmp	r3, r2
 80084bc:	d3b2      	bcc.n	8008424 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80084be:	69fb      	ldr	r3, [r7, #28]
 80084c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c4:	69db      	ldr	r3, [r3, #28]
 80084c6:	69fa      	ldr	r2, [r7, #28]
 80084c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084cc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80084d0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	7bdb      	ldrb	r3, [r3, #15]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d016      	beq.n	8008508 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084e4:	69fa      	ldr	r2, [r7, #28]
 80084e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084ea:	f043 030b 	orr.w	r3, r3, #11
 80084ee:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80084f2:	69fb      	ldr	r3, [r7, #28]
 80084f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084fa:	69fa      	ldr	r2, [r7, #28]
 80084fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008500:	f043 030b 	orr.w	r3, r3, #11
 8008504:	6453      	str	r3, [r2, #68]	@ 0x44
 8008506:	e015      	b.n	8008534 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008508:	69fb      	ldr	r3, [r7, #28]
 800850a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800850e:	695b      	ldr	r3, [r3, #20]
 8008510:	69fa      	ldr	r2, [r7, #28]
 8008512:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008516:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800851a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800851e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008520:	69fb      	ldr	r3, [r7, #28]
 8008522:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008526:	691b      	ldr	r3, [r3, #16]
 8008528:	69fa      	ldr	r2, [r7, #28]
 800852a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800852e:	f043 030b 	orr.w	r3, r3, #11
 8008532:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008542:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008546:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6818      	ldr	r0, [r3, #0]
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008556:	461a      	mov	r2, r3
 8008558:	f003 fc76 	bl	800be48 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	695a      	ldr	r2, [r3, #20]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800856a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4618      	mov	r0, r3
 8008572:	f003 fba5 	bl	800bcc0 <USB_ReadInterrupts>
 8008576:	4603      	mov	r3, r0
 8008578:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800857c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008580:	d123      	bne.n	80085ca <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	4618      	mov	r0, r3
 8008588:	f003 fc3b 	bl	800be02 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4618      	mov	r0, r3
 8008592:	f002 fcf2 	bl	800af7a <USB_GetDevSpeed>
 8008596:	4603      	mov	r3, r0
 8008598:	461a      	mov	r2, r3
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681c      	ldr	r4, [r3, #0]
 80085a2:	f001 f9c9 	bl	8009938 <HAL_RCC_GetHCLKFreq>
 80085a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80085ac:	461a      	mov	r2, r3
 80085ae:	4620      	mov	r0, r4
 80085b0:	f002 f9f6 	bl	800a9a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f005 ffe8 	bl	800e58a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	695a      	ldr	r2, [r3, #20]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80085c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f003 fb76 	bl	800bcc0 <USB_ReadInterrupts>
 80085d4:	4603      	mov	r3, r0
 80085d6:	f003 0308 	and.w	r3, r3, #8
 80085da:	2b08      	cmp	r3, #8
 80085dc:	d10a      	bne.n	80085f4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f005 ffc5 	bl	800e56e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	695a      	ldr	r2, [r3, #20]
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f002 0208 	and.w	r2, r2, #8
 80085f2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f003 fb61 	bl	800bcc0 <USB_ReadInterrupts>
 80085fe:	4603      	mov	r3, r0
 8008600:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008604:	2b80      	cmp	r3, #128	@ 0x80
 8008606:	d123      	bne.n	8008650 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008608:	6a3b      	ldr	r3, [r7, #32]
 800860a:	699b      	ldr	r3, [r3, #24]
 800860c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008610:	6a3b      	ldr	r3, [r7, #32]
 8008612:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008614:	2301      	movs	r3, #1
 8008616:	627b      	str	r3, [r7, #36]	@ 0x24
 8008618:	e014      	b.n	8008644 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800861a:	6879      	ldr	r1, [r7, #4]
 800861c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800861e:	4613      	mov	r3, r2
 8008620:	00db      	lsls	r3, r3, #3
 8008622:	4413      	add	r3, r2
 8008624:	009b      	lsls	r3, r3, #2
 8008626:	440b      	add	r3, r1
 8008628:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800862c:	781b      	ldrb	r3, [r3, #0]
 800862e:	2b01      	cmp	r3, #1
 8008630:	d105      	bne.n	800863e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008634:	b2db      	uxtb	r3, r3
 8008636:	4619      	mov	r1, r3
 8008638:	6878      	ldr	r0, [r7, #4]
 800863a:	f000 fb0a 	bl	8008c52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800863e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008640:	3301      	adds	r3, #1
 8008642:	627b      	str	r3, [r7, #36]	@ 0x24
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	791b      	ldrb	r3, [r3, #4]
 8008648:	461a      	mov	r2, r3
 800864a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800864c:	4293      	cmp	r3, r2
 800864e:	d3e4      	bcc.n	800861a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4618      	mov	r0, r3
 8008656:	f003 fb33 	bl	800bcc0 <USB_ReadInterrupts>
 800865a:	4603      	mov	r3, r0
 800865c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008660:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008664:	d13c      	bne.n	80086e0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008666:	2301      	movs	r3, #1
 8008668:	627b      	str	r3, [r7, #36]	@ 0x24
 800866a:	e02b      	b.n	80086c4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800866c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800866e:	015a      	lsls	r2, r3, #5
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	4413      	add	r3, r2
 8008674:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800867c:	6879      	ldr	r1, [r7, #4]
 800867e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008680:	4613      	mov	r3, r2
 8008682:	00db      	lsls	r3, r3, #3
 8008684:	4413      	add	r3, r2
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	440b      	add	r3, r1
 800868a:	3318      	adds	r3, #24
 800868c:	781b      	ldrb	r3, [r3, #0]
 800868e:	2b01      	cmp	r3, #1
 8008690:	d115      	bne.n	80086be <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8008692:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8008694:	2b00      	cmp	r3, #0
 8008696:	da12      	bge.n	80086be <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8008698:	6879      	ldr	r1, [r7, #4]
 800869a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800869c:	4613      	mov	r3, r2
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	4413      	add	r3, r2
 80086a2:	009b      	lsls	r3, r3, #2
 80086a4:	440b      	add	r3, r1
 80086a6:	3317      	adds	r3, #23
 80086a8:	2201      	movs	r2, #1
 80086aa:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80086ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086b4:	b2db      	uxtb	r3, r3
 80086b6:	4619      	mov	r1, r3
 80086b8:	6878      	ldr	r0, [r7, #4]
 80086ba:	f000 faca 	bl	8008c52 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c0:	3301      	adds	r3, #1
 80086c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	791b      	ldrb	r3, [r3, #4]
 80086c8:	461a      	mov	r2, r3
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d3cd      	bcc.n	800866c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695a      	ldr	r2, [r3, #20]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80086de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	4618      	mov	r0, r3
 80086e6:	f003 faeb 	bl	800bcc0 <USB_ReadInterrupts>
 80086ea:	4603      	mov	r3, r0
 80086ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80086f0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80086f4:	d156      	bne.n	80087a4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086f6:	2301      	movs	r3, #1
 80086f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80086fa:	e045      	b.n	8008788 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80086fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086fe:	015a      	lsls	r2, r3, #5
 8008700:	69fb      	ldr	r3, [r7, #28]
 8008702:	4413      	add	r3, r2
 8008704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800870c:	6879      	ldr	r1, [r7, #4]
 800870e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008710:	4613      	mov	r3, r2
 8008712:	00db      	lsls	r3, r3, #3
 8008714:	4413      	add	r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b01      	cmp	r3, #1
 8008722:	d12e      	bne.n	8008782 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008724:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008726:	2b00      	cmp	r3, #0
 8008728:	da2b      	bge.n	8008782 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	0c1a      	lsrs	r2, r3, #16
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008734:	4053      	eors	r3, r2
 8008736:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800873a:	2b00      	cmp	r3, #0
 800873c:	d121      	bne.n	8008782 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008742:	4613      	mov	r3, r2
 8008744:	00db      	lsls	r3, r3, #3
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	440b      	add	r3, r1
 800874c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008750:	2201      	movs	r2, #1
 8008752:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008754:	6a3b      	ldr	r3, [r7, #32]
 8008756:	699b      	ldr	r3, [r3, #24]
 8008758:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800875c:	6a3b      	ldr	r3, [r7, #32]
 800875e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008760:	6a3b      	ldr	r3, [r7, #32]
 8008762:	695b      	ldr	r3, [r3, #20]
 8008764:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008768:	2b00      	cmp	r3, #0
 800876a:	d10a      	bne.n	8008782 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800877a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800877e:	6053      	str	r3, [r2, #4]
            break;
 8008780:	e008      	b.n	8008794 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	3301      	adds	r3, #1
 8008786:	627b      	str	r3, [r7, #36]	@ 0x24
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	791b      	ldrb	r3, [r3, #4]
 800878c:	461a      	mov	r2, r3
 800878e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008790:	4293      	cmp	r3, r2
 8008792:	d3b3      	bcc.n	80086fc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695a      	ldr	r2, [r3, #20]
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80087a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4618      	mov	r0, r3
 80087aa:	f003 fa89 	bl	800bcc0 <USB_ReadInterrupts>
 80087ae:	4603      	mov	r3, r0
 80087b0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b8:	d10a      	bne.n	80087d0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f005 ff5c 	bl	800e678 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	695a      	ldr	r2, [r3, #20]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80087ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f003 fa73 	bl	800bcc0 <USB_ReadInterrupts>
 80087da:	4603      	mov	r3, r0
 80087dc:	f003 0304 	and.w	r3, r3, #4
 80087e0:	2b04      	cmp	r3, #4
 80087e2:	d115      	bne.n	8008810 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	685b      	ldr	r3, [r3, #4]
 80087ea:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	f003 0304 	and.w	r3, r3, #4
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d002      	beq.n	80087fc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80087f6:	6878      	ldr	r0, [r7, #4]
 80087f8:	f005 ff4c 	bl	800e694 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	6859      	ldr	r1, [r3, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	69ba      	ldr	r2, [r7, #24]
 8008808:	430a      	orrs	r2, r1
 800880a:	605a      	str	r2, [r3, #4]
 800880c:	e000      	b.n	8008810 <HAL_PCD_IRQHandler+0x93c>
      return;
 800880e:	bf00      	nop
    }
  }
}
 8008810:	3734      	adds	r7, #52	@ 0x34
 8008812:	46bd      	mov	sp, r7
 8008814:	bd90      	pop	{r4, r7, pc}

08008816 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008816:	b580      	push	{r7, lr}
 8008818:	b082      	sub	sp, #8
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
 800881e:	460b      	mov	r3, r1
 8008820:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_PCD_SetAddress+0x1a>
 800882c:	2302      	movs	r3, #2
 800882e:	e012      	b.n	8008856 <HAL_PCD_SetAddress+0x40>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	78fa      	ldrb	r2, [r7, #3]
 800883c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	78fa      	ldrb	r2, [r7, #3]
 8008844:	4611      	mov	r1, r2
 8008846:	4618      	mov	r0, r3
 8008848:	f003 f9d2 	bl	800bbf0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2200      	movs	r2, #0
 8008850:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008854:	2300      	movs	r3, #0
}
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}

0800885e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800885e:	b580      	push	{r7, lr}
 8008860:	b084      	sub	sp, #16
 8008862:	af00      	add	r7, sp, #0
 8008864:	6078      	str	r0, [r7, #4]
 8008866:	4608      	mov	r0, r1
 8008868:	4611      	mov	r1, r2
 800886a:	461a      	mov	r2, r3
 800886c:	4603      	mov	r3, r0
 800886e:	70fb      	strb	r3, [r7, #3]
 8008870:	460b      	mov	r3, r1
 8008872:	803b      	strh	r3, [r7, #0]
 8008874:	4613      	mov	r3, r2
 8008876:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008878:	2300      	movs	r3, #0
 800887a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800887c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008880:	2b00      	cmp	r3, #0
 8008882:	da0f      	bge.n	80088a4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008884:	78fb      	ldrb	r3, [r7, #3]
 8008886:	f003 020f 	and.w	r2, r3, #15
 800888a:	4613      	mov	r3, r2
 800888c:	00db      	lsls	r3, r3, #3
 800888e:	4413      	add	r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	3310      	adds	r3, #16
 8008894:	687a      	ldr	r2, [r7, #4]
 8008896:	4413      	add	r3, r2
 8008898:	3304      	adds	r3, #4
 800889a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2201      	movs	r2, #1
 80088a0:	705a      	strb	r2, [r3, #1]
 80088a2:	e00f      	b.n	80088c4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	f003 020f 	and.w	r2, r3, #15
 80088aa:	4613      	mov	r3, r2
 80088ac:	00db      	lsls	r3, r3, #3
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	4413      	add	r3, r2
 80088ba:	3304      	adds	r3, #4
 80088bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2200      	movs	r2, #0
 80088c2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	f003 030f 	and.w	r3, r3, #15
 80088ca:	b2da      	uxtb	r2, r3
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80088d0:	883b      	ldrh	r3, [r7, #0]
 80088d2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	78ba      	ldrb	r2, [r7, #2]
 80088de:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	785b      	ldrb	r3, [r3, #1]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d004      	beq.n	80088f2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	781b      	ldrb	r3, [r3, #0]
 80088ec:	461a      	mov	r2, r3
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80088f2:	78bb      	ldrb	r3, [r7, #2]
 80088f4:	2b02      	cmp	r3, #2
 80088f6:	d102      	bne.n	80088fe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	2200      	movs	r2, #0
 80088fc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008904:	2b01      	cmp	r3, #1
 8008906:	d101      	bne.n	800890c <HAL_PCD_EP_Open+0xae>
 8008908:	2302      	movs	r3, #2
 800890a:	e00e      	b.n	800892a <HAL_PCD_EP_Open+0xcc>
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68f9      	ldr	r1, [r7, #12]
 800891a:	4618      	mov	r0, r3
 800891c:	f002 fb52 	bl	800afc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008928:	7afb      	ldrb	r3, [r7, #11]
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b084      	sub	sp, #16
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
 800893a:	460b      	mov	r3, r1
 800893c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800893e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008942:	2b00      	cmp	r3, #0
 8008944:	da0f      	bge.n	8008966 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008946:	78fb      	ldrb	r3, [r7, #3]
 8008948:	f003 020f 	and.w	r2, r3, #15
 800894c:	4613      	mov	r3, r2
 800894e:	00db      	lsls	r3, r3, #3
 8008950:	4413      	add	r3, r2
 8008952:	009b      	lsls	r3, r3, #2
 8008954:	3310      	adds	r3, #16
 8008956:	687a      	ldr	r2, [r7, #4]
 8008958:	4413      	add	r3, r2
 800895a:	3304      	adds	r3, #4
 800895c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	2201      	movs	r2, #1
 8008962:	705a      	strb	r2, [r3, #1]
 8008964:	e00f      	b.n	8008986 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008966:	78fb      	ldrb	r3, [r7, #3]
 8008968:	f003 020f 	and.w	r2, r3, #15
 800896c:	4613      	mov	r3, r2
 800896e:	00db      	lsls	r3, r3, #3
 8008970:	4413      	add	r3, r2
 8008972:	009b      	lsls	r3, r3, #2
 8008974:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	4413      	add	r3, r2
 800897c:	3304      	adds	r3, #4
 800897e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	2200      	movs	r2, #0
 8008984:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008986:	78fb      	ldrb	r3, [r7, #3]
 8008988:	f003 030f 	and.w	r3, r3, #15
 800898c:	b2da      	uxtb	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008998:	2b01      	cmp	r3, #1
 800899a:	d101      	bne.n	80089a0 <HAL_PCD_EP_Close+0x6e>
 800899c:	2302      	movs	r3, #2
 800899e:	e00e      	b.n	80089be <HAL_PCD_EP_Close+0x8c>
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2201      	movs	r2, #1
 80089a4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	68f9      	ldr	r1, [r7, #12]
 80089ae:	4618      	mov	r0, r3
 80089b0:	f002 fb90 	bl	800b0d4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b086      	sub	sp, #24
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	60f8      	str	r0, [r7, #12]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
 80089d2:	460b      	mov	r3, r1
 80089d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089d6:	7afb      	ldrb	r3, [r7, #11]
 80089d8:	f003 020f 	and.w	r2, r3, #15
 80089dc:	4613      	mov	r3, r2
 80089de:	00db      	lsls	r3, r3, #3
 80089e0:	4413      	add	r3, r2
 80089e2:	009b      	lsls	r3, r3, #2
 80089e4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4413      	add	r3, r2
 80089ec:	3304      	adds	r3, #4
 80089ee:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80089f0:	697b      	ldr	r3, [r7, #20]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	683a      	ldr	r2, [r7, #0]
 80089fa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	2200      	movs	r2, #0
 8008a00:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	2200      	movs	r2, #0
 8008a06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a08:	7afb      	ldrb	r3, [r7, #11]
 8008a0a:	f003 030f 	and.w	r3, r3, #15
 8008a0e:	b2da      	uxtb	r2, r3
 8008a10:	697b      	ldr	r3, [r7, #20]
 8008a12:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	799b      	ldrb	r3, [r3, #6]
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d102      	bne.n	8008a22 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008a1c:	687a      	ldr	r2, [r7, #4]
 8008a1e:	697b      	ldr	r3, [r7, #20]
 8008a20:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	6818      	ldr	r0, [r3, #0]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	799b      	ldrb	r3, [r3, #6]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	6979      	ldr	r1, [r7, #20]
 8008a2e:	f002 fc2d 	bl	800b28c <USB_EPStartXfer>

  return HAL_OK;
 8008a32:	2300      	movs	r3, #0
}
 8008a34:	4618      	mov	r0, r3
 8008a36:	3718      	adds	r7, #24
 8008a38:	46bd      	mov	sp, r7
 8008a3a:	bd80      	pop	{r7, pc}

08008a3c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	460b      	mov	r3, r1
 8008a46:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	f003 020f 	and.w	r2, r3, #15
 8008a4e:	6879      	ldr	r1, [r7, #4]
 8008a50:	4613      	mov	r3, r2
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	4413      	add	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	440b      	add	r3, r1
 8008a5a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008a5e:	681b      	ldr	r3, [r3, #0]
}
 8008a60:	4618      	mov	r0, r3
 8008a62:	370c      	adds	r7, #12
 8008a64:	46bd      	mov	sp, r7
 8008a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6a:	4770      	bx	lr

08008a6c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b086      	sub	sp, #24
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	60f8      	str	r0, [r7, #12]
 8008a74:	607a      	str	r2, [r7, #4]
 8008a76:	603b      	str	r3, [r7, #0]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a7c:	7afb      	ldrb	r3, [r7, #11]
 8008a7e:	f003 020f 	and.w	r2, r3, #15
 8008a82:	4613      	mov	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	4413      	add	r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	3310      	adds	r3, #16
 8008a8c:	68fa      	ldr	r2, [r7, #12]
 8008a8e:	4413      	add	r3, r2
 8008a90:	3304      	adds	r3, #4
 8008a92:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a9a:	697b      	ldr	r3, [r7, #20]
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008aa6:	697b      	ldr	r3, [r7, #20]
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008aac:	7afb      	ldrb	r3, [r7, #11]
 8008aae:	f003 030f 	and.w	r3, r3, #15
 8008ab2:	b2da      	uxtb	r2, r3
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	799b      	ldrb	r3, [r3, #6]
 8008abc:	2b01      	cmp	r3, #1
 8008abe:	d102      	bne.n	8008ac6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008ac0:	687a      	ldr	r2, [r7, #4]
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	6818      	ldr	r0, [r3, #0]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	799b      	ldrb	r3, [r3, #6]
 8008ace:	461a      	mov	r2, r3
 8008ad0:	6979      	ldr	r1, [r7, #20]
 8008ad2:	f002 fbdb 	bl	800b28c <USB_EPStartXfer>

  return HAL_OK;
 8008ad6:	2300      	movs	r3, #0
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3718      	adds	r7, #24
 8008adc:	46bd      	mov	sp, r7
 8008ade:	bd80      	pop	{r7, pc}

08008ae0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b084      	sub	sp, #16
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	6078      	str	r0, [r7, #4]
 8008ae8:	460b      	mov	r3, r1
 8008aea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008aec:	78fb      	ldrb	r3, [r7, #3]
 8008aee:	f003 030f 	and.w	r3, r3, #15
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	7912      	ldrb	r2, [r2, #4]
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d901      	bls.n	8008afe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e04f      	b.n	8008b9e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	da0f      	bge.n	8008b26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b06:	78fb      	ldrb	r3, [r7, #3]
 8008b08:	f003 020f 	and.w	r2, r3, #15
 8008b0c:	4613      	mov	r3, r2
 8008b0e:	00db      	lsls	r3, r3, #3
 8008b10:	4413      	add	r3, r2
 8008b12:	009b      	lsls	r3, r3, #2
 8008b14:	3310      	adds	r3, #16
 8008b16:	687a      	ldr	r2, [r7, #4]
 8008b18:	4413      	add	r3, r2
 8008b1a:	3304      	adds	r3, #4
 8008b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2201      	movs	r2, #1
 8008b22:	705a      	strb	r2, [r3, #1]
 8008b24:	e00d      	b.n	8008b42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008b26:	78fa      	ldrb	r2, [r7, #3]
 8008b28:	4613      	mov	r3, r2
 8008b2a:	00db      	lsls	r3, r3, #3
 8008b2c:	4413      	add	r3, r2
 8008b2e:	009b      	lsls	r3, r3, #2
 8008b30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	4413      	add	r3, r2
 8008b38:	3304      	adds	r3, #4
 8008b3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2200      	movs	r2, #0
 8008b40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b48:	78fb      	ldrb	r3, [r7, #3]
 8008b4a:	f003 030f 	and.w	r3, r3, #15
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d101      	bne.n	8008b62 <HAL_PCD_EP_SetStall+0x82>
 8008b5e:	2302      	movs	r3, #2
 8008b60:	e01d      	b.n	8008b9e <HAL_PCD_EP_SetStall+0xbe>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	68f9      	ldr	r1, [r7, #12]
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 ff69 	bl	800ba48 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b76:	78fb      	ldrb	r3, [r7, #3]
 8008b78:	f003 030f 	and.w	r3, r3, #15
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d109      	bne.n	8008b94 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6818      	ldr	r0, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	7999      	ldrb	r1, [r3, #6]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b8e:	461a      	mov	r2, r3
 8008b90:	f003 f95a 	bl	800be48 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008b9c:	2300      	movs	r3, #0
}
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	3710      	adds	r7, #16
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}

08008ba6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ba6:	b580      	push	{r7, lr}
 8008ba8:	b084      	sub	sp, #16
 8008baa:	af00      	add	r7, sp, #0
 8008bac:	6078      	str	r0, [r7, #4]
 8008bae:	460b      	mov	r3, r1
 8008bb0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008bb2:	78fb      	ldrb	r3, [r7, #3]
 8008bb4:	f003 030f 	and.w	r3, r3, #15
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	7912      	ldrb	r2, [r2, #4]
 8008bbc:	4293      	cmp	r3, r2
 8008bbe:	d901      	bls.n	8008bc4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e042      	b.n	8008c4a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008bc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	da0f      	bge.n	8008bec <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	f003 020f 	and.w	r2, r3, #15
 8008bd2:	4613      	mov	r3, r2
 8008bd4:	00db      	lsls	r3, r3, #3
 8008bd6:	4413      	add	r3, r2
 8008bd8:	009b      	lsls	r3, r3, #2
 8008bda:	3310      	adds	r3, #16
 8008bdc:	687a      	ldr	r2, [r7, #4]
 8008bde:	4413      	add	r3, r2
 8008be0:	3304      	adds	r3, #4
 8008be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2201      	movs	r2, #1
 8008be8:	705a      	strb	r2, [r3, #1]
 8008bea:	e00f      	b.n	8008c0c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bec:	78fb      	ldrb	r3, [r7, #3]
 8008bee:	f003 020f 	and.w	r2, r3, #15
 8008bf2:	4613      	mov	r3, r2
 8008bf4:	00db      	lsls	r3, r3, #3
 8008bf6:	4413      	add	r3, r2
 8008bf8:	009b      	lsls	r3, r3, #2
 8008bfa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008bfe:	687a      	ldr	r2, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	3304      	adds	r3, #4
 8008c04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c12:	78fb      	ldrb	r3, [r7, #3]
 8008c14:	f003 030f 	and.w	r3, r3, #15
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d101      	bne.n	8008c2c <HAL_PCD_EP_ClrStall+0x86>
 8008c28:	2302      	movs	r3, #2
 8008c2a:	e00e      	b.n	8008c4a <HAL_PCD_EP_ClrStall+0xa4>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2201      	movs	r2, #1
 8008c30:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	68f9      	ldr	r1, [r7, #12]
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f002 ff72 	bl	800bb24 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	2200      	movs	r2, #0
 8008c44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008c48:	2300      	movs	r3, #0
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3710      	adds	r7, #16
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}

08008c52 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c52:	b580      	push	{r7, lr}
 8008c54:	b084      	sub	sp, #16
 8008c56:	af00      	add	r7, sp, #0
 8008c58:	6078      	str	r0, [r7, #4]
 8008c5a:	460b      	mov	r3, r1
 8008c5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008c5e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	da0c      	bge.n	8008c80 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c66:	78fb      	ldrb	r3, [r7, #3]
 8008c68:	f003 020f 	and.w	r2, r3, #15
 8008c6c:	4613      	mov	r3, r2
 8008c6e:	00db      	lsls	r3, r3, #3
 8008c70:	4413      	add	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	3310      	adds	r3, #16
 8008c76:	687a      	ldr	r2, [r7, #4]
 8008c78:	4413      	add	r3, r2
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	60fb      	str	r3, [r7, #12]
 8008c7e:	e00c      	b.n	8008c9a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c80:	78fb      	ldrb	r3, [r7, #3]
 8008c82:	f003 020f 	and.w	r2, r3, #15
 8008c86:	4613      	mov	r3, r2
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	4413      	add	r3, r2
 8008c96:	3304      	adds	r3, #4
 8008c98:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	68f9      	ldr	r1, [r7, #12]
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	f002 fd91 	bl	800b7c8 <USB_EPStopXfer>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008caa:	7afb      	ldrb	r3, [r7, #11]
}
 8008cac:	4618      	mov	r0, r3
 8008cae:	3710      	adds	r7, #16
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}

08008cb4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b08a      	sub	sp, #40	@ 0x28
 8008cb8:	af02      	add	r7, sp, #8
 8008cba:	6078      	str	r0, [r7, #4]
 8008cbc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008cc8:	683a      	ldr	r2, [r7, #0]
 8008cca:	4613      	mov	r3, r2
 8008ccc:	00db      	lsls	r3, r3, #3
 8008cce:	4413      	add	r3, r2
 8008cd0:	009b      	lsls	r3, r3, #2
 8008cd2:	3310      	adds	r3, #16
 8008cd4:	687a      	ldr	r2, [r7, #4]
 8008cd6:	4413      	add	r3, r2
 8008cd8:	3304      	adds	r3, #4
 8008cda:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	695a      	ldr	r2, [r3, #20]
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	691b      	ldr	r3, [r3, #16]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d901      	bls.n	8008cec <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008ce8:	2301      	movs	r3, #1
 8008cea:	e06b      	b.n	8008dc4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	691a      	ldr	r2, [r3, #16]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	695b      	ldr	r3, [r3, #20]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	69fa      	ldr	r2, [r7, #28]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d902      	bls.n	8008d08 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	689b      	ldr	r3, [r3, #8]
 8008d06:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008d08:	69fb      	ldr	r3, [r7, #28]
 8008d0a:	3303      	adds	r3, #3
 8008d0c:	089b      	lsrs	r3, r3, #2
 8008d0e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d10:	e02a      	b.n	8008d68 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	691a      	ldr	r2, [r3, #16]
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	1ad3      	subs	r3, r2, r3
 8008d1c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	69fa      	ldr	r2, [r7, #28]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d902      	bls.n	8008d2e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	3303      	adds	r3, #3
 8008d32:	089b      	lsrs	r3, r3, #2
 8008d34:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	68d9      	ldr	r1, [r3, #12]
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	b2da      	uxtb	r2, r3
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d46:	9300      	str	r3, [sp, #0]
 8008d48:	4603      	mov	r3, r0
 8008d4a:	6978      	ldr	r0, [r7, #20]
 8008d4c:	f002 fde6 	bl	800b91c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	68da      	ldr	r2, [r3, #12]
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	441a      	add	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	695a      	ldr	r2, [r3, #20]
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	441a      	add	r2, r3
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	015a      	lsls	r2, r3, #5
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	4413      	add	r3, r2
 8008d70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d74:	699b      	ldr	r3, [r3, #24]
 8008d76:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d78:	69ba      	ldr	r2, [r7, #24]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d809      	bhi.n	8008d92 <PCD_WriteEmptyTxFifo+0xde>
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	695a      	ldr	r2, [r3, #20]
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d203      	bcs.n	8008d92 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d1bf      	bne.n	8008d12 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	691a      	ldr	r2, [r3, #16]
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	695b      	ldr	r3, [r3, #20]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d811      	bhi.n	8008dc2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	f003 030f 	and.w	r3, r3, #15
 8008da4:	2201      	movs	r2, #1
 8008da6:	fa02 f303 	lsl.w	r3, r2, r3
 8008daa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008dac:	693b      	ldr	r3, [r7, #16]
 8008dae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008db2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	43db      	mvns	r3, r3
 8008db8:	6939      	ldr	r1, [r7, #16]
 8008dba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dbe:	4013      	ands	r3, r2
 8008dc0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3720      	adds	r7, #32
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b088      	sub	sp, #32
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ddc:	69fb      	ldr	r3, [r7, #28]
 8008dde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	333c      	adds	r3, #60	@ 0x3c
 8008de4:	3304      	adds	r3, #4
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008dea:	683b      	ldr	r3, [r7, #0]
 8008dec:	015a      	lsls	r2, r3, #5
 8008dee:	69bb      	ldr	r3, [r7, #24]
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008df6:	689b      	ldr	r3, [r3, #8]
 8008df8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	799b      	ldrb	r3, [r3, #6]
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d17b      	bne.n	8008efa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	f003 0308 	and.w	r3, r3, #8
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d015      	beq.n	8008e38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e0c:	697b      	ldr	r3, [r7, #20]
 8008e0e:	4a61      	ldr	r2, [pc, #388]	@ (8008f94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	f240 80b9 	bls.w	8008f88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	f000 80b3 	beq.w	8008f88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	015a      	lsls	r2, r3, #5
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	4413      	add	r3, r2
 8008e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e2e:	461a      	mov	r2, r3
 8008e30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e34:	6093      	str	r3, [r2, #8]
 8008e36:	e0a7      	b.n	8008f88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008e38:	693b      	ldr	r3, [r7, #16]
 8008e3a:	f003 0320 	and.w	r3, r3, #32
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	015a      	lsls	r2, r3, #5
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	4413      	add	r3, r2
 8008e4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e4e:	461a      	mov	r2, r3
 8008e50:	2320      	movs	r3, #32
 8008e52:	6093      	str	r3, [r2, #8]
 8008e54:	e098      	b.n	8008f88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008e56:	693b      	ldr	r3, [r7, #16]
 8008e58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	f040 8093 	bne.w	8008f88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e62:	697b      	ldr	r3, [r7, #20]
 8008e64:	4a4b      	ldr	r2, [pc, #300]	@ (8008f94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008e66:	4293      	cmp	r3, r2
 8008e68:	d90f      	bls.n	8008e8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e6a:	693b      	ldr	r3, [r7, #16]
 8008e6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d00a      	beq.n	8008e8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	69bb      	ldr	r3, [r7, #24]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e80:	461a      	mov	r2, r3
 8008e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e86:	6093      	str	r3, [r2, #8]
 8008e88:	e07e      	b.n	8008f88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008e8a:	683a      	ldr	r2, [r7, #0]
 8008e8c:	4613      	mov	r3, r2
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	4413      	add	r3, r2
 8008e92:	009b      	lsls	r3, r3, #2
 8008e94:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008e98:	687a      	ldr	r2, [r7, #4]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a1a      	ldr	r2, [r3, #32]
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	0159      	lsls	r1, r3, #5
 8008ea8:	69bb      	ldr	r3, [r7, #24]
 8008eaa:	440b      	add	r3, r1
 8008eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eb0:	691b      	ldr	r3, [r3, #16]
 8008eb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008eb6:	1ad2      	subs	r2, r2, r3
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d114      	bne.n	8008eec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	691b      	ldr	r3, [r3, #16]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d109      	bne.n	8008ede <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6818      	ldr	r0, [r3, #0]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	2101      	movs	r1, #1
 8008ed8:	f002 ffb6 	bl	800be48 <USB_EP0_OutStart>
 8008edc:	e006      	b.n	8008eec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	68da      	ldr	r2, [r3, #12]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	695b      	ldr	r3, [r3, #20]
 8008ee6:	441a      	add	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	b2db      	uxtb	r3, r3
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	6878      	ldr	r0, [r7, #4]
 8008ef4:	f005 fb06 	bl	800e504 <HAL_PCD_DataOutStageCallback>
 8008ef8:	e046      	b.n	8008f88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	4a26      	ldr	r2, [pc, #152]	@ (8008f98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008efe:	4293      	cmp	r3, r2
 8008f00:	d124      	bne.n	8008f4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008f02:	693b      	ldr	r3, [r7, #16]
 8008f04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d00a      	beq.n	8008f22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f18:	461a      	mov	r2, r3
 8008f1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f1e:	6093      	str	r3, [r2, #8]
 8008f20:	e032      	b.n	8008f88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	f003 0320 	and.w	r3, r3, #32
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d008      	beq.n	8008f3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	015a      	lsls	r2, r3, #5
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	4413      	add	r3, r2
 8008f34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f38:	461a      	mov	r2, r3
 8008f3a:	2320      	movs	r3, #32
 8008f3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	4619      	mov	r1, r3
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f005 fadd 	bl	800e504 <HAL_PCD_DataOutStageCallback>
 8008f4a:	e01d      	b.n	8008f88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d114      	bne.n	8008f7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008f52:	6879      	ldr	r1, [r7, #4]
 8008f54:	683a      	ldr	r2, [r7, #0]
 8008f56:	4613      	mov	r3, r2
 8008f58:	00db      	lsls	r3, r3, #3
 8008f5a:	4413      	add	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	440b      	add	r3, r1
 8008f60:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d108      	bne.n	8008f7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6818      	ldr	r0, [r3, #0]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f74:	461a      	mov	r2, r3
 8008f76:	2100      	movs	r1, #0
 8008f78:	f002 ff66 	bl	800be48 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f005 fabe 	bl	800e504 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3720      	adds	r7, #32
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	4f54300a 	.word	0x4f54300a
 8008f98:	4f54310a 	.word	0x4f54310a

08008f9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
 8008fa4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	333c      	adds	r3, #60	@ 0x3c
 8008fb4:	3304      	adds	r3, #4
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	015a      	lsls	r2, r3, #5
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	4413      	add	r3, r2
 8008fc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	4a15      	ldr	r2, [pc, #84]	@ (8009024 <PCD_EP_OutSetupPacket_int+0x88>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d90e      	bls.n	8008ff0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d009      	beq.n	8008ff0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe8:	461a      	mov	r2, r3
 8008fea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008fee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f005 fa75 	bl	800e4e0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4a0a      	ldr	r2, [pc, #40]	@ (8009024 <PCD_EP_OutSetupPacket_int+0x88>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d90c      	bls.n	8009018 <PCD_EP_OutSetupPacket_int+0x7c>
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	799b      	ldrb	r3, [r3, #6]
 8009002:	2b01      	cmp	r3, #1
 8009004:	d108      	bne.n	8009018 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009010:	461a      	mov	r2, r3
 8009012:	2101      	movs	r1, #1
 8009014:	f002 ff18 	bl	800be48 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	4f54300a 	.word	0x4f54300a

08009028 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	460b      	mov	r3, r1
 8009032:	70fb      	strb	r3, [r7, #3]
 8009034:	4613      	mov	r3, r2
 8009036:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800903e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009040:	78fb      	ldrb	r3, [r7, #3]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d107      	bne.n	8009056 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009046:	883b      	ldrh	r3, [r7, #0]
 8009048:	0419      	lsls	r1, r3, #16
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	68ba      	ldr	r2, [r7, #8]
 8009050:	430a      	orrs	r2, r1
 8009052:	629a      	str	r2, [r3, #40]	@ 0x28
 8009054:	e028      	b.n	80090a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800905c:	0c1b      	lsrs	r3, r3, #16
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	4413      	add	r3, r2
 8009062:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009064:	2300      	movs	r3, #0
 8009066:	73fb      	strb	r3, [r7, #15]
 8009068:	e00d      	b.n	8009086 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	7bfb      	ldrb	r3, [r7, #15]
 8009070:	3340      	adds	r3, #64	@ 0x40
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	0c1b      	lsrs	r3, r3, #16
 800907a:	68ba      	ldr	r2, [r7, #8]
 800907c:	4413      	add	r3, r2
 800907e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009080:	7bfb      	ldrb	r3, [r7, #15]
 8009082:	3301      	adds	r3, #1
 8009084:	73fb      	strb	r3, [r7, #15]
 8009086:	7bfa      	ldrb	r2, [r7, #15]
 8009088:	78fb      	ldrb	r3, [r7, #3]
 800908a:	3b01      	subs	r3, #1
 800908c:	429a      	cmp	r2, r3
 800908e:	d3ec      	bcc.n	800906a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009090:	883b      	ldrh	r3, [r7, #0]
 8009092:	0418      	lsls	r0, r3, #16
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6819      	ldr	r1, [r3, #0]
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	3b01      	subs	r3, #1
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	4302      	orrs	r2, r0
 80090a0:	3340      	adds	r3, #64	@ 0x40
 80090a2:	009b      	lsls	r3, r3, #2
 80090a4:	440b      	add	r3, r1
 80090a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80090a8:	2300      	movs	r3, #0
}
 80090aa:	4618      	mov	r0, r3
 80090ac:	3714      	adds	r7, #20
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	460b      	mov	r3, r1
 80090c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	887a      	ldrh	r2, [r7, #2]
 80090c8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	370c      	adds	r7, #12
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr

080090d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80090e4:	bf00      	nop
 80090e6:	370c      	adds	r7, #12
 80090e8:	46bd      	mov	sp, r7
 80090ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ee:	4770      	bx	lr

080090f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	d101      	bne.n	8009102 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80090fe:	2301      	movs	r3, #1
 8009100:	e267      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d075      	beq.n	80091fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800910e:	4b88      	ldr	r3, [pc, #544]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	f003 030c 	and.w	r3, r3, #12
 8009116:	2b04      	cmp	r3, #4
 8009118:	d00c      	beq.n	8009134 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800911a:	4b85      	ldr	r3, [pc, #532]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 800911c:	689b      	ldr	r3, [r3, #8]
 800911e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009122:	2b08      	cmp	r3, #8
 8009124:	d112      	bne.n	800914c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009126:	4b82      	ldr	r3, [pc, #520]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800912e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009132:	d10b      	bne.n	800914c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009134:	4b7e      	ldr	r3, [pc, #504]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800913c:	2b00      	cmp	r3, #0
 800913e:	d05b      	beq.n	80091f8 <HAL_RCC_OscConfig+0x108>
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d157      	bne.n	80091f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	e242      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	685b      	ldr	r3, [r3, #4]
 8009150:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009154:	d106      	bne.n	8009164 <HAL_RCC_OscConfig+0x74>
 8009156:	4b76      	ldr	r3, [pc, #472]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a75      	ldr	r2, [pc, #468]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 800915c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009160:	6013      	str	r3, [r2, #0]
 8009162:	e01d      	b.n	80091a0 <HAL_RCC_OscConfig+0xb0>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	685b      	ldr	r3, [r3, #4]
 8009168:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800916c:	d10c      	bne.n	8009188 <HAL_RCC_OscConfig+0x98>
 800916e:	4b70      	ldr	r3, [pc, #448]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a6f      	ldr	r2, [pc, #444]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009174:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009178:	6013      	str	r3, [r2, #0]
 800917a:	4b6d      	ldr	r3, [pc, #436]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a6c      	ldr	r2, [pc, #432]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009180:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	e00b      	b.n	80091a0 <HAL_RCC_OscConfig+0xb0>
 8009188:	4b69      	ldr	r3, [pc, #420]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a68      	ldr	r2, [pc, #416]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 800918e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009192:	6013      	str	r3, [r2, #0]
 8009194:	4b66      	ldr	r3, [pc, #408]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a65      	ldr	r2, [pc, #404]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 800919a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800919e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d013      	beq.n	80091d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091a8:	f7fa faf2 	bl	8003790 <HAL_GetTick>
 80091ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ae:	e008      	b.n	80091c2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091b0:	f7fa faee 	bl	8003790 <HAL_GetTick>
 80091b4:	4602      	mov	r2, r0
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	1ad3      	subs	r3, r2, r3
 80091ba:	2b64      	cmp	r3, #100	@ 0x64
 80091bc:	d901      	bls.n	80091c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80091be:	2303      	movs	r3, #3
 80091c0:	e207      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091c2:	4b5b      	ldr	r3, [pc, #364]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d0f0      	beq.n	80091b0 <HAL_RCC_OscConfig+0xc0>
 80091ce:	e014      	b.n	80091fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091d0:	f7fa fade 	bl	8003790 <HAL_GetTick>
 80091d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091d6:	e008      	b.n	80091ea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091d8:	f7fa fada 	bl	8003790 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b64      	cmp	r3, #100	@ 0x64
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e1f3      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091ea:	4b51      	ldr	r3, [pc, #324]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1f0      	bne.n	80091d8 <HAL_RCC_OscConfig+0xe8>
 80091f6:	e000      	b.n	80091fa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80091f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f003 0302 	and.w	r3, r3, #2
 8009202:	2b00      	cmp	r3, #0
 8009204:	d063      	beq.n	80092ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009206:	4b4a      	ldr	r3, [pc, #296]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	f003 030c 	and.w	r3, r3, #12
 800920e:	2b00      	cmp	r3, #0
 8009210:	d00b      	beq.n	800922a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009212:	4b47      	ldr	r3, [pc, #284]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009214:	689b      	ldr	r3, [r3, #8]
 8009216:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800921a:	2b08      	cmp	r3, #8
 800921c:	d11c      	bne.n	8009258 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800921e:	4b44      	ldr	r3, [pc, #272]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d116      	bne.n	8009258 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800922a:	4b41      	ldr	r3, [pc, #260]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d005      	beq.n	8009242 <HAL_RCC_OscConfig+0x152>
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	2b01      	cmp	r3, #1
 800923c:	d001      	beq.n	8009242 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
 8009240:	e1c7      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009242:	4b3b      	ldr	r3, [pc, #236]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	691b      	ldr	r3, [r3, #16]
 800924e:	00db      	lsls	r3, r3, #3
 8009250:	4937      	ldr	r1, [pc, #220]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009252:	4313      	orrs	r3, r2
 8009254:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009256:	e03a      	b.n	80092ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	68db      	ldr	r3, [r3, #12]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d020      	beq.n	80092a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009260:	4b34      	ldr	r3, [pc, #208]	@ (8009334 <HAL_RCC_OscConfig+0x244>)
 8009262:	2201      	movs	r2, #1
 8009264:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009266:	f7fa fa93 	bl	8003790 <HAL_GetTick>
 800926a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800926c:	e008      	b.n	8009280 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800926e:	f7fa fa8f 	bl	8003790 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	2b02      	cmp	r3, #2
 800927a:	d901      	bls.n	8009280 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800927c:	2303      	movs	r3, #3
 800927e:	e1a8      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009280:	4b2b      	ldr	r3, [pc, #172]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0f0      	beq.n	800926e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800928c:	4b28      	ldr	r3, [pc, #160]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	691b      	ldr	r3, [r3, #16]
 8009298:	00db      	lsls	r3, r3, #3
 800929a:	4925      	ldr	r1, [pc, #148]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 800929c:	4313      	orrs	r3, r2
 800929e:	600b      	str	r3, [r1, #0]
 80092a0:	e015      	b.n	80092ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092a2:	4b24      	ldr	r3, [pc, #144]	@ (8009334 <HAL_RCC_OscConfig+0x244>)
 80092a4:	2200      	movs	r2, #0
 80092a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a8:	f7fa fa72 	bl	8003790 <HAL_GetTick>
 80092ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092ae:	e008      	b.n	80092c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092b0:	f7fa fa6e 	bl	8003790 <HAL_GetTick>
 80092b4:	4602      	mov	r2, r0
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	1ad3      	subs	r3, r2, r3
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d901      	bls.n	80092c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80092be:	2303      	movs	r3, #3
 80092c0:	e187      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f003 0302 	and.w	r3, r3, #2
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d1f0      	bne.n	80092b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0308 	and.w	r3, r3, #8
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d036      	beq.n	8009348 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d016      	beq.n	8009310 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092e2:	4b15      	ldr	r3, [pc, #84]	@ (8009338 <HAL_RCC_OscConfig+0x248>)
 80092e4:	2201      	movs	r2, #1
 80092e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e8:	f7fa fa52 	bl	8003790 <HAL_GetTick>
 80092ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092ee:	e008      	b.n	8009302 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80092f0:	f7fa fa4e 	bl	8003790 <HAL_GetTick>
 80092f4:	4602      	mov	r2, r0
 80092f6:	693b      	ldr	r3, [r7, #16]
 80092f8:	1ad3      	subs	r3, r2, r3
 80092fa:	2b02      	cmp	r3, #2
 80092fc:	d901      	bls.n	8009302 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80092fe:	2303      	movs	r3, #3
 8009300:	e167      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009302:	4b0b      	ldr	r3, [pc, #44]	@ (8009330 <HAL_RCC_OscConfig+0x240>)
 8009304:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d0f0      	beq.n	80092f0 <HAL_RCC_OscConfig+0x200>
 800930e:	e01b      	b.n	8009348 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009310:	4b09      	ldr	r3, [pc, #36]	@ (8009338 <HAL_RCC_OscConfig+0x248>)
 8009312:	2200      	movs	r2, #0
 8009314:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009316:	f7fa fa3b 	bl	8003790 <HAL_GetTick>
 800931a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800931c:	e00e      	b.n	800933c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800931e:	f7fa fa37 	bl	8003790 <HAL_GetTick>
 8009322:	4602      	mov	r2, r0
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	1ad3      	subs	r3, r2, r3
 8009328:	2b02      	cmp	r3, #2
 800932a:	d907      	bls.n	800933c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800932c:	2303      	movs	r3, #3
 800932e:	e150      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
 8009330:	40023800 	.word	0x40023800
 8009334:	42470000 	.word	0x42470000
 8009338:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800933c:	4b88      	ldr	r3, [pc, #544]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 800933e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009340:	f003 0302 	and.w	r3, r3, #2
 8009344:	2b00      	cmp	r3, #0
 8009346:	d1ea      	bne.n	800931e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0304 	and.w	r3, r3, #4
 8009350:	2b00      	cmp	r3, #0
 8009352:	f000 8097 	beq.w	8009484 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009356:	2300      	movs	r3, #0
 8009358:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800935a:	4b81      	ldr	r3, [pc, #516]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 800935c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800935e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009362:	2b00      	cmp	r3, #0
 8009364:	d10f      	bne.n	8009386 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009366:	2300      	movs	r3, #0
 8009368:	60bb      	str	r3, [r7, #8]
 800936a:	4b7d      	ldr	r3, [pc, #500]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 800936c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936e:	4a7c      	ldr	r2, [pc, #496]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 8009370:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009374:	6413      	str	r3, [r2, #64]	@ 0x40
 8009376:	4b7a      	ldr	r3, [pc, #488]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 8009378:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800937e:	60bb      	str	r3, [r7, #8]
 8009380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009382:	2301      	movs	r3, #1
 8009384:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009386:	4b77      	ldr	r3, [pc, #476]	@ (8009564 <HAL_RCC_OscConfig+0x474>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800938e:	2b00      	cmp	r3, #0
 8009390:	d118      	bne.n	80093c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009392:	4b74      	ldr	r3, [pc, #464]	@ (8009564 <HAL_RCC_OscConfig+0x474>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	4a73      	ldr	r2, [pc, #460]	@ (8009564 <HAL_RCC_OscConfig+0x474>)
 8009398:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800939c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800939e:	f7fa f9f7 	bl	8003790 <HAL_GetTick>
 80093a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093a4:	e008      	b.n	80093b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093a6:	f7fa f9f3 	bl	8003790 <HAL_GetTick>
 80093aa:	4602      	mov	r2, r0
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	1ad3      	subs	r3, r2, r3
 80093b0:	2b02      	cmp	r3, #2
 80093b2:	d901      	bls.n	80093b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e10c      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093b8:	4b6a      	ldr	r3, [pc, #424]	@ (8009564 <HAL_RCC_OscConfig+0x474>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d0f0      	beq.n	80093a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	2b01      	cmp	r3, #1
 80093ca:	d106      	bne.n	80093da <HAL_RCC_OscConfig+0x2ea>
 80093cc:	4b64      	ldr	r3, [pc, #400]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 80093ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093d0:	4a63      	ldr	r2, [pc, #396]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 80093d2:	f043 0301 	orr.w	r3, r3, #1
 80093d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80093d8:	e01c      	b.n	8009414 <HAL_RCC_OscConfig+0x324>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	689b      	ldr	r3, [r3, #8]
 80093de:	2b05      	cmp	r3, #5
 80093e0:	d10c      	bne.n	80093fc <HAL_RCC_OscConfig+0x30c>
 80093e2:	4b5f      	ldr	r3, [pc, #380]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 80093e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093e6:	4a5e      	ldr	r2, [pc, #376]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 80093e8:	f043 0304 	orr.w	r3, r3, #4
 80093ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80093ee:	4b5c      	ldr	r3, [pc, #368]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 80093f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093f2:	4a5b      	ldr	r2, [pc, #364]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 80093f4:	f043 0301 	orr.w	r3, r3, #1
 80093f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80093fa:	e00b      	b.n	8009414 <HAL_RCC_OscConfig+0x324>
 80093fc:	4b58      	ldr	r3, [pc, #352]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 80093fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009400:	4a57      	ldr	r2, [pc, #348]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 8009402:	f023 0301 	bic.w	r3, r3, #1
 8009406:	6713      	str	r3, [r2, #112]	@ 0x70
 8009408:	4b55      	ldr	r3, [pc, #340]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 800940a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800940c:	4a54      	ldr	r2, [pc, #336]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 800940e:	f023 0304 	bic.w	r3, r3, #4
 8009412:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d015      	beq.n	8009448 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800941c:	f7fa f9b8 	bl	8003790 <HAL_GetTick>
 8009420:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009422:	e00a      	b.n	800943a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009424:	f7fa f9b4 	bl	8003790 <HAL_GetTick>
 8009428:	4602      	mov	r2, r0
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	1ad3      	subs	r3, r2, r3
 800942e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009432:	4293      	cmp	r3, r2
 8009434:	d901      	bls.n	800943a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009436:	2303      	movs	r3, #3
 8009438:	e0cb      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800943a:	4b49      	ldr	r3, [pc, #292]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 800943c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800943e:	f003 0302 	and.w	r3, r3, #2
 8009442:	2b00      	cmp	r3, #0
 8009444:	d0ee      	beq.n	8009424 <HAL_RCC_OscConfig+0x334>
 8009446:	e014      	b.n	8009472 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009448:	f7fa f9a2 	bl	8003790 <HAL_GetTick>
 800944c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800944e:	e00a      	b.n	8009466 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009450:	f7fa f99e 	bl	8003790 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800945e:	4293      	cmp	r3, r2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e0b5      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009466:	4b3e      	ldr	r3, [pc, #248]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 8009468:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800946a:	f003 0302 	and.w	r3, r3, #2
 800946e:	2b00      	cmp	r3, #0
 8009470:	d1ee      	bne.n	8009450 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d105      	bne.n	8009484 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009478:	4b39      	ldr	r3, [pc, #228]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 800947a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947c:	4a38      	ldr	r2, [pc, #224]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 800947e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009482:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	2b00      	cmp	r3, #0
 800948a:	f000 80a1 	beq.w	80095d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800948e:	4b34      	ldr	r3, [pc, #208]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 8009490:	689b      	ldr	r3, [r3, #8]
 8009492:	f003 030c 	and.w	r3, r3, #12
 8009496:	2b08      	cmp	r3, #8
 8009498:	d05c      	beq.n	8009554 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d141      	bne.n	8009526 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094a2:	4b31      	ldr	r3, [pc, #196]	@ (8009568 <HAL_RCC_OscConfig+0x478>)
 80094a4:	2200      	movs	r2, #0
 80094a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094a8:	f7fa f972 	bl	8003790 <HAL_GetTick>
 80094ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094ae:	e008      	b.n	80094c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094b0:	f7fa f96e 	bl	8003790 <HAL_GetTick>
 80094b4:	4602      	mov	r2, r0
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	1ad3      	subs	r3, r2, r3
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d901      	bls.n	80094c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80094be:	2303      	movs	r3, #3
 80094c0:	e087      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094c2:	4b27      	ldr	r3, [pc, #156]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d1f0      	bne.n	80094b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	69da      	ldr	r2, [r3, #28]
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a1b      	ldr	r3, [r3, #32]
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094dc:	019b      	lsls	r3, r3, #6
 80094de:	431a      	orrs	r2, r3
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094e4:	085b      	lsrs	r3, r3, #1
 80094e6:	3b01      	subs	r3, #1
 80094e8:	041b      	lsls	r3, r3, #16
 80094ea:	431a      	orrs	r2, r3
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f0:	061b      	lsls	r3, r3, #24
 80094f2:	491b      	ldr	r1, [pc, #108]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 80094f4:	4313      	orrs	r3, r2
 80094f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80094f8:	4b1b      	ldr	r3, [pc, #108]	@ (8009568 <HAL_RCC_OscConfig+0x478>)
 80094fa:	2201      	movs	r2, #1
 80094fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094fe:	f7fa f947 	bl	8003790 <HAL_GetTick>
 8009502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009504:	e008      	b.n	8009518 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009506:	f7fa f943 	bl	8003790 <HAL_GetTick>
 800950a:	4602      	mov	r2, r0
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	1ad3      	subs	r3, r2, r3
 8009510:	2b02      	cmp	r3, #2
 8009512:	d901      	bls.n	8009518 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009514:	2303      	movs	r3, #3
 8009516:	e05c      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009518:	4b11      	ldr	r3, [pc, #68]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009520:	2b00      	cmp	r3, #0
 8009522:	d0f0      	beq.n	8009506 <HAL_RCC_OscConfig+0x416>
 8009524:	e054      	b.n	80095d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009526:	4b10      	ldr	r3, [pc, #64]	@ (8009568 <HAL_RCC_OscConfig+0x478>)
 8009528:	2200      	movs	r2, #0
 800952a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800952c:	f7fa f930 	bl	8003790 <HAL_GetTick>
 8009530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009532:	e008      	b.n	8009546 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009534:	f7fa f92c 	bl	8003790 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	2b02      	cmp	r3, #2
 8009540:	d901      	bls.n	8009546 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009542:	2303      	movs	r3, #3
 8009544:	e045      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009546:	4b06      	ldr	r3, [pc, #24]	@ (8009560 <HAL_RCC_OscConfig+0x470>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800954e:	2b00      	cmp	r3, #0
 8009550:	d1f0      	bne.n	8009534 <HAL_RCC_OscConfig+0x444>
 8009552:	e03d      	b.n	80095d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	699b      	ldr	r3, [r3, #24]
 8009558:	2b01      	cmp	r3, #1
 800955a:	d107      	bne.n	800956c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800955c:	2301      	movs	r3, #1
 800955e:	e038      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
 8009560:	40023800 	.word	0x40023800
 8009564:	40007000 	.word	0x40007000
 8009568:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800956c:	4b1b      	ldr	r3, [pc, #108]	@ (80095dc <HAL_RCC_OscConfig+0x4ec>)
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	2b01      	cmp	r3, #1
 8009578:	d028      	beq.n	80095cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009584:	429a      	cmp	r2, r3
 8009586:	d121      	bne.n	80095cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009592:	429a      	cmp	r2, r3
 8009594:	d11a      	bne.n	80095cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009596:	68fa      	ldr	r2, [r7, #12]
 8009598:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800959c:	4013      	ands	r3, r2
 800959e:	687a      	ldr	r2, [r7, #4]
 80095a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80095a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d111      	bne.n	80095cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095b2:	085b      	lsrs	r3, r3, #1
 80095b4:	3b01      	subs	r3, #1
 80095b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095b8:	429a      	cmp	r2, r3
 80095ba:	d107      	bne.n	80095cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d001      	beq.n	80095d0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80095cc:	2301      	movs	r3, #1
 80095ce:	e000      	b.n	80095d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80095d0:	2300      	movs	r3, #0
}
 80095d2:	4618      	mov	r0, r3
 80095d4:	3718      	adds	r7, #24
 80095d6:	46bd      	mov	sp, r7
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	bf00      	nop
 80095dc:	40023800 	.word	0x40023800

080095e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80095f0:	2301      	movs	r3, #1
 80095f2:	e0cc      	b.n	800978e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80095f4:	4b68      	ldr	r3, [pc, #416]	@ (8009798 <HAL_RCC_ClockConfig+0x1b8>)
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 0307 	and.w	r3, r3, #7
 80095fc:	683a      	ldr	r2, [r7, #0]
 80095fe:	429a      	cmp	r2, r3
 8009600:	d90c      	bls.n	800961c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009602:	4b65      	ldr	r3, [pc, #404]	@ (8009798 <HAL_RCC_ClockConfig+0x1b8>)
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	b2d2      	uxtb	r2, r2
 8009608:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800960a:	4b63      	ldr	r3, [pc, #396]	@ (8009798 <HAL_RCC_ClockConfig+0x1b8>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 0307 	and.w	r3, r3, #7
 8009612:	683a      	ldr	r2, [r7, #0]
 8009614:	429a      	cmp	r2, r3
 8009616:	d001      	beq.n	800961c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e0b8      	b.n	800978e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f003 0302 	and.w	r3, r3, #2
 8009624:	2b00      	cmp	r3, #0
 8009626:	d020      	beq.n	800966a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f003 0304 	and.w	r3, r3, #4
 8009630:	2b00      	cmp	r3, #0
 8009632:	d005      	beq.n	8009640 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009634:	4b59      	ldr	r3, [pc, #356]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 8009636:	689b      	ldr	r3, [r3, #8]
 8009638:	4a58      	ldr	r2, [pc, #352]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 800963a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800963e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0308 	and.w	r3, r3, #8
 8009648:	2b00      	cmp	r3, #0
 800964a:	d005      	beq.n	8009658 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800964c:	4b53      	ldr	r3, [pc, #332]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 800964e:	689b      	ldr	r3, [r3, #8]
 8009650:	4a52      	ldr	r2, [pc, #328]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 8009652:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009656:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009658:	4b50      	ldr	r3, [pc, #320]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 800965a:	689b      	ldr	r3, [r3, #8]
 800965c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	494d      	ldr	r1, [pc, #308]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 8009666:	4313      	orrs	r3, r2
 8009668:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	2b00      	cmp	r3, #0
 8009674:	d044      	beq.n	8009700 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d107      	bne.n	800968e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800967e:	4b47      	ldr	r3, [pc, #284]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009686:	2b00      	cmp	r3, #0
 8009688:	d119      	bne.n	80096be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	e07f      	b.n	800978e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	685b      	ldr	r3, [r3, #4]
 8009692:	2b02      	cmp	r3, #2
 8009694:	d003      	beq.n	800969e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800969a:	2b03      	cmp	r3, #3
 800969c:	d107      	bne.n	80096ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800969e:	4b3f      	ldr	r3, [pc, #252]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d109      	bne.n	80096be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096aa:	2301      	movs	r3, #1
 80096ac:	e06f      	b.n	800978e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096ae:	4b3b      	ldr	r3, [pc, #236]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 0302 	and.w	r3, r3, #2
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d101      	bne.n	80096be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e067      	b.n	800978e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096be:	4b37      	ldr	r3, [pc, #220]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f023 0203 	bic.w	r2, r3, #3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	4934      	ldr	r1, [pc, #208]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096d0:	f7fa f85e 	bl	8003790 <HAL_GetTick>
 80096d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096d6:	e00a      	b.n	80096ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096d8:	f7fa f85a 	bl	8003790 <HAL_GetTick>
 80096dc:	4602      	mov	r2, r0
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	1ad3      	subs	r3, r2, r3
 80096e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d901      	bls.n	80096ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096ea:	2303      	movs	r3, #3
 80096ec:	e04f      	b.n	800978e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096ee:	4b2b      	ldr	r3, [pc, #172]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f003 020c 	and.w	r2, r3, #12
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	685b      	ldr	r3, [r3, #4]
 80096fa:	009b      	lsls	r3, r3, #2
 80096fc:	429a      	cmp	r2, r3
 80096fe:	d1eb      	bne.n	80096d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009700:	4b25      	ldr	r3, [pc, #148]	@ (8009798 <HAL_RCC_ClockConfig+0x1b8>)
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	f003 0307 	and.w	r3, r3, #7
 8009708:	683a      	ldr	r2, [r7, #0]
 800970a:	429a      	cmp	r2, r3
 800970c:	d20c      	bcs.n	8009728 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800970e:	4b22      	ldr	r3, [pc, #136]	@ (8009798 <HAL_RCC_ClockConfig+0x1b8>)
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	b2d2      	uxtb	r2, r2
 8009714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009716:	4b20      	ldr	r3, [pc, #128]	@ (8009798 <HAL_RCC_ClockConfig+0x1b8>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f003 0307 	and.w	r3, r3, #7
 800971e:	683a      	ldr	r2, [r7, #0]
 8009720:	429a      	cmp	r2, r3
 8009722:	d001      	beq.n	8009728 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	e032      	b.n	800978e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f003 0304 	and.w	r3, r3, #4
 8009730:	2b00      	cmp	r3, #0
 8009732:	d008      	beq.n	8009746 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009734:	4b19      	ldr	r3, [pc, #100]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 8009736:	689b      	ldr	r3, [r3, #8]
 8009738:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	4916      	ldr	r1, [pc, #88]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 8009742:	4313      	orrs	r3, r2
 8009744:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	2b00      	cmp	r3, #0
 8009750:	d009      	beq.n	8009766 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009752:	4b12      	ldr	r3, [pc, #72]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	691b      	ldr	r3, [r3, #16]
 800975e:	00db      	lsls	r3, r3, #3
 8009760:	490e      	ldr	r1, [pc, #56]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 8009762:	4313      	orrs	r3, r2
 8009764:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009766:	f000 f821 	bl	80097ac <HAL_RCC_GetSysClockFreq>
 800976a:	4602      	mov	r2, r0
 800976c:	4b0b      	ldr	r3, [pc, #44]	@ (800979c <HAL_RCC_ClockConfig+0x1bc>)
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	091b      	lsrs	r3, r3, #4
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	490a      	ldr	r1, [pc, #40]	@ (80097a0 <HAL_RCC_ClockConfig+0x1c0>)
 8009778:	5ccb      	ldrb	r3, [r1, r3]
 800977a:	fa22 f303 	lsr.w	r3, r2, r3
 800977e:	4a09      	ldr	r2, [pc, #36]	@ (80097a4 <HAL_RCC_ClockConfig+0x1c4>)
 8009780:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009782:	4b09      	ldr	r3, [pc, #36]	@ (80097a8 <HAL_RCC_ClockConfig+0x1c8>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4618      	mov	r0, r3
 8009788:	f7f9 ffbe 	bl	8003708 <HAL_InitTick>

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}
 8009796:	bf00      	nop
 8009798:	40023c00 	.word	0x40023c00
 800979c:	40023800 	.word	0x40023800
 80097a0:	08010910 	.word	0x08010910
 80097a4:	20000030 	.word	0x20000030
 80097a8:	20000034 	.word	0x20000034

080097ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097b0:	b090      	sub	sp, #64	@ 0x40
 80097b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80097b4:	2300      	movs	r3, #0
 80097b6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80097b8:	2300      	movs	r3, #0
 80097ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80097bc:	2300      	movs	r3, #0
 80097be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80097c0:	2300      	movs	r3, #0
 80097c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097c4:	4b59      	ldr	r3, [pc, #356]	@ (800992c <HAL_RCC_GetSysClockFreq+0x180>)
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f003 030c 	and.w	r3, r3, #12
 80097cc:	2b08      	cmp	r3, #8
 80097ce:	d00d      	beq.n	80097ec <HAL_RCC_GetSysClockFreq+0x40>
 80097d0:	2b08      	cmp	r3, #8
 80097d2:	f200 80a1 	bhi.w	8009918 <HAL_RCC_GetSysClockFreq+0x16c>
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d002      	beq.n	80097e0 <HAL_RCC_GetSysClockFreq+0x34>
 80097da:	2b04      	cmp	r3, #4
 80097dc:	d003      	beq.n	80097e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80097de:	e09b      	b.n	8009918 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097e0:	4b53      	ldr	r3, [pc, #332]	@ (8009930 <HAL_RCC_GetSysClockFreq+0x184>)
 80097e2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80097e4:	e09b      	b.n	800991e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097e6:	4b53      	ldr	r3, [pc, #332]	@ (8009934 <HAL_RCC_GetSysClockFreq+0x188>)
 80097e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80097ea:	e098      	b.n	800991e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097ec:	4b4f      	ldr	r3, [pc, #316]	@ (800992c <HAL_RCC_GetSysClockFreq+0x180>)
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80097f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80097f6:	4b4d      	ldr	r3, [pc, #308]	@ (800992c <HAL_RCC_GetSysClockFreq+0x180>)
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d028      	beq.n	8009854 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009802:	4b4a      	ldr	r3, [pc, #296]	@ (800992c <HAL_RCC_GetSysClockFreq+0x180>)
 8009804:	685b      	ldr	r3, [r3, #4]
 8009806:	099b      	lsrs	r3, r3, #6
 8009808:	2200      	movs	r2, #0
 800980a:	623b      	str	r3, [r7, #32]
 800980c:	627a      	str	r2, [r7, #36]	@ 0x24
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009814:	2100      	movs	r1, #0
 8009816:	4b47      	ldr	r3, [pc, #284]	@ (8009934 <HAL_RCC_GetSysClockFreq+0x188>)
 8009818:	fb03 f201 	mul.w	r2, r3, r1
 800981c:	2300      	movs	r3, #0
 800981e:	fb00 f303 	mul.w	r3, r0, r3
 8009822:	4413      	add	r3, r2
 8009824:	4a43      	ldr	r2, [pc, #268]	@ (8009934 <HAL_RCC_GetSysClockFreq+0x188>)
 8009826:	fba0 1202 	umull	r1, r2, r0, r2
 800982a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800982c:	460a      	mov	r2, r1
 800982e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009830:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009832:	4413      	add	r3, r2
 8009834:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009836:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009838:	2200      	movs	r2, #0
 800983a:	61bb      	str	r3, [r7, #24]
 800983c:	61fa      	str	r2, [r7, #28]
 800983e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009842:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009846:	f7f7 f829 	bl	800089c <__aeabi_uldivmod>
 800984a:	4602      	mov	r2, r0
 800984c:	460b      	mov	r3, r1
 800984e:	4613      	mov	r3, r2
 8009850:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009852:	e053      	b.n	80098fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009854:	4b35      	ldr	r3, [pc, #212]	@ (800992c <HAL_RCC_GetSysClockFreq+0x180>)
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	099b      	lsrs	r3, r3, #6
 800985a:	2200      	movs	r2, #0
 800985c:	613b      	str	r3, [r7, #16]
 800985e:	617a      	str	r2, [r7, #20]
 8009860:	693b      	ldr	r3, [r7, #16]
 8009862:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009866:	f04f 0b00 	mov.w	fp, #0
 800986a:	4652      	mov	r2, sl
 800986c:	465b      	mov	r3, fp
 800986e:	f04f 0000 	mov.w	r0, #0
 8009872:	f04f 0100 	mov.w	r1, #0
 8009876:	0159      	lsls	r1, r3, #5
 8009878:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800987c:	0150      	lsls	r0, r2, #5
 800987e:	4602      	mov	r2, r0
 8009880:	460b      	mov	r3, r1
 8009882:	ebb2 080a 	subs.w	r8, r2, sl
 8009886:	eb63 090b 	sbc.w	r9, r3, fp
 800988a:	f04f 0200 	mov.w	r2, #0
 800988e:	f04f 0300 	mov.w	r3, #0
 8009892:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8009896:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800989a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800989e:	ebb2 0408 	subs.w	r4, r2, r8
 80098a2:	eb63 0509 	sbc.w	r5, r3, r9
 80098a6:	f04f 0200 	mov.w	r2, #0
 80098aa:	f04f 0300 	mov.w	r3, #0
 80098ae:	00eb      	lsls	r3, r5, #3
 80098b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098b4:	00e2      	lsls	r2, r4, #3
 80098b6:	4614      	mov	r4, r2
 80098b8:	461d      	mov	r5, r3
 80098ba:	eb14 030a 	adds.w	r3, r4, sl
 80098be:	603b      	str	r3, [r7, #0]
 80098c0:	eb45 030b 	adc.w	r3, r5, fp
 80098c4:	607b      	str	r3, [r7, #4]
 80098c6:	f04f 0200 	mov.w	r2, #0
 80098ca:	f04f 0300 	mov.w	r3, #0
 80098ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80098d2:	4629      	mov	r1, r5
 80098d4:	028b      	lsls	r3, r1, #10
 80098d6:	4621      	mov	r1, r4
 80098d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098dc:	4621      	mov	r1, r4
 80098de:	028a      	lsls	r2, r1, #10
 80098e0:	4610      	mov	r0, r2
 80098e2:	4619      	mov	r1, r3
 80098e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e6:	2200      	movs	r2, #0
 80098e8:	60bb      	str	r3, [r7, #8]
 80098ea:	60fa      	str	r2, [r7, #12]
 80098ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80098f0:	f7f6 ffd4 	bl	800089c <__aeabi_uldivmod>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4613      	mov	r3, r2
 80098fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80098fc:	4b0b      	ldr	r3, [pc, #44]	@ (800992c <HAL_RCC_GetSysClockFreq+0x180>)
 80098fe:	685b      	ldr	r3, [r3, #4]
 8009900:	0c1b      	lsrs	r3, r3, #16
 8009902:	f003 0303 	and.w	r3, r3, #3
 8009906:	3301      	adds	r3, #1
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800990c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800990e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009910:	fbb2 f3f3 	udiv	r3, r2, r3
 8009914:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009916:	e002      	b.n	800991e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009918:	4b05      	ldr	r3, [pc, #20]	@ (8009930 <HAL_RCC_GetSysClockFreq+0x184>)
 800991a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800991c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800991e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009920:	4618      	mov	r0, r3
 8009922:	3740      	adds	r7, #64	@ 0x40
 8009924:	46bd      	mov	sp, r7
 8009926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800992a:	bf00      	nop
 800992c:	40023800 	.word	0x40023800
 8009930:	00f42400 	.word	0x00f42400
 8009934:	017d7840 	.word	0x017d7840

08009938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009938:	b480      	push	{r7}
 800993a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800993c:	4b03      	ldr	r3, [pc, #12]	@ (800994c <HAL_RCC_GetHCLKFreq+0x14>)
 800993e:	681b      	ldr	r3, [r3, #0]
}
 8009940:	4618      	mov	r0, r3
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	20000030 	.word	0x20000030

08009950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009954:	f7ff fff0 	bl	8009938 <HAL_RCC_GetHCLKFreq>
 8009958:	4602      	mov	r2, r0
 800995a:	4b05      	ldr	r3, [pc, #20]	@ (8009970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	0a9b      	lsrs	r3, r3, #10
 8009960:	f003 0307 	and.w	r3, r3, #7
 8009964:	4903      	ldr	r1, [pc, #12]	@ (8009974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009966:	5ccb      	ldrb	r3, [r1, r3]
 8009968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800996c:	4618      	mov	r0, r3
 800996e:	bd80      	pop	{r7, pc}
 8009970:	40023800 	.word	0x40023800
 8009974:	08010920 	.word	0x08010920

08009978 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
 800997e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d101      	bne.n	800998a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e041      	b.n	8009a0e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009990:	b2db      	uxtb	r3, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	d106      	bne.n	80099a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7f9 fa4a 	bl	8002e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2202      	movs	r2, #2
 80099a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681a      	ldr	r2, [r3, #0]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	3304      	adds	r3, #4
 80099b4:	4619      	mov	r1, r3
 80099b6:	4610      	mov	r0, r2
 80099b8:	f000 fbce 	bl	800a158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3708      	adds	r7, #8
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
	...

08009a18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b085      	sub	sp, #20
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b01      	cmp	r3, #1
 8009a2a:	d001      	beq.n	8009a30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	e044      	b.n	8009aba <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2202      	movs	r2, #2
 8009a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	68da      	ldr	r2, [r3, #12]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f042 0201 	orr.w	r2, r2, #1
 8009a46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac8 <HAL_TIM_Base_Start_IT+0xb0>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d018      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x6c>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5a:	d013      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x6c>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a1a      	ldr	r2, [pc, #104]	@ (8009acc <HAL_TIM_Base_Start_IT+0xb4>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d00e      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x6c>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a19      	ldr	r2, [pc, #100]	@ (8009ad0 <HAL_TIM_Base_Start_IT+0xb8>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d009      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x6c>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a17      	ldr	r2, [pc, #92]	@ (8009ad4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d004      	beq.n	8009a84 <HAL_TIM_Base_Start_IT+0x6c>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a16      	ldr	r2, [pc, #88]	@ (8009ad8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d111      	bne.n	8009aa8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	689b      	ldr	r3, [r3, #8]
 8009a8a:	f003 0307 	and.w	r3, r3, #7
 8009a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	2b06      	cmp	r3, #6
 8009a94:	d010      	beq.n	8009ab8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	681a      	ldr	r2, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f042 0201 	orr.w	r2, r2, #1
 8009aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa6:	e007      	b.n	8009ab8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f042 0201 	orr.w	r2, r2, #1
 8009ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	40010000 	.word	0x40010000
 8009acc:	40000400 	.word	0x40000400
 8009ad0:	40000800 	.word	0x40000800
 8009ad4:	40000c00 	.word	0x40000c00
 8009ad8:	40014000 	.word	0x40014000

08009adc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b082      	sub	sp, #8
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d101      	bne.n	8009aee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009aea:	2301      	movs	r3, #1
 8009aec:	e041      	b.n	8009b72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d106      	bne.n	8009b08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f839 	bl	8009b7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2202      	movs	r2, #2
 8009b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	3304      	adds	r3, #4
 8009b18:	4619      	mov	r1, r3
 8009b1a:	4610      	mov	r0, r2
 8009b1c:	f000 fb1c 	bl	800a158 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2201      	movs	r2, #1
 8009b24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b70:	2300      	movs	r3, #0
}
 8009b72:	4618      	mov	r0, r3
 8009b74:	3708      	adds	r7, #8
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}

08009b7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b083      	sub	sp, #12
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b82:	bf00      	nop
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b8e:	b580      	push	{r7, lr}
 8009b90:	b084      	sub	sp, #16
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68db      	ldr	r3, [r3, #12]
 8009b9c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	691b      	ldr	r3, [r3, #16]
 8009ba4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009ba6:	68bb      	ldr	r3, [r7, #8]
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d020      	beq.n	8009bf2 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f003 0302 	and.w	r3, r3, #2
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d01b      	beq.n	8009bf2 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f06f 0202 	mvn.w	r2, #2
 8009bc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	f003 0303 	and.w	r3, r3, #3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d003      	beq.n	8009be0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bd8:	6878      	ldr	r0, [r7, #4]
 8009bda:	f000 fa9e 	bl	800a11a <HAL_TIM_IC_CaptureCallback>
 8009bde:	e005      	b.n	8009bec <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fa90 	bl	800a106 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 faa1 	bl	800a12e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	f003 0304 	and.w	r3, r3, #4
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d020      	beq.n	8009c3e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f003 0304 	and.w	r3, r3, #4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d01b      	beq.n	8009c3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f06f 0204 	mvn.w	r2, #4
 8009c0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2202      	movs	r2, #2
 8009c14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	699b      	ldr	r3, [r3, #24]
 8009c1c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d003      	beq.n	8009c2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f000 fa78 	bl	800a11a <HAL_TIM_IC_CaptureCallback>
 8009c2a:	e005      	b.n	8009c38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f000 fa6a 	bl	800a106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fa7b 	bl	800a12e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	f003 0308 	and.w	r3, r3, #8
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d020      	beq.n	8009c8a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f003 0308 	and.w	r3, r3, #8
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d01b      	beq.n	8009c8a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f06f 0208 	mvn.w	r2, #8
 8009c5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2204      	movs	r2, #4
 8009c60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	69db      	ldr	r3, [r3, #28]
 8009c68:	f003 0303 	and.w	r3, r3, #3
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d003      	beq.n	8009c78 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 fa52 	bl	800a11a <HAL_TIM_IC_CaptureCallback>
 8009c76:	e005      	b.n	8009c84 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c78:	6878      	ldr	r0, [r7, #4]
 8009c7a:	f000 fa44 	bl	800a106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 fa55 	bl	800a12e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2200      	movs	r2, #0
 8009c88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	f003 0310 	and.w	r3, r3, #16
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d020      	beq.n	8009cd6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	f003 0310 	and.w	r3, r3, #16
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d01b      	beq.n	8009cd6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	f06f 0210 	mvn.w	r2, #16
 8009ca6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2208      	movs	r2, #8
 8009cac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	69db      	ldr	r3, [r3, #28]
 8009cb4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d003      	beq.n	8009cc4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 fa2c 	bl	800a11a <HAL_TIM_IC_CaptureCallback>
 8009cc2:	e005      	b.n	8009cd0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 fa1e 	bl	800a106 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f000 fa2f 	bl	800a12e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d00c      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	f003 0301 	and.w	r3, r3, #1
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d007      	beq.n	8009cfa <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f06f 0201 	mvn.w	r2, #1
 8009cf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f7f6 ffa7 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00c      	beq.n	8009d1e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d007      	beq.n	8009d1e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fdd3 	bl	800a8c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d00c      	beq.n	8009d42 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d007      	beq.n	8009d42 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f000 fa00 	bl	800a142 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	f003 0320 	and.w	r3, r3, #32
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d00c      	beq.n	8009d66 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f003 0320 	and.w	r3, r3, #32
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d007      	beq.n	8009d66 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f06f 0220 	mvn.w	r2, #32
 8009d5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f000 fda5 	bl	800a8b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d66:	bf00      	nop
 8009d68:	3710      	adds	r7, #16
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b086      	sub	sp, #24
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d7c:	2300      	movs	r3, #0
 8009d7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d86:	2b01      	cmp	r3, #1
 8009d88:	d101      	bne.n	8009d8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	e0ae      	b.n	8009eec <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2201      	movs	r2, #1
 8009d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b0c      	cmp	r3, #12
 8009d9a:	f200 809f 	bhi.w	8009edc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8009da4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da4:	08009dd9 	.word	0x08009dd9
 8009da8:	08009edd 	.word	0x08009edd
 8009dac:	08009edd 	.word	0x08009edd
 8009db0:	08009edd 	.word	0x08009edd
 8009db4:	08009e19 	.word	0x08009e19
 8009db8:	08009edd 	.word	0x08009edd
 8009dbc:	08009edd 	.word	0x08009edd
 8009dc0:	08009edd 	.word	0x08009edd
 8009dc4:	08009e5b 	.word	0x08009e5b
 8009dc8:	08009edd 	.word	0x08009edd
 8009dcc:	08009edd 	.word	0x08009edd
 8009dd0:	08009edd 	.word	0x08009edd
 8009dd4:	08009e9b 	.word	0x08009e9b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68b9      	ldr	r1, [r7, #8]
 8009dde:	4618      	mov	r0, r3
 8009de0:	f000 fa40 	bl	800a264 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	699a      	ldr	r2, [r3, #24]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f042 0208 	orr.w	r2, r2, #8
 8009df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f022 0204 	bic.w	r2, r2, #4
 8009e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	6999      	ldr	r1, [r3, #24]
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	691a      	ldr	r2, [r3, #16]
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	430a      	orrs	r2, r1
 8009e14:	619a      	str	r2, [r3, #24]
      break;
 8009e16:	e064      	b.n	8009ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	68b9      	ldr	r1, [r7, #8]
 8009e1e:	4618      	mov	r0, r3
 8009e20:	f000 fa86 	bl	800a330 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e24:	68fb      	ldr	r3, [r7, #12]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	699a      	ldr	r2, [r3, #24]
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	699a      	ldr	r2, [r3, #24]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6999      	ldr	r1, [r3, #24]
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	691b      	ldr	r3, [r3, #16]
 8009e4e:	021a      	lsls	r2, r3, #8
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	430a      	orrs	r2, r1
 8009e56:	619a      	str	r2, [r3, #24]
      break;
 8009e58:	e043      	b.n	8009ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	68b9      	ldr	r1, [r7, #8]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f000 fad1 	bl	800a408 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	69da      	ldr	r2, [r3, #28]
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	f042 0208 	orr.w	r2, r2, #8
 8009e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	69da      	ldr	r2, [r3, #28]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f022 0204 	bic.w	r2, r2, #4
 8009e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69d9      	ldr	r1, [r3, #28]
 8009e8c:	68bb      	ldr	r3, [r7, #8]
 8009e8e:	691a      	ldr	r2, [r3, #16]
 8009e90:	68fb      	ldr	r3, [r7, #12]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	430a      	orrs	r2, r1
 8009e96:	61da      	str	r2, [r3, #28]
      break;
 8009e98:	e023      	b.n	8009ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68b9      	ldr	r1, [r7, #8]
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	f000 fb1b 	bl	800a4dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	69da      	ldr	r2, [r3, #28]
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	69da      	ldr	r2, [r3, #28]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69d9      	ldr	r1, [r3, #28]
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	021a      	lsls	r2, r3, #8
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	430a      	orrs	r2, r1
 8009ed8:	61da      	str	r2, [r3, #28]
      break;
 8009eda:	e002      	b.n	8009ee2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009edc:	2301      	movs	r3, #1
 8009ede:	75fb      	strb	r3, [r7, #23]
      break;
 8009ee0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3718      	adds	r7, #24
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f08:	2b01      	cmp	r3, #1
 8009f0a:	d101      	bne.n	8009f10 <HAL_TIM_ConfigClockSource+0x1c>
 8009f0c:	2302      	movs	r3, #2
 8009f0e:	e0b4      	b.n	800a07a <HAL_TIM_ConfigClockSource+0x186>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	2202      	movs	r2, #2
 8009f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f48:	d03e      	beq.n	8009fc8 <HAL_TIM_ConfigClockSource+0xd4>
 8009f4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f4e:	f200 8087 	bhi.w	800a060 <HAL_TIM_ConfigClockSource+0x16c>
 8009f52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f56:	f000 8086 	beq.w	800a066 <HAL_TIM_ConfigClockSource+0x172>
 8009f5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f5e:	d87f      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x16c>
 8009f60:	2b70      	cmp	r3, #112	@ 0x70
 8009f62:	d01a      	beq.n	8009f9a <HAL_TIM_ConfigClockSource+0xa6>
 8009f64:	2b70      	cmp	r3, #112	@ 0x70
 8009f66:	d87b      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x16c>
 8009f68:	2b60      	cmp	r3, #96	@ 0x60
 8009f6a:	d050      	beq.n	800a00e <HAL_TIM_ConfigClockSource+0x11a>
 8009f6c:	2b60      	cmp	r3, #96	@ 0x60
 8009f6e:	d877      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x16c>
 8009f70:	2b50      	cmp	r3, #80	@ 0x50
 8009f72:	d03c      	beq.n	8009fee <HAL_TIM_ConfigClockSource+0xfa>
 8009f74:	2b50      	cmp	r3, #80	@ 0x50
 8009f76:	d873      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x16c>
 8009f78:	2b40      	cmp	r3, #64	@ 0x40
 8009f7a:	d058      	beq.n	800a02e <HAL_TIM_ConfigClockSource+0x13a>
 8009f7c:	2b40      	cmp	r3, #64	@ 0x40
 8009f7e:	d86f      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x16c>
 8009f80:	2b30      	cmp	r3, #48	@ 0x30
 8009f82:	d064      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x15a>
 8009f84:	2b30      	cmp	r3, #48	@ 0x30
 8009f86:	d86b      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x16c>
 8009f88:	2b20      	cmp	r3, #32
 8009f8a:	d060      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x15a>
 8009f8c:	2b20      	cmp	r3, #32
 8009f8e:	d867      	bhi.n	800a060 <HAL_TIM_ConfigClockSource+0x16c>
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d05c      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x15a>
 8009f94:	2b10      	cmp	r3, #16
 8009f96:	d05a      	beq.n	800a04e <HAL_TIM_ConfigClockSource+0x15a>
 8009f98:	e062      	b.n	800a060 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009f9e:	683b      	ldr	r3, [r7, #0]
 8009fa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009fa6:	683b      	ldr	r3, [r7, #0]
 8009fa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009faa:	f000 fbf2 	bl	800a792 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fb6:	68bb      	ldr	r3, [r7, #8]
 8009fb8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009fbc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	68ba      	ldr	r2, [r7, #8]
 8009fc4:	609a      	str	r2, [r3, #8]
      break;
 8009fc6:	e04f      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009fcc:	683b      	ldr	r3, [r7, #0]
 8009fce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009fd0:	683b      	ldr	r3, [r7, #0]
 8009fd2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009fd8:	f000 fbdb 	bl	800a792 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689a      	ldr	r2, [r3, #8]
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009fea:	609a      	str	r2, [r3, #8]
      break;
 8009fec:	e03c      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009ff2:	683b      	ldr	r3, [r7, #0]
 8009ff4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009ff6:	683b      	ldr	r3, [r7, #0]
 8009ff8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ffa:	461a      	mov	r2, r3
 8009ffc:	f000 fb4f 	bl	800a69e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	2150      	movs	r1, #80	@ 0x50
 800a006:	4618      	mov	r0, r3
 800a008:	f000 fba8 	bl	800a75c <TIM_ITRx_SetConfig>
      break;
 800a00c:	e02c      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a012:	683b      	ldr	r3, [r7, #0]
 800a014:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a016:	683b      	ldr	r3, [r7, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a01a:	461a      	mov	r2, r3
 800a01c:	f000 fb6e 	bl	800a6fc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2160      	movs	r1, #96	@ 0x60
 800a026:	4618      	mov	r0, r3
 800a028:	f000 fb98 	bl	800a75c <TIM_ITRx_SetConfig>
      break;
 800a02c:	e01c      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a032:	683b      	ldr	r3, [r7, #0]
 800a034:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a03a:	461a      	mov	r2, r3
 800a03c:	f000 fb2f 	bl	800a69e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	2140      	movs	r1, #64	@ 0x40
 800a046:	4618      	mov	r0, r3
 800a048:	f000 fb88 	bl	800a75c <TIM_ITRx_SetConfig>
      break;
 800a04c:	e00c      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681a      	ldr	r2, [r3, #0]
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4619      	mov	r1, r3
 800a058:	4610      	mov	r0, r2
 800a05a:	f000 fb7f 	bl	800a75c <TIM_ITRx_SetConfig>
      break;
 800a05e:	e003      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	73fb      	strb	r3, [r7, #15]
      break;
 800a064:	e000      	b.n	800a068 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a066:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2201      	movs	r2, #1
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a078:	7bfb      	ldrb	r3, [r7, #15]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b082      	sub	sp, #8
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a092:	2b01      	cmp	r3, #1
 800a094:	d101      	bne.n	800a09a <HAL_TIM_SlaveConfigSynchro+0x18>
 800a096:	2302      	movs	r3, #2
 800a098:	e031      	b.n	800a0fe <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2202      	movs	r2, #2
 800a0a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a0aa:	6839      	ldr	r1, [r7, #0]
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 fa65 	bl	800a57c <TIM_SlaveTimer_SetConfig>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d009      	beq.n	800a0cc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e018      	b.n	800a0fe <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68da      	ldr	r2, [r3, #12]
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0da:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68da      	ldr	r2, [r3, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a0ea:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a0fc:	2300      	movs	r3, #0
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}

0800a106 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a106:	b480      	push	{r7}
 800a108:	b083      	sub	sp, #12
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a10e:	bf00      	nop
 800a110:	370c      	adds	r7, #12
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a11a:	b480      	push	{r7}
 800a11c:	b083      	sub	sp, #12
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a122:	bf00      	nop
 800a124:	370c      	adds	r7, #12
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a12e:	b480      	push	{r7}
 800a130:	b083      	sub	sp, #12
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a136:	bf00      	nop
 800a138:	370c      	adds	r7, #12
 800a13a:	46bd      	mov	sp, r7
 800a13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a140:	4770      	bx	lr

0800a142 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a142:	b480      	push	{r7}
 800a144:	b083      	sub	sp, #12
 800a146:	af00      	add	r7, sp, #0
 800a148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a14a:	bf00      	nop
 800a14c:	370c      	adds	r7, #12
 800a14e:	46bd      	mov	sp, r7
 800a150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a154:	4770      	bx	lr
	...

0800a158 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a37      	ldr	r2, [pc, #220]	@ (800a248 <TIM_Base_SetConfig+0xf0>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d00f      	beq.n	800a190 <TIM_Base_SetConfig+0x38>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a176:	d00b      	beq.n	800a190 <TIM_Base_SetConfig+0x38>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a34      	ldr	r2, [pc, #208]	@ (800a24c <TIM_Base_SetConfig+0xf4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d007      	beq.n	800a190 <TIM_Base_SetConfig+0x38>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a33      	ldr	r2, [pc, #204]	@ (800a250 <TIM_Base_SetConfig+0xf8>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d003      	beq.n	800a190 <TIM_Base_SetConfig+0x38>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a32      	ldr	r2, [pc, #200]	@ (800a254 <TIM_Base_SetConfig+0xfc>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d108      	bne.n	800a1a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a196:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	68fa      	ldr	r2, [r7, #12]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a28      	ldr	r2, [pc, #160]	@ (800a248 <TIM_Base_SetConfig+0xf0>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d01b      	beq.n	800a1e2 <TIM_Base_SetConfig+0x8a>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1b0:	d017      	beq.n	800a1e2 <TIM_Base_SetConfig+0x8a>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a25      	ldr	r2, [pc, #148]	@ (800a24c <TIM_Base_SetConfig+0xf4>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d013      	beq.n	800a1e2 <TIM_Base_SetConfig+0x8a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a24      	ldr	r2, [pc, #144]	@ (800a250 <TIM_Base_SetConfig+0xf8>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d00f      	beq.n	800a1e2 <TIM_Base_SetConfig+0x8a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a23      	ldr	r2, [pc, #140]	@ (800a254 <TIM_Base_SetConfig+0xfc>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d00b      	beq.n	800a1e2 <TIM_Base_SetConfig+0x8a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a22      	ldr	r2, [pc, #136]	@ (800a258 <TIM_Base_SetConfig+0x100>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d007      	beq.n	800a1e2 <TIM_Base_SetConfig+0x8a>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a21      	ldr	r2, [pc, #132]	@ (800a25c <TIM_Base_SetConfig+0x104>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d003      	beq.n	800a1e2 <TIM_Base_SetConfig+0x8a>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a20      	ldr	r2, [pc, #128]	@ (800a260 <TIM_Base_SetConfig+0x108>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d108      	bne.n	800a1f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1ea:	683b      	ldr	r3, [r7, #0]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	695b      	ldr	r3, [r3, #20]
 800a1fe:	4313      	orrs	r3, r2
 800a200:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	689a      	ldr	r2, [r3, #8]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	681a      	ldr	r2, [r3, #0]
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a0c      	ldr	r2, [pc, #48]	@ (800a248 <TIM_Base_SetConfig+0xf0>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d103      	bne.n	800a222 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	691a      	ldr	r2, [r3, #16]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f043 0204 	orr.w	r2, r3, #4
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2201      	movs	r2, #1
 800a232:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	68fa      	ldr	r2, [r7, #12]
 800a238:	601a      	str	r2, [r3, #0]
}
 800a23a:	bf00      	nop
 800a23c:	3714      	adds	r7, #20
 800a23e:	46bd      	mov	sp, r7
 800a240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a244:	4770      	bx	lr
 800a246:	bf00      	nop
 800a248:	40010000 	.word	0x40010000
 800a24c:	40000400 	.word	0x40000400
 800a250:	40000800 	.word	0x40000800
 800a254:	40000c00 	.word	0x40000c00
 800a258:	40014000 	.word	0x40014000
 800a25c:	40014400 	.word	0x40014400
 800a260:	40014800 	.word	0x40014800

0800a264 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	6a1b      	ldr	r3, [r3, #32]
 800a278:	f023 0201 	bic.w	r2, r3, #1
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	699b      	ldr	r3, [r3, #24]
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f023 0303 	bic.w	r3, r3, #3
 800a29a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68fa      	ldr	r2, [r7, #12]
 800a2a2:	4313      	orrs	r3, r2
 800a2a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2a6:	697b      	ldr	r3, [r7, #20]
 800a2a8:	f023 0302 	bic.w	r3, r3, #2
 800a2ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2ae:	683b      	ldr	r3, [r7, #0]
 800a2b0:	689b      	ldr	r3, [r3, #8]
 800a2b2:	697a      	ldr	r2, [r7, #20]
 800a2b4:	4313      	orrs	r3, r2
 800a2b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	4a1c      	ldr	r2, [pc, #112]	@ (800a32c <TIM_OC1_SetConfig+0xc8>)
 800a2bc:	4293      	cmp	r3, r2
 800a2be:	d10c      	bne.n	800a2da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2c0:	697b      	ldr	r3, [r7, #20]
 800a2c2:	f023 0308 	bic.w	r3, r3, #8
 800a2c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	68db      	ldr	r3, [r3, #12]
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	f023 0304 	bic.w	r3, r3, #4
 800a2d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	4a13      	ldr	r2, [pc, #76]	@ (800a32c <TIM_OC1_SetConfig+0xc8>)
 800a2de:	4293      	cmp	r3, r2
 800a2e0:	d111      	bne.n	800a306 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2e2:	693b      	ldr	r3, [r7, #16]
 800a2e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2ea:	693b      	ldr	r3, [r7, #16]
 800a2ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a2f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	695b      	ldr	r3, [r3, #20]
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	4313      	orrs	r3, r2
 800a2fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2fc:	683b      	ldr	r3, [r7, #0]
 800a2fe:	699b      	ldr	r3, [r3, #24]
 800a300:	693a      	ldr	r2, [r7, #16]
 800a302:	4313      	orrs	r3, r2
 800a304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	693a      	ldr	r2, [r7, #16]
 800a30a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	68fa      	ldr	r2, [r7, #12]
 800a310:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a312:	683b      	ldr	r3, [r7, #0]
 800a314:	685a      	ldr	r2, [r3, #4]
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	697a      	ldr	r2, [r7, #20]
 800a31e:	621a      	str	r2, [r3, #32]
}
 800a320:	bf00      	nop
 800a322:	371c      	adds	r7, #28
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr
 800a32c:	40010000 	.word	0x40010000

0800a330 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a330:	b480      	push	{r7}
 800a332:	b087      	sub	sp, #28
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	f023 0210 	bic.w	r2, r3, #16
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	699b      	ldr	r3, [r3, #24]
 800a356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a35e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	021b      	lsls	r3, r3, #8
 800a36e:	68fa      	ldr	r2, [r7, #12]
 800a370:	4313      	orrs	r3, r2
 800a372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a374:	697b      	ldr	r3, [r7, #20]
 800a376:	f023 0320 	bic.w	r3, r3, #32
 800a37a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	689b      	ldr	r3, [r3, #8]
 800a380:	011b      	lsls	r3, r3, #4
 800a382:	697a      	ldr	r2, [r7, #20]
 800a384:	4313      	orrs	r3, r2
 800a386:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	4a1e      	ldr	r2, [pc, #120]	@ (800a404 <TIM_OC2_SetConfig+0xd4>)
 800a38c:	4293      	cmp	r3, r2
 800a38e:	d10d      	bne.n	800a3ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a390:	697b      	ldr	r3, [r7, #20]
 800a392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a396:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	011b      	lsls	r3, r3, #4
 800a39e:	697a      	ldr	r2, [r7, #20]
 800a3a0:	4313      	orrs	r3, r2
 800a3a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3a4:	697b      	ldr	r3, [r7, #20]
 800a3a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3aa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	4a15      	ldr	r2, [pc, #84]	@ (800a404 <TIM_OC2_SetConfig+0xd4>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d113      	bne.n	800a3dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a3c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3c4:	683b      	ldr	r3, [r7, #0]
 800a3c6:	695b      	ldr	r3, [r3, #20]
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	693a      	ldr	r2, [r7, #16]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	699b      	ldr	r3, [r3, #24]
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	693a      	ldr	r2, [r7, #16]
 800a3e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	685a      	ldr	r2, [r3, #4]
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	697a      	ldr	r2, [r7, #20]
 800a3f4:	621a      	str	r2, [r3, #32]
}
 800a3f6:	bf00      	nop
 800a3f8:	371c      	adds	r7, #28
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	40010000 	.word	0x40010000

0800a408 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a408:	b480      	push	{r7}
 800a40a:	b087      	sub	sp, #28
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a1b      	ldr	r3, [r3, #32]
 800a416:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a1b      	ldr	r3, [r3, #32]
 800a41c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	69db      	ldr	r3, [r3, #28]
 800a42e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f023 0303 	bic.w	r3, r3, #3
 800a43e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a440:	683b      	ldr	r3, [r7, #0]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	68fa      	ldr	r2, [r7, #12]
 800a446:	4313      	orrs	r3, r2
 800a448:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a450:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	689b      	ldr	r3, [r3, #8]
 800a456:	021b      	lsls	r3, r3, #8
 800a458:	697a      	ldr	r2, [r7, #20]
 800a45a:	4313      	orrs	r3, r2
 800a45c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	4a1d      	ldr	r2, [pc, #116]	@ (800a4d8 <TIM_OC3_SetConfig+0xd0>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d10d      	bne.n	800a482 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a466:	697b      	ldr	r3, [r7, #20]
 800a468:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a46c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	021b      	lsls	r3, r3, #8
 800a474:	697a      	ldr	r2, [r7, #20]
 800a476:	4313      	orrs	r3, r2
 800a478:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a480:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4a14      	ldr	r2, [pc, #80]	@ (800a4d8 <TIM_OC3_SetConfig+0xd0>)
 800a486:	4293      	cmp	r3, r2
 800a488:	d113      	bne.n	800a4b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	695b      	ldr	r3, [r3, #20]
 800a49e:	011b      	lsls	r3, r3, #4
 800a4a0:	693a      	ldr	r2, [r7, #16]
 800a4a2:	4313      	orrs	r3, r2
 800a4a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	699b      	ldr	r3, [r3, #24]
 800a4aa:	011b      	lsls	r3, r3, #4
 800a4ac:	693a      	ldr	r2, [r7, #16]
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68fa      	ldr	r2, [r7, #12]
 800a4bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4be:	683b      	ldr	r3, [r7, #0]
 800a4c0:	685a      	ldr	r2, [r3, #4]
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	697a      	ldr	r2, [r7, #20]
 800a4ca:	621a      	str	r2, [r3, #32]
}
 800a4cc:	bf00      	nop
 800a4ce:	371c      	adds	r7, #28
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	40010000 	.word	0x40010000

0800a4dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b087      	sub	sp, #28
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6a1b      	ldr	r3, [r3, #32]
 800a4f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	685b      	ldr	r3, [r3, #4]
 800a4fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	69db      	ldr	r3, [r3, #28]
 800a502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a50a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	021b      	lsls	r3, r3, #8
 800a51a:	68fa      	ldr	r2, [r7, #12]
 800a51c:	4313      	orrs	r3, r2
 800a51e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a520:	693b      	ldr	r3, [r7, #16]
 800a522:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a526:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	031b      	lsls	r3, r3, #12
 800a52e:	693a      	ldr	r2, [r7, #16]
 800a530:	4313      	orrs	r3, r2
 800a532:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	4a10      	ldr	r2, [pc, #64]	@ (800a578 <TIM_OC4_SetConfig+0x9c>)
 800a538:	4293      	cmp	r3, r2
 800a53a:	d109      	bne.n	800a550 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a542:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	695b      	ldr	r3, [r3, #20]
 800a548:	019b      	lsls	r3, r3, #6
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	68fa      	ldr	r2, [r7, #12]
 800a55a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	685a      	ldr	r2, [r3, #4]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	693a      	ldr	r2, [r7, #16]
 800a568:	621a      	str	r2, [r3, #32]
}
 800a56a:	bf00      	nop
 800a56c:	371c      	adds	r7, #28
 800a56e:	46bd      	mov	sp, r7
 800a570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a574:	4770      	bx	lr
 800a576:	bf00      	nop
 800a578:	40010000 	.word	0x40010000

0800a57c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b086      	sub	sp, #24
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a586:	2300      	movs	r3, #0
 800a588:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a592:	693b      	ldr	r3, [r7, #16]
 800a594:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a598:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	693a      	ldr	r2, [r7, #16]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a5a4:	693b      	ldr	r3, [r7, #16]
 800a5a6:	f023 0307 	bic.w	r3, r3, #7
 800a5aa:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	693a      	ldr	r2, [r7, #16]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	693a      	ldr	r2, [r7, #16]
 800a5bc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	2b70      	cmp	r3, #112	@ 0x70
 800a5c4:	d01a      	beq.n	800a5fc <TIM_SlaveTimer_SetConfig+0x80>
 800a5c6:	2b70      	cmp	r3, #112	@ 0x70
 800a5c8:	d860      	bhi.n	800a68c <TIM_SlaveTimer_SetConfig+0x110>
 800a5ca:	2b60      	cmp	r3, #96	@ 0x60
 800a5cc:	d054      	beq.n	800a678 <TIM_SlaveTimer_SetConfig+0xfc>
 800a5ce:	2b60      	cmp	r3, #96	@ 0x60
 800a5d0:	d85c      	bhi.n	800a68c <TIM_SlaveTimer_SetConfig+0x110>
 800a5d2:	2b50      	cmp	r3, #80	@ 0x50
 800a5d4:	d046      	beq.n	800a664 <TIM_SlaveTimer_SetConfig+0xe8>
 800a5d6:	2b50      	cmp	r3, #80	@ 0x50
 800a5d8:	d858      	bhi.n	800a68c <TIM_SlaveTimer_SetConfig+0x110>
 800a5da:	2b40      	cmp	r3, #64	@ 0x40
 800a5dc:	d019      	beq.n	800a612 <TIM_SlaveTimer_SetConfig+0x96>
 800a5de:	2b40      	cmp	r3, #64	@ 0x40
 800a5e0:	d854      	bhi.n	800a68c <TIM_SlaveTimer_SetConfig+0x110>
 800a5e2:	2b30      	cmp	r3, #48	@ 0x30
 800a5e4:	d055      	beq.n	800a692 <TIM_SlaveTimer_SetConfig+0x116>
 800a5e6:	2b30      	cmp	r3, #48	@ 0x30
 800a5e8:	d850      	bhi.n	800a68c <TIM_SlaveTimer_SetConfig+0x110>
 800a5ea:	2b20      	cmp	r3, #32
 800a5ec:	d051      	beq.n	800a692 <TIM_SlaveTimer_SetConfig+0x116>
 800a5ee:	2b20      	cmp	r3, #32
 800a5f0:	d84c      	bhi.n	800a68c <TIM_SlaveTimer_SetConfig+0x110>
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d04d      	beq.n	800a692 <TIM_SlaveTimer_SetConfig+0x116>
 800a5f6:	2b10      	cmp	r3, #16
 800a5f8:	d04b      	beq.n	800a692 <TIM_SlaveTimer_SetConfig+0x116>
 800a5fa:	e047      	b.n	800a68c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a60c:	f000 f8c1 	bl	800a792 <TIM_ETR_SetConfig>
      break;
 800a610:	e040      	b.n	800a694 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2b05      	cmp	r3, #5
 800a618:	d101      	bne.n	800a61e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a61a:	2301      	movs	r3, #1
 800a61c:	e03b      	b.n	800a696 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6a1b      	ldr	r3, [r3, #32]
 800a624:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	6a1a      	ldr	r2, [r3, #32]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 0201 	bic.w	r2, r2, #1
 800a634:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	699b      	ldr	r3, [r3, #24]
 800a63c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a644:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	691b      	ldr	r3, [r3, #16]
 800a64a:	011b      	lsls	r3, r3, #4
 800a64c:	68ba      	ldr	r2, [r7, #8]
 800a64e:	4313      	orrs	r3, r2
 800a650:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	68ba      	ldr	r2, [r7, #8]
 800a658:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	68fa      	ldr	r2, [r7, #12]
 800a660:	621a      	str	r2, [r3, #32]
      break;
 800a662:	e017      	b.n	800a694 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a66c:	683b      	ldr	r3, [r7, #0]
 800a66e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a670:	461a      	mov	r2, r3
 800a672:	f000 f814 	bl	800a69e <TIM_TI1_ConfigInputStage>
      break;
 800a676:	e00d      	b.n	800a694 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a684:	461a      	mov	r2, r3
 800a686:	f000 f839 	bl	800a6fc <TIM_TI2_ConfigInputStage>
      break;
 800a68a:	e003      	b.n	800a694 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a68c:	2301      	movs	r3, #1
 800a68e:	75fb      	strb	r3, [r7, #23]
      break;
 800a690:	e000      	b.n	800a694 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a692:	bf00      	nop
  }

  return status;
 800a694:	7dfb      	ldrb	r3, [r7, #23]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}

0800a69e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a69e:	b480      	push	{r7}
 800a6a0:	b087      	sub	sp, #28
 800a6a2:	af00      	add	r7, sp, #0
 800a6a4:	60f8      	str	r0, [r7, #12]
 800a6a6:	60b9      	str	r1, [r7, #8]
 800a6a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6a1b      	ldr	r3, [r3, #32]
 800a6ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	6a1b      	ldr	r3, [r3, #32]
 800a6b4:	f023 0201 	bic.w	r2, r3, #1
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	699b      	ldr	r3, [r3, #24]
 800a6c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	011b      	lsls	r3, r3, #4
 800a6ce:	693a      	ldr	r2, [r7, #16]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	f023 030a 	bic.w	r3, r3, #10
 800a6da:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6dc:	697a      	ldr	r2, [r7, #20]
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	693a      	ldr	r2, [r7, #16]
 800a6e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	621a      	str	r2, [r3, #32]
}
 800a6f0:	bf00      	nop
 800a6f2:	371c      	adds	r7, #28
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr

0800a6fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6fc:	b480      	push	{r7}
 800a6fe:	b087      	sub	sp, #28
 800a700:	af00      	add	r7, sp, #0
 800a702:	60f8      	str	r0, [r7, #12]
 800a704:	60b9      	str	r1, [r7, #8]
 800a706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	6a1b      	ldr	r3, [r3, #32]
 800a70c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	6a1b      	ldr	r3, [r3, #32]
 800a712:	f023 0210 	bic.w	r2, r3, #16
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	699b      	ldr	r3, [r3, #24]
 800a71e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a720:	693b      	ldr	r3, [r7, #16]
 800a722:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	031b      	lsls	r3, r3, #12
 800a72c:	693a      	ldr	r2, [r7, #16]
 800a72e:	4313      	orrs	r3, r2
 800a730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a738:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	011b      	lsls	r3, r3, #4
 800a73e:	697a      	ldr	r2, [r7, #20]
 800a740:	4313      	orrs	r3, r2
 800a742:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	693a      	ldr	r2, [r7, #16]
 800a748:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	697a      	ldr	r2, [r7, #20]
 800a74e:	621a      	str	r2, [r3, #32]
}
 800a750:	bf00      	nop
 800a752:	371c      	adds	r7, #28
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr

0800a75c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a75c:	b480      	push	{r7}
 800a75e:	b085      	sub	sp, #20
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	689b      	ldr	r3, [r3, #8]
 800a76a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a772:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a774:	683a      	ldr	r2, [r7, #0]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	4313      	orrs	r3, r2
 800a77a:	f043 0307 	orr.w	r3, r3, #7
 800a77e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	609a      	str	r2, [r3, #8]
}
 800a786:	bf00      	nop
 800a788:	3714      	adds	r7, #20
 800a78a:	46bd      	mov	sp, r7
 800a78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a790:	4770      	bx	lr

0800a792 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a792:	b480      	push	{r7}
 800a794:	b087      	sub	sp, #28
 800a796:	af00      	add	r7, sp, #0
 800a798:	60f8      	str	r0, [r7, #12]
 800a79a:	60b9      	str	r1, [r7, #8]
 800a79c:	607a      	str	r2, [r7, #4]
 800a79e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7ac:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7ae:	683b      	ldr	r3, [r7, #0]
 800a7b0:	021a      	lsls	r2, r3, #8
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	4313      	orrs	r3, r2
 800a7ba:	697a      	ldr	r2, [r7, #20]
 800a7bc:	4313      	orrs	r3, r2
 800a7be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	697a      	ldr	r2, [r7, #20]
 800a7c4:	609a      	str	r2, [r3, #8]
}
 800a7c6:	bf00      	nop
 800a7c8:	371c      	adds	r7, #28
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
	...

0800a7d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b085      	sub	sp, #20
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
 800a7dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7e4:	2b01      	cmp	r3, #1
 800a7e6:	d101      	bne.n	800a7ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7e8:	2302      	movs	r3, #2
 800a7ea:	e050      	b.n	800a88e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2201      	movs	r2, #1
 800a7f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	2202      	movs	r2, #2
 800a7f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	689b      	ldr	r3, [r3, #8]
 800a80a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a812:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68fa      	ldr	r2, [r7, #12]
 800a81a:	4313      	orrs	r3, r2
 800a81c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68fa      	ldr	r2, [r7, #12]
 800a824:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a1c      	ldr	r2, [pc, #112]	@ (800a89c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d018      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a838:	d013      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4a18      	ldr	r2, [pc, #96]	@ (800a8a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d00e      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a16      	ldr	r2, [pc, #88]	@ (800a8a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a84a:	4293      	cmp	r3, r2
 800a84c:	d009      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	4a15      	ldr	r2, [pc, #84]	@ (800a8a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d004      	beq.n	800a862 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	4a13      	ldr	r2, [pc, #76]	@ (800a8ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d10c      	bne.n	800a87c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a862:	68bb      	ldr	r3, [r7, #8]
 800a864:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	685b      	ldr	r3, [r3, #4]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	4313      	orrs	r3, r2
 800a872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	68ba      	ldr	r2, [r7, #8]
 800a87a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2201      	movs	r2, #1
 800a880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	2200      	movs	r2, #0
 800a888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a88c:	2300      	movs	r3, #0
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3714      	adds	r7, #20
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
 800a89a:	bf00      	nop
 800a89c:	40010000 	.word	0x40010000
 800a8a0:	40000400 	.word	0x40000400
 800a8a4:	40000800 	.word	0x40000800
 800a8a8:	40000c00 	.word	0x40000c00
 800a8ac:	40014000 	.word	0x40014000

0800a8b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8c4:	b480      	push	{r7}
 800a8c6:	b083      	sub	sp, #12
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8cc:	bf00      	nop
 800a8ce:	370c      	adds	r7, #12
 800a8d0:	46bd      	mov	sp, r7
 800a8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d6:	4770      	bx	lr

0800a8d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8d8:	b084      	sub	sp, #16
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b084      	sub	sp, #16
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	6078      	str	r0, [r7, #4]
 800a8e2:	f107 001c 	add.w	r0, r7, #28
 800a8e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d123      	bne.n	800a93a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a906:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a91a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d105      	bne.n	800a92e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a92e:	6878      	ldr	r0, [r7, #4]
 800a930:	f001 fae8 	bl	800bf04 <USB_CoreReset>
 800a934:	4603      	mov	r3, r0
 800a936:	73fb      	strb	r3, [r7, #15]
 800a938:	e01b      	b.n	800a972 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	68db      	ldr	r3, [r3, #12]
 800a93e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a946:	6878      	ldr	r0, [r7, #4]
 800a948:	f001 fadc 	bl	800bf04 <USB_CoreReset>
 800a94c:	4603      	mov	r3, r0
 800a94e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a950:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a954:	2b00      	cmp	r3, #0
 800a956:	d106      	bne.n	800a966 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a95c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	639a      	str	r2, [r3, #56]	@ 0x38
 800a964:	e005      	b.n	800a972 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a972:	7fbb      	ldrb	r3, [r7, #30]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d10b      	bne.n	800a990 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	689b      	ldr	r3, [r3, #8]
 800a97c:	f043 0206 	orr.w	r2, r3, #6
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	689b      	ldr	r3, [r3, #8]
 800a988:	f043 0220 	orr.w	r2, r3, #32
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a990:	7bfb      	ldrb	r3, [r7, #15]
}
 800a992:	4618      	mov	r0, r3
 800a994:	3710      	adds	r7, #16
 800a996:	46bd      	mov	sp, r7
 800a998:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a99c:	b004      	add	sp, #16
 800a99e:	4770      	bx	lr

0800a9a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b087      	sub	sp, #28
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	60f8      	str	r0, [r7, #12]
 800a9a8:	60b9      	str	r1, [r7, #8]
 800a9aa:	4613      	mov	r3, r2
 800a9ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a9ae:	79fb      	ldrb	r3, [r7, #7]
 800a9b0:	2b02      	cmp	r3, #2
 800a9b2:	d165      	bne.n	800aa80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	4a41      	ldr	r2, [pc, #260]	@ (800aabc <USB_SetTurnaroundTime+0x11c>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d906      	bls.n	800a9ca <USB_SetTurnaroundTime+0x2a>
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	4a40      	ldr	r2, [pc, #256]	@ (800aac0 <USB_SetTurnaroundTime+0x120>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d202      	bcs.n	800a9ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a9c4:	230f      	movs	r3, #15
 800a9c6:	617b      	str	r3, [r7, #20]
 800a9c8:	e062      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	4a3c      	ldr	r2, [pc, #240]	@ (800aac0 <USB_SetTurnaroundTime+0x120>)
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d306      	bcc.n	800a9e0 <USB_SetTurnaroundTime+0x40>
 800a9d2:	68bb      	ldr	r3, [r7, #8]
 800a9d4:	4a3b      	ldr	r2, [pc, #236]	@ (800aac4 <USB_SetTurnaroundTime+0x124>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d202      	bcs.n	800a9e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a9da:	230e      	movs	r3, #14
 800a9dc:	617b      	str	r3, [r7, #20]
 800a9de:	e057      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	4a38      	ldr	r2, [pc, #224]	@ (800aac4 <USB_SetTurnaroundTime+0x124>)
 800a9e4:	4293      	cmp	r3, r2
 800a9e6:	d306      	bcc.n	800a9f6 <USB_SetTurnaroundTime+0x56>
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	4a37      	ldr	r2, [pc, #220]	@ (800aac8 <USB_SetTurnaroundTime+0x128>)
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d202      	bcs.n	800a9f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a9f0:	230d      	movs	r3, #13
 800a9f2:	617b      	str	r3, [r7, #20]
 800a9f4:	e04c      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	4a33      	ldr	r2, [pc, #204]	@ (800aac8 <USB_SetTurnaroundTime+0x128>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d306      	bcc.n	800aa0c <USB_SetTurnaroundTime+0x6c>
 800a9fe:	68bb      	ldr	r3, [r7, #8]
 800aa00:	4a32      	ldr	r2, [pc, #200]	@ (800aacc <USB_SetTurnaroundTime+0x12c>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d802      	bhi.n	800aa0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aa06:	230c      	movs	r3, #12
 800aa08:	617b      	str	r3, [r7, #20]
 800aa0a:	e041      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	4a2f      	ldr	r2, [pc, #188]	@ (800aacc <USB_SetTurnaroundTime+0x12c>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d906      	bls.n	800aa22 <USB_SetTurnaroundTime+0x82>
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	4a2e      	ldr	r2, [pc, #184]	@ (800aad0 <USB_SetTurnaroundTime+0x130>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d802      	bhi.n	800aa22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aa1c:	230b      	movs	r3, #11
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	e036      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	4a2a      	ldr	r2, [pc, #168]	@ (800aad0 <USB_SetTurnaroundTime+0x130>)
 800aa26:	4293      	cmp	r3, r2
 800aa28:	d906      	bls.n	800aa38 <USB_SetTurnaroundTime+0x98>
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	4a29      	ldr	r2, [pc, #164]	@ (800aad4 <USB_SetTurnaroundTime+0x134>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d802      	bhi.n	800aa38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aa32:	230a      	movs	r3, #10
 800aa34:	617b      	str	r3, [r7, #20]
 800aa36:	e02b      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	4a26      	ldr	r2, [pc, #152]	@ (800aad4 <USB_SetTurnaroundTime+0x134>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d906      	bls.n	800aa4e <USB_SetTurnaroundTime+0xae>
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	4a25      	ldr	r2, [pc, #148]	@ (800aad8 <USB_SetTurnaroundTime+0x138>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d202      	bcs.n	800aa4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aa48:	2309      	movs	r3, #9
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e020      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	4a21      	ldr	r2, [pc, #132]	@ (800aad8 <USB_SetTurnaroundTime+0x138>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d306      	bcc.n	800aa64 <USB_SetTurnaroundTime+0xc4>
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	4a20      	ldr	r2, [pc, #128]	@ (800aadc <USB_SetTurnaroundTime+0x13c>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d802      	bhi.n	800aa64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aa5e:	2308      	movs	r3, #8
 800aa60:	617b      	str	r3, [r7, #20]
 800aa62:	e015      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	4a1d      	ldr	r2, [pc, #116]	@ (800aadc <USB_SetTurnaroundTime+0x13c>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d906      	bls.n	800aa7a <USB_SetTurnaroundTime+0xda>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	4a1c      	ldr	r2, [pc, #112]	@ (800aae0 <USB_SetTurnaroundTime+0x140>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d202      	bcs.n	800aa7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aa74:	2307      	movs	r3, #7
 800aa76:	617b      	str	r3, [r7, #20]
 800aa78:	e00a      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800aa7a:	2306      	movs	r3, #6
 800aa7c:	617b      	str	r3, [r7, #20]
 800aa7e:	e007      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800aa80:	79fb      	ldrb	r3, [r7, #7]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d102      	bne.n	800aa8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800aa86:	2309      	movs	r3, #9
 800aa88:	617b      	str	r3, [r7, #20]
 800aa8a:	e001      	b.n	800aa90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aa8c:	2309      	movs	r3, #9
 800aa8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	68db      	ldr	r3, [r3, #12]
 800aa94:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	68da      	ldr	r2, [r3, #12]
 800aaa0:	697b      	ldr	r3, [r7, #20]
 800aaa2:	029b      	lsls	r3, r3, #10
 800aaa4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800aaa8:	431a      	orrs	r2, r3
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aaae:	2300      	movs	r3, #0
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	371c      	adds	r7, #28
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr
 800aabc:	00d8acbf 	.word	0x00d8acbf
 800aac0:	00e4e1c0 	.word	0x00e4e1c0
 800aac4:	00f42400 	.word	0x00f42400
 800aac8:	01067380 	.word	0x01067380
 800aacc:	011a499f 	.word	0x011a499f
 800aad0:	01312cff 	.word	0x01312cff
 800aad4:	014ca43f 	.word	0x014ca43f
 800aad8:	016e3600 	.word	0x016e3600
 800aadc:	01a6ab1f 	.word	0x01a6ab1f
 800aae0:	01e84800 	.word	0x01e84800

0800aae4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b083      	sub	sp, #12
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	689b      	ldr	r3, [r3, #8]
 800aaf0:	f043 0201 	orr.w	r2, r3, #1
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	370c      	adds	r7, #12
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr

0800ab06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab06:	b480      	push	{r7}
 800ab08:	b083      	sub	sp, #12
 800ab0a:	af00      	add	r7, sp, #0
 800ab0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	689b      	ldr	r3, [r3, #8]
 800ab12:	f023 0201 	bic.w	r2, r3, #1
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	370c      	adds	r7, #12
 800ab20:	46bd      	mov	sp, r7
 800ab22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab26:	4770      	bx	lr

0800ab28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	460b      	mov	r3, r1
 800ab32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ab34:	2300      	movs	r3, #0
 800ab36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab44:	78fb      	ldrb	r3, [r7, #3]
 800ab46:	2b01      	cmp	r3, #1
 800ab48:	d115      	bne.n	800ab76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	68db      	ldr	r3, [r3, #12]
 800ab4e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab56:	200a      	movs	r0, #10
 800ab58:	f7f8 fe26 	bl	80037a8 <HAL_Delay>
      ms += 10U;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	330a      	adds	r3, #10
 800ab60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f001 f93f 	bl	800bde6 <USB_GetMode>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b01      	cmp	r3, #1
 800ab6c:	d01e      	beq.n	800abac <USB_SetCurrentMode+0x84>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab72:	d9f0      	bls.n	800ab56 <USB_SetCurrentMode+0x2e>
 800ab74:	e01a      	b.n	800abac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab76:	78fb      	ldrb	r3, [r7, #3]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d115      	bne.n	800aba8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	68db      	ldr	r3, [r3, #12]
 800ab80:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab88:	200a      	movs	r0, #10
 800ab8a:	f7f8 fe0d 	bl	80037a8 <HAL_Delay>
      ms += 10U;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	330a      	adds	r3, #10
 800ab92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab94:	6878      	ldr	r0, [r7, #4]
 800ab96:	f001 f926 	bl	800bde6 <USB_GetMode>
 800ab9a:	4603      	mov	r3, r0
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d005      	beq.n	800abac <USB_SetCurrentMode+0x84>
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	2bc7      	cmp	r3, #199	@ 0xc7
 800aba4:	d9f0      	bls.n	800ab88 <USB_SetCurrentMode+0x60>
 800aba6:	e001      	b.n	800abac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800aba8:	2301      	movs	r3, #1
 800abaa:	e005      	b.n	800abb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	2bc8      	cmp	r3, #200	@ 0xc8
 800abb0:	d101      	bne.n	800abb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800abb2:	2301      	movs	r3, #1
 800abb4:	e000      	b.n	800abb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800abb6:	2300      	movs	r3, #0
}
 800abb8:	4618      	mov	r0, r3
 800abba:	3710      	adds	r7, #16
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}

0800abc0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abc0:	b084      	sub	sp, #16
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b086      	sub	sp, #24
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
 800abca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800abce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800abd2:	2300      	movs	r3, #0
 800abd4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800abda:	2300      	movs	r3, #0
 800abdc:	613b      	str	r3, [r7, #16]
 800abde:	e009      	b.n	800abf4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800abe0:	687a      	ldr	r2, [r7, #4]
 800abe2:	693b      	ldr	r3, [r7, #16]
 800abe4:	3340      	adds	r3, #64	@ 0x40
 800abe6:	009b      	lsls	r3, r3, #2
 800abe8:	4413      	add	r3, r2
 800abea:	2200      	movs	r2, #0
 800abec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	3301      	adds	r3, #1
 800abf2:	613b      	str	r3, [r7, #16]
 800abf4:	693b      	ldr	r3, [r7, #16]
 800abf6:	2b0e      	cmp	r3, #14
 800abf8:	d9f2      	bls.n	800abe0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800abfa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d11c      	bne.n	800ac3c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	68fa      	ldr	r2, [r7, #12]
 800ac0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac10:	f043 0302 	orr.w	r3, r3, #2
 800ac14:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac26:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac32:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac3a:	e00b      	b.n	800ac54 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac40:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac4c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac5a:	461a      	mov	r2, r3
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ac64:	2b01      	cmp	r3, #1
 800ac66:	d10d      	bne.n	800ac84 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ac68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d104      	bne.n	800ac7a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ac70:	2100      	movs	r1, #0
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 f968 	bl	800af48 <USB_SetDevSpeed>
 800ac78:	e008      	b.n	800ac8c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ac7a:	2101      	movs	r1, #1
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f000 f963 	bl	800af48 <USB_SetDevSpeed>
 800ac82:	e003      	b.n	800ac8c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ac84:	2103      	movs	r1, #3
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f000 f95e 	bl	800af48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac8c:	2110      	movs	r1, #16
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f000 f8fa 	bl	800ae88 <USB_FlushTxFifo>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d001      	beq.n	800ac9e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f924 	bl	800aeec <USB_FlushRxFifo>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acb4:	461a      	mov	r2, r3
 800acb6:	2300      	movs	r3, #0
 800acb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc0:	461a      	mov	r2, r3
 800acc2:	2300      	movs	r3, #0
 800acc4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800accc:	461a      	mov	r2, r3
 800acce:	2300      	movs	r3, #0
 800acd0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800acd2:	2300      	movs	r3, #0
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	e043      	b.n	800ad60 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	015a      	lsls	r2, r3, #5
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4413      	add	r3, r2
 800ace0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800acea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acee:	d118      	bne.n	800ad22 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d10a      	bne.n	800ad0c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800acf6:	693b      	ldr	r3, [r7, #16]
 800acf8:	015a      	lsls	r2, r3, #5
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	4413      	add	r3, r2
 800acfe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad02:	461a      	mov	r2, r3
 800ad04:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad08:	6013      	str	r3, [r2, #0]
 800ad0a:	e013      	b.n	800ad34 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad0c:	693b      	ldr	r3, [r7, #16]
 800ad0e:	015a      	lsls	r2, r3, #5
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	4413      	add	r3, r2
 800ad14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad18:	461a      	mov	r2, r3
 800ad1a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ad1e:	6013      	str	r3, [r2, #0]
 800ad20:	e008      	b.n	800ad34 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	015a      	lsls	r2, r3, #5
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	4413      	add	r3, r2
 800ad2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad2e:	461a      	mov	r2, r3
 800ad30:	2300      	movs	r3, #0
 800ad32:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	015a      	lsls	r2, r3, #5
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad40:	461a      	mov	r2, r3
 800ad42:	2300      	movs	r3, #0
 800ad44:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	015a      	lsls	r2, r3, #5
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	4413      	add	r3, r2
 800ad4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad52:	461a      	mov	r2, r3
 800ad54:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ad58:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad5a:	693b      	ldr	r3, [r7, #16]
 800ad5c:	3301      	adds	r3, #1
 800ad5e:	613b      	str	r3, [r7, #16]
 800ad60:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad64:	461a      	mov	r2, r3
 800ad66:	693b      	ldr	r3, [r7, #16]
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d3b5      	bcc.n	800acd8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	613b      	str	r3, [r7, #16]
 800ad70:	e043      	b.n	800adfa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad72:	693b      	ldr	r3, [r7, #16]
 800ad74:	015a      	lsls	r2, r3, #5
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	4413      	add	r3, r2
 800ad7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad88:	d118      	bne.n	800adbc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d10a      	bne.n	800ada6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	015a      	lsls	r2, r3, #5
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	4413      	add	r3, r2
 800ad98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ada2:	6013      	str	r3, [r2, #0]
 800ada4:	e013      	b.n	800adce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	015a      	lsls	r2, r3, #5
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	4413      	add	r3, r2
 800adae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adb2:	461a      	mov	r2, r3
 800adb4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800adb8:	6013      	str	r3, [r2, #0]
 800adba:	e008      	b.n	800adce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	015a      	lsls	r2, r3, #5
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	4413      	add	r3, r2
 800adc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc8:	461a      	mov	r2, r3
 800adca:	2300      	movs	r3, #0
 800adcc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	015a      	lsls	r2, r3, #5
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	4413      	add	r3, r2
 800add6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adda:	461a      	mov	r2, r3
 800addc:	2300      	movs	r3, #0
 800adde:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ade0:	693b      	ldr	r3, [r7, #16]
 800ade2:	015a      	lsls	r2, r3, #5
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	4413      	add	r3, r2
 800ade8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adec:	461a      	mov	r2, r3
 800adee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800adf2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	3301      	adds	r3, #1
 800adf8:	613b      	str	r3, [r7, #16]
 800adfa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800adfe:	461a      	mov	r2, r3
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	4293      	cmp	r3, r2
 800ae04:	d3b5      	bcc.n	800ad72 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae0c:	691b      	ldr	r3, [r3, #16]
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae18:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ae26:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae28:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d105      	bne.n	800ae3c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	699b      	ldr	r3, [r3, #24]
 800ae34:	f043 0210 	orr.w	r2, r3, #16
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	699a      	ldr	r2, [r3, #24]
 800ae40:	4b10      	ldr	r3, [pc, #64]	@ (800ae84 <USB_DevInit+0x2c4>)
 800ae42:	4313      	orrs	r3, r2
 800ae44:	687a      	ldr	r2, [r7, #4]
 800ae46:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ae48:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d005      	beq.n	800ae5c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	699b      	ldr	r3, [r3, #24]
 800ae54:	f043 0208 	orr.w	r2, r3, #8
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ae5c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae60:	2b01      	cmp	r3, #1
 800ae62:	d107      	bne.n	800ae74 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	699b      	ldr	r3, [r3, #24]
 800ae68:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae6c:	f043 0304 	orr.w	r3, r3, #4
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ae74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3718      	adds	r7, #24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae80:	b004      	add	sp, #16
 800ae82:	4770      	bx	lr
 800ae84:	803c3800 	.word	0x803c3800

0800ae88 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae88:	b480      	push	{r7}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
 800ae90:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ae92:	2300      	movs	r3, #0
 800ae94:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	3301      	adds	r3, #1
 800ae9a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aea2:	d901      	bls.n	800aea8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	e01b      	b.n	800aee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	daf2      	bge.n	800ae96 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	019b      	lsls	r3, r3, #6
 800aeb8:	f043 0220 	orr.w	r2, r3, #32
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	3301      	adds	r3, #1
 800aec4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aecc:	d901      	bls.n	800aed2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aece:	2303      	movs	r3, #3
 800aed0:	e006      	b.n	800aee0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	691b      	ldr	r3, [r3, #16]
 800aed6:	f003 0320 	and.w	r3, r3, #32
 800aeda:	2b20      	cmp	r3, #32
 800aedc:	d0f0      	beq.n	800aec0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3714      	adds	r7, #20
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b085      	sub	sp, #20
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aef4:	2300      	movs	r3, #0
 800aef6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	3301      	adds	r3, #1
 800aefc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af04:	d901      	bls.n	800af0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e018      	b.n	800af3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	691b      	ldr	r3, [r3, #16]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	daf2      	bge.n	800aef8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800af12:	2300      	movs	r3, #0
 800af14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	2210      	movs	r2, #16
 800af1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	3301      	adds	r3, #1
 800af20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af28:	d901      	bls.n	800af2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800af2a:	2303      	movs	r3, #3
 800af2c:	e006      	b.n	800af3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	691b      	ldr	r3, [r3, #16]
 800af32:	f003 0310 	and.w	r3, r3, #16
 800af36:	2b10      	cmp	r3, #16
 800af38:	d0f0      	beq.n	800af1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800af3a:	2300      	movs	r3, #0
}
 800af3c:	4618      	mov	r0, r3
 800af3e:	3714      	adds	r7, #20
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af48:	b480      	push	{r7}
 800af4a:	b085      	sub	sp, #20
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
 800af50:	460b      	mov	r3, r1
 800af52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af5e:	681a      	ldr	r2, [r3, #0]
 800af60:	78fb      	ldrb	r3, [r7, #3]
 800af62:	68f9      	ldr	r1, [r7, #12]
 800af64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af68:	4313      	orrs	r3, r2
 800af6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800af6c:	2300      	movs	r3, #0
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3714      	adds	r7, #20
 800af72:	46bd      	mov	sp, r7
 800af74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af78:	4770      	bx	lr

0800af7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800af7a:	b480      	push	{r7}
 800af7c:	b087      	sub	sp, #28
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af8c:	689b      	ldr	r3, [r3, #8]
 800af8e:	f003 0306 	and.w	r3, r3, #6
 800af92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d102      	bne.n	800afa0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800af9a:	2300      	movs	r3, #0
 800af9c:	75fb      	strb	r3, [r7, #23]
 800af9e:	e00a      	b.n	800afb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d002      	beq.n	800afac <USB_GetDevSpeed+0x32>
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	2b06      	cmp	r3, #6
 800afaa:	d102      	bne.n	800afb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800afac:	2302      	movs	r3, #2
 800afae:	75fb      	strb	r3, [r7, #23]
 800afb0:	e001      	b.n	800afb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800afb2:	230f      	movs	r3, #15
 800afb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800afb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afb8:	4618      	mov	r0, r3
 800afba:	371c      	adds	r7, #28
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b085      	sub	sp, #20
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afd2:	683b      	ldr	r3, [r7, #0]
 800afd4:	781b      	ldrb	r3, [r3, #0]
 800afd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afd8:	683b      	ldr	r3, [r7, #0]
 800afda:	785b      	ldrb	r3, [r3, #1]
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d13a      	bne.n	800b056 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afe6:	69da      	ldr	r2, [r3, #28]
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	781b      	ldrb	r3, [r3, #0]
 800afec:	f003 030f 	and.w	r3, r3, #15
 800aff0:	2101      	movs	r1, #1
 800aff2:	fa01 f303 	lsl.w	r3, r1, r3
 800aff6:	b29b      	uxth	r3, r3
 800aff8:	68f9      	ldr	r1, [r7, #12]
 800affa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800affe:	4313      	orrs	r3, r2
 800b000:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	015a      	lsls	r2, r3, #5
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	4413      	add	r3, r2
 800b00a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b014:	2b00      	cmp	r3, #0
 800b016:	d155      	bne.n	800b0c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b018:	68bb      	ldr	r3, [r7, #8]
 800b01a:	015a      	lsls	r2, r3, #5
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	4413      	add	r3, r2
 800b020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	689b      	ldr	r3, [r3, #8]
 800b02a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	791b      	ldrb	r3, [r3, #4]
 800b032:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b034:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	059b      	lsls	r3, r3, #22
 800b03a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b03c:	4313      	orrs	r3, r2
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	0151      	lsls	r1, r2, #5
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	440a      	add	r2, r1
 800b046:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b04a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b04e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b052:	6013      	str	r3, [r2, #0]
 800b054:	e036      	b.n	800b0c4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b05c:	69da      	ldr	r2, [r3, #28]
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	f003 030f 	and.w	r3, r3, #15
 800b066:	2101      	movs	r1, #1
 800b068:	fa01 f303 	lsl.w	r3, r1, r3
 800b06c:	041b      	lsls	r3, r3, #16
 800b06e:	68f9      	ldr	r1, [r7, #12]
 800b070:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b074:	4313      	orrs	r3, r2
 800b076:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b078:	68bb      	ldr	r3, [r7, #8]
 800b07a:	015a      	lsls	r2, r3, #5
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	4413      	add	r3, r2
 800b080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d11a      	bne.n	800b0c4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	015a      	lsls	r2, r3, #5
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	4413      	add	r3, r2
 800b096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b09a:	681a      	ldr	r2, [r3, #0]
 800b09c:	683b      	ldr	r3, [r7, #0]
 800b09e:	689b      	ldr	r3, [r3, #8]
 800b0a0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	791b      	ldrb	r3, [r3, #4]
 800b0a8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b0aa:	430b      	orrs	r3, r1
 800b0ac:	4313      	orrs	r3, r2
 800b0ae:	68ba      	ldr	r2, [r7, #8]
 800b0b0:	0151      	lsls	r1, r2, #5
 800b0b2:	68fa      	ldr	r2, [r7, #12]
 800b0b4:	440a      	add	r2, r1
 800b0b6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0c2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b0c4:	2300      	movs	r3, #0
}
 800b0c6:	4618      	mov	r0, r3
 800b0c8:	3714      	adds	r7, #20
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0d0:	4770      	bx	lr
	...

0800b0d4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b085      	sub	sp, #20
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0e2:	683b      	ldr	r3, [r7, #0]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	785b      	ldrb	r3, [r3, #1]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	d161      	bne.n	800b1b4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	015a      	lsls	r2, r3, #5
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	4413      	add	r3, r2
 800b0f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b102:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b106:	d11f      	bne.n	800b148 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	015a      	lsls	r2, r3, #5
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	4413      	add	r3, r2
 800b110:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	68ba      	ldr	r2, [r7, #8]
 800b118:	0151      	lsls	r1, r2, #5
 800b11a:	68fa      	ldr	r2, [r7, #12]
 800b11c:	440a      	add	r2, r1
 800b11e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b122:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b126:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b128:	68bb      	ldr	r3, [r7, #8]
 800b12a:	015a      	lsls	r2, r3, #5
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	4413      	add	r3, r2
 800b130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	68ba      	ldr	r2, [r7, #8]
 800b138:	0151      	lsls	r1, r2, #5
 800b13a:	68fa      	ldr	r2, [r7, #12]
 800b13c:	440a      	add	r2, r1
 800b13e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b142:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b146:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b14e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b150:	683b      	ldr	r3, [r7, #0]
 800b152:	781b      	ldrb	r3, [r3, #0]
 800b154:	f003 030f 	and.w	r3, r3, #15
 800b158:	2101      	movs	r1, #1
 800b15a:	fa01 f303 	lsl.w	r3, r1, r3
 800b15e:	b29b      	uxth	r3, r3
 800b160:	43db      	mvns	r3, r3
 800b162:	68f9      	ldr	r1, [r7, #12]
 800b164:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b168:	4013      	ands	r3, r2
 800b16a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b172:	69da      	ldr	r2, [r3, #28]
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	f003 030f 	and.w	r3, r3, #15
 800b17c:	2101      	movs	r1, #1
 800b17e:	fa01 f303 	lsl.w	r3, r1, r3
 800b182:	b29b      	uxth	r3, r3
 800b184:	43db      	mvns	r3, r3
 800b186:	68f9      	ldr	r1, [r7, #12]
 800b188:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b18c:	4013      	ands	r3, r2
 800b18e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4413      	add	r3, r2
 800b198:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	0159      	lsls	r1, r3, #5
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	440b      	add	r3, r1
 800b1a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	4b35      	ldr	r3, [pc, #212]	@ (800b284 <USB_DeactivateEndpoint+0x1b0>)
 800b1ae:	4013      	ands	r3, r2
 800b1b0:	600b      	str	r3, [r1, #0]
 800b1b2:	e060      	b.n	800b276 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1ca:	d11f      	bne.n	800b20c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	015a      	lsls	r2, r3, #5
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1d8:	681b      	ldr	r3, [r3, #0]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	0151      	lsls	r1, r2, #5
 800b1de:	68fa      	ldr	r2, [r7, #12]
 800b1e0:	440a      	add	r2, r1
 800b1e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b1ea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	015a      	lsls	r2, r3, #5
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	0151      	lsls	r1, r2, #5
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	440a      	add	r2, r1
 800b202:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b206:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b20a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b212:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	781b      	ldrb	r3, [r3, #0]
 800b218:	f003 030f 	and.w	r3, r3, #15
 800b21c:	2101      	movs	r1, #1
 800b21e:	fa01 f303 	lsl.w	r3, r1, r3
 800b222:	041b      	lsls	r3, r3, #16
 800b224:	43db      	mvns	r3, r3
 800b226:	68f9      	ldr	r1, [r7, #12]
 800b228:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b22c:	4013      	ands	r3, r2
 800b22e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b236:	69da      	ldr	r2, [r3, #28]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	f003 030f 	and.w	r3, r3, #15
 800b240:	2101      	movs	r1, #1
 800b242:	fa01 f303 	lsl.w	r3, r1, r3
 800b246:	041b      	lsls	r3, r3, #16
 800b248:	43db      	mvns	r3, r3
 800b24a:	68f9      	ldr	r1, [r7, #12]
 800b24c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b250:	4013      	ands	r3, r2
 800b252:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b254:	68bb      	ldr	r3, [r7, #8]
 800b256:	015a      	lsls	r2, r3, #5
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	4413      	add	r3, r2
 800b25c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b260:	681a      	ldr	r2, [r3, #0]
 800b262:	68bb      	ldr	r3, [r7, #8]
 800b264:	0159      	lsls	r1, r3, #5
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	440b      	add	r3, r1
 800b26a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b26e:	4619      	mov	r1, r3
 800b270:	4b05      	ldr	r3, [pc, #20]	@ (800b288 <USB_DeactivateEndpoint+0x1b4>)
 800b272:	4013      	ands	r3, r2
 800b274:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b276:	2300      	movs	r3, #0
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3714      	adds	r7, #20
 800b27c:	46bd      	mov	sp, r7
 800b27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b282:	4770      	bx	lr
 800b284:	ec337800 	.word	0xec337800
 800b288:	eff37800 	.word	0xeff37800

0800b28c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b28c:	b580      	push	{r7, lr}
 800b28e:	b08a      	sub	sp, #40	@ 0x28
 800b290:	af02      	add	r7, sp, #8
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	4613      	mov	r3, r2
 800b298:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	785b      	ldrb	r3, [r3, #1]
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	f040 817f 	bne.w	800b5ac <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d132      	bne.n	800b31c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2b6:	69bb      	ldr	r3, [r7, #24]
 800b2b8:	015a      	lsls	r2, r3, #5
 800b2ba:	69fb      	ldr	r3, [r7, #28]
 800b2bc:	4413      	add	r3, r2
 800b2be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	69ba      	ldr	r2, [r7, #24]
 800b2c6:	0151      	lsls	r1, r2, #5
 800b2c8:	69fa      	ldr	r2, [r7, #28]
 800b2ca:	440a      	add	r2, r1
 800b2cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2d0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b2d4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b2d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2da:	69bb      	ldr	r3, [r7, #24]
 800b2dc:	015a      	lsls	r2, r3, #5
 800b2de:	69fb      	ldr	r3, [r7, #28]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2e6:	691b      	ldr	r3, [r3, #16]
 800b2e8:	69ba      	ldr	r2, [r7, #24]
 800b2ea:	0151      	lsls	r1, r2, #5
 800b2ec:	69fa      	ldr	r2, [r7, #28]
 800b2ee:	440a      	add	r2, r1
 800b2f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b2f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	4413      	add	r3, r2
 800b302:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b306:	691b      	ldr	r3, [r3, #16]
 800b308:	69ba      	ldr	r2, [r7, #24]
 800b30a:	0151      	lsls	r1, r2, #5
 800b30c:	69fa      	ldr	r2, [r7, #28]
 800b30e:	440a      	add	r2, r1
 800b310:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b314:	0cdb      	lsrs	r3, r3, #19
 800b316:	04db      	lsls	r3, r3, #19
 800b318:	6113      	str	r3, [r2, #16]
 800b31a:	e097      	b.n	800b44c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	015a      	lsls	r2, r3, #5
 800b320:	69fb      	ldr	r3, [r7, #28]
 800b322:	4413      	add	r3, r2
 800b324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b328:	691b      	ldr	r3, [r3, #16]
 800b32a:	69ba      	ldr	r2, [r7, #24]
 800b32c:	0151      	lsls	r1, r2, #5
 800b32e:	69fa      	ldr	r2, [r7, #28]
 800b330:	440a      	add	r2, r1
 800b332:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b336:	0cdb      	lsrs	r3, r3, #19
 800b338:	04db      	lsls	r3, r3, #19
 800b33a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b33c:	69bb      	ldr	r3, [r7, #24]
 800b33e:	015a      	lsls	r2, r3, #5
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	4413      	add	r3, r2
 800b344:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b348:	691b      	ldr	r3, [r3, #16]
 800b34a:	69ba      	ldr	r2, [r7, #24]
 800b34c:	0151      	lsls	r1, r2, #5
 800b34e:	69fa      	ldr	r2, [r7, #28]
 800b350:	440a      	add	r2, r1
 800b352:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b356:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b35a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b35e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b360:	69bb      	ldr	r3, [r7, #24]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d11a      	bne.n	800b39c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	691a      	ldr	r2, [r3, #16]
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	689b      	ldr	r3, [r3, #8]
 800b36e:	429a      	cmp	r2, r3
 800b370:	d903      	bls.n	800b37a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	689a      	ldr	r2, [r3, #8]
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	015a      	lsls	r2, r3, #5
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	4413      	add	r3, r2
 800b382:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b386:	691b      	ldr	r3, [r3, #16]
 800b388:	69ba      	ldr	r2, [r7, #24]
 800b38a:	0151      	lsls	r1, r2, #5
 800b38c:	69fa      	ldr	r2, [r7, #28]
 800b38e:	440a      	add	r2, r1
 800b390:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b394:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b398:	6113      	str	r3, [r2, #16]
 800b39a:	e044      	b.n	800b426 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	691a      	ldr	r2, [r3, #16]
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	689b      	ldr	r3, [r3, #8]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	1e5a      	subs	r2, r3, #1
 800b3a8:	68bb      	ldr	r3, [r7, #8]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3b0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b3b2:	69bb      	ldr	r3, [r7, #24]
 800b3b4:	015a      	lsls	r2, r3, #5
 800b3b6:	69fb      	ldr	r3, [r7, #28]
 800b3b8:	4413      	add	r3, r2
 800b3ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3be:	691a      	ldr	r2, [r3, #16]
 800b3c0:	8afb      	ldrh	r3, [r7, #22]
 800b3c2:	04d9      	lsls	r1, r3, #19
 800b3c4:	4ba4      	ldr	r3, [pc, #656]	@ (800b658 <USB_EPStartXfer+0x3cc>)
 800b3c6:	400b      	ands	r3, r1
 800b3c8:	69b9      	ldr	r1, [r7, #24]
 800b3ca:	0148      	lsls	r0, r1, #5
 800b3cc:	69f9      	ldr	r1, [r7, #28]
 800b3ce:	4401      	add	r1, r0
 800b3d0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	791b      	ldrb	r3, [r3, #4]
 800b3dc:	2b01      	cmp	r3, #1
 800b3de:	d122      	bne.n	800b426 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	69ba      	ldr	r2, [r7, #24]
 800b3f0:	0151      	lsls	r1, r2, #5
 800b3f2:	69fa      	ldr	r2, [r7, #28]
 800b3f4:	440a      	add	r2, r1
 800b3f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3fa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b3fe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b400:	69bb      	ldr	r3, [r7, #24]
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	69fb      	ldr	r3, [r7, #28]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b40c:	691a      	ldr	r2, [r3, #16]
 800b40e:	8afb      	ldrh	r3, [r7, #22]
 800b410:	075b      	lsls	r3, r3, #29
 800b412:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b416:	69b9      	ldr	r1, [r7, #24]
 800b418:	0148      	lsls	r0, r1, #5
 800b41a:	69f9      	ldr	r1, [r7, #28]
 800b41c:	4401      	add	r1, r0
 800b41e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b422:	4313      	orrs	r3, r2
 800b424:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b426:	69bb      	ldr	r3, [r7, #24]
 800b428:	015a      	lsls	r2, r3, #5
 800b42a:	69fb      	ldr	r3, [r7, #28]
 800b42c:	4413      	add	r3, r2
 800b42e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b432:	691a      	ldr	r2, [r3, #16]
 800b434:	68bb      	ldr	r3, [r7, #8]
 800b436:	691b      	ldr	r3, [r3, #16]
 800b438:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b43c:	69b9      	ldr	r1, [r7, #24]
 800b43e:	0148      	lsls	r0, r1, #5
 800b440:	69f9      	ldr	r1, [r7, #28]
 800b442:	4401      	add	r1, r0
 800b444:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b448:	4313      	orrs	r3, r2
 800b44a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b44c:	79fb      	ldrb	r3, [r7, #7]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d14b      	bne.n	800b4ea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	69db      	ldr	r3, [r3, #28]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d009      	beq.n	800b46e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b45a:	69bb      	ldr	r3, [r7, #24]
 800b45c:	015a      	lsls	r2, r3, #5
 800b45e:	69fb      	ldr	r3, [r7, #28]
 800b460:	4413      	add	r3, r2
 800b462:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b466:	461a      	mov	r2, r3
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	69db      	ldr	r3, [r3, #28]
 800b46c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	791b      	ldrb	r3, [r3, #4]
 800b472:	2b01      	cmp	r3, #1
 800b474:	d128      	bne.n	800b4c8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b47c:	689b      	ldr	r3, [r3, #8]
 800b47e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b482:	2b00      	cmp	r3, #0
 800b484:	d110      	bne.n	800b4a8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b486:	69bb      	ldr	r3, [r7, #24]
 800b488:	015a      	lsls	r2, r3, #5
 800b48a:	69fb      	ldr	r3, [r7, #28]
 800b48c:	4413      	add	r3, r2
 800b48e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	69ba      	ldr	r2, [r7, #24]
 800b496:	0151      	lsls	r1, r2, #5
 800b498:	69fa      	ldr	r2, [r7, #28]
 800b49a:	440a      	add	r2, r1
 800b49c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b4a4:	6013      	str	r3, [r2, #0]
 800b4a6:	e00f      	b.n	800b4c8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	015a      	lsls	r2, r3, #5
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	4413      	add	r3, r2
 800b4b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	69ba      	ldr	r2, [r7, #24]
 800b4b8:	0151      	lsls	r1, r2, #5
 800b4ba:	69fa      	ldr	r2, [r7, #28]
 800b4bc:	440a      	add	r2, r1
 800b4be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4c6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4c8:	69bb      	ldr	r3, [r7, #24]
 800b4ca:	015a      	lsls	r2, r3, #5
 800b4cc:	69fb      	ldr	r3, [r7, #28]
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	69ba      	ldr	r2, [r7, #24]
 800b4d8:	0151      	lsls	r1, r2, #5
 800b4da:	69fa      	ldr	r2, [r7, #28]
 800b4dc:	440a      	add	r2, r1
 800b4de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4e2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b4e6:	6013      	str	r3, [r2, #0]
 800b4e8:	e166      	b.n	800b7b8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4ea:	69bb      	ldr	r3, [r7, #24]
 800b4ec:	015a      	lsls	r2, r3, #5
 800b4ee:	69fb      	ldr	r3, [r7, #28]
 800b4f0:	4413      	add	r3, r2
 800b4f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	69ba      	ldr	r2, [r7, #24]
 800b4fa:	0151      	lsls	r1, r2, #5
 800b4fc:	69fa      	ldr	r2, [r7, #28]
 800b4fe:	440a      	add	r2, r1
 800b500:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b504:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b508:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	791b      	ldrb	r3, [r3, #4]
 800b50e:	2b01      	cmp	r3, #1
 800b510:	d015      	beq.n	800b53e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b512:	68bb      	ldr	r3, [r7, #8]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 814e 	beq.w	800b7b8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b51c:	69fb      	ldr	r3, [r7, #28]
 800b51e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b522:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b524:	68bb      	ldr	r3, [r7, #8]
 800b526:	781b      	ldrb	r3, [r3, #0]
 800b528:	f003 030f 	and.w	r3, r3, #15
 800b52c:	2101      	movs	r1, #1
 800b52e:	fa01 f303 	lsl.w	r3, r1, r3
 800b532:	69f9      	ldr	r1, [r7, #28]
 800b534:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b538:	4313      	orrs	r3, r2
 800b53a:	634b      	str	r3, [r1, #52]	@ 0x34
 800b53c:	e13c      	b.n	800b7b8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b53e:	69fb      	ldr	r3, [r7, #28]
 800b540:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b544:	689b      	ldr	r3, [r3, #8]
 800b546:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d110      	bne.n	800b570 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	015a      	lsls	r2, r3, #5
 800b552:	69fb      	ldr	r3, [r7, #28]
 800b554:	4413      	add	r3, r2
 800b556:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	69ba      	ldr	r2, [r7, #24]
 800b55e:	0151      	lsls	r1, r2, #5
 800b560:	69fa      	ldr	r2, [r7, #28]
 800b562:	440a      	add	r2, r1
 800b564:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b568:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b56c:	6013      	str	r3, [r2, #0]
 800b56e:	e00f      	b.n	800b590 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b570:	69bb      	ldr	r3, [r7, #24]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	4413      	add	r3, r2
 800b578:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	69ba      	ldr	r2, [r7, #24]
 800b580:	0151      	lsls	r1, r2, #5
 800b582:	69fa      	ldr	r2, [r7, #28]
 800b584:	440a      	add	r2, r1
 800b586:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b58a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b58e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b590:	68bb      	ldr	r3, [r7, #8]
 800b592:	68d9      	ldr	r1, [r3, #12]
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	781a      	ldrb	r2, [r3, #0]
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	691b      	ldr	r3, [r3, #16]
 800b59c:	b298      	uxth	r0, r3
 800b59e:	79fb      	ldrb	r3, [r7, #7]
 800b5a0:	9300      	str	r3, [sp, #0]
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	68f8      	ldr	r0, [r7, #12]
 800b5a6:	f000 f9b9 	bl	800b91c <USB_WritePacket>
 800b5aa:	e105      	b.n	800b7b8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5ac:	69bb      	ldr	r3, [r7, #24]
 800b5ae:	015a      	lsls	r2, r3, #5
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	4413      	add	r3, r2
 800b5b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5b8:	691b      	ldr	r3, [r3, #16]
 800b5ba:	69ba      	ldr	r2, [r7, #24]
 800b5bc:	0151      	lsls	r1, r2, #5
 800b5be:	69fa      	ldr	r2, [r7, #28]
 800b5c0:	440a      	add	r2, r1
 800b5c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5c6:	0cdb      	lsrs	r3, r3, #19
 800b5c8:	04db      	lsls	r3, r3, #19
 800b5ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	015a      	lsls	r2, r3, #5
 800b5d0:	69fb      	ldr	r3, [r7, #28]
 800b5d2:	4413      	add	r3, r2
 800b5d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5d8:	691b      	ldr	r3, [r3, #16]
 800b5da:	69ba      	ldr	r2, [r7, #24]
 800b5dc:	0151      	lsls	r1, r2, #5
 800b5de:	69fa      	ldr	r2, [r7, #28]
 800b5e0:	440a      	add	r2, r1
 800b5e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b5ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b5ee:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d132      	bne.n	800b65c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	691b      	ldr	r3, [r3, #16]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d003      	beq.n	800b606 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	689a      	ldr	r2, [r3, #8]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	689a      	ldr	r2, [r3, #8]
 800b60a:	68bb      	ldr	r3, [r7, #8]
 800b60c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b60e:	69bb      	ldr	r3, [r7, #24]
 800b610:	015a      	lsls	r2, r3, #5
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	4413      	add	r3, r2
 800b616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b61a:	691a      	ldr	r2, [r3, #16]
 800b61c:	68bb      	ldr	r3, [r7, #8]
 800b61e:	6a1b      	ldr	r3, [r3, #32]
 800b620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b624:	69b9      	ldr	r1, [r7, #24]
 800b626:	0148      	lsls	r0, r1, #5
 800b628:	69f9      	ldr	r1, [r7, #28]
 800b62a:	4401      	add	r1, r0
 800b62c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b630:	4313      	orrs	r3, r2
 800b632:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b634:	69bb      	ldr	r3, [r7, #24]
 800b636:	015a      	lsls	r2, r3, #5
 800b638:	69fb      	ldr	r3, [r7, #28]
 800b63a:	4413      	add	r3, r2
 800b63c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b640:	691b      	ldr	r3, [r3, #16]
 800b642:	69ba      	ldr	r2, [r7, #24]
 800b644:	0151      	lsls	r1, r2, #5
 800b646:	69fa      	ldr	r2, [r7, #28]
 800b648:	440a      	add	r2, r1
 800b64a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b64e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b652:	6113      	str	r3, [r2, #16]
 800b654:	e062      	b.n	800b71c <USB_EPStartXfer+0x490>
 800b656:	bf00      	nop
 800b658:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d123      	bne.n	800b6ac <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	015a      	lsls	r2, r3, #5
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	4413      	add	r3, r2
 800b66c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b670:	691a      	ldr	r2, [r3, #16]
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	689b      	ldr	r3, [r3, #8]
 800b676:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b67a:	69b9      	ldr	r1, [r7, #24]
 800b67c:	0148      	lsls	r0, r1, #5
 800b67e:	69f9      	ldr	r1, [r7, #28]
 800b680:	4401      	add	r1, r0
 800b682:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b686:	4313      	orrs	r3, r2
 800b688:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b68a:	69bb      	ldr	r3, [r7, #24]
 800b68c:	015a      	lsls	r2, r3, #5
 800b68e:	69fb      	ldr	r3, [r7, #28]
 800b690:	4413      	add	r3, r2
 800b692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b696:	691b      	ldr	r3, [r3, #16]
 800b698:	69ba      	ldr	r2, [r7, #24]
 800b69a:	0151      	lsls	r1, r2, #5
 800b69c:	69fa      	ldr	r2, [r7, #28]
 800b69e:	440a      	add	r2, r1
 800b6a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6a8:	6113      	str	r3, [r2, #16]
 800b6aa:	e037      	b.n	800b71c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	691a      	ldr	r2, [r3, #16]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	689b      	ldr	r3, [r3, #8]
 800b6b4:	4413      	add	r3, r2
 800b6b6:	1e5a      	subs	r2, r3, #1
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	689b      	ldr	r3, [r3, #8]
 800b6bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	689b      	ldr	r3, [r3, #8]
 800b6c6:	8afa      	ldrh	r2, [r7, #22]
 800b6c8:	fb03 f202 	mul.w	r2, r3, r2
 800b6cc:	68bb      	ldr	r3, [r7, #8]
 800b6ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	015a      	lsls	r2, r3, #5
 800b6d4:	69fb      	ldr	r3, [r7, #28]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6dc:	691a      	ldr	r2, [r3, #16]
 800b6de:	8afb      	ldrh	r3, [r7, #22]
 800b6e0:	04d9      	lsls	r1, r3, #19
 800b6e2:	4b38      	ldr	r3, [pc, #224]	@ (800b7c4 <USB_EPStartXfer+0x538>)
 800b6e4:	400b      	ands	r3, r1
 800b6e6:	69b9      	ldr	r1, [r7, #24]
 800b6e8:	0148      	lsls	r0, r1, #5
 800b6ea:	69f9      	ldr	r1, [r7, #28]
 800b6ec:	4401      	add	r1, r0
 800b6ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b6f2:	4313      	orrs	r3, r2
 800b6f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	015a      	lsls	r2, r3, #5
 800b6fa:	69fb      	ldr	r3, [r7, #28]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b702:	691a      	ldr	r2, [r3, #16]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	6a1b      	ldr	r3, [r3, #32]
 800b708:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b70c:	69b9      	ldr	r1, [r7, #24]
 800b70e:	0148      	lsls	r0, r1, #5
 800b710:	69f9      	ldr	r1, [r7, #28]
 800b712:	4401      	add	r1, r0
 800b714:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b718:	4313      	orrs	r3, r2
 800b71a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b71c:	79fb      	ldrb	r3, [r7, #7]
 800b71e:	2b01      	cmp	r3, #1
 800b720:	d10d      	bne.n	800b73e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	68db      	ldr	r3, [r3, #12]
 800b726:	2b00      	cmp	r3, #0
 800b728:	d009      	beq.n	800b73e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	68d9      	ldr	r1, [r3, #12]
 800b72e:	69bb      	ldr	r3, [r7, #24]
 800b730:	015a      	lsls	r2, r3, #5
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	4413      	add	r3, r2
 800b736:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b73a:	460a      	mov	r2, r1
 800b73c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	791b      	ldrb	r3, [r3, #4]
 800b742:	2b01      	cmp	r3, #1
 800b744:	d128      	bne.n	800b798 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b746:	69fb      	ldr	r3, [r7, #28]
 800b748:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b74c:	689b      	ldr	r3, [r3, #8]
 800b74e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b752:	2b00      	cmp	r3, #0
 800b754:	d110      	bne.n	800b778 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b756:	69bb      	ldr	r3, [r7, #24]
 800b758:	015a      	lsls	r2, r3, #5
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	4413      	add	r3, r2
 800b75e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	69ba      	ldr	r2, [r7, #24]
 800b766:	0151      	lsls	r1, r2, #5
 800b768:	69fa      	ldr	r2, [r7, #28]
 800b76a:	440a      	add	r2, r1
 800b76c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b770:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b774:	6013      	str	r3, [r2, #0]
 800b776:	e00f      	b.n	800b798 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	0151      	lsls	r1, r2, #5
 800b78a:	69fa      	ldr	r2, [r7, #28]
 800b78c:	440a      	add	r2, r1
 800b78e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b792:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b796:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b798:	69bb      	ldr	r3, [r7, #24]
 800b79a:	015a      	lsls	r2, r3, #5
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	4413      	add	r3, r2
 800b7a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	69ba      	ldr	r2, [r7, #24]
 800b7a8:	0151      	lsls	r1, r2, #5
 800b7aa:	69fa      	ldr	r2, [r7, #28]
 800b7ac:	440a      	add	r2, r1
 800b7ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b7b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7b8:	2300      	movs	r3, #0
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3720      	adds	r7, #32
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}
 800b7c2:	bf00      	nop
 800b7c4:	1ff80000 	.word	0x1ff80000

0800b7c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b087      	sub	sp, #28
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	6078      	str	r0, [r7, #4]
 800b7d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	785b      	ldrb	r3, [r3, #1]
 800b7e2:	2b01      	cmp	r3, #1
 800b7e4:	d14a      	bne.n	800b87c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7e6:	683b      	ldr	r3, [r7, #0]
 800b7e8:	781b      	ldrb	r3, [r3, #0]
 800b7ea:	015a      	lsls	r2, r3, #5
 800b7ec:	693b      	ldr	r3, [r7, #16]
 800b7ee:	4413      	add	r3, r2
 800b7f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b7fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b7fe:	f040 8086 	bne.w	800b90e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	781b      	ldrb	r3, [r3, #0]
 800b806:	015a      	lsls	r2, r3, #5
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	4413      	add	r3, r2
 800b80c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	683a      	ldr	r2, [r7, #0]
 800b814:	7812      	ldrb	r2, [r2, #0]
 800b816:	0151      	lsls	r1, r2, #5
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	440a      	add	r2, r1
 800b81c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b820:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b824:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	781b      	ldrb	r3, [r3, #0]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	693b      	ldr	r3, [r7, #16]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	683a      	ldr	r2, [r7, #0]
 800b838:	7812      	ldrb	r2, [r2, #0]
 800b83a:	0151      	lsls	r1, r2, #5
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	440a      	add	r2, r1
 800b840:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b844:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b848:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	3301      	adds	r3, #1
 800b84e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b856:	4293      	cmp	r3, r2
 800b858:	d902      	bls.n	800b860 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	75fb      	strb	r3, [r7, #23]
          break;
 800b85e:	e056      	b.n	800b90e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	781b      	ldrb	r3, [r3, #0]
 800b864:	015a      	lsls	r2, r3, #5
 800b866:	693b      	ldr	r3, [r7, #16]
 800b868:	4413      	add	r3, r2
 800b86a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b874:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b878:	d0e7      	beq.n	800b84a <USB_EPStopXfer+0x82>
 800b87a:	e048      	b.n	800b90e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	781b      	ldrb	r3, [r3, #0]
 800b880:	015a      	lsls	r2, r3, #5
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	4413      	add	r3, r2
 800b886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b894:	d13b      	bne.n	800b90e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	781b      	ldrb	r3, [r3, #0]
 800b89a:	015a      	lsls	r2, r3, #5
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	4413      	add	r3, r2
 800b8a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	683a      	ldr	r2, [r7, #0]
 800b8a8:	7812      	ldrb	r2, [r2, #0]
 800b8aa:	0151      	lsls	r1, r2, #5
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	440a      	add	r2, r1
 800b8b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b8b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b8ba:	683b      	ldr	r3, [r7, #0]
 800b8bc:	781b      	ldrb	r3, [r3, #0]
 800b8be:	015a      	lsls	r2, r3, #5
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	4413      	add	r3, r2
 800b8c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	683a      	ldr	r2, [r7, #0]
 800b8cc:	7812      	ldrb	r2, [r2, #0]
 800b8ce:	0151      	lsls	r1, r2, #5
 800b8d0:	693a      	ldr	r2, [r7, #16]
 800b8d2:	440a      	add	r2, r1
 800b8d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b8dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b8ea:	4293      	cmp	r3, r2
 800b8ec:	d902      	bls.n	800b8f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	75fb      	strb	r3, [r7, #23]
          break;
 800b8f2:	e00c      	b.n	800b90e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b8f4:	683b      	ldr	r3, [r7, #0]
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	015a      	lsls	r2, r3, #5
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b908:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b90c:	d0e7      	beq.n	800b8de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b90e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b910:	4618      	mov	r0, r3
 800b912:	371c      	adds	r7, #28
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr

0800b91c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b089      	sub	sp, #36	@ 0x24
 800b920:	af00      	add	r7, sp, #0
 800b922:	60f8      	str	r0, [r7, #12]
 800b924:	60b9      	str	r1, [r7, #8]
 800b926:	4611      	mov	r1, r2
 800b928:	461a      	mov	r2, r3
 800b92a:	460b      	mov	r3, r1
 800b92c:	71fb      	strb	r3, [r7, #7]
 800b92e:	4613      	mov	r3, r2
 800b930:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b93a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d123      	bne.n	800b98a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b942:	88bb      	ldrh	r3, [r7, #4]
 800b944:	3303      	adds	r3, #3
 800b946:	089b      	lsrs	r3, r3, #2
 800b948:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b94a:	2300      	movs	r3, #0
 800b94c:	61bb      	str	r3, [r7, #24]
 800b94e:	e018      	b.n	800b982 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b950:	79fb      	ldrb	r3, [r7, #7]
 800b952:	031a      	lsls	r2, r3, #12
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	4413      	add	r3, r2
 800b958:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b95c:	461a      	mov	r2, r3
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b964:	69fb      	ldr	r3, [r7, #28]
 800b966:	3301      	adds	r3, #1
 800b968:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b96a:	69fb      	ldr	r3, [r7, #28]
 800b96c:	3301      	adds	r3, #1
 800b96e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b970:	69fb      	ldr	r3, [r7, #28]
 800b972:	3301      	adds	r3, #1
 800b974:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b976:	69fb      	ldr	r3, [r7, #28]
 800b978:	3301      	adds	r3, #1
 800b97a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	3301      	adds	r3, #1
 800b980:	61bb      	str	r3, [r7, #24]
 800b982:	69ba      	ldr	r2, [r7, #24]
 800b984:	693b      	ldr	r3, [r7, #16]
 800b986:	429a      	cmp	r2, r3
 800b988:	d3e2      	bcc.n	800b950 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b98a:	2300      	movs	r3, #0
}
 800b98c:	4618      	mov	r0, r3
 800b98e:	3724      	adds	r7, #36	@ 0x24
 800b990:	46bd      	mov	sp, r7
 800b992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b996:	4770      	bx	lr

0800b998 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b998:	b480      	push	{r7}
 800b99a:	b08b      	sub	sp, #44	@ 0x2c
 800b99c:	af00      	add	r7, sp, #0
 800b99e:	60f8      	str	r0, [r7, #12]
 800b9a0:	60b9      	str	r1, [r7, #8]
 800b9a2:	4613      	mov	r3, r2
 800b9a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b9ae:	88fb      	ldrh	r3, [r7, #6]
 800b9b0:	089b      	lsrs	r3, r3, #2
 800b9b2:	b29b      	uxth	r3, r3
 800b9b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b9b6:	88fb      	ldrh	r3, [r7, #6]
 800b9b8:	f003 0303 	and.w	r3, r3, #3
 800b9bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b9be:	2300      	movs	r3, #0
 800b9c0:	623b      	str	r3, [r7, #32]
 800b9c2:	e014      	b.n	800b9ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b9c4:	69bb      	ldr	r3, [r7, #24]
 800b9c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9ca:	681a      	ldr	r2, [r3, #0]
 800b9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d2:	3301      	adds	r3, #1
 800b9d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9d8:	3301      	adds	r3, #1
 800b9da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9de:	3301      	adds	r3, #1
 800b9e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e4:	3301      	adds	r3, #1
 800b9e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b9e8:	6a3b      	ldr	r3, [r7, #32]
 800b9ea:	3301      	adds	r3, #1
 800b9ec:	623b      	str	r3, [r7, #32]
 800b9ee:	6a3a      	ldr	r2, [r7, #32]
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d3e6      	bcc.n	800b9c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b9f6:	8bfb      	ldrh	r3, [r7, #30]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d01e      	beq.n	800ba3a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ba00:	69bb      	ldr	r3, [r7, #24]
 800ba02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba06:	461a      	mov	r2, r3
 800ba08:	f107 0310 	add.w	r3, r7, #16
 800ba0c:	6812      	ldr	r2, [r2, #0]
 800ba0e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ba10:	693a      	ldr	r2, [r7, #16]
 800ba12:	6a3b      	ldr	r3, [r7, #32]
 800ba14:	b2db      	uxtb	r3, r3
 800ba16:	00db      	lsls	r3, r3, #3
 800ba18:	fa22 f303 	lsr.w	r3, r2, r3
 800ba1c:	b2da      	uxtb	r2, r3
 800ba1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba20:	701a      	strb	r2, [r3, #0]
      i++;
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	3301      	adds	r3, #1
 800ba26:	623b      	str	r3, [r7, #32]
      pDest++;
 800ba28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba2a:	3301      	adds	r3, #1
 800ba2c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ba2e:	8bfb      	ldrh	r3, [r7, #30]
 800ba30:	3b01      	subs	r3, #1
 800ba32:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ba34:	8bfb      	ldrh	r3, [r7, #30]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d1ea      	bne.n	800ba10 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	372c      	adds	r7, #44	@ 0x2c
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b085      	sub	sp, #20
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba56:	683b      	ldr	r3, [r7, #0]
 800ba58:	781b      	ldrb	r3, [r3, #0]
 800ba5a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba5c:	683b      	ldr	r3, [r7, #0]
 800ba5e:	785b      	ldrb	r3, [r3, #1]
 800ba60:	2b01      	cmp	r3, #1
 800ba62:	d12c      	bne.n	800babe <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	015a      	lsls	r2, r3, #5
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	4413      	add	r3, r2
 800ba6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	db12      	blt.n	800ba9c <USB_EPSetStall+0x54>
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d00f      	beq.n	800ba9c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ba7c:	68bb      	ldr	r3, [r7, #8]
 800ba7e:	015a      	lsls	r2, r3, #5
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	4413      	add	r3, r2
 800ba84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68ba      	ldr	r2, [r7, #8]
 800ba8c:	0151      	lsls	r1, r2, #5
 800ba8e:	68fa      	ldr	r2, [r7, #12]
 800ba90:	440a      	add	r2, r1
 800ba92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ba96:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800ba9a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	015a      	lsls	r2, r3, #5
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	4413      	add	r3, r2
 800baa4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68ba      	ldr	r2, [r7, #8]
 800baac:	0151      	lsls	r1, r2, #5
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	440a      	add	r2, r1
 800bab2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bab6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800baba:	6013      	str	r3, [r2, #0]
 800babc:	e02b      	b.n	800bb16 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	015a      	lsls	r2, r3, #5
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	db12      	blt.n	800baf6 <USB_EPSetStall+0xae>
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d00f      	beq.n	800baf6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	015a      	lsls	r2, r3, #5
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	4413      	add	r3, r2
 800bade:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	68ba      	ldr	r2, [r7, #8]
 800bae6:	0151      	lsls	r1, r2, #5
 800bae8:	68fa      	ldr	r2, [r7, #12]
 800baea:	440a      	add	r2, r1
 800baec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800baf0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800baf4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	015a      	lsls	r2, r3, #5
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	4413      	add	r3, r2
 800bafe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	68ba      	ldr	r2, [r7, #8]
 800bb06:	0151      	lsls	r1, r2, #5
 800bb08:	68fa      	ldr	r2, [r7, #12]
 800bb0a:	440a      	add	r2, r1
 800bb0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb10:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bb14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb16:	2300      	movs	r3, #0
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	3714      	adds	r7, #20
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr

0800bb24 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b085      	sub	sp, #20
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	781b      	ldrb	r3, [r3, #0]
 800bb36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	785b      	ldrb	r3, [r3, #1]
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d128      	bne.n	800bb92 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	0151      	lsls	r1, r2, #5
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	440a      	add	r2, r1
 800bb56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb5a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb5e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	791b      	ldrb	r3, [r3, #4]
 800bb64:	2b03      	cmp	r3, #3
 800bb66:	d003      	beq.n	800bb70 <USB_EPClearStall+0x4c>
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	791b      	ldrb	r3, [r3, #4]
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d138      	bne.n	800bbe2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb70:	68bb      	ldr	r3, [r7, #8]
 800bb72:	015a      	lsls	r2, r3, #5
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	4413      	add	r3, r2
 800bb78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68ba      	ldr	r2, [r7, #8]
 800bb80:	0151      	lsls	r1, r2, #5
 800bb82:	68fa      	ldr	r2, [r7, #12]
 800bb84:	440a      	add	r2, r1
 800bb86:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb8e:	6013      	str	r3, [r2, #0]
 800bb90:	e027      	b.n	800bbe2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	015a      	lsls	r2, r3, #5
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	4413      	add	r3, r2
 800bb9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	68ba      	ldr	r2, [r7, #8]
 800bba2:	0151      	lsls	r1, r2, #5
 800bba4:	68fa      	ldr	r2, [r7, #12]
 800bba6:	440a      	add	r2, r1
 800bba8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bbb0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	791b      	ldrb	r3, [r3, #4]
 800bbb6:	2b03      	cmp	r3, #3
 800bbb8:	d003      	beq.n	800bbc2 <USB_EPClearStall+0x9e>
 800bbba:	683b      	ldr	r3, [r7, #0]
 800bbbc:	791b      	ldrb	r3, [r3, #4]
 800bbbe:	2b02      	cmp	r3, #2
 800bbc0:	d10f      	bne.n	800bbe2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	68ba      	ldr	r2, [r7, #8]
 800bbd2:	0151      	lsls	r1, r2, #5
 800bbd4:	68fa      	ldr	r2, [r7, #12]
 800bbd6:	440a      	add	r2, r1
 800bbd8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbe0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bbe2:	2300      	movs	r3, #0
}
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	3714      	adds	r7, #20
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
 800bbf8:	460b      	mov	r3, r1
 800bbfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bc00:	68fb      	ldr	r3, [r7, #12]
 800bc02:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	68fa      	ldr	r2, [r7, #12]
 800bc0a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc0e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bc12:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc1a:	681a      	ldr	r2, [r3, #0]
 800bc1c:	78fb      	ldrb	r3, [r7, #3]
 800bc1e:	011b      	lsls	r3, r3, #4
 800bc20:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bc24:	68f9      	ldr	r1, [r7, #12]
 800bc26:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bc2e:	2300      	movs	r3, #0
}
 800bc30:	4618      	mov	r0, r3
 800bc32:	3714      	adds	r7, #20
 800bc34:	46bd      	mov	sp, r7
 800bc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3a:	4770      	bx	lr

0800bc3c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b085      	sub	sp, #20
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	68fa      	ldr	r2, [r7, #12]
 800bc52:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc56:	f023 0303 	bic.w	r3, r3, #3
 800bc5a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc6a:	f023 0302 	bic.w	r3, r3, #2
 800bc6e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc70:	2300      	movs	r3, #0
}
 800bc72:	4618      	mov	r0, r3
 800bc74:	3714      	adds	r7, #20
 800bc76:	46bd      	mov	sp, r7
 800bc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7c:	4770      	bx	lr

0800bc7e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc7e:	b480      	push	{r7}
 800bc80:	b085      	sub	sp, #20
 800bc82:	af00      	add	r7, sp, #0
 800bc84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	68fa      	ldr	r2, [r7, #12]
 800bc94:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc98:	f023 0303 	bic.w	r3, r3, #3
 800bc9c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bca4:	685b      	ldr	r3, [r3, #4]
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcac:	f043 0302 	orr.w	r3, r3, #2
 800bcb0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bcb2:	2300      	movs	r3, #0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3714      	adds	r7, #20
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b085      	sub	sp, #20
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	695b      	ldr	r3, [r3, #20]
 800bccc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	699b      	ldr	r3, [r3, #24]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3714      	adds	r7, #20
 800bcde:	46bd      	mov	sp, r7
 800bce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce4:	4770      	bx	lr

0800bce6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bce6:	b480      	push	{r7}
 800bce8:	b085      	sub	sp, #20
 800bcea:	af00      	add	r7, sp, #0
 800bcec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcf8:	699b      	ldr	r3, [r3, #24]
 800bcfa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd02:	69db      	ldr	r3, [r3, #28]
 800bd04:	68ba      	ldr	r2, [r7, #8]
 800bd06:	4013      	ands	r3, r2
 800bd08:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bd0a:	68bb      	ldr	r3, [r7, #8]
 800bd0c:	0c1b      	lsrs	r3, r3, #16
}
 800bd0e:	4618      	mov	r0, r3
 800bd10:	3714      	adds	r7, #20
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr

0800bd1a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bd1a:	b480      	push	{r7}
 800bd1c:	b085      	sub	sp, #20
 800bd1e:	af00      	add	r7, sp, #0
 800bd20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd2c:	699b      	ldr	r3, [r3, #24]
 800bd2e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd36:	69db      	ldr	r3, [r3, #28]
 800bd38:	68ba      	ldr	r2, [r7, #8]
 800bd3a:	4013      	ands	r3, r2
 800bd3c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	b29b      	uxth	r3, r3
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3714      	adds	r7, #20
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b085      	sub	sp, #20
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	460b      	mov	r3, r1
 800bd58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bd5e:	78fb      	ldrb	r3, [r7, #3]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	4013      	ands	r3, r2
 800bd7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd7c:	68bb      	ldr	r3, [r7, #8]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr

0800bd8a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd8a:	b480      	push	{r7}
 800bd8c:	b087      	sub	sp, #28
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
 800bd92:	460b      	mov	r3, r1
 800bd94:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bd9a:	697b      	ldr	r3, [r7, #20]
 800bd9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bda4:	697b      	ldr	r3, [r7, #20]
 800bda6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bdae:	78fb      	ldrb	r3, [r7, #3]
 800bdb0:	f003 030f 	and.w	r3, r3, #15
 800bdb4:	68fa      	ldr	r2, [r7, #12]
 800bdb6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdba:	01db      	lsls	r3, r3, #7
 800bdbc:	b2db      	uxtb	r3, r3
 800bdbe:	693a      	ldr	r2, [r7, #16]
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bdc4:	78fb      	ldrb	r3, [r7, #3]
 800bdc6:	015a      	lsls	r2, r3, #5
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	4413      	add	r3, r2
 800bdcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bdd0:	689b      	ldr	r3, [r3, #8]
 800bdd2:	693a      	ldr	r2, [r7, #16]
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bdd8:	68bb      	ldr	r3, [r7, #8]
}
 800bdda:	4618      	mov	r0, r3
 800bddc:	371c      	adds	r7, #28
 800bdde:	46bd      	mov	sp, r7
 800bde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde4:	4770      	bx	lr

0800bde6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bde6:	b480      	push	{r7}
 800bde8:	b083      	sub	sp, #12
 800bdea:	af00      	add	r7, sp, #0
 800bdec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	695b      	ldr	r3, [r3, #20]
 800bdf2:	f003 0301 	and.w	r3, r3, #1
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	370c      	adds	r7, #12
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be00:	4770      	bx	lr

0800be02 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800be02:	b480      	push	{r7}
 800be04:	b085      	sub	sp, #20
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800be0e:	68fb      	ldr	r3, [r7, #12]
 800be10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68fa      	ldr	r2, [r7, #12]
 800be18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800be20:	f023 0307 	bic.w	r3, r3, #7
 800be24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be3a:	2300      	movs	r3, #0
}
 800be3c:	4618      	mov	r0, r3
 800be3e:	3714      	adds	r7, #20
 800be40:	46bd      	mov	sp, r7
 800be42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be46:	4770      	bx	lr

0800be48 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800be48:	b480      	push	{r7}
 800be4a:	b087      	sub	sp, #28
 800be4c:	af00      	add	r7, sp, #0
 800be4e:	60f8      	str	r0, [r7, #12]
 800be50:	460b      	mov	r3, r1
 800be52:	607a      	str	r2, [r7, #4]
 800be54:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	333c      	adds	r3, #60	@ 0x3c
 800be5e:	3304      	adds	r3, #4
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800be64:	693b      	ldr	r3, [r7, #16]
 800be66:	4a26      	ldr	r2, [pc, #152]	@ (800bf00 <USB_EP0_OutStart+0xb8>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d90a      	bls.n	800be82 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be7c:	d101      	bne.n	800be82 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800be7e:	2300      	movs	r3, #0
 800be80:	e037      	b.n	800bef2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be88:	461a      	mov	r2, r3
 800be8a:	2300      	movs	r3, #0
 800be8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be94:	691b      	ldr	r3, [r3, #16]
 800be96:	697a      	ldr	r2, [r7, #20]
 800be98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800be9c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bea0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bea2:	697b      	ldr	r3, [r7, #20]
 800bea4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bea8:	691b      	ldr	r3, [r3, #16]
 800beaa:	697a      	ldr	r2, [r7, #20]
 800beac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800beb0:	f043 0318 	orr.w	r3, r3, #24
 800beb4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800beb6:	697b      	ldr	r3, [r7, #20]
 800beb8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bebc:	691b      	ldr	r3, [r3, #16]
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bec4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bec8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800beca:	7afb      	ldrb	r3, [r7, #11]
 800becc:	2b01      	cmp	r3, #1
 800bece:	d10f      	bne.n	800bef0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bed0:	697b      	ldr	r3, [r7, #20]
 800bed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bed6:	461a      	mov	r2, r3
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bedc:	697b      	ldr	r3, [r7, #20]
 800bede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	697a      	ldr	r2, [r7, #20]
 800bee6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800beea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800beee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bef0:	2300      	movs	r3, #0
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	371c      	adds	r7, #28
 800bef6:	46bd      	mov	sp, r7
 800bef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befc:	4770      	bx	lr
 800befe:	bf00      	nop
 800bf00:	4f54300a 	.word	0x4f54300a

0800bf04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b085      	sub	sp, #20
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	3301      	adds	r3, #1
 800bf14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf1c:	d901      	bls.n	800bf22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bf1e:	2303      	movs	r3, #3
 800bf20:	e022      	b.n	800bf68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	691b      	ldr	r3, [r3, #16]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	daf2      	bge.n	800bf10 <USB_CoreReset+0xc>

  count = 10U;
 800bf2a:	230a      	movs	r3, #10
 800bf2c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800bf2e:	e002      	b.n	800bf36 <USB_CoreReset+0x32>
  {
    count--;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	3b01      	subs	r3, #1
 800bf34:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1f9      	bne.n	800bf30 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	691b      	ldr	r3, [r3, #16]
 800bf40:	f043 0201 	orr.w	r2, r3, #1
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf4e:	68fb      	ldr	r3, [r7, #12]
 800bf50:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf54:	d901      	bls.n	800bf5a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800bf56:	2303      	movs	r3, #3
 800bf58:	e006      	b.n	800bf68 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	691b      	ldr	r3, [r3, #16]
 800bf5e:	f003 0301 	and.w	r3, r3, #1
 800bf62:	2b01      	cmp	r3, #1
 800bf64:	d0f0      	beq.n	800bf48 <USB_CoreReset+0x44>

  return HAL_OK;
 800bf66:	2300      	movs	r3, #0
}
 800bf68:	4618      	mov	r0, r3
 800bf6a:	3714      	adds	r7, #20
 800bf6c:	46bd      	mov	sp, r7
 800bf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf72:	4770      	bx	lr

0800bf74 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b084      	sub	sp, #16
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	460b      	mov	r3, r1
 800bf7e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf80:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bf84:	f002 fd1e 	bl	800e9c4 <USBD_static_malloc>
 800bf88:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d109      	bne.n	800bfa4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	32b0      	adds	r2, #176	@ 0xb0
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bfa0:	2302      	movs	r3, #2
 800bfa2:	e0d4      	b.n	800c14e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bfa4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	68f8      	ldr	r0, [r7, #12]
 800bfac:	f002 fd84 	bl	800eab8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	32b0      	adds	r2, #176	@ 0xb0
 800bfba:	68f9      	ldr	r1, [r7, #12]
 800bfbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	32b0      	adds	r2, #176	@ 0xb0
 800bfca:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	7c1b      	ldrb	r3, [r3, #16]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d138      	bne.n	800c04e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bfdc:	4b5e      	ldr	r3, [pc, #376]	@ (800c158 <USBD_CDC_Init+0x1e4>)
 800bfde:	7819      	ldrb	r1, [r3, #0]
 800bfe0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bfe4:	2202      	movs	r2, #2
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f002 fbc9 	bl	800e77e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bfec:	4b5a      	ldr	r3, [pc, #360]	@ (800c158 <USBD_CDC_Init+0x1e4>)
 800bfee:	781b      	ldrb	r3, [r3, #0]
 800bff0:	f003 020f 	and.w	r2, r3, #15
 800bff4:	6879      	ldr	r1, [r7, #4]
 800bff6:	4613      	mov	r3, r2
 800bff8:	009b      	lsls	r3, r3, #2
 800bffa:	4413      	add	r3, r2
 800bffc:	009b      	lsls	r3, r3, #2
 800bffe:	440b      	add	r3, r1
 800c000:	3323      	adds	r3, #35	@ 0x23
 800c002:	2201      	movs	r2, #1
 800c004:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c006:	4b55      	ldr	r3, [pc, #340]	@ (800c15c <USBD_CDC_Init+0x1e8>)
 800c008:	7819      	ldrb	r1, [r3, #0]
 800c00a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c00e:	2202      	movs	r2, #2
 800c010:	6878      	ldr	r0, [r7, #4]
 800c012:	f002 fbb4 	bl	800e77e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c016:	4b51      	ldr	r3, [pc, #324]	@ (800c15c <USBD_CDC_Init+0x1e8>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	f003 020f 	and.w	r2, r3, #15
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	4613      	mov	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	440b      	add	r3, r1
 800c02a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c02e:	2201      	movs	r2, #1
 800c030:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c032:	4b4b      	ldr	r3, [pc, #300]	@ (800c160 <USBD_CDC_Init+0x1ec>)
 800c034:	781b      	ldrb	r3, [r3, #0]
 800c036:	f003 020f 	and.w	r2, r3, #15
 800c03a:	6879      	ldr	r1, [r7, #4]
 800c03c:	4613      	mov	r3, r2
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	009b      	lsls	r3, r3, #2
 800c044:	440b      	add	r3, r1
 800c046:	331c      	adds	r3, #28
 800c048:	2210      	movs	r2, #16
 800c04a:	601a      	str	r2, [r3, #0]
 800c04c:	e035      	b.n	800c0ba <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c04e:	4b42      	ldr	r3, [pc, #264]	@ (800c158 <USBD_CDC_Init+0x1e4>)
 800c050:	7819      	ldrb	r1, [r3, #0]
 800c052:	2340      	movs	r3, #64	@ 0x40
 800c054:	2202      	movs	r2, #2
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	f002 fb91 	bl	800e77e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c05c:	4b3e      	ldr	r3, [pc, #248]	@ (800c158 <USBD_CDC_Init+0x1e4>)
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	f003 020f 	and.w	r2, r3, #15
 800c064:	6879      	ldr	r1, [r7, #4]
 800c066:	4613      	mov	r3, r2
 800c068:	009b      	lsls	r3, r3, #2
 800c06a:	4413      	add	r3, r2
 800c06c:	009b      	lsls	r3, r3, #2
 800c06e:	440b      	add	r3, r1
 800c070:	3323      	adds	r3, #35	@ 0x23
 800c072:	2201      	movs	r2, #1
 800c074:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c076:	4b39      	ldr	r3, [pc, #228]	@ (800c15c <USBD_CDC_Init+0x1e8>)
 800c078:	7819      	ldrb	r1, [r3, #0]
 800c07a:	2340      	movs	r3, #64	@ 0x40
 800c07c:	2202      	movs	r2, #2
 800c07e:	6878      	ldr	r0, [r7, #4]
 800c080:	f002 fb7d 	bl	800e77e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c084:	4b35      	ldr	r3, [pc, #212]	@ (800c15c <USBD_CDC_Init+0x1e8>)
 800c086:	781b      	ldrb	r3, [r3, #0]
 800c088:	f003 020f 	and.w	r2, r3, #15
 800c08c:	6879      	ldr	r1, [r7, #4]
 800c08e:	4613      	mov	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4413      	add	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	440b      	add	r3, r1
 800c098:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c09c:	2201      	movs	r2, #1
 800c09e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c0a0:	4b2f      	ldr	r3, [pc, #188]	@ (800c160 <USBD_CDC_Init+0x1ec>)
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	f003 020f 	and.w	r2, r3, #15
 800c0a8:	6879      	ldr	r1, [r7, #4]
 800c0aa:	4613      	mov	r3, r2
 800c0ac:	009b      	lsls	r3, r3, #2
 800c0ae:	4413      	add	r3, r2
 800c0b0:	009b      	lsls	r3, r3, #2
 800c0b2:	440b      	add	r3, r1
 800c0b4:	331c      	adds	r3, #28
 800c0b6:	2210      	movs	r2, #16
 800c0b8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c0ba:	4b29      	ldr	r3, [pc, #164]	@ (800c160 <USBD_CDC_Init+0x1ec>)
 800c0bc:	7819      	ldrb	r1, [r3, #0]
 800c0be:	2308      	movs	r3, #8
 800c0c0:	2203      	movs	r2, #3
 800c0c2:	6878      	ldr	r0, [r7, #4]
 800c0c4:	f002 fb5b 	bl	800e77e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c0c8:	4b25      	ldr	r3, [pc, #148]	@ (800c160 <USBD_CDC_Init+0x1ec>)
 800c0ca:	781b      	ldrb	r3, [r3, #0]
 800c0cc:	f003 020f 	and.w	r2, r3, #15
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	4613      	mov	r3, r2
 800c0d4:	009b      	lsls	r3, r3, #2
 800c0d6:	4413      	add	r3, r2
 800c0d8:	009b      	lsls	r3, r3, #2
 800c0da:	440b      	add	r3, r1
 800c0dc:	3323      	adds	r3, #35	@ 0x23
 800c0de:	2201      	movs	r2, #1
 800c0e0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0f0:	687a      	ldr	r2, [r7, #4]
 800c0f2:	33b0      	adds	r3, #176	@ 0xb0
 800c0f4:	009b      	lsls	r3, r3, #2
 800c0f6:	4413      	add	r3, r2
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	2200      	movs	r2, #0
 800c102:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	2200      	movs	r2, #0
 800c10a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c118:	2302      	movs	r3, #2
 800c11a:	e018      	b.n	800c14e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	7c1b      	ldrb	r3, [r3, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d10a      	bne.n	800c13a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c124:	4b0d      	ldr	r3, [pc, #52]	@ (800c15c <USBD_CDC_Init+0x1e8>)
 800c126:	7819      	ldrb	r1, [r3, #0]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c12e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c132:	6878      	ldr	r0, [r7, #4]
 800c134:	f002 fc12 	bl	800e95c <USBD_LL_PrepareReceive>
 800c138:	e008      	b.n	800c14c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c13a:	4b08      	ldr	r3, [pc, #32]	@ (800c15c <USBD_CDC_Init+0x1e8>)
 800c13c:	7819      	ldrb	r1, [r3, #0]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c144:	2340      	movs	r3, #64	@ 0x40
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f002 fc08 	bl	800e95c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c14c:	2300      	movs	r3, #0
}
 800c14e:	4618      	mov	r0, r3
 800c150:	3710      	adds	r7, #16
 800c152:	46bd      	mov	sp, r7
 800c154:	bd80      	pop	{r7, pc}
 800c156:	bf00      	nop
 800c158:	200000c3 	.word	0x200000c3
 800c15c:	200000c4 	.word	0x200000c4
 800c160:	200000c5 	.word	0x200000c5

0800c164 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c164:	b580      	push	{r7, lr}
 800c166:	b082      	sub	sp, #8
 800c168:	af00      	add	r7, sp, #0
 800c16a:	6078      	str	r0, [r7, #4]
 800c16c:	460b      	mov	r3, r1
 800c16e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c170:	4b3a      	ldr	r3, [pc, #232]	@ (800c25c <USBD_CDC_DeInit+0xf8>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	4619      	mov	r1, r3
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f002 fb27 	bl	800e7ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c17c:	4b37      	ldr	r3, [pc, #220]	@ (800c25c <USBD_CDC_DeInit+0xf8>)
 800c17e:	781b      	ldrb	r3, [r3, #0]
 800c180:	f003 020f 	and.w	r2, r3, #15
 800c184:	6879      	ldr	r1, [r7, #4]
 800c186:	4613      	mov	r3, r2
 800c188:	009b      	lsls	r3, r3, #2
 800c18a:	4413      	add	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	440b      	add	r3, r1
 800c190:	3323      	adds	r3, #35	@ 0x23
 800c192:	2200      	movs	r2, #0
 800c194:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c196:	4b32      	ldr	r3, [pc, #200]	@ (800c260 <USBD_CDC_DeInit+0xfc>)
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	4619      	mov	r1, r3
 800c19c:	6878      	ldr	r0, [r7, #4]
 800c19e:	f002 fb14 	bl	800e7ca <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c1a2:	4b2f      	ldr	r3, [pc, #188]	@ (800c260 <USBD_CDC_DeInit+0xfc>)
 800c1a4:	781b      	ldrb	r3, [r3, #0]
 800c1a6:	f003 020f 	and.w	r2, r3, #15
 800c1aa:	6879      	ldr	r1, [r7, #4]
 800c1ac:	4613      	mov	r3, r2
 800c1ae:	009b      	lsls	r3, r3, #2
 800c1b0:	4413      	add	r3, r2
 800c1b2:	009b      	lsls	r3, r3, #2
 800c1b4:	440b      	add	r3, r1
 800c1b6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c1ba:	2200      	movs	r2, #0
 800c1bc:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c1be:	4b29      	ldr	r3, [pc, #164]	@ (800c264 <USBD_CDC_DeInit+0x100>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f002 fb00 	bl	800e7ca <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c1ca:	4b26      	ldr	r3, [pc, #152]	@ (800c264 <USBD_CDC_DeInit+0x100>)
 800c1cc:	781b      	ldrb	r3, [r3, #0]
 800c1ce:	f003 020f 	and.w	r2, r3, #15
 800c1d2:	6879      	ldr	r1, [r7, #4]
 800c1d4:	4613      	mov	r3, r2
 800c1d6:	009b      	lsls	r3, r3, #2
 800c1d8:	4413      	add	r3, r2
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	440b      	add	r3, r1
 800c1de:	3323      	adds	r3, #35	@ 0x23
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c1e4:	4b1f      	ldr	r3, [pc, #124]	@ (800c264 <USBD_CDC_DeInit+0x100>)
 800c1e6:	781b      	ldrb	r3, [r3, #0]
 800c1e8:	f003 020f 	and.w	r2, r3, #15
 800c1ec:	6879      	ldr	r1, [r7, #4]
 800c1ee:	4613      	mov	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4413      	add	r3, r2
 800c1f4:	009b      	lsls	r3, r3, #2
 800c1f6:	440b      	add	r3, r1
 800c1f8:	331c      	adds	r3, #28
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	32b0      	adds	r2, #176	@ 0xb0
 800c208:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d01f      	beq.n	800c250 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c216:	687a      	ldr	r2, [r7, #4]
 800c218:	33b0      	adds	r3, #176	@ 0xb0
 800c21a:	009b      	lsls	r3, r3, #2
 800c21c:	4413      	add	r3, r2
 800c21e:	685b      	ldr	r3, [r3, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	32b0      	adds	r2, #176	@ 0xb0
 800c22e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c232:	4618      	mov	r0, r3
 800c234:	f002 fbd4 	bl	800e9e0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	32b0      	adds	r2, #176	@ 0xb0
 800c242:	2100      	movs	r1, #0
 800c244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c250:	2300      	movs	r3, #0
}
 800c252:	4618      	mov	r0, r3
 800c254:	3708      	adds	r7, #8
 800c256:	46bd      	mov	sp, r7
 800c258:	bd80      	pop	{r7, pc}
 800c25a:	bf00      	nop
 800c25c:	200000c3 	.word	0x200000c3
 800c260:	200000c4 	.word	0x200000c4
 800c264:	200000c5 	.word	0x200000c5

0800c268 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b086      	sub	sp, #24
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	32b0      	adds	r2, #176	@ 0xb0
 800c27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c280:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c282:	2300      	movs	r3, #0
 800c284:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c286:	2300      	movs	r3, #0
 800c288:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c28a:	2300      	movs	r3, #0
 800c28c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c28e:	693b      	ldr	r3, [r7, #16]
 800c290:	2b00      	cmp	r3, #0
 800c292:	d101      	bne.n	800c298 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c294:	2303      	movs	r3, #3
 800c296:	e0bf      	b.n	800c418 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	781b      	ldrb	r3, [r3, #0]
 800c29c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d050      	beq.n	800c346 <USBD_CDC_Setup+0xde>
 800c2a4:	2b20      	cmp	r3, #32
 800c2a6:	f040 80af 	bne.w	800c408 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	88db      	ldrh	r3, [r3, #6]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d03a      	beq.n	800c328 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c2b2:	683b      	ldr	r3, [r7, #0]
 800c2b4:	781b      	ldrb	r3, [r3, #0]
 800c2b6:	b25b      	sxtb	r3, r3
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	da1b      	bge.n	800c2f4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	33b0      	adds	r3, #176	@ 0xb0
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	4413      	add	r3, r2
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	689b      	ldr	r3, [r3, #8]
 800c2ce:	683a      	ldr	r2, [r7, #0]
 800c2d0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c2d2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2d4:	683a      	ldr	r2, [r7, #0]
 800c2d6:	88d2      	ldrh	r2, [r2, #6]
 800c2d8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	88db      	ldrh	r3, [r3, #6]
 800c2de:	2b07      	cmp	r3, #7
 800c2e0:	bf28      	it	cs
 800c2e2:	2307      	movcs	r3, #7
 800c2e4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c2e6:	693b      	ldr	r3, [r7, #16]
 800c2e8:	89fa      	ldrh	r2, [r7, #14]
 800c2ea:	4619      	mov	r1, r3
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f001 fda9 	bl	800de44 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c2f2:	e090      	b.n	800c416 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	785a      	ldrb	r2, [r3, #1]
 800c2f8:	693b      	ldr	r3, [r7, #16]
 800c2fa:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	88db      	ldrh	r3, [r3, #6]
 800c302:	2b3f      	cmp	r3, #63	@ 0x3f
 800c304:	d803      	bhi.n	800c30e <USBD_CDC_Setup+0xa6>
 800c306:	683b      	ldr	r3, [r7, #0]
 800c308:	88db      	ldrh	r3, [r3, #6]
 800c30a:	b2da      	uxtb	r2, r3
 800c30c:	e000      	b.n	800c310 <USBD_CDC_Setup+0xa8>
 800c30e:	2240      	movs	r2, #64	@ 0x40
 800c310:	693b      	ldr	r3, [r7, #16]
 800c312:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c316:	6939      	ldr	r1, [r7, #16]
 800c318:	693b      	ldr	r3, [r7, #16]
 800c31a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c31e:	461a      	mov	r2, r3
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f001 fdbe 	bl	800dea2 <USBD_CtlPrepareRx>
      break;
 800c326:	e076      	b.n	800c416 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	33b0      	adds	r3, #176	@ 0xb0
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	4413      	add	r3, r2
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	689b      	ldr	r3, [r3, #8]
 800c33a:	683a      	ldr	r2, [r7, #0]
 800c33c:	7850      	ldrb	r0, [r2, #1]
 800c33e:	2200      	movs	r2, #0
 800c340:	6839      	ldr	r1, [r7, #0]
 800c342:	4798      	blx	r3
      break;
 800c344:	e067      	b.n	800c416 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c346:	683b      	ldr	r3, [r7, #0]
 800c348:	785b      	ldrb	r3, [r3, #1]
 800c34a:	2b0b      	cmp	r3, #11
 800c34c:	d851      	bhi.n	800c3f2 <USBD_CDC_Setup+0x18a>
 800c34e:	a201      	add	r2, pc, #4	@ (adr r2, 800c354 <USBD_CDC_Setup+0xec>)
 800c350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c354:	0800c385 	.word	0x0800c385
 800c358:	0800c401 	.word	0x0800c401
 800c35c:	0800c3f3 	.word	0x0800c3f3
 800c360:	0800c3f3 	.word	0x0800c3f3
 800c364:	0800c3f3 	.word	0x0800c3f3
 800c368:	0800c3f3 	.word	0x0800c3f3
 800c36c:	0800c3f3 	.word	0x0800c3f3
 800c370:	0800c3f3 	.word	0x0800c3f3
 800c374:	0800c3f3 	.word	0x0800c3f3
 800c378:	0800c3f3 	.word	0x0800c3f3
 800c37c:	0800c3af 	.word	0x0800c3af
 800c380:	0800c3d9 	.word	0x0800c3d9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c38a:	b2db      	uxtb	r3, r3
 800c38c:	2b03      	cmp	r3, #3
 800c38e:	d107      	bne.n	800c3a0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c390:	f107 030a 	add.w	r3, r7, #10
 800c394:	2202      	movs	r2, #2
 800c396:	4619      	mov	r1, r3
 800c398:	6878      	ldr	r0, [r7, #4]
 800c39a:	f001 fd53 	bl	800de44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c39e:	e032      	b.n	800c406 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c3a0:	6839      	ldr	r1, [r7, #0]
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f001 fcd1 	bl	800dd4a <USBD_CtlError>
            ret = USBD_FAIL;
 800c3a8:	2303      	movs	r3, #3
 800c3aa:	75fb      	strb	r3, [r7, #23]
          break;
 800c3ac:	e02b      	b.n	800c406 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3b4:	b2db      	uxtb	r3, r3
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d107      	bne.n	800c3ca <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c3ba:	f107 030d 	add.w	r3, r7, #13
 800c3be:	2201      	movs	r2, #1
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f001 fd3e 	bl	800de44 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3c8:	e01d      	b.n	800c406 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c3ca:	6839      	ldr	r1, [r7, #0]
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f001 fcbc 	bl	800dd4a <USBD_CtlError>
            ret = USBD_FAIL;
 800c3d2:	2303      	movs	r3, #3
 800c3d4:	75fb      	strb	r3, [r7, #23]
          break;
 800c3d6:	e016      	b.n	800c406 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3de:	b2db      	uxtb	r3, r3
 800c3e0:	2b03      	cmp	r3, #3
 800c3e2:	d00f      	beq.n	800c404 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c3e4:	6839      	ldr	r1, [r7, #0]
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f001 fcaf 	bl	800dd4a <USBD_CtlError>
            ret = USBD_FAIL;
 800c3ec:	2303      	movs	r3, #3
 800c3ee:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c3f0:	e008      	b.n	800c404 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c3f2:	6839      	ldr	r1, [r7, #0]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f001 fca8 	bl	800dd4a <USBD_CtlError>
          ret = USBD_FAIL;
 800c3fa:	2303      	movs	r3, #3
 800c3fc:	75fb      	strb	r3, [r7, #23]
          break;
 800c3fe:	e002      	b.n	800c406 <USBD_CDC_Setup+0x19e>
          break;
 800c400:	bf00      	nop
 800c402:	e008      	b.n	800c416 <USBD_CDC_Setup+0x1ae>
          break;
 800c404:	bf00      	nop
      }
      break;
 800c406:	e006      	b.n	800c416 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c408:	6839      	ldr	r1, [r7, #0]
 800c40a:	6878      	ldr	r0, [r7, #4]
 800c40c:	f001 fc9d 	bl	800dd4a <USBD_CtlError>
      ret = USBD_FAIL;
 800c410:	2303      	movs	r3, #3
 800c412:	75fb      	strb	r3, [r7, #23]
      break;
 800c414:	bf00      	nop
  }

  return (uint8_t)ret;
 800c416:	7dfb      	ldrb	r3, [r7, #23]
}
 800c418:	4618      	mov	r0, r3
 800c41a:	3718      	adds	r7, #24
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}

0800c420 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c420:	b580      	push	{r7, lr}
 800c422:	b084      	sub	sp, #16
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
 800c428:	460b      	mov	r3, r1
 800c42a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c432:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	32b0      	adds	r2, #176	@ 0xb0
 800c43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c442:	2b00      	cmp	r3, #0
 800c444:	d101      	bne.n	800c44a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c446:	2303      	movs	r3, #3
 800c448:	e065      	b.n	800c516 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	32b0      	adds	r2, #176	@ 0xb0
 800c454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c458:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c45a:	78fb      	ldrb	r3, [r7, #3]
 800c45c:	f003 020f 	and.w	r2, r3, #15
 800c460:	6879      	ldr	r1, [r7, #4]
 800c462:	4613      	mov	r3, r2
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	4413      	add	r3, r2
 800c468:	009b      	lsls	r3, r3, #2
 800c46a:	440b      	add	r3, r1
 800c46c:	3314      	adds	r3, #20
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d02f      	beq.n	800c4d4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c474:	78fb      	ldrb	r3, [r7, #3]
 800c476:	f003 020f 	and.w	r2, r3, #15
 800c47a:	6879      	ldr	r1, [r7, #4]
 800c47c:	4613      	mov	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	4413      	add	r3, r2
 800c482:	009b      	lsls	r3, r3, #2
 800c484:	440b      	add	r3, r1
 800c486:	3314      	adds	r3, #20
 800c488:	681a      	ldr	r2, [r3, #0]
 800c48a:	78fb      	ldrb	r3, [r7, #3]
 800c48c:	f003 010f 	and.w	r1, r3, #15
 800c490:	68f8      	ldr	r0, [r7, #12]
 800c492:	460b      	mov	r3, r1
 800c494:	00db      	lsls	r3, r3, #3
 800c496:	440b      	add	r3, r1
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	4403      	add	r3, r0
 800c49c:	331c      	adds	r3, #28
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c4a4:	fb01 f303 	mul.w	r3, r1, r3
 800c4a8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d112      	bne.n	800c4d4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c4ae:	78fb      	ldrb	r3, [r7, #3]
 800c4b0:	f003 020f 	and.w	r2, r3, #15
 800c4b4:	6879      	ldr	r1, [r7, #4]
 800c4b6:	4613      	mov	r3, r2
 800c4b8:	009b      	lsls	r3, r3, #2
 800c4ba:	4413      	add	r3, r2
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	440b      	add	r3, r1
 800c4c0:	3314      	adds	r3, #20
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c4c6:	78f9      	ldrb	r1, [r7, #3]
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f002 fa24 	bl	800e91a <USBD_LL_Transmit>
 800c4d2:	e01f      	b.n	800c514 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4e2:	687a      	ldr	r2, [r7, #4]
 800c4e4:	33b0      	adds	r3, #176	@ 0xb0
 800c4e6:	009b      	lsls	r3, r3, #2
 800c4e8:	4413      	add	r3, r2
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	691b      	ldr	r3, [r3, #16]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d010      	beq.n	800c514 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4f8:	687a      	ldr	r2, [r7, #4]
 800c4fa:	33b0      	adds	r3, #176	@ 0xb0
 800c4fc:	009b      	lsls	r3, r3, #2
 800c4fe:	4413      	add	r3, r2
 800c500:	685b      	ldr	r3, [r3, #4]
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	68ba      	ldr	r2, [r7, #8]
 800c506:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c50a:	68ba      	ldr	r2, [r7, #8]
 800c50c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c510:	78fa      	ldrb	r2, [r7, #3]
 800c512:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c514:	2300      	movs	r3, #0
}
 800c516:	4618      	mov	r0, r3
 800c518:	3710      	adds	r7, #16
 800c51a:	46bd      	mov	sp, r7
 800c51c:	bd80      	pop	{r7, pc}

0800c51e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c51e:	b580      	push	{r7, lr}
 800c520:	b084      	sub	sp, #16
 800c522:	af00      	add	r7, sp, #0
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	460b      	mov	r3, r1
 800c528:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	32b0      	adds	r2, #176	@ 0xb0
 800c534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c538:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	32b0      	adds	r2, #176	@ 0xb0
 800c544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d101      	bne.n	800c550 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c54c:	2303      	movs	r3, #3
 800c54e:	e01a      	b.n	800c586 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c550:	78fb      	ldrb	r3, [r7, #3]
 800c552:	4619      	mov	r1, r3
 800c554:	6878      	ldr	r0, [r7, #4]
 800c556:	f002 fa22 	bl	800e99e <USBD_LL_GetRxDataSize>
 800c55a:	4602      	mov	r2, r0
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	33b0      	adds	r3, #176	@ 0xb0
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	4413      	add	r3, r2
 800c570:	685b      	ldr	r3, [r3, #4]
 800c572:	68db      	ldr	r3, [r3, #12]
 800c574:	68fa      	ldr	r2, [r7, #12]
 800c576:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c57a:	68fa      	ldr	r2, [r7, #12]
 800c57c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c580:	4611      	mov	r1, r2
 800c582:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c584:	2300      	movs	r3, #0
}
 800c586:	4618      	mov	r0, r3
 800c588:	3710      	adds	r7, #16
 800c58a:	46bd      	mov	sp, r7
 800c58c:	bd80      	pop	{r7, pc}

0800c58e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c58e:	b580      	push	{r7, lr}
 800c590:	b084      	sub	sp, #16
 800c592:	af00      	add	r7, sp, #0
 800c594:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	32b0      	adds	r2, #176	@ 0xb0
 800c5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d101      	bne.n	800c5b0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c5ac:	2303      	movs	r3, #3
 800c5ae:	e024      	b.n	800c5fa <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	33b0      	adds	r3, #176	@ 0xb0
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	4413      	add	r3, r2
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d019      	beq.n	800c5f8 <USBD_CDC_EP0_RxReady+0x6a>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c5ca:	2bff      	cmp	r3, #255	@ 0xff
 800c5cc:	d014      	beq.n	800c5f8 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5d4:	687a      	ldr	r2, [r7, #4]
 800c5d6:	33b0      	adds	r3, #176	@ 0xb0
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	685b      	ldr	r3, [r3, #4]
 800c5de:	689b      	ldr	r3, [r3, #8]
 800c5e0:	68fa      	ldr	r2, [r7, #12]
 800c5e2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c5e6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c5e8:	68fa      	ldr	r2, [r7, #12]
 800c5ea:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5ee:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c5f0:	68fb      	ldr	r3, [r7, #12]
 800c5f2:	22ff      	movs	r2, #255	@ 0xff
 800c5f4:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c5f8:	2300      	movs	r3, #0
}
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	3710      	adds	r7, #16
 800c5fe:	46bd      	mov	sp, r7
 800c600:	bd80      	pop	{r7, pc}
	...

0800c604 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c60c:	2182      	movs	r1, #130	@ 0x82
 800c60e:	4818      	ldr	r0, [pc, #96]	@ (800c670 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c610:	f000 fd62 	bl	800d0d8 <USBD_GetEpDesc>
 800c614:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c616:	2101      	movs	r1, #1
 800c618:	4815      	ldr	r0, [pc, #84]	@ (800c670 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c61a:	f000 fd5d 	bl	800d0d8 <USBD_GetEpDesc>
 800c61e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c620:	2181      	movs	r1, #129	@ 0x81
 800c622:	4813      	ldr	r0, [pc, #76]	@ (800c670 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c624:	f000 fd58 	bl	800d0d8 <USBD_GetEpDesc>
 800c628:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d002      	beq.n	800c636 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c630:	697b      	ldr	r3, [r7, #20]
 800c632:	2210      	movs	r2, #16
 800c634:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d006      	beq.n	800c64a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c63c:	693b      	ldr	r3, [r7, #16]
 800c63e:	2200      	movs	r2, #0
 800c640:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c644:	711a      	strb	r2, [r3, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d006      	beq.n	800c65e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2200      	movs	r2, #0
 800c654:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c658:	711a      	strb	r2, [r3, #4]
 800c65a:	2200      	movs	r2, #0
 800c65c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2243      	movs	r2, #67	@ 0x43
 800c662:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c664:	4b02      	ldr	r3, [pc, #8]	@ (800c670 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c666:	4618      	mov	r0, r3
 800c668:	3718      	adds	r7, #24
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}
 800c66e:	bf00      	nop
 800c670:	20000080 	.word	0x20000080

0800c674 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b086      	sub	sp, #24
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c67c:	2182      	movs	r1, #130	@ 0x82
 800c67e:	4818      	ldr	r0, [pc, #96]	@ (800c6e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c680:	f000 fd2a 	bl	800d0d8 <USBD_GetEpDesc>
 800c684:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c686:	2101      	movs	r1, #1
 800c688:	4815      	ldr	r0, [pc, #84]	@ (800c6e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c68a:	f000 fd25 	bl	800d0d8 <USBD_GetEpDesc>
 800c68e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c690:	2181      	movs	r1, #129	@ 0x81
 800c692:	4813      	ldr	r0, [pc, #76]	@ (800c6e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c694:	f000 fd20 	bl	800d0d8 <USBD_GetEpDesc>
 800c698:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c69a:	697b      	ldr	r3, [r7, #20]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d002      	beq.n	800c6a6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	2210      	movs	r2, #16
 800c6a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d006      	beq.n	800c6ba <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	711a      	strb	r2, [r3, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	f042 0202 	orr.w	r2, r2, #2
 800c6b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d006      	beq.n	800c6ce <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	711a      	strb	r2, [r3, #4]
 800c6c6:	2200      	movs	r2, #0
 800c6c8:	f042 0202 	orr.w	r2, r2, #2
 800c6cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	2243      	movs	r2, #67	@ 0x43
 800c6d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c6d4:	4b02      	ldr	r3, [pc, #8]	@ (800c6e0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3718      	adds	r7, #24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	20000080 	.word	0x20000080

0800c6e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b086      	sub	sp, #24
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c6ec:	2182      	movs	r1, #130	@ 0x82
 800c6ee:	4818      	ldr	r0, [pc, #96]	@ (800c750 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6f0:	f000 fcf2 	bl	800d0d8 <USBD_GetEpDesc>
 800c6f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c6f6:	2101      	movs	r1, #1
 800c6f8:	4815      	ldr	r0, [pc, #84]	@ (800c750 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c6fa:	f000 fced 	bl	800d0d8 <USBD_GetEpDesc>
 800c6fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c700:	2181      	movs	r1, #129	@ 0x81
 800c702:	4813      	ldr	r0, [pc, #76]	@ (800c750 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c704:	f000 fce8 	bl	800d0d8 <USBD_GetEpDesc>
 800c708:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c70a:	697b      	ldr	r3, [r7, #20]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d002      	beq.n	800c716 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	2210      	movs	r2, #16
 800c714:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d006      	beq.n	800c72a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	2200      	movs	r2, #0
 800c720:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c724:	711a      	strb	r2, [r3, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d006      	beq.n	800c73e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	2200      	movs	r2, #0
 800c734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c738:	711a      	strb	r2, [r3, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	2243      	movs	r2, #67	@ 0x43
 800c742:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c744:	4b02      	ldr	r3, [pc, #8]	@ (800c750 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c746:	4618      	mov	r0, r3
 800c748:	3718      	adds	r7, #24
 800c74a:	46bd      	mov	sp, r7
 800c74c:	bd80      	pop	{r7, pc}
 800c74e:	bf00      	nop
 800c750:	20000080 	.word	0x20000080

0800c754 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c754:	b480      	push	{r7}
 800c756:	b083      	sub	sp, #12
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	220a      	movs	r2, #10
 800c760:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c762:	4b03      	ldr	r3, [pc, #12]	@ (800c770 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c764:	4618      	mov	r0, r3
 800c766:	370c      	adds	r7, #12
 800c768:	46bd      	mov	sp, r7
 800c76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76e:	4770      	bx	lr
 800c770:	2000003c 	.word	0x2000003c

0800c774 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c774:	b480      	push	{r7}
 800c776:	b083      	sub	sp, #12
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d101      	bne.n	800c788 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c784:	2303      	movs	r3, #3
 800c786:	e009      	b.n	800c79c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	33b0      	adds	r3, #176	@ 0xb0
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	4413      	add	r3, r2
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	370c      	adds	r7, #12
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a6:	4770      	bx	lr

0800c7a8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c7a8:	b480      	push	{r7}
 800c7aa:	b087      	sub	sp, #28
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	60f8      	str	r0, [r7, #12]
 800c7b0:	60b9      	str	r1, [r7, #8]
 800c7b2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	32b0      	adds	r2, #176	@ 0xb0
 800c7be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d101      	bne.n	800c7ce <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c7ca:	2303      	movs	r3, #3
 800c7cc:	e008      	b.n	800c7e0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c7ce:	697b      	ldr	r3, [r7, #20]
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c7d6:	697b      	ldr	r3, [r7, #20]
 800c7d8:	687a      	ldr	r2, [r7, #4]
 800c7da:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c7de:	2300      	movs	r3, #0
}
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	371c      	adds	r7, #28
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr

0800c7ec <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c7ec:	b480      	push	{r7}
 800c7ee:	b085      	sub	sp, #20
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
 800c7f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	32b0      	adds	r2, #176	@ 0xb0
 800c800:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c804:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d101      	bne.n	800c810 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c80c:	2303      	movs	r3, #3
 800c80e:	e004      	b.n	800c81a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	683a      	ldr	r2, [r7, #0]
 800c814:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
	...

0800c828 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b084      	sub	sp, #16
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	32b0      	adds	r2, #176	@ 0xb0
 800c83a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c83e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c840:	2301      	movs	r3, #1
 800c842:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	2b00      	cmp	r3, #0
 800c848:	d101      	bne.n	800c84e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c84a:	2303      	movs	r3, #3
 800c84c:	e025      	b.n	800c89a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c854:	2b00      	cmp	r3, #0
 800c856:	d11f      	bne.n	800c898 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c860:	4b10      	ldr	r3, [pc, #64]	@ (800c8a4 <USBD_CDC_TransmitPacket+0x7c>)
 800c862:	781b      	ldrb	r3, [r3, #0]
 800c864:	f003 020f 	and.w	r2, r3, #15
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	4613      	mov	r3, r2
 800c872:	009b      	lsls	r3, r3, #2
 800c874:	4413      	add	r3, r2
 800c876:	009b      	lsls	r3, r3, #2
 800c878:	4403      	add	r3, r0
 800c87a:	3314      	adds	r3, #20
 800c87c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c87e:	4b09      	ldr	r3, [pc, #36]	@ (800c8a4 <USBD_CDC_TransmitPacket+0x7c>)
 800c880:	7819      	ldrb	r1, [r3, #0]
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c888:	68bb      	ldr	r3, [r7, #8]
 800c88a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f002 f843 	bl	800e91a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c894:	2300      	movs	r3, #0
 800c896:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c898:	7bfb      	ldrb	r3, [r7, #15]
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	200000c3 	.word	0x200000c3

0800c8a8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	b084      	sub	sp, #16
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	32b0      	adds	r2, #176	@ 0xb0
 800c8ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8be:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	32b0      	adds	r2, #176	@ 0xb0
 800c8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d101      	bne.n	800c8d6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c8d2:	2303      	movs	r3, #3
 800c8d4:	e018      	b.n	800c908 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	7c1b      	ldrb	r3, [r3, #16]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d10a      	bne.n	800c8f4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8de:	4b0c      	ldr	r3, [pc, #48]	@ (800c910 <USBD_CDC_ReceivePacket+0x68>)
 800c8e0:	7819      	ldrb	r1, [r3, #0]
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c8ec:	6878      	ldr	r0, [r7, #4]
 800c8ee:	f002 f835 	bl	800e95c <USBD_LL_PrepareReceive>
 800c8f2:	e008      	b.n	800c906 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8f4:	4b06      	ldr	r3, [pc, #24]	@ (800c910 <USBD_CDC_ReceivePacket+0x68>)
 800c8f6:	7819      	ldrb	r1, [r3, #0]
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8fe:	2340      	movs	r3, #64	@ 0x40
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	f002 f82b 	bl	800e95c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c906:	2300      	movs	r3, #0
}
 800c908:	4618      	mov	r0, r3
 800c90a:	3710      	adds	r7, #16
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	200000c4 	.word	0x200000c4

0800c914 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	4613      	mov	r3, r2
 800c920:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d101      	bne.n	800c92c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c928:	2303      	movs	r3, #3
 800c92a:	e01f      	b.n	800c96c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	2200      	movs	r2, #0
 800c938:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2200      	movs	r2, #0
 800c940:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c944:	68bb      	ldr	r3, [r7, #8]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d003      	beq.n	800c952 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c94a:	68fb      	ldr	r3, [r7, #12]
 800c94c:	68ba      	ldr	r2, [r7, #8]
 800c94e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	2201      	movs	r2, #1
 800c956:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	79fa      	ldrb	r2, [r7, #7]
 800c95e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c960:	68f8      	ldr	r0, [r7, #12]
 800c962:	f001 fea5 	bl	800e6b0 <USBD_LL_Init>
 800c966:	4603      	mov	r3, r0
 800c968:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c96a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c96c:	4618      	mov	r0, r3
 800c96e:	3718      	adds	r7, #24
 800c970:	46bd      	mov	sp, r7
 800c972:	bd80      	pop	{r7, pc}

0800c974 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b084      	sub	sp, #16
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
 800c97c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c97e:	2300      	movs	r3, #0
 800c980:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d101      	bne.n	800c98c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c988:	2303      	movs	r3, #3
 800c98a:	e025      	b.n	800c9d8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	683a      	ldr	r2, [r7, #0]
 800c990:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	32ae      	adds	r2, #174	@ 0xae
 800c99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d00f      	beq.n	800c9c8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	32ae      	adds	r2, #174	@ 0xae
 800c9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b8:	f107 020e 	add.w	r2, r7, #14
 800c9bc:	4610      	mov	r0, r2
 800c9be:	4798      	blx	r3
 800c9c0:	4602      	mov	r2, r0
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9ce:	1c5a      	adds	r2, r3, #1
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c9d6:	2300      	movs	r3, #0
}
 800c9d8:	4618      	mov	r0, r3
 800c9da:	3710      	adds	r7, #16
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b082      	sub	sp, #8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c9e8:	6878      	ldr	r0, [r7, #4]
 800c9ea:	f001 fead 	bl	800e748 <USBD_LL_Start>
 800c9ee:	4603      	mov	r3, r0
}
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	3708      	adds	r7, #8
 800c9f4:	46bd      	mov	sp, r7
 800c9f6:	bd80      	pop	{r7, pc}

0800c9f8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c9f8:	b480      	push	{r7}
 800c9fa:	b083      	sub	sp, #12
 800c9fc:	af00      	add	r7, sp, #0
 800c9fe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca00:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	370c      	adds	r7, #12
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca0e:	b580      	push	{r7, lr}
 800ca10:	b084      	sub	sp, #16
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	6078      	str	r0, [r7, #4]
 800ca16:	460b      	mov	r3, r1
 800ca18:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d009      	beq.n	800ca3c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	78fa      	ldrb	r2, [r7, #3]
 800ca32:	4611      	mov	r1, r2
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	4798      	blx	r3
 800ca38:	4603      	mov	r3, r0
 800ca3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca3e:	4618      	mov	r0, r3
 800ca40:	3710      	adds	r7, #16
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b084      	sub	sp, #16
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
 800ca4e:	460b      	mov	r3, r1
 800ca50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca52:	2300      	movs	r3, #0
 800ca54:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	78fa      	ldrb	r2, [r7, #3]
 800ca60:	4611      	mov	r1, r2
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	4798      	blx	r3
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d001      	beq.n	800ca70 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ca6c:	2303      	movs	r3, #3
 800ca6e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3710      	adds	r7, #16
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b084      	sub	sp, #16
 800ca7e:	af00      	add	r7, sp, #0
 800ca80:	6078      	str	r0, [r7, #4]
 800ca82:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ca8a:	6839      	ldr	r1, [r7, #0]
 800ca8c:	4618      	mov	r0, r3
 800ca8e:	f001 f922 	bl	800dcd6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	2201      	movs	r2, #1
 800ca96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800caa0:	461a      	mov	r2, r3
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800caae:	f003 031f 	and.w	r3, r3, #31
 800cab2:	2b02      	cmp	r3, #2
 800cab4:	d01a      	beq.n	800caec <USBD_LL_SetupStage+0x72>
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d822      	bhi.n	800cb00 <USBD_LL_SetupStage+0x86>
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d002      	beq.n	800cac4 <USBD_LL_SetupStage+0x4a>
 800cabe:	2b01      	cmp	r3, #1
 800cac0:	d00a      	beq.n	800cad8 <USBD_LL_SetupStage+0x5e>
 800cac2:	e01d      	b.n	800cb00 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800caca:	4619      	mov	r1, r3
 800cacc:	6878      	ldr	r0, [r7, #4]
 800cace:	f000 fb77 	bl	800d1c0 <USBD_StdDevReq>
 800cad2:	4603      	mov	r3, r0
 800cad4:	73fb      	strb	r3, [r7, #15]
      break;
 800cad6:	e020      	b.n	800cb1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cade:	4619      	mov	r1, r3
 800cae0:	6878      	ldr	r0, [r7, #4]
 800cae2:	f000 fbdf 	bl	800d2a4 <USBD_StdItfReq>
 800cae6:	4603      	mov	r3, r0
 800cae8:	73fb      	strb	r3, [r7, #15]
      break;
 800caea:	e016      	b.n	800cb1a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800caf2:	4619      	mov	r1, r3
 800caf4:	6878      	ldr	r0, [r7, #4]
 800caf6:	f000 fc41 	bl	800d37c <USBD_StdEPReq>
 800cafa:	4603      	mov	r3, r0
 800cafc:	73fb      	strb	r3, [r7, #15]
      break;
 800cafe:	e00c      	b.n	800cb1a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cb06:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb0a:	b2db      	uxtb	r3, r3
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f001 fe7a 	bl	800e808 <USBD_LL_StallEP>
 800cb14:	4603      	mov	r3, r0
 800cb16:	73fb      	strb	r3, [r7, #15]
      break;
 800cb18:	bf00      	nop
  }

  return ret;
 800cb1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1c:	4618      	mov	r0, r3
 800cb1e:	3710      	adds	r7, #16
 800cb20:	46bd      	mov	sp, r7
 800cb22:	bd80      	pop	{r7, pc}

0800cb24 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb24:	b580      	push	{r7, lr}
 800cb26:	b086      	sub	sp, #24
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	60f8      	str	r0, [r7, #12]
 800cb2c:	460b      	mov	r3, r1
 800cb2e:	607a      	str	r2, [r7, #4]
 800cb30:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb32:	2300      	movs	r3, #0
 800cb34:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800cb36:	7afb      	ldrb	r3, [r7, #11]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d177      	bne.n	800cc2c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cb42:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cb4a:	2b03      	cmp	r3, #3
 800cb4c:	f040 80a1 	bne.w	800cc92 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb50:	693b      	ldr	r3, [r7, #16]
 800cb52:	685b      	ldr	r3, [r3, #4]
 800cb54:	693a      	ldr	r2, [r7, #16]
 800cb56:	8992      	ldrh	r2, [r2, #12]
 800cb58:	4293      	cmp	r3, r2
 800cb5a:	d91c      	bls.n	800cb96 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800cb5c:	693b      	ldr	r3, [r7, #16]
 800cb5e:	685b      	ldr	r3, [r3, #4]
 800cb60:	693a      	ldr	r2, [r7, #16]
 800cb62:	8992      	ldrh	r2, [r2, #12]
 800cb64:	1a9a      	subs	r2, r3, r2
 800cb66:	693b      	ldr	r3, [r7, #16]
 800cb68:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800cb6a:	693b      	ldr	r3, [r7, #16]
 800cb6c:	691b      	ldr	r3, [r3, #16]
 800cb6e:	693a      	ldr	r2, [r7, #16]
 800cb70:	8992      	ldrh	r2, [r2, #12]
 800cb72:	441a      	add	r2, r3
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800cb78:	693b      	ldr	r3, [r7, #16]
 800cb7a:	6919      	ldr	r1, [r3, #16]
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	899b      	ldrh	r3, [r3, #12]
 800cb80:	461a      	mov	r2, r3
 800cb82:	693b      	ldr	r3, [r7, #16]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	4293      	cmp	r3, r2
 800cb88:	bf38      	it	cc
 800cb8a:	4613      	movcc	r3, r2
 800cb8c:	461a      	mov	r2, r3
 800cb8e:	68f8      	ldr	r0, [r7, #12]
 800cb90:	f001 f9a8 	bl	800dee4 <USBD_CtlContinueRx>
 800cb94:	e07d      	b.n	800cc92 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cb9c:	f003 031f 	and.w	r3, r3, #31
 800cba0:	2b02      	cmp	r3, #2
 800cba2:	d014      	beq.n	800cbce <USBD_LL_DataOutStage+0xaa>
 800cba4:	2b02      	cmp	r3, #2
 800cba6:	d81d      	bhi.n	800cbe4 <USBD_LL_DataOutStage+0xc0>
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d002      	beq.n	800cbb2 <USBD_LL_DataOutStage+0x8e>
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d003      	beq.n	800cbb8 <USBD_LL_DataOutStage+0x94>
 800cbb0:	e018      	b.n	800cbe4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	75bb      	strb	r3, [r7, #22]
            break;
 800cbb6:	e018      	b.n	800cbea <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cbbe:	b2db      	uxtb	r3, r3
 800cbc0:	4619      	mov	r1, r3
 800cbc2:	68f8      	ldr	r0, [r7, #12]
 800cbc4:	f000 fa6e 	bl	800d0a4 <USBD_CoreFindIF>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	75bb      	strb	r3, [r7, #22]
            break;
 800cbcc:	e00d      	b.n	800cbea <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	68f8      	ldr	r0, [r7, #12]
 800cbda:	f000 fa70 	bl	800d0be <USBD_CoreFindEP>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	75bb      	strb	r3, [r7, #22]
            break;
 800cbe2:	e002      	b.n	800cbea <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cbe4:	2300      	movs	r3, #0
 800cbe6:	75bb      	strb	r3, [r7, #22]
            break;
 800cbe8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cbea:	7dbb      	ldrb	r3, [r7, #22]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d119      	bne.n	800cc24 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbf6:	b2db      	uxtb	r3, r3
 800cbf8:	2b03      	cmp	r3, #3
 800cbfa:	d113      	bne.n	800cc24 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cbfc:	7dba      	ldrb	r2, [r7, #22]
 800cbfe:	68fb      	ldr	r3, [r7, #12]
 800cc00:	32ae      	adds	r2, #174	@ 0xae
 800cc02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc06:	691b      	ldr	r3, [r3, #16]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00b      	beq.n	800cc24 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800cc0c:	7dba      	ldrb	r2, [r7, #22]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cc14:	7dba      	ldrb	r2, [r7, #22]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	32ae      	adds	r2, #174	@ 0xae
 800cc1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	68f8      	ldr	r0, [r7, #12]
 800cc22:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cc24:	68f8      	ldr	r0, [r7, #12]
 800cc26:	f001 f96e 	bl	800df06 <USBD_CtlSendStatus>
 800cc2a:	e032      	b.n	800cc92 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cc2c:	7afb      	ldrb	r3, [r7, #11]
 800cc2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc32:	b2db      	uxtb	r3, r3
 800cc34:	4619      	mov	r1, r3
 800cc36:	68f8      	ldr	r0, [r7, #12]
 800cc38:	f000 fa41 	bl	800d0be <USBD_CoreFindEP>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc40:	7dbb      	ldrb	r3, [r7, #22]
 800cc42:	2bff      	cmp	r3, #255	@ 0xff
 800cc44:	d025      	beq.n	800cc92 <USBD_LL_DataOutStage+0x16e>
 800cc46:	7dbb      	ldrb	r3, [r7, #22]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	d122      	bne.n	800cc92 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	2b03      	cmp	r3, #3
 800cc56:	d117      	bne.n	800cc88 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cc58:	7dba      	ldrb	r2, [r7, #22]
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	32ae      	adds	r2, #174	@ 0xae
 800cc5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc62:	699b      	ldr	r3, [r3, #24]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00f      	beq.n	800cc88 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800cc68:	7dba      	ldrb	r2, [r7, #22]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cc70:	7dba      	ldrb	r2, [r7, #22]
 800cc72:	68fb      	ldr	r3, [r7, #12]
 800cc74:	32ae      	adds	r2, #174	@ 0xae
 800cc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc7a:	699b      	ldr	r3, [r3, #24]
 800cc7c:	7afa      	ldrb	r2, [r7, #11]
 800cc7e:	4611      	mov	r1, r2
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	4798      	blx	r3
 800cc84:	4603      	mov	r3, r0
 800cc86:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cc88:	7dfb      	ldrb	r3, [r7, #23]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d001      	beq.n	800cc92 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800cc8e:	7dfb      	ldrb	r3, [r7, #23]
 800cc90:	e000      	b.n	800cc94 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800cc92:	2300      	movs	r3, #0
}
 800cc94:	4618      	mov	r0, r3
 800cc96:	3718      	adds	r7, #24
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}

0800cc9c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b086      	sub	sp, #24
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	60f8      	str	r0, [r7, #12]
 800cca4:	460b      	mov	r3, r1
 800cca6:	607a      	str	r2, [r7, #4]
 800cca8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800ccaa:	7afb      	ldrb	r3, [r7, #11]
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d178      	bne.n	800cda2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	3314      	adds	r3, #20
 800ccb4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ccbc:	2b02      	cmp	r3, #2
 800ccbe:	d163      	bne.n	800cd88 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccc0:	693b      	ldr	r3, [r7, #16]
 800ccc2:	685b      	ldr	r3, [r3, #4]
 800ccc4:	693a      	ldr	r2, [r7, #16]
 800ccc6:	8992      	ldrh	r2, [r2, #12]
 800ccc8:	4293      	cmp	r3, r2
 800ccca:	d91c      	bls.n	800cd06 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	685b      	ldr	r3, [r3, #4]
 800ccd0:	693a      	ldr	r2, [r7, #16]
 800ccd2:	8992      	ldrh	r2, [r2, #12]
 800ccd4:	1a9a      	subs	r2, r3, r2
 800ccd6:	693b      	ldr	r3, [r7, #16]
 800ccd8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800ccda:	693b      	ldr	r3, [r7, #16]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	693a      	ldr	r2, [r7, #16]
 800cce0:	8992      	ldrh	r2, [r2, #12]
 800cce2:	441a      	add	r2, r3
 800cce4:	693b      	ldr	r3, [r7, #16]
 800cce6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	6919      	ldr	r1, [r3, #16]
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	685b      	ldr	r3, [r3, #4]
 800ccf0:	461a      	mov	r2, r3
 800ccf2:	68f8      	ldr	r0, [r7, #12]
 800ccf4:	f001 f8c4 	bl	800de80 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	2100      	movs	r1, #0
 800ccfe:	68f8      	ldr	r0, [r7, #12]
 800cd00:	f001 fe2c 	bl	800e95c <USBD_LL_PrepareReceive>
 800cd04:	e040      	b.n	800cd88 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	899b      	ldrh	r3, [r3, #12]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	429a      	cmp	r2, r3
 800cd12:	d11c      	bne.n	800cd4e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800cd14:	693b      	ldr	r3, [r7, #16]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	693a      	ldr	r2, [r7, #16]
 800cd1a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cd1c:	4293      	cmp	r3, r2
 800cd1e:	d316      	bcc.n	800cd4e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	681a      	ldr	r2, [r3, #0]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d20f      	bcs.n	800cd4e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd2e:	2200      	movs	r2, #0
 800cd30:	2100      	movs	r1, #0
 800cd32:	68f8      	ldr	r0, [r7, #12]
 800cd34:	f001 f8a4 	bl	800de80 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd38:	68fb      	ldr	r3, [r7, #12]
 800cd3a:	2200      	movs	r2, #0
 800cd3c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd40:	2300      	movs	r3, #0
 800cd42:	2200      	movs	r2, #0
 800cd44:	2100      	movs	r1, #0
 800cd46:	68f8      	ldr	r0, [r7, #12]
 800cd48:	f001 fe08 	bl	800e95c <USBD_LL_PrepareReceive>
 800cd4c:	e01c      	b.n	800cd88 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	d10f      	bne.n	800cd7a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd60:	68db      	ldr	r3, [r3, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d009      	beq.n	800cd7a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd74:	68db      	ldr	r3, [r3, #12]
 800cd76:	68f8      	ldr	r0, [r7, #12]
 800cd78:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd7a:	2180      	movs	r1, #128	@ 0x80
 800cd7c:	68f8      	ldr	r0, [r7, #12]
 800cd7e:	f001 fd43 	bl	800e808 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cd82:	68f8      	ldr	r0, [r7, #12]
 800cd84:	f001 f8d2 	bl	800df2c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cd88:	68fb      	ldr	r3, [r7, #12]
 800cd8a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d03a      	beq.n	800ce08 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f7ff fe30 	bl	800c9f8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cda0:	e032      	b.n	800ce08 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cda2:	7afb      	ldrb	r3, [r7, #11]
 800cda4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	4619      	mov	r1, r3
 800cdac:	68f8      	ldr	r0, [r7, #12]
 800cdae:	f000 f986 	bl	800d0be <USBD_CoreFindEP>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdb6:	7dfb      	ldrb	r3, [r7, #23]
 800cdb8:	2bff      	cmp	r3, #255	@ 0xff
 800cdba:	d025      	beq.n	800ce08 <USBD_LL_DataInStage+0x16c>
 800cdbc:	7dfb      	ldrb	r3, [r7, #23]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d122      	bne.n	800ce08 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdc8:	b2db      	uxtb	r3, r3
 800cdca:	2b03      	cmp	r3, #3
 800cdcc:	d11c      	bne.n	800ce08 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cdce:	7dfa      	ldrb	r2, [r7, #23]
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	32ae      	adds	r2, #174	@ 0xae
 800cdd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd8:	695b      	ldr	r3, [r3, #20]
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d014      	beq.n	800ce08 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800cdde:	7dfa      	ldrb	r2, [r7, #23]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cde6:	7dfa      	ldrb	r2, [r7, #23]
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	32ae      	adds	r2, #174	@ 0xae
 800cdec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	7afa      	ldrb	r2, [r7, #11]
 800cdf4:	4611      	mov	r1, r2
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	4798      	blx	r3
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cdfe:	7dbb      	ldrb	r3, [r7, #22]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d001      	beq.n	800ce08 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800ce04:	7dbb      	ldrb	r3, [r7, #22]
 800ce06:	e000      	b.n	800ce0a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800ce08:	2300      	movs	r3, #0
}
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	3718      	adds	r7, #24
 800ce0e:	46bd      	mov	sp, r7
 800ce10:	bd80      	pop	{r7, pc}

0800ce12 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce12:	b580      	push	{r7, lr}
 800ce14:	b084      	sub	sp, #16
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	2201      	movs	r2, #1
 800ce22:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	2200      	movs	r2, #0
 800ce2a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2200      	movs	r2, #0
 800ce32:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d014      	beq.n	800ce78 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce54:	685b      	ldr	r3, [r3, #4]
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d00e      	beq.n	800ce78 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce60:	685b      	ldr	r3, [r3, #4]
 800ce62:	687a      	ldr	r2, [r7, #4]
 800ce64:	6852      	ldr	r2, [r2, #4]
 800ce66:	b2d2      	uxtb	r2, r2
 800ce68:	4611      	mov	r1, r2
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	4798      	blx	r3
 800ce6e:	4603      	mov	r3, r0
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d001      	beq.n	800ce78 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ce74:	2303      	movs	r3, #3
 800ce76:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce78:	2340      	movs	r3, #64	@ 0x40
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f001 fc7d 	bl	800e77e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	2201      	movs	r2, #1
 800ce88:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	2240      	movs	r2, #64	@ 0x40
 800ce90:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce94:	2340      	movs	r3, #64	@ 0x40
 800ce96:	2200      	movs	r2, #0
 800ce98:	2180      	movs	r1, #128	@ 0x80
 800ce9a:	6878      	ldr	r0, [r7, #4]
 800ce9c:	f001 fc6f 	bl	800e77e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2201      	movs	r2, #1
 800cea4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2240      	movs	r2, #64	@ 0x40
 800ceac:	841a      	strh	r2, [r3, #32]

  return ret;
 800ceae:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}

0800ceb8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	460b      	mov	r3, r1
 800cec2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	78fa      	ldrb	r2, [r7, #3]
 800cec8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ceca:	2300      	movs	r3, #0
}
 800cecc:	4618      	mov	r0, r3
 800cece:	370c      	adds	r7, #12
 800ced0:	46bd      	mov	sp, r7
 800ced2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced6:	4770      	bx	lr

0800ced8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ced8:	b480      	push	{r7}
 800ceda:	b083      	sub	sp, #12
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cee6:	b2db      	uxtb	r3, r3
 800cee8:	2b04      	cmp	r3, #4
 800ceea:	d006      	beq.n	800cefa <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cef2:	b2da      	uxtb	r2, r3
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	2204      	movs	r2, #4
 800cefe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cf02:	2300      	movs	r3, #0
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	2b04      	cmp	r3, #4
 800cf22:	d106      	bne.n	800cf32 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cf32:	2300      	movs	r3, #0
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	370c      	adds	r7, #12
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr

0800cf40 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf4e:	b2db      	uxtb	r3, r3
 800cf50:	2b03      	cmp	r3, #3
 800cf52:	d110      	bne.n	800cf76 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00b      	beq.n	800cf76 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf64:	69db      	ldr	r3, [r3, #28]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d005      	beq.n	800cf76 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf70:	69db      	ldr	r3, [r3, #28]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cf80:	b580      	push	{r7, lr}
 800cf82:	b082      	sub	sp, #8
 800cf84:	af00      	add	r7, sp, #0
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	460b      	mov	r3, r1
 800cf8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	32ae      	adds	r2, #174	@ 0xae
 800cf96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d101      	bne.n	800cfa2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cf9e:	2303      	movs	r3, #3
 800cfa0:	e01c      	b.n	800cfdc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	2b03      	cmp	r3, #3
 800cfac:	d115      	bne.n	800cfda <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	32ae      	adds	r2, #174	@ 0xae
 800cfb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfbc:	6a1b      	ldr	r3, [r3, #32]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d00b      	beq.n	800cfda <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	32ae      	adds	r2, #174	@ 0xae
 800cfcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfd0:	6a1b      	ldr	r3, [r3, #32]
 800cfd2:	78fa      	ldrb	r2, [r7, #3]
 800cfd4:	4611      	mov	r1, r2
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3708      	adds	r7, #8
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}

0800cfe4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
 800cfec:	460b      	mov	r3, r1
 800cfee:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	32ae      	adds	r2, #174	@ 0xae
 800cffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d101      	bne.n	800d006 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d002:	2303      	movs	r3, #3
 800d004:	e01c      	b.n	800d040 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d115      	bne.n	800d03e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	32ae      	adds	r2, #174	@ 0xae
 800d01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d022:	2b00      	cmp	r3, #0
 800d024:	d00b      	beq.n	800d03e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	32ae      	adds	r2, #174	@ 0xae
 800d030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d036:	78fa      	ldrb	r2, [r7, #3]
 800d038:	4611      	mov	r1, r2
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d03e:	2300      	movs	r3, #0
}
 800d040:	4618      	mov	r0, r3
 800d042:	3708      	adds	r7, #8
 800d044:	46bd      	mov	sp, r7
 800d046:	bd80      	pop	{r7, pc}

0800d048 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d048:	b480      	push	{r7}
 800d04a:	b083      	sub	sp, #12
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d050:	2300      	movs	r3, #0
}
 800d052:	4618      	mov	r0, r3
 800d054:	370c      	adds	r7, #12
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr

0800d05e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d05e:	b580      	push	{r7, lr}
 800d060:	b084      	sub	sp, #16
 800d062:	af00      	add	r7, sp, #0
 800d064:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d066:	2300      	movs	r3, #0
 800d068:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	2201      	movs	r2, #1
 800d06e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d00e      	beq.n	800d09a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d07c:	687b      	ldr	r3, [r7, #4]
 800d07e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d082:	685b      	ldr	r3, [r3, #4]
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	6852      	ldr	r2, [r2, #4]
 800d088:	b2d2      	uxtb	r2, r2
 800d08a:	4611      	mov	r1, r2
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	4798      	blx	r3
 800d090:	4603      	mov	r3, r0
 800d092:	2b00      	cmp	r3, #0
 800d094:	d001      	beq.n	800d09a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d096:	2303      	movs	r3, #3
 800d098:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d09a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3710      	adds	r7, #16
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	bd80      	pop	{r7, pc}

0800d0a4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0a4:	b480      	push	{r7}
 800d0a6:	b083      	sub	sp, #12
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
 800d0ac:	460b      	mov	r3, r1
 800d0ae:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0b0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0b2:	4618      	mov	r0, r3
 800d0b4:	370c      	adds	r7, #12
 800d0b6:	46bd      	mov	sp, r7
 800d0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0bc:	4770      	bx	lr

0800d0be <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0be:	b480      	push	{r7}
 800d0c0:	b083      	sub	sp, #12
 800d0c2:	af00      	add	r7, sp, #0
 800d0c4:	6078      	str	r0, [r7, #4]
 800d0c6:	460b      	mov	r3, r1
 800d0c8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0ca:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	370c      	adds	r7, #12
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d6:	4770      	bx	lr

0800d0d8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b086      	sub	sp, #24
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
 800d0e0:	460b      	mov	r3, r1
 800d0e2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	885b      	ldrh	r3, [r3, #2]
 800d0f4:	b29b      	uxth	r3, r3
 800d0f6:	68fa      	ldr	r2, [r7, #12]
 800d0f8:	7812      	ldrb	r2, [r2, #0]
 800d0fa:	4293      	cmp	r3, r2
 800d0fc:	d91f      	bls.n	800d13e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	781b      	ldrb	r3, [r3, #0]
 800d102:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d104:	e013      	b.n	800d12e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d106:	f107 030a 	add.w	r3, r7, #10
 800d10a:	4619      	mov	r1, r3
 800d10c:	6978      	ldr	r0, [r7, #20]
 800d10e:	f000 f81b 	bl	800d148 <USBD_GetNextDesc>
 800d112:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d114:	697b      	ldr	r3, [r7, #20]
 800d116:	785b      	ldrb	r3, [r3, #1]
 800d118:	2b05      	cmp	r3, #5
 800d11a:	d108      	bne.n	800d12e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	789b      	ldrb	r3, [r3, #2]
 800d124:	78fa      	ldrb	r2, [r7, #3]
 800d126:	429a      	cmp	r2, r3
 800d128:	d008      	beq.n	800d13c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d12a:	2300      	movs	r3, #0
 800d12c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	885b      	ldrh	r3, [r3, #2]
 800d132:	b29a      	uxth	r2, r3
 800d134:	897b      	ldrh	r3, [r7, #10]
 800d136:	429a      	cmp	r2, r3
 800d138:	d8e5      	bhi.n	800d106 <USBD_GetEpDesc+0x2e>
 800d13a:	e000      	b.n	800d13e <USBD_GetEpDesc+0x66>
          break;
 800d13c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d13e:	693b      	ldr	r3, [r7, #16]
}
 800d140:	4618      	mov	r0, r3
 800d142:	3718      	adds	r7, #24
 800d144:	46bd      	mov	sp, r7
 800d146:	bd80      	pop	{r7, pc}

0800d148 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d148:	b480      	push	{r7}
 800d14a:	b085      	sub	sp, #20
 800d14c:	af00      	add	r7, sp, #0
 800d14e:	6078      	str	r0, [r7, #4]
 800d150:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d156:	683b      	ldr	r3, [r7, #0]
 800d158:	881b      	ldrh	r3, [r3, #0]
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	7812      	ldrb	r2, [r2, #0]
 800d15e:	4413      	add	r3, r2
 800d160:	b29a      	uxth	r2, r3
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	781b      	ldrb	r3, [r3, #0]
 800d16a:	461a      	mov	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	4413      	add	r3, r2
 800d170:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d172:	68fb      	ldr	r3, [r7, #12]
}
 800d174:	4618      	mov	r0, r3
 800d176:	3714      	adds	r7, #20
 800d178:	46bd      	mov	sp, r7
 800d17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17e:	4770      	bx	lr

0800d180 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d180:	b480      	push	{r7}
 800d182:	b087      	sub	sp, #28
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	781b      	ldrb	r3, [r3, #0]
 800d190:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d192:	697b      	ldr	r3, [r7, #20]
 800d194:	3301      	adds	r3, #1
 800d196:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d19e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d1a2:	021b      	lsls	r3, r3, #8
 800d1a4:	b21a      	sxth	r2, r3
 800d1a6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d1aa:	4313      	orrs	r3, r2
 800d1ac:	b21b      	sxth	r3, r3
 800d1ae:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d1b0:	89fb      	ldrh	r3, [r7, #14]
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	371c      	adds	r7, #28
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr
	...

0800d1c0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	781b      	ldrb	r3, [r3, #0]
 800d1d2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1d6:	2b40      	cmp	r3, #64	@ 0x40
 800d1d8:	d005      	beq.n	800d1e6 <USBD_StdDevReq+0x26>
 800d1da:	2b40      	cmp	r3, #64	@ 0x40
 800d1dc:	d857      	bhi.n	800d28e <USBD_StdDevReq+0xce>
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d00f      	beq.n	800d202 <USBD_StdDevReq+0x42>
 800d1e2:	2b20      	cmp	r3, #32
 800d1e4:	d153      	bne.n	800d28e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	32ae      	adds	r2, #174	@ 0xae
 800d1f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	6839      	ldr	r1, [r7, #0]
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	4798      	blx	r3
 800d1fc:	4603      	mov	r3, r0
 800d1fe:	73fb      	strb	r3, [r7, #15]
      break;
 800d200:	e04a      	b.n	800d298 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	785b      	ldrb	r3, [r3, #1]
 800d206:	2b09      	cmp	r3, #9
 800d208:	d83b      	bhi.n	800d282 <USBD_StdDevReq+0xc2>
 800d20a:	a201      	add	r2, pc, #4	@ (adr r2, 800d210 <USBD_StdDevReq+0x50>)
 800d20c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d210:	0800d265 	.word	0x0800d265
 800d214:	0800d279 	.word	0x0800d279
 800d218:	0800d283 	.word	0x0800d283
 800d21c:	0800d26f 	.word	0x0800d26f
 800d220:	0800d283 	.word	0x0800d283
 800d224:	0800d243 	.word	0x0800d243
 800d228:	0800d239 	.word	0x0800d239
 800d22c:	0800d283 	.word	0x0800d283
 800d230:	0800d25b 	.word	0x0800d25b
 800d234:	0800d24d 	.word	0x0800d24d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 fa3e 	bl	800d6bc <USBD_GetDescriptor>
          break;
 800d240:	e024      	b.n	800d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d242:	6839      	ldr	r1, [r7, #0]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f000 fba3 	bl	800d990 <USBD_SetAddress>
          break;
 800d24a:	e01f      	b.n	800d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d24c:	6839      	ldr	r1, [r7, #0]
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 fbe2 	bl	800da18 <USBD_SetConfig>
 800d254:	4603      	mov	r3, r0
 800d256:	73fb      	strb	r3, [r7, #15]
          break;
 800d258:	e018      	b.n	800d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d25a:	6839      	ldr	r1, [r7, #0]
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f000 fc85 	bl	800db6c <USBD_GetConfig>
          break;
 800d262:	e013      	b.n	800d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 fcb6 	bl	800dbd8 <USBD_GetStatus>
          break;
 800d26c:	e00e      	b.n	800d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d26e:	6839      	ldr	r1, [r7, #0]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 fce5 	bl	800dc40 <USBD_SetFeature>
          break;
 800d276:	e009      	b.n	800d28c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d278:	6839      	ldr	r1, [r7, #0]
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 fd09 	bl	800dc92 <USBD_ClrFeature>
          break;
 800d280:	e004      	b.n	800d28c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d282:	6839      	ldr	r1, [r7, #0]
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f000 fd60 	bl	800dd4a <USBD_CtlError>
          break;
 800d28a:	bf00      	nop
      }
      break;
 800d28c:	e004      	b.n	800d298 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d28e:	6839      	ldr	r1, [r7, #0]
 800d290:	6878      	ldr	r0, [r7, #4]
 800d292:	f000 fd5a 	bl	800dd4a <USBD_CtlError>
      break;
 800d296:	bf00      	nop
  }

  return ret;
 800d298:	7bfb      	ldrb	r3, [r7, #15]
}
 800d29a:	4618      	mov	r0, r3
 800d29c:	3710      	adds	r7, #16
 800d29e:	46bd      	mov	sp, r7
 800d2a0:	bd80      	pop	{r7, pc}
 800d2a2:	bf00      	nop

0800d2a4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2ae:	2300      	movs	r3, #0
 800d2b0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	781b      	ldrb	r3, [r3, #0]
 800d2b6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d2ba:	2b40      	cmp	r3, #64	@ 0x40
 800d2bc:	d005      	beq.n	800d2ca <USBD_StdItfReq+0x26>
 800d2be:	2b40      	cmp	r3, #64	@ 0x40
 800d2c0:	d852      	bhi.n	800d368 <USBD_StdItfReq+0xc4>
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <USBD_StdItfReq+0x26>
 800d2c6:	2b20      	cmp	r3, #32
 800d2c8:	d14e      	bne.n	800d368 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2d0:	b2db      	uxtb	r3, r3
 800d2d2:	3b01      	subs	r3, #1
 800d2d4:	2b02      	cmp	r3, #2
 800d2d6:	d840      	bhi.n	800d35a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	889b      	ldrh	r3, [r3, #4]
 800d2dc:	b2db      	uxtb	r3, r3
 800d2de:	2b01      	cmp	r3, #1
 800d2e0:	d836      	bhi.n	800d350 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	889b      	ldrh	r3, [r3, #4]
 800d2e6:	b2db      	uxtb	r3, r3
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f7ff feda 	bl	800d0a4 <USBD_CoreFindIF>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2f4:	7bbb      	ldrb	r3, [r7, #14]
 800d2f6:	2bff      	cmp	r3, #255	@ 0xff
 800d2f8:	d01d      	beq.n	800d336 <USBD_StdItfReq+0x92>
 800d2fa:	7bbb      	ldrb	r3, [r7, #14]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d11a      	bne.n	800d336 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d300:	7bba      	ldrb	r2, [r7, #14]
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	32ae      	adds	r2, #174	@ 0xae
 800d306:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d30a:	689b      	ldr	r3, [r3, #8]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d00f      	beq.n	800d330 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d310:	7bba      	ldrb	r2, [r7, #14]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d318:	7bba      	ldrb	r2, [r7, #14]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	32ae      	adds	r2, #174	@ 0xae
 800d31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	6839      	ldr	r1, [r7, #0]
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	4798      	blx	r3
 800d32a:	4603      	mov	r3, r0
 800d32c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d32e:	e004      	b.n	800d33a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d330:	2303      	movs	r3, #3
 800d332:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d334:	e001      	b.n	800d33a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d336:	2303      	movs	r3, #3
 800d338:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	88db      	ldrh	r3, [r3, #6]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d110      	bne.n	800d364 <USBD_StdItfReq+0xc0>
 800d342:	7bfb      	ldrb	r3, [r7, #15]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10d      	bne.n	800d364 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	f000 fddc 	bl	800df06 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d34e:	e009      	b.n	800d364 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d350:	6839      	ldr	r1, [r7, #0]
 800d352:	6878      	ldr	r0, [r7, #4]
 800d354:	f000 fcf9 	bl	800dd4a <USBD_CtlError>
          break;
 800d358:	e004      	b.n	800d364 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d35a:	6839      	ldr	r1, [r7, #0]
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f000 fcf4 	bl	800dd4a <USBD_CtlError>
          break;
 800d362:	e000      	b.n	800d366 <USBD_StdItfReq+0xc2>
          break;
 800d364:	bf00      	nop
      }
      break;
 800d366:	e004      	b.n	800d372 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d368:	6839      	ldr	r1, [r7, #0]
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 fced 	bl	800dd4a <USBD_CtlError>
      break;
 800d370:	bf00      	nop
  }

  return ret;
 800d372:	7bfb      	ldrb	r3, [r7, #15]
}
 800d374:	4618      	mov	r0, r3
 800d376:	3710      	adds	r7, #16
 800d378:	46bd      	mov	sp, r7
 800d37a:	bd80      	pop	{r7, pc}

0800d37c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	889b      	ldrh	r3, [r3, #4]
 800d38e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d398:	2b40      	cmp	r3, #64	@ 0x40
 800d39a:	d007      	beq.n	800d3ac <USBD_StdEPReq+0x30>
 800d39c:	2b40      	cmp	r3, #64	@ 0x40
 800d39e:	f200 8181 	bhi.w	800d6a4 <USBD_StdEPReq+0x328>
 800d3a2:	2b00      	cmp	r3, #0
 800d3a4:	d02a      	beq.n	800d3fc <USBD_StdEPReq+0x80>
 800d3a6:	2b20      	cmp	r3, #32
 800d3a8:	f040 817c 	bne.w	800d6a4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d3ac:	7bbb      	ldrb	r3, [r7, #14]
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f7ff fe84 	bl	800d0be <USBD_CoreFindEP>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3ba:	7b7b      	ldrb	r3, [r7, #13]
 800d3bc:	2bff      	cmp	r3, #255	@ 0xff
 800d3be:	f000 8176 	beq.w	800d6ae <USBD_StdEPReq+0x332>
 800d3c2:	7b7b      	ldrb	r3, [r7, #13]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f040 8172 	bne.w	800d6ae <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800d3ca:	7b7a      	ldrb	r2, [r7, #13]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d3d2:	7b7a      	ldrb	r2, [r7, #13]
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	32ae      	adds	r2, #174	@ 0xae
 800d3d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	f000 8165 	beq.w	800d6ae <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d3e4:	7b7a      	ldrb	r2, [r7, #13]
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	32ae      	adds	r2, #174	@ 0xae
 800d3ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ee:	689b      	ldr	r3, [r3, #8]
 800d3f0:	6839      	ldr	r1, [r7, #0]
 800d3f2:	6878      	ldr	r0, [r7, #4]
 800d3f4:	4798      	blx	r3
 800d3f6:	4603      	mov	r3, r0
 800d3f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d3fa:	e158      	b.n	800d6ae <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d3fc:	683b      	ldr	r3, [r7, #0]
 800d3fe:	785b      	ldrb	r3, [r3, #1]
 800d400:	2b03      	cmp	r3, #3
 800d402:	d008      	beq.n	800d416 <USBD_StdEPReq+0x9a>
 800d404:	2b03      	cmp	r3, #3
 800d406:	f300 8147 	bgt.w	800d698 <USBD_StdEPReq+0x31c>
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	f000 809b 	beq.w	800d546 <USBD_StdEPReq+0x1ca>
 800d410:	2b01      	cmp	r3, #1
 800d412:	d03c      	beq.n	800d48e <USBD_StdEPReq+0x112>
 800d414:	e140      	b.n	800d698 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d41c:	b2db      	uxtb	r3, r3
 800d41e:	2b02      	cmp	r3, #2
 800d420:	d002      	beq.n	800d428 <USBD_StdEPReq+0xac>
 800d422:	2b03      	cmp	r3, #3
 800d424:	d016      	beq.n	800d454 <USBD_StdEPReq+0xd8>
 800d426:	e02c      	b.n	800d482 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d428:	7bbb      	ldrb	r3, [r7, #14]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d00d      	beq.n	800d44a <USBD_StdEPReq+0xce>
 800d42e:	7bbb      	ldrb	r3, [r7, #14]
 800d430:	2b80      	cmp	r3, #128	@ 0x80
 800d432:	d00a      	beq.n	800d44a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d434:	7bbb      	ldrb	r3, [r7, #14]
 800d436:	4619      	mov	r1, r3
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f001 f9e5 	bl	800e808 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d43e:	2180      	movs	r1, #128	@ 0x80
 800d440:	6878      	ldr	r0, [r7, #4]
 800d442:	f001 f9e1 	bl	800e808 <USBD_LL_StallEP>
 800d446:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d448:	e020      	b.n	800d48c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d44a:	6839      	ldr	r1, [r7, #0]
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f000 fc7c 	bl	800dd4a <USBD_CtlError>
              break;
 800d452:	e01b      	b.n	800d48c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	885b      	ldrh	r3, [r3, #2]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d10e      	bne.n	800d47a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d45c:	7bbb      	ldrb	r3, [r7, #14]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d00b      	beq.n	800d47a <USBD_StdEPReq+0xfe>
 800d462:	7bbb      	ldrb	r3, [r7, #14]
 800d464:	2b80      	cmp	r3, #128	@ 0x80
 800d466:	d008      	beq.n	800d47a <USBD_StdEPReq+0xfe>
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	88db      	ldrh	r3, [r3, #6]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d104      	bne.n	800d47a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d470:	7bbb      	ldrb	r3, [r7, #14]
 800d472:	4619      	mov	r1, r3
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f001 f9c7 	bl	800e808 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fd43 	bl	800df06 <USBD_CtlSendStatus>

              break;
 800d480:	e004      	b.n	800d48c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d482:	6839      	ldr	r1, [r7, #0]
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 fc60 	bl	800dd4a <USBD_CtlError>
              break;
 800d48a:	bf00      	nop
          }
          break;
 800d48c:	e109      	b.n	800d6a2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d494:	b2db      	uxtb	r3, r3
 800d496:	2b02      	cmp	r3, #2
 800d498:	d002      	beq.n	800d4a0 <USBD_StdEPReq+0x124>
 800d49a:	2b03      	cmp	r3, #3
 800d49c:	d016      	beq.n	800d4cc <USBD_StdEPReq+0x150>
 800d49e:	e04b      	b.n	800d538 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4a0:	7bbb      	ldrb	r3, [r7, #14]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d00d      	beq.n	800d4c2 <USBD_StdEPReq+0x146>
 800d4a6:	7bbb      	ldrb	r3, [r7, #14]
 800d4a8:	2b80      	cmp	r3, #128	@ 0x80
 800d4aa:	d00a      	beq.n	800d4c2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4ac:	7bbb      	ldrb	r3, [r7, #14]
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f001 f9a9 	bl	800e808 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4b6:	2180      	movs	r1, #128	@ 0x80
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f001 f9a5 	bl	800e808 <USBD_LL_StallEP>
 800d4be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4c0:	e040      	b.n	800d544 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d4c2:	6839      	ldr	r1, [r7, #0]
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	f000 fc40 	bl	800dd4a <USBD_CtlError>
              break;
 800d4ca:	e03b      	b.n	800d544 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	885b      	ldrh	r3, [r3, #2]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d136      	bne.n	800d542 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d4d4:	7bbb      	ldrb	r3, [r7, #14]
 800d4d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d004      	beq.n	800d4e8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d4de:	7bbb      	ldrb	r3, [r7, #14]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	6878      	ldr	r0, [r7, #4]
 800d4e4:	f001 f9af 	bl	800e846 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d4e8:	6878      	ldr	r0, [r7, #4]
 800d4ea:	f000 fd0c 	bl	800df06 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d4ee:	7bbb      	ldrb	r3, [r7, #14]
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7ff fde3 	bl	800d0be <USBD_CoreFindEP>
 800d4f8:	4603      	mov	r3, r0
 800d4fa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4fc:	7b7b      	ldrb	r3, [r7, #13]
 800d4fe:	2bff      	cmp	r3, #255	@ 0xff
 800d500:	d01f      	beq.n	800d542 <USBD_StdEPReq+0x1c6>
 800d502:	7b7b      	ldrb	r3, [r7, #13]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d11c      	bne.n	800d542 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d508:	7b7a      	ldrb	r2, [r7, #13]
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d510:	7b7a      	ldrb	r2, [r7, #13]
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	32ae      	adds	r2, #174	@ 0xae
 800d516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d51a:	689b      	ldr	r3, [r3, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d010      	beq.n	800d542 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d520:	7b7a      	ldrb	r2, [r7, #13]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	32ae      	adds	r2, #174	@ 0xae
 800d526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	6839      	ldr	r1, [r7, #0]
 800d52e:	6878      	ldr	r0, [r7, #4]
 800d530:	4798      	blx	r3
 800d532:	4603      	mov	r3, r0
 800d534:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d536:	e004      	b.n	800d542 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d538:	6839      	ldr	r1, [r7, #0]
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f000 fc05 	bl	800dd4a <USBD_CtlError>
              break;
 800d540:	e000      	b.n	800d544 <USBD_StdEPReq+0x1c8>
              break;
 800d542:	bf00      	nop
          }
          break;
 800d544:	e0ad      	b.n	800d6a2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d54c:	b2db      	uxtb	r3, r3
 800d54e:	2b02      	cmp	r3, #2
 800d550:	d002      	beq.n	800d558 <USBD_StdEPReq+0x1dc>
 800d552:	2b03      	cmp	r3, #3
 800d554:	d033      	beq.n	800d5be <USBD_StdEPReq+0x242>
 800d556:	e099      	b.n	800d68c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d558:	7bbb      	ldrb	r3, [r7, #14]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d007      	beq.n	800d56e <USBD_StdEPReq+0x1f2>
 800d55e:	7bbb      	ldrb	r3, [r7, #14]
 800d560:	2b80      	cmp	r3, #128	@ 0x80
 800d562:	d004      	beq.n	800d56e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d564:	6839      	ldr	r1, [r7, #0]
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f000 fbef 	bl	800dd4a <USBD_CtlError>
                break;
 800d56c:	e093      	b.n	800d696 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d56e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d572:	2b00      	cmp	r3, #0
 800d574:	da0b      	bge.n	800d58e <USBD_StdEPReq+0x212>
 800d576:	7bbb      	ldrb	r3, [r7, #14]
 800d578:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d57c:	4613      	mov	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	4413      	add	r3, r2
 800d582:	009b      	lsls	r3, r3, #2
 800d584:	3310      	adds	r3, #16
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	4413      	add	r3, r2
 800d58a:	3304      	adds	r3, #4
 800d58c:	e00b      	b.n	800d5a6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d58e:	7bbb      	ldrb	r3, [r7, #14]
 800d590:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d594:	4613      	mov	r3, r2
 800d596:	009b      	lsls	r3, r3, #2
 800d598:	4413      	add	r3, r2
 800d59a:	009b      	lsls	r3, r3, #2
 800d59c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	3304      	adds	r3, #4
 800d5a6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d5a8:	68bb      	ldr	r3, [r7, #8]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d5ae:	68bb      	ldr	r3, [r7, #8]
 800d5b0:	330e      	adds	r3, #14
 800d5b2:	2202      	movs	r2, #2
 800d5b4:	4619      	mov	r1, r3
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 fc44 	bl	800de44 <USBD_CtlSendData>
              break;
 800d5bc:	e06b      	b.n	800d696 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d5be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	da11      	bge.n	800d5ea <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d5c6:	7bbb      	ldrb	r3, [r7, #14]
 800d5c8:	f003 020f 	and.w	r2, r3, #15
 800d5cc:	6879      	ldr	r1, [r7, #4]
 800d5ce:	4613      	mov	r3, r2
 800d5d0:	009b      	lsls	r3, r3, #2
 800d5d2:	4413      	add	r3, r2
 800d5d4:	009b      	lsls	r3, r3, #2
 800d5d6:	440b      	add	r3, r1
 800d5d8:	3323      	adds	r3, #35	@ 0x23
 800d5da:	781b      	ldrb	r3, [r3, #0]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d117      	bne.n	800d610 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d5e0:	6839      	ldr	r1, [r7, #0]
 800d5e2:	6878      	ldr	r0, [r7, #4]
 800d5e4:	f000 fbb1 	bl	800dd4a <USBD_CtlError>
                  break;
 800d5e8:	e055      	b.n	800d696 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d5ea:	7bbb      	ldrb	r3, [r7, #14]
 800d5ec:	f003 020f 	and.w	r2, r3, #15
 800d5f0:	6879      	ldr	r1, [r7, #4]
 800d5f2:	4613      	mov	r3, r2
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	4413      	add	r3, r2
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	440b      	add	r3, r1
 800d5fc:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d600:	781b      	ldrb	r3, [r3, #0]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d104      	bne.n	800d610 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fb9e 	bl	800dd4a <USBD_CtlError>
                  break;
 800d60e:	e042      	b.n	800d696 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d610:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d614:	2b00      	cmp	r3, #0
 800d616:	da0b      	bge.n	800d630 <USBD_StdEPReq+0x2b4>
 800d618:	7bbb      	ldrb	r3, [r7, #14]
 800d61a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d61e:	4613      	mov	r3, r2
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	4413      	add	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	3310      	adds	r3, #16
 800d628:	687a      	ldr	r2, [r7, #4]
 800d62a:	4413      	add	r3, r2
 800d62c:	3304      	adds	r3, #4
 800d62e:	e00b      	b.n	800d648 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d630:	7bbb      	ldrb	r3, [r7, #14]
 800d632:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d636:	4613      	mov	r3, r2
 800d638:	009b      	lsls	r3, r3, #2
 800d63a:	4413      	add	r3, r2
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	4413      	add	r3, r2
 800d646:	3304      	adds	r3, #4
 800d648:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d64a:	7bbb      	ldrb	r3, [r7, #14]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d002      	beq.n	800d656 <USBD_StdEPReq+0x2da>
 800d650:	7bbb      	ldrb	r3, [r7, #14]
 800d652:	2b80      	cmp	r3, #128	@ 0x80
 800d654:	d103      	bne.n	800d65e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	2200      	movs	r2, #0
 800d65a:	739a      	strb	r2, [r3, #14]
 800d65c:	e00e      	b.n	800d67c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d65e:	7bbb      	ldrb	r3, [r7, #14]
 800d660:	4619      	mov	r1, r3
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f001 f90e 	bl	800e884 <USBD_LL_IsStallEP>
 800d668:	4603      	mov	r3, r0
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d003      	beq.n	800d676 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	2201      	movs	r2, #1
 800d672:	739a      	strb	r2, [r3, #14]
 800d674:	e002      	b.n	800d67c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	2200      	movs	r2, #0
 800d67a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	330e      	adds	r3, #14
 800d680:	2202      	movs	r2, #2
 800d682:	4619      	mov	r1, r3
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 fbdd 	bl	800de44 <USBD_CtlSendData>
              break;
 800d68a:	e004      	b.n	800d696 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800d68c:	6839      	ldr	r1, [r7, #0]
 800d68e:	6878      	ldr	r0, [r7, #4]
 800d690:	f000 fb5b 	bl	800dd4a <USBD_CtlError>
              break;
 800d694:	bf00      	nop
          }
          break;
 800d696:	e004      	b.n	800d6a2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800d698:	6839      	ldr	r1, [r7, #0]
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fb55 	bl	800dd4a <USBD_CtlError>
          break;
 800d6a0:	bf00      	nop
      }
      break;
 800d6a2:	e005      	b.n	800d6b0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800d6a4:	6839      	ldr	r1, [r7, #0]
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f000 fb4f 	bl	800dd4a <USBD_CtlError>
      break;
 800d6ac:	e000      	b.n	800d6b0 <USBD_StdEPReq+0x334>
      break;
 800d6ae:	bf00      	nop
  }

  return ret;
 800d6b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6b2:	4618      	mov	r0, r3
 800d6b4:	3710      	adds	r7, #16
 800d6b6:	46bd      	mov	sp, r7
 800d6b8:	bd80      	pop	{r7, pc}
	...

0800d6bc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d6ca:	2300      	movs	r3, #0
 800d6cc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	885b      	ldrh	r3, [r3, #2]
 800d6d6:	0a1b      	lsrs	r3, r3, #8
 800d6d8:	b29b      	uxth	r3, r3
 800d6da:	3b01      	subs	r3, #1
 800d6dc:	2b06      	cmp	r3, #6
 800d6de:	f200 8128 	bhi.w	800d932 <USBD_GetDescriptor+0x276>
 800d6e2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6e8 <USBD_GetDescriptor+0x2c>)
 800d6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6e8:	0800d705 	.word	0x0800d705
 800d6ec:	0800d71d 	.word	0x0800d71d
 800d6f0:	0800d75d 	.word	0x0800d75d
 800d6f4:	0800d933 	.word	0x0800d933
 800d6f8:	0800d933 	.word	0x0800d933
 800d6fc:	0800d8d3 	.word	0x0800d8d3
 800d700:	0800d8ff 	.word	0x0800d8ff
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	687a      	ldr	r2, [r7, #4]
 800d70e:	7c12      	ldrb	r2, [r2, #16]
 800d710:	f107 0108 	add.w	r1, r7, #8
 800d714:	4610      	mov	r0, r2
 800d716:	4798      	blx	r3
 800d718:	60f8      	str	r0, [r7, #12]
      break;
 800d71a:	e112      	b.n	800d942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	7c1b      	ldrb	r3, [r3, #16]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d10d      	bne.n	800d740 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d72a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d72c:	f107 0208 	add.w	r2, r7, #8
 800d730:	4610      	mov	r0, r2
 800d732:	4798      	blx	r3
 800d734:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	3301      	adds	r3, #1
 800d73a:	2202      	movs	r2, #2
 800d73c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d73e:	e100      	b.n	800d942 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d748:	f107 0208 	add.w	r2, r7, #8
 800d74c:	4610      	mov	r0, r2
 800d74e:	4798      	blx	r3
 800d750:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	3301      	adds	r3, #1
 800d756:	2202      	movs	r2, #2
 800d758:	701a      	strb	r2, [r3, #0]
      break;
 800d75a:	e0f2      	b.n	800d942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	885b      	ldrh	r3, [r3, #2]
 800d760:	b2db      	uxtb	r3, r3
 800d762:	2b05      	cmp	r3, #5
 800d764:	f200 80ac 	bhi.w	800d8c0 <USBD_GetDescriptor+0x204>
 800d768:	a201      	add	r2, pc, #4	@ (adr r2, 800d770 <USBD_GetDescriptor+0xb4>)
 800d76a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d76e:	bf00      	nop
 800d770:	0800d789 	.word	0x0800d789
 800d774:	0800d7bd 	.word	0x0800d7bd
 800d778:	0800d7f1 	.word	0x0800d7f1
 800d77c:	0800d825 	.word	0x0800d825
 800d780:	0800d859 	.word	0x0800d859
 800d784:	0800d88d 	.word	0x0800d88d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00b      	beq.n	800d7ac <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d79a:	685b      	ldr	r3, [r3, #4]
 800d79c:	687a      	ldr	r2, [r7, #4]
 800d79e:	7c12      	ldrb	r2, [r2, #16]
 800d7a0:	f107 0108 	add.w	r1, r7, #8
 800d7a4:	4610      	mov	r0, r2
 800d7a6:	4798      	blx	r3
 800d7a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7aa:	e091      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7ac:	6839      	ldr	r1, [r7, #0]
 800d7ae:	6878      	ldr	r0, [r7, #4]
 800d7b0:	f000 facb 	bl	800dd4a <USBD_CtlError>
            err++;
 800d7b4:	7afb      	ldrb	r3, [r7, #11]
 800d7b6:	3301      	adds	r3, #1
 800d7b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ba:	e089      	b.n	800d8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7c2:	689b      	ldr	r3, [r3, #8]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d00b      	beq.n	800d7e0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7ce:	689b      	ldr	r3, [r3, #8]
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	7c12      	ldrb	r2, [r2, #16]
 800d7d4:	f107 0108 	add.w	r1, r7, #8
 800d7d8:	4610      	mov	r0, r2
 800d7da:	4798      	blx	r3
 800d7dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7de:	e077      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7e0:	6839      	ldr	r1, [r7, #0]
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 fab1 	bl	800dd4a <USBD_CtlError>
            err++;
 800d7e8:	7afb      	ldrb	r3, [r7, #11]
 800d7ea:	3301      	adds	r3, #1
 800d7ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ee:	e06f      	b.n	800d8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7f6:	68db      	ldr	r3, [r3, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00b      	beq.n	800d814 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d802:	68db      	ldr	r3, [r3, #12]
 800d804:	687a      	ldr	r2, [r7, #4]
 800d806:	7c12      	ldrb	r2, [r2, #16]
 800d808:	f107 0108 	add.w	r1, r7, #8
 800d80c:	4610      	mov	r0, r2
 800d80e:	4798      	blx	r3
 800d810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d812:	e05d      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d814:	6839      	ldr	r1, [r7, #0]
 800d816:	6878      	ldr	r0, [r7, #4]
 800d818:	f000 fa97 	bl	800dd4a <USBD_CtlError>
            err++;
 800d81c:	7afb      	ldrb	r3, [r7, #11]
 800d81e:	3301      	adds	r3, #1
 800d820:	72fb      	strb	r3, [r7, #11]
          break;
 800d822:	e055      	b.n	800d8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d82a:	691b      	ldr	r3, [r3, #16]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d00b      	beq.n	800d848 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	687a      	ldr	r2, [r7, #4]
 800d83a:	7c12      	ldrb	r2, [r2, #16]
 800d83c:	f107 0108 	add.w	r1, r7, #8
 800d840:	4610      	mov	r0, r2
 800d842:	4798      	blx	r3
 800d844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d846:	e043      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d848:	6839      	ldr	r1, [r7, #0]
 800d84a:	6878      	ldr	r0, [r7, #4]
 800d84c:	f000 fa7d 	bl	800dd4a <USBD_CtlError>
            err++;
 800d850:	7afb      	ldrb	r3, [r7, #11]
 800d852:	3301      	adds	r3, #1
 800d854:	72fb      	strb	r3, [r7, #11]
          break;
 800d856:	e03b      	b.n	800d8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d85e:	695b      	ldr	r3, [r3, #20]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d00b      	beq.n	800d87c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d86a:	695b      	ldr	r3, [r3, #20]
 800d86c:	687a      	ldr	r2, [r7, #4]
 800d86e:	7c12      	ldrb	r2, [r2, #16]
 800d870:	f107 0108 	add.w	r1, r7, #8
 800d874:	4610      	mov	r0, r2
 800d876:	4798      	blx	r3
 800d878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d87a:	e029      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d87c:	6839      	ldr	r1, [r7, #0]
 800d87e:	6878      	ldr	r0, [r7, #4]
 800d880:	f000 fa63 	bl	800dd4a <USBD_CtlError>
            err++;
 800d884:	7afb      	ldrb	r3, [r7, #11]
 800d886:	3301      	adds	r3, #1
 800d888:	72fb      	strb	r3, [r7, #11]
          break;
 800d88a:	e021      	b.n	800d8d0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d892:	699b      	ldr	r3, [r3, #24]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d00b      	beq.n	800d8b0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d89e:	699b      	ldr	r3, [r3, #24]
 800d8a0:	687a      	ldr	r2, [r7, #4]
 800d8a2:	7c12      	ldrb	r2, [r2, #16]
 800d8a4:	f107 0108 	add.w	r1, r7, #8
 800d8a8:	4610      	mov	r0, r2
 800d8aa:	4798      	blx	r3
 800d8ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8ae:	e00f      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8b0:	6839      	ldr	r1, [r7, #0]
 800d8b2:	6878      	ldr	r0, [r7, #4]
 800d8b4:	f000 fa49 	bl	800dd4a <USBD_CtlError>
            err++;
 800d8b8:	7afb      	ldrb	r3, [r7, #11]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d8be:	e007      	b.n	800d8d0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d8c0:	6839      	ldr	r1, [r7, #0]
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 fa41 	bl	800dd4a <USBD_CtlError>
          err++;
 800d8c8:	7afb      	ldrb	r3, [r7, #11]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d8ce:	bf00      	nop
      }
      break;
 800d8d0:	e037      	b.n	800d942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	7c1b      	ldrb	r3, [r3, #16]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d109      	bne.n	800d8ee <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8e2:	f107 0208 	add.w	r2, r7, #8
 800d8e6:	4610      	mov	r0, r2
 800d8e8:	4798      	blx	r3
 800d8ea:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8ec:	e029      	b.n	800d942 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8ee:	6839      	ldr	r1, [r7, #0]
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f000 fa2a 	bl	800dd4a <USBD_CtlError>
        err++;
 800d8f6:	7afb      	ldrb	r3, [r7, #11]
 800d8f8:	3301      	adds	r3, #1
 800d8fa:	72fb      	strb	r3, [r7, #11]
      break;
 800d8fc:	e021      	b.n	800d942 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	7c1b      	ldrb	r3, [r3, #16]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d10d      	bne.n	800d922 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d90c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d90e:	f107 0208 	add.w	r2, r7, #8
 800d912:	4610      	mov	r0, r2
 800d914:	4798      	blx	r3
 800d916:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	3301      	adds	r3, #1
 800d91c:	2207      	movs	r2, #7
 800d91e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d920:	e00f      	b.n	800d942 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d922:	6839      	ldr	r1, [r7, #0]
 800d924:	6878      	ldr	r0, [r7, #4]
 800d926:	f000 fa10 	bl	800dd4a <USBD_CtlError>
        err++;
 800d92a:	7afb      	ldrb	r3, [r7, #11]
 800d92c:	3301      	adds	r3, #1
 800d92e:	72fb      	strb	r3, [r7, #11]
      break;
 800d930:	e007      	b.n	800d942 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fa08 	bl	800dd4a <USBD_CtlError>
      err++;
 800d93a:	7afb      	ldrb	r3, [r7, #11]
 800d93c:	3301      	adds	r3, #1
 800d93e:	72fb      	strb	r3, [r7, #11]
      break;
 800d940:	bf00      	nop
  }

  if (err != 0U)
 800d942:	7afb      	ldrb	r3, [r7, #11]
 800d944:	2b00      	cmp	r3, #0
 800d946:	d11e      	bne.n	800d986 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	88db      	ldrh	r3, [r3, #6]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d016      	beq.n	800d97e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d950:	893b      	ldrh	r3, [r7, #8]
 800d952:	2b00      	cmp	r3, #0
 800d954:	d00e      	beq.n	800d974 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	88da      	ldrh	r2, [r3, #6]
 800d95a:	893b      	ldrh	r3, [r7, #8]
 800d95c:	4293      	cmp	r3, r2
 800d95e:	bf28      	it	cs
 800d960:	4613      	movcs	r3, r2
 800d962:	b29b      	uxth	r3, r3
 800d964:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d966:	893b      	ldrh	r3, [r7, #8]
 800d968:	461a      	mov	r2, r3
 800d96a:	68f9      	ldr	r1, [r7, #12]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fa69 	bl	800de44 <USBD_CtlSendData>
 800d972:	e009      	b.n	800d988 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d974:	6839      	ldr	r1, [r7, #0]
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 f9e7 	bl	800dd4a <USBD_CtlError>
 800d97c:	e004      	b.n	800d988 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f000 fac1 	bl	800df06 <USBD_CtlSendStatus>
 800d984:	e000      	b.n	800d988 <USBD_GetDescriptor+0x2cc>
    return;
 800d986:	bf00      	nop
  }
}
 800d988:	3710      	adds	r7, #16
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop

0800d990 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d990:	b580      	push	{r7, lr}
 800d992:	b084      	sub	sp, #16
 800d994:	af00      	add	r7, sp, #0
 800d996:	6078      	str	r0, [r7, #4]
 800d998:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	889b      	ldrh	r3, [r3, #4]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d131      	bne.n	800da06 <USBD_SetAddress+0x76>
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	88db      	ldrh	r3, [r3, #6]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d12d      	bne.n	800da06 <USBD_SetAddress+0x76>
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	885b      	ldrh	r3, [r3, #2]
 800d9ae:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9b0:	d829      	bhi.n	800da06 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	885b      	ldrh	r3, [r3, #2]
 800d9b6:	b2db      	uxtb	r3, r3
 800d9b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9bc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9c4:	b2db      	uxtb	r3, r3
 800d9c6:	2b03      	cmp	r3, #3
 800d9c8:	d104      	bne.n	800d9d4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f9bc 	bl	800dd4a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9d2:	e01d      	b.n	800da10 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	7bfa      	ldrb	r2, [r7, #15]
 800d9d8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
 800d9de:	4619      	mov	r1, r3
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 ff7b 	bl	800e8dc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d9e6:	6878      	ldr	r0, [r7, #4]
 800d9e8:	f000 fa8d 	bl	800df06 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d004      	beq.n	800d9fc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2202      	movs	r2, #2
 800d9f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9fa:	e009      	b.n	800da10 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	2201      	movs	r2, #1
 800da00:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da04:	e004      	b.n	800da10 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800da06:	6839      	ldr	r1, [r7, #0]
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 f99e 	bl	800dd4a <USBD_CtlError>
  }
}
 800da0e:	bf00      	nop
 800da10:	bf00      	nop
 800da12:	3710      	adds	r7, #16
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da22:	2300      	movs	r3, #0
 800da24:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	885b      	ldrh	r3, [r3, #2]
 800da2a:	b2da      	uxtb	r2, r3
 800da2c:	4b4e      	ldr	r3, [pc, #312]	@ (800db68 <USBD_SetConfig+0x150>)
 800da2e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da30:	4b4d      	ldr	r3, [pc, #308]	@ (800db68 <USBD_SetConfig+0x150>)
 800da32:	781b      	ldrb	r3, [r3, #0]
 800da34:	2b01      	cmp	r3, #1
 800da36:	d905      	bls.n	800da44 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	6878      	ldr	r0, [r7, #4]
 800da3c:	f000 f985 	bl	800dd4a <USBD_CtlError>
    return USBD_FAIL;
 800da40:	2303      	movs	r3, #3
 800da42:	e08c      	b.n	800db5e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da4a:	b2db      	uxtb	r3, r3
 800da4c:	2b02      	cmp	r3, #2
 800da4e:	d002      	beq.n	800da56 <USBD_SetConfig+0x3e>
 800da50:	2b03      	cmp	r3, #3
 800da52:	d029      	beq.n	800daa8 <USBD_SetConfig+0x90>
 800da54:	e075      	b.n	800db42 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da56:	4b44      	ldr	r3, [pc, #272]	@ (800db68 <USBD_SetConfig+0x150>)
 800da58:	781b      	ldrb	r3, [r3, #0]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d020      	beq.n	800daa0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da5e:	4b42      	ldr	r3, [pc, #264]	@ (800db68 <USBD_SetConfig+0x150>)
 800da60:	781b      	ldrb	r3, [r3, #0]
 800da62:	461a      	mov	r2, r3
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da68:	4b3f      	ldr	r3, [pc, #252]	@ (800db68 <USBD_SetConfig+0x150>)
 800da6a:	781b      	ldrb	r3, [r3, #0]
 800da6c:	4619      	mov	r1, r3
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7fe ffcd 	bl	800ca0e <USBD_SetClassConfig>
 800da74:	4603      	mov	r3, r0
 800da76:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da78:	7bfb      	ldrb	r3, [r7, #15]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d008      	beq.n	800da90 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800da7e:	6839      	ldr	r1, [r7, #0]
 800da80:	6878      	ldr	r0, [r7, #4]
 800da82:	f000 f962 	bl	800dd4a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2202      	movs	r2, #2
 800da8a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da8e:	e065      	b.n	800db5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 fa38 	bl	800df06 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2203      	movs	r2, #3
 800da9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800da9e:	e05d      	b.n	800db5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 fa30 	bl	800df06 <USBD_CtlSendStatus>
      break;
 800daa6:	e059      	b.n	800db5c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800daa8:	4b2f      	ldr	r3, [pc, #188]	@ (800db68 <USBD_SetConfig+0x150>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b00      	cmp	r3, #0
 800daae:	d112      	bne.n	800dad6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2202      	movs	r2, #2
 800dab4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800dab8:	4b2b      	ldr	r3, [pc, #172]	@ (800db68 <USBD_SetConfig+0x150>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	461a      	mov	r2, r3
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dac2:	4b29      	ldr	r3, [pc, #164]	@ (800db68 <USBD_SetConfig+0x150>)
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	4619      	mov	r1, r3
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f7fe ffbc 	bl	800ca46 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dace:	6878      	ldr	r0, [r7, #4]
 800dad0:	f000 fa19 	bl	800df06 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dad4:	e042      	b.n	800db5c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dad6:	4b24      	ldr	r3, [pc, #144]	@ (800db68 <USBD_SetConfig+0x150>)
 800dad8:	781b      	ldrb	r3, [r3, #0]
 800dada:	461a      	mov	r2, r3
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	685b      	ldr	r3, [r3, #4]
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d02a      	beq.n	800db3a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	685b      	ldr	r3, [r3, #4]
 800dae8:	b2db      	uxtb	r3, r3
 800daea:	4619      	mov	r1, r3
 800daec:	6878      	ldr	r0, [r7, #4]
 800daee:	f7fe ffaa 	bl	800ca46 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800daf2:	4b1d      	ldr	r3, [pc, #116]	@ (800db68 <USBD_SetConfig+0x150>)
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	461a      	mov	r2, r3
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800dafc:	4b1a      	ldr	r3, [pc, #104]	@ (800db68 <USBD_SetConfig+0x150>)
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	4619      	mov	r1, r3
 800db02:	6878      	ldr	r0, [r7, #4]
 800db04:	f7fe ff83 	bl	800ca0e <USBD_SetClassConfig>
 800db08:	4603      	mov	r3, r0
 800db0a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800db0c:	7bfb      	ldrb	r3, [r7, #15]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d00f      	beq.n	800db32 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800db12:	6839      	ldr	r1, [r7, #0]
 800db14:	6878      	ldr	r0, [r7, #4]
 800db16:	f000 f918 	bl	800dd4a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	685b      	ldr	r3, [r3, #4]
 800db1e:	b2db      	uxtb	r3, r3
 800db20:	4619      	mov	r1, r3
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f7fe ff8f 	bl	800ca46 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2202      	movs	r2, #2
 800db2c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800db30:	e014      	b.n	800db5c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f000 f9e7 	bl	800df06 <USBD_CtlSendStatus>
      break;
 800db38:	e010      	b.n	800db5c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db3a:	6878      	ldr	r0, [r7, #4]
 800db3c:	f000 f9e3 	bl	800df06 <USBD_CtlSendStatus>
      break;
 800db40:	e00c      	b.n	800db5c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800db42:	6839      	ldr	r1, [r7, #0]
 800db44:	6878      	ldr	r0, [r7, #4]
 800db46:	f000 f900 	bl	800dd4a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db4a:	4b07      	ldr	r3, [pc, #28]	@ (800db68 <USBD_SetConfig+0x150>)
 800db4c:	781b      	ldrb	r3, [r3, #0]
 800db4e:	4619      	mov	r1, r3
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7fe ff78 	bl	800ca46 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db56:	2303      	movs	r3, #3
 800db58:	73fb      	strb	r3, [r7, #15]
      break;
 800db5a:	bf00      	nop
  }

  return ret;
 800db5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db5e:	4618      	mov	r0, r3
 800db60:	3710      	adds	r7, #16
 800db62:	46bd      	mov	sp, r7
 800db64:	bd80      	pop	{r7, pc}
 800db66:	bf00      	nop
 800db68:	20000b30 	.word	0x20000b30

0800db6c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b082      	sub	sp, #8
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
 800db74:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800db76:	683b      	ldr	r3, [r7, #0]
 800db78:	88db      	ldrh	r3, [r3, #6]
 800db7a:	2b01      	cmp	r3, #1
 800db7c:	d004      	beq.n	800db88 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db7e:	6839      	ldr	r1, [r7, #0]
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 f8e2 	bl	800dd4a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db86:	e023      	b.n	800dbd0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	2b02      	cmp	r3, #2
 800db92:	dc02      	bgt.n	800db9a <USBD_GetConfig+0x2e>
 800db94:	2b00      	cmp	r3, #0
 800db96:	dc03      	bgt.n	800dba0 <USBD_GetConfig+0x34>
 800db98:	e015      	b.n	800dbc6 <USBD_GetConfig+0x5a>
 800db9a:	2b03      	cmp	r3, #3
 800db9c:	d00b      	beq.n	800dbb6 <USBD_GetConfig+0x4a>
 800db9e:	e012      	b.n	800dbc6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	2200      	movs	r2, #0
 800dba4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	3308      	adds	r3, #8
 800dbaa:	2201      	movs	r2, #1
 800dbac:	4619      	mov	r1, r3
 800dbae:	6878      	ldr	r0, [r7, #4]
 800dbb0:	f000 f948 	bl	800de44 <USBD_CtlSendData>
        break;
 800dbb4:	e00c      	b.n	800dbd0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3304      	adds	r3, #4
 800dbba:	2201      	movs	r2, #1
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 f940 	bl	800de44 <USBD_CtlSendData>
        break;
 800dbc4:	e004      	b.n	800dbd0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 f8be 	bl	800dd4a <USBD_CtlError>
        break;
 800dbce:	bf00      	nop
}
 800dbd0:	bf00      	nop
 800dbd2:	3708      	adds	r7, #8
 800dbd4:	46bd      	mov	sp, r7
 800dbd6:	bd80      	pop	{r7, pc}

0800dbd8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
 800dbe0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbe8:	b2db      	uxtb	r3, r3
 800dbea:	3b01      	subs	r3, #1
 800dbec:	2b02      	cmp	r3, #2
 800dbee:	d81e      	bhi.n	800dc2e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dbf0:	683b      	ldr	r3, [r7, #0]
 800dbf2:	88db      	ldrh	r3, [r3, #6]
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	d004      	beq.n	800dc02 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dbf8:	6839      	ldr	r1, [r7, #0]
 800dbfa:	6878      	ldr	r0, [r7, #4]
 800dbfc:	f000 f8a5 	bl	800dd4a <USBD_CtlError>
        break;
 800dc00:	e01a      	b.n	800dc38 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	2201      	movs	r2, #1
 800dc06:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d005      	beq.n	800dc1e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	68db      	ldr	r3, [r3, #12]
 800dc16:	f043 0202 	orr.w	r2, r3, #2
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	330c      	adds	r3, #12
 800dc22:	2202      	movs	r2, #2
 800dc24:	4619      	mov	r1, r3
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f90c 	bl	800de44 <USBD_CtlSendData>
      break;
 800dc2c:	e004      	b.n	800dc38 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dc2e:	6839      	ldr	r1, [r7, #0]
 800dc30:	6878      	ldr	r0, [r7, #4]
 800dc32:	f000 f88a 	bl	800dd4a <USBD_CtlError>
      break;
 800dc36:	bf00      	nop
  }
}
 800dc38:	bf00      	nop
 800dc3a:	3708      	adds	r7, #8
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	bd80      	pop	{r7, pc}

0800dc40 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b082      	sub	sp, #8
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
 800dc48:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc4a:	683b      	ldr	r3, [r7, #0]
 800dc4c:	885b      	ldrh	r3, [r3, #2]
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d107      	bne.n	800dc62 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2201      	movs	r2, #1
 800dc56:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc5a:	6878      	ldr	r0, [r7, #4]
 800dc5c:	f000 f953 	bl	800df06 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dc60:	e013      	b.n	800dc8a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dc62:	683b      	ldr	r3, [r7, #0]
 800dc64:	885b      	ldrh	r3, [r3, #2]
 800dc66:	2b02      	cmp	r3, #2
 800dc68:	d10b      	bne.n	800dc82 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dc6a:	683b      	ldr	r3, [r7, #0]
 800dc6c:	889b      	ldrh	r3, [r3, #4]
 800dc6e:	0a1b      	lsrs	r3, r3, #8
 800dc70:	b29b      	uxth	r3, r3
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dc7a:	6878      	ldr	r0, [r7, #4]
 800dc7c:	f000 f943 	bl	800df06 <USBD_CtlSendStatus>
}
 800dc80:	e003      	b.n	800dc8a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dc82:	6839      	ldr	r1, [r7, #0]
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	f000 f860 	bl	800dd4a <USBD_CtlError>
}
 800dc8a:	bf00      	nop
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b082      	sub	sp, #8
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
 800dc9a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dca2:	b2db      	uxtb	r3, r3
 800dca4:	3b01      	subs	r3, #1
 800dca6:	2b02      	cmp	r3, #2
 800dca8:	d80b      	bhi.n	800dcc2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dcaa:	683b      	ldr	r3, [r7, #0]
 800dcac:	885b      	ldrh	r3, [r3, #2]
 800dcae:	2b01      	cmp	r3, #1
 800dcb0:	d10c      	bne.n	800dccc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f000 f923 	bl	800df06 <USBD_CtlSendStatus>
      }
      break;
 800dcc0:	e004      	b.n	800dccc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dcc2:	6839      	ldr	r1, [r7, #0]
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f840 	bl	800dd4a <USBD_CtlError>
      break;
 800dcca:	e000      	b.n	800dcce <USBD_ClrFeature+0x3c>
      break;
 800dccc:	bf00      	nop
  }
}
 800dcce:	bf00      	nop
 800dcd0:	3708      	adds	r7, #8
 800dcd2:	46bd      	mov	sp, r7
 800dcd4:	bd80      	pop	{r7, pc}

0800dcd6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dcd6:	b580      	push	{r7, lr}
 800dcd8:	b084      	sub	sp, #16
 800dcda:	af00      	add	r7, sp, #0
 800dcdc:	6078      	str	r0, [r7, #4]
 800dcde:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dce4:	68fb      	ldr	r3, [r7, #12]
 800dce6:	781a      	ldrb	r2, [r3, #0]
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	781a      	ldrb	r2, [r3, #0]
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dcfa:	68fb      	ldr	r3, [r7, #12]
 800dcfc:	3301      	adds	r3, #1
 800dcfe:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dd00:	68f8      	ldr	r0, [r7, #12]
 800dd02:	f7ff fa3d 	bl	800d180 <SWAPBYTE>
 800dd06:	4603      	mov	r3, r0
 800dd08:	461a      	mov	r2, r3
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	3301      	adds	r3, #1
 800dd12:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	3301      	adds	r3, #1
 800dd18:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	f7ff fa30 	bl	800d180 <SWAPBYTE>
 800dd20:	4603      	mov	r3, r0
 800dd22:	461a      	mov	r2, r3
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	3301      	adds	r3, #1
 800dd2c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	3301      	adds	r3, #1
 800dd32:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dd34:	68f8      	ldr	r0, [r7, #12]
 800dd36:	f7ff fa23 	bl	800d180 <SWAPBYTE>
 800dd3a:	4603      	mov	r3, r0
 800dd3c:	461a      	mov	r2, r3
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	80da      	strh	r2, [r3, #6]
}
 800dd42:	bf00      	nop
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}

0800dd4a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd4a:	b580      	push	{r7, lr}
 800dd4c:	b082      	sub	sp, #8
 800dd4e:	af00      	add	r7, sp, #0
 800dd50:	6078      	str	r0, [r7, #4]
 800dd52:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd54:	2180      	movs	r1, #128	@ 0x80
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f000 fd56 	bl	800e808 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd5c:	2100      	movs	r1, #0
 800dd5e:	6878      	ldr	r0, [r7, #4]
 800dd60:	f000 fd52 	bl	800e808 <USBD_LL_StallEP>
}
 800dd64:	bf00      	nop
 800dd66:	3708      	adds	r7, #8
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}

0800dd6c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b086      	sub	sp, #24
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d042      	beq.n	800de08 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800dd86:	6938      	ldr	r0, [r7, #16]
 800dd88:	f000 f842 	bl	800de10 <USBD_GetLen>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	3301      	adds	r3, #1
 800dd90:	005b      	lsls	r3, r3, #1
 800dd92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd96:	d808      	bhi.n	800ddaa <USBD_GetString+0x3e>
 800dd98:	6938      	ldr	r0, [r7, #16]
 800dd9a:	f000 f839 	bl	800de10 <USBD_GetLen>
 800dd9e:	4603      	mov	r3, r0
 800dda0:	3301      	adds	r3, #1
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	005b      	lsls	r3, r3, #1
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	e001      	b.n	800ddae <USBD_GetString+0x42>
 800ddaa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ddb2:	7dfb      	ldrb	r3, [r7, #23]
 800ddb4:	68ba      	ldr	r2, [r7, #8]
 800ddb6:	4413      	add	r3, r2
 800ddb8:	687a      	ldr	r2, [r7, #4]
 800ddba:	7812      	ldrb	r2, [r2, #0]
 800ddbc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddbe:	7dfb      	ldrb	r3, [r7, #23]
 800ddc0:	3301      	adds	r3, #1
 800ddc2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ddc4:	7dfb      	ldrb	r3, [r7, #23]
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	4413      	add	r3, r2
 800ddca:	2203      	movs	r2, #3
 800ddcc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ddd4:	e013      	b.n	800ddfe <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800ddd6:	7dfb      	ldrb	r3, [r7, #23]
 800ddd8:	68ba      	ldr	r2, [r7, #8]
 800ddda:	4413      	add	r3, r2
 800dddc:	693a      	ldr	r2, [r7, #16]
 800ddde:	7812      	ldrb	r2, [r2, #0]
 800dde0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	3301      	adds	r3, #1
 800dde6:	613b      	str	r3, [r7, #16]
    idx++;
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
 800ddea:	3301      	adds	r3, #1
 800ddec:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ddee:	7dfb      	ldrb	r3, [r7, #23]
 800ddf0:	68ba      	ldr	r2, [r7, #8]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	701a      	strb	r2, [r3, #0]
    idx++;
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ddfe:	693b      	ldr	r3, [r7, #16]
 800de00:	781b      	ldrb	r3, [r3, #0]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d1e7      	bne.n	800ddd6 <USBD_GetString+0x6a>
 800de06:	e000      	b.n	800de0a <USBD_GetString+0x9e>
    return;
 800de08:	bf00      	nop
  }
}
 800de0a:	3718      	adds	r7, #24
 800de0c:	46bd      	mov	sp, r7
 800de0e:	bd80      	pop	{r7, pc}

0800de10 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de10:	b480      	push	{r7}
 800de12:	b085      	sub	sp, #20
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800de18:	2300      	movs	r3, #0
 800de1a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800de20:	e005      	b.n	800de2e <USBD_GetLen+0x1e>
  {
    len++;
 800de22:	7bfb      	ldrb	r3, [r7, #15]
 800de24:	3301      	adds	r3, #1
 800de26:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800de28:	68bb      	ldr	r3, [r7, #8]
 800de2a:	3301      	adds	r3, #1
 800de2c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	d1f5      	bne.n	800de22 <USBD_GetLen+0x12>
  }

  return len;
 800de36:	7bfb      	ldrb	r3, [r7, #15]
}
 800de38:	4618      	mov	r0, r3
 800de3a:	3714      	adds	r7, #20
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de44:	b580      	push	{r7, lr}
 800de46:	b084      	sub	sp, #16
 800de48:	af00      	add	r7, sp, #0
 800de4a:	60f8      	str	r0, [r7, #12]
 800de4c:	60b9      	str	r1, [r7, #8]
 800de4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	2202      	movs	r2, #2
 800de54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	687a      	ldr	r2, [r7, #4]
 800de5c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	68ba      	ldr	r2, [r7, #8]
 800de62:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	68ba      	ldr	r2, [r7, #8]
 800de6e:	2100      	movs	r1, #0
 800de70:	68f8      	ldr	r0, [r7, #12]
 800de72:	f000 fd52 	bl	800e91a <USBD_LL_Transmit>

  return USBD_OK;
 800de76:	2300      	movs	r3, #0
}
 800de78:	4618      	mov	r0, r3
 800de7a:	3710      	adds	r7, #16
 800de7c:	46bd      	mov	sp, r7
 800de7e:	bd80      	pop	{r7, pc}

0800de80 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b084      	sub	sp, #16
 800de84:	af00      	add	r7, sp, #0
 800de86:	60f8      	str	r0, [r7, #12]
 800de88:	60b9      	str	r1, [r7, #8]
 800de8a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	68ba      	ldr	r2, [r7, #8]
 800de90:	2100      	movs	r1, #0
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f000 fd41 	bl	800e91a <USBD_LL_Transmit>

  return USBD_OK;
 800de98:	2300      	movs	r3, #0
}
 800de9a:	4618      	mov	r0, r3
 800de9c:	3710      	adds	r7, #16
 800de9e:	46bd      	mov	sp, r7
 800dea0:	bd80      	pop	{r7, pc}

0800dea2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dea2:	b580      	push	{r7, lr}
 800dea4:	b084      	sub	sp, #16
 800dea6:	af00      	add	r7, sp, #0
 800dea8:	60f8      	str	r0, [r7, #12]
 800deaa:	60b9      	str	r1, [r7, #8]
 800deac:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2203      	movs	r2, #3
 800deb2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	687a      	ldr	r2, [r7, #4]
 800deba:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	68ba      	ldr	r2, [r7, #8]
 800dec2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	2100      	movs	r1, #0
 800ded4:	68f8      	ldr	r0, [r7, #12]
 800ded6:	f000 fd41 	bl	800e95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800deda:	2300      	movs	r3, #0
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3710      	adds	r7, #16
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	60f8      	str	r0, [r7, #12]
 800deec:	60b9      	str	r1, [r7, #8]
 800deee:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	68ba      	ldr	r2, [r7, #8]
 800def4:	2100      	movs	r1, #0
 800def6:	68f8      	ldr	r0, [r7, #12]
 800def8:	f000 fd30 	bl	800e95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800defc:	2300      	movs	r3, #0
}
 800defe:	4618      	mov	r0, r3
 800df00:	3710      	adds	r7, #16
 800df02:	46bd      	mov	sp, r7
 800df04:	bd80      	pop	{r7, pc}

0800df06 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df06:	b580      	push	{r7, lr}
 800df08:	b082      	sub	sp, #8
 800df0a:	af00      	add	r7, sp, #0
 800df0c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2204      	movs	r2, #4
 800df12:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df16:	2300      	movs	r3, #0
 800df18:	2200      	movs	r2, #0
 800df1a:	2100      	movs	r1, #0
 800df1c:	6878      	ldr	r0, [r7, #4]
 800df1e:	f000 fcfc 	bl	800e91a <USBD_LL_Transmit>

  return USBD_OK;
 800df22:	2300      	movs	r3, #0
}
 800df24:	4618      	mov	r0, r3
 800df26:	3708      	adds	r7, #8
 800df28:	46bd      	mov	sp, r7
 800df2a:	bd80      	pop	{r7, pc}

0800df2c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b082      	sub	sp, #8
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2205      	movs	r2, #5
 800df38:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df3c:	2300      	movs	r3, #0
 800df3e:	2200      	movs	r2, #0
 800df40:	2100      	movs	r1, #0
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f000 fd0a 	bl	800e95c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df48:	2300      	movs	r3, #0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
	...

0800df54 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df54:	b580      	push	{r7, lr}
 800df56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df58:	2200      	movs	r2, #0
 800df5a:	4912      	ldr	r1, [pc, #72]	@ (800dfa4 <MX_USB_DEVICE_Init+0x50>)
 800df5c:	4812      	ldr	r0, [pc, #72]	@ (800dfa8 <MX_USB_DEVICE_Init+0x54>)
 800df5e:	f7fe fcd9 	bl	800c914 <USBD_Init>
 800df62:	4603      	mov	r3, r0
 800df64:	2b00      	cmp	r3, #0
 800df66:	d001      	beq.n	800df6c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df68:	f7f3 fff2 	bl	8001f50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800df6c:	490f      	ldr	r1, [pc, #60]	@ (800dfac <MX_USB_DEVICE_Init+0x58>)
 800df6e:	480e      	ldr	r0, [pc, #56]	@ (800dfa8 <MX_USB_DEVICE_Init+0x54>)
 800df70:	f7fe fd00 	bl	800c974 <USBD_RegisterClass>
 800df74:	4603      	mov	r3, r0
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df7a:	f7f3 ffe9 	bl	8001f50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800df7e:	490c      	ldr	r1, [pc, #48]	@ (800dfb0 <MX_USB_DEVICE_Init+0x5c>)
 800df80:	4809      	ldr	r0, [pc, #36]	@ (800dfa8 <MX_USB_DEVICE_Init+0x54>)
 800df82:	f7fe fbf7 	bl	800c774 <USBD_CDC_RegisterInterface>
 800df86:	4603      	mov	r3, r0
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d001      	beq.n	800df90 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df8c:	f7f3 ffe0 	bl	8001f50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800df90:	4805      	ldr	r0, [pc, #20]	@ (800dfa8 <MX_USB_DEVICE_Init+0x54>)
 800df92:	f7fe fd25 	bl	800c9e0 <USBD_Start>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d001      	beq.n	800dfa0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800df9c:	f7f3 ffd8 	bl	8001f50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dfa0:	bf00      	nop
 800dfa2:	bd80      	pop	{r7, pc}
 800dfa4:	200000e4 	.word	0x200000e4
 800dfa8:	20000b34 	.word	0x20000b34
 800dfac:	20000048 	.word	0x20000048
 800dfb0:	200000d0 	.word	0x200000d0

0800dfb4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dfb4:	b580      	push	{r7, lr}
 800dfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dfb8:	2200      	movs	r2, #0
 800dfba:	4905      	ldr	r1, [pc, #20]	@ (800dfd0 <CDC_Init_FS+0x1c>)
 800dfbc:	4805      	ldr	r0, [pc, #20]	@ (800dfd4 <CDC_Init_FS+0x20>)
 800dfbe:	f7fe fbf3 	bl	800c7a8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dfc2:	4905      	ldr	r1, [pc, #20]	@ (800dfd8 <CDC_Init_FS+0x24>)
 800dfc4:	4803      	ldr	r0, [pc, #12]	@ (800dfd4 <CDC_Init_FS+0x20>)
 800dfc6:	f7fe fc11 	bl	800c7ec <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dfca:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dfcc:	4618      	mov	r0, r3
 800dfce:	bd80      	pop	{r7, pc}
 800dfd0:	20001010 	.word	0x20001010
 800dfd4:	20000b34 	.word	0x20000b34
 800dfd8:	20000e10 	.word	0x20000e10

0800dfdc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dfe0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	46bd      	mov	sp, r7
 800dfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfea:	4770      	bx	lr

0800dfec <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dfec:	b480      	push	{r7}
 800dfee:	b083      	sub	sp, #12
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	4603      	mov	r3, r0
 800dff4:	6039      	str	r1, [r7, #0]
 800dff6:	71fb      	strb	r3, [r7, #7]
 800dff8:	4613      	mov	r3, r2
 800dffa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dffc:	79fb      	ldrb	r3, [r7, #7]
 800dffe:	2b23      	cmp	r3, #35	@ 0x23
 800e000:	f200 8098 	bhi.w	800e134 <CDC_Control_FS+0x148>
 800e004:	a201      	add	r2, pc, #4	@ (adr r2, 800e00c <CDC_Control_FS+0x20>)
 800e006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e00a:	bf00      	nop
 800e00c:	0800e135 	.word	0x0800e135
 800e010:	0800e135 	.word	0x0800e135
 800e014:	0800e135 	.word	0x0800e135
 800e018:	0800e135 	.word	0x0800e135
 800e01c:	0800e135 	.word	0x0800e135
 800e020:	0800e135 	.word	0x0800e135
 800e024:	0800e135 	.word	0x0800e135
 800e028:	0800e135 	.word	0x0800e135
 800e02c:	0800e135 	.word	0x0800e135
 800e030:	0800e135 	.word	0x0800e135
 800e034:	0800e135 	.word	0x0800e135
 800e038:	0800e135 	.word	0x0800e135
 800e03c:	0800e135 	.word	0x0800e135
 800e040:	0800e135 	.word	0x0800e135
 800e044:	0800e135 	.word	0x0800e135
 800e048:	0800e135 	.word	0x0800e135
 800e04c:	0800e135 	.word	0x0800e135
 800e050:	0800e135 	.word	0x0800e135
 800e054:	0800e135 	.word	0x0800e135
 800e058:	0800e135 	.word	0x0800e135
 800e05c:	0800e135 	.word	0x0800e135
 800e060:	0800e135 	.word	0x0800e135
 800e064:	0800e135 	.word	0x0800e135
 800e068:	0800e135 	.word	0x0800e135
 800e06c:	0800e135 	.word	0x0800e135
 800e070:	0800e135 	.word	0x0800e135
 800e074:	0800e135 	.word	0x0800e135
 800e078:	0800e135 	.word	0x0800e135
 800e07c:	0800e135 	.word	0x0800e135
 800e080:	0800e135 	.word	0x0800e135
 800e084:	0800e135 	.word	0x0800e135
 800e088:	0800e135 	.word	0x0800e135
 800e08c:	0800e09d 	.word	0x0800e09d
 800e090:	0800e0e1 	.word	0x0800e0e1
 800e094:	0800e135 	.word	0x0800e135
 800e098:	0800e135 	.word	0x0800e135
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	781b      	ldrb	r3, [r3, #0]
 800e0a0:	461a      	mov	r2, r3
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	3301      	adds	r3, #1
 800e0a6:	781b      	ldrb	r3, [r3, #0]
 800e0a8:	021b      	lsls	r3, r3, #8
 800e0aa:	431a      	orrs	r2, r3
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	3302      	adds	r3, #2
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	041b      	lsls	r3, r3, #16
 800e0b4:	431a      	orrs	r2, r3
 800e0b6:	683b      	ldr	r3, [r7, #0]
 800e0b8:	3303      	adds	r3, #3
 800e0ba:	781b      	ldrb	r3, [r3, #0]
 800e0bc:	061b      	lsls	r3, r3, #24
 800e0be:	4313      	orrs	r3, r2
 800e0c0:	461a      	mov	r2, r3
 800e0c2:	4b20      	ldr	r3, [pc, #128]	@ (800e144 <CDC_Control_FS+0x158>)
 800e0c4:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	791a      	ldrb	r2, [r3, #4]
 800e0ca:	4b1e      	ldr	r3, [pc, #120]	@ (800e144 <CDC_Control_FS+0x158>)
 800e0cc:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	795a      	ldrb	r2, [r3, #5]
 800e0d2:	4b1c      	ldr	r3, [pc, #112]	@ (800e144 <CDC_Control_FS+0x158>)
 800e0d4:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	799a      	ldrb	r2, [r3, #6]
 800e0da:	4b1a      	ldr	r3, [pc, #104]	@ (800e144 <CDC_Control_FS+0x158>)
 800e0dc:	719a      	strb	r2, [r3, #6]
    break;
 800e0de:	e02a      	b.n	800e136 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800e0e0:	4b18      	ldr	r3, [pc, #96]	@ (800e144 <CDC_Control_FS+0x158>)
 800e0e2:	681b      	ldr	r3, [r3, #0]
 800e0e4:	b2da      	uxtb	r2, r3
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800e0ea:	4b16      	ldr	r3, [pc, #88]	@ (800e144 <CDC_Control_FS+0x158>)
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	0a1a      	lsrs	r2, r3, #8
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	3301      	adds	r3, #1
 800e0f4:	b2d2      	uxtb	r2, r2
 800e0f6:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800e0f8:	4b12      	ldr	r3, [pc, #72]	@ (800e144 <CDC_Control_FS+0x158>)
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	0c1a      	lsrs	r2, r3, #16
 800e0fe:	683b      	ldr	r3, [r7, #0]
 800e100:	3302      	adds	r3, #2
 800e102:	b2d2      	uxtb	r2, r2
 800e104:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800e106:	4b0f      	ldr	r3, [pc, #60]	@ (800e144 <CDC_Control_FS+0x158>)
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	0e1a      	lsrs	r2, r3, #24
 800e10c:	683b      	ldr	r3, [r7, #0]
 800e10e:	3303      	adds	r3, #3
 800e110:	b2d2      	uxtb	r2, r2
 800e112:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	3304      	adds	r3, #4
 800e118:	4a0a      	ldr	r2, [pc, #40]	@ (800e144 <CDC_Control_FS+0x158>)
 800e11a:	7912      	ldrb	r2, [r2, #4]
 800e11c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800e11e:	683b      	ldr	r3, [r7, #0]
 800e120:	3305      	adds	r3, #5
 800e122:	4a08      	ldr	r2, [pc, #32]	@ (800e144 <CDC_Control_FS+0x158>)
 800e124:	7952      	ldrb	r2, [r2, #5]
 800e126:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800e128:	683b      	ldr	r3, [r7, #0]
 800e12a:	3306      	adds	r3, #6
 800e12c:	4a05      	ldr	r2, [pc, #20]	@ (800e144 <CDC_Control_FS+0x158>)
 800e12e:	7992      	ldrb	r2, [r2, #6]
 800e130:	701a      	strb	r2, [r3, #0]
    break;
 800e132:	e000      	b.n	800e136 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e134:	bf00      	nop
  }

  return (USBD_OK);
 800e136:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e138:	4618      	mov	r0, r3
 800e13a:	370c      	adds	r7, #12
 800e13c:	46bd      	mov	sp, r7
 800e13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e142:	4770      	bx	lr
 800e144:	200000c8 	.word	0x200000c8

0800e148 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e148:	b580      	push	{r7, lr}
 800e14a:	b082      	sub	sp, #8
 800e14c:	af00      	add	r7, sp, #0
 800e14e:	6078      	str	r0, [r7, #4]
 800e150:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800e152:	4b0b      	ldr	r3, [pc, #44]	@ (800e180 <CDC_Receive_FS+0x38>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	2b00      	cmp	r3, #0
 800e158:	d006      	beq.n	800e168 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800e15a:	4b09      	ldr	r3, [pc, #36]	@ (800e180 <CDC_Receive_FS+0x38>)
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	683a      	ldr	r2, [r7, #0]
 800e160:	6812      	ldr	r2, [r2, #0]
 800e162:	4611      	mov	r1, r2
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e168:	6879      	ldr	r1, [r7, #4]
 800e16a:	4806      	ldr	r0, [pc, #24]	@ (800e184 <CDC_Receive_FS+0x3c>)
 800e16c:	f7fe fb3e 	bl	800c7ec <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e170:	4804      	ldr	r0, [pc, #16]	@ (800e184 <CDC_Receive_FS+0x3c>)
 800e172:	f7fe fb99 	bl	800c8a8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800e176:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e178:	4618      	mov	r0, r3
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}
 800e180:	20001210 	.word	0x20001210
 800e184:	20000b34 	.word	0x20000b34

0800e188 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e188:	b580      	push	{r7, lr}
 800e18a:	b084      	sub	sp, #16
 800e18c:	af00      	add	r7, sp, #0
 800e18e:	6078      	str	r0, [r7, #4]
 800e190:	460b      	mov	r3, r1
 800e192:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e194:	2300      	movs	r3, #0
 800e196:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e198:	4b0d      	ldr	r3, [pc, #52]	@ (800e1d0 <CDC_Transmit_FS+0x48>)
 800e19a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e19e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e1a0:	68bb      	ldr	r3, [r7, #8]
 800e1a2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d001      	beq.n	800e1ae <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e1aa:	2301      	movs	r3, #1
 800e1ac:	e00b      	b.n	800e1c6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e1ae:	887b      	ldrh	r3, [r7, #2]
 800e1b0:	461a      	mov	r2, r3
 800e1b2:	6879      	ldr	r1, [r7, #4]
 800e1b4:	4806      	ldr	r0, [pc, #24]	@ (800e1d0 <CDC_Transmit_FS+0x48>)
 800e1b6:	f7fe faf7 	bl	800c7a8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e1ba:	4805      	ldr	r0, [pc, #20]	@ (800e1d0 <CDC_Transmit_FS+0x48>)
 800e1bc:	f7fe fb34 	bl	800c828 <USBD_CDC_TransmitPacket>
 800e1c0:	4603      	mov	r3, r0
 800e1c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e1c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3710      	adds	r7, #16
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20000b34 	.word	0x20000b34

0800e1d4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e1d4:	b480      	push	{r7}
 800e1d6:	b087      	sub	sp, #28
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	60f8      	str	r0, [r7, #12]
 800e1dc:	60b9      	str	r1, [r7, #8]
 800e1de:	4613      	mov	r3, r2
 800e1e0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e1e2:	2300      	movs	r3, #0
 800e1e4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e1e6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	371c      	adds	r7, #28
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr
	...

0800e1f8 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800e1f8:	b480      	push	{r7}
 800e1fa:	b083      	sub	sp, #12
 800e1fc:	af00      	add	r7, sp, #0
 800e1fe:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800e200:	4a04      	ldr	r2, [pc, #16]	@ (800e214 <CDC_Attach_Rx+0x1c>)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6013      	str	r3, [r2, #0]
}
 800e206:	bf00      	nop
 800e208:	370c      	adds	r7, #12
 800e20a:	46bd      	mov	sp, r7
 800e20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e210:	4770      	bx	lr
 800e212:	bf00      	nop
 800e214:	20001210 	.word	0x20001210

0800e218 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e218:	b480      	push	{r7}
 800e21a:	b083      	sub	sp, #12
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	4603      	mov	r3, r0
 800e220:	6039      	str	r1, [r7, #0]
 800e222:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e224:	683b      	ldr	r3, [r7, #0]
 800e226:	2212      	movs	r2, #18
 800e228:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e22a:	4b03      	ldr	r3, [pc, #12]	@ (800e238 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	370c      	adds	r7, #12
 800e230:	46bd      	mov	sp, r7
 800e232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e236:	4770      	bx	lr
 800e238:	20000100 	.word	0x20000100

0800e23c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e23c:	b480      	push	{r7}
 800e23e:	b083      	sub	sp, #12
 800e240:	af00      	add	r7, sp, #0
 800e242:	4603      	mov	r3, r0
 800e244:	6039      	str	r1, [r7, #0]
 800e246:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e248:	683b      	ldr	r3, [r7, #0]
 800e24a:	2204      	movs	r2, #4
 800e24c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e24e:	4b03      	ldr	r3, [pc, #12]	@ (800e25c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e250:	4618      	mov	r0, r3
 800e252:	370c      	adds	r7, #12
 800e254:	46bd      	mov	sp, r7
 800e256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25a:	4770      	bx	lr
 800e25c:	20000114 	.word	0x20000114

0800e260 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	4603      	mov	r3, r0
 800e268:	6039      	str	r1, [r7, #0]
 800e26a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e26c:	79fb      	ldrb	r3, [r7, #7]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d105      	bne.n	800e27e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e272:	683a      	ldr	r2, [r7, #0]
 800e274:	4907      	ldr	r1, [pc, #28]	@ (800e294 <USBD_FS_ProductStrDescriptor+0x34>)
 800e276:	4808      	ldr	r0, [pc, #32]	@ (800e298 <USBD_FS_ProductStrDescriptor+0x38>)
 800e278:	f7ff fd78 	bl	800dd6c <USBD_GetString>
 800e27c:	e004      	b.n	800e288 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e27e:	683a      	ldr	r2, [r7, #0]
 800e280:	4904      	ldr	r1, [pc, #16]	@ (800e294 <USBD_FS_ProductStrDescriptor+0x34>)
 800e282:	4805      	ldr	r0, [pc, #20]	@ (800e298 <USBD_FS_ProductStrDescriptor+0x38>)
 800e284:	f7ff fd72 	bl	800dd6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e288:	4b02      	ldr	r3, [pc, #8]	@ (800e294 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e28a:	4618      	mov	r0, r3
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}
 800e292:	bf00      	nop
 800e294:	20001214 	.word	0x20001214
 800e298:	0800f3d8 	.word	0x0800f3d8

0800e29c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	4603      	mov	r3, r0
 800e2a4:	6039      	str	r1, [r7, #0]
 800e2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e2a8:	683a      	ldr	r2, [r7, #0]
 800e2aa:	4904      	ldr	r1, [pc, #16]	@ (800e2bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e2ac:	4804      	ldr	r0, [pc, #16]	@ (800e2c0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e2ae:	f7ff fd5d 	bl	800dd6c <USBD_GetString>
  return USBD_StrDesc;
 800e2b2:	4b02      	ldr	r3, [pc, #8]	@ (800e2bc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	3708      	adds	r7, #8
 800e2b8:	46bd      	mov	sp, r7
 800e2ba:	bd80      	pop	{r7, pc}
 800e2bc:	20001214 	.word	0x20001214
 800e2c0:	0800f3f0 	.word	0x0800f3f0

0800e2c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2c4:	b580      	push	{r7, lr}
 800e2c6:	b082      	sub	sp, #8
 800e2c8:	af00      	add	r7, sp, #0
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	6039      	str	r1, [r7, #0]
 800e2ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e2d0:	683b      	ldr	r3, [r7, #0]
 800e2d2:	221a      	movs	r2, #26
 800e2d4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e2d6:	f000 f843 	bl	800e360 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e2da:	4b02      	ldr	r3, [pc, #8]	@ (800e2e4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e2dc:	4618      	mov	r0, r3
 800e2de:	3708      	adds	r7, #8
 800e2e0:	46bd      	mov	sp, r7
 800e2e2:	bd80      	pop	{r7, pc}
 800e2e4:	20000118 	.word	0x20000118

0800e2e8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2e8:	b580      	push	{r7, lr}
 800e2ea:	b082      	sub	sp, #8
 800e2ec:	af00      	add	r7, sp, #0
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	6039      	str	r1, [r7, #0]
 800e2f2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e2f4:	79fb      	ldrb	r3, [r7, #7]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d105      	bne.n	800e306 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e2fa:	683a      	ldr	r2, [r7, #0]
 800e2fc:	4907      	ldr	r1, [pc, #28]	@ (800e31c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e2fe:	4808      	ldr	r0, [pc, #32]	@ (800e320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e300:	f7ff fd34 	bl	800dd6c <USBD_GetString>
 800e304:	e004      	b.n	800e310 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e306:	683a      	ldr	r2, [r7, #0]
 800e308:	4904      	ldr	r1, [pc, #16]	@ (800e31c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e30a:	4805      	ldr	r0, [pc, #20]	@ (800e320 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e30c:	f7ff fd2e 	bl	800dd6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e310:	4b02      	ldr	r3, [pc, #8]	@ (800e31c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e312:	4618      	mov	r0, r3
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
 800e31a:	bf00      	nop
 800e31c:	20001214 	.word	0x20001214
 800e320:	0800f404 	.word	0x0800f404

0800e324 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b082      	sub	sp, #8
 800e328:	af00      	add	r7, sp, #0
 800e32a:	4603      	mov	r3, r0
 800e32c:	6039      	str	r1, [r7, #0]
 800e32e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e330:	79fb      	ldrb	r3, [r7, #7]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d105      	bne.n	800e342 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e336:	683a      	ldr	r2, [r7, #0]
 800e338:	4907      	ldr	r1, [pc, #28]	@ (800e358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e33a:	4808      	ldr	r0, [pc, #32]	@ (800e35c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e33c:	f7ff fd16 	bl	800dd6c <USBD_GetString>
 800e340:	e004      	b.n	800e34c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e342:	683a      	ldr	r2, [r7, #0]
 800e344:	4904      	ldr	r1, [pc, #16]	@ (800e358 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e346:	4805      	ldr	r0, [pc, #20]	@ (800e35c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e348:	f7ff fd10 	bl	800dd6c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e34c:	4b02      	ldr	r3, [pc, #8]	@ (800e358 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e34e:	4618      	mov	r0, r3
 800e350:	3708      	adds	r7, #8
 800e352:	46bd      	mov	sp, r7
 800e354:	bd80      	pop	{r7, pc}
 800e356:	bf00      	nop
 800e358:	20001214 	.word	0x20001214
 800e35c:	0800f410 	.word	0x0800f410

0800e360 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b084      	sub	sp, #16
 800e364:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e366:	4b0f      	ldr	r3, [pc, #60]	@ (800e3a4 <Get_SerialNum+0x44>)
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e36c:	4b0e      	ldr	r3, [pc, #56]	@ (800e3a8 <Get_SerialNum+0x48>)
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e372:	4b0e      	ldr	r3, [pc, #56]	@ (800e3ac <Get_SerialNum+0x4c>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e378:	68fa      	ldr	r2, [r7, #12]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	4413      	add	r3, r2
 800e37e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d009      	beq.n	800e39a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e386:	2208      	movs	r2, #8
 800e388:	4909      	ldr	r1, [pc, #36]	@ (800e3b0 <Get_SerialNum+0x50>)
 800e38a:	68f8      	ldr	r0, [r7, #12]
 800e38c:	f000 f814 	bl	800e3b8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e390:	2204      	movs	r2, #4
 800e392:	4908      	ldr	r1, [pc, #32]	@ (800e3b4 <Get_SerialNum+0x54>)
 800e394:	68b8      	ldr	r0, [r7, #8]
 800e396:	f000 f80f 	bl	800e3b8 <IntToUnicode>
  }
}
 800e39a:	bf00      	nop
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	1fff7a10 	.word	0x1fff7a10
 800e3a8:	1fff7a14 	.word	0x1fff7a14
 800e3ac:	1fff7a18 	.word	0x1fff7a18
 800e3b0:	2000011a 	.word	0x2000011a
 800e3b4:	2000012a 	.word	0x2000012a

0800e3b8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e3b8:	b480      	push	{r7}
 800e3ba:	b087      	sub	sp, #28
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	4613      	mov	r3, r2
 800e3c4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e3c6:	2300      	movs	r3, #0
 800e3c8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	75fb      	strb	r3, [r7, #23]
 800e3ce:	e027      	b.n	800e420 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	0f1b      	lsrs	r3, r3, #28
 800e3d4:	2b09      	cmp	r3, #9
 800e3d6:	d80b      	bhi.n	800e3f0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	0f1b      	lsrs	r3, r3, #28
 800e3dc:	b2da      	uxtb	r2, r3
 800e3de:	7dfb      	ldrb	r3, [r7, #23]
 800e3e0:	005b      	lsls	r3, r3, #1
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	440b      	add	r3, r1
 800e3e8:	3230      	adds	r2, #48	@ 0x30
 800e3ea:	b2d2      	uxtb	r2, r2
 800e3ec:	701a      	strb	r2, [r3, #0]
 800e3ee:	e00a      	b.n	800e406 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	0f1b      	lsrs	r3, r3, #28
 800e3f4:	b2da      	uxtb	r2, r3
 800e3f6:	7dfb      	ldrb	r3, [r7, #23]
 800e3f8:	005b      	lsls	r3, r3, #1
 800e3fa:	4619      	mov	r1, r3
 800e3fc:	68bb      	ldr	r3, [r7, #8]
 800e3fe:	440b      	add	r3, r1
 800e400:	3237      	adds	r2, #55	@ 0x37
 800e402:	b2d2      	uxtb	r2, r2
 800e404:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	011b      	lsls	r3, r3, #4
 800e40a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e40c:	7dfb      	ldrb	r3, [r7, #23]
 800e40e:	005b      	lsls	r3, r3, #1
 800e410:	3301      	adds	r3, #1
 800e412:	68ba      	ldr	r2, [r7, #8]
 800e414:	4413      	add	r3, r2
 800e416:	2200      	movs	r2, #0
 800e418:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e41a:	7dfb      	ldrb	r3, [r7, #23]
 800e41c:	3301      	adds	r3, #1
 800e41e:	75fb      	strb	r3, [r7, #23]
 800e420:	7dfa      	ldrb	r2, [r7, #23]
 800e422:	79fb      	ldrb	r3, [r7, #7]
 800e424:	429a      	cmp	r2, r3
 800e426:	d3d3      	bcc.n	800e3d0 <IntToUnicode+0x18>
  }
}
 800e428:	bf00      	nop
 800e42a:	bf00      	nop
 800e42c:	371c      	adds	r7, #28
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr
	...

0800e438 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b08a      	sub	sp, #40	@ 0x28
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e440:	f107 0314 	add.w	r3, r7, #20
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]
 800e448:	605a      	str	r2, [r3, #4]
 800e44a:	609a      	str	r2, [r3, #8]
 800e44c:	60da      	str	r2, [r3, #12]
 800e44e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e458:	d13a      	bne.n	800e4d0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e45a:	2300      	movs	r3, #0
 800e45c:	613b      	str	r3, [r7, #16]
 800e45e:	4b1e      	ldr	r3, [pc, #120]	@ (800e4d8 <HAL_PCD_MspInit+0xa0>)
 800e460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e462:	4a1d      	ldr	r2, [pc, #116]	@ (800e4d8 <HAL_PCD_MspInit+0xa0>)
 800e464:	f043 0301 	orr.w	r3, r3, #1
 800e468:	6313      	str	r3, [r2, #48]	@ 0x30
 800e46a:	4b1b      	ldr	r3, [pc, #108]	@ (800e4d8 <HAL_PCD_MspInit+0xa0>)
 800e46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e46e:	f003 0301 	and.w	r3, r3, #1
 800e472:	613b      	str	r3, [r7, #16]
 800e474:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e476:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e47a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e47c:	2302      	movs	r3, #2
 800e47e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e480:	2300      	movs	r3, #0
 800e482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e484:	2303      	movs	r3, #3
 800e486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e488:	230a      	movs	r3, #10
 800e48a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e48c:	f107 0314 	add.w	r3, r7, #20
 800e490:	4619      	mov	r1, r3
 800e492:	4812      	ldr	r0, [pc, #72]	@ (800e4dc <HAL_PCD_MspInit+0xa4>)
 800e494:	f7f6 fb8a 	bl	8004bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e498:	4b0f      	ldr	r3, [pc, #60]	@ (800e4d8 <HAL_PCD_MspInit+0xa0>)
 800e49a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e49c:	4a0e      	ldr	r2, [pc, #56]	@ (800e4d8 <HAL_PCD_MspInit+0xa0>)
 800e49e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4a2:	6353      	str	r3, [r2, #52]	@ 0x34
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	60fb      	str	r3, [r7, #12]
 800e4a8:	4b0b      	ldr	r3, [pc, #44]	@ (800e4d8 <HAL_PCD_MspInit+0xa0>)
 800e4aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4ac:	4a0a      	ldr	r2, [pc, #40]	@ (800e4d8 <HAL_PCD_MspInit+0xa0>)
 800e4ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e4b2:	6453      	str	r3, [r2, #68]	@ 0x44
 800e4b4:	4b08      	ldr	r3, [pc, #32]	@ (800e4d8 <HAL_PCD_MspInit+0xa0>)
 800e4b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4bc:	60fb      	str	r3, [r7, #12]
 800e4be:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e4c0:	2200      	movs	r2, #0
 800e4c2:	2100      	movs	r1, #0
 800e4c4:	2043      	movs	r0, #67	@ 0x43
 800e4c6:	f7f5 ff8e 	bl	80043e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e4ca:	2043      	movs	r0, #67	@ 0x43
 800e4cc:	f7f5 ffa7 	bl	800441e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e4d0:	bf00      	nop
 800e4d2:	3728      	adds	r7, #40	@ 0x28
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	bd80      	pop	{r7, pc}
 800e4d8:	40023800 	.word	0x40023800
 800e4dc:	40020000 	.word	0x40020000

0800e4e0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b082      	sub	sp, #8
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	f7fe fabf 	bl	800ca7a <USBD_LL_SetupStage>
}
 800e4fc:	bf00      	nop
 800e4fe:	3708      	adds	r7, #8
 800e500:	46bd      	mov	sp, r7
 800e502:	bd80      	pop	{r7, pc}

0800e504 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e504:	b580      	push	{r7, lr}
 800e506:	b082      	sub	sp, #8
 800e508:	af00      	add	r7, sp, #0
 800e50a:	6078      	str	r0, [r7, #4]
 800e50c:	460b      	mov	r3, r1
 800e50e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e516:	78fa      	ldrb	r2, [r7, #3]
 800e518:	6879      	ldr	r1, [r7, #4]
 800e51a:	4613      	mov	r3, r2
 800e51c:	00db      	lsls	r3, r3, #3
 800e51e:	4413      	add	r3, r2
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	440b      	add	r3, r1
 800e524:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e528:	681a      	ldr	r2, [r3, #0]
 800e52a:	78fb      	ldrb	r3, [r7, #3]
 800e52c:	4619      	mov	r1, r3
 800e52e:	f7fe faf9 	bl	800cb24 <USBD_LL_DataOutStage>
}
 800e532:	bf00      	nop
 800e534:	3708      	adds	r7, #8
 800e536:	46bd      	mov	sp, r7
 800e538:	bd80      	pop	{r7, pc}

0800e53a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e53a:	b580      	push	{r7, lr}
 800e53c:	b082      	sub	sp, #8
 800e53e:	af00      	add	r7, sp, #0
 800e540:	6078      	str	r0, [r7, #4]
 800e542:	460b      	mov	r3, r1
 800e544:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e54c:	78fa      	ldrb	r2, [r7, #3]
 800e54e:	6879      	ldr	r1, [r7, #4]
 800e550:	4613      	mov	r3, r2
 800e552:	00db      	lsls	r3, r3, #3
 800e554:	4413      	add	r3, r2
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	440b      	add	r3, r1
 800e55a:	3320      	adds	r3, #32
 800e55c:	681a      	ldr	r2, [r3, #0]
 800e55e:	78fb      	ldrb	r3, [r7, #3]
 800e560:	4619      	mov	r1, r3
 800e562:	f7fe fb9b 	bl	800cc9c <USBD_LL_DataInStage>
}
 800e566:	bf00      	nop
 800e568:	3708      	adds	r7, #8
 800e56a:	46bd      	mov	sp, r7
 800e56c:	bd80      	pop	{r7, pc}

0800e56e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e56e:	b580      	push	{r7, lr}
 800e570:	b082      	sub	sp, #8
 800e572:	af00      	add	r7, sp, #0
 800e574:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e57c:	4618      	mov	r0, r3
 800e57e:	f7fe fcdf 	bl	800cf40 <USBD_LL_SOF>
}
 800e582:	bf00      	nop
 800e584:	3708      	adds	r7, #8
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b084      	sub	sp, #16
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e592:	2301      	movs	r3, #1
 800e594:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	79db      	ldrb	r3, [r3, #7]
 800e59a:	2b02      	cmp	r3, #2
 800e59c:	d001      	beq.n	800e5a2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e59e:	f7f3 fcd7 	bl	8001f50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5a8:	7bfa      	ldrb	r2, [r7, #15]
 800e5aa:	4611      	mov	r1, r2
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	f7fe fc83 	bl	800ceb8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	f7fe fc2a 	bl	800ce12 <USBD_LL_Reset>
}
 800e5be:	bf00      	nop
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}
	...

0800e5c8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5c8:	b580      	push	{r7, lr}
 800e5ca:	b082      	sub	sp, #8
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	f7fe fc7e 	bl	800ced8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	687a      	ldr	r2, [r7, #4]
 800e5e8:	6812      	ldr	r2, [r2, #0]
 800e5ea:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e5ee:	f043 0301 	orr.w	r3, r3, #1
 800e5f2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	7adb      	ldrb	r3, [r3, #11]
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d005      	beq.n	800e608 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e5fc:	4b04      	ldr	r3, [pc, #16]	@ (800e610 <HAL_PCD_SuspendCallback+0x48>)
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	4a03      	ldr	r2, [pc, #12]	@ (800e610 <HAL_PCD_SuspendCallback+0x48>)
 800e602:	f043 0306 	orr.w	r3, r3, #6
 800e606:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e608:	bf00      	nop
 800e60a:	3708      	adds	r7, #8
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	e000ed00 	.word	0xe000ed00

0800e614 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e614:	b580      	push	{r7, lr}
 800e616:	b082      	sub	sp, #8
 800e618:	af00      	add	r7, sp, #0
 800e61a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e622:	4618      	mov	r0, r3
 800e624:	f7fe fc74 	bl	800cf10 <USBD_LL_Resume>
}
 800e628:	bf00      	nop
 800e62a:	3708      	adds	r7, #8
 800e62c:	46bd      	mov	sp, r7
 800e62e:	bd80      	pop	{r7, pc}

0800e630 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e630:	b580      	push	{r7, lr}
 800e632:	b082      	sub	sp, #8
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	460b      	mov	r3, r1
 800e63a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e642:	78fa      	ldrb	r2, [r7, #3]
 800e644:	4611      	mov	r1, r2
 800e646:	4618      	mov	r0, r3
 800e648:	f7fe fccc 	bl	800cfe4 <USBD_LL_IsoOUTIncomplete>
}
 800e64c:	bf00      	nop
 800e64e:	3708      	adds	r7, #8
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}

0800e654 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e654:	b580      	push	{r7, lr}
 800e656:	b082      	sub	sp, #8
 800e658:	af00      	add	r7, sp, #0
 800e65a:	6078      	str	r0, [r7, #4]
 800e65c:	460b      	mov	r3, r1
 800e65e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e666:	78fa      	ldrb	r2, [r7, #3]
 800e668:	4611      	mov	r1, r2
 800e66a:	4618      	mov	r0, r3
 800e66c:	f7fe fc88 	bl	800cf80 <USBD_LL_IsoINIncomplete>
}
 800e670:	bf00      	nop
 800e672:	3708      	adds	r7, #8
 800e674:	46bd      	mov	sp, r7
 800e676:	bd80      	pop	{r7, pc}

0800e678 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e678:	b580      	push	{r7, lr}
 800e67a:	b082      	sub	sp, #8
 800e67c:	af00      	add	r7, sp, #0
 800e67e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e686:	4618      	mov	r0, r3
 800e688:	f7fe fcde 	bl	800d048 <USBD_LL_DevConnected>
}
 800e68c:	bf00      	nop
 800e68e:	3708      	adds	r7, #8
 800e690:	46bd      	mov	sp, r7
 800e692:	bd80      	pop	{r7, pc}

0800e694 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e694:	b580      	push	{r7, lr}
 800e696:	b082      	sub	sp, #8
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	f7fe fcdb 	bl	800d05e <USBD_LL_DevDisconnected>
}
 800e6a8:	bf00      	nop
 800e6aa:	3708      	adds	r7, #8
 800e6ac:	46bd      	mov	sp, r7
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	b082      	sub	sp, #8
 800e6b4:	af00      	add	r7, sp, #0
 800e6b6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	781b      	ldrb	r3, [r3, #0]
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d13c      	bne.n	800e73a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e6c0:	4a20      	ldr	r2, [pc, #128]	@ (800e744 <USBD_LL_Init+0x94>)
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	4a1e      	ldr	r2, [pc, #120]	@ (800e744 <USBD_LL_Init+0x94>)
 800e6cc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e6d0:	4b1c      	ldr	r3, [pc, #112]	@ (800e744 <USBD_LL_Init+0x94>)
 800e6d2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e6d6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e6d8:	4b1a      	ldr	r3, [pc, #104]	@ (800e744 <USBD_LL_Init+0x94>)
 800e6da:	2204      	movs	r2, #4
 800e6dc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e6de:	4b19      	ldr	r3, [pc, #100]	@ (800e744 <USBD_LL_Init+0x94>)
 800e6e0:	2202      	movs	r2, #2
 800e6e2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e6e4:	4b17      	ldr	r3, [pc, #92]	@ (800e744 <USBD_LL_Init+0x94>)
 800e6e6:	2200      	movs	r2, #0
 800e6e8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e6ea:	4b16      	ldr	r3, [pc, #88]	@ (800e744 <USBD_LL_Init+0x94>)
 800e6ec:	2202      	movs	r2, #2
 800e6ee:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e6f0:	4b14      	ldr	r3, [pc, #80]	@ (800e744 <USBD_LL_Init+0x94>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e6f6:	4b13      	ldr	r3, [pc, #76]	@ (800e744 <USBD_LL_Init+0x94>)
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e6fc:	4b11      	ldr	r3, [pc, #68]	@ (800e744 <USBD_LL_Init+0x94>)
 800e6fe:	2200      	movs	r2, #0
 800e700:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e702:	4b10      	ldr	r3, [pc, #64]	@ (800e744 <USBD_LL_Init+0x94>)
 800e704:	2200      	movs	r2, #0
 800e706:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e708:	4b0e      	ldr	r3, [pc, #56]	@ (800e744 <USBD_LL_Init+0x94>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e70e:	480d      	ldr	r0, [pc, #52]	@ (800e744 <USBD_LL_Init+0x94>)
 800e710:	f7f9 fa9c 	bl	8007c4c <HAL_PCD_Init>
 800e714:	4603      	mov	r3, r0
 800e716:	2b00      	cmp	r3, #0
 800e718:	d001      	beq.n	800e71e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e71a:	f7f3 fc19 	bl	8001f50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e71e:	2180      	movs	r1, #128	@ 0x80
 800e720:	4808      	ldr	r0, [pc, #32]	@ (800e744 <USBD_LL_Init+0x94>)
 800e722:	f7fa fcc8 	bl	80090b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e726:	2240      	movs	r2, #64	@ 0x40
 800e728:	2100      	movs	r1, #0
 800e72a:	4806      	ldr	r0, [pc, #24]	@ (800e744 <USBD_LL_Init+0x94>)
 800e72c:	f7fa fc7c 	bl	8009028 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e730:	2280      	movs	r2, #128	@ 0x80
 800e732:	2101      	movs	r1, #1
 800e734:	4803      	ldr	r0, [pc, #12]	@ (800e744 <USBD_LL_Init+0x94>)
 800e736:	f7fa fc77 	bl	8009028 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e73a:	2300      	movs	r3, #0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}
 800e744:	20001414 	.word	0x20001414

0800e748 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	b084      	sub	sp, #16
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e750:	2300      	movs	r3, #0
 800e752:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e754:	2300      	movs	r3, #0
 800e756:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e75e:	4618      	mov	r0, r3
 800e760:	f7f9 fb83 	bl	8007e6a <HAL_PCD_Start>
 800e764:	4603      	mov	r3, r0
 800e766:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e768:	7bfb      	ldrb	r3, [r7, #15]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f000 f942 	bl	800e9f4 <USBD_Get_USB_Status>
 800e770:	4603      	mov	r3, r0
 800e772:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e774:	7bbb      	ldrb	r3, [r7, #14]
}
 800e776:	4618      	mov	r0, r3
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b084      	sub	sp, #16
 800e782:	af00      	add	r7, sp, #0
 800e784:	6078      	str	r0, [r7, #4]
 800e786:	4608      	mov	r0, r1
 800e788:	4611      	mov	r1, r2
 800e78a:	461a      	mov	r2, r3
 800e78c:	4603      	mov	r3, r0
 800e78e:	70fb      	strb	r3, [r7, #3]
 800e790:	460b      	mov	r3, r1
 800e792:	70bb      	strb	r3, [r7, #2]
 800e794:	4613      	mov	r3, r2
 800e796:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e798:	2300      	movs	r3, #0
 800e79a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e79c:	2300      	movs	r3, #0
 800e79e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e7a6:	78bb      	ldrb	r3, [r7, #2]
 800e7a8:	883a      	ldrh	r2, [r7, #0]
 800e7aa:	78f9      	ldrb	r1, [r7, #3]
 800e7ac:	f7fa f857 	bl	800885e <HAL_PCD_EP_Open>
 800e7b0:	4603      	mov	r3, r0
 800e7b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7b4:	7bfb      	ldrb	r3, [r7, #15]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f000 f91c 	bl	800e9f4 <USBD_Get_USB_Status>
 800e7bc:	4603      	mov	r3, r0
 800e7be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3710      	adds	r7, #16
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7e4:	78fa      	ldrb	r2, [r7, #3]
 800e7e6:	4611      	mov	r1, r2
 800e7e8:	4618      	mov	r0, r3
 800e7ea:	f7fa f8a2 	bl	8008932 <HAL_PCD_EP_Close>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7f2:	7bfb      	ldrb	r3, [r7, #15]
 800e7f4:	4618      	mov	r0, r3
 800e7f6:	f000 f8fd 	bl	800e9f4 <USBD_Get_USB_Status>
 800e7fa:	4603      	mov	r3, r0
 800e7fc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800e800:	4618      	mov	r0, r3
 800e802:	3710      	adds	r7, #16
 800e804:	46bd      	mov	sp, r7
 800e806:	bd80      	pop	{r7, pc}

0800e808 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b084      	sub	sp, #16
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	460b      	mov	r3, r1
 800e812:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e814:	2300      	movs	r3, #0
 800e816:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e818:	2300      	movs	r3, #0
 800e81a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e822:	78fa      	ldrb	r2, [r7, #3]
 800e824:	4611      	mov	r1, r2
 800e826:	4618      	mov	r0, r3
 800e828:	f7fa f95a 	bl	8008ae0 <HAL_PCD_EP_SetStall>
 800e82c:	4603      	mov	r3, r0
 800e82e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e830:	7bfb      	ldrb	r3, [r7, #15]
 800e832:	4618      	mov	r0, r3
 800e834:	f000 f8de 	bl	800e9f4 <USBD_Get_USB_Status>
 800e838:	4603      	mov	r3, r0
 800e83a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e83c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}

0800e846 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e846:	b580      	push	{r7, lr}
 800e848:	b084      	sub	sp, #16
 800e84a:	af00      	add	r7, sp, #0
 800e84c:	6078      	str	r0, [r7, #4]
 800e84e:	460b      	mov	r3, r1
 800e850:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e852:	2300      	movs	r3, #0
 800e854:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e856:	2300      	movs	r3, #0
 800e858:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e860:	78fa      	ldrb	r2, [r7, #3]
 800e862:	4611      	mov	r1, r2
 800e864:	4618      	mov	r0, r3
 800e866:	f7fa f99e 	bl	8008ba6 <HAL_PCD_EP_ClrStall>
 800e86a:	4603      	mov	r3, r0
 800e86c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e86e:	7bfb      	ldrb	r3, [r7, #15]
 800e870:	4618      	mov	r0, r3
 800e872:	f000 f8bf 	bl	800e9f4 <USBD_Get_USB_Status>
 800e876:	4603      	mov	r3, r0
 800e878:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e87a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3710      	adds	r7, #16
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e884:	b480      	push	{r7}
 800e886:	b085      	sub	sp, #20
 800e888:	af00      	add	r7, sp, #0
 800e88a:	6078      	str	r0, [r7, #4]
 800e88c:	460b      	mov	r3, r1
 800e88e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e896:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e898:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	da0b      	bge.n	800e8b8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e8a0:	78fb      	ldrb	r3, [r7, #3]
 800e8a2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8a6:	68f9      	ldr	r1, [r7, #12]
 800e8a8:	4613      	mov	r3, r2
 800e8aa:	00db      	lsls	r3, r3, #3
 800e8ac:	4413      	add	r3, r2
 800e8ae:	009b      	lsls	r3, r3, #2
 800e8b0:	440b      	add	r3, r1
 800e8b2:	3316      	adds	r3, #22
 800e8b4:	781b      	ldrb	r3, [r3, #0]
 800e8b6:	e00b      	b.n	800e8d0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e8b8:	78fb      	ldrb	r3, [r7, #3]
 800e8ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8be:	68f9      	ldr	r1, [r7, #12]
 800e8c0:	4613      	mov	r3, r2
 800e8c2:	00db      	lsls	r3, r3, #3
 800e8c4:	4413      	add	r3, r2
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	440b      	add	r3, r1
 800e8ca:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e8ce:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	3714      	adds	r7, #20
 800e8d4:	46bd      	mov	sp, r7
 800e8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8da:	4770      	bx	lr

0800e8dc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b084      	sub	sp, #16
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e8f6:	78fa      	ldrb	r2, [r7, #3]
 800e8f8:	4611      	mov	r1, r2
 800e8fa:	4618      	mov	r0, r3
 800e8fc:	f7f9 ff8b 	bl	8008816 <HAL_PCD_SetAddress>
 800e900:	4603      	mov	r3, r0
 800e902:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e904:	7bfb      	ldrb	r3, [r7, #15]
 800e906:	4618      	mov	r0, r3
 800e908:	f000 f874 	bl	800e9f4 <USBD_Get_USB_Status>
 800e90c:	4603      	mov	r3, r0
 800e90e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e910:	7bbb      	ldrb	r3, [r7, #14]
}
 800e912:	4618      	mov	r0, r3
 800e914:	3710      	adds	r7, #16
 800e916:	46bd      	mov	sp, r7
 800e918:	bd80      	pop	{r7, pc}

0800e91a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e91a:	b580      	push	{r7, lr}
 800e91c:	b086      	sub	sp, #24
 800e91e:	af00      	add	r7, sp, #0
 800e920:	60f8      	str	r0, [r7, #12]
 800e922:	607a      	str	r2, [r7, #4]
 800e924:	603b      	str	r3, [r7, #0]
 800e926:	460b      	mov	r3, r1
 800e928:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e92a:	2300      	movs	r3, #0
 800e92c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e92e:	2300      	movs	r3, #0
 800e930:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e938:	7af9      	ldrb	r1, [r7, #11]
 800e93a:	683b      	ldr	r3, [r7, #0]
 800e93c:	687a      	ldr	r2, [r7, #4]
 800e93e:	f7fa f895 	bl	8008a6c <HAL_PCD_EP_Transmit>
 800e942:	4603      	mov	r3, r0
 800e944:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e946:	7dfb      	ldrb	r3, [r7, #23]
 800e948:	4618      	mov	r0, r3
 800e94a:	f000 f853 	bl	800e9f4 <USBD_Get_USB_Status>
 800e94e:	4603      	mov	r3, r0
 800e950:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e952:	7dbb      	ldrb	r3, [r7, #22]
}
 800e954:	4618      	mov	r0, r3
 800e956:	3718      	adds	r7, #24
 800e958:	46bd      	mov	sp, r7
 800e95a:	bd80      	pop	{r7, pc}

0800e95c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e95c:	b580      	push	{r7, lr}
 800e95e:	b086      	sub	sp, #24
 800e960:	af00      	add	r7, sp, #0
 800e962:	60f8      	str	r0, [r7, #12]
 800e964:	607a      	str	r2, [r7, #4]
 800e966:	603b      	str	r3, [r7, #0]
 800e968:	460b      	mov	r3, r1
 800e96a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e96c:	2300      	movs	r3, #0
 800e96e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e970:	2300      	movs	r3, #0
 800e972:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e97a:	7af9      	ldrb	r1, [r7, #11]
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	687a      	ldr	r2, [r7, #4]
 800e980:	f7fa f821 	bl	80089c6 <HAL_PCD_EP_Receive>
 800e984:	4603      	mov	r3, r0
 800e986:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e988:	7dfb      	ldrb	r3, [r7, #23]
 800e98a:	4618      	mov	r0, r3
 800e98c:	f000 f832 	bl	800e9f4 <USBD_Get_USB_Status>
 800e990:	4603      	mov	r3, r0
 800e992:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e994:	7dbb      	ldrb	r3, [r7, #22]
}
 800e996:	4618      	mov	r0, r3
 800e998:	3718      	adds	r7, #24
 800e99a:	46bd      	mov	sp, r7
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e99e:	b580      	push	{r7, lr}
 800e9a0:	b082      	sub	sp, #8
 800e9a2:	af00      	add	r7, sp, #0
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	460b      	mov	r3, r1
 800e9a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e9b0:	78fa      	ldrb	r2, [r7, #3]
 800e9b2:	4611      	mov	r1, r2
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f7fa f841 	bl	8008a3c <HAL_PCD_EP_GetRxCount>
 800e9ba:	4603      	mov	r3, r0
}
 800e9bc:	4618      	mov	r0, r3
 800e9be:	3708      	adds	r7, #8
 800e9c0:	46bd      	mov	sp, r7
 800e9c2:	bd80      	pop	{r7, pc}

0800e9c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e9c4:	b480      	push	{r7}
 800e9c6:	b083      	sub	sp, #12
 800e9c8:	af00      	add	r7, sp, #0
 800e9ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e9cc:	4b03      	ldr	r3, [pc, #12]	@ (800e9dc <USBD_static_malloc+0x18>)
}
 800e9ce:	4618      	mov	r0, r3
 800e9d0:	370c      	adds	r7, #12
 800e9d2:	46bd      	mov	sp, r7
 800e9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d8:	4770      	bx	lr
 800e9da:	bf00      	nop
 800e9dc:	200018f8 	.word	0x200018f8

0800e9e0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b083      	sub	sp, #12
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]

}
 800e9e8:	bf00      	nop
 800e9ea:	370c      	adds	r7, #12
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	4603      	mov	r3, r0
 800e9fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea02:	79fb      	ldrb	r3, [r7, #7]
 800ea04:	2b03      	cmp	r3, #3
 800ea06:	d817      	bhi.n	800ea38 <USBD_Get_USB_Status+0x44>
 800ea08:	a201      	add	r2, pc, #4	@ (adr r2, 800ea10 <USBD_Get_USB_Status+0x1c>)
 800ea0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea0e:	bf00      	nop
 800ea10:	0800ea21 	.word	0x0800ea21
 800ea14:	0800ea27 	.word	0x0800ea27
 800ea18:	0800ea2d 	.word	0x0800ea2d
 800ea1c:	0800ea33 	.word	0x0800ea33
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea20:	2300      	movs	r3, #0
 800ea22:	73fb      	strb	r3, [r7, #15]
    break;
 800ea24:	e00b      	b.n	800ea3e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea26:	2303      	movs	r3, #3
 800ea28:	73fb      	strb	r3, [r7, #15]
    break;
 800ea2a:	e008      	b.n	800ea3e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea2c:	2301      	movs	r3, #1
 800ea2e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea30:	e005      	b.n	800ea3e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea32:	2303      	movs	r3, #3
 800ea34:	73fb      	strb	r3, [r7, #15]
    break;
 800ea36:	e002      	b.n	800ea3e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea38:	2303      	movs	r3, #3
 800ea3a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea3c:	bf00      	nop
  }
  return usb_status;
 800ea3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea40:	4618      	mov	r0, r3
 800ea42:	3714      	adds	r7, #20
 800ea44:	46bd      	mov	sp, r7
 800ea46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea4a:	4770      	bx	lr

0800ea4c <sniprintf>:
 800ea4c:	b40c      	push	{r2, r3}
 800ea4e:	b530      	push	{r4, r5, lr}
 800ea50:	4b18      	ldr	r3, [pc, #96]	@ (800eab4 <sniprintf+0x68>)
 800ea52:	1e0c      	subs	r4, r1, #0
 800ea54:	681d      	ldr	r5, [r3, #0]
 800ea56:	b09d      	sub	sp, #116	@ 0x74
 800ea58:	da08      	bge.n	800ea6c <sniprintf+0x20>
 800ea5a:	238b      	movs	r3, #139	@ 0x8b
 800ea5c:	602b      	str	r3, [r5, #0]
 800ea5e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea62:	b01d      	add	sp, #116	@ 0x74
 800ea64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea68:	b002      	add	sp, #8
 800ea6a:	4770      	bx	lr
 800ea6c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ea70:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ea74:	f04f 0300 	mov.w	r3, #0
 800ea78:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ea7a:	bf14      	ite	ne
 800ea7c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ea80:	4623      	moveq	r3, r4
 800ea82:	9304      	str	r3, [sp, #16]
 800ea84:	9307      	str	r3, [sp, #28]
 800ea86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ea8a:	9002      	str	r0, [sp, #8]
 800ea8c:	9006      	str	r0, [sp, #24]
 800ea8e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ea92:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800ea94:	ab21      	add	r3, sp, #132	@ 0x84
 800ea96:	a902      	add	r1, sp, #8
 800ea98:	4628      	mov	r0, r5
 800ea9a:	9301      	str	r3, [sp, #4]
 800ea9c:	f000 f9a2 	bl	800ede4 <_svfiprintf_r>
 800eaa0:	1c43      	adds	r3, r0, #1
 800eaa2:	bfbc      	itt	lt
 800eaa4:	238b      	movlt	r3, #139	@ 0x8b
 800eaa6:	602b      	strlt	r3, [r5, #0]
 800eaa8:	2c00      	cmp	r4, #0
 800eaaa:	d0da      	beq.n	800ea62 <sniprintf+0x16>
 800eaac:	9b02      	ldr	r3, [sp, #8]
 800eaae:	2200      	movs	r2, #0
 800eab0:	701a      	strb	r2, [r3, #0]
 800eab2:	e7d6      	b.n	800ea62 <sniprintf+0x16>
 800eab4:	20000134 	.word	0x20000134

0800eab8 <memset>:
 800eab8:	4402      	add	r2, r0
 800eaba:	4603      	mov	r3, r0
 800eabc:	4293      	cmp	r3, r2
 800eabe:	d100      	bne.n	800eac2 <memset+0xa>
 800eac0:	4770      	bx	lr
 800eac2:	f803 1b01 	strb.w	r1, [r3], #1
 800eac6:	e7f9      	b.n	800eabc <memset+0x4>

0800eac8 <__errno>:
 800eac8:	4b01      	ldr	r3, [pc, #4]	@ (800ead0 <__errno+0x8>)
 800eaca:	6818      	ldr	r0, [r3, #0]
 800eacc:	4770      	bx	lr
 800eace:	bf00      	nop
 800ead0:	20000134 	.word	0x20000134

0800ead4 <__libc_init_array>:
 800ead4:	b570      	push	{r4, r5, r6, lr}
 800ead6:	4d0d      	ldr	r5, [pc, #52]	@ (800eb0c <__libc_init_array+0x38>)
 800ead8:	4c0d      	ldr	r4, [pc, #52]	@ (800eb10 <__libc_init_array+0x3c>)
 800eada:	1b64      	subs	r4, r4, r5
 800eadc:	10a4      	asrs	r4, r4, #2
 800eade:	2600      	movs	r6, #0
 800eae0:	42a6      	cmp	r6, r4
 800eae2:	d109      	bne.n	800eaf8 <__libc_init_array+0x24>
 800eae4:	4d0b      	ldr	r5, [pc, #44]	@ (800eb14 <__libc_init_array+0x40>)
 800eae6:	4c0c      	ldr	r4, [pc, #48]	@ (800eb18 <__libc_init_array+0x44>)
 800eae8:	f000 fc64 	bl	800f3b4 <_init>
 800eaec:	1b64      	subs	r4, r4, r5
 800eaee:	10a4      	asrs	r4, r4, #2
 800eaf0:	2600      	movs	r6, #0
 800eaf2:	42a6      	cmp	r6, r4
 800eaf4:	d105      	bne.n	800eb02 <__libc_init_array+0x2e>
 800eaf6:	bd70      	pop	{r4, r5, r6, pc}
 800eaf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800eafc:	4798      	blx	r3
 800eafe:	3601      	adds	r6, #1
 800eb00:	e7ee      	b.n	800eae0 <__libc_init_array+0xc>
 800eb02:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb06:	4798      	blx	r3
 800eb08:	3601      	adds	r6, #1
 800eb0a:	e7f2      	b.n	800eaf2 <__libc_init_array+0x1e>
 800eb0c:	0801096c 	.word	0x0801096c
 800eb10:	0801096c 	.word	0x0801096c
 800eb14:	0801096c 	.word	0x0801096c
 800eb18:	08010970 	.word	0x08010970

0800eb1c <__retarget_lock_acquire_recursive>:
 800eb1c:	4770      	bx	lr

0800eb1e <__retarget_lock_release_recursive>:
 800eb1e:	4770      	bx	lr

0800eb20 <memcpy>:
 800eb20:	440a      	add	r2, r1
 800eb22:	4291      	cmp	r1, r2
 800eb24:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb28:	d100      	bne.n	800eb2c <memcpy+0xc>
 800eb2a:	4770      	bx	lr
 800eb2c:	b510      	push	{r4, lr}
 800eb2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb36:	4291      	cmp	r1, r2
 800eb38:	d1f9      	bne.n	800eb2e <memcpy+0xe>
 800eb3a:	bd10      	pop	{r4, pc}

0800eb3c <_free_r>:
 800eb3c:	b538      	push	{r3, r4, r5, lr}
 800eb3e:	4605      	mov	r5, r0
 800eb40:	2900      	cmp	r1, #0
 800eb42:	d041      	beq.n	800ebc8 <_free_r+0x8c>
 800eb44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb48:	1f0c      	subs	r4, r1, #4
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	bfb8      	it	lt
 800eb4e:	18e4      	addlt	r4, r4, r3
 800eb50:	f000 f8e0 	bl	800ed14 <__malloc_lock>
 800eb54:	4a1d      	ldr	r2, [pc, #116]	@ (800ebcc <_free_r+0x90>)
 800eb56:	6813      	ldr	r3, [r2, #0]
 800eb58:	b933      	cbnz	r3, 800eb68 <_free_r+0x2c>
 800eb5a:	6063      	str	r3, [r4, #4]
 800eb5c:	6014      	str	r4, [r2, #0]
 800eb5e:	4628      	mov	r0, r5
 800eb60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb64:	f000 b8dc 	b.w	800ed20 <__malloc_unlock>
 800eb68:	42a3      	cmp	r3, r4
 800eb6a:	d908      	bls.n	800eb7e <_free_r+0x42>
 800eb6c:	6820      	ldr	r0, [r4, #0]
 800eb6e:	1821      	adds	r1, r4, r0
 800eb70:	428b      	cmp	r3, r1
 800eb72:	bf01      	itttt	eq
 800eb74:	6819      	ldreq	r1, [r3, #0]
 800eb76:	685b      	ldreq	r3, [r3, #4]
 800eb78:	1809      	addeq	r1, r1, r0
 800eb7a:	6021      	streq	r1, [r4, #0]
 800eb7c:	e7ed      	b.n	800eb5a <_free_r+0x1e>
 800eb7e:	461a      	mov	r2, r3
 800eb80:	685b      	ldr	r3, [r3, #4]
 800eb82:	b10b      	cbz	r3, 800eb88 <_free_r+0x4c>
 800eb84:	42a3      	cmp	r3, r4
 800eb86:	d9fa      	bls.n	800eb7e <_free_r+0x42>
 800eb88:	6811      	ldr	r1, [r2, #0]
 800eb8a:	1850      	adds	r0, r2, r1
 800eb8c:	42a0      	cmp	r0, r4
 800eb8e:	d10b      	bne.n	800eba8 <_free_r+0x6c>
 800eb90:	6820      	ldr	r0, [r4, #0]
 800eb92:	4401      	add	r1, r0
 800eb94:	1850      	adds	r0, r2, r1
 800eb96:	4283      	cmp	r3, r0
 800eb98:	6011      	str	r1, [r2, #0]
 800eb9a:	d1e0      	bne.n	800eb5e <_free_r+0x22>
 800eb9c:	6818      	ldr	r0, [r3, #0]
 800eb9e:	685b      	ldr	r3, [r3, #4]
 800eba0:	6053      	str	r3, [r2, #4]
 800eba2:	4408      	add	r0, r1
 800eba4:	6010      	str	r0, [r2, #0]
 800eba6:	e7da      	b.n	800eb5e <_free_r+0x22>
 800eba8:	d902      	bls.n	800ebb0 <_free_r+0x74>
 800ebaa:	230c      	movs	r3, #12
 800ebac:	602b      	str	r3, [r5, #0]
 800ebae:	e7d6      	b.n	800eb5e <_free_r+0x22>
 800ebb0:	6820      	ldr	r0, [r4, #0]
 800ebb2:	1821      	adds	r1, r4, r0
 800ebb4:	428b      	cmp	r3, r1
 800ebb6:	bf04      	itt	eq
 800ebb8:	6819      	ldreq	r1, [r3, #0]
 800ebba:	685b      	ldreq	r3, [r3, #4]
 800ebbc:	6063      	str	r3, [r4, #4]
 800ebbe:	bf04      	itt	eq
 800ebc0:	1809      	addeq	r1, r1, r0
 800ebc2:	6021      	streq	r1, [r4, #0]
 800ebc4:	6054      	str	r4, [r2, #4]
 800ebc6:	e7ca      	b.n	800eb5e <_free_r+0x22>
 800ebc8:	bd38      	pop	{r3, r4, r5, pc}
 800ebca:	bf00      	nop
 800ebcc:	20001c5c 	.word	0x20001c5c

0800ebd0 <sbrk_aligned>:
 800ebd0:	b570      	push	{r4, r5, r6, lr}
 800ebd2:	4e0f      	ldr	r6, [pc, #60]	@ (800ec10 <sbrk_aligned+0x40>)
 800ebd4:	460c      	mov	r4, r1
 800ebd6:	6831      	ldr	r1, [r6, #0]
 800ebd8:	4605      	mov	r5, r0
 800ebda:	b911      	cbnz	r1, 800ebe2 <sbrk_aligned+0x12>
 800ebdc:	f000 fba4 	bl	800f328 <_sbrk_r>
 800ebe0:	6030      	str	r0, [r6, #0]
 800ebe2:	4621      	mov	r1, r4
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	f000 fb9f 	bl	800f328 <_sbrk_r>
 800ebea:	1c43      	adds	r3, r0, #1
 800ebec:	d103      	bne.n	800ebf6 <sbrk_aligned+0x26>
 800ebee:	f04f 34ff 	mov.w	r4, #4294967295
 800ebf2:	4620      	mov	r0, r4
 800ebf4:	bd70      	pop	{r4, r5, r6, pc}
 800ebf6:	1cc4      	adds	r4, r0, #3
 800ebf8:	f024 0403 	bic.w	r4, r4, #3
 800ebfc:	42a0      	cmp	r0, r4
 800ebfe:	d0f8      	beq.n	800ebf2 <sbrk_aligned+0x22>
 800ec00:	1a21      	subs	r1, r4, r0
 800ec02:	4628      	mov	r0, r5
 800ec04:	f000 fb90 	bl	800f328 <_sbrk_r>
 800ec08:	3001      	adds	r0, #1
 800ec0a:	d1f2      	bne.n	800ebf2 <sbrk_aligned+0x22>
 800ec0c:	e7ef      	b.n	800ebee <sbrk_aligned+0x1e>
 800ec0e:	bf00      	nop
 800ec10:	20001c58 	.word	0x20001c58

0800ec14 <_malloc_r>:
 800ec14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec18:	1ccd      	adds	r5, r1, #3
 800ec1a:	f025 0503 	bic.w	r5, r5, #3
 800ec1e:	3508      	adds	r5, #8
 800ec20:	2d0c      	cmp	r5, #12
 800ec22:	bf38      	it	cc
 800ec24:	250c      	movcc	r5, #12
 800ec26:	2d00      	cmp	r5, #0
 800ec28:	4606      	mov	r6, r0
 800ec2a:	db01      	blt.n	800ec30 <_malloc_r+0x1c>
 800ec2c:	42a9      	cmp	r1, r5
 800ec2e:	d904      	bls.n	800ec3a <_malloc_r+0x26>
 800ec30:	230c      	movs	r3, #12
 800ec32:	6033      	str	r3, [r6, #0]
 800ec34:	2000      	movs	r0, #0
 800ec36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec3a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed10 <_malloc_r+0xfc>
 800ec3e:	f000 f869 	bl	800ed14 <__malloc_lock>
 800ec42:	f8d8 3000 	ldr.w	r3, [r8]
 800ec46:	461c      	mov	r4, r3
 800ec48:	bb44      	cbnz	r4, 800ec9c <_malloc_r+0x88>
 800ec4a:	4629      	mov	r1, r5
 800ec4c:	4630      	mov	r0, r6
 800ec4e:	f7ff ffbf 	bl	800ebd0 <sbrk_aligned>
 800ec52:	1c43      	adds	r3, r0, #1
 800ec54:	4604      	mov	r4, r0
 800ec56:	d158      	bne.n	800ed0a <_malloc_r+0xf6>
 800ec58:	f8d8 4000 	ldr.w	r4, [r8]
 800ec5c:	4627      	mov	r7, r4
 800ec5e:	2f00      	cmp	r7, #0
 800ec60:	d143      	bne.n	800ecea <_malloc_r+0xd6>
 800ec62:	2c00      	cmp	r4, #0
 800ec64:	d04b      	beq.n	800ecfe <_malloc_r+0xea>
 800ec66:	6823      	ldr	r3, [r4, #0]
 800ec68:	4639      	mov	r1, r7
 800ec6a:	4630      	mov	r0, r6
 800ec6c:	eb04 0903 	add.w	r9, r4, r3
 800ec70:	f000 fb5a 	bl	800f328 <_sbrk_r>
 800ec74:	4581      	cmp	r9, r0
 800ec76:	d142      	bne.n	800ecfe <_malloc_r+0xea>
 800ec78:	6821      	ldr	r1, [r4, #0]
 800ec7a:	1a6d      	subs	r5, r5, r1
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	4630      	mov	r0, r6
 800ec80:	f7ff ffa6 	bl	800ebd0 <sbrk_aligned>
 800ec84:	3001      	adds	r0, #1
 800ec86:	d03a      	beq.n	800ecfe <_malloc_r+0xea>
 800ec88:	6823      	ldr	r3, [r4, #0]
 800ec8a:	442b      	add	r3, r5
 800ec8c:	6023      	str	r3, [r4, #0]
 800ec8e:	f8d8 3000 	ldr.w	r3, [r8]
 800ec92:	685a      	ldr	r2, [r3, #4]
 800ec94:	bb62      	cbnz	r2, 800ecf0 <_malloc_r+0xdc>
 800ec96:	f8c8 7000 	str.w	r7, [r8]
 800ec9a:	e00f      	b.n	800ecbc <_malloc_r+0xa8>
 800ec9c:	6822      	ldr	r2, [r4, #0]
 800ec9e:	1b52      	subs	r2, r2, r5
 800eca0:	d420      	bmi.n	800ece4 <_malloc_r+0xd0>
 800eca2:	2a0b      	cmp	r2, #11
 800eca4:	d917      	bls.n	800ecd6 <_malloc_r+0xc2>
 800eca6:	1961      	adds	r1, r4, r5
 800eca8:	42a3      	cmp	r3, r4
 800ecaa:	6025      	str	r5, [r4, #0]
 800ecac:	bf18      	it	ne
 800ecae:	6059      	strne	r1, [r3, #4]
 800ecb0:	6863      	ldr	r3, [r4, #4]
 800ecb2:	bf08      	it	eq
 800ecb4:	f8c8 1000 	streq.w	r1, [r8]
 800ecb8:	5162      	str	r2, [r4, r5]
 800ecba:	604b      	str	r3, [r1, #4]
 800ecbc:	4630      	mov	r0, r6
 800ecbe:	f000 f82f 	bl	800ed20 <__malloc_unlock>
 800ecc2:	f104 000b 	add.w	r0, r4, #11
 800ecc6:	1d23      	adds	r3, r4, #4
 800ecc8:	f020 0007 	bic.w	r0, r0, #7
 800eccc:	1ac2      	subs	r2, r0, r3
 800ecce:	bf1c      	itt	ne
 800ecd0:	1a1b      	subne	r3, r3, r0
 800ecd2:	50a3      	strne	r3, [r4, r2]
 800ecd4:	e7af      	b.n	800ec36 <_malloc_r+0x22>
 800ecd6:	6862      	ldr	r2, [r4, #4]
 800ecd8:	42a3      	cmp	r3, r4
 800ecda:	bf0c      	ite	eq
 800ecdc:	f8c8 2000 	streq.w	r2, [r8]
 800ece0:	605a      	strne	r2, [r3, #4]
 800ece2:	e7eb      	b.n	800ecbc <_malloc_r+0xa8>
 800ece4:	4623      	mov	r3, r4
 800ece6:	6864      	ldr	r4, [r4, #4]
 800ece8:	e7ae      	b.n	800ec48 <_malloc_r+0x34>
 800ecea:	463c      	mov	r4, r7
 800ecec:	687f      	ldr	r7, [r7, #4]
 800ecee:	e7b6      	b.n	800ec5e <_malloc_r+0x4a>
 800ecf0:	461a      	mov	r2, r3
 800ecf2:	685b      	ldr	r3, [r3, #4]
 800ecf4:	42a3      	cmp	r3, r4
 800ecf6:	d1fb      	bne.n	800ecf0 <_malloc_r+0xdc>
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	6053      	str	r3, [r2, #4]
 800ecfc:	e7de      	b.n	800ecbc <_malloc_r+0xa8>
 800ecfe:	230c      	movs	r3, #12
 800ed00:	6033      	str	r3, [r6, #0]
 800ed02:	4630      	mov	r0, r6
 800ed04:	f000 f80c 	bl	800ed20 <__malloc_unlock>
 800ed08:	e794      	b.n	800ec34 <_malloc_r+0x20>
 800ed0a:	6005      	str	r5, [r0, #0]
 800ed0c:	e7d6      	b.n	800ecbc <_malloc_r+0xa8>
 800ed0e:	bf00      	nop
 800ed10:	20001c5c 	.word	0x20001c5c

0800ed14 <__malloc_lock>:
 800ed14:	4801      	ldr	r0, [pc, #4]	@ (800ed1c <__malloc_lock+0x8>)
 800ed16:	f7ff bf01 	b.w	800eb1c <__retarget_lock_acquire_recursive>
 800ed1a:	bf00      	nop
 800ed1c:	20001c54 	.word	0x20001c54

0800ed20 <__malloc_unlock>:
 800ed20:	4801      	ldr	r0, [pc, #4]	@ (800ed28 <__malloc_unlock+0x8>)
 800ed22:	f7ff befc 	b.w	800eb1e <__retarget_lock_release_recursive>
 800ed26:	bf00      	nop
 800ed28:	20001c54 	.word	0x20001c54

0800ed2c <__ssputs_r>:
 800ed2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed30:	688e      	ldr	r6, [r1, #8]
 800ed32:	461f      	mov	r7, r3
 800ed34:	42be      	cmp	r6, r7
 800ed36:	680b      	ldr	r3, [r1, #0]
 800ed38:	4682      	mov	sl, r0
 800ed3a:	460c      	mov	r4, r1
 800ed3c:	4690      	mov	r8, r2
 800ed3e:	d82d      	bhi.n	800ed9c <__ssputs_r+0x70>
 800ed40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed48:	d026      	beq.n	800ed98 <__ssputs_r+0x6c>
 800ed4a:	6965      	ldr	r5, [r4, #20]
 800ed4c:	6909      	ldr	r1, [r1, #16]
 800ed4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed52:	eba3 0901 	sub.w	r9, r3, r1
 800ed56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed5a:	1c7b      	adds	r3, r7, #1
 800ed5c:	444b      	add	r3, r9
 800ed5e:	106d      	asrs	r5, r5, #1
 800ed60:	429d      	cmp	r5, r3
 800ed62:	bf38      	it	cc
 800ed64:	461d      	movcc	r5, r3
 800ed66:	0553      	lsls	r3, r2, #21
 800ed68:	d527      	bpl.n	800edba <__ssputs_r+0x8e>
 800ed6a:	4629      	mov	r1, r5
 800ed6c:	f7ff ff52 	bl	800ec14 <_malloc_r>
 800ed70:	4606      	mov	r6, r0
 800ed72:	b360      	cbz	r0, 800edce <__ssputs_r+0xa2>
 800ed74:	6921      	ldr	r1, [r4, #16]
 800ed76:	464a      	mov	r2, r9
 800ed78:	f7ff fed2 	bl	800eb20 <memcpy>
 800ed7c:	89a3      	ldrh	r3, [r4, #12]
 800ed7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ed82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed86:	81a3      	strh	r3, [r4, #12]
 800ed88:	6126      	str	r6, [r4, #16]
 800ed8a:	6165      	str	r5, [r4, #20]
 800ed8c:	444e      	add	r6, r9
 800ed8e:	eba5 0509 	sub.w	r5, r5, r9
 800ed92:	6026      	str	r6, [r4, #0]
 800ed94:	60a5      	str	r5, [r4, #8]
 800ed96:	463e      	mov	r6, r7
 800ed98:	42be      	cmp	r6, r7
 800ed9a:	d900      	bls.n	800ed9e <__ssputs_r+0x72>
 800ed9c:	463e      	mov	r6, r7
 800ed9e:	6820      	ldr	r0, [r4, #0]
 800eda0:	4632      	mov	r2, r6
 800eda2:	4641      	mov	r1, r8
 800eda4:	f000 faa6 	bl	800f2f4 <memmove>
 800eda8:	68a3      	ldr	r3, [r4, #8]
 800edaa:	1b9b      	subs	r3, r3, r6
 800edac:	60a3      	str	r3, [r4, #8]
 800edae:	6823      	ldr	r3, [r4, #0]
 800edb0:	4433      	add	r3, r6
 800edb2:	6023      	str	r3, [r4, #0]
 800edb4:	2000      	movs	r0, #0
 800edb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edba:	462a      	mov	r2, r5
 800edbc:	f000 fac4 	bl	800f348 <_realloc_r>
 800edc0:	4606      	mov	r6, r0
 800edc2:	2800      	cmp	r0, #0
 800edc4:	d1e0      	bne.n	800ed88 <__ssputs_r+0x5c>
 800edc6:	6921      	ldr	r1, [r4, #16]
 800edc8:	4650      	mov	r0, sl
 800edca:	f7ff feb7 	bl	800eb3c <_free_r>
 800edce:	230c      	movs	r3, #12
 800edd0:	f8ca 3000 	str.w	r3, [sl]
 800edd4:	89a3      	ldrh	r3, [r4, #12]
 800edd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edda:	81a3      	strh	r3, [r4, #12]
 800eddc:	f04f 30ff 	mov.w	r0, #4294967295
 800ede0:	e7e9      	b.n	800edb6 <__ssputs_r+0x8a>
	...

0800ede4 <_svfiprintf_r>:
 800ede4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede8:	4698      	mov	r8, r3
 800edea:	898b      	ldrh	r3, [r1, #12]
 800edec:	061b      	lsls	r3, r3, #24
 800edee:	b09d      	sub	sp, #116	@ 0x74
 800edf0:	4607      	mov	r7, r0
 800edf2:	460d      	mov	r5, r1
 800edf4:	4614      	mov	r4, r2
 800edf6:	d510      	bpl.n	800ee1a <_svfiprintf_r+0x36>
 800edf8:	690b      	ldr	r3, [r1, #16]
 800edfa:	b973      	cbnz	r3, 800ee1a <_svfiprintf_r+0x36>
 800edfc:	2140      	movs	r1, #64	@ 0x40
 800edfe:	f7ff ff09 	bl	800ec14 <_malloc_r>
 800ee02:	6028      	str	r0, [r5, #0]
 800ee04:	6128      	str	r0, [r5, #16]
 800ee06:	b930      	cbnz	r0, 800ee16 <_svfiprintf_r+0x32>
 800ee08:	230c      	movs	r3, #12
 800ee0a:	603b      	str	r3, [r7, #0]
 800ee0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee10:	b01d      	add	sp, #116	@ 0x74
 800ee12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee16:	2340      	movs	r3, #64	@ 0x40
 800ee18:	616b      	str	r3, [r5, #20]
 800ee1a:	2300      	movs	r3, #0
 800ee1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee1e:	2320      	movs	r3, #32
 800ee20:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee24:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee28:	2330      	movs	r3, #48	@ 0x30
 800ee2a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800efc8 <_svfiprintf_r+0x1e4>
 800ee2e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee32:	f04f 0901 	mov.w	r9, #1
 800ee36:	4623      	mov	r3, r4
 800ee38:	469a      	mov	sl, r3
 800ee3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee3e:	b10a      	cbz	r2, 800ee44 <_svfiprintf_r+0x60>
 800ee40:	2a25      	cmp	r2, #37	@ 0x25
 800ee42:	d1f9      	bne.n	800ee38 <_svfiprintf_r+0x54>
 800ee44:	ebba 0b04 	subs.w	fp, sl, r4
 800ee48:	d00b      	beq.n	800ee62 <_svfiprintf_r+0x7e>
 800ee4a:	465b      	mov	r3, fp
 800ee4c:	4622      	mov	r2, r4
 800ee4e:	4629      	mov	r1, r5
 800ee50:	4638      	mov	r0, r7
 800ee52:	f7ff ff6b 	bl	800ed2c <__ssputs_r>
 800ee56:	3001      	adds	r0, #1
 800ee58:	f000 80a7 	beq.w	800efaa <_svfiprintf_r+0x1c6>
 800ee5c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee5e:	445a      	add	r2, fp
 800ee60:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee62:	f89a 3000 	ldrb.w	r3, [sl]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	f000 809f 	beq.w	800efaa <_svfiprintf_r+0x1c6>
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee76:	f10a 0a01 	add.w	sl, sl, #1
 800ee7a:	9304      	str	r3, [sp, #16]
 800ee7c:	9307      	str	r3, [sp, #28]
 800ee7e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee82:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee84:	4654      	mov	r4, sl
 800ee86:	2205      	movs	r2, #5
 800ee88:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee8c:	484e      	ldr	r0, [pc, #312]	@ (800efc8 <_svfiprintf_r+0x1e4>)
 800ee8e:	f7f1 f9a7 	bl	80001e0 <memchr>
 800ee92:	9a04      	ldr	r2, [sp, #16]
 800ee94:	b9d8      	cbnz	r0, 800eece <_svfiprintf_r+0xea>
 800ee96:	06d0      	lsls	r0, r2, #27
 800ee98:	bf44      	itt	mi
 800ee9a:	2320      	movmi	r3, #32
 800ee9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eea0:	0711      	lsls	r1, r2, #28
 800eea2:	bf44      	itt	mi
 800eea4:	232b      	movmi	r3, #43	@ 0x2b
 800eea6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeaa:	f89a 3000 	ldrb.w	r3, [sl]
 800eeae:	2b2a      	cmp	r3, #42	@ 0x2a
 800eeb0:	d015      	beq.n	800eede <_svfiprintf_r+0xfa>
 800eeb2:	9a07      	ldr	r2, [sp, #28]
 800eeb4:	4654      	mov	r4, sl
 800eeb6:	2000      	movs	r0, #0
 800eeb8:	f04f 0c0a 	mov.w	ip, #10
 800eebc:	4621      	mov	r1, r4
 800eebe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eec2:	3b30      	subs	r3, #48	@ 0x30
 800eec4:	2b09      	cmp	r3, #9
 800eec6:	d94b      	bls.n	800ef60 <_svfiprintf_r+0x17c>
 800eec8:	b1b0      	cbz	r0, 800eef8 <_svfiprintf_r+0x114>
 800eeca:	9207      	str	r2, [sp, #28]
 800eecc:	e014      	b.n	800eef8 <_svfiprintf_r+0x114>
 800eece:	eba0 0308 	sub.w	r3, r0, r8
 800eed2:	fa09 f303 	lsl.w	r3, r9, r3
 800eed6:	4313      	orrs	r3, r2
 800eed8:	9304      	str	r3, [sp, #16]
 800eeda:	46a2      	mov	sl, r4
 800eedc:	e7d2      	b.n	800ee84 <_svfiprintf_r+0xa0>
 800eede:	9b03      	ldr	r3, [sp, #12]
 800eee0:	1d19      	adds	r1, r3, #4
 800eee2:	681b      	ldr	r3, [r3, #0]
 800eee4:	9103      	str	r1, [sp, #12]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	bfbb      	ittet	lt
 800eeea:	425b      	neglt	r3, r3
 800eeec:	f042 0202 	orrlt.w	r2, r2, #2
 800eef0:	9307      	strge	r3, [sp, #28]
 800eef2:	9307      	strlt	r3, [sp, #28]
 800eef4:	bfb8      	it	lt
 800eef6:	9204      	strlt	r2, [sp, #16]
 800eef8:	7823      	ldrb	r3, [r4, #0]
 800eefa:	2b2e      	cmp	r3, #46	@ 0x2e
 800eefc:	d10a      	bne.n	800ef14 <_svfiprintf_r+0x130>
 800eefe:	7863      	ldrb	r3, [r4, #1]
 800ef00:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef02:	d132      	bne.n	800ef6a <_svfiprintf_r+0x186>
 800ef04:	9b03      	ldr	r3, [sp, #12]
 800ef06:	1d1a      	adds	r2, r3, #4
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	9203      	str	r2, [sp, #12]
 800ef0c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef10:	3402      	adds	r4, #2
 800ef12:	9305      	str	r3, [sp, #20]
 800ef14:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800efd8 <_svfiprintf_r+0x1f4>
 800ef18:	7821      	ldrb	r1, [r4, #0]
 800ef1a:	2203      	movs	r2, #3
 800ef1c:	4650      	mov	r0, sl
 800ef1e:	f7f1 f95f 	bl	80001e0 <memchr>
 800ef22:	b138      	cbz	r0, 800ef34 <_svfiprintf_r+0x150>
 800ef24:	9b04      	ldr	r3, [sp, #16]
 800ef26:	eba0 000a 	sub.w	r0, r0, sl
 800ef2a:	2240      	movs	r2, #64	@ 0x40
 800ef2c:	4082      	lsls	r2, r0
 800ef2e:	4313      	orrs	r3, r2
 800ef30:	3401      	adds	r4, #1
 800ef32:	9304      	str	r3, [sp, #16]
 800ef34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef38:	4824      	ldr	r0, [pc, #144]	@ (800efcc <_svfiprintf_r+0x1e8>)
 800ef3a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef3e:	2206      	movs	r2, #6
 800ef40:	f7f1 f94e 	bl	80001e0 <memchr>
 800ef44:	2800      	cmp	r0, #0
 800ef46:	d036      	beq.n	800efb6 <_svfiprintf_r+0x1d2>
 800ef48:	4b21      	ldr	r3, [pc, #132]	@ (800efd0 <_svfiprintf_r+0x1ec>)
 800ef4a:	bb1b      	cbnz	r3, 800ef94 <_svfiprintf_r+0x1b0>
 800ef4c:	9b03      	ldr	r3, [sp, #12]
 800ef4e:	3307      	adds	r3, #7
 800ef50:	f023 0307 	bic.w	r3, r3, #7
 800ef54:	3308      	adds	r3, #8
 800ef56:	9303      	str	r3, [sp, #12]
 800ef58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef5a:	4433      	add	r3, r6
 800ef5c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef5e:	e76a      	b.n	800ee36 <_svfiprintf_r+0x52>
 800ef60:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef64:	460c      	mov	r4, r1
 800ef66:	2001      	movs	r0, #1
 800ef68:	e7a8      	b.n	800eebc <_svfiprintf_r+0xd8>
 800ef6a:	2300      	movs	r3, #0
 800ef6c:	3401      	adds	r4, #1
 800ef6e:	9305      	str	r3, [sp, #20]
 800ef70:	4619      	mov	r1, r3
 800ef72:	f04f 0c0a 	mov.w	ip, #10
 800ef76:	4620      	mov	r0, r4
 800ef78:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef7c:	3a30      	subs	r2, #48	@ 0x30
 800ef7e:	2a09      	cmp	r2, #9
 800ef80:	d903      	bls.n	800ef8a <_svfiprintf_r+0x1a6>
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d0c6      	beq.n	800ef14 <_svfiprintf_r+0x130>
 800ef86:	9105      	str	r1, [sp, #20]
 800ef88:	e7c4      	b.n	800ef14 <_svfiprintf_r+0x130>
 800ef8a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef8e:	4604      	mov	r4, r0
 800ef90:	2301      	movs	r3, #1
 800ef92:	e7f0      	b.n	800ef76 <_svfiprintf_r+0x192>
 800ef94:	ab03      	add	r3, sp, #12
 800ef96:	9300      	str	r3, [sp, #0]
 800ef98:	462a      	mov	r2, r5
 800ef9a:	4b0e      	ldr	r3, [pc, #56]	@ (800efd4 <_svfiprintf_r+0x1f0>)
 800ef9c:	a904      	add	r1, sp, #16
 800ef9e:	4638      	mov	r0, r7
 800efa0:	f3af 8000 	nop.w
 800efa4:	1c42      	adds	r2, r0, #1
 800efa6:	4606      	mov	r6, r0
 800efa8:	d1d6      	bne.n	800ef58 <_svfiprintf_r+0x174>
 800efaa:	89ab      	ldrh	r3, [r5, #12]
 800efac:	065b      	lsls	r3, r3, #25
 800efae:	f53f af2d 	bmi.w	800ee0c <_svfiprintf_r+0x28>
 800efb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efb4:	e72c      	b.n	800ee10 <_svfiprintf_r+0x2c>
 800efb6:	ab03      	add	r3, sp, #12
 800efb8:	9300      	str	r3, [sp, #0]
 800efba:	462a      	mov	r2, r5
 800efbc:	4b05      	ldr	r3, [pc, #20]	@ (800efd4 <_svfiprintf_r+0x1f0>)
 800efbe:	a904      	add	r1, sp, #16
 800efc0:	4638      	mov	r0, r7
 800efc2:	f000 f879 	bl	800f0b8 <_printf_i>
 800efc6:	e7ed      	b.n	800efa4 <_svfiprintf_r+0x1c0>
 800efc8:	08010930 	.word	0x08010930
 800efcc:	0801093a 	.word	0x0801093a
 800efd0:	00000000 	.word	0x00000000
 800efd4:	0800ed2d 	.word	0x0800ed2d
 800efd8:	08010936 	.word	0x08010936

0800efdc <_printf_common>:
 800efdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800efe0:	4616      	mov	r6, r2
 800efe2:	4698      	mov	r8, r3
 800efe4:	688a      	ldr	r2, [r1, #8]
 800efe6:	690b      	ldr	r3, [r1, #16]
 800efe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800efec:	4293      	cmp	r3, r2
 800efee:	bfb8      	it	lt
 800eff0:	4613      	movlt	r3, r2
 800eff2:	6033      	str	r3, [r6, #0]
 800eff4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800eff8:	4607      	mov	r7, r0
 800effa:	460c      	mov	r4, r1
 800effc:	b10a      	cbz	r2, 800f002 <_printf_common+0x26>
 800effe:	3301      	adds	r3, #1
 800f000:	6033      	str	r3, [r6, #0]
 800f002:	6823      	ldr	r3, [r4, #0]
 800f004:	0699      	lsls	r1, r3, #26
 800f006:	bf42      	ittt	mi
 800f008:	6833      	ldrmi	r3, [r6, #0]
 800f00a:	3302      	addmi	r3, #2
 800f00c:	6033      	strmi	r3, [r6, #0]
 800f00e:	6825      	ldr	r5, [r4, #0]
 800f010:	f015 0506 	ands.w	r5, r5, #6
 800f014:	d106      	bne.n	800f024 <_printf_common+0x48>
 800f016:	f104 0a19 	add.w	sl, r4, #25
 800f01a:	68e3      	ldr	r3, [r4, #12]
 800f01c:	6832      	ldr	r2, [r6, #0]
 800f01e:	1a9b      	subs	r3, r3, r2
 800f020:	42ab      	cmp	r3, r5
 800f022:	dc26      	bgt.n	800f072 <_printf_common+0x96>
 800f024:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f028:	6822      	ldr	r2, [r4, #0]
 800f02a:	3b00      	subs	r3, #0
 800f02c:	bf18      	it	ne
 800f02e:	2301      	movne	r3, #1
 800f030:	0692      	lsls	r2, r2, #26
 800f032:	d42b      	bmi.n	800f08c <_printf_common+0xb0>
 800f034:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f038:	4641      	mov	r1, r8
 800f03a:	4638      	mov	r0, r7
 800f03c:	47c8      	blx	r9
 800f03e:	3001      	adds	r0, #1
 800f040:	d01e      	beq.n	800f080 <_printf_common+0xa4>
 800f042:	6823      	ldr	r3, [r4, #0]
 800f044:	6922      	ldr	r2, [r4, #16]
 800f046:	f003 0306 	and.w	r3, r3, #6
 800f04a:	2b04      	cmp	r3, #4
 800f04c:	bf02      	ittt	eq
 800f04e:	68e5      	ldreq	r5, [r4, #12]
 800f050:	6833      	ldreq	r3, [r6, #0]
 800f052:	1aed      	subeq	r5, r5, r3
 800f054:	68a3      	ldr	r3, [r4, #8]
 800f056:	bf0c      	ite	eq
 800f058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f05c:	2500      	movne	r5, #0
 800f05e:	4293      	cmp	r3, r2
 800f060:	bfc4      	itt	gt
 800f062:	1a9b      	subgt	r3, r3, r2
 800f064:	18ed      	addgt	r5, r5, r3
 800f066:	2600      	movs	r6, #0
 800f068:	341a      	adds	r4, #26
 800f06a:	42b5      	cmp	r5, r6
 800f06c:	d11a      	bne.n	800f0a4 <_printf_common+0xc8>
 800f06e:	2000      	movs	r0, #0
 800f070:	e008      	b.n	800f084 <_printf_common+0xa8>
 800f072:	2301      	movs	r3, #1
 800f074:	4652      	mov	r2, sl
 800f076:	4641      	mov	r1, r8
 800f078:	4638      	mov	r0, r7
 800f07a:	47c8      	blx	r9
 800f07c:	3001      	adds	r0, #1
 800f07e:	d103      	bne.n	800f088 <_printf_common+0xac>
 800f080:	f04f 30ff 	mov.w	r0, #4294967295
 800f084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f088:	3501      	adds	r5, #1
 800f08a:	e7c6      	b.n	800f01a <_printf_common+0x3e>
 800f08c:	18e1      	adds	r1, r4, r3
 800f08e:	1c5a      	adds	r2, r3, #1
 800f090:	2030      	movs	r0, #48	@ 0x30
 800f092:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f096:	4422      	add	r2, r4
 800f098:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f09c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0a0:	3302      	adds	r3, #2
 800f0a2:	e7c7      	b.n	800f034 <_printf_common+0x58>
 800f0a4:	2301      	movs	r3, #1
 800f0a6:	4622      	mov	r2, r4
 800f0a8:	4641      	mov	r1, r8
 800f0aa:	4638      	mov	r0, r7
 800f0ac:	47c8      	blx	r9
 800f0ae:	3001      	adds	r0, #1
 800f0b0:	d0e6      	beq.n	800f080 <_printf_common+0xa4>
 800f0b2:	3601      	adds	r6, #1
 800f0b4:	e7d9      	b.n	800f06a <_printf_common+0x8e>
	...

0800f0b8 <_printf_i>:
 800f0b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0bc:	7e0f      	ldrb	r7, [r1, #24]
 800f0be:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f0c0:	2f78      	cmp	r7, #120	@ 0x78
 800f0c2:	4691      	mov	r9, r2
 800f0c4:	4680      	mov	r8, r0
 800f0c6:	460c      	mov	r4, r1
 800f0c8:	469a      	mov	sl, r3
 800f0ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f0ce:	d807      	bhi.n	800f0e0 <_printf_i+0x28>
 800f0d0:	2f62      	cmp	r7, #98	@ 0x62
 800f0d2:	d80a      	bhi.n	800f0ea <_printf_i+0x32>
 800f0d4:	2f00      	cmp	r7, #0
 800f0d6:	f000 80d1 	beq.w	800f27c <_printf_i+0x1c4>
 800f0da:	2f58      	cmp	r7, #88	@ 0x58
 800f0dc:	f000 80b8 	beq.w	800f250 <_printf_i+0x198>
 800f0e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f0e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f0e8:	e03a      	b.n	800f160 <_printf_i+0xa8>
 800f0ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f0ee:	2b15      	cmp	r3, #21
 800f0f0:	d8f6      	bhi.n	800f0e0 <_printf_i+0x28>
 800f0f2:	a101      	add	r1, pc, #4	@ (adr r1, 800f0f8 <_printf_i+0x40>)
 800f0f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f0f8:	0800f151 	.word	0x0800f151
 800f0fc:	0800f165 	.word	0x0800f165
 800f100:	0800f0e1 	.word	0x0800f0e1
 800f104:	0800f0e1 	.word	0x0800f0e1
 800f108:	0800f0e1 	.word	0x0800f0e1
 800f10c:	0800f0e1 	.word	0x0800f0e1
 800f110:	0800f165 	.word	0x0800f165
 800f114:	0800f0e1 	.word	0x0800f0e1
 800f118:	0800f0e1 	.word	0x0800f0e1
 800f11c:	0800f0e1 	.word	0x0800f0e1
 800f120:	0800f0e1 	.word	0x0800f0e1
 800f124:	0800f263 	.word	0x0800f263
 800f128:	0800f18f 	.word	0x0800f18f
 800f12c:	0800f21d 	.word	0x0800f21d
 800f130:	0800f0e1 	.word	0x0800f0e1
 800f134:	0800f0e1 	.word	0x0800f0e1
 800f138:	0800f285 	.word	0x0800f285
 800f13c:	0800f0e1 	.word	0x0800f0e1
 800f140:	0800f18f 	.word	0x0800f18f
 800f144:	0800f0e1 	.word	0x0800f0e1
 800f148:	0800f0e1 	.word	0x0800f0e1
 800f14c:	0800f225 	.word	0x0800f225
 800f150:	6833      	ldr	r3, [r6, #0]
 800f152:	1d1a      	adds	r2, r3, #4
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	6032      	str	r2, [r6, #0]
 800f158:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f15c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f160:	2301      	movs	r3, #1
 800f162:	e09c      	b.n	800f29e <_printf_i+0x1e6>
 800f164:	6833      	ldr	r3, [r6, #0]
 800f166:	6820      	ldr	r0, [r4, #0]
 800f168:	1d19      	adds	r1, r3, #4
 800f16a:	6031      	str	r1, [r6, #0]
 800f16c:	0606      	lsls	r6, r0, #24
 800f16e:	d501      	bpl.n	800f174 <_printf_i+0xbc>
 800f170:	681d      	ldr	r5, [r3, #0]
 800f172:	e003      	b.n	800f17c <_printf_i+0xc4>
 800f174:	0645      	lsls	r5, r0, #25
 800f176:	d5fb      	bpl.n	800f170 <_printf_i+0xb8>
 800f178:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f17c:	2d00      	cmp	r5, #0
 800f17e:	da03      	bge.n	800f188 <_printf_i+0xd0>
 800f180:	232d      	movs	r3, #45	@ 0x2d
 800f182:	426d      	negs	r5, r5
 800f184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f188:	4858      	ldr	r0, [pc, #352]	@ (800f2ec <_printf_i+0x234>)
 800f18a:	230a      	movs	r3, #10
 800f18c:	e011      	b.n	800f1b2 <_printf_i+0xfa>
 800f18e:	6821      	ldr	r1, [r4, #0]
 800f190:	6833      	ldr	r3, [r6, #0]
 800f192:	0608      	lsls	r0, r1, #24
 800f194:	f853 5b04 	ldr.w	r5, [r3], #4
 800f198:	d402      	bmi.n	800f1a0 <_printf_i+0xe8>
 800f19a:	0649      	lsls	r1, r1, #25
 800f19c:	bf48      	it	mi
 800f19e:	b2ad      	uxthmi	r5, r5
 800f1a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1a2:	4852      	ldr	r0, [pc, #328]	@ (800f2ec <_printf_i+0x234>)
 800f1a4:	6033      	str	r3, [r6, #0]
 800f1a6:	bf14      	ite	ne
 800f1a8:	230a      	movne	r3, #10
 800f1aa:	2308      	moveq	r3, #8
 800f1ac:	2100      	movs	r1, #0
 800f1ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1b2:	6866      	ldr	r6, [r4, #4]
 800f1b4:	60a6      	str	r6, [r4, #8]
 800f1b6:	2e00      	cmp	r6, #0
 800f1b8:	db05      	blt.n	800f1c6 <_printf_i+0x10e>
 800f1ba:	6821      	ldr	r1, [r4, #0]
 800f1bc:	432e      	orrs	r6, r5
 800f1be:	f021 0104 	bic.w	r1, r1, #4
 800f1c2:	6021      	str	r1, [r4, #0]
 800f1c4:	d04b      	beq.n	800f25e <_printf_i+0x1a6>
 800f1c6:	4616      	mov	r6, r2
 800f1c8:	fbb5 f1f3 	udiv	r1, r5, r3
 800f1cc:	fb03 5711 	mls	r7, r3, r1, r5
 800f1d0:	5dc7      	ldrb	r7, [r0, r7]
 800f1d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f1d6:	462f      	mov	r7, r5
 800f1d8:	42bb      	cmp	r3, r7
 800f1da:	460d      	mov	r5, r1
 800f1dc:	d9f4      	bls.n	800f1c8 <_printf_i+0x110>
 800f1de:	2b08      	cmp	r3, #8
 800f1e0:	d10b      	bne.n	800f1fa <_printf_i+0x142>
 800f1e2:	6823      	ldr	r3, [r4, #0]
 800f1e4:	07df      	lsls	r7, r3, #31
 800f1e6:	d508      	bpl.n	800f1fa <_printf_i+0x142>
 800f1e8:	6923      	ldr	r3, [r4, #16]
 800f1ea:	6861      	ldr	r1, [r4, #4]
 800f1ec:	4299      	cmp	r1, r3
 800f1ee:	bfde      	ittt	le
 800f1f0:	2330      	movle	r3, #48	@ 0x30
 800f1f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f1f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f1fa:	1b92      	subs	r2, r2, r6
 800f1fc:	6122      	str	r2, [r4, #16]
 800f1fe:	f8cd a000 	str.w	sl, [sp]
 800f202:	464b      	mov	r3, r9
 800f204:	aa03      	add	r2, sp, #12
 800f206:	4621      	mov	r1, r4
 800f208:	4640      	mov	r0, r8
 800f20a:	f7ff fee7 	bl	800efdc <_printf_common>
 800f20e:	3001      	adds	r0, #1
 800f210:	d14a      	bne.n	800f2a8 <_printf_i+0x1f0>
 800f212:	f04f 30ff 	mov.w	r0, #4294967295
 800f216:	b004      	add	sp, #16
 800f218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f21c:	6823      	ldr	r3, [r4, #0]
 800f21e:	f043 0320 	orr.w	r3, r3, #32
 800f222:	6023      	str	r3, [r4, #0]
 800f224:	4832      	ldr	r0, [pc, #200]	@ (800f2f0 <_printf_i+0x238>)
 800f226:	2778      	movs	r7, #120	@ 0x78
 800f228:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	6831      	ldr	r1, [r6, #0]
 800f230:	061f      	lsls	r7, r3, #24
 800f232:	f851 5b04 	ldr.w	r5, [r1], #4
 800f236:	d402      	bmi.n	800f23e <_printf_i+0x186>
 800f238:	065f      	lsls	r7, r3, #25
 800f23a:	bf48      	it	mi
 800f23c:	b2ad      	uxthmi	r5, r5
 800f23e:	6031      	str	r1, [r6, #0]
 800f240:	07d9      	lsls	r1, r3, #31
 800f242:	bf44      	itt	mi
 800f244:	f043 0320 	orrmi.w	r3, r3, #32
 800f248:	6023      	strmi	r3, [r4, #0]
 800f24a:	b11d      	cbz	r5, 800f254 <_printf_i+0x19c>
 800f24c:	2310      	movs	r3, #16
 800f24e:	e7ad      	b.n	800f1ac <_printf_i+0xf4>
 800f250:	4826      	ldr	r0, [pc, #152]	@ (800f2ec <_printf_i+0x234>)
 800f252:	e7e9      	b.n	800f228 <_printf_i+0x170>
 800f254:	6823      	ldr	r3, [r4, #0]
 800f256:	f023 0320 	bic.w	r3, r3, #32
 800f25a:	6023      	str	r3, [r4, #0]
 800f25c:	e7f6      	b.n	800f24c <_printf_i+0x194>
 800f25e:	4616      	mov	r6, r2
 800f260:	e7bd      	b.n	800f1de <_printf_i+0x126>
 800f262:	6833      	ldr	r3, [r6, #0]
 800f264:	6825      	ldr	r5, [r4, #0]
 800f266:	6961      	ldr	r1, [r4, #20]
 800f268:	1d18      	adds	r0, r3, #4
 800f26a:	6030      	str	r0, [r6, #0]
 800f26c:	062e      	lsls	r6, r5, #24
 800f26e:	681b      	ldr	r3, [r3, #0]
 800f270:	d501      	bpl.n	800f276 <_printf_i+0x1be>
 800f272:	6019      	str	r1, [r3, #0]
 800f274:	e002      	b.n	800f27c <_printf_i+0x1c4>
 800f276:	0668      	lsls	r0, r5, #25
 800f278:	d5fb      	bpl.n	800f272 <_printf_i+0x1ba>
 800f27a:	8019      	strh	r1, [r3, #0]
 800f27c:	2300      	movs	r3, #0
 800f27e:	6123      	str	r3, [r4, #16]
 800f280:	4616      	mov	r6, r2
 800f282:	e7bc      	b.n	800f1fe <_printf_i+0x146>
 800f284:	6833      	ldr	r3, [r6, #0]
 800f286:	1d1a      	adds	r2, r3, #4
 800f288:	6032      	str	r2, [r6, #0]
 800f28a:	681e      	ldr	r6, [r3, #0]
 800f28c:	6862      	ldr	r2, [r4, #4]
 800f28e:	2100      	movs	r1, #0
 800f290:	4630      	mov	r0, r6
 800f292:	f7f0 ffa5 	bl	80001e0 <memchr>
 800f296:	b108      	cbz	r0, 800f29c <_printf_i+0x1e4>
 800f298:	1b80      	subs	r0, r0, r6
 800f29a:	6060      	str	r0, [r4, #4]
 800f29c:	6863      	ldr	r3, [r4, #4]
 800f29e:	6123      	str	r3, [r4, #16]
 800f2a0:	2300      	movs	r3, #0
 800f2a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2a6:	e7aa      	b.n	800f1fe <_printf_i+0x146>
 800f2a8:	6923      	ldr	r3, [r4, #16]
 800f2aa:	4632      	mov	r2, r6
 800f2ac:	4649      	mov	r1, r9
 800f2ae:	4640      	mov	r0, r8
 800f2b0:	47d0      	blx	sl
 800f2b2:	3001      	adds	r0, #1
 800f2b4:	d0ad      	beq.n	800f212 <_printf_i+0x15a>
 800f2b6:	6823      	ldr	r3, [r4, #0]
 800f2b8:	079b      	lsls	r3, r3, #30
 800f2ba:	d413      	bmi.n	800f2e4 <_printf_i+0x22c>
 800f2bc:	68e0      	ldr	r0, [r4, #12]
 800f2be:	9b03      	ldr	r3, [sp, #12]
 800f2c0:	4298      	cmp	r0, r3
 800f2c2:	bfb8      	it	lt
 800f2c4:	4618      	movlt	r0, r3
 800f2c6:	e7a6      	b.n	800f216 <_printf_i+0x15e>
 800f2c8:	2301      	movs	r3, #1
 800f2ca:	4632      	mov	r2, r6
 800f2cc:	4649      	mov	r1, r9
 800f2ce:	4640      	mov	r0, r8
 800f2d0:	47d0      	blx	sl
 800f2d2:	3001      	adds	r0, #1
 800f2d4:	d09d      	beq.n	800f212 <_printf_i+0x15a>
 800f2d6:	3501      	adds	r5, #1
 800f2d8:	68e3      	ldr	r3, [r4, #12]
 800f2da:	9903      	ldr	r1, [sp, #12]
 800f2dc:	1a5b      	subs	r3, r3, r1
 800f2de:	42ab      	cmp	r3, r5
 800f2e0:	dcf2      	bgt.n	800f2c8 <_printf_i+0x210>
 800f2e2:	e7eb      	b.n	800f2bc <_printf_i+0x204>
 800f2e4:	2500      	movs	r5, #0
 800f2e6:	f104 0619 	add.w	r6, r4, #25
 800f2ea:	e7f5      	b.n	800f2d8 <_printf_i+0x220>
 800f2ec:	08010941 	.word	0x08010941
 800f2f0:	08010952 	.word	0x08010952

0800f2f4 <memmove>:
 800f2f4:	4288      	cmp	r0, r1
 800f2f6:	b510      	push	{r4, lr}
 800f2f8:	eb01 0402 	add.w	r4, r1, r2
 800f2fc:	d902      	bls.n	800f304 <memmove+0x10>
 800f2fe:	4284      	cmp	r4, r0
 800f300:	4623      	mov	r3, r4
 800f302:	d807      	bhi.n	800f314 <memmove+0x20>
 800f304:	1e43      	subs	r3, r0, #1
 800f306:	42a1      	cmp	r1, r4
 800f308:	d008      	beq.n	800f31c <memmove+0x28>
 800f30a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f30e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f312:	e7f8      	b.n	800f306 <memmove+0x12>
 800f314:	4402      	add	r2, r0
 800f316:	4601      	mov	r1, r0
 800f318:	428a      	cmp	r2, r1
 800f31a:	d100      	bne.n	800f31e <memmove+0x2a>
 800f31c:	bd10      	pop	{r4, pc}
 800f31e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f326:	e7f7      	b.n	800f318 <memmove+0x24>

0800f328 <_sbrk_r>:
 800f328:	b538      	push	{r3, r4, r5, lr}
 800f32a:	4d06      	ldr	r5, [pc, #24]	@ (800f344 <_sbrk_r+0x1c>)
 800f32c:	2300      	movs	r3, #0
 800f32e:	4604      	mov	r4, r0
 800f330:	4608      	mov	r0, r1
 800f332:	602b      	str	r3, [r5, #0]
 800f334:	f7f3 fefc 	bl	8003130 <_sbrk>
 800f338:	1c43      	adds	r3, r0, #1
 800f33a:	d102      	bne.n	800f342 <_sbrk_r+0x1a>
 800f33c:	682b      	ldr	r3, [r5, #0]
 800f33e:	b103      	cbz	r3, 800f342 <_sbrk_r+0x1a>
 800f340:	6023      	str	r3, [r4, #0]
 800f342:	bd38      	pop	{r3, r4, r5, pc}
 800f344:	20001c50 	.word	0x20001c50

0800f348 <_realloc_r>:
 800f348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f34c:	4607      	mov	r7, r0
 800f34e:	4614      	mov	r4, r2
 800f350:	460d      	mov	r5, r1
 800f352:	b921      	cbnz	r1, 800f35e <_realloc_r+0x16>
 800f354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f358:	4611      	mov	r1, r2
 800f35a:	f7ff bc5b 	b.w	800ec14 <_malloc_r>
 800f35e:	b92a      	cbnz	r2, 800f36c <_realloc_r+0x24>
 800f360:	f7ff fbec 	bl	800eb3c <_free_r>
 800f364:	4625      	mov	r5, r4
 800f366:	4628      	mov	r0, r5
 800f368:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f36c:	f000 f81a 	bl	800f3a4 <_malloc_usable_size_r>
 800f370:	4284      	cmp	r4, r0
 800f372:	4606      	mov	r6, r0
 800f374:	d802      	bhi.n	800f37c <_realloc_r+0x34>
 800f376:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f37a:	d8f4      	bhi.n	800f366 <_realloc_r+0x1e>
 800f37c:	4621      	mov	r1, r4
 800f37e:	4638      	mov	r0, r7
 800f380:	f7ff fc48 	bl	800ec14 <_malloc_r>
 800f384:	4680      	mov	r8, r0
 800f386:	b908      	cbnz	r0, 800f38c <_realloc_r+0x44>
 800f388:	4645      	mov	r5, r8
 800f38a:	e7ec      	b.n	800f366 <_realloc_r+0x1e>
 800f38c:	42b4      	cmp	r4, r6
 800f38e:	4622      	mov	r2, r4
 800f390:	4629      	mov	r1, r5
 800f392:	bf28      	it	cs
 800f394:	4632      	movcs	r2, r6
 800f396:	f7ff fbc3 	bl	800eb20 <memcpy>
 800f39a:	4629      	mov	r1, r5
 800f39c:	4638      	mov	r0, r7
 800f39e:	f7ff fbcd 	bl	800eb3c <_free_r>
 800f3a2:	e7f1      	b.n	800f388 <_realloc_r+0x40>

0800f3a4 <_malloc_usable_size_r>:
 800f3a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3a8:	1f18      	subs	r0, r3, #4
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	bfbc      	itt	lt
 800f3ae:	580b      	ldrlt	r3, [r1, r0]
 800f3b0:	18c0      	addlt	r0, r0, r3
 800f3b2:	4770      	bx	lr

0800f3b4 <_init>:
 800f3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3b6:	bf00      	nop
 800f3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ba:	bc08      	pop	{r3}
 800f3bc:	469e      	mov	lr, r3
 800f3be:	4770      	bx	lr

0800f3c0 <_fini>:
 800f3c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c2:	bf00      	nop
 800f3c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3c6:	bc08      	pop	{r3}
 800f3c8:	469e      	mov	lr, r3
 800f3ca:	4770      	bx	lr
