
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e358  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800e4f0  0800e4f0  0000f4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e568  0800e568  00010130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e568  0800e568  0000f568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e570  0800e570  00010130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e570  0800e570  0000f570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e574  0800e574  0000f574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800e578  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f0  20000130  0800e6a8  00010130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b20  0800e6a8  00010b20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cec8  00000000  00000000  00010160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004794  00000000  00000000  0002d028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  000317c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ae  00000000  00000000  00033280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007982  00000000  00000000  0003472e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021ca8  00000000  00000000  0003c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1fb7  00000000  00000000  0005dd58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffd0f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007170  00000000  00000000  000ffd54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00106ec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800e4d8 	.word	0x0800e4d8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	0800e4d8 	.word	0x0800e4d8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <ESP01_Init>:

	return ESP01_SEND_BUSY;
}


void ESP01_Init(_sESP01Handle *hESP01){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 800050c:	220c      	movs	r2, #12
 800050e:	6879      	ldr	r1, [r7, #4]
 8000510:	4810      	ldr	r0, [pc, #64]	@ (8000554 <ESP01_Init+0x50>)
 8000512:	f00d ffd3 	bl	800e4bc <memcpy>

	esp01ATSate = ESP01ATIDLE;
 8000516:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <ESP01_Init+0x54>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <ESP01_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <ESP01_Init+0x5c>)
 8000524:	2200      	movs	r2, #0
 8000526:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 8000528:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <ESP01_Init+0x60>)
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <ESP01_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <ESP01_Init+0x68>)
 8000536:	2200      	movs	r2, #0
 8000538:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <ESP01_Init+0x6c>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <ESP01_Init+0x70>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <ESP01_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000174 	.word	0x20000174
 8000558:	2000014c 	.word	0x2000014c
 800055c:	20000168 	.word	0x20000168
 8000560:	2000016e 	.word	0x2000016e
 8000564:	20000170 	.word	0x20000170
 8000568:	2000016c 	.word	0x2000016c
 800056c:	2000016a 	.word	0x2000016a
 8000570:	20000150 	.word	0x20000150
 8000574:	20000160 	.word	0x20000160
 8000578:	20000164 	.word	0x20000164

0800057c <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <ESP01_Timeout10ms+0x54>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d004      	beq.n	8000592 <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <ESP01_Timeout10ms+0x54>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a10      	ldr	r2, [pc, #64]	@ (80005d0 <ESP01_Timeout10ms+0x54>)
 8000590:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <ESP01_Timeout10ms+0x58>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00b      	beq.n	80005b2 <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <ESP01_Timeout10ms+0x58>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3b01      	subs	r3, #1
 80005a0:	4a0c      	ldr	r2, [pc, #48]	@ (80005d4 <ESP01_Timeout10ms+0x58>)
 80005a2:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <ESP01_Timeout10ms+0x58>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <ESP01_Timeout10ms+0x5c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <ESP01_Timeout10ms+0x60>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d004      	beq.n	80005c4 <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <ESP01_Timeout10ms+0x60>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <ESP01_Timeout10ms+0x60>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000154 	.word	0x20000154
 80005d4:	20000158 	.word	0x20000158
 80005d8:	20000168 	.word	0x20000168
 80005dc:	2000015c 	.word	0x2000015c

080005e0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	e00a      	b.n	8000604 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 80005ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <HAL_ADC_ConvCpltCallback+0x38>)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005f6:	4a09      	ldr	r2, [pc, #36]	@ (800061c <HAL_ADC_ConvCpltCallback+0x3c>)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	3301      	adds	r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2b07      	cmp	r3, #7
 8000608:	ddf1      	ble.n	80005ee <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	200004a4 	.word	0x200004a4
 800061c:	200004b4 	.word	0x200004b4

08000620 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <HAL_I2C_MemTxCpltCallback+0x1c>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200006e1 	.word	0x200006e1

08000640 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <HAL_I2C_MemRxCpltCallback+0x1c>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200006e2 	.word	0x200006e2

08000660 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) { //250us
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a2a      	ldr	r2, [pc, #168]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d116      	bne.n	80006a0 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000672:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b28      	ldr	r3, [pc, #160]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800067c:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 800067e:	4b27      	ldr	r3, [pc, #156]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b28      	cmp	r3, #40	@ 0x28
 8000684:	d107      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000686:	4b25      	ldr	r3, [pc, #148]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
			IS10MS = TRUE;
 800068c:	4a24      	ldr	r2, [pc, #144]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800068e:	7813      	ldrb	r3, [r2, #0]
 8000690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000694:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000696:	2208      	movs	r2, #8
 8000698:	4922      	ldr	r1, [pc, #136]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800069a:	4823      	ldr	r0, [pc, #140]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800069c:	f002 f8de 	bl	800285c <HAL_ADC_Start_DMA>
	}

	if (htim->Instance == TIM2) { //20ms
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006a8:	d132      	bne.n	8000710 <HAL_TIM_PeriodElapsedCallback+0xb0>
		Pila[i2cIndex] = MPU6050;
 80006aa:	4b20      	ldr	r3, [pc, #128]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80006b2:	2101      	movs	r1, #1
 80006b4:	5499      	strb	r1, [r3, r2]
		i2cIndex++;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006c0:	701a      	strb	r2, [r3, #0]
		i2cIndex&=(I2CSIZE-1);
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b17      	ldr	r3, [pc, #92]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006ce:	701a      	strb	r2, [r3, #0]
		tmo100--;
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006da:	701a      	strb	r2, [r3, #0]
		if(!tmo100){
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d115      	bne.n	8000710 <HAL_TIM_PeriodElapsedCallback+0xb0>
			tmo100=5;
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006e6:	2205      	movs	r2, #5
 80006e8:	701a      	strb	r2, [r3, #0]
			Pila[i2cIndex] = SSD1306;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	5499      	strb	r1, [r3, r2]
			i2cIndex++;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000700:	701a      	strb	r2, [r3, #0]
			i2cIndex&=(I2CSIZE-1);
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800070e:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM4) { //100ms

	}
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40010000 	.word	0x40010000
 800071c:	200004a0 	.word	0x200004a0
 8000720:	200006e0 	.word	0x200006e0
 8000724:	200004a4 	.word	0x200004a4
 8000728:	20000180 	.word	0x20000180
 800072c:	20000700 	.word	0x20000700
 8000730:	200006f0 	.word	0x200006f0
 8000734:	2000002a 	.word	0x2000002a

08000738 <USBRxData>:


void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000738:	b490      	push	{r4, r7}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e018      	b.n	800077a <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	441a      	add	r2, r3
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <USBRxData+0x58>)
 8000750:	6819      	ldr	r1, [r3, #0]
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <USBRxData+0x58>)
 8000754:	795b      	ldrb	r3, [r3, #5]
 8000756:	1c58      	adds	r0, r3, #1
 8000758:	b2c4      	uxtb	r4, r0
 800075a:	480d      	ldr	r0, [pc, #52]	@ (8000790 <USBRxData+0x58>)
 800075c:	7144      	strb	r4, [r0, #5]
 800075e:	440b      	add	r3, r1
 8000760:	7812      	ldrb	r2, [r2, #0]
 8000762:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <USBRxData+0x58>)
 8000766:	795a      	ldrb	r2, [r3, #5]
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <USBRxData+0x58>)
 800076a:	799b      	ldrb	r3, [r3, #6]
 800076c:	4013      	ands	r3, r2
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <USBRxData+0x58>)
 8000772:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	3301      	adds	r3, #1
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	429a      	cmp	r2, r3
 8000780:	d8e2      	bhi.n	8000748 <USBRxData+0x10>
	}

}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bc90      	pop	{r4, r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	200004d0 	.word	0x200004d0

08000794 <USBTask>:

void USBTask() {
 8000794:	b580      	push	{r7, lr}
 8000796:	b0c2      	sub	sp, #264	@ 0x108
 8000798:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 800079a:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <USBTask+0x90>)
 800079c:	791a      	ldrb	r2, [r3, #4]
 800079e:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <USBTask+0x90>)
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d039      	beq.n	800081a <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 80007a6:	481f      	ldr	r0, [pc, #124]	@ (8000824 <USBTask+0x90>)
 80007a8:	f001 fd0e 	bl	80021c8 <unerPrtcl_DecodeHeader>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 80007b2:	491d      	ldr	r1, [pc, #116]	@ (8000828 <USBTask+0x94>)
 80007b4:	481b      	ldr	r0, [pc, #108]	@ (8000824 <USBTask+0x90>)
 80007b6:	f000 f839 	bl	800082c <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 80007ba:	2300      	movs	r3, #0
 80007bc:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 80007c0:	e01d      	b.n	80007fe <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <USBTask+0x94>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <USBTask+0x94>)
 80007c8:	7a1b      	ldrb	r3, [r3, #8]
 80007ca:	1c59      	adds	r1, r3, #1
 80007cc:	b2c8      	uxtb	r0, r1
 80007ce:	4916      	ldr	r1, [pc, #88]	@ (8000828 <USBTask+0x94>)
 80007d0:	7208      	strb	r0, [r1, #8]
 80007d2:	441a      	add	r2, r3
 80007d4:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80007d8:	7811      	ldrb	r1, [r2, #0]
 80007da:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80007de:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80007e2:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <USBTask+0x94>)
 80007e6:	7a1a      	ldrb	r2, [r3, #8]
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <USBTask+0x94>)
 80007ea:	799b      	ldrb	r3, [r3, #6]
 80007ec:	4013      	ands	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <USBTask+0x94>)
 80007f2:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 80007f4:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80007f8:	3301      	adds	r3, #1
 80007fa:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <USBTask+0x94>)
 8000800:	79db      	ldrb	r3, [r3, #7]
 8000802:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000806:	429a      	cmp	r2, r3
 8000808:	d3db      	bcc.n	80007c2 <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <USBTask+0x94>)
 800080c:	79db      	ldrb	r3, [r3, #7]
 800080e:	461a      	mov	r2, r3
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f00d f9c3 	bl	800dba0 <CDC_Transmit_FS>
	}

}
 800081a:	bf00      	nop
 800081c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200004d0 	.word	0x200004d0
 8000828:	200004c4 	.word	0x200004c4

0800082c <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	7a12      	ldrb	r2, [r2, #8]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3bf0      	subs	r3, #240	@ 0xf0
 8000844:	2b03      	cmp	r3, #3
 8000846:	f200 8129 	bhi.w	8000a9c <decodeCommand+0x270>
 800084a:	a201      	add	r2, pc, #4	@ (adr r2, 8000850 <decodeCommand+0x24>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	08000861 	.word	0x08000861
 8000854:	08000881 	.word	0x08000881
 8000858:	080008a1 	.word	0x080008a1
 800085c:	08000985 	.word	0x08000985
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000860:	2202      	movs	r2, #2
 8000862:	21f0      	movs	r1, #240	@ 0xf0
 8000864:	6838      	ldr	r0, [r7, #0]
 8000866:	f001 fb8d 	bl	8001f84 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 800086a:	210d      	movs	r1, #13
 800086c:	6838      	ldr	r0, [r7, #0]
 800086e:	f001 fc38 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	7a5b      	ldrb	r3, [r3, #9]
 8000876:	4619      	mov	r1, r3
 8000878:	6838      	ldr	r0, [r7, #0]
 800087a:	f001 fc32 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		break;
 800087e:	e123      	b.n	8000ac8 <decodeCommand+0x29c>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000880:	220d      	movs	r2, #13
 8000882:	21f1      	movs	r1, #241	@ 0xf1
 8000884:	6838      	ldr	r0, [r7, #0]
 8000886:	f001 fb7d 	bl	8001f84 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 800088a:	4991      	ldr	r1, [pc, #580]	@ (8000ad0 <decodeCommand+0x2a4>)
 800088c:	6838      	ldr	r0, [r7, #0]
 800088e:	f001 fc56 	bl	800213e <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	7a5b      	ldrb	r3, [r3, #9]
 8000896:	4619      	mov	r1, r3
 8000898:	6838      	ldr	r0, [r7, #0]
 800089a:	f001 fc22 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		break;
 800089e:	e113      	b.n	8000ac8 <decodeCommand+0x29c>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 80008a0:	220d      	movs	r2, #13
 80008a2:	21f2      	movs	r1, #242	@ 0xf2
 80008a4:	6838      	ldr	r0, [r7, #0]
 80008a6:	f001 fb6d 	bl	8001f84 <unerPrtcl_PutHeaderOnTx>
		myWord.i16[0] = ax;
 80008aa:	4b8a      	ldr	r3, [pc, #552]	@ (8000ad4 <decodeCommand+0x2a8>)
 80008ac:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008b0:	4b89      	ldr	r3, [pc, #548]	@ (8000ad8 <decodeCommand+0x2ac>)
 80008b2:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80008b4:	4b88      	ldr	r3, [pc, #544]	@ (8000ad8 <decodeCommand+0x2ac>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	4619      	mov	r1, r3
 80008ba:	6838      	ldr	r0, [r7, #0]
 80008bc:	f001 fc11 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80008c0:	4b85      	ldr	r3, [pc, #532]	@ (8000ad8 <decodeCommand+0x2ac>)
 80008c2:	785b      	ldrb	r3, [r3, #1]
 80008c4:	4619      	mov	r1, r3
 80008c6:	6838      	ldr	r0, [r7, #0]
 80008c8:	f001 fc0b 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = ay;
 80008cc:	4b83      	ldr	r3, [pc, #524]	@ (8000adc <decodeCommand+0x2b0>)
 80008ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008d2:	4b81      	ldr	r3, [pc, #516]	@ (8000ad8 <decodeCommand+0x2ac>)
 80008d4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80008d6:	4b80      	ldr	r3, [pc, #512]	@ (8000ad8 <decodeCommand+0x2ac>)
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	4619      	mov	r1, r3
 80008dc:	6838      	ldr	r0, [r7, #0]
 80008de:	f001 fc00 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80008e2:	4b7d      	ldr	r3, [pc, #500]	@ (8000ad8 <decodeCommand+0x2ac>)
 80008e4:	785b      	ldrb	r3, [r3, #1]
 80008e6:	4619      	mov	r1, r3
 80008e8:	6838      	ldr	r0, [r7, #0]
 80008ea:	f001 fbfa 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = az;
 80008ee:	4b7c      	ldr	r3, [pc, #496]	@ (8000ae0 <decodeCommand+0x2b4>)
 80008f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008f4:	4b78      	ldr	r3, [pc, #480]	@ (8000ad8 <decodeCommand+0x2ac>)
 80008f6:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80008f8:	4b77      	ldr	r3, [pc, #476]	@ (8000ad8 <decodeCommand+0x2ac>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	4619      	mov	r1, r3
 80008fe:	6838      	ldr	r0, [r7, #0]
 8000900:	f001 fbef 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000904:	4b74      	ldr	r3, [pc, #464]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000906:	785b      	ldrb	r3, [r3, #1]
 8000908:	4619      	mov	r1, r3
 800090a:	6838      	ldr	r0, [r7, #0]
 800090c:	f001 fbe9 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gx;
 8000910:	4b74      	ldr	r3, [pc, #464]	@ (8000ae4 <decodeCommand+0x2b8>)
 8000912:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000916:	4b70      	ldr	r3, [pc, #448]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000918:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800091a:	4b6f      	ldr	r3, [pc, #444]	@ (8000ad8 <decodeCommand+0x2ac>)
 800091c:	781b      	ldrb	r3, [r3, #0]
 800091e:	4619      	mov	r1, r3
 8000920:	6838      	ldr	r0, [r7, #0]
 8000922:	f001 fbde 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000926:	4b6c      	ldr	r3, [pc, #432]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000928:	785b      	ldrb	r3, [r3, #1]
 800092a:	4619      	mov	r1, r3
 800092c:	6838      	ldr	r0, [r7, #0]
 800092e:	f001 fbd8 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gy;
 8000932:	4b6d      	ldr	r3, [pc, #436]	@ (8000ae8 <decodeCommand+0x2bc>)
 8000934:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000938:	4b67      	ldr	r3, [pc, #412]	@ (8000ad8 <decodeCommand+0x2ac>)
 800093a:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800093c:	4b66      	ldr	r3, [pc, #408]	@ (8000ad8 <decodeCommand+0x2ac>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	6838      	ldr	r0, [r7, #0]
 8000944:	f001 fbcd 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000948:	4b63      	ldr	r3, [pc, #396]	@ (8000ad8 <decodeCommand+0x2ac>)
 800094a:	785b      	ldrb	r3, [r3, #1]
 800094c:	4619      	mov	r1, r3
 800094e:	6838      	ldr	r0, [r7, #0]
 8000950:	f001 fbc7 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gz;
 8000954:	4b65      	ldr	r3, [pc, #404]	@ (8000aec <decodeCommand+0x2c0>)
 8000956:	f9b3 2000 	ldrsh.w	r2, [r3]
 800095a:	4b5f      	ldr	r3, [pc, #380]	@ (8000ad8 <decodeCommand+0x2ac>)
 800095c:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800095e:	4b5e      	ldr	r3, [pc, #376]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4619      	mov	r1, r3
 8000964:	6838      	ldr	r0, [r7, #0]
 8000966:	f001 fbbc 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800096a:	4b5b      	ldr	r3, [pc, #364]	@ (8000ad8 <decodeCommand+0x2ac>)
 800096c:	785b      	ldrb	r3, [r3, #1]
 800096e:	4619      	mov	r1, r3
 8000970:	6838      	ldr	r0, [r7, #0]
 8000972:	f001 fbb6 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	7a5b      	ldrb	r3, [r3, #9]
 800097a:	4619      	mov	r1, r3
 800097c:	6838      	ldr	r0, [r7, #0]
 800097e:	f001 fbb0 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		break;
 8000982:	e0a1      	b.n	8000ac8 <decodeCommand+0x29c>
	case GETADC:
		unerPrtcl_PutHeaderOnTx(dataTx, GETADC, 17);
 8000984:	2211      	movs	r2, #17
 8000986:	21f3      	movs	r1, #243	@ 0xf3
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f001 fafb 	bl	8001f84 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = adcDataTx[0];
 800098e:	4b58      	ldr	r3, [pc, #352]	@ (8000af0 <decodeCommand+0x2c4>)
 8000990:	881a      	ldrh	r2, [r3, #0]
 8000992:	4b51      	ldr	r3, [pc, #324]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000994:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000996:	4b50      	ldr	r3, [pc, #320]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	4619      	mov	r1, r3
 800099c:	6838      	ldr	r0, [r7, #0]
 800099e:	f001 fba0 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80009a2:	4b4d      	ldr	r3, [pc, #308]	@ (8000ad8 <decodeCommand+0x2ac>)
 80009a4:	785b      	ldrb	r3, [r3, #1]
 80009a6:	4619      	mov	r1, r3
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f001 fb9a 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[1];
 80009ae:	4b50      	ldr	r3, [pc, #320]	@ (8000af0 <decodeCommand+0x2c4>)
 80009b0:	885a      	ldrh	r2, [r3, #2]
 80009b2:	4b49      	ldr	r3, [pc, #292]	@ (8000ad8 <decodeCommand+0x2ac>)
 80009b4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80009b6:	4b48      	ldr	r3, [pc, #288]	@ (8000ad8 <decodeCommand+0x2ac>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	4619      	mov	r1, r3
 80009bc:	6838      	ldr	r0, [r7, #0]
 80009be:	f001 fb90 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80009c2:	4b45      	ldr	r3, [pc, #276]	@ (8000ad8 <decodeCommand+0x2ac>)
 80009c4:	785b      	ldrb	r3, [r3, #1]
 80009c6:	4619      	mov	r1, r3
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f001 fb8a 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[2];
 80009ce:	4b48      	ldr	r3, [pc, #288]	@ (8000af0 <decodeCommand+0x2c4>)
 80009d0:	889a      	ldrh	r2, [r3, #4]
 80009d2:	4b41      	ldr	r3, [pc, #260]	@ (8000ad8 <decodeCommand+0x2ac>)
 80009d4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80009d6:	4b40      	ldr	r3, [pc, #256]	@ (8000ad8 <decodeCommand+0x2ac>)
 80009d8:	781b      	ldrb	r3, [r3, #0]
 80009da:	4619      	mov	r1, r3
 80009dc:	6838      	ldr	r0, [r7, #0]
 80009de:	f001 fb80 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80009e2:	4b3d      	ldr	r3, [pc, #244]	@ (8000ad8 <decodeCommand+0x2ac>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	4619      	mov	r1, r3
 80009e8:	6838      	ldr	r0, [r7, #0]
 80009ea:	f001 fb7a 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[3];
 80009ee:	4b40      	ldr	r3, [pc, #256]	@ (8000af0 <decodeCommand+0x2c4>)
 80009f0:	88da      	ldrh	r2, [r3, #6]
 80009f2:	4b39      	ldr	r3, [pc, #228]	@ (8000ad8 <decodeCommand+0x2ac>)
 80009f4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80009f6:	4b38      	ldr	r3, [pc, #224]	@ (8000ad8 <decodeCommand+0x2ac>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	4619      	mov	r1, r3
 80009fc:	6838      	ldr	r0, [r7, #0]
 80009fe:	f001 fb70 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a02:	4b35      	ldr	r3, [pc, #212]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a04:	785b      	ldrb	r3, [r3, #1]
 8000a06:	4619      	mov	r1, r3
 8000a08:	6838      	ldr	r0, [r7, #0]
 8000a0a:	f001 fb6a 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[4];
 8000a0e:	4b38      	ldr	r3, [pc, #224]	@ (8000af0 <decodeCommand+0x2c4>)
 8000a10:	891a      	ldrh	r2, [r3, #8]
 8000a12:	4b31      	ldr	r3, [pc, #196]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a14:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000a16:	4b30      	ldr	r3, [pc, #192]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	6838      	ldr	r0, [r7, #0]
 8000a1e:	f001 fb60 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a22:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a24:	785b      	ldrb	r3, [r3, #1]
 8000a26:	4619      	mov	r1, r3
 8000a28:	6838      	ldr	r0, [r7, #0]
 8000a2a:	f001 fb5a 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[5];
 8000a2e:	4b30      	ldr	r3, [pc, #192]	@ (8000af0 <decodeCommand+0x2c4>)
 8000a30:	895a      	ldrh	r2, [r3, #10]
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a34:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000a36:	4b28      	ldr	r3, [pc, #160]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	6838      	ldr	r0, [r7, #0]
 8000a3e:	f001 fb50 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a42:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a44:	785b      	ldrb	r3, [r3, #1]
 8000a46:	4619      	mov	r1, r3
 8000a48:	6838      	ldr	r0, [r7, #0]
 8000a4a:	f001 fb4a 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[6];
 8000a4e:	4b28      	ldr	r3, [pc, #160]	@ (8000af0 <decodeCommand+0x2c4>)
 8000a50:	899a      	ldrh	r2, [r3, #12]
 8000a52:	4b21      	ldr	r3, [pc, #132]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a54:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	6838      	ldr	r0, [r7, #0]
 8000a5e:	f001 fb40 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a64:	785b      	ldrb	r3, [r3, #1]
 8000a66:	4619      	mov	r1, r3
 8000a68:	6838      	ldr	r0, [r7, #0]
 8000a6a:	f001 fb3a 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[7];
 8000a6e:	4b20      	ldr	r3, [pc, #128]	@ (8000af0 <decodeCommand+0x2c4>)
 8000a70:	89da      	ldrh	r2, [r3, #14]
 8000a72:	4b19      	ldr	r3, [pc, #100]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a74:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000a76:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	6838      	ldr	r0, [r7, #0]
 8000a7e:	f001 fb30 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a82:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <decodeCommand+0x2ac>)
 8000a84:	785b      	ldrb	r3, [r3, #1]
 8000a86:	4619      	mov	r1, r3
 8000a88:	6838      	ldr	r0, [r7, #0]
 8000a8a:	f001 fb2a 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	7a5b      	ldrb	r3, [r3, #9]
 8000a92:	4619      	mov	r1, r3
 8000a94:	6838      	ldr	r0, [r7, #0]
 8000a96:	f001 fb24 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		break;
 8000a9a:	e015      	b.n	8000ac8 <decodeCommand+0x29c>
		break;
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	7a12      	ldrb	r2, [r2, #8]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	4619      	mov	r1, r3
 8000aac:	6838      	ldr	r0, [r7, #0]
 8000aae:	f001 fa69 	bl	8001f84 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 8000ab2:	21ff      	movs	r1, #255	@ 0xff
 8000ab4:	6838      	ldr	r0, [r7, #0]
 8000ab6:	f001 fb14 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	7a5b      	ldrb	r3, [r3, #9]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	6838      	ldr	r0, [r7, #0]
 8000ac2:	f001 fb0e 	bl	80020e2 <unerPrtcl_PutByteOnTx>
		break;
 8000ac6:	bf00      	nop
	}
}
 8000ac8:	bf00      	nop
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	0800e538 	.word	0x0800e538
 8000ad4:	200006e4 	.word	0x200006e4
 8000ad8:	200006dc 	.word	0x200006dc
 8000adc:	200006e6 	.word	0x200006e6
 8000ae0:	200006e8 	.word	0x200006e8
 8000ae4:	200006ea 	.word	0x200006ea
 8000ae8:	200006ec 	.word	0x200006ec
 8000aec:	200006ee 	.word	0x200006ee
 8000af0:	200004b4 	.word	0x200004b4

08000af4 <do10ms>:

void do10ms() {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	if (IS10MS) {
 8000af8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <do10ms+0x70>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d02c      	beq.n	8000b60 <do10ms+0x6c>
		IS10MS = FALSE;
 8000b06:	4a17      	ldr	r2, [pc, #92]	@ (8000b64 <do10ms+0x70>)
 8000b08:	7813      	ldrb	r3, [r2, #0]
 8000b0a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b0e:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000b10:	4b15      	ldr	r3, [pc, #84]	@ (8000b68 <do10ms+0x74>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	3b01      	subs	r3, #1
 8000b16:	b2da      	uxtb	r2, r3
 8000b18:	4b13      	ldr	r3, [pc, #76]	@ (8000b68 <do10ms+0x74>)
 8000b1a:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 8000b1c:	4b13      	ldr	r3, [pc, #76]	@ (8000b6c <do10ms+0x78>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	3b01      	subs	r3, #1
 8000b22:	b2da      	uxtb	r2, r3
 8000b24:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <do10ms+0x78>)
 8000b26:	701a      	strb	r2, [r3, #0]
		ESP01_Timeout10ms();
 8000b28:	f7ff fd28 	bl	800057c <ESP01_Timeout10ms>
		if (!tmo20ms) {
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <do10ms+0x78>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d107      	bne.n	8000b44 <do10ms+0x50>
			tmo20ms = 2;
 8000b34:	4b0d      	ldr	r3, [pc, #52]	@ (8000b6c <do10ms+0x78>)
 8000b36:	2202      	movs	r2, #2
 8000b38:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <do10ms+0x70>)
 8000b3c:	7813      	ldrb	r3, [r2, #0]
 8000b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b42:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 8000b44:	4b08      	ldr	r3, [pc, #32]	@ (8000b68 <do10ms+0x74>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d109      	bne.n	8000b60 <do10ms+0x6c>
			tmo100ms = 10;
 8000b4c:	4b06      	ldr	r3, [pc, #24]	@ (8000b68 <do10ms+0x74>)
 8000b4e:	220a      	movs	r2, #10
 8000b50:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 8000b52:	4a04      	ldr	r2, [pc, #16]	@ (8000b64 <do10ms+0x70>)
 8000b54:	7813      	ldrb	r3, [r2, #0]
 8000b56:	f043 0320 	orr.w	r3, r3, #32
 8000b5a:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 8000b5c:	f000 f808 	bl	8000b70 <heartBeatTask>
		}
	}
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	200006e0 	.word	0x200006e0
 8000b68:	20000028 	.word	0x20000028
 8000b6c:	20000029 	.word	0x20000029

08000b70 <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 8000b74:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <heartBeatTask+0x44>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	43db      	mvns	r3, r3
 8000b7a:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb8 <heartBeatTask+0x48>)
 8000b7c:	7812      	ldrb	r2, [r2, #0]
 8000b7e:	4611      	mov	r1, r2
 8000b80:	2201      	movs	r2, #1
 8000b82:	408a      	lsls	r2, r1
 8000b84:	4013      	ands	r3, r2
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d004      	beq.n	8000b94 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 8000b8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b8e:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <heartBeatTask+0x4c>)
 8000b90:	f003 f88b 	bl	8003caa <HAL_GPIO_TogglePin>

	times++;
 8000b94:	4b08      	ldr	r3, [pc, #32]	@ (8000bb8 <heartBeatTask+0x48>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	3301      	adds	r3, #1
 8000b9a:	b2da      	uxtb	r2, r3
 8000b9c:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <heartBeatTask+0x48>)
 8000b9e:	701a      	strb	r2, [r3, #0]
	times &= 31;
 8000ba0:	4b05      	ldr	r3, [pc, #20]	@ (8000bb8 <heartBeatTask+0x48>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	f003 031f 	and.w	r3, r3, #31
 8000ba8:	b2da      	uxtb	r2, r3
 8000baa:	4b03      	ldr	r3, [pc, #12]	@ (8000bb8 <heartBeatTask+0x48>)
 8000bac:	701a      	strb	r2, [r3, #0]
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000000 	.word	0x20000000
 8000bb8:	20000710 	.word	0x20000710
 8000bbc:	40020800 	.word	0x40020800

08000bc0 <displayMemWrite>:

void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af04      	add	r7, sp, #16
 8000bc6:	6039      	str	r1, [r7, #0]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	461a      	mov	r2, r3
 8000bcc:	4603      	mov	r3, r0
 8000bce:	71fb      	strb	r3, [r7, #7]
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	71bb      	strb	r3, [r7, #6]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8000bd8:	79fb      	ldrb	r3, [r7, #7]
 8000bda:	b299      	uxth	r1, r3
 8000bdc:	797b      	ldrb	r3, [r7, #5]
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	79bb      	ldrb	r3, [r7, #6]
 8000be2:	b29b      	uxth	r3, r3
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295
 8000be8:	9002      	str	r0, [sp, #8]
 8000bea:	9301      	str	r3, [sp, #4]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	9300      	str	r3, [sp, #0]
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	4803      	ldr	r0, [pc, #12]	@ (8000c00 <displayMemWrite+0x40>)
 8000bf4:	f003 f9ce 	bl	8003f94 <HAL_I2C_Mem_Write>
}
 8000bf8:	bf00      	nop
 8000bfa:	3708      	adds	r7, #8
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	20000228 	.word	0x20000228

08000c04 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	6039      	str	r1, [r7, #0]
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	461a      	mov	r2, r3
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]
 8000c14:	460b      	mov	r3, r1
 8000c16:	71bb      	strb	r3, [r7, #6]
 8000c18:	4613      	mov	r3, r2
 8000c1a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	b299      	uxth	r1, r3
 8000c20:	797b      	ldrb	r3, [r7, #5]
 8000c22:	b29a      	uxth	r2, r3
 8000c24:	79bb      	ldrb	r3, [r7, #6]
 8000c26:	b29b      	uxth	r3, r3
 8000c28:	9301      	str	r3, [sp, #4]
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	9300      	str	r3, [sp, #0]
 8000c2e:	2301      	movs	r3, #1
 8000c30:	4803      	ldr	r0, [pc, #12]	@ (8000c40 <displayMemWriteDMA+0x3c>)
 8000c32:	f003 faa9 	bl	8004188 <HAL_I2C_Mem_Write_DMA>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	20000228 	.word	0x20000228

08000c44 <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af04      	add	r7, sp, #16
 8000c4a:	6039      	str	r1, [r7, #0]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	461a      	mov	r2, r3
 8000c50:	4603      	mov	r3, r0
 8000c52:	71fb      	strb	r3, [r7, #7]
 8000c54:	460b      	mov	r3, r1
 8000c56:	71bb      	strb	r3, [r7, #6]
 8000c58:	4613      	mov	r3, r2
 8000c5a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8000c5c:	79fb      	ldrb	r3, [r7, #7]
 8000c5e:	b299      	uxth	r1, r3
 8000c60:	797b      	ldrb	r3, [r7, #5]
 8000c62:	b29a      	uxth	r2, r3
 8000c64:	79bb      	ldrb	r3, [r7, #6]
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	9002      	str	r0, [sp, #8]
 8000c6e:	9301      	str	r3, [sp, #4]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	2301      	movs	r3, #1
 8000c76:	4803      	ldr	r0, [pc, #12]	@ (8000c84 <mpuMemWrite+0x40>)
 8000c78:	f003 f98c 	bl	8003f94 <HAL_I2C_Mem_Write>
}
 8000c7c:	bf00      	nop
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000228 	.word	0x20000228

08000c88 <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	6039      	str	r1, [r7, #0]
 8000c90:	4611      	mov	r1, r2
 8000c92:	461a      	mov	r2, r3
 8000c94:	4603      	mov	r3, r0
 8000c96:	71fb      	strb	r3, [r7, #7]
 8000c98:	460b      	mov	r3, r1
 8000c9a:	71bb      	strb	r3, [r7, #6]
 8000c9c:	4613      	mov	r3, r2
 8000c9e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	b299      	uxth	r1, r3
 8000ca4:	797b      	ldrb	r3, [r7, #5]
 8000ca6:	b29a      	uxth	r2, r3
 8000ca8:	79bb      	ldrb	r3, [r7, #6]
 8000caa:	b29b      	uxth	r3, r3
 8000cac:	9301      	str	r3, [sp, #4]
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	4803      	ldr	r0, [pc, #12]	@ (8000cc4 <mpuMemReadDMA+0x3c>)
 8000cb6:	f003 fbc5 	bl	8004444 <HAL_I2C_Mem_Read_DMA>
}
 8000cba:	bf00      	nop
 8000cbc:	3708      	adds	r7, #8
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000228 	.word	0x20000228

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ccc:	f001 fbdc 	bl	8002488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd0:	f000 f876 	bl	8000dc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd4:	f000 fbee 	bl	80014b4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd8:	f000 fbae 	bl	8001438 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cdc:	f000 f8d8 	bl	8000e90 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000ce0:	f000 f98a 	bl	8000ff8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000ce4:	f000 f9b6 	bl	8001054 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000ce8:	f00c fe40 	bl	800d96c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000cec:	f000 fa18 	bl	8001120 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cf0:	f000 fa7a 	bl	80011e8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000cf4:	f000 fb26 	bl	8001344 <MX_TIM4_Init>
  MX_USART1_Init();
 8000cf8:	f000 fb72 	bl	80013e0 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8000cfc:	481e      	ldr	r0, [pc, #120]	@ (8000d78 <main+0xb0>)
 8000cfe:	f00c ff87 	bl	800dc10 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1);
 8000d02:	481e      	ldr	r0, [pc, #120]	@ (8000d7c <main+0xb4>)
 8000d04:	f007 fd7e 	bl	8008804 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000d08:	481d      	ldr	r0, [pc, #116]	@ (8000d80 <main+0xb8>)
 8000d0a:	f007 fd7b 	bl	8008804 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000d0e:	481d      	ldr	r0, [pc, #116]	@ (8000d84 <main+0xbc>)
 8000d10:	f007 fd78 	bl	8008804 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000d14:	481c      	ldr	r0, [pc, #112]	@ (8000d88 <main+0xc0>)
 8000d16:	f007 fd75 	bl	8008804 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d20:	481a      	ldr	r0, [pc, #104]	@ (8000d8c <main+0xc4>)
 8000d22:	f002 ffa9 	bl	8003c78 <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 8000d26:	481a      	ldr	r0, [pc, #104]	@ (8000d90 <main+0xc8>)
 8000d28:	f000 fce4 	bl	80016f4 <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 8000d2c:	4819      	ldr	r0, [pc, #100]	@ (8000d94 <main+0xcc>)
 8000d2e:	f000 fcd1 	bl	80016d4 <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 8000d32:	4819      	ldr	r0, [pc, #100]	@ (8000d98 <main+0xd0>)
 8000d34:	f000 fcbe 	bl	80016b4 <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 8000d38:	f000 fcec 	bl	8001714 <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 8000d3c:	4817      	ldr	r0, [pc, #92]	@ (8000d9c <main+0xd4>)
 8000d3e:	f000 fc2f 	bl	80015a0 <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 8000d42:	4817      	ldr	r0, [pc, #92]	@ (8000da0 <main+0xd8>)
 8000d44:	f000 fc3c 	bl	80015c0 <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 8000d48:	4816      	ldr	r0, [pc, #88]	@ (8000da4 <main+0xdc>)
 8000d4a:	f000 fc49 	bl	80015e0 <mpu6050_Attach_MemReadDMA>
	mpu6050_Init();
 8000d4e:	f000 fc6b 	bl	8001628 <mpu6050_Init>

//	esp01Handler.DoCHPD = CHPD_Control(ON);
//	esp01Handler.WriteByteToBufRX = USART_SendByte();
//	esp01Handler.WriteUSARTByte = FeedRxBuf(byte);

	ESP01_Init(&esp01Handler);
 8000d52:	4815      	ldr	r0, [pc, #84]	@ (8000da8 <main+0xe0>)
 8000d54:	f7ff fbd6 	bl	8000504 <ESP01_Init>

	//ESP01_SetWIFI("ARPANET","1969-Apolo_11-2022");
	//ESP01_StartUDP("192.168.0.10", 30010, 30001);

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <main+0xe4>)
 8000d5a:	4a15      	ldr	r2, [pc, #84]	@ (8000db0 <main+0xe8>)
 8000d5c:	4915      	ldr	r1, [pc, #84]	@ (8000db4 <main+0xec>)
 8000d5e:	4816      	ldr	r0, [pc, #88]	@ (8000db8 <main+0xf0>)
 8000d60:	f001 fb30 	bl	80023c4 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 8000d64:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <main+0xf4>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 8000d6a:	f7ff fec3 	bl	8000af4 <do10ms>
		USBTask();
 8000d6e:	f7ff fd11 	bl	8000794 <USBTask>
		do10ms();
 8000d72:	bf00      	nop
 8000d74:	e7f9      	b.n	8000d6a <main+0xa2>
 8000d76:	bf00      	nop
 8000d78:	08000739 	.word	0x08000739
 8000d7c:	2000033c 	.word	0x2000033c
 8000d80:	20000384 	.word	0x20000384
 8000d84:	200003cc 	.word	0x200003cc
 8000d88:	20000414 	.word	0x20000414
 8000d8c:	40020800 	.word	0x40020800
 8000d90:	200006e1 	.word	0x200006e1
 8000d94:	08000bc1 	.word	0x08000bc1
 8000d98:	08000c05 	.word	0x08000c05
 8000d9c:	200006e2 	.word	0x200006e2
 8000da0:	08000c45 	.word	0x08000c45
 8000da4:	08000c89 	.word	0x08000c89
 8000da8:	20000704 	.word	0x20000704
 8000dac:	200004dc 	.word	0x200004dc
 8000db0:	200005dc 	.word	0x200005dc
 8000db4:	200004c4 	.word	0x200004c4
 8000db8:	200004d0 	.word	0x200004d0
 8000dbc:	200006e0 	.word	0x200006e0

08000dc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b094      	sub	sp, #80	@ 0x50
 8000dc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	2230      	movs	r2, #48	@ 0x30
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f00d fb48 	bl	800e464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dd4:	f107 030c 	add.w	r3, r7, #12
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	605a      	str	r2, [r3, #4]
 8000dde:	609a      	str	r2, [r3, #8]
 8000de0:	60da      	str	r2, [r3, #12]
 8000de2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	4b27      	ldr	r3, [pc, #156]	@ (8000e88 <SystemClock_Config+0xc8>)
 8000dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dec:	4a26      	ldr	r2, [pc, #152]	@ (8000e88 <SystemClock_Config+0xc8>)
 8000dee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000df2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000df4:	4b24      	ldr	r3, [pc, #144]	@ (8000e88 <SystemClock_Config+0xc8>)
 8000df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dfc:	60bb      	str	r3, [r7, #8]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
 8000e04:	4b21      	ldr	r3, [pc, #132]	@ (8000e8c <SystemClock_Config+0xcc>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a20      	ldr	r2, [pc, #128]	@ (8000e8c <SystemClock_Config+0xcc>)
 8000e0a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	4b1e      	ldr	r3, [pc, #120]	@ (8000e8c <SystemClock_Config+0xcc>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e26:	2302      	movs	r3, #2
 8000e28:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e2a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000e30:	2319      	movs	r3, #25
 8000e32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000e34:	23c0      	movs	r3, #192	@ 0xc0
 8000e36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e40:	f107 0320 	add.w	r3, r7, #32
 8000e44:	4618      	mov	r0, r3
 8000e46:	f007 f835 	bl	8007eb4 <HAL_RCC_OscConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e50:	f000 fba0 	bl	8001594 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e54:	230f      	movs	r3, #15
 8000e56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2103      	movs	r1, #3
 8000e70:	4618      	mov	r0, r3
 8000e72:	f007 fa97 	bl	80083a4 <HAL_RCC_ClockConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e7c:	f000 fb8a 	bl	8001594 <Error_Handler>
  }
}
 8000e80:	bf00      	nop
 8000e82:	3750      	adds	r7, #80	@ 0x50
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40007000 	.word	0x40007000

08000e90 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e96:	463b      	mov	r3, r7
 8000e98:	2200      	movs	r2, #0
 8000e9a:	601a      	str	r2, [r3, #0]
 8000e9c:	605a      	str	r2, [r3, #4]
 8000e9e:	609a      	str	r2, [r3, #8]
 8000ea0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ea2:	4b52      	ldr	r3, [pc, #328]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000ea4:	4a52      	ldr	r2, [pc, #328]	@ (8000ff0 <MX_ADC1_Init+0x160>)
 8000ea6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ea8:	4b50      	ldr	r3, [pc, #320]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000eaa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000eae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000eb0:	4b4e      	ldr	r3, [pc, #312]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000eb6:	4b4d      	ldr	r3, [pc, #308]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ebc:	4b4b      	ldr	r3, [pc, #300]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ec2:	4b4a      	ldr	r3, [pc, #296]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eca:	4b48      	ldr	r3, [pc, #288]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed0:	4b46      	ldr	r3, [pc, #280]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000ed2:	4a48      	ldr	r2, [pc, #288]	@ (8000ff4 <MX_ADC1_Init+0x164>)
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ed6:	4b45      	ldr	r3, [pc, #276]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000edc:	4b43      	ldr	r3, [pc, #268]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000ede:	2208      	movs	r2, #8
 8000ee0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ee2:	4b42      	ldr	r3, [pc, #264]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eea:	4b40      	ldr	r3, [pc, #256]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000eec:	2201      	movs	r2, #1
 8000eee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ef0:	483e      	ldr	r0, [pc, #248]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000ef2:	f001 fb5f 	bl	80025b4 <HAL_ADC_Init>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000efc:	f000 fb4a 	bl	8001594 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f04:	2301      	movs	r3, #1
 8000f06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4836      	ldr	r0, [pc, #216]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000f12:	f001 fdb5 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f1c:	f000 fb3a 	bl	8001594 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f24:	2302      	movs	r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f28:	463b      	mov	r3, r7
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	482f      	ldr	r0, [pc, #188]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000f2e:	f001 fda7 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d001      	beq.n	8000f3c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f38:	f000 fb2c 	bl	8001594 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f40:	2303      	movs	r3, #3
 8000f42:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f44:	463b      	mov	r3, r7
 8000f46:	4619      	mov	r1, r3
 8000f48:	4828      	ldr	r0, [pc, #160]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000f4a:	f001 fd99 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f54:	f000 fb1e 	bl	8001594 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f5c:	2304      	movs	r3, #4
 8000f5e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f60:	463b      	mov	r3, r7
 8000f62:	4619      	mov	r1, r3
 8000f64:	4821      	ldr	r0, [pc, #132]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000f66:	f001 fd8b 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f70:	f000 fb10 	bl	8001594 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000f74:	2304      	movs	r3, #4
 8000f76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000f78:	2305      	movs	r3, #5
 8000f7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	4619      	mov	r1, r3
 8000f80:	481a      	ldr	r0, [pc, #104]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000f82:	f001 fd7d 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8000f8c:	f000 fb02 	bl	8001594 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000f90:	2305      	movs	r3, #5
 8000f92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8000f94:	2306      	movs	r3, #6
 8000f96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f98:	463b      	mov	r3, r7
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4813      	ldr	r0, [pc, #76]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000f9e:	f001 fd6f 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000fa8:	f000 faf4 	bl	8001594 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000fac:	2306      	movs	r3, #6
 8000fae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fb4:	463b      	mov	r3, r7
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	480c      	ldr	r0, [pc, #48]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000fba:	f001 fd61 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000fc4:	f000 fae6 	bl	8001594 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000fc8:	2307      	movs	r3, #7
 8000fca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4805      	ldr	r0, [pc, #20]	@ (8000fec <MX_ADC1_Init+0x15c>)
 8000fd6:	f001 fd53 	bl	8002a80 <HAL_ADC_ConfigChannel>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 8000fe0:	f000 fad8 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000180 	.word	0x20000180
 8000ff0:	40012000 	.word	0x40012000
 8000ff4:	0f000001 	.word	0x0f000001

08000ff8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ffc:	4b12      	ldr	r3, [pc, #72]	@ (8001048 <MX_I2C1_Init+0x50>)
 8000ffe:	4a13      	ldr	r2, [pc, #76]	@ (800104c <MX_I2C1_Init+0x54>)
 8001000:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001002:	4b11      	ldr	r3, [pc, #68]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001004:	4a12      	ldr	r2, [pc, #72]	@ (8001050 <MX_I2C1_Init+0x58>)
 8001006:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001008:	4b0f      	ldr	r3, [pc, #60]	@ (8001048 <MX_I2C1_Init+0x50>)
 800100a:	2200      	movs	r2, #0
 800100c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800100e:	4b0e      	ldr	r3, [pc, #56]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001010:	2200      	movs	r2, #0
 8001012:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001014:	4b0c      	ldr	r3, [pc, #48]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001016:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800101a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800101c:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <MX_I2C1_Init+0x50>)
 800101e:	2200      	movs	r2, #0
 8001020:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001022:	4b09      	ldr	r3, [pc, #36]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001028:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <MX_I2C1_Init+0x50>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800102e:	4b06      	ldr	r3, [pc, #24]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001034:	4804      	ldr	r0, [pc, #16]	@ (8001048 <MX_I2C1_Init+0x50>)
 8001036:	f002 fe53 	bl	8003ce0 <HAL_I2C_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001040:	f000 faa8 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001044:	bf00      	nop
 8001046:	bd80      	pop	{r7, pc}
 8001048:	20000228 	.word	0x20000228
 800104c:	40005400 	.word	0x40005400
 8001050:	00061a80 	.word	0x00061a80

08001054 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08c      	sub	sp, #48	@ 0x30
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001068:	f107 030c 	add.w	r3, r7, #12
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001080:	4b25      	ldr	r3, [pc, #148]	@ (8001118 <MX_TIM1_Init+0xc4>)
 8001082:	4a26      	ldr	r2, [pc, #152]	@ (800111c <MX_TIM1_Init+0xc8>)
 8001084:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8001086:	4b24      	ldr	r3, [pc, #144]	@ (8001118 <MX_TIM1_Init+0xc4>)
 8001088:	225f      	movs	r2, #95	@ 0x5f
 800108a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108c:	4b22      	ldr	r3, [pc, #136]	@ (8001118 <MX_TIM1_Init+0xc4>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001092:	4b21      	ldr	r3, [pc, #132]	@ (8001118 <MX_TIM1_Init+0xc4>)
 8001094:	22f9      	movs	r2, #249	@ 0xf9
 8001096:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001098:	4b1f      	ldr	r3, [pc, #124]	@ (8001118 <MX_TIM1_Init+0xc4>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800109e:	4b1e      	ldr	r3, [pc, #120]	@ (8001118 <MX_TIM1_Init+0xc4>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a4:	4b1c      	ldr	r3, [pc, #112]	@ (8001118 <MX_TIM1_Init+0xc4>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010aa:	481b      	ldr	r0, [pc, #108]	@ (8001118 <MX_TIM1_Init+0xc4>)
 80010ac:	f007 fb5a 	bl	8008764 <HAL_TIM_Base_Init>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 80010b6:	f000 fa6d 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010be:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	4619      	mov	r1, r3
 80010c6:	4814      	ldr	r0, [pc, #80]	@ (8001118 <MX_TIM1_Init+0xc4>)
 80010c8:	f007 fe0a 	bl	8008ce0 <HAL_TIM_ConfigClockSource>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80010d2:	f000 fa5f 	bl	8001594 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80010da:	2300      	movs	r3, #0
 80010dc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80010de:	f107 030c 	add.w	r3, r7, #12
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	@ (8001118 <MX_TIM1_Init+0xc4>)
 80010e6:	f007 fec2 	bl	8008e6e <HAL_TIM_SlaveConfigSynchro>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80010f0:	f000 fa50 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010fc:	1d3b      	adds	r3, r7, #4
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_TIM1_Init+0xc4>)
 8001102:	f008 fa5d 	bl	80095c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 800110c:	f000 fa42 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3730      	adds	r7, #48	@ 0x30
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	2000033c 	.word	0x2000033c
 800111c:	40010000 	.word	0x40010000

08001120 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08c      	sub	sp, #48	@ 0x30
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]
 8001132:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2200      	movs	r2, #0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	605a      	str	r2, [r3, #4]
 800113e:	609a      	str	r2, [r3, #8]
 8001140:	60da      	str	r2, [r3, #12]
 8001142:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001144:	1d3b      	adds	r3, r7, #4
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800114c:	4b25      	ldr	r3, [pc, #148]	@ (80011e4 <MX_TIM2_Init+0xc4>)
 800114e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001152:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001154:	4b23      	ldr	r3, [pc, #140]	@ (80011e4 <MX_TIM2_Init+0xc4>)
 8001156:	225f      	movs	r2, #95	@ 0x5f
 8001158:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800115a:	4b22      	ldr	r3, [pc, #136]	@ (80011e4 <MX_TIM2_Init+0xc4>)
 800115c:	2200      	movs	r2, #0
 800115e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <MX_TIM2_Init+0xc4>)
 8001162:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001166:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001168:	4b1e      	ldr	r3, [pc, #120]	@ (80011e4 <MX_TIM2_Init+0xc4>)
 800116a:	2200      	movs	r2, #0
 800116c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800116e:	4b1d      	ldr	r3, [pc, #116]	@ (80011e4 <MX_TIM2_Init+0xc4>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001174:	481b      	ldr	r0, [pc, #108]	@ (80011e4 <MX_TIM2_Init+0xc4>)
 8001176:	f007 faf5 	bl	8008764 <HAL_TIM_Base_Init>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001180:	f000 fa08 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001184:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001188:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800118a:	f107 0320 	add.w	r3, r7, #32
 800118e:	4619      	mov	r1, r3
 8001190:	4814      	ldr	r0, [pc, #80]	@ (80011e4 <MX_TIM2_Init+0xc4>)
 8001192:	f007 fda5 	bl	8008ce0 <HAL_TIM_ConfigClockSource>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 800119c:	f000 f9fa 	bl	8001594 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80011a4:	2300      	movs	r3, #0
 80011a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4619      	mov	r1, r3
 80011ae:	480d      	ldr	r0, [pc, #52]	@ (80011e4 <MX_TIM2_Init+0xc4>)
 80011b0:	f007 fe5d 	bl	8008e6e <HAL_TIM_SlaveConfigSynchro>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80011ba:	f000 f9eb 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011c6:	1d3b      	adds	r3, r7, #4
 80011c8:	4619      	mov	r1, r3
 80011ca:	4806      	ldr	r0, [pc, #24]	@ (80011e4 <MX_TIM2_Init+0xc4>)
 80011cc:	f008 f9f8 	bl	80095c0 <HAL_TIMEx_MasterConfigSynchronization>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80011d6:	f000 f9dd 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80011da:	bf00      	nop
 80011dc:	3730      	adds	r7, #48	@ 0x30
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000384 	.word	0x20000384

080011e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b092      	sub	sp, #72	@ 0x48
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	f107 031c 	add.w	r3, r7, #28
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
 8001214:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001216:	463b      	mov	r3, r7
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
 800121c:	605a      	str	r2, [r3, #4]
 800121e:	609a      	str	r2, [r3, #8]
 8001220:	60da      	str	r2, [r3, #12]
 8001222:	611a      	str	r2, [r3, #16]
 8001224:	615a      	str	r2, [r3, #20]
 8001226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001228:	4b44      	ldr	r3, [pc, #272]	@ (800133c <MX_TIM3_Init+0x154>)
 800122a:	4a45      	ldr	r2, [pc, #276]	@ (8001340 <MX_TIM3_Init+0x158>)
 800122c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 800122e:	4b43      	ldr	r3, [pc, #268]	@ (800133c <MX_TIM3_Init+0x154>)
 8001230:	225f      	movs	r2, #95	@ 0x5f
 8001232:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001234:	4b41      	ldr	r3, [pc, #260]	@ (800133c <MX_TIM3_Init+0x154>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800123a:	4b40      	ldr	r3, [pc, #256]	@ (800133c <MX_TIM3_Init+0x154>)
 800123c:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001240:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001242:	4b3e      	ldr	r3, [pc, #248]	@ (800133c <MX_TIM3_Init+0x154>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001248:	4b3c      	ldr	r3, [pc, #240]	@ (800133c <MX_TIM3_Init+0x154>)
 800124a:	2200      	movs	r2, #0
 800124c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800124e:	483b      	ldr	r0, [pc, #236]	@ (800133c <MX_TIM3_Init+0x154>)
 8001250:	f007 fa88 	bl	8008764 <HAL_TIM_Base_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800125a:	f000 f99b 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800125e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001262:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001264:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001268:	4619      	mov	r1, r3
 800126a:	4834      	ldr	r0, [pc, #208]	@ (800133c <MX_TIM3_Init+0x154>)
 800126c:	f007 fd38 	bl	8008ce0 <HAL_TIM_ConfigClockSource>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001276:	f000 f98d 	bl	8001594 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800127a:	4830      	ldr	r0, [pc, #192]	@ (800133c <MX_TIM3_Init+0x154>)
 800127c:	f007 fb24 	bl	80088c8 <HAL_TIM_PWM_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001286:	f000 f985 	bl	8001594 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001292:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001296:	4619      	mov	r1, r3
 8001298:	4828      	ldr	r0, [pc, #160]	@ (800133c <MX_TIM3_Init+0x154>)
 800129a:	f007 fde8 	bl	8008e6e <HAL_TIM_SlaveConfigSynchro>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80012a4:	f000 f976 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4821      	ldr	r0, [pc, #132]	@ (800133c <MX_TIM3_Init+0x154>)
 80012b8:	f008 f982 	bl	80095c0 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80012c2:	f000 f967 	bl	8001594 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c6:	2360      	movs	r3, #96	@ 0x60
 80012c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80012ca:	2300      	movs	r3, #0
 80012cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d6:	463b      	mov	r3, r7
 80012d8:	2200      	movs	r2, #0
 80012da:	4619      	mov	r1, r3
 80012dc:	4817      	ldr	r0, [pc, #92]	@ (800133c <MX_TIM3_Init+0x154>)
 80012de:	f007 fc3d 	bl	8008b5c <HAL_TIM_PWM_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80012e8:	f000 f954 	bl	8001594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012ec:	463b      	mov	r3, r7
 80012ee:	2204      	movs	r2, #4
 80012f0:	4619      	mov	r1, r3
 80012f2:	4812      	ldr	r0, [pc, #72]	@ (800133c <MX_TIM3_Init+0x154>)
 80012f4:	f007 fc32 	bl	8008b5c <HAL_TIM_PWM_ConfigChannel>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80012fe:	f000 f949 	bl	8001594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001302:	463b      	mov	r3, r7
 8001304:	2208      	movs	r2, #8
 8001306:	4619      	mov	r1, r3
 8001308:	480c      	ldr	r0, [pc, #48]	@ (800133c <MX_TIM3_Init+0x154>)
 800130a:	f007 fc27 	bl	8008b5c <HAL_TIM_PWM_ConfigChannel>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001314:	f000 f93e 	bl	8001594 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001318:	463b      	mov	r3, r7
 800131a:	220c      	movs	r2, #12
 800131c:	4619      	mov	r1, r3
 800131e:	4807      	ldr	r0, [pc, #28]	@ (800133c <MX_TIM3_Init+0x154>)
 8001320:	f007 fc1c 	bl	8008b5c <HAL_TIM_PWM_ConfigChannel>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 800132a:	f000 f933 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800132e:	4803      	ldr	r0, [pc, #12]	@ (800133c <MX_TIM3_Init+0x154>)
 8001330:	f000 fcc6 	bl	8001cc0 <HAL_TIM_MspPostInit>

}
 8001334:	bf00      	nop
 8001336:	3748      	adds	r7, #72	@ 0x48
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200003cc 	.word	0x200003cc
 8001340:	40000400 	.word	0x40000400

08001344 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	463b      	mov	r3, r7
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001360:	4b1d      	ldr	r3, [pc, #116]	@ (80013d8 <MX_TIM4_Init+0x94>)
 8001362:	4a1e      	ldr	r2, [pc, #120]	@ (80013dc <MX_TIM4_Init+0x98>)
 8001364:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 191;
 8001366:	4b1c      	ldr	r3, [pc, #112]	@ (80013d8 <MX_TIM4_Init+0x94>)
 8001368:	22bf      	movs	r2, #191	@ 0xbf
 800136a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136c:	4b1a      	ldr	r3, [pc, #104]	@ (80013d8 <MX_TIM4_Init+0x94>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8001372:	4b19      	ldr	r3, [pc, #100]	@ (80013d8 <MX_TIM4_Init+0x94>)
 8001374:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001378:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800137a:	4b17      	ldr	r3, [pc, #92]	@ (80013d8 <MX_TIM4_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001380:	4b15      	ldr	r3, [pc, #84]	@ (80013d8 <MX_TIM4_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001386:	4814      	ldr	r0, [pc, #80]	@ (80013d8 <MX_TIM4_Init+0x94>)
 8001388:	f007 f9ec 	bl	8008764 <HAL_TIM_Base_Init>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001392:	f000 f8ff 	bl	8001594 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001396:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800139a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800139c:	f107 0308 	add.w	r3, r7, #8
 80013a0:	4619      	mov	r1, r3
 80013a2:	480d      	ldr	r0, [pc, #52]	@ (80013d8 <MX_TIM4_Init+0x94>)
 80013a4:	f007 fc9c 	bl	8008ce0 <HAL_TIM_ConfigClockSource>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80013ae:	f000 f8f1 	bl	8001594 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	4619      	mov	r1, r3
 80013be:	4806      	ldr	r0, [pc, #24]	@ (80013d8 <MX_TIM4_Init+0x94>)
 80013c0:	f008 f8fe 	bl	80095c0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80013ca:	f000 f8e3 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	20000414 	.word	0x20000414
 80013dc:	40000800 	.word	0x40000800

080013e0 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_USART1_Init+0x50>)
 80013e6:	4a13      	ldr	r2, [pc, #76]	@ (8001434 <MX_USART1_Init+0x54>)
 80013e8:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_USART1_Init+0x50>)
 80013ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f0:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_USART1_Init+0x50>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001430 <MX_USART1_Init+0x50>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_USART1_Init+0x50>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_USART1_Init+0x50>)
 8001406:	220c      	movs	r2, #12
 8001408:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_USART1_Init+0x50>)
 800140c:	2200      	movs	r2, #0
 800140e:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_USART1_Init+0x50>)
 8001412:	2200      	movs	r2, #0
 8001414:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_USART1_Init+0x50>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_USART1_Init+0x50>)
 800141e:	f008 f951 	bl	80096c4 <HAL_USART_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8001428:	f000 f8b4 	bl	8001594 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	2000045c 	.word	0x2000045c
 8001434:	40011000 	.word	0x40011000

08001438 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
 8001442:	4b1b      	ldr	r3, [pc, #108]	@ (80014b0 <MX_DMA_Init+0x78>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001446:	4a1a      	ldr	r2, [pc, #104]	@ (80014b0 <MX_DMA_Init+0x78>)
 8001448:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800144c:	6313      	str	r3, [r2, #48]	@ 0x30
 800144e:	4b18      	ldr	r3, [pc, #96]	@ (80014b0 <MX_DMA_Init+0x78>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001452:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	603b      	str	r3, [r7, #0]
 800145e:	4b14      	ldr	r3, [pc, #80]	@ (80014b0 <MX_DMA_Init+0x78>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001462:	4a13      	ldr	r2, [pc, #76]	@ (80014b0 <MX_DMA_Init+0x78>)
 8001464:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001468:	6313      	str	r3, [r2, #48]	@ 0x30
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MX_DMA_Init+0x78>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001472:	603b      	str	r3, [r7, #0]
 8001474:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2100      	movs	r1, #0
 800147a:	200b      	movs	r0, #11
 800147c:	f001 fe95 	bl	80031aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001480:	200b      	movs	r0, #11
 8001482:	f001 feae 	bl	80031e2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	2100      	movs	r1, #0
 800148a:	200c      	movs	r0, #12
 800148c:	f001 fe8d 	bl	80031aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001490:	200c      	movs	r0, #12
 8001492:	f001 fea6 	bl	80031e2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001496:	2200      	movs	r2, #0
 8001498:	2100      	movs	r1, #0
 800149a:	2038      	movs	r0, #56	@ 0x38
 800149c:	f001 fe85 	bl	80031aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80014a0:	2038      	movs	r0, #56	@ 0x38
 80014a2:	f001 fe9e 	bl	80031e2 <HAL_NVIC_EnableIRQ>

}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40023800 	.word	0x40023800

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <MX_GPIO_Init+0xd4>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001588 <MX_GPIO_Init+0xd4>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b2b      	ldr	r3, [pc, #172]	@ (8001588 <MX_GPIO_Init+0xd4>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <MX_GPIO_Init+0xd4>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a26      	ldr	r2, [pc, #152]	@ (8001588 <MX_GPIO_Init+0xd4>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b24      	ldr	r3, [pc, #144]	@ (8001588 <MX_GPIO_Init+0xd4>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b20      	ldr	r3, [pc, #128]	@ (8001588 <MX_GPIO_Init+0xd4>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a1f      	ldr	r2, [pc, #124]	@ (8001588 <MX_GPIO_Init+0xd4>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b1d      	ldr	r3, [pc, #116]	@ (8001588 <MX_GPIO_Init+0xd4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b19      	ldr	r3, [pc, #100]	@ (8001588 <MX_GPIO_Init+0xd4>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a18      	ldr	r2, [pc, #96]	@ (8001588 <MX_GPIO_Init+0xd4>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b16      	ldr	r3, [pc, #88]	@ (8001588 <MX_GPIO_Init+0xd4>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001540:	4812      	ldr	r0, [pc, #72]	@ (800158c <MX_GPIO_Init+0xd8>)
 8001542:	f002 fb99 	bl	8003c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001546:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800154a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154c:	2301      	movs	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	480b      	ldr	r0, [pc, #44]	@ (800158c <MX_GPIO_Init+0xd8>)
 8001560:	f002 fa06 	bl	8003970 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 8001564:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001568:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	4619      	mov	r1, r3
 8001578:	4805      	ldr	r0, [pc, #20]	@ (8001590 <MX_GPIO_Init+0xdc>)
 800157a:	f002 f9f9 	bl	8003970 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800157e:	bf00      	nop
 8001580:	3728      	adds	r7, #40	@ 0x28
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800
 800158c:	40020800 	.word	0x40020800
 8001590:	40020400 	.word	0x40020400

08001594 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001598:	b672      	cpsid	i
}
 800159a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800159c:	bf00      	nop
 800159e:	e7fd      	b.n	800159c <Error_Handler+0x8>

080015a0 <mpu6050_ADC_ConfCpltCallback>:
int16_t gz_real;

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = (uint8_t *)PtrRx;
 80015a8:	4a04      	ldr	r2, [pc, #16]	@ (80015bc <mpu6050_ADC_ConfCpltCallback+0x1c>)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6013      	str	r3, [r2, #0]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20000714 	.word	0x20000714

080015c0 <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 80015c8:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <mpu6050_Attach_MemWrite+0x1c>)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6013      	str	r3, [r2, #0]
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000718 	.word	0x20000718

080015e0 <mpu6050_Attach_MemReadDMA>:

void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 80015e8:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <mpu6050_Attach_MemReadDMA+0x1c>)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6013      	str	r3, [r2, #0]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	2000071c 	.word	0x2000071c

08001600 <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 8001600:	b590      	push	{r4, r7, lr}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
 8001608:	460b      	mov	r3, r1
 800160a:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 800160c:	4b05      	ldr	r3, [pc, #20]	@ (8001624 <mpu6050_WriteData+0x24>)
 800160e:	681c      	ldr	r4, [r3, #0]
 8001610:	78fb      	ldrb	r3, [r7, #3]
 8001612:	2201      	movs	r2, #1
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	20d0      	movs	r0, #208	@ 0xd0
 8001618:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bd90      	pop	{r4, r7, pc}
 8001622:	bf00      	nop
 8001624:	20000718 	.word	0x20000718

08001628 <mpu6050_Init>:
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
}


void mpu6050_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 800162e:	2300      	movs	r3, #0
 8001630:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 8001632:	1dfb      	adds	r3, r7, #7
 8001634:	216b      	movs	r1, #107	@ 0x6b
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff ffe2 	bl	8001600 <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    //data = 0x00;
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	211c      	movs	r1, #28
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ffdd 	bl	8001600 <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    //data = 0x00;
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 8001646:	1dfb      	adds	r3, r7, #7
 8001648:	211b      	movs	r1, #27
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ffd8 	bl	8001600 <mpu6050_WriteData>

}
 8001650:	bf00      	nop
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
	...

08001668 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001668:	b590      	push	{r4, r7, lr}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8001672:	4b05      	ldr	r3, [pc, #20]	@ (8001688 <ssd1306_WriteCommand+0x20>)
 8001674:	681c      	ldr	r4, [r3, #0]
 8001676:	1df9      	adds	r1, r7, #7
 8001678:	2300      	movs	r3, #0
 800167a:	2201      	movs	r2, #1
 800167c:	2078      	movs	r0, #120	@ 0x78
 800167e:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	bd90      	pop	{r4, r7, pc}
 8001688:	20000724 	.word	0x20000724

0800168c <ssd1306_WriteData>:
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 8001696:	4b06      	ldr	r3, [pc, #24]	@ (80016b0 <ssd1306_WriteData+0x24>)
 8001698:	681c      	ldr	r4, [r3, #0]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	b2da      	uxtb	r2, r3
 800169e:	2340      	movs	r3, #64	@ 0x40
 80016a0:	6879      	ldr	r1, [r7, #4]
 80016a2:	2078      	movs	r0, #120	@ 0x78
 80016a4:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd90      	pop	{r4, r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000724 	.word	0x20000724

080016b4 <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 80016bc:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <ssd1306_Attach_MemWriteDMA+0x1c>)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6013      	str	r3, [r2, #0]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	20000728 	.word	0x20000728

080016d4 <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 80016dc:	4a04      	ldr	r2, [pc, #16]	@ (80016f0 <ssd1306_Attach_MemWrite+0x1c>)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6013      	str	r3, [r2, #0]
}
 80016e2:	bf00      	nop
 80016e4:	370c      	adds	r7, #12
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	20000724 	.word	0x20000724

080016f4 <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 80016fc:	4a04      	ldr	r2, [pc, #16]	@ (8001710 <ssd1306_ADC_ConfCpltCallback+0x1c>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6013      	str	r3, [r2, #0]
}
 8001702:	bf00      	nop
 8001704:	370c      	adds	r7, #12
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	20000720 	.word	0x20000720

08001714 <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001718:	f7ff ff9e 	bl	8001658 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800171c:	2064      	movs	r0, #100	@ 0x64
 800171e:	f000 ff25 	bl	800256c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001722:	2000      	movs	r0, #0
 8001724:	f000 f8b4 	bl	8001890 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001728:	2020      	movs	r0, #32
 800172a:	f7ff ff9d 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800172e:	2000      	movs	r0, #0
 8001730:	f7ff ff9a 	bl	8001668 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001734:	20b0      	movs	r0, #176	@ 0xb0
 8001736:	f7ff ff97 	bl	8001668 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800173a:	20c8      	movs	r0, #200	@ 0xc8
 800173c:	f7ff ff94 	bl	8001668 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff ff91 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001746:	2010      	movs	r0, #16
 8001748:	f7ff ff8e 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800174c:	2040      	movs	r0, #64	@ 0x40
 800174e:	f7ff ff8b 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001752:	20ff      	movs	r0, #255	@ 0xff
 8001754:	f000 f888 	bl	8001868 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001758:	20a1      	movs	r0, #161	@ 0xa1
 800175a:	f7ff ff85 	bl	8001668 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800175e:	20a6      	movs	r0, #166	@ 0xa6
 8001760:	f7ff ff82 	bl	8001668 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001764:	20a8      	movs	r0, #168	@ 0xa8
 8001766:	f7ff ff7f 	bl	8001668 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800176a:	203f      	movs	r0, #63	@ 0x3f
 800176c:	f7ff ff7c 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001770:	20a4      	movs	r0, #164	@ 0xa4
 8001772:	f7ff ff79 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001776:	20d3      	movs	r0, #211	@ 0xd3
 8001778:	f7ff ff76 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 800177c:	2000      	movs	r0, #0
 800177e:	f7ff ff73 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001782:	20d5      	movs	r0, #213	@ 0xd5
 8001784:	f7ff ff70 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001788:	20f0      	movs	r0, #240	@ 0xf0
 800178a:	f7ff ff6d 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800178e:	20d9      	movs	r0, #217	@ 0xd9
 8001790:	f7ff ff6a 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001794:	2022      	movs	r0, #34	@ 0x22
 8001796:	f7ff ff67 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800179a:	20da      	movs	r0, #218	@ 0xda
 800179c:	f7ff ff64 	bl	8001668 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80017a0:	2012      	movs	r0, #18
 80017a2:	f7ff ff61 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80017a6:	20db      	movs	r0, #219	@ 0xdb
 80017a8:	f7ff ff5e 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80017ac:	2020      	movs	r0, #32
 80017ae:	f7ff ff5b 	bl	8001668 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80017b2:	208d      	movs	r0, #141	@ 0x8d
 80017b4:	f7ff ff58 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80017b8:	2014      	movs	r0, #20
 80017ba:	f7ff ff55 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80017be:	2001      	movs	r0, #1
 80017c0:	f000 f866 	bl	8001890 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80017c4:	2000      	movs	r0, #0
 80017c6:	f000 f80f 	bl	80017e8 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80017ca:	f000 f825 	bl	8001818 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80017ce:	4b05      	ldr	r3, [pc, #20]	@ (80017e4 <ssd1306_Init+0xd0>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80017d4:	4b03      	ldr	r3, [pc, #12]	@ (80017e4 <ssd1306_Init+0xd0>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80017da:	4b02      	ldr	r3, [pc, #8]	@ (80017e4 <ssd1306_Init+0xd0>)
 80017dc:	2201      	movs	r2, #1
 80017de:	711a      	strb	r2, [r3, #4]
}
 80017e0:	bf00      	nop
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20000b2c 	.word	0x20000b2c

080017e8 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	4603      	mov	r3, r0
 80017f0:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80017f2:	79fb      	ldrb	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <ssd1306_Fill+0x14>
 80017f8:	2300      	movs	r3, #0
 80017fa:	e000      	b.n	80017fe <ssd1306_Fill+0x16>
 80017fc:	23ff      	movs	r3, #255	@ 0xff
 80017fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001802:	4619      	mov	r1, r3
 8001804:	4803      	ldr	r0, [pc, #12]	@ (8001814 <ssd1306_Fill+0x2c>)
 8001806:	f00c fe2d 	bl	800e464 <memset>
}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000072c 	.word	0x2000072c

08001818 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800181e:	2300      	movs	r3, #0
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	e016      	b.n	8001852 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001824:	79fb      	ldrb	r3, [r7, #7]
 8001826:	3b50      	subs	r3, #80	@ 0x50
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff ff1c 	bl	8001668 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001830:	2000      	movs	r0, #0
 8001832:	f7ff ff19 	bl	8001668 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001836:	2010      	movs	r0, #16
 8001838:	f7ff ff16 	bl	8001668 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	01db      	lsls	r3, r3, #7
 8001840:	4a08      	ldr	r2, [pc, #32]	@ (8001864 <ssd1306_UpdateScreen+0x4c>)
 8001842:	4413      	add	r3, r2
 8001844:	2180      	movs	r1, #128	@ 0x80
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff ff20 	bl	800168c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800184c:	79fb      	ldrb	r3, [r7, #7]
 800184e:	3301      	adds	r3, #1
 8001850:	71fb      	strb	r3, [r7, #7]
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	2b07      	cmp	r3, #7
 8001856:	d9e5      	bls.n	8001824 <ssd1306_UpdateScreen+0xc>
    }
}
 8001858:	bf00      	nop
 800185a:	bf00      	nop
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	2000072c 	.word	0x2000072c

08001868 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001872:	2381      	movs	r3, #129	@ 0x81
 8001874:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001876:	7bfb      	ldrb	r3, [r7, #15]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff fef5 	bl	8001668 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800187e:	79fb      	ldrb	r3, [r7, #7]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fef1 	bl	8001668 <ssd1306_WriteCommand>
}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
	...

08001890 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	4603      	mov	r3, r0
 8001898:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80018a0:	23af      	movs	r3, #175	@ 0xaf
 80018a2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80018a4:	4b08      	ldr	r3, [pc, #32]	@ (80018c8 <ssd1306_SetDisplayOn+0x38>)
 80018a6:	2201      	movs	r2, #1
 80018a8:	715a      	strb	r2, [r3, #5]
 80018aa:	e004      	b.n	80018b6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80018ac:	23ae      	movs	r3, #174	@ 0xae
 80018ae:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80018b0:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <ssd1306_SetDisplayOn+0x38>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80018b6:	7bfb      	ldrb	r3, [r7, #15]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7ff fed5 	bl	8001668 <ssd1306_WriteCommand>
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000b2c 	.word	0x20000b2c

080018cc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	607b      	str	r3, [r7, #4]
 80018d6:	4b10      	ldr	r3, [pc, #64]	@ (8001918 <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	4a0f      	ldr	r2, [pc, #60]	@ (8001918 <HAL_MspInit+0x4c>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80018e2:	4b0d      	ldr	r3, [pc, #52]	@ (8001918 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	603b      	str	r3, [r7, #0]
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_MspInit+0x4c>)
 80018f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80018fe:	4b06      	ldr	r3, [pc, #24]	@ (8001918 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001902:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023800 	.word	0x40023800

0800191c <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	@ 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a32      	ldr	r2, [pc, #200]	@ (8001a04 <HAL_ADC_MspInit+0xe8>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d15e      	bne.n	80019fc <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	613b      	str	r3, [r7, #16]
 8001942:	4b31      	ldr	r3, [pc, #196]	@ (8001a08 <HAL_ADC_MspInit+0xec>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	4a30      	ldr	r2, [pc, #192]	@ (8001a08 <HAL_ADC_MspInit+0xec>)
 8001948:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800194c:	6453      	str	r3, [r2, #68]	@ 0x44
 800194e:	4b2e      	ldr	r3, [pc, #184]	@ (8001a08 <HAL_ADC_MspInit+0xec>)
 8001950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001952:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001956:	613b      	str	r3, [r7, #16]
 8001958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	4b2a      	ldr	r3, [pc, #168]	@ (8001a08 <HAL_ADC_MspInit+0xec>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	4a29      	ldr	r2, [pc, #164]	@ (8001a08 <HAL_ADC_MspInit+0xec>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6313      	str	r3, [r2, #48]	@ 0x30
 800196a:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <HAL_ADC_MspInit+0xec>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001976:	23ff      	movs	r3, #255	@ 0xff
 8001978:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800197a:	2303      	movs	r3, #3
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001982:	f107 0314 	add.w	r3, r7, #20
 8001986:	4619      	mov	r1, r3
 8001988:	4820      	ldr	r0, [pc, #128]	@ (8001a0c <HAL_ADC_MspInit+0xf0>)
 800198a:	f001 fff1 	bl	8003970 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800198e:	4b20      	ldr	r3, [pc, #128]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 8001990:	4a20      	ldr	r2, [pc, #128]	@ (8001a14 <HAL_ADC_MspInit+0xf8>)
 8001992:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001994:	4b1e      	ldr	r3, [pc, #120]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 8001996:	2200      	movs	r2, #0
 8001998:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800199a:	4b1d      	ldr	r3, [pc, #116]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 800199c:	2200      	movs	r2, #0
 800199e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80019a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80019a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 80019a8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80019ae:	4b18      	ldr	r3, [pc, #96]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 80019b0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80019b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80019b6:	4b16      	ldr	r3, [pc, #88]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 80019b8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80019be:	4b14      	ldr	r3, [pc, #80]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80019c4:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019ca:	4b11      	ldr	r3, [pc, #68]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80019d0:	480f      	ldr	r0, [pc, #60]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 80019d2:	f001 fc21 	bl	8003218 <HAL_DMA_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 80019dc:	f7ff fdda 	bl	8001594 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 80019e4:	639a      	str	r2, [r3, #56]	@ 0x38
 80019e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001a10 <HAL_ADC_MspInit+0xf4>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2100      	movs	r1, #0
 80019f0:	2012      	movs	r0, #18
 80019f2:	f001 fbda 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80019f6:	2012      	movs	r0, #18
 80019f8:	f001 fbf3 	bl	80031e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 80019fc:	bf00      	nop
 80019fe:	3728      	adds	r7, #40	@ 0x28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40012000 	.word	0x40012000
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020000 	.word	0x40020000
 8001a10:	200001c8 	.word	0x200001c8
 8001a14:	40026410 	.word	0x40026410

08001a18 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	@ 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a4f      	ldr	r2, [pc, #316]	@ (8001b74 <HAL_I2C_MspInit+0x15c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	f040 8098 	bne.w	8001b6c <HAL_I2C_MspInit+0x154>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	4b4d      	ldr	r3, [pc, #308]	@ (8001b78 <HAL_I2C_MspInit+0x160>)
 8001a42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a44:	4a4c      	ldr	r2, [pc, #304]	@ (8001b78 <HAL_I2C_MspInit+0x160>)
 8001a46:	f043 0302 	orr.w	r3, r3, #2
 8001a4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b78 <HAL_I2C_MspInit+0x160>)
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a58:	23c0      	movs	r3, #192	@ 0xc0
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5c:	2312      	movs	r3, #18
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a68:	2304      	movs	r3, #4
 8001a6a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4842      	ldr	r0, [pc, #264]	@ (8001b7c <HAL_I2C_MspInit+0x164>)
 8001a74:	f001 ff7c 	bl	8003970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	4b3e      	ldr	r3, [pc, #248]	@ (8001b78 <HAL_I2C_MspInit+0x160>)
 8001a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a80:	4a3d      	ldr	r2, [pc, #244]	@ (8001b78 <HAL_I2C_MspInit+0x160>)
 8001a82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a88:	4b3b      	ldr	r3, [pc, #236]	@ (8001b78 <HAL_I2C_MspInit+0x160>)
 8001a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001a90:	60fb      	str	r3, [r7, #12]
 8001a92:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001a94:	4b3a      	ldr	r3, [pc, #232]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001a96:	4a3b      	ldr	r2, [pc, #236]	@ (8001b84 <HAL_I2C_MspInit+0x16c>)
 8001a98:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001a9a:	4b39      	ldr	r3, [pc, #228]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001a9c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001aa0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001aa2:	4b37      	ldr	r3, [pc, #220]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aa8:	4b35      	ldr	r3, [pc, #212]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aae:	4b34      	ldr	r3, [pc, #208]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001ab0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ab4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ab6:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001abc:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ace:	4b2c      	ldr	r3, [pc, #176]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001ad4:	482a      	ldr	r0, [pc, #168]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001ad6:	f001 fb9f 	bl	8003218 <HAL_DMA_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001ae0:	f7ff fd58 	bl	8001594 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a26      	ldr	r2, [pc, #152]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001ae8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001aea:	4a25      	ldr	r2, [pc, #148]	@ (8001b80 <HAL_I2C_MspInit+0x168>)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001af0:	4b25      	ldr	r3, [pc, #148]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001af2:	4a26      	ldr	r2, [pc, #152]	@ (8001b8c <HAL_I2C_MspInit+0x174>)
 8001af4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001af6:	4b24      	ldr	r3, [pc, #144]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001af8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001afc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001afe:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b00:	2240      	movs	r2, #64	@ 0x40
 8001b02:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b04:	4b20      	ldr	r3, [pc, #128]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b0a:	4b1f      	ldr	r3, [pc, #124]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b0c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b10:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b12:	4b1d      	ldr	r3, [pc, #116]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b18:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001b1e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b24:	4b18      	ldr	r3, [pc, #96]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b2a:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001b30:	4815      	ldr	r0, [pc, #84]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b32:	f001 fb71 	bl	8003218 <HAL_DMA_Init>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001b3c:	f7ff fd2a 	bl	8001594 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a11      	ldr	r2, [pc, #68]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b44:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b46:	4a10      	ldr	r2, [pc, #64]	@ (8001b88 <HAL_I2C_MspInit+0x170>)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	2100      	movs	r1, #0
 8001b50:	201f      	movs	r0, #31
 8001b52:	f001 fb2a 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001b56:	201f      	movs	r0, #31
 8001b58:	f001 fb43 	bl	80031e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2100      	movs	r1, #0
 8001b60:	2020      	movs	r0, #32
 8001b62:	f001 fb22 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001b66:	2020      	movs	r0, #32
 8001b68:	f001 fb3b 	bl	80031e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001b6c:	bf00      	nop
 8001b6e:	3728      	adds	r7, #40	@ 0x28
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40005400 	.word	0x40005400
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020400 	.word	0x40020400
 8001b80:	2000027c 	.word	0x2000027c
 8001b84:	40026010 	.word	0x40026010
 8001b88:	200002dc 	.word	0x200002dc
 8001b8c:	400260a0 	.word	0x400260a0

08001b90 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b086      	sub	sp, #24
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a44      	ldr	r2, [pc, #272]	@ (8001cb0 <HAL_TIM_Base_MspInit+0x120>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d12e      	bne.n	8001c00 <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	617b      	str	r3, [r7, #20]
 8001ba6:	4b43      	ldr	r3, [pc, #268]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001baa:	4a42      	ldr	r2, [pc, #264]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bb2:	4b40      	ldr	r3, [pc, #256]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	617b      	str	r3, [r7, #20]
 8001bbc:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	2018      	movs	r0, #24
 8001bc4:	f001 faf1 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001bc8:	2018      	movs	r0, #24
 8001bca:	f001 fb0a 	bl	80031e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	2019      	movs	r0, #25
 8001bd4:	f001 fae9 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001bd8:	2019      	movs	r0, #25
 8001bda:	f001 fb02 	bl	80031e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	201a      	movs	r0, #26
 8001be4:	f001 fae1 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001be8:	201a      	movs	r0, #26
 8001bea:	f001 fafa 	bl	80031e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001bee:	2200      	movs	r2, #0
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	201b      	movs	r0, #27
 8001bf4:	f001 fad9 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001bf8:	201b      	movs	r0, #27
 8001bfa:	f001 faf2 	bl	80031e2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001bfe:	e052      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c08:	d116      	bne.n	8001c38 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
 8001c0e:	4b29      	ldr	r3, [pc, #164]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c12:	4a28      	ldr	r2, [pc, #160]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1a:	4b26      	ldr	r3, [pc, #152]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	f003 0301 	and.w	r3, r3, #1
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	201c      	movs	r0, #28
 8001c2c:	f001 fabd 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c30:	201c      	movs	r0, #28
 8001c32:	f001 fad6 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8001c36:	e036      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM3)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb8 <HAL_TIM_Base_MspInit+0x128>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d116      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	4b1b      	ldr	r3, [pc, #108]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c4a:	4a1a      	ldr	r2, [pc, #104]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001c4c:	f043 0302 	orr.w	r3, r3, #2
 8001c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c52:	4b18      	ldr	r3, [pc, #96]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f003 0302 	and.w	r3, r3, #2
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2100      	movs	r1, #0
 8001c62:	201d      	movs	r0, #29
 8001c64:	f001 faa1 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001c68:	201d      	movs	r0, #29
 8001c6a:	f001 faba 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8001c6e:	e01a      	b.n	8001ca6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM4)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a11      	ldr	r2, [pc, #68]	@ (8001cbc <HAL_TIM_Base_MspInit+0x12c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d115      	bne.n	8001ca6 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	4a0c      	ldr	r2, [pc, #48]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001c84:	f043 0304 	orr.w	r3, r3, #4
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c8a:	4b0a      	ldr	r3, [pc, #40]	@ (8001cb4 <HAL_TIM_Base_MspInit+0x124>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f003 0304 	and.w	r3, r3, #4
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	201e      	movs	r0, #30
 8001c9c:	f001 fa85 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ca0:	201e      	movs	r0, #30
 8001ca2:	f001 fa9e 	bl	80031e2 <HAL_NVIC_EnableIRQ>
}
 8001ca6:	bf00      	nop
 8001ca8:	3718      	adds	r7, #24
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40010000 	.word	0x40010000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40000400 	.word	0x40000400
 8001cbc:	40000800 	.word	0x40000800

08001cc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 030c 	add.w	r3, r7, #12
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a12      	ldr	r2, [pc, #72]	@ (8001d28 <HAL_TIM_MspPostInit+0x68>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d11d      	bne.n	8001d1e <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <HAL_TIM_MspPostInit+0x6c>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a10      	ldr	r2, [pc, #64]	@ (8001d2c <HAL_TIM_MspPostInit+0x6c>)
 8001cec:	f043 0302 	orr.w	r3, r3, #2
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <HAL_TIM_MspPostInit+0x6c>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001cfe:	2333      	movs	r3, #51	@ 0x33
 8001d00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d02:	2302      	movs	r3, #2
 8001d04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d06:	2300      	movs	r3, #0
 8001d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d12:	f107 030c 	add.w	r3, r7, #12
 8001d16:	4619      	mov	r1, r3
 8001d18:	4805      	ldr	r0, [pc, #20]	@ (8001d30 <HAL_TIM_MspPostInit+0x70>)
 8001d1a:	f001 fe29 	bl	8003970 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d1e:	bf00      	nop
 8001d20:	3720      	adds	r7, #32
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40020400 	.word	0x40020400

08001d34 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b08a      	sub	sp, #40	@ 0x28
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2200      	movs	r2, #0
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	605a      	str	r2, [r3, #4]
 8001d46:	609a      	str	r2, [r3, #8]
 8001d48:	60da      	str	r2, [r3, #12]
 8001d4a:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1d      	ldr	r2, [pc, #116]	@ (8001dc8 <HAL_USART_MspInit+0x94>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d134      	bne.n	8001dc0 <HAL_USART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001dcc <HAL_USART_MspInit+0x98>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8001dcc <HAL_USART_MspInit+0x98>)
 8001d60:	f043 0310 	orr.w	r3, r3, #16
 8001d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d66:	4b19      	ldr	r3, [pc, #100]	@ (8001dcc <HAL_USART_MspInit+0x98>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d72:	2300      	movs	r3, #0
 8001d74:	60fb      	str	r3, [r7, #12]
 8001d76:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_USART_MspInit+0x98>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	4a14      	ldr	r2, [pc, #80]	@ (8001dcc <HAL_USART_MspInit+0x98>)
 8001d7c:	f043 0301 	orr.w	r3, r3, #1
 8001d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d82:	4b12      	ldr	r3, [pc, #72]	@ (8001dcc <HAL_USART_MspInit+0x98>)
 8001d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001d8e:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d94:	2302      	movs	r3, #2
 8001d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001da0:	2307      	movs	r3, #7
 8001da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4809      	ldr	r0, [pc, #36]	@ (8001dd0 <HAL_USART_MspInit+0x9c>)
 8001dac:	f001 fde0 	bl	8003970 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001db0:	2200      	movs	r2, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	2025      	movs	r0, #37	@ 0x25
 8001db6:	f001 f9f8 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dba:	2025      	movs	r0, #37	@ 0x25
 8001dbc:	f001 fa11 	bl	80031e2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001dc0:	bf00      	nop
 8001dc2:	3728      	adds	r7, #40	@ 0x28
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	40011000 	.word	0x40011000
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40020000 	.word	0x40020000

08001dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <NMI_Handler+0x4>

08001ddc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <HardFault_Handler+0x4>

08001de4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <MemManage_Handler+0x4>

08001dec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <BusFault_Handler+0x4>

08001df4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df8:	bf00      	nop
 8001dfa:	e7fd      	b.n	8001df8 <UsageFault_Handler+0x4>

08001dfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e00:	bf00      	nop
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr

08001e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1c:	bf00      	nop
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr

08001e26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e2a:	f000 fb7f 	bl	800252c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
	...

08001e34 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001e38:	4802      	ldr	r0, [pc, #8]	@ (8001e44 <DMA1_Stream0_IRQHandler+0x10>)
 8001e3a:	f001 fb15 	bl	8003468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	2000027c 	.word	0x2000027c

08001e48 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001e4c:	4802      	ldr	r0, [pc, #8]	@ (8001e58 <DMA1_Stream6_IRQHandler+0x10>)
 8001e4e:	f001 fb0b 	bl	8003468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	200002dc 	.word	0x200002dc

08001e5c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001e60:	4802      	ldr	r0, [pc, #8]	@ (8001e6c <ADC_IRQHandler+0x10>)
 8001e62:	f000 fbea 	bl	800263a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	20000180 	.word	0x20000180

08001e70 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e74:	4802      	ldr	r0, [pc, #8]	@ (8001e80 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001e76:	f006 fd80 	bl	800897a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	2000033c 	.word	0x2000033c

08001e84 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e88:	4802      	ldr	r0, [pc, #8]	@ (8001e94 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e8a:	f006 fd76 	bl	800897a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e8e:	bf00      	nop
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	2000033c 	.word	0x2000033c

08001e98 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e9c:	4802      	ldr	r0, [pc, #8]	@ (8001ea8 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001e9e:	f006 fd6c 	bl	800897a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001ea2:	bf00      	nop
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	bf00      	nop
 8001ea8:	2000033c 	.word	0x2000033c

08001eac <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001eb0:	4802      	ldr	r0, [pc, #8]	@ (8001ebc <TIM1_CC_IRQHandler+0x10>)
 8001eb2:	f006 fd62 	bl	800897a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001eb6:	bf00      	nop
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	2000033c 	.word	0x2000033c

08001ec0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ec4:	4802      	ldr	r0, [pc, #8]	@ (8001ed0 <TIM2_IRQHandler+0x10>)
 8001ec6:	f006 fd58 	bl	800897a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001eca:	bf00      	nop
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000384 	.word	0x20000384

08001ed4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001ed8:	4802      	ldr	r0, [pc, #8]	@ (8001ee4 <TIM3_IRQHandler+0x10>)
 8001eda:	f006 fd4e 	bl	800897a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200003cc 	.word	0x200003cc

08001ee8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001eec:	4802      	ldr	r0, [pc, #8]	@ (8001ef8 <TIM4_IRQHandler+0x10>)
 8001eee:	f006 fd44 	bl	800897a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	20000414 	.word	0x20000414

08001efc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001f00:	4802      	ldr	r0, [pc, #8]	@ (8001f0c <I2C1_EV_IRQHandler+0x10>)
 8001f02:	f002 fc2f 	bl	8004764 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000228 	.word	0x20000228

08001f10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <I2C1_ER_IRQHandler+0x10>)
 8001f16:	f002 fd96 	bl	8004a46 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001f1a:	bf00      	nop
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000228 	.word	0x20000228

08001f24 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 8001f28:	4802      	ldr	r0, [pc, #8]	@ (8001f34 <USART1_IRQHandler+0x10>)
 8001f2a:	f007 fc0d 	bl	8009748 <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001f2e:	bf00      	nop
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	2000045c 	.word	0x2000045c

08001f38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <DMA2_Stream0_IRQHandler+0x10>)
 8001f3e:	f001 fa93 	bl	8003468 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	200001c8 	.word	0x200001c8

08001f4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001f50:	4802      	ldr	r0, [pc, #8]	@ (8001f5c <OTG_FS_IRQHandler+0x10>)
 8001f52:	f004 fea1 	bl	8006c98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001f56:	bf00      	nop
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	2000141c 	.word	0x2000141c

08001f60 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <SystemInit+0x20>)
 8001f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f6a:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <SystemInit+0x20>)
 8001f6c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f70:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
 8001f90:	4613      	mov	r3, r2
 8001f92:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8001f94:	78bb      	ldrb	r3, [r7, #2]
 8001f96:	3301      	adds	r3, #1
 8001f98:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	795a      	ldrb	r2, [r3, #5]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	795b      	ldrb	r3, [r3, #5]
 8001fb0:	1c59      	adds	r1, r3, #1
 8001fb2:	b2c8      	uxtb	r0, r1
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	7148      	strb	r0, [r1, #5]
 8001fb8:	4413      	add	r3, r2
 8001fba:	2255      	movs	r2, #85	@ 0x55
 8001fbc:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	795a      	ldrb	r2, [r3, #5]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	799b      	ldrb	r3, [r3, #6]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	795b      	ldrb	r3, [r3, #5]
 8001fd6:	1c59      	adds	r1, r3, #1
 8001fd8:	b2c8      	uxtb	r0, r1
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	7148      	strb	r0, [r1, #5]
 8001fde:	4413      	add	r3, r2
 8001fe0:	224e      	movs	r2, #78	@ 0x4e
 8001fe2:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	795a      	ldrb	r2, [r3, #5]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	799b      	ldrb	r3, [r3, #6]
 8001fec:	4013      	ands	r3, r2
 8001fee:	b2da      	uxtb	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	795b      	ldrb	r3, [r3, #5]
 8001ffc:	1c59      	adds	r1, r3, #1
 8001ffe:	b2c8      	uxtb	r0, r1
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	7148      	strb	r0, [r1, #5]
 8002004:	4413      	add	r3, r2
 8002006:	2245      	movs	r2, #69	@ 0x45
 8002008:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	795a      	ldrb	r2, [r3, #5]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	799b      	ldrb	r3, [r3, #6]
 8002012:	4013      	ands	r3, r2
 8002014:	b2da      	uxtb	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	795b      	ldrb	r3, [r3, #5]
 8002022:	1c59      	adds	r1, r3, #1
 8002024:	b2c8      	uxtb	r0, r1
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	7148      	strb	r0, [r1, #5]
 800202a:	4413      	add	r3, r2
 800202c:	2252      	movs	r2, #82	@ 0x52
 800202e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	795a      	ldrb	r2, [r3, #5]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	799b      	ldrb	r3, [r3, #6]
 8002038:	4013      	ands	r3, r2
 800203a:	b2da      	uxtb	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	795b      	ldrb	r3, [r3, #5]
 8002048:	1c59      	adds	r1, r3, #1
 800204a:	b2c8      	uxtb	r0, r1
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	7148      	strb	r0, [r1, #5]
 8002050:	4413      	add	r3, r2
 8002052:	78ba      	ldrb	r2, [r7, #2]
 8002054:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	795a      	ldrb	r2, [r3, #5]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	799b      	ldrb	r3, [r3, #6]
 800205e:	4013      	ands	r3, r2
 8002060:	b2da      	uxtb	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	795b      	ldrb	r3, [r3, #5]
 800206e:	1c59      	adds	r1, r3, #1
 8002070:	b2c8      	uxtb	r0, r1
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	7148      	strb	r0, [r1, #5]
 8002076:	4413      	add	r3, r2
 8002078:	223a      	movs	r2, #58	@ 0x3a
 800207a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	795a      	ldrb	r2, [r3, #5]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	799b      	ldrb	r3, [r3, #6]
 8002084:	4013      	ands	r3, r2
 8002086:	b2da      	uxtb	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	795b      	ldrb	r3, [r3, #5]
 8002094:	1c59      	adds	r1, r3, #1
 8002096:	b2c8      	uxtb	r0, r1
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	7148      	strb	r0, [r1, #5]
 800209c:	4413      	add	r3, r2
 800209e:	78fa      	ldrb	r2, [r7, #3]
 80020a0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	795a      	ldrb	r2, [r3, #5]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	799b      	ldrb	r3, [r3, #6]
 80020aa:	4013      	ands	r3, r2
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2207      	movs	r2, #7
 80020b6:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	7a5a      	ldrb	r2, [r3, #9]
 80020bc:	78b9      	ldrb	r1, [r7, #2]
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	404b      	eors	r3, r1
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	4053      	eors	r3, r2
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80020cc:	b2da      	uxtb	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	7a5b      	ldrb	r3, [r3, #9]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	79db      	ldrb	r3, [r3, #7]
 80020f2:	3301      	adds	r3, #1
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	795b      	ldrb	r3, [r3, #5]
 8002102:	1c59      	adds	r1, r3, #1
 8002104:	b2c8      	uxtb	r0, r1
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	7148      	strb	r0, [r1, #5]
 800210a:	4413      	add	r3, r2
 800210c:	78fa      	ldrb	r2, [r7, #3]
 800210e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	795a      	ldrb	r2, [r3, #5]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	799b      	ldrb	r3, [r3, #6]
 8002118:	4013      	ands	r3, r2
 800211a:	b2da      	uxtb	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7a5a      	ldrb	r2, [r3, #9]
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	4053      	eors	r3, r2
 8002128:	b2da      	uxtb	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	7a5b      	ldrb	r3, [r3, #9]
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 800213e:	b490      	push	{r4, r7}
 8002140:	b084      	sub	sp, #16
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8002148:	2300      	movs	r3, #0
 800214a:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 800214c:	e02c      	b.n	80021a8 <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	79db      	ldrb	r3, [r3, #7]
 8002152:	3301      	adds	r3, #1
 8002154:	b2da      	uxtb	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	441a      	add	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6819      	ldr	r1, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	795b      	ldrb	r3, [r3, #5]
 800216c:	1c58      	adds	r0, r3, #1
 800216e:	b2c4      	uxtb	r4, r0
 8002170:	6878      	ldr	r0, [r7, #4]
 8002172:	7144      	strb	r4, [r0, #5]
 8002174:	440b      	add	r3, r1
 8002176:	7812      	ldrb	r2, [r2, #0]
 8002178:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	795a      	ldrb	r2, [r3, #5]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	799b      	ldrb	r3, [r3, #6]
 8002182:	4013      	ands	r3, r2
 8002184:	b2da      	uxtb	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 800218a:	7bfb      	ldrb	r3, [r7, #15]
 800218c:	b2db      	uxtb	r3, r3
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	73fa      	strb	r2, [r7, #15]
 8002194:	461a      	mov	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	781a      	ldrb	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7a5b      	ldrb	r3, [r3, #9]
 80021a0:	4053      	eors	r3, r2
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	461a      	mov	r2, r3
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	4413      	add	r3, r2
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1ca      	bne.n	800214e <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	7a5b      	ldrb	r3, [r3, #9]
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc90      	pop	{r4, r7}
 80021c4:	4770      	bx	lr
	...

080021c8 <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	795b      	ldrb	r3, [r3, #5]
 80021d8:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 80021da:	e0e4      	b.n	80023a6 <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 80021dc:	4b78      	ldr	r3, [pc, #480]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b07      	cmp	r3, #7
 80021e2:	f200 80c9 	bhi.w	8002378 <unerPrtcl_DecodeHeader+0x1b0>
 80021e6:	a201      	add	r2, pc, #4	@ (adr r2, 80021ec <unerPrtcl_DecodeHeader+0x24>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	0800220d 	.word	0x0800220d
 80021f0:	08002227 	.word	0x08002227
 80021f4:	08002265 	.word	0x08002265
 80021f8:	08002291 	.word	0x08002291
 80021fc:	080022bd 	.word	0x080022bd
 8002200:	080022d3 	.word	0x080022d3
 8002204:	08002379 	.word	0x08002379
 8002208:	08002335 	.word	0x08002335
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	7912      	ldrb	r2, [r2, #4]
 8002214:	4413      	add	r3, r2
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b55      	cmp	r3, #85	@ 0x55
 800221a:	f040 80b1 	bne.w	8002380 <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 800221e:	4b68      	ldr	r3, [pc, #416]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002220:	2201      	movs	r2, #1
 8002222:	701a      	strb	r2, [r3, #0]
                }
            break;
 8002224:	e0ac      	b.n	8002380 <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	7912      	ldrb	r2, [r2, #4]
 800222e:	4413      	add	r3, r2
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b4e      	cmp	r3, #78	@ 0x4e
 8002234:	d103      	bne.n	800223e <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8002236:	4b62      	ldr	r3, [pc, #392]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002238:	2202      	movs	r2, #2
 800223a:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 800223c:	e0a2      	b.n	8002384 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	7912      	ldrb	r2, [r2, #4]
 8002246:	4413      	add	r3, r2
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b55      	cmp	r3, #85	@ 0x55
 800224c:	f000 809a 	beq.w	8002384 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 8002250:	4b5b      	ldr	r3, [pc, #364]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002252:	2200      	movs	r2, #0
 8002254:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	791b      	ldrb	r3, [r3, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	b2da      	uxtb	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	711a      	strb	r2, [r3, #4]
            break;
 8002262:	e08f      	b.n	8002384 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	7912      	ldrb	r2, [r2, #4]
 800226c:	4413      	add	r3, r2
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b45      	cmp	r3, #69	@ 0x45
 8002272:	d103      	bne.n	800227c <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 8002274:	4b52      	ldr	r3, [pc, #328]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002276:	2203      	movs	r2, #3
 8002278:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800227a:	e086      	b.n	800238a <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 800227c:	4b50      	ldr	r3, [pc, #320]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 800227e:	2200      	movs	r2, #0
 8002280:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	791b      	ldrb	r3, [r3, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	b2da      	uxtb	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	711a      	strb	r2, [r3, #4]
            break;
 800228e:	e07c      	b.n	800238a <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	7912      	ldrb	r2, [r2, #4]
 8002298:	4413      	add	r3, r2
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	2b52      	cmp	r3, #82	@ 0x52
 800229e:	d103      	bne.n	80022a8 <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 80022a0:	4b47      	ldr	r3, [pc, #284]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 80022a2:	2204      	movs	r2, #4
 80022a4:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80022a6:	e070      	b.n	800238a <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80022a8:	4b45      	ldr	r3, [pc, #276]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	791b      	ldrb	r3, [r3, #4]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	711a      	strb	r2, [r3, #4]
            break;
 80022ba:	e066      	b.n	800238a <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	687a      	ldr	r2, [r7, #4]
 80022c2:	7912      	ldrb	r2, [r2, #4]
 80022c4:	4413      	add	r3, r2
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 80022ca:	4b3d      	ldr	r3, [pc, #244]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 80022cc:	2205      	movs	r2, #5
 80022ce:	701a      	strb	r2, [r3, #0]
            break;
 80022d0:	e05b      	b.n	800238a <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	7912      	ldrb	r2, [r2, #4]
 80022da:	4413      	add	r3, r2
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b3a      	cmp	r3, #58	@ 0x3a
 80022e0:	d11e      	bne.n	8002320 <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 80022e2:	4b37      	ldr	r3, [pc, #220]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 80022e4:	2207      	movs	r2, #7
 80022e6:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	791b      	ldrb	r3, [r3, #4]
 80022ec:	3301      	adds	r3, #1
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7a1a      	ldrb	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	799b      	ldrb	r3, [r3, #6]
 80022fc:	4013      	ands	r3, r2
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	7a5a      	ldrb	r2, [r3, #9]
 800230e:	7bfb      	ldrb	r3, [r7, #15]
 8002310:	4053      	eors	r3, r2
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002318:	b2da      	uxtb	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800231e:	e034      	b.n	800238a <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002320:	4b27      	ldr	r3, [pc, #156]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	791b      	ldrb	r3, [r3, #4]
 800232a:	3b01      	subs	r3, #1
 800232c:	b2da      	uxtb	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	711a      	strb	r2, [r3, #4]
            break;
 8002332:	e02a      	b.n	800238a <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	3b01      	subs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00c      	beq.n	800235a <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	7a5a      	ldrb	r2, [r3, #9]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	7909      	ldrb	r1, [r1, #4]
 800234c:	440b      	add	r3, r1
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	4053      	eors	r3, r2
 8002352:	b2da      	uxtb	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 8002358:	e016      	b.n	8002388 <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 800235a:	4b19      	ldr	r3, [pc, #100]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	7912      	ldrb	r2, [r2, #4]
 8002368:	4413      	add	r3, r2
 800236a:	781a      	ldrb	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7a5b      	ldrb	r3, [r3, #9]
 8002370:	429a      	cmp	r2, r3
 8002372:	d109      	bne.n	8002388 <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 8002374:	2301      	movs	r3, #1
 8002376:	e01d      	b.n	80023b4 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 8002378:	4b11      	ldr	r3, [pc, #68]	@ (80023c0 <unerPrtcl_DecodeHeader+0x1f8>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
            break;
 800237e:	e004      	b.n	800238a <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002380:	bf00      	nop
 8002382:	e002      	b.n	800238a <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002384:	bf00      	nop
 8002386:	e000      	b.n	800238a <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002388:	bf00      	nop
        }
        dataRx->indexR++;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	791b      	ldrb	r3, [r3, #4]
 800238e:	3301      	adds	r3, #1
 8002390:	b2da      	uxtb	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	791a      	ldrb	r2, [r3, #4]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	799b      	ldrb	r3, [r3, #6]
 800239e:	4013      	ands	r3, r2
 80023a0:	b2da      	uxtb	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	791b      	ldrb	r3, [r3, #4]
 80023aa:	7bba      	ldrb	r2, [r7, #14]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f47f af15 	bne.w	80021dc <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3714      	adds	r7, #20
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	20000b32 	.word	0x20000b32

080023c4 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
 80023d0:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2200      	movs	r2, #0
 80023dc:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	2200      	movs	r2, #0
 80023e8:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	22ff      	movs	r2, #255	@ 0xff
 80023f4:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2200      	movs	r2, #0
 80023fa:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2200      	movs	r2, #0
 8002406:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2200      	movs	r2, #0
 800240c:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	2200      	movs	r2, #0
 8002412:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2200      	movs	r2, #0
 8002418:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	22ff      	movs	r2, #255	@ 0xff
 800241e:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2200      	movs	r2, #0
 8002424:	725a      	strb	r2, [r3, #9]

}
 8002426:	bf00      	nop
 8002428:	3714      	adds	r7, #20
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002434:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800246c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002438:	f7ff fd92 	bl	8001f60 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800243c:	480c      	ldr	r0, [pc, #48]	@ (8002470 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800243e:	490d      	ldr	r1, [pc, #52]	@ (8002474 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002440:	4a0d      	ldr	r2, [pc, #52]	@ (8002478 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002442:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002444:	e002      	b.n	800244c <LoopCopyDataInit>

08002446 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002446:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002448:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800244a:	3304      	adds	r3, #4

0800244c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800244c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002450:	d3f9      	bcc.n	8002446 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002452:	4a0a      	ldr	r2, [pc, #40]	@ (800247c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002454:	4c0a      	ldr	r4, [pc, #40]	@ (8002480 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002456:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002458:	e001      	b.n	800245e <LoopFillZerobss>

0800245a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800245a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800245c:	3204      	adds	r2, #4

0800245e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002460:	d3fb      	bcc.n	800245a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002462:	f00c f807 	bl	800e474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002466:	f7fe fc2f 	bl	8000cc8 <main>
  bx  lr    
 800246a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800246c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002474:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002478:	0800e578 	.word	0x0800e578
  ldr r2, =_sbss
 800247c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002480:	20001b20 	.word	0x20001b20

08002484 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002484:	e7fe      	b.n	8002484 <DMA1_Stream1_IRQHandler>
	...

08002488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800248c:	4b0e      	ldr	r3, [pc, #56]	@ (80024c8 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a0d      	ldr	r2, [pc, #52]	@ (80024c8 <HAL_Init+0x40>)
 8002492:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002496:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002498:	4b0b      	ldr	r3, [pc, #44]	@ (80024c8 <HAL_Init+0x40>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a0a      	ldr	r2, [pc, #40]	@ (80024c8 <HAL_Init+0x40>)
 800249e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024a4:	4b08      	ldr	r3, [pc, #32]	@ (80024c8 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a07      	ldr	r2, [pc, #28]	@ (80024c8 <HAL_Init+0x40>)
 80024aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024b0:	2003      	movs	r0, #3
 80024b2:	f000 fe6f 	bl	8003194 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024b6:	200f      	movs	r0, #15
 80024b8:	f000 f808 	bl	80024cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024bc:	f7ff fa06 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	40023c00 	.word	0x40023c00

080024cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024d4:	4b12      	ldr	r3, [pc, #72]	@ (8002520 <HAL_InitTick+0x54>)
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	4b12      	ldr	r3, [pc, #72]	@ (8002524 <HAL_InitTick+0x58>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4619      	mov	r1, r3
 80024de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80024e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ea:	4618      	mov	r0, r3
 80024ec:	f000 fe87 	bl	80031fe <HAL_SYSTICK_Config>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00e      	b.n	8002518 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2b0f      	cmp	r3, #15
 80024fe:	d80a      	bhi.n	8002516 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002500:	2200      	movs	r2, #0
 8002502:	6879      	ldr	r1, [r7, #4]
 8002504:	f04f 30ff 	mov.w	r0, #4294967295
 8002508:	f000 fe4f 	bl	80031aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800250c:	4a06      	ldr	r2, [pc, #24]	@ (8002528 <HAL_InitTick+0x5c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
 8002514:	e000      	b.n	8002518 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
}
 8002518:	4618      	mov	r0, r3
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	2000002c 	.word	0x2000002c
 8002524:	20000034 	.word	0x20000034
 8002528:	20000030 	.word	0x20000030

0800252c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002530:	4b06      	ldr	r3, [pc, #24]	@ (800254c <HAL_IncTick+0x20>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	461a      	mov	r2, r3
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <HAL_IncTick+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4413      	add	r3, r2
 800253c:	4a04      	ldr	r2, [pc, #16]	@ (8002550 <HAL_IncTick+0x24>)
 800253e:	6013      	str	r3, [r2, #0]
}
 8002540:	bf00      	nop
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000034 	.word	0x20000034
 8002550:	20000b34 	.word	0x20000b34

08002554 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002554:	b480      	push	{r7}
 8002556:	af00      	add	r7, sp, #0
  return uwTick;
 8002558:	4b03      	ldr	r3, [pc, #12]	@ (8002568 <HAL_GetTick+0x14>)
 800255a:	681b      	ldr	r3, [r3, #0]
}
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	20000b34 	.word	0x20000b34

0800256c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002574:	f7ff ffee 	bl	8002554 <HAL_GetTick>
 8002578:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002584:	d005      	beq.n	8002592 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002586:	4b0a      	ldr	r3, [pc, #40]	@ (80025b0 <HAL_Delay+0x44>)
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	461a      	mov	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4413      	add	r3, r2
 8002590:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002592:	bf00      	nop
 8002594:	f7ff ffde 	bl	8002554 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	68fa      	ldr	r2, [r7, #12]
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d8f7      	bhi.n	8002594 <HAL_Delay+0x28>
  {
  }
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	20000034 	.word	0x20000034

080025b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d101      	bne.n	80025ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	e033      	b.n	8002632 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d109      	bne.n	80025e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff f9a2 	bl	800191c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	f003 0310 	and.w	r3, r3, #16
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d118      	bne.n	8002624 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80025fa:	f023 0302 	bic.w	r3, r3, #2
 80025fe:	f043 0202 	orr.w	r2, r3, #2
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 fb6c 	bl	8002ce4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002616:	f023 0303 	bic.w	r3, r3, #3
 800261a:	f043 0201 	orr.w	r2, r3, #1
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	641a      	str	r2, [r3, #64]	@ 0x40
 8002622:	e001      	b.n	8002628 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2200      	movs	r2, #0
 800262c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002642:	2300      	movs	r3, #0
 8002644:	617b      	str	r3, [r7, #20]
 8002646:	2300      	movs	r3, #0
 8002648:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	f003 0320 	and.w	r3, r3, #32
 8002668:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d049      	beq.n	8002704 <HAL_ADC_IRQHandler+0xca>
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d046      	beq.n	8002704 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	2b00      	cmp	r3, #0
 8002680:	d105      	bne.n	800268e <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d12b      	bne.n	80026f4 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d127      	bne.n	80026f4 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026aa:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d006      	beq.n	80026c0 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d119      	bne.n	80026f4 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0220 	bic.w	r2, r2, #32
 80026ce:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026d4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ec:	f043 0201 	orr.w	r2, r3, #1
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7fd ff73 	bl	80005e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f06f 0212 	mvn.w	r2, #18
 8002702:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002712:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d057      	beq.n	80027ca <HAL_ADC_IRQHandler+0x190>
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d054      	beq.n	80027ca <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	f003 0310 	and.w	r3, r3, #16
 8002728:	2b00      	cmp	r3, #0
 800272a:	d105      	bne.n	8002738 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002730:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d139      	bne.n	80027ba <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800274c:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002750:	2b00      	cmp	r3, #0
 8002752:	d006      	beq.n	8002762 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800275e:	2b00      	cmp	r3, #0
 8002760:	d12b      	bne.n	80027ba <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800276c:	2b00      	cmp	r3, #0
 800276e:	d124      	bne.n	80027ba <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800277a:	2b00      	cmp	r3, #0
 800277c:	d11d      	bne.n	80027ba <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002782:	2b00      	cmp	r3, #0
 8002784:	d119      	bne.n	80027ba <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002794:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d105      	bne.n	80027ba <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027b2:	f043 0201 	orr.w	r2, r3, #1
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fc10 	bl	8002fe0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f06f 020c 	mvn.w	r2, #12
 80027c8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80027da:	697b      	ldr	r3, [r7, #20]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d017      	beq.n	8002810 <HAL_ADC_IRQHandler+0x1d6>
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d014      	beq.n	8002810 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0301 	and.w	r3, r3, #1
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d10d      	bne.n	8002810 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	f000 f929 	bl	8002a58 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f06f 0201 	mvn.w	r2, #1
 800280e:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800281e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d015      	beq.n	8002852 <HAL_ADC_IRQHandler+0x218>
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d012      	beq.n	8002852 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002830:	f043 0202 	orr.w	r2, r3, #2
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0220 	mvn.w	r2, #32
 8002840:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f912 	bl	8002a6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f06f 0220 	mvn.w	r2, #32
 8002850:	601a      	str	r2, [r3, #0]
  }
}
 8002852:	bf00      	nop
 8002854:	3718      	adds	r7, #24
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b088      	sub	sp, #32
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002876:	2b01      	cmp	r3, #1
 8002878:	d101      	bne.n	800287e <HAL_ADC_Start_DMA+0x22>
 800287a:	2302      	movs	r3, #2
 800287c:	e0d0      	b.n	8002a20 <HAL_ADC_Start_DMA+0x1c4>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d018      	beq.n	80028c6 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689a      	ldr	r2, [r3, #8]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028a4:	4b60      	ldr	r3, [pc, #384]	@ (8002a28 <HAL_ADC_Start_DMA+0x1cc>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a60      	ldr	r2, [pc, #384]	@ (8002a2c <HAL_ADC_Start_DMA+0x1d0>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0c9a      	lsrs	r2, r3, #18
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80028b8:	e002      	b.n	80028c0 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	3b01      	subs	r3, #1
 80028be:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f9      	bne.n	80028ba <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028d4:	d107      	bne.n	80028e6 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	689a      	ldr	r2, [r3, #8]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028e4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	f040 8088 	bne.w	8002a06 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028fe:	f023 0301 	bic.w	r3, r3, #1
 8002902:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002914:	2b00      	cmp	r3, #0
 8002916:	d007      	beq.n	8002928 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800291c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002920:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800292c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002930:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002934:	d106      	bne.n	8002944 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800293a:	f023 0206 	bic.w	r2, r3, #6
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	645a      	str	r2, [r3, #68]	@ 0x44
 8002942:	e002      	b.n	800294a <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	2200      	movs	r2, #0
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002952:	4b37      	ldr	r3, [pc, #220]	@ (8002a30 <HAL_ADC_Start_DMA+0x1d4>)
 8002954:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800295a:	4a36      	ldr	r2, [pc, #216]	@ (8002a34 <HAL_ADC_Start_DMA+0x1d8>)
 800295c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002962:	4a35      	ldr	r2, [pc, #212]	@ (8002a38 <HAL_ADC_Start_DMA+0x1dc>)
 8002964:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800296a:	4a34      	ldr	r2, [pc, #208]	@ (8002a3c <HAL_ADC_Start_DMA+0x1e0>)
 800296c:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002976:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	685a      	ldr	r2, [r3, #4]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002986:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	689a      	ldr	r2, [r3, #8]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002996:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	334c      	adds	r3, #76	@ 0x4c
 80029a2:	4619      	mov	r1, r3
 80029a4:	68ba      	ldr	r2, [r7, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f000 fce4 	bl	8003374 <HAL_DMA_Start_IT>
 80029ac:	4603      	mov	r3, r0
 80029ae:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	f003 031f 	and.w	r3, r3, #31
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10f      	bne.n	80029dc <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d129      	bne.n	8002a1e <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029d8:	609a      	str	r2, [r3, #8]
 80029da:	e020      	b.n	8002a1e <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a17      	ldr	r2, [pc, #92]	@ (8002a40 <HAL_ADC_Start_DMA+0x1e4>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d11b      	bne.n	8002a1e <HAL_ADC_Start_DMA+0x1c2>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d114      	bne.n	8002a1e <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689a      	ldr	r2, [r3, #8]
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a02:	609a      	str	r2, [r3, #8]
 8002a04:	e00b      	b.n	8002a1e <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a0a:	f043 0210 	orr.w	r2, r3, #16
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a16:	f043 0201 	orr.w	r2, r3, #1
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002a1e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3720      	adds	r7, #32
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	2000002c 	.word	0x2000002c
 8002a2c:	431bde83 	.word	0x431bde83
 8002a30:	40012300 	.word	0x40012300
 8002a34:	08002edd 	.word	0x08002edd
 8002a38:	08002f97 	.word	0x08002f97
 8002a3c:	08002fb3 	.word	0x08002fb3
 8002a40:	40012000 	.word	0x40012000

08002a44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002a60:	bf00      	nop
 8002a62:	370c      	adds	r7, #12
 8002a64:	46bd      	mov	sp, r7
 8002a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6a:	4770      	bx	lr

08002a6c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002a74:	bf00      	nop
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
 8002a88:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	d101      	bne.n	8002a9c <HAL_ADC_ConfigChannel+0x1c>
 8002a98:	2302      	movs	r3, #2
 8002a9a:	e113      	b.n	8002cc4 <HAL_ADC_ConfigChannel+0x244>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	2b09      	cmp	r3, #9
 8002aaa:	d925      	bls.n	8002af8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68d9      	ldr	r1, [r3, #12]
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	461a      	mov	r2, r3
 8002aba:	4613      	mov	r3, r2
 8002abc:	005b      	lsls	r3, r3, #1
 8002abe:	4413      	add	r3, r2
 8002ac0:	3b1e      	subs	r3, #30
 8002ac2:	2207      	movs	r2, #7
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	43da      	mvns	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	400a      	ands	r2, r1
 8002ad0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68d9      	ldr	r1, [r3, #12]
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	4403      	add	r3, r0
 8002aea:	3b1e      	subs	r3, #30
 8002aec:	409a      	lsls	r2, r3
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	430a      	orrs	r2, r1
 8002af4:	60da      	str	r2, [r3, #12]
 8002af6:	e022      	b.n	8002b3e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6919      	ldr	r1, [r3, #16]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	b29b      	uxth	r3, r3
 8002b04:	461a      	mov	r2, r3
 8002b06:	4613      	mov	r3, r2
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	4413      	add	r3, r2
 8002b0c:	2207      	movs	r2, #7
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43da      	mvns	r2, r3
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	400a      	ands	r2, r1
 8002b1a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6919      	ldr	r1, [r3, #16]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	689a      	ldr	r2, [r3, #8]
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	b29b      	uxth	r3, r3
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	4603      	mov	r3, r0
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4403      	add	r3, r0
 8002b34:	409a      	lsls	r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b06      	cmp	r3, #6
 8002b44:	d824      	bhi.n	8002b90 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	4413      	add	r3, r2
 8002b56:	3b05      	subs	r3, #5
 8002b58:	221f      	movs	r2, #31
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	400a      	ands	r2, r1
 8002b66:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	4618      	mov	r0, r3
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	685a      	ldr	r2, [r3, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4413      	add	r3, r2
 8002b80:	3b05      	subs	r3, #5
 8002b82:	fa00 f203 	lsl.w	r2, r0, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b8e:	e04c      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	2b0c      	cmp	r3, #12
 8002b96:	d824      	bhi.n	8002be2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	009b      	lsls	r3, r3, #2
 8002ba6:	4413      	add	r3, r2
 8002ba8:	3b23      	subs	r3, #35	@ 0x23
 8002baa:	221f      	movs	r2, #31
 8002bac:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb0:	43da      	mvns	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	400a      	ands	r2, r1
 8002bb8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	b29b      	uxth	r3, r3
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685a      	ldr	r2, [r3, #4]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	4413      	add	r3, r2
 8002bd2:	3b23      	subs	r3, #35	@ 0x23
 8002bd4:	fa00 f203 	lsl.w	r2, r0, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30
 8002be0:	e023      	b.n	8002c2a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685a      	ldr	r2, [r3, #4]
 8002bec:	4613      	mov	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3b41      	subs	r3, #65	@ 0x41
 8002bf4:	221f      	movs	r2, #31
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43da      	mvns	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	400a      	ands	r2, r1
 8002c02:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	4618      	mov	r0, r3
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3b41      	subs	r3, #65	@ 0x41
 8002c1e:	fa00 f203 	lsl.w	r2, r0, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	430a      	orrs	r2, r1
 8002c28:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c2a:	4b29      	ldr	r3, [pc, #164]	@ (8002cd0 <HAL_ADC_ConfigChannel+0x250>)
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a28      	ldr	r2, [pc, #160]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x254>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d10f      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d8>
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b12      	cmp	r3, #18
 8002c3e:	d10b      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a1d      	ldr	r2, [pc, #116]	@ (8002cd4 <HAL_ADC_ConfigChannel+0x254>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d12b      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x23a>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a1c      	ldr	r2, [pc, #112]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x258>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d003      	beq.n	8002c74 <HAL_ADC_ConfigChannel+0x1f4>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b11      	cmp	r3, #17
 8002c72:	d122      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a11      	ldr	r2, [pc, #68]	@ (8002cd8 <HAL_ADC_ConfigChannel+0x258>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d111      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c96:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <HAL_ADC_ConfigChannel+0x25c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a11      	ldr	r2, [pc, #68]	@ (8002ce0 <HAL_ADC_ConfigChannel+0x260>)
 8002c9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002ca0:	0c9a      	lsrs	r2, r3, #18
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cac:	e002      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	3b01      	subs	r3, #1
 8002cb2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d1f9      	bne.n	8002cae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	40012300 	.word	0x40012300
 8002cd4:	40012000 	.word	0x40012000
 8002cd8:	10000012 	.word	0x10000012
 8002cdc:	2000002c 	.word	0x2000002c
 8002ce0:	431bde83 	.word	0x431bde83

08002ce4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cec:	4b79      	ldr	r3, [pc, #484]	@ (8002ed4 <ADC_Init+0x1f0>)
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	431a      	orrs	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	6859      	ldr	r1, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	021a      	lsls	r2, r3, #8
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	685a      	ldr	r2, [r3, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002d3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	6859      	ldr	r1, [r3, #4]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	430a      	orrs	r2, r1
 8002d4e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6899      	ldr	r1, [r3, #8]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68da      	ldr	r2, [r3, #12]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	430a      	orrs	r2, r1
 8002d70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d76:	4a58      	ldr	r2, [pc, #352]	@ (8002ed8 <ADC_Init+0x1f4>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d022      	beq.n	8002dc2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	689a      	ldr	r2, [r3, #8]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6899      	ldr	r1, [r3, #8]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	430a      	orrs	r2, r1
 8002d9c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689a      	ldr	r2, [r3, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002dac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	430a      	orrs	r2, r1
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	e00f      	b.n	8002de2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	689a      	ldr	r2, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002dd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689a      	ldr	r2, [r3, #8]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002de0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f022 0202 	bic.w	r2, r2, #2
 8002df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	6899      	ldr	r1, [r3, #8]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	7e1b      	ldrb	r3, [r3, #24]
 8002dfc:	005a      	lsls	r2, r3, #1
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d01b      	beq.n	8002e48 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e1e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002e2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6859      	ldr	r1, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	035a      	lsls	r2, r3, #13
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	430a      	orrs	r2, r1
 8002e44:	605a      	str	r2, [r3, #4]
 8002e46:	e007      	b.n	8002e58 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	685a      	ldr	r2, [r3, #4]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e56:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002e66:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	051a      	lsls	r2, r3, #20
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	430a      	orrs	r2, r1
 8002e7c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002e8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6899      	ldr	r1, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002e9a:	025a      	lsls	r2, r3, #9
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	430a      	orrs	r2, r1
 8002ea2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689a      	ldr	r2, [r3, #8]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	029a      	lsls	r2, r3, #10
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	609a      	str	r2, [r3, #8]
}
 8002ec8:	bf00      	nop
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40012300 	.word	0x40012300
 8002ed8:	0f000001 	.word	0x0f000001

08002edc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b084      	sub	sp, #16
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d13c      	bne.n	8002f70 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d12b      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d127      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f1e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d006      	beq.n	8002f34 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	689b      	ldr	r3, [r3, #8]
 8002f2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d119      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	685a      	ldr	r2, [r3, #4]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f022 0220 	bic.w	r2, r2, #32
 8002f42:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d105      	bne.n	8002f68 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f60:	f043 0201 	orr.w	r2, r3, #1
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002f68:	68f8      	ldr	r0, [r7, #12]
 8002f6a:	f7fd fb39 	bl	80005e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002f6e:	e00e      	b.n	8002f8e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f74:	f003 0310 	and.w	r3, r3, #16
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d003      	beq.n	8002f84 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f7ff fd75 	bl	8002a6c <HAL_ADC_ErrorCallback>
}
 8002f82:	e004      	b.n	8002f8e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	4798      	blx	r3
}
 8002f8e:	bf00      	nop
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b084      	sub	sp, #16
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fa2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002fa4:	68f8      	ldr	r0, [r7, #12]
 8002fa6:	f7ff fd4d 	bl	8002a44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002faa:	bf00      	nop
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fbe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	2240      	movs	r2, #64	@ 0x40
 8002fc4:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fca:	f043 0204 	orr.w	r2, r3, #4
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f7ff fd4a 	bl	8002a6c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002fd8:	bf00      	nop
 8002fda:	3710      	adds	r7, #16
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003004:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003006:	68db      	ldr	r3, [r3, #12]
 8003008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003010:	4013      	ands	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800301c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003026:	4a04      	ldr	r2, [pc, #16]	@ (8003038 <__NVIC_SetPriorityGrouping+0x44>)
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	60d3      	str	r3, [r2, #12]
}
 800302c:	bf00      	nop
 800302e:	3714      	adds	r7, #20
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr
 8003038:	e000ed00 	.word	0xe000ed00

0800303c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800303c:	b480      	push	{r7}
 800303e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003040:	4b04      	ldr	r3, [pc, #16]	@ (8003054 <__NVIC_GetPriorityGrouping+0x18>)
 8003042:	68db      	ldr	r3, [r3, #12]
 8003044:	0a1b      	lsrs	r3, r3, #8
 8003046:	f003 0307 	and.w	r3, r3, #7
}
 800304a:	4618      	mov	r0, r3
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr
 8003054:	e000ed00 	.word	0xe000ed00

08003058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	4603      	mov	r3, r0
 8003060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003066:	2b00      	cmp	r3, #0
 8003068:	db0b      	blt.n	8003082 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800306a:	79fb      	ldrb	r3, [r7, #7]
 800306c:	f003 021f 	and.w	r2, r3, #31
 8003070:	4907      	ldr	r1, [pc, #28]	@ (8003090 <__NVIC_EnableIRQ+0x38>)
 8003072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003076:	095b      	lsrs	r3, r3, #5
 8003078:	2001      	movs	r0, #1
 800307a:	fa00 f202 	lsl.w	r2, r0, r2
 800307e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308c:	4770      	bx	lr
 800308e:	bf00      	nop
 8003090:	e000e100 	.word	0xe000e100

08003094 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	6039      	str	r1, [r7, #0]
 800309e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	db0a      	blt.n	80030be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	490c      	ldr	r1, [pc, #48]	@ (80030e0 <__NVIC_SetPriority+0x4c>)
 80030ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b2:	0112      	lsls	r2, r2, #4
 80030b4:	b2d2      	uxtb	r2, r2
 80030b6:	440b      	add	r3, r1
 80030b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030bc:	e00a      	b.n	80030d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	b2da      	uxtb	r2, r3
 80030c2:	4908      	ldr	r1, [pc, #32]	@ (80030e4 <__NVIC_SetPriority+0x50>)
 80030c4:	79fb      	ldrb	r3, [r7, #7]
 80030c6:	f003 030f 	and.w	r3, r3, #15
 80030ca:	3b04      	subs	r3, #4
 80030cc:	0112      	lsls	r2, r2, #4
 80030ce:	b2d2      	uxtb	r2, r2
 80030d0:	440b      	add	r3, r1
 80030d2:	761a      	strb	r2, [r3, #24]
}
 80030d4:	bf00      	nop
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000e100 	.word	0xe000e100
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	@ 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f1c3 0307 	rsb	r3, r3, #7
 8003102:	2b04      	cmp	r3, #4
 8003104:	bf28      	it	cs
 8003106:	2304      	movcs	r3, #4
 8003108:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	3304      	adds	r3, #4
 800310e:	2b06      	cmp	r3, #6
 8003110:	d902      	bls.n	8003118 <NVIC_EncodePriority+0x30>
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	3b03      	subs	r3, #3
 8003116:	e000      	b.n	800311a <NVIC_EncodePriority+0x32>
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800311c:	f04f 32ff 	mov.w	r2, #4294967295
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	fa02 f303 	lsl.w	r3, r2, r3
 8003126:	43da      	mvns	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	401a      	ands	r2, r3
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003130:	f04f 31ff 	mov.w	r1, #4294967295
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	fa01 f303 	lsl.w	r3, r1, r3
 800313a:	43d9      	mvns	r1, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003140:	4313      	orrs	r3, r2
         );
}
 8003142:	4618      	mov	r0, r3
 8003144:	3724      	adds	r7, #36	@ 0x24
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
	...

08003150 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3b01      	subs	r3, #1
 800315c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003160:	d301      	bcc.n	8003166 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003162:	2301      	movs	r3, #1
 8003164:	e00f      	b.n	8003186 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003166:	4a0a      	ldr	r2, [pc, #40]	@ (8003190 <SysTick_Config+0x40>)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	3b01      	subs	r3, #1
 800316c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800316e:	210f      	movs	r1, #15
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f7ff ff8e 	bl	8003094 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003178:	4b05      	ldr	r3, [pc, #20]	@ (8003190 <SysTick_Config+0x40>)
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800317e:	4b04      	ldr	r3, [pc, #16]	@ (8003190 <SysTick_Config+0x40>)
 8003180:	2207      	movs	r2, #7
 8003182:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	e000e010 	.word	0xe000e010

08003194 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f7ff ff29 	bl	8002ff4 <__NVIC_SetPriorityGrouping>
}
 80031a2:	bf00      	nop
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b086      	sub	sp, #24
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	4603      	mov	r3, r0
 80031b2:	60b9      	str	r1, [r7, #8]
 80031b4:	607a      	str	r2, [r7, #4]
 80031b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031bc:	f7ff ff3e 	bl	800303c <__NVIC_GetPriorityGrouping>
 80031c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031c2:	687a      	ldr	r2, [r7, #4]
 80031c4:	68b9      	ldr	r1, [r7, #8]
 80031c6:	6978      	ldr	r0, [r7, #20]
 80031c8:	f7ff ff8e 	bl	80030e8 <NVIC_EncodePriority>
 80031cc:	4602      	mov	r2, r0
 80031ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7ff ff5d 	bl	8003094 <__NVIC_SetPriority>
}
 80031da:	bf00      	nop
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}

080031e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b082      	sub	sp, #8
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	4603      	mov	r3, r0
 80031ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff ff31 	bl	8003058 <__NVIC_EnableIRQ>
}
 80031f6:	bf00      	nop
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b082      	sub	sp, #8
 8003202:	af00      	add	r7, sp, #0
 8003204:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ffa2 	bl	8003150 <SysTick_Config>
 800320c:	4603      	mov	r3, r0
}
 800320e:	4618      	mov	r0, r3
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
	...

08003218 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003224:	f7ff f996 	bl	8002554 <HAL_GetTick>
 8003228:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e099      	b.n	8003368 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2202      	movs	r2, #2
 8003238:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f022 0201 	bic.w	r2, r2, #1
 8003252:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003254:	e00f      	b.n	8003276 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003256:	f7ff f97d 	bl	8002554 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	2b05      	cmp	r3, #5
 8003262:	d908      	bls.n	8003276 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2220      	movs	r2, #32
 8003268:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2203      	movs	r2, #3
 800326e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e078      	b.n	8003368 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e8      	bne.n	8003256 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800328c:	697a      	ldr	r2, [r7, #20]
 800328e:	4b38      	ldr	r3, [pc, #224]	@ (8003370 <HAL_DMA_Init+0x158>)
 8003290:	4013      	ands	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	691b      	ldr	r3, [r3, #16]
 80032a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80032ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80032ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80032c2:	697a      	ldr	r2, [r7, #20]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d107      	bne.n	80032e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d8:	4313      	orrs	r3, r2
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	f023 0307 	bic.w	r3, r3, #7
 80032f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	4313      	orrs	r3, r2
 8003300:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003306:	2b04      	cmp	r3, #4
 8003308:	d117      	bne.n	800333a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330e:	697a      	ldr	r2, [r7, #20]
 8003310:	4313      	orrs	r3, r2
 8003312:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	2b00      	cmp	r3, #0
 800331a:	d00e      	beq.n	800333a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f000 faab 	bl	8003878 <DMA_CheckFifoParam>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d008      	beq.n	800333a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2240      	movs	r2, #64	@ 0x40
 800332c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003336:	2301      	movs	r3, #1
 8003338:	e016      	b.n	8003368 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fa62 	bl	800380c <DMA_CalcBaseAndBitshift>
 8003348:	4603      	mov	r3, r0
 800334a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003350:	223f      	movs	r2, #63	@ 0x3f
 8003352:	409a      	lsls	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2200      	movs	r2, #0
 800335c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	f010803f 	.word	0xf010803f

08003374 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b086      	sub	sp, #24
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
 8003380:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800338a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003392:	2b01      	cmp	r3, #1
 8003394:	d101      	bne.n	800339a <HAL_DMA_Start_IT+0x26>
 8003396:	2302      	movs	r3, #2
 8003398:	e040      	b.n	800341c <HAL_DMA_Start_IT+0xa8>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d12f      	bne.n	800340e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2202      	movs	r2, #2
 80033b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	687a      	ldr	r2, [r7, #4]
 80033c0:	68b9      	ldr	r1, [r7, #8]
 80033c2:	68f8      	ldr	r0, [r7, #12]
 80033c4:	f000 f9f4 	bl	80037b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033cc:	223f      	movs	r2, #63	@ 0x3f
 80033ce:	409a      	lsls	r2, r3
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0216 	orr.w	r2, r2, #22
 80033e2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d007      	beq.n	80033fc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f042 0208 	orr.w	r2, r2, #8
 80033fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f042 0201 	orr.w	r2, r2, #1
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	e005      	b.n	800341a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003416:	2302      	movs	r3, #2
 8003418:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800341a:	7dfb      	ldrb	r3, [r7, #23]
}
 800341c:	4618      	mov	r0, r3
 800341e:	3718      	adds	r7, #24
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}

08003424 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d004      	beq.n	8003442 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2280      	movs	r2, #128	@ 0x80
 800343c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e00c      	b.n	800345c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2205      	movs	r2, #5
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681a      	ldr	r2, [r3, #0]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f022 0201 	bic.w	r2, r2, #1
 8003458:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	370c      	adds	r7, #12
 8003460:	46bd      	mov	sp, r7
 8003462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003466:	4770      	bx	lr

08003468 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003474:	4b8e      	ldr	r3, [pc, #568]	@ (80036b0 <HAL_DMA_IRQHandler+0x248>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a8e      	ldr	r2, [pc, #568]	@ (80036b4 <HAL_DMA_IRQHandler+0x24c>)
 800347a:	fba2 2303 	umull	r2, r3, r2, r3
 800347e:	0a9b      	lsrs	r3, r3, #10
 8003480:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003486:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003488:	693b      	ldr	r3, [r7, #16]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003492:	2208      	movs	r2, #8
 8003494:	409a      	lsls	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	4013      	ands	r3, r2
 800349a:	2b00      	cmp	r3, #0
 800349c:	d01a      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0204 	bic.w	r2, r2, #4
 80034ba:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034c0:	2208      	movs	r2, #8
 80034c2:	409a      	lsls	r2, r3
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	f043 0201 	orr.w	r2, r3, #1
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034d8:	2201      	movs	r2, #1
 80034da:	409a      	lsls	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4013      	ands	r3, r2
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d012      	beq.n	800350a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	695b      	ldr	r3, [r3, #20]
 80034ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f6:	2201      	movs	r2, #1
 80034f8:	409a      	lsls	r2, r3
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003502:	f043 0202 	orr.w	r2, r3, #2
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800350e:	2204      	movs	r2, #4
 8003510:	409a      	lsls	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4013      	ands	r3, r2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d012      	beq.n	8003540 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00b      	beq.n	8003540 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800352c:	2204      	movs	r2, #4
 800352e:	409a      	lsls	r2, r3
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003538:	f043 0204 	orr.w	r2, r3, #4
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003544:	2210      	movs	r2, #16
 8003546:	409a      	lsls	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	4013      	ands	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	d043      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d03c      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003562:	2210      	movs	r2, #16
 8003564:	409a      	lsls	r2, r3
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d018      	beq.n	80035aa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d108      	bne.n	8003598 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800358a:	2b00      	cmp	r3, #0
 800358c:	d024      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	4798      	blx	r3
 8003596:	e01f      	b.n	80035d8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800359c:	2b00      	cmp	r3, #0
 800359e:	d01b      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a4:	6878      	ldr	r0, [r7, #4]
 80035a6:	4798      	blx	r3
 80035a8:	e016      	b.n	80035d8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d107      	bne.n	80035c8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0208 	bic.w	r2, r2, #8
 80035c6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d003      	beq.n	80035d8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035dc:	2220      	movs	r2, #32
 80035de:	409a      	lsls	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 808f 	beq.w	8003708 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8087 	beq.w	8003708 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035fe:	2220      	movs	r2, #32
 8003600:	409a      	lsls	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800360c:	b2db      	uxtb	r3, r3
 800360e:	2b05      	cmp	r3, #5
 8003610:	d136      	bne.n	8003680 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 0216 	bic.w	r2, r2, #22
 8003620:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695a      	ldr	r2, [r3, #20]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003630:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <HAL_DMA_IRQHandler+0x1da>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800363e:	2b00      	cmp	r3, #0
 8003640:	d007      	beq.n	8003652 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f022 0208 	bic.w	r2, r2, #8
 8003650:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003656:	223f      	movs	r2, #63	@ 0x3f
 8003658:	409a      	lsls	r2, r3
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003672:	2b00      	cmp	r3, #0
 8003674:	d07e      	beq.n	8003774 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
        }
        return;
 800367e:	e079      	b.n	8003774 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d01d      	beq.n	80036ca <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10d      	bne.n	80036b8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d031      	beq.n	8003708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	4798      	blx	r3
 80036ac:	e02c      	b.n	8003708 <HAL_DMA_IRQHandler+0x2a0>
 80036ae:	bf00      	nop
 80036b0:	2000002c 	.word	0x2000002c
 80036b4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d023      	beq.n	8003708 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	4798      	blx	r3
 80036c8:	e01e      	b.n	8003708 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10f      	bne.n	80036f8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f022 0210 	bic.w	r2, r2, #16
 80036e6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2201      	movs	r2, #1
 80036ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d003      	beq.n	8003708 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370c:	2b00      	cmp	r3, #0
 800370e:	d032      	beq.n	8003776 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003714:	f003 0301 	and.w	r3, r3, #1
 8003718:	2b00      	cmp	r3, #0
 800371a:	d022      	beq.n	8003762 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2205      	movs	r2, #5
 8003720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f022 0201 	bic.w	r2, r2, #1
 8003732:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	3301      	adds	r3, #1
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	697a      	ldr	r2, [r7, #20]
 800373c:	429a      	cmp	r2, r3
 800373e:	d307      	bcc.n	8003750 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1f2      	bne.n	8003734 <HAL_DMA_IRQHandler+0x2cc>
 800374e:	e000      	b.n	8003752 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003750:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003766:	2b00      	cmp	r3, #0
 8003768:	d005      	beq.n	8003776 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	4798      	blx	r3
 8003772:	e000      	b.n	8003776 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003774:	bf00      	nop
    }
  }
}
 8003776:	3718      	adds	r7, #24
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}

0800377c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800378a:	b2db      	uxtb	r3, r3
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	370c      	adds	r7, #12
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b085      	sub	sp, #20
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	60f8      	str	r0, [r7, #12]
 80037b8:	60b9      	str	r1, [r7, #8]
 80037ba:	607a      	str	r2, [r7, #4]
 80037bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80037cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	683a      	ldr	r2, [r7, #0]
 80037d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	2b40      	cmp	r3, #64	@ 0x40
 80037dc:	d108      	bne.n	80037f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80037ee:	e007      	b.n	8003800 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68ba      	ldr	r2, [r7, #8]
 80037f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	60da      	str	r2, [r3, #12]
}
 8003800:	bf00      	nop
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800380c:	b480      	push	{r7}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	3b10      	subs	r3, #16
 800381c:	4a14      	ldr	r2, [pc, #80]	@ (8003870 <DMA_CalcBaseAndBitshift+0x64>)
 800381e:	fba2 2303 	umull	r2, r3, r2, r3
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003826:	4a13      	ldr	r2, [pc, #76]	@ (8003874 <DMA_CalcBaseAndBitshift+0x68>)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	4413      	add	r3, r2
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b03      	cmp	r3, #3
 8003838:	d909      	bls.n	800384e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003842:	f023 0303 	bic.w	r3, r3, #3
 8003846:	1d1a      	adds	r2, r3, #4
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	659a      	str	r2, [r3, #88]	@ 0x58
 800384c:	e007      	b.n	800385e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003856:	f023 0303 	bic.w	r3, r3, #3
 800385a:	687a      	ldr	r2, [r7, #4]
 800385c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	aaaaaaab 	.word	0xaaaaaaab
 8003874:	0800e560 	.word	0x0800e560

08003878 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003878:	b480      	push	{r7}
 800387a:	b085      	sub	sp, #20
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003888:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d11f      	bne.n	80038d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	2b03      	cmp	r3, #3
 8003896:	d856      	bhi.n	8003946 <DMA_CheckFifoParam+0xce>
 8003898:	a201      	add	r2, pc, #4	@ (adr r2, 80038a0 <DMA_CheckFifoParam+0x28>)
 800389a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800389e:	bf00      	nop
 80038a0:	080038b1 	.word	0x080038b1
 80038a4:	080038c3 	.word	0x080038c3
 80038a8:	080038b1 	.word	0x080038b1
 80038ac:	08003947 	.word	0x08003947
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d046      	beq.n	800394a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c0:	e043      	b.n	800394a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80038ca:	d140      	bne.n	800394e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038d0:	e03d      	b.n	800394e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038da:	d121      	bne.n	8003920 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80038dc:	68bb      	ldr	r3, [r7, #8]
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d837      	bhi.n	8003952 <DMA_CheckFifoParam+0xda>
 80038e2:	a201      	add	r2, pc, #4	@ (adr r2, 80038e8 <DMA_CheckFifoParam+0x70>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	080038ff 	.word	0x080038ff
 80038f0:	080038f9 	.word	0x080038f9
 80038f4:	08003911 	.word	0x08003911
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	73fb      	strb	r3, [r7, #15]
      break;
 80038fc:	e030      	b.n	8003960 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003902:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d025      	beq.n	8003956 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800390e:	e022      	b.n	8003956 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003914:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003918:	d11f      	bne.n	800395a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800391e:	e01c      	b.n	800395a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	2b02      	cmp	r3, #2
 8003924:	d903      	bls.n	800392e <DMA_CheckFifoParam+0xb6>
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b03      	cmp	r3, #3
 800392a:	d003      	beq.n	8003934 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800392c:	e018      	b.n	8003960 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	73fb      	strb	r3, [r7, #15]
      break;
 8003932:	e015      	b.n	8003960 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003938:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00e      	beq.n	800395e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	73fb      	strb	r3, [r7, #15]
      break;
 8003944:	e00b      	b.n	800395e <DMA_CheckFifoParam+0xe6>
      break;
 8003946:	bf00      	nop
 8003948:	e00a      	b.n	8003960 <DMA_CheckFifoParam+0xe8>
      break;
 800394a:	bf00      	nop
 800394c:	e008      	b.n	8003960 <DMA_CheckFifoParam+0xe8>
      break;
 800394e:	bf00      	nop
 8003950:	e006      	b.n	8003960 <DMA_CheckFifoParam+0xe8>
      break;
 8003952:	bf00      	nop
 8003954:	e004      	b.n	8003960 <DMA_CheckFifoParam+0xe8>
      break;
 8003956:	bf00      	nop
 8003958:	e002      	b.n	8003960 <DMA_CheckFifoParam+0xe8>
      break;   
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <DMA_CheckFifoParam+0xe8>
      break;
 800395e:	bf00      	nop
    }
  } 
  
  return status; 
 8003960:	7bfb      	ldrb	r3, [r7, #15]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3714      	adds	r7, #20
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop

08003970 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003970:	b480      	push	{r7}
 8003972:	b089      	sub	sp, #36	@ 0x24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800397e:	2300      	movs	r3, #0
 8003980:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003982:	2300      	movs	r3, #0
 8003984:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	e159      	b.n	8003c40 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800398c:	2201      	movs	r2, #1
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	f040 8148 	bne.w	8003c3a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d005      	beq.n	80039c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d130      	bne.n	8003a24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	2203      	movs	r2, #3
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	4013      	ands	r3, r2
 80039d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	68da      	ldr	r2, [r3, #12]
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	005b      	lsls	r3, r3, #1
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	69ba      	ldr	r2, [r7, #24]
 80039f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80039f8:	2201      	movs	r2, #1
 80039fa:	69fb      	ldr	r3, [r7, #28]
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	091b      	lsrs	r3, r3, #4
 8003a0e:	f003 0201 	and.w	r2, r3, #1
 8003a12:	69fb      	ldr	r3, [r7, #28]
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	69ba      	ldr	r2, [r7, #24]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	2b03      	cmp	r3, #3
 8003a2e:	d017      	beq.n	8003a60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	005b      	lsls	r3, r3, #1
 8003a3a:	2203      	movs	r2, #3
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	689a      	ldr	r2, [r3, #8]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	005b      	lsls	r3, r3, #1
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	69ba      	ldr	r2, [r7, #24]
 8003a5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d123      	bne.n	8003ab4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	08da      	lsrs	r2, r3, #3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	3208      	adds	r2, #8
 8003a74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	220f      	movs	r2, #15
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	691a      	ldr	r2, [r3, #16]
 8003a94:	69fb      	ldr	r3, [r7, #28]
 8003a96:	f003 0307 	and.w	r3, r3, #7
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aa6:	69fb      	ldr	r3, [r7, #28]
 8003aa8:	08da      	lsrs	r2, r3, #3
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3208      	adds	r2, #8
 8003aae:	69b9      	ldr	r1, [r7, #24]
 8003ab0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	005b      	lsls	r3, r3, #1
 8003abe:	2203      	movs	r2, #3
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	43db      	mvns	r3, r3
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0203 	and.w	r2, r3, #3
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	005b      	lsls	r3, r3, #1
 8003ad8:	fa02 f303 	lsl.w	r3, r2, r3
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 80a2 	beq.w	8003c3a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003af6:	2300      	movs	r3, #0
 8003af8:	60fb      	str	r3, [r7, #12]
 8003afa:	4b57      	ldr	r3, [pc, #348]	@ (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003afe:	4a56      	ldr	r2, [pc, #344]	@ (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003b00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b06:	4b54      	ldr	r3, [pc, #336]	@ (8003c58 <HAL_GPIO_Init+0x2e8>)
 8003b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003b0e:	60fb      	str	r3, [r7, #12]
 8003b10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b12:	4a52      	ldr	r2, [pc, #328]	@ (8003c5c <HAL_GPIO_Init+0x2ec>)
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	089b      	lsrs	r3, r3, #2
 8003b18:	3302      	adds	r3, #2
 8003b1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	220f      	movs	r2, #15
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	4013      	ands	r3, r2
 8003b34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a49      	ldr	r2, [pc, #292]	@ (8003c60 <HAL_GPIO_Init+0x2f0>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d019      	beq.n	8003b72 <HAL_GPIO_Init+0x202>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a48      	ldr	r2, [pc, #288]	@ (8003c64 <HAL_GPIO_Init+0x2f4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d013      	beq.n	8003b6e <HAL_GPIO_Init+0x1fe>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a47      	ldr	r2, [pc, #284]	@ (8003c68 <HAL_GPIO_Init+0x2f8>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d00d      	beq.n	8003b6a <HAL_GPIO_Init+0x1fa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a46      	ldr	r2, [pc, #280]	@ (8003c6c <HAL_GPIO_Init+0x2fc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d007      	beq.n	8003b66 <HAL_GPIO_Init+0x1f6>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a45      	ldr	r2, [pc, #276]	@ (8003c70 <HAL_GPIO_Init+0x300>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d101      	bne.n	8003b62 <HAL_GPIO_Init+0x1f2>
 8003b5e:	2304      	movs	r3, #4
 8003b60:	e008      	b.n	8003b74 <HAL_GPIO_Init+0x204>
 8003b62:	2307      	movs	r3, #7
 8003b64:	e006      	b.n	8003b74 <HAL_GPIO_Init+0x204>
 8003b66:	2303      	movs	r3, #3
 8003b68:	e004      	b.n	8003b74 <HAL_GPIO_Init+0x204>
 8003b6a:	2302      	movs	r3, #2
 8003b6c:	e002      	b.n	8003b74 <HAL_GPIO_Init+0x204>
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e000      	b.n	8003b74 <HAL_GPIO_Init+0x204>
 8003b72:	2300      	movs	r3, #0
 8003b74:	69fa      	ldr	r2, [r7, #28]
 8003b76:	f002 0203 	and.w	r2, r2, #3
 8003b7a:	0092      	lsls	r2, r2, #2
 8003b7c:	4093      	lsls	r3, r2
 8003b7e:	69ba      	ldr	r2, [r7, #24]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003b84:	4935      	ldr	r1, [pc, #212]	@ (8003c5c <HAL_GPIO_Init+0x2ec>)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	089b      	lsrs	r3, r3, #2
 8003b8a:	3302      	adds	r3, #2
 8003b8c:	69ba      	ldr	r2, [r7, #24]
 8003b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003b92:	4b38      	ldr	r3, [pc, #224]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	69ba      	ldr	r2, [r7, #24]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003bae:	69ba      	ldr	r2, [r7, #24]
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003bb6:	4a2f      	ldr	r2, [pc, #188]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003bbc:	4b2d      	ldr	r3, [pc, #180]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	69ba      	ldr	r2, [r7, #24]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003be0:	4a24      	ldr	r2, [pc, #144]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003be6:	4b23      	ldr	r3, [pc, #140]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	69ba      	ldr	r2, [r7, #24]
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d003      	beq.n	8003c0a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c0a:	4a1a      	ldr	r2, [pc, #104]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c10:	4b18      	ldr	r3, [pc, #96]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003c2c:	69ba      	ldr	r2, [r7, #24]
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c34:	4a0f      	ldr	r2, [pc, #60]	@ (8003c74 <HAL_GPIO_Init+0x304>)
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3301      	adds	r3, #1
 8003c3e:	61fb      	str	r3, [r7, #28]
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b0f      	cmp	r3, #15
 8003c44:	f67f aea2 	bls.w	800398c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	3724      	adds	r7, #36	@ 0x24
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
 8003c56:	bf00      	nop
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	40013800 	.word	0x40013800
 8003c60:	40020000 	.word	0x40020000
 8003c64:	40020400 	.word	0x40020400
 8003c68:	40020800 	.word	0x40020800
 8003c6c:	40020c00 	.word	0x40020c00
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40013c00 	.word	0x40013c00

08003c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	460b      	mov	r3, r1
 8003c82:	807b      	strh	r3, [r7, #2]
 8003c84:	4613      	mov	r3, r2
 8003c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c88:	787b      	ldrb	r3, [r7, #1]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c8e:	887a      	ldrh	r2, [r7, #2]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c94:	e003      	b.n	8003c9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c96:	887b      	ldrh	r3, [r7, #2]
 8003c98:	041a      	lsls	r2, r3, #16
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	619a      	str	r2, [r3, #24]
}
 8003c9e:	bf00      	nop
 8003ca0:	370c      	adds	r7, #12
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr

08003caa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b085      	sub	sp, #20
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003cbc:	887a      	ldrh	r2, [r7, #2]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	041a      	lsls	r2, r3, #16
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	43d9      	mvns	r1, r3
 8003cc8:	887b      	ldrh	r3, [r7, #2]
 8003cca:	400b      	ands	r3, r1
 8003ccc:	431a      	orrs	r2, r3
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	619a      	str	r2, [r3, #24]
}
 8003cd2:	bf00      	nop
 8003cd4:	3714      	adds	r7, #20
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
	...

08003ce0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d101      	bne.n	8003cf2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e12b      	b.n	8003f4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d106      	bne.n	8003d0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7fd fe86 	bl	8001a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2224      	movs	r2, #36	@ 0x24
 8003d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f022 0201 	bic.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d32:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d42:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d44:	f004 fce6 	bl	8008714 <HAL_RCC_GetPCLK1Freq>
 8003d48:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4a81      	ldr	r2, [pc, #516]	@ (8003f54 <HAL_I2C_Init+0x274>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d807      	bhi.n	8003d64 <HAL_I2C_Init+0x84>
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4a80      	ldr	r2, [pc, #512]	@ (8003f58 <HAL_I2C_Init+0x278>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	bf94      	ite	ls
 8003d5c:	2301      	movls	r3, #1
 8003d5e:	2300      	movhi	r3, #0
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	e006      	b.n	8003d72 <HAL_I2C_Init+0x92>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4a7d      	ldr	r2, [pc, #500]	@ (8003f5c <HAL_I2C_Init+0x27c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	bf94      	ite	ls
 8003d6c:	2301      	movls	r3, #1
 8003d6e:	2300      	movhi	r3, #0
 8003d70:	b2db      	uxtb	r3, r3
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d001      	beq.n	8003d7a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	e0e7      	b.n	8003f4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	4a78      	ldr	r2, [pc, #480]	@ (8003f60 <HAL_I2C_Init+0x280>)
 8003d7e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d82:	0c9b      	lsrs	r3, r3, #18
 8003d84:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	430a      	orrs	r2, r1
 8003d98:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	4a6a      	ldr	r2, [pc, #424]	@ (8003f54 <HAL_I2C_Init+0x274>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d802      	bhi.n	8003db4 <HAL_I2C_Init+0xd4>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	3301      	adds	r3, #1
 8003db2:	e009      	b.n	8003dc8 <HAL_I2C_Init+0xe8>
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003dba:	fb02 f303 	mul.w	r3, r2, r3
 8003dbe:	4a69      	ldr	r2, [pc, #420]	@ (8003f64 <HAL_I2C_Init+0x284>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	687a      	ldr	r2, [r7, #4]
 8003dca:	6812      	ldr	r2, [r2, #0]
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003dda:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	495c      	ldr	r1, [pc, #368]	@ (8003f54 <HAL_I2C_Init+0x274>)
 8003de4:	428b      	cmp	r3, r1
 8003de6:	d819      	bhi.n	8003e1c <HAL_I2C_Init+0x13c>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	1e59      	subs	r1, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	005b      	lsls	r3, r3, #1
 8003df2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003df6:	1c59      	adds	r1, r3, #1
 8003df8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003dfc:	400b      	ands	r3, r1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00a      	beq.n	8003e18 <HAL_I2C_Init+0x138>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	1e59      	subs	r1, r3, #1
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e10:	3301      	adds	r3, #1
 8003e12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e16:	e051      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e18:	2304      	movs	r3, #4
 8003e1a:	e04f      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d111      	bne.n	8003e48 <HAL_I2C_Init+0x168>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	1e58      	subs	r0, r3, #1
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6859      	ldr	r1, [r3, #4]
 8003e2c:	460b      	mov	r3, r1
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	440b      	add	r3, r1
 8003e32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e36:	3301      	adds	r3, #1
 8003e38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	bf0c      	ite	eq
 8003e40:	2301      	moveq	r3, #1
 8003e42:	2300      	movne	r3, #0
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	e012      	b.n	8003e6e <HAL_I2C_Init+0x18e>
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	1e58      	subs	r0, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6859      	ldr	r1, [r3, #4]
 8003e50:	460b      	mov	r3, r1
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	0099      	lsls	r1, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e5e:	3301      	adds	r3, #1
 8003e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	bf0c      	ite	eq
 8003e68:	2301      	moveq	r3, #1
 8003e6a:	2300      	movne	r3, #0
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_I2C_Init+0x196>
 8003e72:	2301      	movs	r3, #1
 8003e74:	e022      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10e      	bne.n	8003e9c <HAL_I2C_Init+0x1bc>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1e58      	subs	r0, r3, #1
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6859      	ldr	r1, [r3, #4]
 8003e86:	460b      	mov	r3, r1
 8003e88:	005b      	lsls	r3, r3, #1
 8003e8a:	440b      	add	r3, r1
 8003e8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e90:	3301      	adds	r3, #1
 8003e92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e96:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003e9a:	e00f      	b.n	8003ebc <HAL_I2C_Init+0x1dc>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	1e58      	subs	r0, r3, #1
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6859      	ldr	r1, [r3, #4]
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	0099      	lsls	r1, r3, #2
 8003eac:	440b      	add	r3, r1
 8003eae:	fbb0 f3f3 	udiv	r3, r0, r3
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eb8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	6809      	ldr	r1, [r1, #0]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	69da      	ldr	r2, [r3, #28]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	430a      	orrs	r2, r1
 8003ede:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003eea:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6911      	ldr	r1, [r2, #16]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	68d2      	ldr	r2, [r2, #12]
 8003ef6:	4311      	orrs	r1, r2
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	6812      	ldr	r2, [r2, #0]
 8003efc:	430b      	orrs	r3, r1
 8003efe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	431a      	orrs	r2, r3
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	430a      	orrs	r2, r1
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0201 	orr.w	r2, r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2200      	movs	r2, #0
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003f48:	2300      	movs	r3, #0
}
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3710      	adds	r7, #16
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	000186a0 	.word	0x000186a0
 8003f58:	001e847f 	.word	0x001e847f
 8003f5c:	003d08ff 	.word	0x003d08ff
 8003f60:	431bde83 	.word	0x431bde83
 8003f64:	10624dd3 	.word	0x10624dd3

08003f68 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f7a:	2b80      	cmp	r3, #128	@ 0x80
 8003f7c:	d103      	bne.n	8003f86 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2200      	movs	r2, #0
 8003f84:	611a      	str	r2, [r3, #16]
  }
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
	...

08003f94 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b088      	sub	sp, #32
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	817b      	strh	r3, [r7, #10]
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	813b      	strh	r3, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fae:	f7fe fad1 	bl	8002554 <HAL_GetTick>
 8003fb2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b20      	cmp	r3, #32
 8003fbe:	f040 80d9 	bne.w	8004174 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	2319      	movs	r3, #25
 8003fc8:	2201      	movs	r2, #1
 8003fca:	496d      	ldr	r1, [pc, #436]	@ (8004180 <HAL_I2C_Mem_Write+0x1ec>)
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f002 faf9 	bl	80065c4 <I2C_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d001      	beq.n	8003fdc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e0cc      	b.n	8004176 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_I2C_Mem_Write+0x56>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e0c5      	b.n	8004176 <HAL_I2C_Mem_Write+0x1e2>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 0301 	and.w	r3, r3, #1
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d007      	beq.n	8004010 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	681a      	ldr	r2, [r3, #0]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f042 0201 	orr.w	r2, r2, #1
 800400e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800401e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2221      	movs	r2, #33	@ 0x21
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2240      	movs	r2, #64	@ 0x40
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	6a3a      	ldr	r2, [r7, #32]
 800403a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004040:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004046:	b29a      	uxth	r2, r3
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	4a4d      	ldr	r2, [pc, #308]	@ (8004184 <HAL_I2C_Mem_Write+0x1f0>)
 8004050:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004052:	88f8      	ldrh	r0, [r7, #6]
 8004054:	893a      	ldrh	r2, [r7, #8]
 8004056:	8979      	ldrh	r1, [r7, #10]
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	9301      	str	r3, [sp, #4]
 800405c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	4603      	mov	r3, r0
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f001 ff6c 	bl	8005f40 <I2C_RequestMemoryWrite>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d052      	beq.n	8004114 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e081      	b.n	8004176 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004076:	68f8      	ldr	r0, [r7, #12]
 8004078:	f002 fbbe 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800407c:	4603      	mov	r3, r0
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00d      	beq.n	800409e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	2b04      	cmp	r3, #4
 8004088:	d107      	bne.n	800409a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004098:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e06b      	b.n	8004176 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a2:	781a      	ldrb	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c4:	b29b      	uxth	r3, r3
 80040c6:	3b01      	subs	r3, #1
 80040c8:	b29a      	uxth	r2, r3
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b04      	cmp	r3, #4
 80040da:	d11b      	bne.n	8004114 <HAL_I2C_Mem_Write+0x180>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d017      	beq.n	8004114 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004118:	2b00      	cmp	r3, #0
 800411a:	d1aa      	bne.n	8004072 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004120:	68f8      	ldr	r0, [r7, #12]
 8004122:	f002 fbb1 	bl	8006888 <I2C_WaitOnBTFFlagUntilTimeout>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d00d      	beq.n	8004148 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	2b04      	cmp	r3, #4
 8004132:	d107      	bne.n	8004144 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004142:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e016      	b.n	8004176 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681a      	ldr	r2, [r3, #0]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004156:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2220      	movs	r2, #32
 800415c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	2200      	movs	r2, #0
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	e000      	b.n	8004176 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004174:	2302      	movs	r3, #2
  }
}
 8004176:	4618      	mov	r0, r3
 8004178:	3718      	adds	r7, #24
 800417a:	46bd      	mov	sp, r7
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	00100002 	.word	0x00100002
 8004184:	ffff0000 	.word	0xffff0000

08004188 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b08a      	sub	sp, #40	@ 0x28
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	4608      	mov	r0, r1
 8004192:	4611      	mov	r1, r2
 8004194:	461a      	mov	r2, r3
 8004196:	4603      	mov	r3, r0
 8004198:	817b      	strh	r3, [r7, #10]
 800419a:	460b      	mov	r3, r1
 800419c:	813b      	strh	r3, [r7, #8]
 800419e:	4613      	mov	r3, r2
 80041a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80041a2:	2300      	movs	r3, #0
 80041a4:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80041a6:	f7fe f9d5 	bl	8002554 <HAL_GetTick>
 80041aa:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041b2:	b2db      	uxtb	r3, r3
 80041b4:	2b20      	cmp	r3, #32
 80041b6:	f040 8136 	bne.w	8004426 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80041ba:	4b9d      	ldr	r3, [pc, #628]	@ (8004430 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	08db      	lsrs	r3, r3, #3
 80041c0:	4a9c      	ldr	r2, [pc, #624]	@ (8004434 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 80041c2:	fba2 2303 	umull	r2, r3, r2, r3
 80041c6:	0a1a      	lsrs	r2, r3, #8
 80041c8:	4613      	mov	r3, r2
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	4413      	add	r3, r2
 80041ce:	009a      	lsls	r2, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	3b01      	subs	r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d112      	bne.n	8004206 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2200      	movs	r2, #0
 80041e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041fa:	f043 0220 	orr.w	r2, r3, #32
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004202:	2302      	movs	r3, #2
 8004204:	e110      	b.n	8004428 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b02      	cmp	r3, #2
 8004212:	d0df      	beq.n	80041d4 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_I2C_Mem_Write_DMA+0x9a>
 800421e:	2302      	movs	r3, #2
 8004220:	e102      	b.n	8004428 <HAL_I2C_Mem_Write_DMA+0x2a0>
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2201      	movs	r2, #1
 8004226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0301 	and.w	r3, r3, #1
 8004234:	2b01      	cmp	r3, #1
 8004236:	d007      	beq.n	8004248 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f042 0201 	orr.w	r2, r2, #1
 8004246:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004256:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2221      	movs	r2, #33	@ 0x21
 800425c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2240      	movs	r2, #64	@ 0x40
 8004264:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2200      	movs	r2, #0
 800426c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004272:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8004278:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800427e:	b29a      	uxth	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4a6c      	ldr	r2, [pc, #432]	@ (8004438 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 8004288:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800428a:	897a      	ldrh	r2, [r7, #10]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004290:	893a      	ldrh	r2, [r7, #8]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004296:	88fa      	ldrh	r2, [r7, #6]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2200      	movs	r2, #0
 80042a0:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80a9 	beq.w	80043fe <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d02a      	beq.n	800430a <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042b8:	4a60      	ldr	r2, [pc, #384]	@ (800443c <HAL_I2C_Mem_Write_DMA+0x2b4>)
 80042ba:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c0:	4a5f      	ldr	r2, [pc, #380]	@ (8004440 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 80042c2:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042c8:	2200      	movs	r2, #0
 80042ca:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d0:	2200      	movs	r2, #0
 80042d2:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042d8:	2200      	movs	r2, #0
 80042da:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042e0:	2200      	movs	r2, #0
 80042e2:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042ec:	4619      	mov	r1, r3
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3310      	adds	r3, #16
 80042f4:	461a      	mov	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042fa:	f7ff f83b 	bl	8003374 <HAL_DMA_Start_IT>
 80042fe:	4603      	mov	r3, r0
 8004300:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004302:	7efb      	ldrb	r3, [r7, #27]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d166      	bne.n	80043d6 <HAL_I2C_Mem_Write_DMA+0x24e>
 8004308:	e013      	b.n	8004332 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800431e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e07a      	b.n	8004428 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004332:	88f8      	ldrh	r0, [r7, #6]
 8004334:	893a      	ldrh	r2, [r7, #8]
 8004336:	8979      	ldrh	r1, [r7, #10]
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	9301      	str	r3, [sp, #4]
 800433c:	2323      	movs	r3, #35	@ 0x23
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	4603      	mov	r3, r0
 8004342:	68f8      	ldr	r0, [r7, #12]
 8004344:	f001 fdfc 	bl	8005f40 <I2C_RequestMemoryWrite>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d022      	beq.n	8004394 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004352:	4618      	mov	r0, r3
 8004354:	f7ff f866 	bl	8003424 <HAL_DMA_Abort_IT>
 8004358:	4603      	mov	r3, r0
 800435a:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004360:	2200      	movs	r2, #0
 8004362:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004372:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f022 0201 	bic.w	r2, r2, #1
 800438e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e049      	b.n	8004428 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004394:	2300      	movs	r3, #0
 8004396:	613b      	str	r3, [r7, #16]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	613b      	str	r3, [r7, #16]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	613b      	str	r3, [r7, #16]
 80043a8:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043c0:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	685a      	ldr	r2, [r3, #4]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80043d0:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 80043d2:	2300      	movs	r3, #0
 80043d4:	e028      	b.n	8004428 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2220      	movs	r2, #32
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	f043 0210 	orr.w	r2, r3, #16
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e014      	b.n	8004428 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2220      	movs	r2, #32
 8004402:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004412:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e000      	b.n	8004428 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004426:	2302      	movs	r3, #2
  }
}
 8004428:	4618      	mov	r0, r3
 800442a:	3720      	adds	r7, #32
 800442c:	46bd      	mov	sp, r7
 800442e:	bd80      	pop	{r7, pc}
 8004430:	2000002c 	.word	0x2000002c
 8004434:	14f8b589 	.word	0x14f8b589
 8004438:	ffff0000 	.word	0xffff0000
 800443c:	0800623d 	.word	0x0800623d
 8004440:	080063fb 	.word	0x080063fb

08004444 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b08c      	sub	sp, #48	@ 0x30
 8004448:	af02      	add	r7, sp, #8
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	4608      	mov	r0, r1
 800444e:	4611      	mov	r1, r2
 8004450:	461a      	mov	r2, r3
 8004452:	4603      	mov	r3, r0
 8004454:	817b      	strh	r3, [r7, #10]
 8004456:	460b      	mov	r3, r1
 8004458:	813b      	strh	r3, [r7, #8]
 800445a:	4613      	mov	r3, r2
 800445c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800445e:	f7fe f879 	bl	8002554 <HAL_GetTick>
 8004462:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004464:	2300      	movs	r3, #0
 8004466:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b20      	cmp	r3, #32
 8004472:	f040 8172 	bne.w	800475a <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004476:	4b93      	ldr	r3, [pc, #588]	@ (80046c4 <HAL_I2C_Mem_Read_DMA+0x280>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	08db      	lsrs	r3, r3, #3
 800447c:	4a92      	ldr	r2, [pc, #584]	@ (80046c8 <HAL_I2C_Mem_Read_DMA+0x284>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	0a1a      	lsrs	r2, r3, #8
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009a      	lsls	r2, r3, #2
 800448c:	4413      	add	r3, r2
 800448e:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	3b01      	subs	r3, #1
 8004494:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d112      	bne.n	80044c2 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2200      	movs	r2, #0
 80044ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80044be:	2302      	movs	r3, #2
 80044c0:	e14c      	b.n	800475c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b02      	cmp	r3, #2
 80044ce:	d0df      	beq.n	8004490 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d6:	2b01      	cmp	r3, #1
 80044d8:	d101      	bne.n	80044de <HAL_I2C_Mem_Read_DMA+0x9a>
 80044da:	2302      	movs	r3, #2
 80044dc:	e13e      	b.n	800475c <HAL_I2C_Mem_Read_DMA+0x318>
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2201      	movs	r2, #1
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d007      	beq.n	8004504 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f042 0201 	orr.w	r2, r2, #1
 8004502:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004512:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2222      	movs	r2, #34	@ 0x22
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2240      	movs	r2, #64	@ 0x40
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2200      	movs	r2, #0
 8004528:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800452e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004534:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4a62      	ldr	r2, [pc, #392]	@ (80046cc <HAL_I2C_Mem_Read_DMA+0x288>)
 8004544:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004546:	897a      	ldrh	r2, [r7, #10]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800454c:	893a      	ldrh	r2, [r7, #8]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2200      	movs	r2, #0
 800455c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 80cc 	beq.w	8004700 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456c:	2b00      	cmp	r3, #0
 800456e:	d02d      	beq.n	80045cc <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004574:	4a56      	ldr	r2, [pc, #344]	@ (80046d0 <HAL_I2C_Mem_Read_DMA+0x28c>)
 8004576:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	4a55      	ldr	r2, [pc, #340]	@ (80046d4 <HAL_I2C_Mem_Read_DMA+0x290>)
 800457e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004584:	2200      	movs	r2, #0
 8004586:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	2200      	movs	r2, #0
 800458e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004594:	2200      	movs	r2, #0
 8004596:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459c:	2200      	movs	r2, #0
 800459e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	3310      	adds	r3, #16
 80045aa:	4619      	mov	r1, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	461a      	mov	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045b6:	f7fe fedd 	bl	8003374 <HAL_DMA_Start_IT>
 80045ba:	4603      	mov	r3, r0
 80045bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80045c0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f040 8087 	bne.w	80046d8 <HAL_I2C_Mem_Read_DMA+0x294>
 80045ca:	e013      	b.n	80045f4 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2220      	movs	r2, #32
 80045d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045e0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e0b3      	b.n	800475c <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80045f4:	88f8      	ldrh	r0, [r7, #6]
 80045f6:	893a      	ldrh	r2, [r7, #8]
 80045f8:	8979      	ldrh	r1, [r7, #10]
 80045fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045fc:	9301      	str	r3, [sp, #4]
 80045fe:	2323      	movs	r3, #35	@ 0x23
 8004600:	9300      	str	r3, [sp, #0]
 8004602:	4603      	mov	r3, r0
 8004604:	68f8      	ldr	r0, [r7, #12]
 8004606:	f001 fd31 	bl	800606c <I2C_RequestMemoryRead>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d023      	beq.n	8004658 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	4618      	mov	r0, r3
 8004616:	f7fe ff05 	bl	8003424 <HAL_DMA_Abort_IT>
 800461a:	4603      	mov	r3, r0
 800461c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004624:	2200      	movs	r2, #0
 8004626:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004636:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0201 	bic.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e081      	b.n	800475c <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800465c:	2b01      	cmp	r3, #1
 800465e:	d108      	bne.n	8004672 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800466e:	601a      	str	r2, [r3, #0]
 8004670:	e007      	b.n	8004682 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	685a      	ldr	r2, [r3, #4]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004680:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004682:	2300      	movs	r3, #0
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	61bb      	str	r3, [r7, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	61bb      	str	r3, [r7, #24]
 8004696:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	685a      	ldr	r2, [r3, #4]
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046ae:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80046be:	605a      	str	r2, [r3, #4]
 80046c0:	e049      	b.n	8004756 <HAL_I2C_Mem_Read_DMA+0x312>
 80046c2:	bf00      	nop
 80046c4:	2000002c 	.word	0x2000002c
 80046c8:	14f8b589 	.word	0x14f8b589
 80046cc:	ffff0000 	.word	0xffff0000
 80046d0:	0800623d 	.word	0x0800623d
 80046d4:	080063fb 	.word	0x080063fb
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	f043 0210 	orr.w	r2, r3, #16
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e02d      	b.n	800475c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004700:	88f8      	ldrh	r0, [r7, #6]
 8004702:	893a      	ldrh	r2, [r7, #8]
 8004704:	8979      	ldrh	r1, [r7, #10]
 8004706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004708:	9301      	str	r3, [sp, #4]
 800470a:	2323      	movs	r3, #35	@ 0x23
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	4603      	mov	r3, r0
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f001 fcab 	bl	800606c <I2C_RequestMemoryRead>
 8004716:	4603      	mov	r3, r0
 8004718:	2b00      	cmp	r3, #0
 800471a:	d001      	beq.n	8004720 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800471c:	2301      	movs	r3, #1
 800471e:	e01d      	b.n	800475c <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004720:	2300      	movs	r3, #0
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	695b      	ldr	r3, [r3, #20]
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004744:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2220      	movs	r2, #32
 800474a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8004756:	2300      	movs	r3, #0
 8004758:	e000      	b.n	800475c <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800475a:	2302      	movs	r3, #2
  }
}
 800475c:	4618      	mov	r0, r3
 800475e:	3728      	adds	r7, #40	@ 0x28
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}

08004764 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004764:	b580      	push	{r7, lr}
 8004766:	b088      	sub	sp, #32
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004784:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800478c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800478e:	7bfb      	ldrb	r3, [r7, #15]
 8004790:	2b10      	cmp	r3, #16
 8004792:	d003      	beq.n	800479c <HAL_I2C_EV_IRQHandler+0x38>
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	2b40      	cmp	r3, #64	@ 0x40
 8004798:	f040 80c1 	bne.w	800491e <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	699b      	ldr	r3, [r3, #24]
 80047a2:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10d      	bne.n	80047d2 <HAL_I2C_EV_IRQHandler+0x6e>
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80047bc:	d003      	beq.n	80047c6 <HAL_I2C_EV_IRQHandler+0x62>
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80047c4:	d101      	bne.n	80047ca <HAL_I2C_EV_IRQHandler+0x66>
 80047c6:	2301      	movs	r3, #1
 80047c8:	e000      	b.n	80047cc <HAL_I2C_EV_IRQHandler+0x68>
 80047ca:	2300      	movs	r3, #0
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f000 8132 	beq.w	8004a36 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f003 0301 	and.w	r3, r3, #1
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00c      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0x92>
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	0a5b      	lsrs	r3, r3, #9
 80047e0:	f003 0301 	and.w	r3, r3, #1
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d006      	beq.n	80047f6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	f002 f8f6 	bl	80069da <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fd87 	bl	8005302 <I2C_Master_SB>
 80047f4:	e092      	b.n	800491c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	08db      	lsrs	r3, r3, #3
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_I2C_EV_IRQHandler+0xb2>
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	0a5b      	lsrs	r3, r3, #9
 8004806:	f003 0301 	and.w	r3, r3, #1
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fdfd 	bl	800540e <I2C_Master_ADD10>
 8004814:	e082      	b.n	800491c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004816:	69fb      	ldr	r3, [r7, #28]
 8004818:	085b      	lsrs	r3, r3, #1
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d009      	beq.n	8004836 <HAL_I2C_EV_IRQHandler+0xd2>
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	0a5b      	lsrs	r3, r3, #9
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f000 fe17 	bl	8005462 <I2C_Master_ADDR>
 8004834:	e072      	b.n	800491c <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004836:	69bb      	ldr	r3, [r7, #24]
 8004838:	089b      	lsrs	r3, r3, #2
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03b      	beq.n	80048ba <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800484c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004850:	f000 80f3 	beq.w	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	09db      	lsrs	r3, r3, #7
 8004858:	f003 0301 	and.w	r3, r3, #1
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00f      	beq.n	8004880 <HAL_I2C_EV_IRQHandler+0x11c>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	0a9b      	lsrs	r3, r3, #10
 8004864:	f003 0301 	and.w	r3, r3, #1
 8004868:	2b00      	cmp	r3, #0
 800486a:	d009      	beq.n	8004880 <HAL_I2C_EV_IRQHandler+0x11c>
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	089b      	lsrs	r3, r3, #2
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b00      	cmp	r3, #0
 8004876:	d103      	bne.n	8004880 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004878:	6878      	ldr	r0, [r7, #4]
 800487a:	f000 f9df 	bl	8004c3c <I2C_MasterTransmit_TXE>
 800487e:	e04d      	b.n	800491c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	089b      	lsrs	r3, r3, #2
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80d6 	beq.w	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	0a5b      	lsrs	r3, r3, #9
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	f000 80cf 	beq.w	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800489c:	7bbb      	ldrb	r3, [r7, #14]
 800489e:	2b21      	cmp	r3, #33	@ 0x21
 80048a0:	d103      	bne.n	80048aa <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa66 	bl	8004d74 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048a8:	e0c7      	b.n	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80048aa:	7bfb      	ldrb	r3, [r7, #15]
 80048ac:	2b40      	cmp	r3, #64	@ 0x40
 80048ae:	f040 80c4 	bne.w	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fad4 	bl	8004e60 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048b8:	e0bf      	b.n	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80048c8:	f000 80b7 	beq.w	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	099b      	lsrs	r3, r3, #6
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00f      	beq.n	80048f8 <HAL_I2C_EV_IRQHandler+0x194>
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	0a9b      	lsrs	r3, r3, #10
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d009      	beq.n	80048f8 <HAL_I2C_EV_IRQHandler+0x194>
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	f003 0301 	and.w	r3, r3, #1
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d103      	bne.n	80048f8 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 fb4d 	bl	8004f90 <I2C_MasterReceive_RXNE>
 80048f6:	e011      	b.n	800491c <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	089b      	lsrs	r3, r3, #2
 80048fc:	f003 0301 	and.w	r3, r3, #1
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 809a 	beq.w	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	0a5b      	lsrs	r3, r3, #9
 800490a:	f003 0301 	and.w	r3, r3, #1
 800490e:	2b00      	cmp	r3, #0
 8004910:	f000 8093 	beq.w	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f000 fc03 	bl	8005120 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491a:	e08e      	b.n	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
 800491c:	e08d      	b.n	8004a3a <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	2b00      	cmp	r3, #0
 8004924:	d004      	beq.n	8004930 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	61fb      	str	r3, [r7, #28]
 800492e:	e007      	b.n	8004940 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	699b      	ldr	r3, [r3, #24]
 8004936:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	f003 0301 	and.w	r3, r3, #1
 8004948:	2b00      	cmp	r3, #0
 800494a:	d012      	beq.n	8004972 <HAL_I2C_EV_IRQHandler+0x20e>
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	0a5b      	lsrs	r3, r3, #9
 8004950:	f003 0301 	and.w	r3, r3, #1
 8004954:	2b00      	cmp	r3, #0
 8004956:	d00c      	beq.n	8004972 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495c:	2b00      	cmp	r3, #0
 800495e:	d003      	beq.n	8004968 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004968:	69b9      	ldr	r1, [r7, #24]
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 ffc8 	bl	8005900 <I2C_Slave_ADDR>
 8004970:	e066      	b.n	8004a40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	091b      	lsrs	r3, r3, #4
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d009      	beq.n	8004992 <HAL_I2C_EV_IRQHandler+0x22e>
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	0a5b      	lsrs	r3, r3, #9
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d003      	beq.n	8004992 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f001 f802 	bl	8005994 <I2C_Slave_STOPF>
 8004990:	e056      	b.n	8004a40 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004992:	7bbb      	ldrb	r3, [r7, #14]
 8004994:	2b21      	cmp	r3, #33	@ 0x21
 8004996:	d002      	beq.n	800499e <HAL_I2C_EV_IRQHandler+0x23a>
 8004998:	7bbb      	ldrb	r3, [r7, #14]
 800499a:	2b29      	cmp	r3, #41	@ 0x29
 800499c:	d125      	bne.n	80049ea <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	09db      	lsrs	r3, r3, #7
 80049a2:	f003 0301 	and.w	r3, r3, #1
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d00f      	beq.n	80049ca <HAL_I2C_EV_IRQHandler+0x266>
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	0a9b      	lsrs	r3, r3, #10
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_I2C_EV_IRQHandler+0x266>
 80049b6:	69fb      	ldr	r3, [r7, #28]
 80049b8:	089b      	lsrs	r3, r3, #2
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fede 	bl	8005784 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049c8:	e039      	b.n	8004a3e <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	089b      	lsrs	r3, r3, #2
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d033      	beq.n	8004a3e <HAL_I2C_EV_IRQHandler+0x2da>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	0a5b      	lsrs	r3, r3, #9
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d02d      	beq.n	8004a3e <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 ff0b 	bl	80057fe <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049e8:	e029      	b.n	8004a3e <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	099b      	lsrs	r3, r3, #6
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00f      	beq.n	8004a16 <HAL_I2C_EV_IRQHandler+0x2b2>
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	0a9b      	lsrs	r3, r3, #10
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d009      	beq.n	8004a16 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	089b      	lsrs	r3, r3, #2
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d103      	bne.n	8004a16 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 ff16 	bl	8005840 <I2C_SlaveReceive_RXNE>
 8004a14:	e014      	b.n	8004a40 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	089b      	lsrs	r3, r3, #2
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00e      	beq.n	8004a40 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	0a5b      	lsrs	r3, r3, #9
 8004a26:	f003 0301 	and.w	r3, r3, #1
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d008      	beq.n	8004a40 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 ff44 	bl	80058bc <I2C_SlaveReceive_BTF>
 8004a34:	e004      	b.n	8004a40 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004a36:	bf00      	nop
 8004a38:	e002      	b.n	8004a40 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a3a:	bf00      	nop
 8004a3c:	e000      	b.n	8004a40 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a3e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b08a      	sub	sp, #40	@ 0x28
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	695b      	ldr	r3, [r3, #20]
 8004a54:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004a68:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a6a:	6a3b      	ldr	r3, [r7, #32]
 8004a6c:	0a1b      	lsrs	r3, r3, #8
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00e      	beq.n	8004a94 <HAL_I2C_ER_IRQHandler+0x4e>
 8004a76:	69fb      	ldr	r3, [r7, #28]
 8004a78:	0a1b      	lsrs	r3, r3, #8
 8004a7a:	f003 0301 	and.w	r3, r3, #1
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d008      	beq.n	8004a94 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004a92:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	0a5b      	lsrs	r3, r3, #9
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00e      	beq.n	8004abe <HAL_I2C_ER_IRQHandler+0x78>
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	0a1b      	lsrs	r3, r3, #8
 8004aa4:	f003 0301 	and.w	r3, r3, #1
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d008      	beq.n	8004abe <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aae:	f043 0302 	orr.w	r3, r3, #2
 8004ab2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004abc:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	0a9b      	lsrs	r3, r3, #10
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d03f      	beq.n	8004b4a <HAL_I2C_ER_IRQHandler+0x104>
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	0a1b      	lsrs	r3, r3, #8
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d039      	beq.n	8004b4a <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004ad6:	7efb      	ldrb	r3, [r7, #27]
 8004ad8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ade:	b29b      	uxth	r3, r3
 8004ae0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ae8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aee:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004af0:	7ebb      	ldrb	r3, [r7, #26]
 8004af2:	2b20      	cmp	r3, #32
 8004af4:	d112      	bne.n	8004b1c <HAL_I2C_ER_IRQHandler+0xd6>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10f      	bne.n	8004b1c <HAL_I2C_ER_IRQHandler+0xd6>
 8004afc:	7cfb      	ldrb	r3, [r7, #19]
 8004afe:	2b21      	cmp	r3, #33	@ 0x21
 8004b00:	d008      	beq.n	8004b14 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004b02:	7cfb      	ldrb	r3, [r7, #19]
 8004b04:	2b29      	cmp	r3, #41	@ 0x29
 8004b06:	d005      	beq.n	8004b14 <HAL_I2C_ER_IRQHandler+0xce>
 8004b08:	7cfb      	ldrb	r3, [r7, #19]
 8004b0a:	2b28      	cmp	r3, #40	@ 0x28
 8004b0c:	d106      	bne.n	8004b1c <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b21      	cmp	r3, #33	@ 0x21
 8004b12:	d103      	bne.n	8004b1c <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f001 f86d 	bl	8005bf4 <I2C_Slave_AF>
 8004b1a:	e016      	b.n	8004b4a <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b24:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b28:	f043 0304 	orr.w	r3, r3, #4
 8004b2c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004b2e:	7efb      	ldrb	r3, [r7, #27]
 8004b30:	2b10      	cmp	r3, #16
 8004b32:	d002      	beq.n	8004b3a <HAL_I2C_ER_IRQHandler+0xf4>
 8004b34:	7efb      	ldrb	r3, [r7, #27]
 8004b36:	2b40      	cmp	r3, #64	@ 0x40
 8004b38:	d107      	bne.n	8004b4a <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b48:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004b4a:	6a3b      	ldr	r3, [r7, #32]
 8004b4c:	0adb      	lsrs	r3, r3, #11
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00e      	beq.n	8004b74 <HAL_I2C_ER_IRQHandler+0x12e>
 8004b56:	69fb      	ldr	r3, [r7, #28]
 8004b58:	0a1b      	lsrs	r3, r3, #8
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d008      	beq.n	8004b74 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	f043 0308 	orr.w	r3, r3, #8
 8004b68:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004b72:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b80:	431a      	orrs	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 f8a8 	bl	8005cdc <I2C_ITError>
  }
}
 8004b8c:	bf00      	nop
 8004b8e:	3728      	adds	r7, #40	@ 0x28
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}

08004b94 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004bb0:	bf00      	nop
 8004bb2:	370c      	adds	r7, #12
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b083      	sub	sp, #12
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004bd8:	bf00      	nop
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b083      	sub	sp, #12
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
 8004bec:	460b      	mov	r3, r1
 8004bee:	70fb      	strb	r3, [r7, #3]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004bf4:	bf00      	nop
 8004bf6:	370c      	adds	r7, #12
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004c30:	bf00      	nop
 8004c32:	370c      	adds	r7, #12
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b084      	sub	sp, #16
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c52:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c58:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d150      	bne.n	8004d04 <I2C_MasterTransmit_TXE+0xc8>
 8004c62:	7bfb      	ldrb	r3, [r7, #15]
 8004c64:	2b21      	cmp	r3, #33	@ 0x21
 8004c66:	d14d      	bne.n	8004d04 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	2b08      	cmp	r3, #8
 8004c6c:	d01d      	beq.n	8004caa <I2C_MasterTransmit_TXE+0x6e>
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d01a      	beq.n	8004caa <I2C_MasterTransmit_TXE+0x6e>
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004c7a:	d016      	beq.n	8004caa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685a      	ldr	r2, [r3, #4]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004c8a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2211      	movs	r2, #17
 8004c90:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2200      	movs	r2, #0
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2220      	movs	r2, #32
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f7ff ff76 	bl	8004b94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ca8:	e060      	b.n	8004d6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004cb8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cc8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2220      	movs	r2, #32
 8004cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b40      	cmp	r3, #64	@ 0x40
 8004ce2:	d107      	bne.n	8004cf4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f7fb fc97 	bl	8000620 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004cf2:	e03b      	b.n	8004d6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cfc:	6878      	ldr	r0, [r7, #4]
 8004cfe:	f7ff ff49 	bl	8004b94 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004d02:	e033      	b.n	8004d6c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004d04:	7bfb      	ldrb	r3, [r7, #15]
 8004d06:	2b21      	cmp	r3, #33	@ 0x21
 8004d08:	d005      	beq.n	8004d16 <I2C_MasterTransmit_TXE+0xda>
 8004d0a:	7bbb      	ldrb	r3, [r7, #14]
 8004d0c:	2b40      	cmp	r3, #64	@ 0x40
 8004d0e:	d12d      	bne.n	8004d6c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b22      	cmp	r3, #34	@ 0x22
 8004d14:	d12a      	bne.n	8004d6c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d108      	bne.n	8004d32 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d2e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004d30:	e01c      	b.n	8004d6c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b40      	cmp	r3, #64	@ 0x40
 8004d3c:	d103      	bne.n	8004d46 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f88e 	bl	8004e60 <I2C_MemoryTransmit_TXE_BTF>
}
 8004d44:	e012      	b.n	8004d6c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d4a:	781a      	ldrb	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d56:	1c5a      	adds	r2, r3, #1
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	3b01      	subs	r3, #1
 8004d64:	b29a      	uxth	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004d6a:	e7ff      	b.n	8004d6c <I2C_MasterTransmit_TXE+0x130>
 8004d6c:	bf00      	nop
 8004d6e:	3710      	adds	r7, #16
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b084      	sub	sp, #16
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d80:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b21      	cmp	r3, #33	@ 0x21
 8004d8c:	d164      	bne.n	8004e58 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d012      	beq.n	8004dbe <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	781a      	ldrb	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004da8:	1c5a      	adds	r2, r3, #1
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004db2:	b29b      	uxth	r3, r3
 8004db4:	3b01      	subs	r3, #1
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004dbc:	e04c      	b.n	8004e58 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b08      	cmp	r3, #8
 8004dc2:	d01d      	beq.n	8004e00 <I2C_MasterTransmit_BTF+0x8c>
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	2b20      	cmp	r3, #32
 8004dc8:	d01a      	beq.n	8004e00 <I2C_MasterTransmit_BTF+0x8c>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004dd0:	d016      	beq.n	8004e00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004de0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	2211      	movs	r2, #17
 8004de6:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004df8:	6878      	ldr	r0, [r7, #4]
 8004dfa:	f7ff fecb 	bl	8004b94 <HAL_I2C_MasterTxCpltCallback>
}
 8004dfe:	e02b      	b.n	8004e58 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	685a      	ldr	r2, [r3, #4]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2220      	movs	r2, #32
 8004e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b40      	cmp	r3, #64	@ 0x40
 8004e38:	d107      	bne.n	8004e4a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7fb fbec 	bl	8000620 <HAL_I2C_MemTxCpltCallback>
}
 8004e48:	e006      	b.n	8004e58 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff fe9e 	bl	8004b94 <HAL_I2C_MasterTxCpltCallback>
}
 8004e58:	bf00      	nop
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e6e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d11d      	bne.n	8004eb4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d10b      	bne.n	8004e98 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e84:	b2da      	uxtb	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e90:	1c9a      	adds	r2, r3, #2
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004e96:	e077      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	121b      	asrs	r3, r3, #8
 8004ea0:	b2da      	uxtb	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eac:	1c5a      	adds	r2, r3, #1
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004eb2:	e069      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d10b      	bne.n	8004ed4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ecc:	1c5a      	adds	r2, r3, #1
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ed2:	e059      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d152      	bne.n	8004f82 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004edc:	7bfb      	ldrb	r3, [r7, #15]
 8004ede:	2b22      	cmp	r3, #34	@ 0x22
 8004ee0:	d10d      	bne.n	8004efe <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004ef0:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004efc:	e044      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f02:	b29b      	uxth	r3, r3
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d015      	beq.n	8004f34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	2b21      	cmp	r3, #33	@ 0x21
 8004f0c:	d112      	bne.n	8004f34 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f12:	781a      	ldrb	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1e:	1c5a      	adds	r2, r3, #1
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f28:	b29b      	uxth	r3, r3
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004f32:	e029      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d124      	bne.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	2b21      	cmp	r3, #33	@ 0x21
 8004f42:	d121      	bne.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f52:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f62:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2200      	movs	r2, #0
 8004f68:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7fb fb50 	bl	8000620 <HAL_I2C_MemTxCpltCallback>
}
 8004f80:	e002      	b.n	8004f88 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fe fff0 	bl	8003f68 <I2C_Flush_DR>
}
 8004f88:	bf00      	nop
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b22      	cmp	r3, #34	@ 0x22
 8004fa2:	f040 80b9 	bne.w	8005118 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004faa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	2b03      	cmp	r3, #3
 8004fb8:	d921      	bls.n	8004ffe <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	b29a      	uxth	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	2b03      	cmp	r3, #3
 8004fe8:	f040 8096 	bne.w	8005118 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	685a      	ldr	r2, [r3, #4]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ffa:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004ffc:	e08c      	b.n	8005118 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005002:	2b02      	cmp	r3, #2
 8005004:	d07f      	beq.n	8005106 <I2C_MasterReceive_RXNE+0x176>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b01      	cmp	r3, #1
 800500a:	d002      	beq.n	8005012 <I2C_MasterReceive_RXNE+0x82>
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d179      	bne.n	8005106 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f001 fc80 	bl	8006918 <I2C_WaitOnSTOPRequestThroughIT>
 8005018:	4603      	mov	r3, r0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d14c      	bne.n	80050b8 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800502c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800503c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800505a:	b29b      	uxth	r3, r3
 800505c:	3b01      	subs	r3, #1
 800505e:	b29a      	uxth	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2220      	movs	r2, #32
 8005068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005072:	b2db      	uxtb	r3, r3
 8005074:	2b40      	cmp	r3, #64	@ 0x40
 8005076:	d10a      	bne.n	800508e <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f7fb fada 	bl	8000640 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800508c:	e044      	b.n	8005118 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2b08      	cmp	r3, #8
 800509a:	d002      	beq.n	80050a2 <I2C_MasterReceive_RXNE+0x112>
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d103      	bne.n	80050aa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	631a      	str	r2, [r3, #48]	@ 0x30
 80050a8:	e002      	b.n	80050b0 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2212      	movs	r2, #18
 80050ae:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f7ff fd79 	bl	8004ba8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80050b6:	e02f      	b.n	8005118 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685a      	ldr	r2, [r3, #4]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80050c6:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	691a      	ldr	r2, [r3, #16]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050da:	1c5a      	adds	r2, r3, #1
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	3b01      	subs	r3, #1
 80050e8:	b29a      	uxth	r2, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f7ff fd88 	bl	8004c14 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005104:	e008      	b.n	8005118 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005114:	605a      	str	r2, [r3, #4]
}
 8005116:	e7ff      	b.n	8005118 <I2C_MasterReceive_RXNE+0x188>
 8005118:	bf00      	nop
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800512c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005132:	b29b      	uxth	r3, r3
 8005134:	2b04      	cmp	r3, #4
 8005136:	d11b      	bne.n	8005170 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005146:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	691a      	ldr	r2, [r3, #16]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	1c5a      	adds	r2, r3, #1
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	3b01      	subs	r3, #1
 8005168:	b29a      	uxth	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800516e:	e0c4      	b.n	80052fa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	2b03      	cmp	r3, #3
 8005178:	d129      	bne.n	80051ce <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005188:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2b04      	cmp	r3, #4
 800518e:	d00a      	beq.n	80051a6 <I2C_MasterReceive_BTF+0x86>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2b02      	cmp	r3, #2
 8005194:	d007      	beq.n	80051a6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b0:	b2d2      	uxtb	r2, r2
 80051b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051b8:	1c5a      	adds	r2, r3, #1
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051c2:	b29b      	uxth	r3, r3
 80051c4:	3b01      	subs	r3, #1
 80051c6:	b29a      	uxth	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80051cc:	e095      	b.n	80052fa <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b02      	cmp	r3, #2
 80051d6:	d17d      	bne.n	80052d4 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2b01      	cmp	r3, #1
 80051dc:	d002      	beq.n	80051e4 <I2C_MasterReceive_BTF+0xc4>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2b10      	cmp	r3, #16
 80051e2:	d108      	bne.n	80051f6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051f2:	601a      	str	r2, [r3, #0]
 80051f4:	e016      	b.n	8005224 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2b04      	cmp	r3, #4
 80051fa:	d002      	beq.n	8005202 <I2C_MasterReceive_BTF+0xe2>
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2b02      	cmp	r3, #2
 8005200:	d108      	bne.n	8005214 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	e007      	b.n	8005224 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005222:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	691a      	ldr	r2, [r3, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522e:	b2d2      	uxtb	r2, r2
 8005230:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005236:	1c5a      	adds	r2, r3, #1
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	691a      	ldr	r2, [r3, #16]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005254:	b2d2      	uxtb	r2, r2
 8005256:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800525c:	1c5a      	adds	r2, r3, #1
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29a      	uxth	r2, r3
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	685a      	ldr	r2, [r3, #4]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800527e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2220      	movs	r2, #32
 8005284:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b40      	cmp	r3, #64	@ 0x40
 8005292:	d10a      	bne.n	80052aa <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2200      	movs	r2, #0
 8005298:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80052a2:	6878      	ldr	r0, [r7, #4]
 80052a4:	f7fb f9cc 	bl	8000640 <HAL_I2C_MemRxCpltCallback>
}
 80052a8:	e027      	b.n	80052fa <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b08      	cmp	r3, #8
 80052b6:	d002      	beq.n	80052be <I2C_MasterReceive_BTF+0x19e>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d103      	bne.n	80052c6 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2200      	movs	r2, #0
 80052c2:	631a      	str	r2, [r3, #48]	@ 0x30
 80052c4:	e002      	b.n	80052cc <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2212      	movs	r2, #18
 80052ca:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f7ff fc6b 	bl	8004ba8 <HAL_I2C_MasterRxCpltCallback>
}
 80052d2:	e012      	b.n	80052fa <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052de:	b2d2      	uxtb	r2, r2
 80052e0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052e6:	1c5a      	adds	r2, r3, #1
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052f0:	b29b      	uxth	r3, r3
 80052f2:	3b01      	subs	r3, #1
 80052f4:	b29a      	uxth	r2, r3
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80052fa:	bf00      	nop
 80052fc:	3710      	adds	r7, #16
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005302:	b480      	push	{r7}
 8005304:	b083      	sub	sp, #12
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b40      	cmp	r3, #64	@ 0x40
 8005314:	d117      	bne.n	8005346 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800531a:	2b00      	cmp	r3, #0
 800531c:	d109      	bne.n	8005332 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005322:	b2db      	uxtb	r3, r3
 8005324:	461a      	mov	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800532e:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005330:	e067      	b.n	8005402 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005336:	b2db      	uxtb	r3, r3
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	b2da      	uxtb	r2, r3
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	611a      	str	r2, [r3, #16]
}
 8005344:	e05d      	b.n	8005402 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	691b      	ldr	r3, [r3, #16]
 800534a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800534e:	d133      	bne.n	80053b8 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005356:	b2db      	uxtb	r3, r3
 8005358:	2b21      	cmp	r3, #33	@ 0x21
 800535a:	d109      	bne.n	8005370 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005360:	b2db      	uxtb	r3, r3
 8005362:	461a      	mov	r2, r3
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800536c:	611a      	str	r2, [r3, #16]
 800536e:	e008      	b.n	8005382 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005374:	b2db      	uxtb	r3, r3
 8005376:	f043 0301 	orr.w	r3, r3, #1
 800537a:	b2da      	uxtb	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <I2C_Master_SB+0x92>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800538e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005390:	2b00      	cmp	r3, #0
 8005392:	d108      	bne.n	80053a6 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005398:	2b00      	cmp	r3, #0
 800539a:	d032      	beq.n	8005402 <I2C_Master_SB+0x100>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d02d      	beq.n	8005402 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	685a      	ldr	r2, [r3, #4]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053b4:	605a      	str	r2, [r3, #4]
}
 80053b6:	e024      	b.n	8005402 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10e      	bne.n	80053de <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053c4:	b29b      	uxth	r3, r3
 80053c6:	11db      	asrs	r3, r3, #7
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	f003 0306 	and.w	r3, r3, #6
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	f063 030f 	orn	r3, r3, #15
 80053d4:	b2da      	uxtb	r2, r3
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	611a      	str	r2, [r3, #16]
}
 80053dc:	e011      	b.n	8005402 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d10d      	bne.n	8005402 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	11db      	asrs	r3, r3, #7
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	f003 0306 	and.w	r3, r3, #6
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	f063 030e 	orn	r3, r3, #14
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	611a      	str	r2, [r3, #16]
}
 8005402:	bf00      	nop
 8005404:	370c      	adds	r7, #12
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr

0800540e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800540e:	b480      	push	{r7}
 8005410:	b083      	sub	sp, #12
 8005412:	af00      	add	r7, sp, #0
 8005414:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541a:	b2da      	uxtb	r2, r3
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <I2C_Master_ADD10+0x26>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800542e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005430:	2b00      	cmp	r3, #0
 8005432:	d108      	bne.n	8005446 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005438:	2b00      	cmp	r3, #0
 800543a:	d00c      	beq.n	8005456 <I2C_Master_ADD10+0x48>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005442:	2b00      	cmp	r3, #0
 8005444:	d007      	beq.n	8005456 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685a      	ldr	r2, [r3, #4]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005454:	605a      	str	r2, [r3, #4]
  }
}
 8005456:	bf00      	nop
 8005458:	370c      	adds	r7, #12
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr

08005462 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005462:	b480      	push	{r7}
 8005464:	b091      	sub	sp, #68	@ 0x44
 8005466:	af00      	add	r7, sp, #0
 8005468:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005470:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005478:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800547e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b22      	cmp	r3, #34	@ 0x22
 800548a:	f040 8169 	bne.w	8005760 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10f      	bne.n	80054b6 <I2C_Master_ADDR+0x54>
 8005496:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800549a:	2b40      	cmp	r3, #64	@ 0x40
 800549c:	d10b      	bne.n	80054b6 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800549e:	2300      	movs	r3, #0
 80054a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695b      	ldr	r3, [r3, #20]
 80054a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	699b      	ldr	r3, [r3, #24]
 80054b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80054b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054b4:	e160      	b.n	8005778 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d11d      	bne.n	80054fa <I2C_Master_ADDR+0x98>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80054c6:	d118      	bne.n	80054fa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c8:	2300      	movs	r3, #0
 80054ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80054dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681a      	ldr	r2, [r3, #0]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054ec:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054f2:	1c5a      	adds	r2, r3, #1
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	651a      	str	r2, [r3, #80]	@ 0x50
 80054f8:	e13e      	b.n	8005778 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054fe:	b29b      	uxth	r3, r3
 8005500:	2b00      	cmp	r3, #0
 8005502:	d113      	bne.n	800552c <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005504:	2300      	movs	r3, #0
 8005506:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	695b      	ldr	r3, [r3, #20]
 800550e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	699b      	ldr	r3, [r3, #24]
 8005516:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005518:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	681a      	ldr	r2, [r3, #0]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005528:	601a      	str	r2, [r3, #0]
 800552a:	e115      	b.n	8005758 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005530:	b29b      	uxth	r3, r3
 8005532:	2b01      	cmp	r3, #1
 8005534:	f040 808a 	bne.w	800564c <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800553e:	d137      	bne.n	80055b0 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800554e:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685b      	ldr	r3, [r3, #4]
 8005556:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800555a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800555e:	d113      	bne.n	8005588 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800556e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005570:	2300      	movs	r3, #0
 8005572:	627b      	str	r3, [r7, #36]	@ 0x24
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	627b      	str	r3, [r7, #36]	@ 0x24
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	627b      	str	r3, [r7, #36]	@ 0x24
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	e0e7      	b.n	8005758 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005588:	2300      	movs	r3, #0
 800558a:	623b      	str	r3, [r7, #32]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	623b      	str	r3, [r7, #32]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	699b      	ldr	r3, [r3, #24]
 800559a:	623b      	str	r3, [r7, #32]
 800559c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ac:	601a      	str	r2, [r3, #0]
 80055ae:	e0d3      	b.n	8005758 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80055b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b2:	2b08      	cmp	r3, #8
 80055b4:	d02e      	beq.n	8005614 <I2C_Master_ADDR+0x1b2>
 80055b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b8:	2b20      	cmp	r3, #32
 80055ba:	d02b      	beq.n	8005614 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80055bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055be:	2b12      	cmp	r3, #18
 80055c0:	d102      	bne.n	80055c8 <I2C_Master_ADDR+0x166>
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d125      	bne.n	8005614 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d00e      	beq.n	80055ec <I2C_Master_ADDR+0x18a>
 80055ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d0:	2b02      	cmp	r3, #2
 80055d2:	d00b      	beq.n	80055ec <I2C_Master_ADDR+0x18a>
 80055d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d6:	2b10      	cmp	r3, #16
 80055d8:	d008      	beq.n	80055ec <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	e007      	b.n	80055fc <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80055fa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055fc:	2300      	movs	r3, #0
 80055fe:	61fb      	str	r3, [r7, #28]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	695b      	ldr	r3, [r3, #20]
 8005606:	61fb      	str	r3, [r7, #28]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	699b      	ldr	r3, [r3, #24]
 800560e:	61fb      	str	r3, [r7, #28]
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	e0a1      	b.n	8005758 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005622:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005624:	2300      	movs	r3, #0
 8005626:	61bb      	str	r3, [r7, #24]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	61bb      	str	r3, [r7, #24]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	61bb      	str	r3, [r7, #24]
 8005638:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e085      	b.n	8005758 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005650:	b29b      	uxth	r3, r3
 8005652:	2b02      	cmp	r3, #2
 8005654:	d14d      	bne.n	80056f2 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005658:	2b04      	cmp	r3, #4
 800565a:	d016      	beq.n	800568a <I2C_Master_ADDR+0x228>
 800565c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565e:	2b02      	cmp	r3, #2
 8005660:	d013      	beq.n	800568a <I2C_Master_ADDR+0x228>
 8005662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005664:	2b10      	cmp	r3, #16
 8005666:	d010      	beq.n	800568a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005676:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005686:	601a      	str	r2, [r3, #0]
 8005688:	e007      	b.n	800569a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681a      	ldr	r2, [r3, #0]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005698:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056a8:	d117      	bne.n	80056da <I2C_Master_ADDR+0x278>
 80056aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ac:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056b0:	d00b      	beq.n	80056ca <I2C_Master_ADDR+0x268>
 80056b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d008      	beq.n	80056ca <I2C_Master_ADDR+0x268>
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	2b08      	cmp	r3, #8
 80056bc:	d005      	beq.n	80056ca <I2C_Master_ADDR+0x268>
 80056be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d002      	beq.n	80056ca <I2C_Master_ADDR+0x268>
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	2b20      	cmp	r3, #32
 80056c8:	d107      	bne.n	80056da <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80056d8:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056da:	2300      	movs	r3, #0
 80056dc:	617b      	str	r3, [r7, #20]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	617b      	str	r3, [r7, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	617b      	str	r3, [r7, #20]
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	e032      	b.n	8005758 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005700:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800570c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005710:	d117      	bne.n	8005742 <I2C_Master_ADDR+0x2e0>
 8005712:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005714:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005718:	d00b      	beq.n	8005732 <I2C_Master_ADDR+0x2d0>
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	2b01      	cmp	r3, #1
 800571e:	d008      	beq.n	8005732 <I2C_Master_ADDR+0x2d0>
 8005720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005722:	2b08      	cmp	r3, #8
 8005724:	d005      	beq.n	8005732 <I2C_Master_ADDR+0x2d0>
 8005726:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005728:	2b10      	cmp	r3, #16
 800572a:	d002      	beq.n	8005732 <I2C_Master_ADDR+0x2d0>
 800572c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572e:	2b20      	cmp	r3, #32
 8005730:	d107      	bne.n	8005742 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005740:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	695b      	ldr	r3, [r3, #20]
 800574c:	613b      	str	r3, [r7, #16]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	699b      	ldr	r3, [r3, #24]
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800575e:	e00b      	b.n	8005778 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005760:	2300      	movs	r3, #0
 8005762:	60fb      	str	r3, [r7, #12]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	60fb      	str	r3, [r7, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	60fb      	str	r3, [r7, #12]
 8005774:	68fb      	ldr	r3, [r7, #12]
}
 8005776:	e7ff      	b.n	8005778 <I2C_Master_ADDR+0x316>
 8005778:	bf00      	nop
 800577a:	3744      	adds	r7, #68	@ 0x44
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b084      	sub	sp, #16
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005792:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005798:	b29b      	uxth	r3, r3
 800579a:	2b00      	cmp	r3, #0
 800579c:	d02b      	beq.n	80057f6 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a2:	781a      	ldrb	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057ae:	1c5a      	adds	r2, r3, #1
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	3b01      	subs	r3, #1
 80057bc:	b29a      	uxth	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d114      	bne.n	80057f6 <I2C_SlaveTransmit_TXE+0x72>
 80057cc:	7bfb      	ldrb	r3, [r7, #15]
 80057ce:	2b29      	cmp	r3, #41	@ 0x29
 80057d0:	d111      	bne.n	80057f6 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057e0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2221      	movs	r2, #33	@ 0x21
 80057e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2228      	movs	r2, #40	@ 0x28
 80057ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80057f0:	6878      	ldr	r0, [r7, #4]
 80057f2:	f7ff f9e3 	bl	8004bbc <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80057f6:	bf00      	nop
 80057f8:	3710      	adds	r7, #16
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}

080057fe <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80057fe:	b480      	push	{r7}
 8005800:	b083      	sub	sp, #12
 8005802:	af00      	add	r7, sp, #0
 8005804:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800580a:	b29b      	uxth	r3, r3
 800580c:	2b00      	cmp	r3, #0
 800580e:	d011      	beq.n	8005834 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005814:	781a      	ldrb	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005820:	1c5a      	adds	r2, r3, #1
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582a:	b29b      	uxth	r3, r3
 800582c:	3b01      	subs	r3, #1
 800582e:	b29a      	uxth	r2, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005834:	bf00      	nop
 8005836:	370c      	adds	r7, #12
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800584e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b00      	cmp	r3, #0
 8005858:	d02c      	beq.n	80058b4 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005864:	b2d2      	uxtb	r2, r2
 8005866:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800586c:	1c5a      	adds	r2, r3, #1
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005876:	b29b      	uxth	r3, r3
 8005878:	3b01      	subs	r3, #1
 800587a:	b29a      	uxth	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005884:	b29b      	uxth	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d114      	bne.n	80058b4 <I2C_SlaveReceive_RXNE+0x74>
 800588a:	7bfb      	ldrb	r3, [r7, #15]
 800588c:	2b2a      	cmp	r3, #42	@ 0x2a
 800588e:	d111      	bne.n	80058b4 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800589e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2222      	movs	r2, #34	@ 0x22
 80058a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2228      	movs	r2, #40	@ 0x28
 80058aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f7ff f98e 	bl	8004bd0 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d012      	beq.n	80058f4 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	691a      	ldr	r2, [r3, #16]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d8:	b2d2      	uxtb	r2, r2
 80058da:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058e0:	1c5a      	adds	r2, r3, #1
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	3b01      	subs	r3, #1
 80058ee:	b29a      	uxth	r2, r3
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800590a:	2300      	movs	r3, #0
 800590c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800591a:	2b28      	cmp	r3, #40	@ 0x28
 800591c:	d127      	bne.n	800596e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800592c:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	089b      	lsrs	r3, r3, #2
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	2b00      	cmp	r3, #0
 8005938:	d101      	bne.n	800593e <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800593a:	2301      	movs	r3, #1
 800593c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	09db      	lsrs	r3, r3, #7
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d103      	bne.n	8005952 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	81bb      	strh	r3, [r7, #12]
 8005950:	e002      	b.n	8005958 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699b      	ldr	r3, [r3, #24]
 8005956:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005960:	89ba      	ldrh	r2, [r7, #12]
 8005962:	7bfb      	ldrb	r3, [r7, #15]
 8005964:	4619      	mov	r1, r3
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f7ff f93c 	bl	8004be4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800596c:	e00e      	b.n	800598c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596e:	2300      	movs	r3, #0
 8005970:	60bb      	str	r3, [r7, #8]
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	60bb      	str	r3, [r7, #8]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	60bb      	str	r3, [r7, #8]
 8005982:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800598c:	bf00      	nop
 800598e:	3710      	adds	r7, #16
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}

08005994 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b084      	sub	sp, #16
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059a2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685a      	ldr	r2, [r3, #4]
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80059b2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80059b4:	2300      	movs	r3, #0
 80059b6:	60bb      	str	r3, [r7, #8]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	695b      	ldr	r3, [r3, #20]
 80059be:	60bb      	str	r3, [r7, #8]
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f042 0201 	orr.w	r2, r2, #1
 80059ce:	601a      	str	r2, [r3, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059e0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059f0:	d172      	bne.n	8005ad8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059f2:	7bfb      	ldrb	r3, [r7, #15]
 80059f4:	2b22      	cmp	r3, #34	@ 0x22
 80059f6:	d002      	beq.n	80059fe <I2C_Slave_STOPF+0x6a>
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80059fc:	d135      	bne.n	8005a6a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a1a:	f043 0204 	orr.w	r2, r3, #4
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a30:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fd fea0 	bl	800377c <HAL_DMA_GetState>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d049      	beq.n	8005ad6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a46:	4a69      	ldr	r2, [pc, #420]	@ (8005bec <I2C_Slave_STOPF+0x258>)
 8005a48:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fd fce8 	bl	8003424 <HAL_DMA_Abort_IT>
 8005a54:	4603      	mov	r3, r0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d03d      	beq.n	8005ad6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005a64:	4610      	mov	r0, r2
 8005a66:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005a68:	e035      	b.n	8005ad6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d005      	beq.n	8005a8e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	f043 0204 	orr.w	r2, r3, #4
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a9c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f7fd fe6a 	bl	800377c <HAL_DMA_GetState>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	d014      	beq.n	8005ad8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ab2:	4a4e      	ldr	r2, [pc, #312]	@ (8005bec <I2C_Slave_STOPF+0x258>)
 8005ab4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aba:	4618      	mov	r0, r3
 8005abc:	f7fd fcb2 	bl	8003424 <HAL_DMA_Abort_IT>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005ad0:	4610      	mov	r0, r2
 8005ad2:	4798      	blx	r3
 8005ad4:	e000      	b.n	8005ad8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005ad6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d03e      	beq.n	8005b60 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b04      	cmp	r3, #4
 8005aee:	d112      	bne.n	8005b16 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	691a      	ldr	r2, [r3, #16]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b02:	1c5a      	adds	r2, r3, #1
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	b29a      	uxth	r2, r3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b20:	2b40      	cmp	r3, #64	@ 0x40
 8005b22:	d112      	bne.n	8005b4a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b40:	b29b      	uxth	r3, r3
 8005b42:	3b01      	subs	r3, #1
 8005b44:	b29a      	uxth	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b58:	f043 0204 	orr.w	r2, r3, #4
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d003      	beq.n	8005b70 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f8b7 	bl	8005cdc <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005b6e:	e039      	b.n	8005be4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b70:	7bfb      	ldrb	r3, [r7, #15]
 8005b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b74:	d109      	bne.n	8005b8a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2228      	movs	r2, #40	@ 0x28
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f7ff f823 	bl	8004bd0 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b28      	cmp	r3, #40	@ 0x28
 8005b94:	d111      	bne.n	8005bba <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a15      	ldr	r2, [pc, #84]	@ (8005bf0 <I2C_Slave_STOPF+0x25c>)
 8005b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f7ff f824 	bl	8004c00 <HAL_I2C_ListenCpltCallback>
}
 8005bb8:	e014      	b.n	8005be4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bbe:	2b22      	cmp	r3, #34	@ 0x22
 8005bc0:	d002      	beq.n	8005bc8 <I2C_Slave_STOPF+0x234>
 8005bc2:	7bfb      	ldrb	r3, [r7, #15]
 8005bc4:	2b22      	cmp	r3, #34	@ 0x22
 8005bc6:	d10d      	bne.n	8005be4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fe fff6 	bl	8004bd0 <HAL_I2C_SlaveRxCpltCallback>
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	08006475 	.word	0x08006475
 8005bf0:	ffff0000 	.word	0xffff0000

08005bf4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c02:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c08:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	2b08      	cmp	r3, #8
 8005c0e:	d002      	beq.n	8005c16 <I2C_Slave_AF+0x22>
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b20      	cmp	r3, #32
 8005c14:	d129      	bne.n	8005c6a <I2C_Slave_AF+0x76>
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	2b28      	cmp	r3, #40	@ 0x28
 8005c1a:	d126      	bne.n	8005c6a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a2e      	ldr	r2, [pc, #184]	@ (8005cd8 <I2C_Slave_AF+0xe4>)
 8005c20:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c30:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c3a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c4a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fe ffcc 	bl	8004c00 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005c68:	e031      	b.n	8005cce <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005c6a:	7bfb      	ldrb	r3, [r7, #15]
 8005c6c:	2b21      	cmp	r3, #33	@ 0x21
 8005c6e:	d129      	bne.n	8005cc4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a19      	ldr	r2, [pc, #100]	@ (8005cd8 <I2C_Slave_AF+0xe4>)
 8005c74:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2221      	movs	r2, #33	@ 0x21
 8005c7a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2220      	movs	r2, #32
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	685a      	ldr	r2, [r3, #4]
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005c9a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ca4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cb4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7fe f956 	bl	8003f68 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f7fe ff7d 	bl	8004bbc <HAL_I2C_SlaveTxCpltCallback>
}
 8005cc2:	e004      	b.n	8005cce <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ccc:	615a      	str	r2, [r3, #20]
}
 8005cce:	bf00      	nop
 8005cd0:	3710      	adds	r7, #16
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	ffff0000 	.word	0xffff0000

08005cdc <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b084      	sub	sp, #16
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cf2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005cf4:	7bbb      	ldrb	r3, [r7, #14]
 8005cf6:	2b10      	cmp	r3, #16
 8005cf8:	d002      	beq.n	8005d00 <I2C_ITError+0x24>
 8005cfa:	7bbb      	ldrb	r3, [r7, #14]
 8005cfc:	2b40      	cmp	r3, #64	@ 0x40
 8005cfe:	d10a      	bne.n	8005d16 <I2C_ITError+0x3a>
 8005d00:	7bfb      	ldrb	r3, [r7, #15]
 8005d02:	2b22      	cmp	r3, #34	@ 0x22
 8005d04:	d107      	bne.n	8005d16 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d14:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d16:	7bfb      	ldrb	r3, [r7, #15]
 8005d18:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005d1c:	2b28      	cmp	r3, #40	@ 0x28
 8005d1e:	d107      	bne.n	8005d30 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2228      	movs	r2, #40	@ 0x28
 8005d2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005d2e:	e015      	b.n	8005d5c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d3e:	d00a      	beq.n	8005d56 <I2C_ITError+0x7a>
 8005d40:	7bfb      	ldrb	r3, [r7, #15]
 8005d42:	2b60      	cmp	r3, #96	@ 0x60
 8005d44:	d007      	beq.n	8005d56 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2220      	movs	r2, #32
 8005d4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d66:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d6a:	d162      	bne.n	8005e32 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	685a      	ldr	r2, [r3, #4]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d7a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d80:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d020      	beq.n	8005dcc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d8e:	4a6a      	ldr	r2, [pc, #424]	@ (8005f38 <I2C_ITError+0x25c>)
 8005d90:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7fd fb44 	bl	8003424 <HAL_DMA_Abort_IT>
 8005d9c:	4603      	mov	r3, r0
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 8089 	beq.w	8005eb6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	681a      	ldr	r2, [r3, #0]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f022 0201 	bic.w	r2, r2, #1
 8005db2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2220      	movs	r2, #32
 8005db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4798      	blx	r3
 8005dca:	e074      	b.n	8005eb6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	4a59      	ldr	r2, [pc, #356]	@ (8005f38 <I2C_ITError+0x25c>)
 8005dd2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7fd fb23 	bl	8003424 <HAL_DMA_Abort_IT>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d068      	beq.n	8005eb6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dee:	2b40      	cmp	r3, #64	@ 0x40
 8005df0:	d10b      	bne.n	8005e0a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	691a      	ldr	r2, [r3, #16]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dfc:	b2d2      	uxtb	r2, r2
 8005dfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f022 0201 	bic.w	r2, r2, #1
 8005e18:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2220      	movs	r2, #32
 8005e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4798      	blx	r3
 8005e30:	e041      	b.n	8005eb6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b60      	cmp	r3, #96	@ 0x60
 8005e3c:	d125      	bne.n	8005e8a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2220      	movs	r2, #32
 8005e42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e56:	2b40      	cmp	r3, #64	@ 0x40
 8005e58:	d10b      	bne.n	8005e72 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691a      	ldr	r2, [r3, #16]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e64:	b2d2      	uxtb	r2, r2
 8005e66:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e6c:	1c5a      	adds	r2, r3, #1
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f022 0201 	bic.w	r2, r2, #1
 8005e80:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005e82:	6878      	ldr	r0, [r7, #4]
 8005e84:	f7fe fed0 	bl	8004c28 <HAL_I2C_AbortCpltCallback>
 8005e88:	e015      	b.n	8005eb6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e94:	2b40      	cmp	r3, #64	@ 0x40
 8005e96:	d10b      	bne.n	8005eb0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691a      	ldr	r2, [r3, #16]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fe feaf 	bl	8004c14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005eba:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10e      	bne.n	8005ee4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d109      	bne.n	8005ee4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d007      	beq.n	8005ef4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ef2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005efa:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d113      	bne.n	8005f30 <I2C_ITError+0x254>
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b28      	cmp	r3, #40	@ 0x28
 8005f0c:	d110      	bne.n	8005f30 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	4a0a      	ldr	r2, [pc, #40]	@ (8005f3c <I2C_ITError+0x260>)
 8005f12:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2220      	movs	r2, #32
 8005f1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2200      	movs	r2, #0
 8005f26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fe fe68 	bl	8004c00 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005f30:	bf00      	nop
 8005f32:	3710      	adds	r7, #16
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	08006475 	.word	0x08006475
 8005f3c:	ffff0000 	.word	0xffff0000

08005f40 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af02      	add	r7, sp, #8
 8005f46:	60f8      	str	r0, [r7, #12]
 8005f48:	4608      	mov	r0, r1
 8005f4a:	4611      	mov	r1, r2
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	4603      	mov	r3, r0
 8005f50:	817b      	strh	r3, [r7, #10]
 8005f52:	460b      	mov	r3, r1
 8005f54:	813b      	strh	r3, [r7, #8]
 8005f56:	4613      	mov	r3, r2
 8005f58:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f68:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	9300      	str	r3, [sp, #0]
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fb24 	bl	80065c4 <I2C_WaitOnFlagUntilTimeout>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00d      	beq.n	8005f9e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f90:	d103      	bne.n	8005f9a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005f98:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e05f      	b.n	800605e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005f9e:	897b      	ldrh	r3, [r7, #10]
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005fac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb0:	6a3a      	ldr	r2, [r7, #32]
 8005fb2:	492d      	ldr	r1, [pc, #180]	@ (8006068 <I2C_RequestMemoryWrite+0x128>)
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 fb7f 	bl	80066b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005fba:	4603      	mov	r3, r0
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005fc0:	2301      	movs	r3, #1
 8005fc2:	e04c      	b.n	800605e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	617b      	str	r3, [r7, #20]
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695b      	ldr	r3, [r3, #20]
 8005fce:	617b      	str	r3, [r7, #20]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	617b      	str	r3, [r7, #20]
 8005fd8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005fda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fdc:	6a39      	ldr	r1, [r7, #32]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 fc0a 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d00d      	beq.n	8006006 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fee:	2b04      	cmp	r3, #4
 8005ff0:	d107      	bne.n	8006002 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006000:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e02b      	b.n	800605e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006006:	88fb      	ldrh	r3, [r7, #6]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d105      	bne.n	8006018 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800600c:	893b      	ldrh	r3, [r7, #8]
 800600e:	b2da      	uxtb	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	611a      	str	r2, [r3, #16]
 8006016:	e021      	b.n	800605c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006018:	893b      	ldrh	r3, [r7, #8]
 800601a:	0a1b      	lsrs	r3, r3, #8
 800601c:	b29b      	uxth	r3, r3
 800601e:	b2da      	uxtb	r2, r3
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006028:	6a39      	ldr	r1, [r7, #32]
 800602a:	68f8      	ldr	r0, [r7, #12]
 800602c:	f000 fbe4 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006030:	4603      	mov	r3, r0
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00d      	beq.n	8006052 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603a:	2b04      	cmp	r3, #4
 800603c:	d107      	bne.n	800604e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800604c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e005      	b.n	800605e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006052:	893b      	ldrh	r3, [r7, #8]
 8006054:	b2da      	uxtb	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3718      	adds	r7, #24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}
 8006066:	bf00      	nop
 8006068:	00010002 	.word	0x00010002

0800606c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b088      	sub	sp, #32
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	4608      	mov	r0, r1
 8006076:	4611      	mov	r1, r2
 8006078:	461a      	mov	r2, r3
 800607a:	4603      	mov	r3, r0
 800607c:	817b      	strh	r3, [r7, #10]
 800607e:	460b      	mov	r3, r1
 8006080:	813b      	strh	r3, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006094:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	2200      	movs	r2, #0
 80060ae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 fa86 	bl	80065c4 <I2C_WaitOnFlagUntilTimeout>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00d      	beq.n	80060da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060cc:	d103      	bne.n	80060d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060d4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060d6:	2303      	movs	r3, #3
 80060d8:	e0aa      	b.n	8006230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060da:	897b      	ldrh	r3, [r7, #10]
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	6a3a      	ldr	r2, [r7, #32]
 80060ee:	4952      	ldr	r1, [pc, #328]	@ (8006238 <I2C_RequestMemoryRead+0x1cc>)
 80060f0:	68f8      	ldr	r0, [r7, #12]
 80060f2:	f000 fae1 	bl	80066b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060f6:	4603      	mov	r3, r0
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d001      	beq.n	8006100 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80060fc:	2301      	movs	r3, #1
 80060fe:	e097      	b.n	8006230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006100:	2300      	movs	r3, #0
 8006102:	617b      	str	r3, [r7, #20]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	695b      	ldr	r3, [r3, #20]
 800610a:	617b      	str	r3, [r7, #20]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699b      	ldr	r3, [r3, #24]
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006118:	6a39      	ldr	r1, [r7, #32]
 800611a:	68f8      	ldr	r0, [r7, #12]
 800611c:	f000 fb6c 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00d      	beq.n	8006142 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800612a:	2b04      	cmp	r3, #4
 800612c:	d107      	bne.n	800613e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800613c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800613e:	2301      	movs	r3, #1
 8006140:	e076      	b.n	8006230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006142:	88fb      	ldrh	r3, [r7, #6]
 8006144:	2b01      	cmp	r3, #1
 8006146:	d105      	bne.n	8006154 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006148:	893b      	ldrh	r3, [r7, #8]
 800614a:	b2da      	uxtb	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	611a      	str	r2, [r3, #16]
 8006152:	e021      	b.n	8006198 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006154:	893b      	ldrh	r3, [r7, #8]
 8006156:	0a1b      	lsrs	r3, r3, #8
 8006158:	b29b      	uxth	r3, r3
 800615a:	b2da      	uxtb	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006162:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006164:	6a39      	ldr	r1, [r7, #32]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f000 fb46 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00d      	beq.n	800618e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006176:	2b04      	cmp	r3, #4
 8006178:	d107      	bne.n	800618a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006188:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e050      	b.n	8006230 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800618e:	893b      	ldrh	r3, [r7, #8]
 8006190:	b2da      	uxtb	r2, r3
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006198:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800619a:	6a39      	ldr	r1, [r7, #32]
 800619c:	68f8      	ldr	r0, [r7, #12]
 800619e:	f000 fb2b 	bl	80067f8 <I2C_WaitOnTXEFlagUntilTimeout>
 80061a2:	4603      	mov	r3, r0
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00d      	beq.n	80061c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d107      	bne.n	80061c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681a      	ldr	r2, [r3, #0]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e035      	b.n	8006230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d6:	9300      	str	r3, [sp, #0]
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	2200      	movs	r2, #0
 80061dc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f9ef 	bl	80065c4 <I2C_WaitOnFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00d      	beq.n	8006208 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061fa:	d103      	bne.n	8006204 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006202:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006204:	2303      	movs	r3, #3
 8006206:	e013      	b.n	8006230 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006208:	897b      	ldrh	r3, [r7, #10]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	b2da      	uxtb	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	6a3a      	ldr	r2, [r7, #32]
 800621c:	4906      	ldr	r1, [pc, #24]	@ (8006238 <I2C_RequestMemoryRead+0x1cc>)
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	f000 fa4a 	bl	80066b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006224:	4603      	mov	r3, r0
 8006226:	2b00      	cmp	r3, #0
 8006228:	d001      	beq.n	800622e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	e000      	b.n	8006230 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3718      	adds	r7, #24
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	00010002 	.word	0x00010002

0800623c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b086      	sub	sp, #24
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006248:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006250:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006258:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800625e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	697b      	ldr	r3, [r7, #20]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800626e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006274:	2b00      	cmp	r3, #0
 8006276:	d003      	beq.n	8006280 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800627c:	2200      	movs	r2, #0
 800627e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006284:	2b00      	cmp	r3, #0
 8006286:	d003      	beq.n	8006290 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800628c:	2200      	movs	r2, #0
 800628e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006290:	7cfb      	ldrb	r3, [r7, #19]
 8006292:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8006296:	2b21      	cmp	r3, #33	@ 0x21
 8006298:	d007      	beq.n	80062aa <I2C_DMAXferCplt+0x6e>
 800629a:	7cfb      	ldrb	r3, [r7, #19]
 800629c:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80062a0:	2b22      	cmp	r3, #34	@ 0x22
 80062a2:	d131      	bne.n	8006308 <I2C_DMAXferCplt+0xcc>
 80062a4:	7cbb      	ldrb	r3, [r7, #18]
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d12e      	bne.n	8006308 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062aa:	697b      	ldr	r3, [r7, #20]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	685a      	ldr	r2, [r3, #4]
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80062b8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	2200      	movs	r2, #0
 80062be:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80062c0:	7cfb      	ldrb	r3, [r7, #19]
 80062c2:	2b29      	cmp	r3, #41	@ 0x29
 80062c4:	d10a      	bne.n	80062dc <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062c6:	697b      	ldr	r3, [r7, #20]
 80062c8:	2221      	movs	r2, #33	@ 0x21
 80062ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2228      	movs	r2, #40	@ 0x28
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80062d4:	6978      	ldr	r0, [r7, #20]
 80062d6:	f7fe fc71 	bl	8004bbc <HAL_I2C_SlaveTxCpltCallback>
 80062da:	e00c      	b.n	80062f6 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80062dc:	7cfb      	ldrb	r3, [r7, #19]
 80062de:	2b2a      	cmp	r3, #42	@ 0x2a
 80062e0:	d109      	bne.n	80062f6 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2222      	movs	r2, #34	@ 0x22
 80062e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80062e8:	697b      	ldr	r3, [r7, #20]
 80062ea:	2228      	movs	r2, #40	@ 0x28
 80062ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80062f0:	6978      	ldr	r0, [r7, #20]
 80062f2:	f7fe fc6d 	bl	8004bd0 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	685a      	ldr	r2, [r3, #4]
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006304:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006306:	e074      	b.n	80063f2 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800630e:	b2db      	uxtb	r3, r3
 8006310:	2b00      	cmp	r3, #0
 8006312:	d06e      	beq.n	80063f2 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006318:	b29b      	uxth	r3, r3
 800631a:	2b01      	cmp	r3, #1
 800631c:	d107      	bne.n	800632e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800632c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800633c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006344:	d009      	beq.n	800635a <I2C_DMAXferCplt+0x11e>
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b08      	cmp	r3, #8
 800634a:	d006      	beq.n	800635a <I2C_DMAXferCplt+0x11e>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006352:	d002      	beq.n	800635a <I2C_DMAXferCplt+0x11e>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b20      	cmp	r3, #32
 8006358:	d107      	bne.n	800636a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800635a:	697b      	ldr	r3, [r7, #20]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	697b      	ldr	r3, [r7, #20]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006368:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685a      	ldr	r2, [r3, #4]
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006378:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800637a:	697b      	ldr	r3, [r7, #20]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	685a      	ldr	r2, [r3, #4]
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006388:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2200      	movs	r2, #0
 800638e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 8006398:	6978      	ldr	r0, [r7, #20]
 800639a:	f7fe fc3b 	bl	8004c14 <HAL_I2C_ErrorCallback>
}
 800639e:	e028      	b.n	80063f2 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b40      	cmp	r3, #64	@ 0x40
 80063b2:	d10a      	bne.n	80063ca <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2200      	movs	r2, #0
 80063c0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80063c2:	6978      	ldr	r0, [r7, #20]
 80063c4:	f7fa f93c 	bl	8000640 <HAL_I2C_MemRxCpltCallback>
}
 80063c8:	e013      	b.n	80063f2 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d002      	beq.n	80063de <I2C_DMAXferCplt+0x1a2>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b20      	cmp	r3, #32
 80063dc:	d103      	bne.n	80063e6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	2200      	movs	r2, #0
 80063e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80063e4:	e002      	b.n	80063ec <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2212      	movs	r2, #18
 80063ea:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80063ec:	6978      	ldr	r0, [r7, #20]
 80063ee:	f7fe fbdb 	bl	8004ba8 <HAL_I2C_MasterRxCpltCallback>
}
 80063f2:	bf00      	nop
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006406:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800640c:	2b00      	cmp	r3, #0
 800640e:	d003      	beq.n	8006418 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006414:	2200      	movs	r2, #0
 8006416:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006424:	2200      	movs	r2, #0
 8006426:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f7fd f9b5 	bl	8003798 <HAL_DMA_GetError>
 800642e:	4603      	mov	r3, r0
 8006430:	2b02      	cmp	r3, #2
 8006432:	d01b      	beq.n	800646c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006442:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800645e:	f043 0210 	orr.w	r2, r3, #16
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f7fe fbd4 	bl	8004c14 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800646c:	bf00      	nop
 800646e:	3710      	adds	r7, #16
 8006470:	46bd      	mov	sp, r7
 8006472:	bd80      	pop	{r7, pc}

08006474 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006484:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800648c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800648e:	4b4b      	ldr	r3, [pc, #300]	@ (80065bc <I2C_DMAAbort+0x148>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	08db      	lsrs	r3, r3, #3
 8006494:	4a4a      	ldr	r2, [pc, #296]	@ (80065c0 <I2C_DMAAbort+0x14c>)
 8006496:	fba2 2303 	umull	r2, r3, r2, r3
 800649a:	0a1a      	lsrs	r2, r3, #8
 800649c:	4613      	mov	r3, r2
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	4413      	add	r3, r2
 80064a2:	00da      	lsls	r2, r3, #3
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d106      	bne.n	80064bc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b2:	f043 0220 	orr.w	r2, r3, #32
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80064ba:	e00a      	b.n	80064d2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3b01      	subs	r3, #1
 80064c0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064d0:	d0ea      	beq.n	80064a8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80064de:	2200      	movs	r2, #0
 80064e0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d003      	beq.n	80064f2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064ee:	2200      	movs	r2, #0
 80064f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006500:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2200      	movs	r2, #0
 8006506:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006514:	2200      	movs	r2, #0
 8006516:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006524:	2200      	movs	r2, #0
 8006526:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0201 	bic.w	r2, r2, #1
 8006536:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b60      	cmp	r3, #96	@ 0x60
 8006542:	d10e      	bne.n	8006562 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	2220      	movs	r2, #32
 8006548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2200      	movs	r2, #0
 8006550:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2200      	movs	r2, #0
 8006558:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800655a:	6978      	ldr	r0, [r7, #20]
 800655c:	f7fe fb64 	bl	8004c28 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006560:	e027      	b.n	80065b2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006562:	7cfb      	ldrb	r3, [r7, #19]
 8006564:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006568:	2b28      	cmp	r3, #40	@ 0x28
 800656a:	d117      	bne.n	800659c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	681a      	ldr	r2, [r3, #0]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 0201 	orr.w	r2, r2, #1
 800657a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800658a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2228      	movs	r2, #40	@ 0x28
 8006596:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800659a:	e007      	b.n	80065ac <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2220      	movs	r2, #32
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80065ac:	6978      	ldr	r0, [r7, #20]
 80065ae:	f7fe fb31 	bl	8004c14 <HAL_I2C_ErrorCallback>
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	2000002c 	.word	0x2000002c
 80065c0:	14f8b589 	.word	0x14f8b589

080065c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b084      	sub	sp, #16
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	60f8      	str	r0, [r7, #12]
 80065cc:	60b9      	str	r1, [r7, #8]
 80065ce:	603b      	str	r3, [r7, #0]
 80065d0:	4613      	mov	r3, r2
 80065d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80065d4:	e048      	b.n	8006668 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065dc:	d044      	beq.n	8006668 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065de:	f7fb ffb9 	bl	8002554 <HAL_GetTick>
 80065e2:	4602      	mov	r2, r0
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	1ad3      	subs	r3, r2, r3
 80065e8:	683a      	ldr	r2, [r7, #0]
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d302      	bcc.n	80065f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d139      	bne.n	8006668 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80065f4:	68bb      	ldr	r3, [r7, #8]
 80065f6:	0c1b      	lsrs	r3, r3, #16
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	d10d      	bne.n	800661a <I2C_WaitOnFlagUntilTimeout+0x56>
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	695b      	ldr	r3, [r3, #20]
 8006604:	43da      	mvns	r2, r3
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	4013      	ands	r3, r2
 800660a:	b29b      	uxth	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	bf0c      	ite	eq
 8006610:	2301      	moveq	r3, #1
 8006612:	2300      	movne	r3, #0
 8006614:	b2db      	uxtb	r3, r3
 8006616:	461a      	mov	r2, r3
 8006618:	e00c      	b.n	8006634 <I2C_WaitOnFlagUntilTimeout+0x70>
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	43da      	mvns	r2, r3
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	4013      	ands	r3, r2
 8006626:	b29b      	uxth	r3, r3
 8006628:	2b00      	cmp	r3, #0
 800662a:	bf0c      	ite	eq
 800662c:	2301      	moveq	r3, #1
 800662e:	2300      	movne	r3, #0
 8006630:	b2db      	uxtb	r3, r3
 8006632:	461a      	mov	r2, r3
 8006634:	79fb      	ldrb	r3, [r7, #7]
 8006636:	429a      	cmp	r2, r3
 8006638:	d116      	bne.n	8006668 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2220      	movs	r2, #32
 8006644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006654:	f043 0220 	orr.w	r2, r3, #32
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e023      	b.n	80066b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006668:	68bb      	ldr	r3, [r7, #8]
 800666a:	0c1b      	lsrs	r3, r3, #16
 800666c:	b2db      	uxtb	r3, r3
 800666e:	2b01      	cmp	r3, #1
 8006670:	d10d      	bne.n	800668e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	695b      	ldr	r3, [r3, #20]
 8006678:	43da      	mvns	r2, r3
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	b29b      	uxth	r3, r3
 8006680:	2b00      	cmp	r3, #0
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	e00c      	b.n	80066a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	699b      	ldr	r3, [r3, #24]
 8006694:	43da      	mvns	r2, r3
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	4013      	ands	r3, r2
 800669a:	b29b      	uxth	r3, r3
 800669c:	2b00      	cmp	r3, #0
 800669e:	bf0c      	ite	eq
 80066a0:	2301      	moveq	r3, #1
 80066a2:	2300      	movne	r3, #0
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	461a      	mov	r2, r3
 80066a8:	79fb      	ldrb	r3, [r7, #7]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d093      	beq.n	80065d6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80066ae:	2300      	movs	r3, #0
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3710      	adds	r7, #16
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}

080066b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	60f8      	str	r0, [r7, #12]
 80066c0:	60b9      	str	r1, [r7, #8]
 80066c2:	607a      	str	r2, [r7, #4]
 80066c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80066c6:	e071      	b.n	80067ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	695b      	ldr	r3, [r3, #20]
 80066ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80066d6:	d123      	bne.n	8006720 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80066f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670c:	f043 0204 	orr.w	r2, r3, #4
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e067      	b.n	80067f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006726:	d041      	beq.n	80067ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006728:	f7fb ff14 	bl	8002554 <HAL_GetTick>
 800672c:	4602      	mov	r2, r0
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	429a      	cmp	r2, r3
 8006736:	d302      	bcc.n	800673e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d136      	bne.n	80067ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	0c1b      	lsrs	r3, r3, #16
 8006742:	b2db      	uxtb	r3, r3
 8006744:	2b01      	cmp	r3, #1
 8006746:	d10c      	bne.n	8006762 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	695b      	ldr	r3, [r3, #20]
 800674e:	43da      	mvns	r2, r3
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	4013      	ands	r3, r2
 8006754:	b29b      	uxth	r3, r3
 8006756:	2b00      	cmp	r3, #0
 8006758:	bf14      	ite	ne
 800675a:	2301      	movne	r3, #1
 800675c:	2300      	moveq	r3, #0
 800675e:	b2db      	uxtb	r3, r3
 8006760:	e00b      	b.n	800677a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	699b      	ldr	r3, [r3, #24]
 8006768:	43da      	mvns	r2, r3
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	4013      	ands	r3, r2
 800676e:	b29b      	uxth	r3, r3
 8006770:	2b00      	cmp	r3, #0
 8006772:	bf14      	ite	ne
 8006774:	2301      	movne	r3, #1
 8006776:	2300      	moveq	r3, #0
 8006778:	b2db      	uxtb	r3, r3
 800677a:	2b00      	cmp	r3, #0
 800677c:	d016      	beq.n	80067ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2220      	movs	r2, #32
 8006788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006798:	f043 0220 	orr.w	r2, r3, #32
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e021      	b.n	80067f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	0c1b      	lsrs	r3, r3, #16
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d10c      	bne.n	80067d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	43da      	mvns	r2, r3
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	4013      	ands	r3, r2
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bf14      	ite	ne
 80067c8:	2301      	movne	r3, #1
 80067ca:	2300      	moveq	r3, #0
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	e00b      	b.n	80067e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	43da      	mvns	r2, r3
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	4013      	ands	r3, r2
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	bf14      	ite	ne
 80067e2:	2301      	movne	r3, #1
 80067e4:	2300      	moveq	r3, #0
 80067e6:	b2db      	uxtb	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	f47f af6d 	bne.w	80066c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80067ee:	2300      	movs	r3, #0
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3710      	adds	r7, #16
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}

080067f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	60f8      	str	r0, [r7, #12]
 8006800:	60b9      	str	r1, [r7, #8]
 8006802:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006804:	e034      	b.n	8006870 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f8b8 	bl	800697c <I2C_IsAcknowledgeFailed>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e034      	b.n	8006880 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681c:	d028      	beq.n	8006870 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681e:	f7fb fe99 	bl	8002554 <HAL_GetTick>
 8006822:	4602      	mov	r2, r0
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	1ad3      	subs	r3, r2, r3
 8006828:	68ba      	ldr	r2, [r7, #8]
 800682a:	429a      	cmp	r2, r3
 800682c:	d302      	bcc.n	8006834 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d11d      	bne.n	8006870 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	695b      	ldr	r3, [r3, #20]
 800683a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800683e:	2b80      	cmp	r3, #128	@ 0x80
 8006840:	d016      	beq.n	8006870 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2200      	movs	r2, #0
 8006846:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2200      	movs	r2, #0
 8006854:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800685c:	f043 0220 	orr.w	r2, r3, #32
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2200      	movs	r2, #0
 8006868:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800686c:	2301      	movs	r3, #1
 800686e:	e007      	b.n	8006880 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800687a:	2b80      	cmp	r3, #128	@ 0x80
 800687c:	d1c3      	bne.n	8006806 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800687e:	2300      	movs	r3, #0
}
 8006880:	4618      	mov	r0, r3
 8006882:	3710      	adds	r7, #16
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006894:	e034      	b.n	8006900 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 f870 	bl	800697c <I2C_IsAcknowledgeFailed>
 800689c:	4603      	mov	r3, r0
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d001      	beq.n	80068a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e034      	b.n	8006910 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a6:	68bb      	ldr	r3, [r7, #8]
 80068a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068ac:	d028      	beq.n	8006900 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ae:	f7fb fe51 	bl	8002554 <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	68ba      	ldr	r2, [r7, #8]
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d302      	bcc.n	80068c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d11d      	bne.n	8006900 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b04      	cmp	r3, #4
 80068d0:	d016      	beq.n	8006900 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	2200      	movs	r2, #0
 80068d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ec:	f043 0220 	orr.w	r2, r3, #32
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
 80068fe:	e007      	b.n	8006910 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	695b      	ldr	r3, [r3, #20]
 8006906:	f003 0304 	and.w	r3, r3, #4
 800690a:	2b04      	cmp	r3, #4
 800690c:	d1c3      	bne.n	8006896 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3710      	adds	r7, #16
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006920:	2300      	movs	r3, #0
 8006922:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006924:	4b13      	ldr	r3, [pc, #76]	@ (8006974 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	08db      	lsrs	r3, r3, #3
 800692a:	4a13      	ldr	r2, [pc, #76]	@ (8006978 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800692c:	fba2 2303 	umull	r2, r3, r2, r3
 8006930:	0a1a      	lsrs	r2, r3, #8
 8006932:	4613      	mov	r3, r2
 8006934:	009b      	lsls	r3, r3, #2
 8006936:	4413      	add	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	3b01      	subs	r3, #1
 800693e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d107      	bne.n	8006956 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694a:	f043 0220 	orr.w	r2, r3, #32
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006952:	2301      	movs	r3, #1
 8006954:	e008      	b.n	8006968 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006964:	d0e9      	beq.n	800693a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	2000002c 	.word	0x2000002c
 8006978:	14f8b589 	.word	0x14f8b589

0800697c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800697c:	b480      	push	{r7}
 800697e:	b083      	sub	sp, #12
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	695b      	ldr	r3, [r3, #20]
 800698a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800698e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006992:	d11b      	bne.n	80069cc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800699c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069b8:	f043 0204 	orr.w	r2, r3, #4
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80069c8:	2301      	movs	r3, #1
 80069ca:	e000      	b.n	80069ce <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80069cc:	2300      	movs	r3, #0
}
 80069ce:	4618      	mov	r0, r3
 80069d0:	370c      	adds	r7, #12
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr

080069da <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e6:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80069ea:	d103      	bne.n	80069f4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80069f2:	e007      	b.n	8006a04 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069f8:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80069fc:	d102      	bne.n	8006a04 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	2208      	movs	r2, #8
 8006a02:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b086      	sub	sp, #24
 8006a14:	af02      	add	r7, sp, #8
 8006a16:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d101      	bne.n	8006a22 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	e101      	b.n	8006c26 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d106      	bne.n	8006a42 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f007 fa07 	bl	800de50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2203      	movs	r2, #3
 8006a46:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006a50:	d102      	bne.n	8006a58 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2200      	movs	r2, #0
 8006a56:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f003 fd5e 	bl	800a51e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6818      	ldr	r0, [r3, #0]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7c1a      	ldrb	r2, [r3, #16]
 8006a6a:	f88d 2000 	strb.w	r2, [sp]
 8006a6e:	3304      	adds	r3, #4
 8006a70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006a72:	f003 fc3d 	bl	800a2f0 <USB_CoreInit>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d005      	beq.n	8006a88 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2202      	movs	r2, #2
 8006a80:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e0ce      	b.n	8006c26 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f003 fd56 	bl	800a540 <USB_SetCurrentMode>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d005      	beq.n	8006aa6 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2202      	movs	r2, #2
 8006a9e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e0bf      	b.n	8006c26 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	73fb      	strb	r3, [r7, #15]
 8006aaa:	e04a      	b.n	8006b42 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006aac:	7bfa      	ldrb	r2, [r7, #15]
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	4413      	add	r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	3315      	adds	r3, #21
 8006abc:	2201      	movs	r2, #1
 8006abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006ac0:	7bfa      	ldrb	r2, [r7, #15]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	4413      	add	r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	3314      	adds	r3, #20
 8006ad0:	7bfa      	ldrb	r2, [r7, #15]
 8006ad2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006ad4:	7bfa      	ldrb	r2, [r7, #15]
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	b298      	uxth	r0, r3
 8006ada:	6879      	ldr	r1, [r7, #4]
 8006adc:	4613      	mov	r3, r2
 8006ade:	00db      	lsls	r3, r3, #3
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	440b      	add	r3, r1
 8006ae6:	332e      	adds	r3, #46	@ 0x2e
 8006ae8:	4602      	mov	r2, r0
 8006aea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006aec:	7bfa      	ldrb	r2, [r7, #15]
 8006aee:	6879      	ldr	r1, [r7, #4]
 8006af0:	4613      	mov	r3, r2
 8006af2:	00db      	lsls	r3, r3, #3
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	440b      	add	r3, r1
 8006afa:	3318      	adds	r3, #24
 8006afc:	2200      	movs	r2, #0
 8006afe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006b00:	7bfa      	ldrb	r2, [r7, #15]
 8006b02:	6879      	ldr	r1, [r7, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	00db      	lsls	r3, r3, #3
 8006b08:	4413      	add	r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	440b      	add	r3, r1
 8006b0e:	331c      	adds	r3, #28
 8006b10:	2200      	movs	r2, #0
 8006b12:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006b14:	7bfa      	ldrb	r2, [r7, #15]
 8006b16:	6879      	ldr	r1, [r7, #4]
 8006b18:	4613      	mov	r3, r2
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	4413      	add	r3, r2
 8006b1e:	009b      	lsls	r3, r3, #2
 8006b20:	440b      	add	r3, r1
 8006b22:	3320      	adds	r3, #32
 8006b24:	2200      	movs	r2, #0
 8006b26:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006b28:	7bfa      	ldrb	r2, [r7, #15]
 8006b2a:	6879      	ldr	r1, [r7, #4]
 8006b2c:	4613      	mov	r3, r2
 8006b2e:	00db      	lsls	r3, r3, #3
 8006b30:	4413      	add	r3, r2
 8006b32:	009b      	lsls	r3, r3, #2
 8006b34:	440b      	add	r3, r1
 8006b36:	3324      	adds	r3, #36	@ 0x24
 8006b38:	2200      	movs	r2, #0
 8006b3a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	3301      	adds	r3, #1
 8006b40:	73fb      	strb	r3, [r7, #15]
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	791b      	ldrb	r3, [r3, #4]
 8006b46:	7bfa      	ldrb	r2, [r7, #15]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d3af      	bcc.n	8006aac <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	73fb      	strb	r3, [r7, #15]
 8006b50:	e044      	b.n	8006bdc <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006b52:	7bfa      	ldrb	r2, [r7, #15]
 8006b54:	6879      	ldr	r1, [r7, #4]
 8006b56:	4613      	mov	r3, r2
 8006b58:	00db      	lsls	r3, r3, #3
 8006b5a:	4413      	add	r3, r2
 8006b5c:	009b      	lsls	r3, r3, #2
 8006b5e:	440b      	add	r3, r1
 8006b60:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006b64:	2200      	movs	r2, #0
 8006b66:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006b68:	7bfa      	ldrb	r2, [r7, #15]
 8006b6a:	6879      	ldr	r1, [r7, #4]
 8006b6c:	4613      	mov	r3, r2
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	4413      	add	r3, r2
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	440b      	add	r3, r1
 8006b76:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006b7a:	7bfa      	ldrb	r2, [r7, #15]
 8006b7c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006b7e:	7bfa      	ldrb	r2, [r7, #15]
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	00db      	lsls	r3, r3, #3
 8006b86:	4413      	add	r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006b90:	2200      	movs	r2, #0
 8006b92:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006b94:	7bfa      	ldrb	r2, [r7, #15]
 8006b96:	6879      	ldr	r1, [r7, #4]
 8006b98:	4613      	mov	r3, r2
 8006b9a:	00db      	lsls	r3, r3, #3
 8006b9c:	4413      	add	r3, r2
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	440b      	add	r3, r1
 8006ba2:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006baa:	7bfa      	ldrb	r2, [r7, #15]
 8006bac:	6879      	ldr	r1, [r7, #4]
 8006bae:	4613      	mov	r3, r2
 8006bb0:	00db      	lsls	r3, r3, #3
 8006bb2:	4413      	add	r3, r2
 8006bb4:	009b      	lsls	r3, r3, #2
 8006bb6:	440b      	add	r3, r1
 8006bb8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006bc0:	7bfa      	ldrb	r2, [r7, #15]
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	00db      	lsls	r3, r3, #3
 8006bc8:	4413      	add	r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bd6:	7bfb      	ldrb	r3, [r7, #15]
 8006bd8:	3301      	adds	r3, #1
 8006bda:	73fb      	strb	r3, [r7, #15]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	791b      	ldrb	r3, [r3, #4]
 8006be0:	7bfa      	ldrb	r2, [r7, #15]
 8006be2:	429a      	cmp	r2, r3
 8006be4:	d3b5      	bcc.n	8006b52 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6818      	ldr	r0, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	7c1a      	ldrb	r2, [r3, #16]
 8006bee:	f88d 2000 	strb.w	r2, [sp]
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bf6:	f003 fcef 	bl	800a5d8 <USB_DevInit>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2202      	movs	r2, #2
 8006c04:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e00c      	b.n	8006c26 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f004 fd39 	bl	800b696 <USB_DevDisconnect>

  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_PCD_Start+0x1c>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e022      	b.n	8006c90 <HAL_PCD_Start+0x62>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d009      	beq.n	8006c72 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d105      	bne.n	8006c72 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c6a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4618      	mov	r0, r3
 8006c78:	f003 fc40 	bl	800a4fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4618      	mov	r0, r3
 8006c82:	f004 fce7 	bl	800b654 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3710      	adds	r7, #16
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006c98:	b590      	push	{r4, r7, lr}
 8006c9a:	b08d      	sub	sp, #52	@ 0x34
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f004 fda5 	bl	800b7fe <USB_GetMode>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	f040 848c 	bne.w	80075d4 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f004 fd09 	bl	800b6d8 <USB_ReadInterrupts>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 8482 	beq.w	80075d2 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cd4:	689b      	ldr	r3, [r3, #8]
 8006cd6:	0a1b      	lsrs	r3, r3, #8
 8006cd8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f004 fcf6 	bl	800b6d8 <USB_ReadInterrupts>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f003 0302 	and.w	r3, r3, #2
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d107      	bne.n	8006d06 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	695a      	ldr	r2, [r3, #20]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f002 0202 	and.w	r2, r2, #2
 8006d04:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f004 fce4 	bl	800b6d8 <USB_ReadInterrupts>
 8006d10:	4603      	mov	r3, r0
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b10      	cmp	r3, #16
 8006d18:	d161      	bne.n	8006dde <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	699a      	ldr	r2, [r3, #24]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0210 	bic.w	r2, r2, #16
 8006d28:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	6a1b      	ldr	r3, [r3, #32]
 8006d2e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	f003 020f 	and.w	r2, r3, #15
 8006d36:	4613      	mov	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	4413      	add	r3, r2
 8006d46:	3304      	adds	r3, #4
 8006d48:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006d50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006d54:	d124      	bne.n	8006da0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006d5c:	4013      	ands	r3, r2
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d035      	beq.n	8006dce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	091b      	lsrs	r3, r3, #4
 8006d6a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	461a      	mov	r2, r3
 8006d74:	6a38      	ldr	r0, [r7, #32]
 8006d76:	f004 fb1b 	bl	800b3b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	091b      	lsrs	r3, r3, #4
 8006d82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d86:	441a      	add	r2, r3
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	695a      	ldr	r2, [r3, #20]
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	091b      	lsrs	r3, r3, #4
 8006d94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d98:	441a      	add	r2, r3
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	615a      	str	r2, [r3, #20]
 8006d9e:	e016      	b.n	8006dce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006da6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006daa:	d110      	bne.n	8006dce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006db2:	2208      	movs	r2, #8
 8006db4:	4619      	mov	r1, r3
 8006db6:	6a38      	ldr	r0, [r7, #32]
 8006db8:	f004 fafa 	bl	800b3b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	695a      	ldr	r2, [r3, #20]
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	091b      	lsrs	r3, r3, #4
 8006dc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006dc8:	441a      	add	r2, r3
 8006dca:	697b      	ldr	r3, [r7, #20]
 8006dcc:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	699a      	ldr	r2, [r3, #24]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f042 0210 	orr.w	r2, r2, #16
 8006ddc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4618      	mov	r0, r3
 8006de4:	f004 fc78 	bl	800b6d8 <USB_ReadInterrupts>
 8006de8:	4603      	mov	r3, r0
 8006dea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006dee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006df2:	f040 80a7 	bne.w	8006f44 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006df6:	2300      	movs	r3, #0
 8006df8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f004 fc7d 	bl	800b6fe <USB_ReadDevAllOutEpInterrupt>
 8006e04:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006e06:	e099      	b.n	8006f3c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 808e 	beq.w	8006f30 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e1a:	b2d2      	uxtb	r2, r2
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	4618      	mov	r0, r3
 8006e20:	f004 fca1 	bl	800b766 <USB_ReadDevOutEPInterrupt>
 8006e24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	f003 0301 	and.w	r3, r3, #1
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d00c      	beq.n	8006e4a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e32:	015a      	lsls	r2, r3, #5
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	4413      	add	r3, r2
 8006e38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	2301      	movs	r3, #1
 8006e40:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006e42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 fea3 	bl	8007b90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f003 0308 	and.w	r3, r3, #8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d00c      	beq.n	8006e6e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e56:	015a      	lsls	r2, r3, #5
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	4413      	add	r3, r2
 8006e5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e60:	461a      	mov	r2, r3
 8006e62:	2308      	movs	r3, #8
 8006e64:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006e66:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e68:	6878      	ldr	r0, [r7, #4]
 8006e6a:	f000 ff79 	bl	8007d60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006e6e:	693b      	ldr	r3, [r7, #16]
 8006e70:	f003 0310 	and.w	r3, r3, #16
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d008      	beq.n	8006e8a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7a:	015a      	lsls	r2, r3, #5
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	4413      	add	r3, r2
 8006e80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e84:	461a      	mov	r2, r3
 8006e86:	2310      	movs	r3, #16
 8006e88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006e8a:	693b      	ldr	r3, [r7, #16]
 8006e8c:	f003 0302 	and.w	r3, r3, #2
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d030      	beq.n	8006ef6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e9c:	2b80      	cmp	r3, #128	@ 0x80
 8006e9e:	d109      	bne.n	8006eb4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006ea0:	69fb      	ldr	r3, [r7, #28]
 8006ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	69fa      	ldr	r2, [r7, #28]
 8006eaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006eae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006eb2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006eb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ec2:	687a      	ldr	r2, [r7, #4]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	78db      	ldrb	r3, [r3, #3]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d108      	bne.n	8006ee4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	4619      	mov	r1, r3
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f007 f8b2 	bl	800e048 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	2302      	movs	r3, #2
 8006ef4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	f003 0320 	and.w	r3, r3, #32
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d008      	beq.n	8006f12 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	69fb      	ldr	r3, [r7, #28]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	2320      	movs	r3, #32
 8006f10:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006f12:	693b      	ldr	r3, [r7, #16]
 8006f14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d009      	beq.n	8006f30 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1e:	015a      	lsls	r2, r3, #5
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	4413      	add	r3, r2
 8006f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f28:	461a      	mov	r2, r3
 8006f2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006f2e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	3301      	adds	r3, #1
 8006f34:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8006f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f38:	085b      	lsrs	r3, r3, #1
 8006f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8006f3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	f47f af62 	bne.w	8006e08 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f004 fbc5 	bl	800b6d8 <USB_ReadInterrupts>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006f54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f58:	f040 80db 	bne.w	8007112 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f004 fbe6 	bl	800b732 <USB_ReadDevAllInEpInterrupt>
 8006f66:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006f6c:	e0cd      	b.n	800710a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 80c2 	beq.w	80070fe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f80:	b2d2      	uxtb	r2, r2
 8006f82:	4611      	mov	r1, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f004 fc0c 	bl	800b7a2 <USB_ReadDevInEPInterrupt>
 8006f8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	f003 0301 	and.w	r3, r3, #1
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d057      	beq.n	8007046 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f98:	f003 030f 	and.w	r3, r3, #15
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006faa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	43db      	mvns	r3, r3
 8006fb0:	69f9      	ldr	r1, [r7, #28]
 8006fb2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006fba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fbc:	015a      	lsls	r2, r3, #5
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	2301      	movs	r3, #1
 8006fca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	799b      	ldrb	r3, [r3, #6]
 8006fd0:	2b01      	cmp	r3, #1
 8006fd2:	d132      	bne.n	800703a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006fd4:	6879      	ldr	r1, [r7, #4]
 8006fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fd8:	4613      	mov	r3, r2
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	4413      	add	r3, r2
 8006fde:	009b      	lsls	r3, r3, #2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	3320      	adds	r3, #32
 8006fe4:	6819      	ldr	r1, [r3, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fea:	4613      	mov	r3, r2
 8006fec:	00db      	lsls	r3, r3, #3
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4403      	add	r3, r0
 8006ff4:	331c      	adds	r3, #28
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4419      	add	r1, r3
 8006ffa:	6878      	ldr	r0, [r7, #4]
 8006ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ffe:	4613      	mov	r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	4403      	add	r3, r0
 8007008:	3320      	adds	r3, #32
 800700a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800700c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700e:	2b00      	cmp	r3, #0
 8007010:	d113      	bne.n	800703a <HAL_PCD_IRQHandler+0x3a2>
 8007012:	6879      	ldr	r1, [r7, #4]
 8007014:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007016:	4613      	mov	r3, r2
 8007018:	00db      	lsls	r3, r3, #3
 800701a:	4413      	add	r3, r2
 800701c:	009b      	lsls	r3, r3, #2
 800701e:	440b      	add	r3, r1
 8007020:	3324      	adds	r3, #36	@ 0x24
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d108      	bne.n	800703a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6818      	ldr	r0, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007032:	461a      	mov	r2, r3
 8007034:	2101      	movs	r1, #1
 8007036:	f004 fc13 	bl	800b860 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800703a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800703c:	b2db      	uxtb	r3, r3
 800703e:	4619      	mov	r1, r3
 8007040:	6878      	ldr	r0, [r7, #4]
 8007042:	f006 ff86 	bl	800df52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	f003 0308 	and.w	r3, r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	d008      	beq.n	8007062 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800705c:	461a      	mov	r2, r3
 800705e:	2308      	movs	r3, #8
 8007060:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f003 0310 	and.w	r3, r3, #16
 8007068:	2b00      	cmp	r3, #0
 800706a:	d008      	beq.n	800707e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800706c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706e:	015a      	lsls	r2, r3, #5
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	4413      	add	r3, r2
 8007074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007078:	461a      	mov	r2, r3
 800707a:	2310      	movs	r3, #16
 800707c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800707e:	693b      	ldr	r3, [r7, #16]
 8007080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007084:	2b00      	cmp	r3, #0
 8007086:	d008      	beq.n	800709a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	4413      	add	r3, r2
 8007090:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007094:	461a      	mov	r2, r3
 8007096:	2340      	movs	r3, #64	@ 0x40
 8007098:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d023      	beq.n	80070ec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80070a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070a6:	6a38      	ldr	r0, [r7, #32]
 80070a8:	f003 fbfa 	bl	800a8a0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80070ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070ae:	4613      	mov	r3, r2
 80070b0:	00db      	lsls	r3, r3, #3
 80070b2:	4413      	add	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	3310      	adds	r3, #16
 80070b8:	687a      	ldr	r2, [r7, #4]
 80070ba:	4413      	add	r3, r2
 80070bc:	3304      	adds	r3, #4
 80070be:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	78db      	ldrb	r3, [r3, #3]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d108      	bne.n	80070da <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	2200      	movs	r2, #0
 80070cc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80070ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f006 ffc9 	bl	800e06c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80070da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070dc:	015a      	lsls	r2, r3, #5
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	4413      	add	r3, r2
 80070e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80070e6:	461a      	mov	r2, r3
 80070e8:	2302      	movs	r3, #2
 80070ea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80070f6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f000 fcbd 	bl	8007a78 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	3301      	adds	r3, #1
 8007102:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007104:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007106:	085b      	lsrs	r3, r3, #1
 8007108:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800710a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800710c:	2b00      	cmp	r3, #0
 800710e:	f47f af2e 	bne.w	8006f6e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4618      	mov	r0, r3
 8007118:	f004 fade 	bl	800b6d8 <USB_ReadInterrupts>
 800711c:	4603      	mov	r3, r0
 800711e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007122:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007126:	d122      	bne.n	800716e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	69fa      	ldr	r2, [r7, #28]
 8007132:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007136:	f023 0301 	bic.w	r3, r3, #1
 800713a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8007142:	2b01      	cmp	r3, #1
 8007144:	d108      	bne.n	8007158 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800714e:	2100      	movs	r1, #0
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fea3 	bl	8007e9c <HAL_PCDEx_LPM_Callback>
 8007156:	e002      	b.n	800715e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8007158:	6878      	ldr	r0, [r7, #4]
 800715a:	f006 ff67 	bl	800e02c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	695a      	ldr	r2, [r3, #20]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800716c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4618      	mov	r0, r3
 8007174:	f004 fab0 	bl	800b6d8 <USB_ReadInterrupts>
 8007178:	4603      	mov	r3, r0
 800717a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800717e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007182:	d112      	bne.n	80071aa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f003 0301 	and.w	r3, r3, #1
 8007190:	2b01      	cmp	r3, #1
 8007192:	d102      	bne.n	800719a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f006 ff23 	bl	800dfe0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	695a      	ldr	r2, [r3, #20]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80071a8:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f004 fa92 	bl	800b6d8 <USB_ReadInterrupts>
 80071b4:	4603      	mov	r3, r0
 80071b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80071ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071be:	f040 80b7 	bne.w	8007330 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071d0:	f023 0301 	bic.w	r3, r3, #1
 80071d4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2110      	movs	r1, #16
 80071dc:	4618      	mov	r0, r3
 80071de:	f003 fb5f 	bl	800a8a0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80071e2:	2300      	movs	r3, #0
 80071e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071e6:	e046      	b.n	8007276 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80071e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071ea:	015a      	lsls	r2, r3, #5
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	4413      	add	r3, r2
 80071f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071f4:	461a      	mov	r2, r3
 80071f6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80071fa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80071fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	69fb      	ldr	r3, [r7, #28]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800720c:	0151      	lsls	r1, r2, #5
 800720e:	69fa      	ldr	r2, [r7, #28]
 8007210:	440a      	add	r2, r1
 8007212:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007216:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800721a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800721c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800721e:	015a      	lsls	r2, r3, #5
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	4413      	add	r3, r2
 8007224:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007228:	461a      	mov	r2, r3
 800722a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800722e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	440a      	add	r2, r1
 8007246:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800724a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800724e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007252:	015a      	lsls	r2, r3, #5
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4413      	add	r3, r2
 8007258:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007260:	0151      	lsls	r1, r2, #5
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	440a      	add	r2, r1
 8007266:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800726a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800726e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007272:	3301      	adds	r3, #1
 8007274:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	791b      	ldrb	r3, [r3, #4]
 800727a:	461a      	mov	r2, r3
 800727c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800727e:	4293      	cmp	r3, r2
 8007280:	d3b2      	bcc.n	80071e8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007288:	69db      	ldr	r3, [r3, #28]
 800728a:	69fa      	ldr	r2, [r7, #28]
 800728c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007290:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007294:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	7bdb      	ldrb	r3, [r3, #15]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d016      	beq.n	80072cc <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80072a8:	69fa      	ldr	r2, [r7, #28]
 80072aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072ae:	f043 030b 	orr.w	r3, r3, #11
 80072b2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072be:	69fa      	ldr	r2, [r7, #28]
 80072c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072c4:	f043 030b 	orr.w	r3, r3, #11
 80072c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80072ca:	e015      	b.n	80072f8 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80072cc:	69fb      	ldr	r3, [r7, #28]
 80072ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	69fa      	ldr	r2, [r7, #28]
 80072d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80072de:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80072e2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80072e4:	69fb      	ldr	r3, [r7, #28]
 80072e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ea:	691b      	ldr	r3, [r3, #16]
 80072ec:	69fa      	ldr	r2, [r7, #28]
 80072ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072f2:	f043 030b 	orr.w	r3, r3, #11
 80072f6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007306:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800730a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800731a:	461a      	mov	r2, r3
 800731c:	f004 faa0 	bl	800b860 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	695a      	ldr	r2, [r3, #20]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800732e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4618      	mov	r0, r3
 8007336:	f004 f9cf 	bl	800b6d8 <USB_ReadInterrupts>
 800733a:	4603      	mov	r3, r0
 800733c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007340:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007344:	d123      	bne.n	800738e <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4618      	mov	r0, r3
 800734c:	f004 fa65 	bl	800b81a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4618      	mov	r0, r3
 8007356:	f003 fb1c 	bl	800a992 <USB_GetDevSpeed>
 800735a:	4603      	mov	r3, r0
 800735c:	461a      	mov	r2, r3
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681c      	ldr	r4, [r3, #0]
 8007366:	f001 f9c9 	bl	80086fc <HAL_RCC_GetHCLKFreq>
 800736a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007370:	461a      	mov	r2, r3
 8007372:	4620      	mov	r0, r4
 8007374:	f003 f820 	bl	800a3b8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f006 fe12 	bl	800dfa2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	695a      	ldr	r2, [r3, #20]
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800738c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4618      	mov	r0, r3
 8007394:	f004 f9a0 	bl	800b6d8 <USB_ReadInterrupts>
 8007398:	4603      	mov	r3, r0
 800739a:	f003 0308 	and.w	r3, r3, #8
 800739e:	2b08      	cmp	r3, #8
 80073a0:	d10a      	bne.n	80073b8 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f006 fdef 	bl	800df86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695a      	ldr	r2, [r3, #20]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f002 0208 	and.w	r2, r2, #8
 80073b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4618      	mov	r0, r3
 80073be:	f004 f98b 	bl	800b6d8 <USB_ReadInterrupts>
 80073c2:	4603      	mov	r3, r0
 80073c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073c8:	2b80      	cmp	r3, #128	@ 0x80
 80073ca:	d123      	bne.n	8007414 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	699b      	ldr	r3, [r3, #24]
 80073d0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80073d8:	2301      	movs	r3, #1
 80073da:	627b      	str	r3, [r7, #36]	@ 0x24
 80073dc:	e014      	b.n	8007408 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80073de:	6879      	ldr	r1, [r7, #4]
 80073e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e2:	4613      	mov	r3, r2
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	440b      	add	r3, r1
 80073ec:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d105      	bne.n	8007402 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80073f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f8:	b2db      	uxtb	r3, r3
 80073fa:	4619      	mov	r1, r3
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 fb0a 	bl	8007a16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	3301      	adds	r3, #1
 8007406:	627b      	str	r3, [r7, #36]	@ 0x24
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	791b      	ldrb	r3, [r3, #4]
 800740c:	461a      	mov	r2, r3
 800740e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007410:	4293      	cmp	r3, r2
 8007412:	d3e4      	bcc.n	80073de <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f004 f95d 	bl	800b6d8 <USB_ReadInterrupts>
 800741e:	4603      	mov	r3, r0
 8007420:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007424:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007428:	d13c      	bne.n	80074a4 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800742a:	2301      	movs	r3, #1
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
 800742e:	e02b      	b.n	8007488 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8007430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007440:	6879      	ldr	r1, [r7, #4]
 8007442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007444:	4613      	mov	r3, r2
 8007446:	00db      	lsls	r3, r3, #3
 8007448:	4413      	add	r3, r2
 800744a:	009b      	lsls	r3, r3, #2
 800744c:	440b      	add	r3, r1
 800744e:	3318      	adds	r3, #24
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d115      	bne.n	8007482 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8007456:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8007458:	2b00      	cmp	r3, #0
 800745a:	da12      	bge.n	8007482 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800745c:	6879      	ldr	r1, [r7, #4]
 800745e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	4413      	add	r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	440b      	add	r3, r1
 800746a:	3317      	adds	r3, #23
 800746c:	2201      	movs	r2, #1
 800746e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	b2db      	uxtb	r3, r3
 8007474:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007478:	b2db      	uxtb	r3, r3
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 faca 	bl	8007a16 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007484:	3301      	adds	r3, #1
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	791b      	ldrb	r3, [r3, #4]
 800748c:	461a      	mov	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	4293      	cmp	r3, r2
 8007492:	d3cd      	bcc.n	8007430 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	695a      	ldr	r2, [r3, #20]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80074a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f004 f915 	bl	800b6d8 <USB_ReadInterrupts>
 80074ae:	4603      	mov	r3, r0
 80074b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80074b8:	d156      	bne.n	8007568 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80074ba:	2301      	movs	r3, #1
 80074bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80074be:	e045      	b.n	800754c <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80074c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c2:	015a      	lsls	r2, r3, #5
 80074c4:	69fb      	ldr	r3, [r7, #28]
 80074c6:	4413      	add	r3, r2
 80074c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074d4:	4613      	mov	r3, r2
 80074d6:	00db      	lsls	r3, r3, #3
 80074d8:	4413      	add	r3, r2
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	440b      	add	r3, r1
 80074de:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d12e      	bne.n	8007546 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80074e8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	da2b      	bge.n	8007546 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80074ee:	69bb      	ldr	r3, [r7, #24]
 80074f0:	0c1a      	lsrs	r2, r3, #16
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80074f8:	4053      	eors	r3, r2
 80074fa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d121      	bne.n	8007546 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007506:	4613      	mov	r3, r2
 8007508:	00db      	lsls	r3, r3, #3
 800750a:	4413      	add	r3, r2
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	440b      	add	r3, r1
 8007510:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007514:	2201      	movs	r2, #1
 8007516:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007524:	6a3b      	ldr	r3, [r7, #32]
 8007526:	695b      	ldr	r3, [r3, #20]
 8007528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10a      	bne.n	8007546 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	69fa      	ldr	r2, [r7, #28]
 800753a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800753e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007542:	6053      	str	r3, [r2, #4]
            break;
 8007544:	e008      	b.n	8007558 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007548:	3301      	adds	r3, #1
 800754a:	627b      	str	r3, [r7, #36]	@ 0x24
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	791b      	ldrb	r3, [r3, #4]
 8007550:	461a      	mov	r2, r3
 8007552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007554:	4293      	cmp	r3, r2
 8007556:	d3b3      	bcc.n	80074c0 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695a      	ldr	r2, [r3, #20]
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8007566:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	f004 f8b3 	bl	800b6d8 <USB_ReadInterrupts>
 8007572:	4603      	mov	r3, r0
 8007574:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007578:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800757c:	d10a      	bne.n	8007594 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f006 fd86 	bl	800e090 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695a      	ldr	r2, [r3, #20]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007592:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4618      	mov	r0, r3
 800759a:	f004 f89d 	bl	800b6d8 <USB_ReadInterrupts>
 800759e:	4603      	mov	r3, r0
 80075a0:	f003 0304 	and.w	r3, r3, #4
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d115      	bne.n	80075d4 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d002      	beq.n	80075c0 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f006 fd76 	bl	800e0ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6859      	ldr	r1, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	69ba      	ldr	r2, [r7, #24]
 80075cc:	430a      	orrs	r2, r1
 80075ce:	605a      	str	r2, [r3, #4]
 80075d0:	e000      	b.n	80075d4 <HAL_PCD_IRQHandler+0x93c>
      return;
 80075d2:	bf00      	nop
    }
  }
}
 80075d4:	3734      	adds	r7, #52	@ 0x34
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd90      	pop	{r4, r7, pc}

080075da <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
 80075e2:	460b      	mov	r3, r1
 80075e4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80075ec:	2b01      	cmp	r3, #1
 80075ee:	d101      	bne.n	80075f4 <HAL_PCD_SetAddress+0x1a>
 80075f0:	2302      	movs	r3, #2
 80075f2:	e012      	b.n	800761a <HAL_PCD_SetAddress+0x40>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2201      	movs	r2, #1
 80075f8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	78fa      	ldrb	r2, [r7, #3]
 8007600:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	78fa      	ldrb	r2, [r7, #3]
 8007608:	4611      	mov	r1, r2
 800760a:	4618      	mov	r0, r3
 800760c:	f003 fffc 	bl	800b608 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007618:	2300      	movs	r3, #0
}
 800761a:	4618      	mov	r0, r3
 800761c:	3708      	adds	r7, #8
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}

08007622 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b084      	sub	sp, #16
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	4608      	mov	r0, r1
 800762c:	4611      	mov	r1, r2
 800762e:	461a      	mov	r2, r3
 8007630:	4603      	mov	r3, r0
 8007632:	70fb      	strb	r3, [r7, #3]
 8007634:	460b      	mov	r3, r1
 8007636:	803b      	strh	r3, [r7, #0]
 8007638:	4613      	mov	r3, r2
 800763a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800763c:	2300      	movs	r3, #0
 800763e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007644:	2b00      	cmp	r3, #0
 8007646:	da0f      	bge.n	8007668 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007648:	78fb      	ldrb	r3, [r7, #3]
 800764a:	f003 020f 	and.w	r2, r3, #15
 800764e:	4613      	mov	r3, r2
 8007650:	00db      	lsls	r3, r3, #3
 8007652:	4413      	add	r3, r2
 8007654:	009b      	lsls	r3, r3, #2
 8007656:	3310      	adds	r3, #16
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	4413      	add	r3, r2
 800765c:	3304      	adds	r3, #4
 800765e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	705a      	strb	r2, [r3, #1]
 8007666:	e00f      	b.n	8007688 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007668:	78fb      	ldrb	r3, [r7, #3]
 800766a:	f003 020f 	and.w	r2, r3, #15
 800766e:	4613      	mov	r3, r2
 8007670:	00db      	lsls	r3, r3, #3
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4413      	add	r3, r2
 800767e:	3304      	adds	r3, #4
 8007680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2200      	movs	r2, #0
 8007686:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007688:	78fb      	ldrb	r3, [r7, #3]
 800768a:	f003 030f 	and.w	r3, r3, #15
 800768e:	b2da      	uxtb	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007694:	883b      	ldrh	r3, [r7, #0]
 8007696:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	78ba      	ldrb	r2, [r7, #2]
 80076a2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	785b      	ldrb	r3, [r3, #1]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d004      	beq.n	80076b6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80076b6:	78bb      	ldrb	r3, [r7, #2]
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d102      	bne.n	80076c2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	2200      	movs	r2, #0
 80076c0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80076c8:	2b01      	cmp	r3, #1
 80076ca:	d101      	bne.n	80076d0 <HAL_PCD_EP_Open+0xae>
 80076cc:	2302      	movs	r3, #2
 80076ce:	e00e      	b.n	80076ee <HAL_PCD_EP_Open+0xcc>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2201      	movs	r2, #1
 80076d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	68f9      	ldr	r1, [r7, #12]
 80076de:	4618      	mov	r0, r3
 80076e0:	f003 f97c 	bl	800a9dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80076ec:	7afb      	ldrb	r3, [r7, #11]
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b084      	sub	sp, #16
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
 80076fe:	460b      	mov	r3, r1
 8007700:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007702:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007706:	2b00      	cmp	r3, #0
 8007708:	da0f      	bge.n	800772a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800770a:	78fb      	ldrb	r3, [r7, #3]
 800770c:	f003 020f 	and.w	r2, r3, #15
 8007710:	4613      	mov	r3, r2
 8007712:	00db      	lsls	r3, r3, #3
 8007714:	4413      	add	r3, r2
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	3310      	adds	r3, #16
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	4413      	add	r3, r2
 800771e:	3304      	adds	r3, #4
 8007720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	705a      	strb	r2, [r3, #1]
 8007728:	e00f      	b.n	800774a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	f003 020f 	and.w	r2, r3, #15
 8007730:	4613      	mov	r3, r2
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	4413      	add	r3, r2
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800773c:	687a      	ldr	r2, [r7, #4]
 800773e:	4413      	add	r3, r2
 8007740:	3304      	adds	r3, #4
 8007742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800774a:	78fb      	ldrb	r3, [r7, #3]
 800774c:	f003 030f 	and.w	r3, r3, #15
 8007750:	b2da      	uxtb	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_PCD_EP_Close+0x6e>
 8007760:	2302      	movs	r3, #2
 8007762:	e00e      	b.n	8007782 <HAL_PCD_EP_Close+0x8c>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	68f9      	ldr	r1, [r7, #12]
 8007772:	4618      	mov	r0, r3
 8007774:	f003 f9ba 	bl	800aaec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2200      	movs	r2, #0
 800777c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007780:	2300      	movs	r3, #0
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b086      	sub	sp, #24
 800778e:	af00      	add	r7, sp, #0
 8007790:	60f8      	str	r0, [r7, #12]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
 8007796:	460b      	mov	r3, r1
 8007798:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800779a:	7afb      	ldrb	r3, [r7, #11]
 800779c:	f003 020f 	and.w	r2, r3, #15
 80077a0:	4613      	mov	r3, r2
 80077a2:	00db      	lsls	r3, r3, #3
 80077a4:	4413      	add	r3, r2
 80077a6:	009b      	lsls	r3, r3, #2
 80077a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80077ac:	68fa      	ldr	r2, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	3304      	adds	r3, #4
 80077b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80077b4:	697b      	ldr	r3, [r7, #20]
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	683a      	ldr	r2, [r7, #0]
 80077be:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2200      	movs	r2, #0
 80077c4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2200      	movs	r2, #0
 80077ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077cc:	7afb      	ldrb	r3, [r7, #11]
 80077ce:	f003 030f 	and.w	r3, r3, #15
 80077d2:	b2da      	uxtb	r2, r3
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	799b      	ldrb	r3, [r3, #6]
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d102      	bne.n	80077e6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80077e0:	687a      	ldr	r2, [r7, #4]
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6818      	ldr	r0, [r3, #0]
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	799b      	ldrb	r3, [r3, #6]
 80077ee:	461a      	mov	r2, r3
 80077f0:	6979      	ldr	r1, [r7, #20]
 80077f2:	f003 fa57 	bl	800aca4 <USB_EPStartXfer>

  return HAL_OK;
 80077f6:	2300      	movs	r3, #0
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3718      	adds	r7, #24
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800780c:	78fb      	ldrb	r3, [r7, #3]
 800780e:	f003 020f 	and.w	r2, r3, #15
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	4613      	mov	r3, r2
 8007816:	00db      	lsls	r3, r3, #3
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	440b      	add	r3, r1
 800781e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8007822:	681b      	ldr	r3, [r3, #0]
}
 8007824:	4618      	mov	r0, r3
 8007826:	370c      	adds	r7, #12
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b086      	sub	sp, #24
 8007834:	af00      	add	r7, sp, #0
 8007836:	60f8      	str	r0, [r7, #12]
 8007838:	607a      	str	r2, [r7, #4]
 800783a:	603b      	str	r3, [r7, #0]
 800783c:	460b      	mov	r3, r1
 800783e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007840:	7afb      	ldrb	r3, [r7, #11]
 8007842:	f003 020f 	and.w	r2, r3, #15
 8007846:	4613      	mov	r3, r2
 8007848:	00db      	lsls	r3, r3, #3
 800784a:	4413      	add	r3, r2
 800784c:	009b      	lsls	r3, r3, #2
 800784e:	3310      	adds	r3, #16
 8007850:	68fa      	ldr	r2, [r7, #12]
 8007852:	4413      	add	r3, r2
 8007854:	3304      	adds	r3, #4
 8007856:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	687a      	ldr	r2, [r7, #4]
 800785c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	683a      	ldr	r2, [r7, #0]
 8007862:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	2200      	movs	r2, #0
 8007868:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800786a:	697b      	ldr	r3, [r7, #20]
 800786c:	2201      	movs	r2, #1
 800786e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007870:	7afb      	ldrb	r3, [r7, #11]
 8007872:	f003 030f 	and.w	r3, r3, #15
 8007876:	b2da      	uxtb	r2, r3
 8007878:	697b      	ldr	r3, [r7, #20]
 800787a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	799b      	ldrb	r3, [r3, #6]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d102      	bne.n	800788a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007884:	687a      	ldr	r2, [r7, #4]
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	6818      	ldr	r0, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	799b      	ldrb	r3, [r3, #6]
 8007892:	461a      	mov	r2, r3
 8007894:	6979      	ldr	r1, [r7, #20]
 8007896:	f003 fa05 	bl	800aca4 <USB_EPStartXfer>

  return HAL_OK;
 800789a:	2300      	movs	r3, #0
}
 800789c:	4618      	mov	r0, r3
 800789e:	3718      	adds	r7, #24
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b084      	sub	sp, #16
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80078b0:	78fb      	ldrb	r3, [r7, #3]
 80078b2:	f003 030f 	and.w	r3, r3, #15
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	7912      	ldrb	r2, [r2, #4]
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d901      	bls.n	80078c2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e04f      	b.n	8007962 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80078c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	da0f      	bge.n	80078ea <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078ca:	78fb      	ldrb	r3, [r7, #3]
 80078cc:	f003 020f 	and.w	r2, r3, #15
 80078d0:	4613      	mov	r3, r2
 80078d2:	00db      	lsls	r3, r3, #3
 80078d4:	4413      	add	r3, r2
 80078d6:	009b      	lsls	r3, r3, #2
 80078d8:	3310      	adds	r3, #16
 80078da:	687a      	ldr	r2, [r7, #4]
 80078dc:	4413      	add	r3, r2
 80078de:	3304      	adds	r3, #4
 80078e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	705a      	strb	r2, [r3, #1]
 80078e8:	e00d      	b.n	8007906 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80078ea:	78fa      	ldrb	r2, [r7, #3]
 80078ec:	4613      	mov	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80078f8:	687a      	ldr	r2, [r7, #4]
 80078fa:	4413      	add	r3, r2
 80078fc:	3304      	adds	r3, #4
 80078fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2201      	movs	r2, #1
 800790a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800790c:	78fb      	ldrb	r3, [r7, #3]
 800790e:	f003 030f 	and.w	r3, r3, #15
 8007912:	b2da      	uxtb	r2, r3
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800791e:	2b01      	cmp	r3, #1
 8007920:	d101      	bne.n	8007926 <HAL_PCD_EP_SetStall+0x82>
 8007922:	2302      	movs	r3, #2
 8007924:	e01d      	b.n	8007962 <HAL_PCD_EP_SetStall+0xbe>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2201      	movs	r2, #1
 800792a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68f9      	ldr	r1, [r7, #12]
 8007934:	4618      	mov	r0, r3
 8007936:	f003 fd93 	bl	800b460 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	f003 030f 	and.w	r3, r3, #15
 8007940:	2b00      	cmp	r3, #0
 8007942:	d109      	bne.n	8007958 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6818      	ldr	r0, [r3, #0]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	7999      	ldrb	r1, [r3, #6]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007952:	461a      	mov	r2, r3
 8007954:	f003 ff84 	bl	800b860 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}

0800796a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800796a:	b580      	push	{r7, lr}
 800796c:	b084      	sub	sp, #16
 800796e:	af00      	add	r7, sp, #0
 8007970:	6078      	str	r0, [r7, #4]
 8007972:	460b      	mov	r3, r1
 8007974:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007976:	78fb      	ldrb	r3, [r7, #3]
 8007978:	f003 030f 	and.w	r3, r3, #15
 800797c:	687a      	ldr	r2, [r7, #4]
 800797e:	7912      	ldrb	r2, [r2, #4]
 8007980:	4293      	cmp	r3, r2
 8007982:	d901      	bls.n	8007988 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e042      	b.n	8007a0e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007988:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800798c:	2b00      	cmp	r3, #0
 800798e:	da0f      	bge.n	80079b0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007990:	78fb      	ldrb	r3, [r7, #3]
 8007992:	f003 020f 	and.w	r2, r3, #15
 8007996:	4613      	mov	r3, r2
 8007998:	00db      	lsls	r3, r3, #3
 800799a:	4413      	add	r3, r2
 800799c:	009b      	lsls	r3, r3, #2
 800799e:	3310      	adds	r3, #16
 80079a0:	687a      	ldr	r2, [r7, #4]
 80079a2:	4413      	add	r3, r2
 80079a4:	3304      	adds	r3, #4
 80079a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	2201      	movs	r2, #1
 80079ac:	705a      	strb	r2, [r3, #1]
 80079ae:	e00f      	b.n	80079d0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	f003 020f 	and.w	r2, r3, #15
 80079b6:	4613      	mov	r3, r2
 80079b8:	00db      	lsls	r3, r3, #3
 80079ba:	4413      	add	r3, r2
 80079bc:	009b      	lsls	r3, r3, #2
 80079be:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80079c2:	687a      	ldr	r2, [r7, #4]
 80079c4:	4413      	add	r3, r2
 80079c6:	3304      	adds	r3, #4
 80079c8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2200      	movs	r2, #0
 80079d4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079d6:	78fb      	ldrb	r3, [r7, #3]
 80079d8:	f003 030f 	and.w	r3, r3, #15
 80079dc:	b2da      	uxtb	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d101      	bne.n	80079f0 <HAL_PCD_EP_ClrStall+0x86>
 80079ec:	2302      	movs	r3, #2
 80079ee:	e00e      	b.n	8007a0e <HAL_PCD_EP_ClrStall+0xa4>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2201      	movs	r2, #1
 80079f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68f9      	ldr	r1, [r7, #12]
 80079fe:	4618      	mov	r0, r3
 8007a00:	f003 fd9c 	bl	800b53c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007a0c:	2300      	movs	r3, #0
}
 8007a0e:	4618      	mov	r0, r3
 8007a10:	3710      	adds	r7, #16
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b084      	sub	sp, #16
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
 8007a1e:	460b      	mov	r3, r1
 8007a20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007a22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	da0c      	bge.n	8007a44 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a2a:	78fb      	ldrb	r3, [r7, #3]
 8007a2c:	f003 020f 	and.w	r2, r3, #15
 8007a30:	4613      	mov	r3, r2
 8007a32:	00db      	lsls	r3, r3, #3
 8007a34:	4413      	add	r3, r2
 8007a36:	009b      	lsls	r3, r3, #2
 8007a38:	3310      	adds	r3, #16
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	4413      	add	r3, r2
 8007a3e:	3304      	adds	r3, #4
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	e00c      	b.n	8007a5e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a44:	78fb      	ldrb	r3, [r7, #3]
 8007a46:	f003 020f 	and.w	r2, r3, #15
 8007a4a:	4613      	mov	r3, r2
 8007a4c:	00db      	lsls	r3, r3, #3
 8007a4e:	4413      	add	r3, r2
 8007a50:	009b      	lsls	r3, r3, #2
 8007a52:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a56:	687a      	ldr	r2, [r7, #4]
 8007a58:	4413      	add	r3, r2
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68f9      	ldr	r1, [r7, #12]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f003 fbbb 	bl	800b1e0 <USB_EPStopXfer>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007a6e:	7afb      	ldrb	r3, [r7, #11]
}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3710      	adds	r7, #16
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08a      	sub	sp, #40	@ 0x28
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a88:	697b      	ldr	r3, [r7, #20]
 8007a8a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007a8c:	683a      	ldr	r2, [r7, #0]
 8007a8e:	4613      	mov	r3, r2
 8007a90:	00db      	lsls	r3, r3, #3
 8007a92:	4413      	add	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	3310      	adds	r3, #16
 8007a98:	687a      	ldr	r2, [r7, #4]
 8007a9a:	4413      	add	r3, r2
 8007a9c:	3304      	adds	r3, #4
 8007a9e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	695a      	ldr	r2, [r3, #20]
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	691b      	ldr	r3, [r3, #16]
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d901      	bls.n	8007ab0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e06b      	b.n	8007b88 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	691a      	ldr	r2, [r3, #16]
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	695b      	ldr	r3, [r3, #20]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	689b      	ldr	r3, [r3, #8]
 8007ac0:	69fa      	ldr	r2, [r7, #28]
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	d902      	bls.n	8007acc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	3303      	adds	r3, #3
 8007ad0:	089b      	lsrs	r3, r3, #2
 8007ad2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ad4:	e02a      	b.n	8007b2c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	691a      	ldr	r2, [r3, #16]
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	69fa      	ldr	r2, [r7, #28]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d902      	bls.n	8007af2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007af2:	69fb      	ldr	r3, [r7, #28]
 8007af4:	3303      	adds	r3, #3
 8007af6:	089b      	lsrs	r3, r3, #2
 8007af8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	68d9      	ldr	r1, [r3, #12]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	b2da      	uxtb	r2, r3
 8007b02:	69fb      	ldr	r3, [r7, #28]
 8007b04:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007b0a:	9300      	str	r3, [sp, #0]
 8007b0c:	4603      	mov	r3, r0
 8007b0e:	6978      	ldr	r0, [r7, #20]
 8007b10:	f003 fc10 	bl	800b334 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	68da      	ldr	r2, [r3, #12]
 8007b18:	69fb      	ldr	r3, [r7, #28]
 8007b1a:	441a      	add	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	695a      	ldr	r2, [r3, #20]
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	441a      	add	r2, r3
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b38:	699b      	ldr	r3, [r3, #24]
 8007b3a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d809      	bhi.n	8007b56 <PCD_WriteEmptyTxFifo+0xde>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	695a      	ldr	r2, [r3, #20]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b4a:	429a      	cmp	r2, r3
 8007b4c:	d203      	bcs.n	8007b56 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1bf      	bne.n	8007ad6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	691a      	ldr	r2, [r3, #16]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d811      	bhi.n	8007b86 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	f003 030f 	and.w	r3, r3, #15
 8007b68:	2201      	movs	r2, #1
 8007b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b70:	693b      	ldr	r3, [r7, #16]
 8007b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b78:	68bb      	ldr	r3, [r7, #8]
 8007b7a:	43db      	mvns	r3, r3
 8007b7c:	6939      	ldr	r1, [r7, #16]
 8007b7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007b82:	4013      	ands	r3, r2
 8007b84:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3720      	adds	r7, #32
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
 8007b98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ba0:	69fb      	ldr	r3, [r7, #28]
 8007ba2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	333c      	adds	r3, #60	@ 0x3c
 8007ba8:	3304      	adds	r3, #4
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	015a      	lsls	r2, r3, #5
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	4413      	add	r3, r2
 8007bb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	799b      	ldrb	r3, [r3, #6]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d17b      	bne.n	8007cbe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	f003 0308 	and.w	r3, r3, #8
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d015      	beq.n	8007bfc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	4a61      	ldr	r2, [pc, #388]	@ (8007d58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007bd4:	4293      	cmp	r3, r2
 8007bd6:	f240 80b9 	bls.w	8007d4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007bda:	693b      	ldr	r3, [r7, #16]
 8007bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f000 80b3 	beq.w	8007d4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	015a      	lsls	r2, r3, #5
 8007bea:	69bb      	ldr	r3, [r7, #24]
 8007bec:	4413      	add	r3, r2
 8007bee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007bf8:	6093      	str	r3, [r2, #8]
 8007bfa:	e0a7      	b.n	8007d4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	f003 0320 	and.w	r3, r3, #32
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d009      	beq.n	8007c1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	015a      	lsls	r2, r3, #5
 8007c0a:	69bb      	ldr	r3, [r7, #24]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c12:	461a      	mov	r2, r3
 8007c14:	2320      	movs	r3, #32
 8007c16:	6093      	str	r3, [r2, #8]
 8007c18:	e098      	b.n	8007d4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f040 8093 	bne.w	8007d4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c26:	697b      	ldr	r3, [r7, #20]
 8007c28:	4a4b      	ldr	r2, [pc, #300]	@ (8007d58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007c2a:	4293      	cmp	r3, r2
 8007c2c:	d90f      	bls.n	8007c4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00a      	beq.n	8007c4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c44:	461a      	mov	r2, r3
 8007c46:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007c4a:	6093      	str	r3, [r2, #8]
 8007c4c:	e07e      	b.n	8007d4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007c4e:	683a      	ldr	r2, [r7, #0]
 8007c50:	4613      	mov	r3, r2
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	4413      	add	r3, r2
 8007c56:	009b      	lsls	r3, r3, #2
 8007c58:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	4413      	add	r3, r2
 8007c60:	3304      	adds	r3, #4
 8007c62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6a1a      	ldr	r2, [r3, #32]
 8007c68:	683b      	ldr	r3, [r7, #0]
 8007c6a:	0159      	lsls	r1, r3, #5
 8007c6c:	69bb      	ldr	r3, [r7, #24]
 8007c6e:	440b      	add	r3, r1
 8007c70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c7a:	1ad2      	subs	r2, r2, r3
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d114      	bne.n	8007cb0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d109      	bne.n	8007ca2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6818      	ldr	r0, [r3, #0]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007c98:	461a      	mov	r2, r3
 8007c9a:	2101      	movs	r1, #1
 8007c9c:	f003 fde0 	bl	800b860 <USB_EP0_OutStart>
 8007ca0:	e006      	b.n	8007cb0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	441a      	add	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f006 f930 	bl	800df1c <HAL_PCD_DataOutStageCallback>
 8007cbc:	e046      	b.n	8007d4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	4a26      	ldr	r2, [pc, #152]	@ (8007d5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007cc2:	4293      	cmp	r3, r2
 8007cc4:	d124      	bne.n	8007d10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007cc6:	693b      	ldr	r3, [r7, #16]
 8007cc8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d00a      	beq.n	8007ce6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	69bb      	ldr	r3, [r7, #24]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cdc:	461a      	mov	r2, r3
 8007cde:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007ce2:	6093      	str	r3, [r2, #8]
 8007ce4:	e032      	b.n	8007d4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	f003 0320 	and.w	r3, r3, #32
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d008      	beq.n	8007d02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	69bb      	ldr	r3, [r7, #24]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007cfc:	461a      	mov	r2, r3
 8007cfe:	2320      	movs	r3, #32
 8007d00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f006 f907 	bl	800df1c <HAL_PCD_DataOutStageCallback>
 8007d0e:	e01d      	b.n	8007d4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d114      	bne.n	8007d40 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007d16:	6879      	ldr	r1, [r7, #4]
 8007d18:	683a      	ldr	r2, [r7, #0]
 8007d1a:	4613      	mov	r3, r2
 8007d1c:	00db      	lsls	r3, r3, #3
 8007d1e:	4413      	add	r3, r2
 8007d20:	009b      	lsls	r3, r3, #2
 8007d22:	440b      	add	r3, r1
 8007d24:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d108      	bne.n	8007d40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007d38:	461a      	mov	r2, r3
 8007d3a:	2100      	movs	r1, #0
 8007d3c:	f003 fd90 	bl	800b860 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	4619      	mov	r1, r3
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f006 f8e8 	bl	800df1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3720      	adds	r7, #32
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	4f54300a 	.word	0x4f54300a
 8007d5c:	4f54310a 	.word	0x4f54310a

08007d60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b086      	sub	sp, #24
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
 8007d68:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	333c      	adds	r3, #60	@ 0x3c
 8007d78:	3304      	adds	r3, #4
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	015a      	lsls	r2, r3, #5
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	4413      	add	r3, r2
 8007d86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4a15      	ldr	r2, [pc, #84]	@ (8007de8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d90e      	bls.n	8007db4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d009      	beq.n	8007db4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	015a      	lsls	r2, r3, #5
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	4413      	add	r3, r2
 8007da8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dac:	461a      	mov	r2, r3
 8007dae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007db2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f006 f89f 	bl	800def8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8007de8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d90c      	bls.n	8007ddc <PCD_EP_OutSetupPacket_int+0x7c>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	799b      	ldrb	r3, [r3, #6]
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	d108      	bne.n	8007ddc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6818      	ldr	r0, [r3, #0]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	f003 fd42 	bl	800b860 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007ddc:	2300      	movs	r3, #0
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3718      	adds	r7, #24
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	4f54300a 	.word	0x4f54300a

08007dec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b085      	sub	sp, #20
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	460b      	mov	r3, r1
 8007df6:	70fb      	strb	r3, [r7, #3]
 8007df8:	4613      	mov	r3, r2
 8007dfa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e02:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007e04:	78fb      	ldrb	r3, [r7, #3]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d107      	bne.n	8007e1a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007e0a:	883b      	ldrh	r3, [r7, #0]
 8007e0c:	0419      	lsls	r1, r3, #16
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	68ba      	ldr	r2, [r7, #8]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	629a      	str	r2, [r3, #40]	@ 0x28
 8007e18:	e028      	b.n	8007e6c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e20:	0c1b      	lsrs	r3, r3, #16
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	4413      	add	r3, r2
 8007e26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007e28:	2300      	movs	r3, #0
 8007e2a:	73fb      	strb	r3, [r7, #15]
 8007e2c:	e00d      	b.n	8007e4a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	7bfb      	ldrb	r3, [r7, #15]
 8007e34:	3340      	adds	r3, #64	@ 0x40
 8007e36:	009b      	lsls	r3, r3, #2
 8007e38:	4413      	add	r3, r2
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	0c1b      	lsrs	r3, r3, #16
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	4413      	add	r3, r2
 8007e42:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007e44:	7bfb      	ldrb	r3, [r7, #15]
 8007e46:	3301      	adds	r3, #1
 8007e48:	73fb      	strb	r3, [r7, #15]
 8007e4a:	7bfa      	ldrb	r2, [r7, #15]
 8007e4c:	78fb      	ldrb	r3, [r7, #3]
 8007e4e:	3b01      	subs	r3, #1
 8007e50:	429a      	cmp	r2, r3
 8007e52:	d3ec      	bcc.n	8007e2e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007e54:	883b      	ldrh	r3, [r7, #0]
 8007e56:	0418      	lsls	r0, r3, #16
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6819      	ldr	r1, [r3, #0]
 8007e5c:	78fb      	ldrb	r3, [r7, #3]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	68ba      	ldr	r2, [r7, #8]
 8007e62:	4302      	orrs	r2, r0
 8007e64:	3340      	adds	r3, #64	@ 0x40
 8007e66:	009b      	lsls	r3, r3, #2
 8007e68:	440b      	add	r3, r1
 8007e6a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr

08007e7a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007e7a:	b480      	push	{r7}
 8007e7c:	b083      	sub	sp, #12
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
 8007e82:	460b      	mov	r3, r1
 8007e84:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	887a      	ldrh	r2, [r7, #2]
 8007e8c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007e8e:	2300      	movs	r3, #0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	370c      	adds	r7, #12
 8007e94:	46bd      	mov	sp, r7
 8007e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9a:	4770      	bx	lr

08007e9c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b083      	sub	sp, #12
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr

08007eb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d101      	bne.n	8007ec6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007ec2:	2301      	movs	r3, #1
 8007ec4:	e267      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 0301 	and.w	r3, r3, #1
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d075      	beq.n	8007fbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007ed2:	4b88      	ldr	r3, [pc, #544]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f003 030c 	and.w	r3, r3, #12
 8007eda:	2b04      	cmp	r3, #4
 8007edc:	d00c      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007ede:	4b85      	ldr	r3, [pc, #532]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007ee6:	2b08      	cmp	r3, #8
 8007ee8:	d112      	bne.n	8007f10 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007eea:	4b82      	ldr	r3, [pc, #520]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ef2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007ef6:	d10b      	bne.n	8007f10 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d05b      	beq.n	8007fbc <HAL_RCC_OscConfig+0x108>
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d157      	bne.n	8007fbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e242      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	685b      	ldr	r3, [r3, #4]
 8007f14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007f18:	d106      	bne.n	8007f28 <HAL_RCC_OscConfig+0x74>
 8007f1a:	4b76      	ldr	r3, [pc, #472]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a75      	ldr	r2, [pc, #468]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f24:	6013      	str	r3, [r2, #0]
 8007f26:	e01d      	b.n	8007f64 <HAL_RCC_OscConfig+0xb0>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007f30:	d10c      	bne.n	8007f4c <HAL_RCC_OscConfig+0x98>
 8007f32:	4b70      	ldr	r3, [pc, #448]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a6f      	ldr	r2, [pc, #444]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a6c      	ldr	r2, [pc, #432]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f48:	6013      	str	r3, [r2, #0]
 8007f4a:	e00b      	b.n	8007f64 <HAL_RCC_OscConfig+0xb0>
 8007f4c:	4b69      	ldr	r3, [pc, #420]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a68      	ldr	r2, [pc, #416]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f56:	6013      	str	r3, [r2, #0]
 8007f58:	4b66      	ldr	r3, [pc, #408]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a65      	ldr	r2, [pc, #404]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007f62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d013      	beq.n	8007f94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f6c:	f7fa faf2 	bl	8002554 <HAL_GetTick>
 8007f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f72:	e008      	b.n	8007f86 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f74:	f7fa faee 	bl	8002554 <HAL_GetTick>
 8007f78:	4602      	mov	r2, r0
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	1ad3      	subs	r3, r2, r3
 8007f7e:	2b64      	cmp	r3, #100	@ 0x64
 8007f80:	d901      	bls.n	8007f86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007f82:	2303      	movs	r3, #3
 8007f84:	e207      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f86:	4b5b      	ldr	r3, [pc, #364]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0f0      	beq.n	8007f74 <HAL_RCC_OscConfig+0xc0>
 8007f92:	e014      	b.n	8007fbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f94:	f7fa fade 	bl	8002554 <HAL_GetTick>
 8007f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007f9a:	e008      	b.n	8007fae <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f9c:	f7fa fada 	bl	8002554 <HAL_GetTick>
 8007fa0:	4602      	mov	r2, r0
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	1ad3      	subs	r3, r2, r3
 8007fa6:	2b64      	cmp	r3, #100	@ 0x64
 8007fa8:	d901      	bls.n	8007fae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007faa:	2303      	movs	r3, #3
 8007fac:	e1f3      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fae:	4b51      	ldr	r3, [pc, #324]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d1f0      	bne.n	8007f9c <HAL_RCC_OscConfig+0xe8>
 8007fba:	e000      	b.n	8007fbe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007fbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d063      	beq.n	8008092 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007fca:	4b4a      	ldr	r3, [pc, #296]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007fcc:	689b      	ldr	r3, [r3, #8]
 8007fce:	f003 030c 	and.w	r3, r3, #12
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d00b      	beq.n	8007fee <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fd6:	4b47      	ldr	r3, [pc, #284]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007fde:	2b08      	cmp	r3, #8
 8007fe0:	d11c      	bne.n	800801c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007fe2:	4b44      	ldr	r3, [pc, #272]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d116      	bne.n	800801c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007fee:	4b41      	ldr	r3, [pc, #260]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f003 0302 	and.w	r3, r3, #2
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d005      	beq.n	8008006 <HAL_RCC_OscConfig+0x152>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	68db      	ldr	r3, [r3, #12]
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d001      	beq.n	8008006 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008002:	2301      	movs	r3, #1
 8008004:	e1c7      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008006:	4b3b      	ldr	r3, [pc, #236]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	4937      	ldr	r1, [pc, #220]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008016:	4313      	orrs	r3, r2
 8008018:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800801a:	e03a      	b.n	8008092 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	68db      	ldr	r3, [r3, #12]
 8008020:	2b00      	cmp	r3, #0
 8008022:	d020      	beq.n	8008066 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008024:	4b34      	ldr	r3, [pc, #208]	@ (80080f8 <HAL_RCC_OscConfig+0x244>)
 8008026:	2201      	movs	r2, #1
 8008028:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800802a:	f7fa fa93 	bl	8002554 <HAL_GetTick>
 800802e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008030:	e008      	b.n	8008044 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008032:	f7fa fa8f 	bl	8002554 <HAL_GetTick>
 8008036:	4602      	mov	r2, r0
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	1ad3      	subs	r3, r2, r3
 800803c:	2b02      	cmp	r3, #2
 800803e:	d901      	bls.n	8008044 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008040:	2303      	movs	r3, #3
 8008042:	e1a8      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008044:	4b2b      	ldr	r3, [pc, #172]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	d0f0      	beq.n	8008032 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008050:	4b28      	ldr	r3, [pc, #160]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	00db      	lsls	r3, r3, #3
 800805e:	4925      	ldr	r1, [pc, #148]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008060:	4313      	orrs	r3, r2
 8008062:	600b      	str	r3, [r1, #0]
 8008064:	e015      	b.n	8008092 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008066:	4b24      	ldr	r3, [pc, #144]	@ (80080f8 <HAL_RCC_OscConfig+0x244>)
 8008068:	2200      	movs	r2, #0
 800806a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800806c:	f7fa fa72 	bl	8002554 <HAL_GetTick>
 8008070:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008072:	e008      	b.n	8008086 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008074:	f7fa fa6e 	bl	8002554 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	2b02      	cmp	r3, #2
 8008080:	d901      	bls.n	8008086 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008082:	2303      	movs	r3, #3
 8008084:	e187      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008086:	4b1b      	ldr	r3, [pc, #108]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1f0      	bne.n	8008074 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f003 0308 	and.w	r3, r3, #8
 800809a:	2b00      	cmp	r3, #0
 800809c:	d036      	beq.n	800810c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	695b      	ldr	r3, [r3, #20]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d016      	beq.n	80080d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080a6:	4b15      	ldr	r3, [pc, #84]	@ (80080fc <HAL_RCC_OscConfig+0x248>)
 80080a8:	2201      	movs	r2, #1
 80080aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080ac:	f7fa fa52 	bl	8002554 <HAL_GetTick>
 80080b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080b2:	e008      	b.n	80080c6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080b4:	f7fa fa4e 	bl	8002554 <HAL_GetTick>
 80080b8:	4602      	mov	r2, r0
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	1ad3      	subs	r3, r2, r3
 80080be:	2b02      	cmp	r3, #2
 80080c0:	d901      	bls.n	80080c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080c2:	2303      	movs	r3, #3
 80080c4:	e167      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080c6:	4b0b      	ldr	r3, [pc, #44]	@ (80080f4 <HAL_RCC_OscConfig+0x240>)
 80080c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80080ca:	f003 0302 	and.w	r3, r3, #2
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d0f0      	beq.n	80080b4 <HAL_RCC_OscConfig+0x200>
 80080d2:	e01b      	b.n	800810c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80080d4:	4b09      	ldr	r3, [pc, #36]	@ (80080fc <HAL_RCC_OscConfig+0x248>)
 80080d6:	2200      	movs	r2, #0
 80080d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80080da:	f7fa fa3b 	bl	8002554 <HAL_GetTick>
 80080de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80080e0:	e00e      	b.n	8008100 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080e2:	f7fa fa37 	bl	8002554 <HAL_GetTick>
 80080e6:	4602      	mov	r2, r0
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	2b02      	cmp	r3, #2
 80080ee:	d907      	bls.n	8008100 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80080f0:	2303      	movs	r3, #3
 80080f2:	e150      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
 80080f4:	40023800 	.word	0x40023800
 80080f8:	42470000 	.word	0x42470000
 80080fc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008100:	4b88      	ldr	r3, [pc, #544]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 8008102:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1ea      	bne.n	80080e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 8097 	beq.w	8008248 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800811a:	2300      	movs	r3, #0
 800811c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800811e:	4b81      	ldr	r3, [pc, #516]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 8008120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008122:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10f      	bne.n	800814a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800812a:	2300      	movs	r3, #0
 800812c:	60bb      	str	r3, [r7, #8]
 800812e:	4b7d      	ldr	r3, [pc, #500]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 8008130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008132:	4a7c      	ldr	r2, [pc, #496]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 8008134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008138:	6413      	str	r3, [r2, #64]	@ 0x40
 800813a:	4b7a      	ldr	r3, [pc, #488]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 800813c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800813e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008142:	60bb      	str	r3, [r7, #8]
 8008144:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008146:	2301      	movs	r3, #1
 8008148:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800814a:	4b77      	ldr	r3, [pc, #476]	@ (8008328 <HAL_RCC_OscConfig+0x474>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008152:	2b00      	cmp	r3, #0
 8008154:	d118      	bne.n	8008188 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008156:	4b74      	ldr	r3, [pc, #464]	@ (8008328 <HAL_RCC_OscConfig+0x474>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a73      	ldr	r2, [pc, #460]	@ (8008328 <HAL_RCC_OscConfig+0x474>)
 800815c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008160:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008162:	f7fa f9f7 	bl	8002554 <HAL_GetTick>
 8008166:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008168:	e008      	b.n	800817c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800816a:	f7fa f9f3 	bl	8002554 <HAL_GetTick>
 800816e:	4602      	mov	r2, r0
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	1ad3      	subs	r3, r2, r3
 8008174:	2b02      	cmp	r3, #2
 8008176:	d901      	bls.n	800817c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008178:	2303      	movs	r3, #3
 800817a:	e10c      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800817c:	4b6a      	ldr	r3, [pc, #424]	@ (8008328 <HAL_RCC_OscConfig+0x474>)
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008184:	2b00      	cmp	r3, #0
 8008186:	d0f0      	beq.n	800816a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d106      	bne.n	800819e <HAL_RCC_OscConfig+0x2ea>
 8008190:	4b64      	ldr	r3, [pc, #400]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 8008192:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008194:	4a63      	ldr	r2, [pc, #396]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 8008196:	f043 0301 	orr.w	r3, r3, #1
 800819a:	6713      	str	r3, [r2, #112]	@ 0x70
 800819c:	e01c      	b.n	80081d8 <HAL_RCC_OscConfig+0x324>
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	689b      	ldr	r3, [r3, #8]
 80081a2:	2b05      	cmp	r3, #5
 80081a4:	d10c      	bne.n	80081c0 <HAL_RCC_OscConfig+0x30c>
 80081a6:	4b5f      	ldr	r3, [pc, #380]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 80081a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081aa:	4a5e      	ldr	r2, [pc, #376]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 80081ac:	f043 0304 	orr.w	r3, r3, #4
 80081b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80081b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 80081b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081b6:	4a5b      	ldr	r2, [pc, #364]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 80081b8:	f043 0301 	orr.w	r3, r3, #1
 80081bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80081be:	e00b      	b.n	80081d8 <HAL_RCC_OscConfig+0x324>
 80081c0:	4b58      	ldr	r3, [pc, #352]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 80081c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081c4:	4a57      	ldr	r2, [pc, #348]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 80081c6:	f023 0301 	bic.w	r3, r3, #1
 80081ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80081cc:	4b55      	ldr	r3, [pc, #340]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 80081ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80081d0:	4a54      	ldr	r2, [pc, #336]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 80081d2:	f023 0304 	bic.w	r3, r3, #4
 80081d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	689b      	ldr	r3, [r3, #8]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d015      	beq.n	800820c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081e0:	f7fa f9b8 	bl	8002554 <HAL_GetTick>
 80081e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081e6:	e00a      	b.n	80081fe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081e8:	f7fa f9b4 	bl	8002554 <HAL_GetTick>
 80081ec:	4602      	mov	r2, r0
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	1ad3      	subs	r3, r2, r3
 80081f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d901      	bls.n	80081fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80081fa:	2303      	movs	r3, #3
 80081fc:	e0cb      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80081fe:	4b49      	ldr	r3, [pc, #292]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 8008200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008202:	f003 0302 	and.w	r3, r3, #2
 8008206:	2b00      	cmp	r3, #0
 8008208:	d0ee      	beq.n	80081e8 <HAL_RCC_OscConfig+0x334>
 800820a:	e014      	b.n	8008236 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800820c:	f7fa f9a2 	bl	8002554 <HAL_GetTick>
 8008210:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008212:	e00a      	b.n	800822a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008214:	f7fa f99e 	bl	8002554 <HAL_GetTick>
 8008218:	4602      	mov	r2, r0
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	1ad3      	subs	r3, r2, r3
 800821e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008222:	4293      	cmp	r3, r2
 8008224:	d901      	bls.n	800822a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008226:	2303      	movs	r3, #3
 8008228:	e0b5      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800822a:	4b3e      	ldr	r3, [pc, #248]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 800822c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b00      	cmp	r3, #0
 8008234:	d1ee      	bne.n	8008214 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008236:	7dfb      	ldrb	r3, [r7, #23]
 8008238:	2b01      	cmp	r3, #1
 800823a:	d105      	bne.n	8008248 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800823c:	4b39      	ldr	r3, [pc, #228]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 800823e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008240:	4a38      	ldr	r2, [pc, #224]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 8008242:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008246:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	699b      	ldr	r3, [r3, #24]
 800824c:	2b00      	cmp	r3, #0
 800824e:	f000 80a1 	beq.w	8008394 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008252:	4b34      	ldr	r3, [pc, #208]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 8008254:	689b      	ldr	r3, [r3, #8]
 8008256:	f003 030c 	and.w	r3, r3, #12
 800825a:	2b08      	cmp	r3, #8
 800825c:	d05c      	beq.n	8008318 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	699b      	ldr	r3, [r3, #24]
 8008262:	2b02      	cmp	r3, #2
 8008264:	d141      	bne.n	80082ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008266:	4b31      	ldr	r3, [pc, #196]	@ (800832c <HAL_RCC_OscConfig+0x478>)
 8008268:	2200      	movs	r2, #0
 800826a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800826c:	f7fa f972 	bl	8002554 <HAL_GetTick>
 8008270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008272:	e008      	b.n	8008286 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008274:	f7fa f96e 	bl	8002554 <HAL_GetTick>
 8008278:	4602      	mov	r2, r0
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	1ad3      	subs	r3, r2, r3
 800827e:	2b02      	cmp	r3, #2
 8008280:	d901      	bls.n	8008286 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008282:	2303      	movs	r3, #3
 8008284:	e087      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008286:	4b27      	ldr	r3, [pc, #156]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1f0      	bne.n	8008274 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	69da      	ldr	r2, [r3, #28]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082a0:	019b      	lsls	r3, r3, #6
 80082a2:	431a      	orrs	r2, r3
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082a8:	085b      	lsrs	r3, r3, #1
 80082aa:	3b01      	subs	r3, #1
 80082ac:	041b      	lsls	r3, r3, #16
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082b4:	061b      	lsls	r3, r3, #24
 80082b6:	491b      	ldr	r1, [pc, #108]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 80082b8:	4313      	orrs	r3, r2
 80082ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082bc:	4b1b      	ldr	r3, [pc, #108]	@ (800832c <HAL_RCC_OscConfig+0x478>)
 80082be:	2201      	movs	r2, #1
 80082c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082c2:	f7fa f947 	bl	8002554 <HAL_GetTick>
 80082c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082c8:	e008      	b.n	80082dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082ca:	f7fa f943 	bl	8002554 <HAL_GetTick>
 80082ce:	4602      	mov	r2, r0
 80082d0:	693b      	ldr	r3, [r7, #16]
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d901      	bls.n	80082dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e05c      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80082dc:	4b11      	ldr	r3, [pc, #68]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d0f0      	beq.n	80082ca <HAL_RCC_OscConfig+0x416>
 80082e8:	e054      	b.n	8008394 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082ea:	4b10      	ldr	r3, [pc, #64]	@ (800832c <HAL_RCC_OscConfig+0x478>)
 80082ec:	2200      	movs	r2, #0
 80082ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082f0:	f7fa f930 	bl	8002554 <HAL_GetTick>
 80082f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082f6:	e008      	b.n	800830a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80082f8:	f7fa f92c 	bl	8002554 <HAL_GetTick>
 80082fc:	4602      	mov	r2, r0
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	1ad3      	subs	r3, r2, r3
 8008302:	2b02      	cmp	r3, #2
 8008304:	d901      	bls.n	800830a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008306:	2303      	movs	r3, #3
 8008308:	e045      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800830a:	4b06      	ldr	r3, [pc, #24]	@ (8008324 <HAL_RCC_OscConfig+0x470>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d1f0      	bne.n	80082f8 <HAL_RCC_OscConfig+0x444>
 8008316:	e03d      	b.n	8008394 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	699b      	ldr	r3, [r3, #24]
 800831c:	2b01      	cmp	r3, #1
 800831e:	d107      	bne.n	8008330 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	e038      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
 8008324:	40023800 	.word	0x40023800
 8008328:	40007000 	.word	0x40007000
 800832c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008330:	4b1b      	ldr	r3, [pc, #108]	@ (80083a0 <HAL_RCC_OscConfig+0x4ec>)
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	699b      	ldr	r3, [r3, #24]
 800833a:	2b01      	cmp	r3, #1
 800833c:	d028      	beq.n	8008390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008348:	429a      	cmp	r2, r3
 800834a:	d121      	bne.n	8008390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008356:	429a      	cmp	r2, r3
 8008358:	d11a      	bne.n	8008390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008360:	4013      	ands	r3, r2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008366:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008368:	4293      	cmp	r3, r2
 800836a:	d111      	bne.n	8008390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008376:	085b      	lsrs	r3, r3, #1
 8008378:	3b01      	subs	r3, #1
 800837a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800837c:	429a      	cmp	r2, r3
 800837e:	d107      	bne.n	8008390 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800838a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800838c:	429a      	cmp	r2, r3
 800838e:	d001      	beq.n	8008394 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e000      	b.n	8008396 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008394:	2300      	movs	r3, #0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3718      	adds	r7, #24
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	40023800 	.word	0x40023800

080083a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b084      	sub	sp, #16
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d101      	bne.n	80083b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	e0cc      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083b8:	4b68      	ldr	r3, [pc, #416]	@ (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 0307 	and.w	r3, r3, #7
 80083c0:	683a      	ldr	r2, [r7, #0]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d90c      	bls.n	80083e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083c6:	4b65      	ldr	r3, [pc, #404]	@ (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80083c8:	683a      	ldr	r2, [r7, #0]
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083ce:	4b63      	ldr	r3, [pc, #396]	@ (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	683a      	ldr	r2, [r7, #0]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d001      	beq.n	80083e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80083dc:	2301      	movs	r3, #1
 80083de:	e0b8      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f003 0302 	and.w	r3, r3, #2
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d020      	beq.n	800842e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0304 	and.w	r3, r3, #4
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d005      	beq.n	8008404 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80083f8:	4b59      	ldr	r3, [pc, #356]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 80083fa:	689b      	ldr	r3, [r3, #8]
 80083fc:	4a58      	ldr	r2, [pc, #352]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 80083fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008402:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0308 	and.w	r3, r3, #8
 800840c:	2b00      	cmp	r3, #0
 800840e:	d005      	beq.n	800841c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008410:	4b53      	ldr	r3, [pc, #332]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	4a52      	ldr	r2, [pc, #328]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008416:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800841a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800841c:	4b50      	ldr	r3, [pc, #320]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 800841e:	689b      	ldr	r3, [r3, #8]
 8008420:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	494d      	ldr	r1, [pc, #308]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 800842a:	4313      	orrs	r3, r2
 800842c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0301 	and.w	r3, r3, #1
 8008436:	2b00      	cmp	r3, #0
 8008438:	d044      	beq.n	80084c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	2b01      	cmp	r3, #1
 8008440:	d107      	bne.n	8008452 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008442:	4b47      	ldr	r3, [pc, #284]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800844a:	2b00      	cmp	r3, #0
 800844c:	d119      	bne.n	8008482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e07f      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	2b02      	cmp	r3, #2
 8008458:	d003      	beq.n	8008462 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800845e:	2b03      	cmp	r3, #3
 8008460:	d107      	bne.n	8008472 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008462:	4b3f      	ldr	r3, [pc, #252]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800846a:	2b00      	cmp	r3, #0
 800846c:	d109      	bne.n	8008482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e06f      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008472:	4b3b      	ldr	r3, [pc, #236]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f003 0302 	and.w	r3, r3, #2
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800847e:	2301      	movs	r3, #1
 8008480:	e067      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008482:	4b37      	ldr	r3, [pc, #220]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	f023 0203 	bic.w	r2, r3, #3
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	4934      	ldr	r1, [pc, #208]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008490:	4313      	orrs	r3, r2
 8008492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008494:	f7fa f85e 	bl	8002554 <HAL_GetTick>
 8008498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800849a:	e00a      	b.n	80084b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800849c:	f7fa f85a 	bl	8002554 <HAL_GetTick>
 80084a0:	4602      	mov	r2, r0
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	1ad3      	subs	r3, r2, r3
 80084a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d901      	bls.n	80084b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084ae:	2303      	movs	r3, #3
 80084b0:	e04f      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084b2:	4b2b      	ldr	r3, [pc, #172]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 80084b4:	689b      	ldr	r3, [r3, #8]
 80084b6:	f003 020c 	and.w	r2, r3, #12
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	009b      	lsls	r3, r3, #2
 80084c0:	429a      	cmp	r2, r3
 80084c2:	d1eb      	bne.n	800849c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084c4:	4b25      	ldr	r3, [pc, #148]	@ (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	683a      	ldr	r2, [r7, #0]
 80084ce:	429a      	cmp	r2, r3
 80084d0:	d20c      	bcs.n	80084ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084d2:	4b22      	ldr	r3, [pc, #136]	@ (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80084d4:	683a      	ldr	r2, [r7, #0]
 80084d6:	b2d2      	uxtb	r2, r2
 80084d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084da:	4b20      	ldr	r3, [pc, #128]	@ (800855c <HAL_RCC_ClockConfig+0x1b8>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	683a      	ldr	r2, [r7, #0]
 80084e4:	429a      	cmp	r2, r3
 80084e6:	d001      	beq.n	80084ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80084e8:	2301      	movs	r3, #1
 80084ea:	e032      	b.n	8008552 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	f003 0304 	and.w	r3, r3, #4
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d008      	beq.n	800850a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80084f8:	4b19      	ldr	r3, [pc, #100]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 80084fa:	689b      	ldr	r3, [r3, #8]
 80084fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	68db      	ldr	r3, [r3, #12]
 8008504:	4916      	ldr	r1, [pc, #88]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008506:	4313      	orrs	r3, r2
 8008508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f003 0308 	and.w	r3, r3, #8
 8008512:	2b00      	cmp	r3, #0
 8008514:	d009      	beq.n	800852a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008516:	4b12      	ldr	r3, [pc, #72]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008518:	689b      	ldr	r3, [r3, #8]
 800851a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	490e      	ldr	r1, [pc, #56]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008526:	4313      	orrs	r3, r2
 8008528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800852a:	f000 f821 	bl	8008570 <HAL_RCC_GetSysClockFreq>
 800852e:	4602      	mov	r2, r0
 8008530:	4b0b      	ldr	r3, [pc, #44]	@ (8008560 <HAL_RCC_ClockConfig+0x1bc>)
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	091b      	lsrs	r3, r3, #4
 8008536:	f003 030f 	and.w	r3, r3, #15
 800853a:	490a      	ldr	r1, [pc, #40]	@ (8008564 <HAL_RCC_ClockConfig+0x1c0>)
 800853c:	5ccb      	ldrb	r3, [r1, r3]
 800853e:	fa22 f303 	lsr.w	r3, r2, r3
 8008542:	4a09      	ldr	r2, [pc, #36]	@ (8008568 <HAL_RCC_ClockConfig+0x1c4>)
 8008544:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008546:	4b09      	ldr	r3, [pc, #36]	@ (800856c <HAL_RCC_ClockConfig+0x1c8>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f7f9 ffbe 	bl	80024cc <HAL_InitTick>

  return HAL_OK;
 8008550:	2300      	movs	r3, #0
}
 8008552:	4618      	mov	r0, r3
 8008554:	3710      	adds	r7, #16
 8008556:	46bd      	mov	sp, r7
 8008558:	bd80      	pop	{r7, pc}
 800855a:	bf00      	nop
 800855c:	40023c00 	.word	0x40023c00
 8008560:	40023800 	.word	0x40023800
 8008564:	0800e548 	.word	0x0800e548
 8008568:	2000002c 	.word	0x2000002c
 800856c:	20000030 	.word	0x20000030

08008570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008570:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008574:	b090      	sub	sp, #64	@ 0x40
 8008576:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008578:	2300      	movs	r3, #0
 800857a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800857c:	2300      	movs	r3, #0
 800857e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008580:	2300      	movs	r3, #0
 8008582:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008584:	2300      	movs	r3, #0
 8008586:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008588:	4b59      	ldr	r3, [pc, #356]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800858a:	689b      	ldr	r3, [r3, #8]
 800858c:	f003 030c 	and.w	r3, r3, #12
 8008590:	2b08      	cmp	r3, #8
 8008592:	d00d      	beq.n	80085b0 <HAL_RCC_GetSysClockFreq+0x40>
 8008594:	2b08      	cmp	r3, #8
 8008596:	f200 80a1 	bhi.w	80086dc <HAL_RCC_GetSysClockFreq+0x16c>
 800859a:	2b00      	cmp	r3, #0
 800859c:	d002      	beq.n	80085a4 <HAL_RCC_GetSysClockFreq+0x34>
 800859e:	2b04      	cmp	r3, #4
 80085a0:	d003      	beq.n	80085aa <HAL_RCC_GetSysClockFreq+0x3a>
 80085a2:	e09b      	b.n	80086dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085a4:	4b53      	ldr	r3, [pc, #332]	@ (80086f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80085a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80085a8:	e09b      	b.n	80086e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085aa:	4b53      	ldr	r3, [pc, #332]	@ (80086f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80085ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80085ae:	e098      	b.n	80086e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085b0:	4b4f      	ldr	r3, [pc, #316]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80085b8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085ba:	4b4d      	ldr	r3, [pc, #308]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d028      	beq.n	8008618 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085c6:	4b4a      	ldr	r3, [pc, #296]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	099b      	lsrs	r3, r3, #6
 80085cc:	2200      	movs	r2, #0
 80085ce:	623b      	str	r3, [r7, #32]
 80085d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80085d8:	2100      	movs	r1, #0
 80085da:	4b47      	ldr	r3, [pc, #284]	@ (80086f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80085dc:	fb03 f201 	mul.w	r2, r3, r1
 80085e0:	2300      	movs	r3, #0
 80085e2:	fb00 f303 	mul.w	r3, r0, r3
 80085e6:	4413      	add	r3, r2
 80085e8:	4a43      	ldr	r2, [pc, #268]	@ (80086f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80085ea:	fba0 1202 	umull	r1, r2, r0, r2
 80085ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80085f0:	460a      	mov	r2, r1
 80085f2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80085f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80085f6:	4413      	add	r3, r2
 80085f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80085fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085fc:	2200      	movs	r2, #0
 80085fe:	61bb      	str	r3, [r7, #24]
 8008600:	61fa      	str	r2, [r7, #28]
 8008602:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008606:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800860a:	f7f7 fde5 	bl	80001d8 <__aeabi_uldivmod>
 800860e:	4602      	mov	r2, r0
 8008610:	460b      	mov	r3, r1
 8008612:	4613      	mov	r3, r2
 8008614:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008616:	e053      	b.n	80086c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008618:	4b35      	ldr	r3, [pc, #212]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800861a:	685b      	ldr	r3, [r3, #4]
 800861c:	099b      	lsrs	r3, r3, #6
 800861e:	2200      	movs	r2, #0
 8008620:	613b      	str	r3, [r7, #16]
 8008622:	617a      	str	r2, [r7, #20]
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800862a:	f04f 0b00 	mov.w	fp, #0
 800862e:	4652      	mov	r2, sl
 8008630:	465b      	mov	r3, fp
 8008632:	f04f 0000 	mov.w	r0, #0
 8008636:	f04f 0100 	mov.w	r1, #0
 800863a:	0159      	lsls	r1, r3, #5
 800863c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008640:	0150      	lsls	r0, r2, #5
 8008642:	4602      	mov	r2, r0
 8008644:	460b      	mov	r3, r1
 8008646:	ebb2 080a 	subs.w	r8, r2, sl
 800864a:	eb63 090b 	sbc.w	r9, r3, fp
 800864e:	f04f 0200 	mov.w	r2, #0
 8008652:	f04f 0300 	mov.w	r3, #0
 8008656:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800865a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800865e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008662:	ebb2 0408 	subs.w	r4, r2, r8
 8008666:	eb63 0509 	sbc.w	r5, r3, r9
 800866a:	f04f 0200 	mov.w	r2, #0
 800866e:	f04f 0300 	mov.w	r3, #0
 8008672:	00eb      	lsls	r3, r5, #3
 8008674:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008678:	00e2      	lsls	r2, r4, #3
 800867a:	4614      	mov	r4, r2
 800867c:	461d      	mov	r5, r3
 800867e:	eb14 030a 	adds.w	r3, r4, sl
 8008682:	603b      	str	r3, [r7, #0]
 8008684:	eb45 030b 	adc.w	r3, r5, fp
 8008688:	607b      	str	r3, [r7, #4]
 800868a:	f04f 0200 	mov.w	r2, #0
 800868e:	f04f 0300 	mov.w	r3, #0
 8008692:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008696:	4629      	mov	r1, r5
 8008698:	028b      	lsls	r3, r1, #10
 800869a:	4621      	mov	r1, r4
 800869c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80086a0:	4621      	mov	r1, r4
 80086a2:	028a      	lsls	r2, r1, #10
 80086a4:	4610      	mov	r0, r2
 80086a6:	4619      	mov	r1, r3
 80086a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086aa:	2200      	movs	r2, #0
 80086ac:	60bb      	str	r3, [r7, #8]
 80086ae:	60fa      	str	r2, [r7, #12]
 80086b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80086b4:	f7f7 fd90 	bl	80001d8 <__aeabi_uldivmod>
 80086b8:	4602      	mov	r2, r0
 80086ba:	460b      	mov	r3, r1
 80086bc:	4613      	mov	r3, r2
 80086be:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80086c0:	4b0b      	ldr	r3, [pc, #44]	@ (80086f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	0c1b      	lsrs	r3, r3, #16
 80086c6:	f003 0303 	and.w	r3, r3, #3
 80086ca:	3301      	adds	r3, #1
 80086cc:	005b      	lsls	r3, r3, #1
 80086ce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80086d0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80086d8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80086da:	e002      	b.n	80086e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80086dc:	4b05      	ldr	r3, [pc, #20]	@ (80086f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80086de:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80086e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80086e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3740      	adds	r7, #64	@ 0x40
 80086e8:	46bd      	mov	sp, r7
 80086ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086ee:	bf00      	nop
 80086f0:	40023800 	.word	0x40023800
 80086f4:	00f42400 	.word	0x00f42400
 80086f8:	017d7840 	.word	0x017d7840

080086fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008700:	4b03      	ldr	r3, [pc, #12]	@ (8008710 <HAL_RCC_GetHCLKFreq+0x14>)
 8008702:	681b      	ldr	r3, [r3, #0]
}
 8008704:	4618      	mov	r0, r3
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
 800870e:	bf00      	nop
 8008710:	2000002c 	.word	0x2000002c

08008714 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008718:	f7ff fff0 	bl	80086fc <HAL_RCC_GetHCLKFreq>
 800871c:	4602      	mov	r2, r0
 800871e:	4b05      	ldr	r3, [pc, #20]	@ (8008734 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	0a9b      	lsrs	r3, r3, #10
 8008724:	f003 0307 	and.w	r3, r3, #7
 8008728:	4903      	ldr	r1, [pc, #12]	@ (8008738 <HAL_RCC_GetPCLK1Freq+0x24>)
 800872a:	5ccb      	ldrb	r3, [r1, r3]
 800872c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008730:	4618      	mov	r0, r3
 8008732:	bd80      	pop	{r7, pc}
 8008734:	40023800 	.word	0x40023800
 8008738:	0800e558 	.word	0x0800e558

0800873c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008740:	f7ff ffdc 	bl	80086fc <HAL_RCC_GetHCLKFreq>
 8008744:	4602      	mov	r2, r0
 8008746:	4b05      	ldr	r3, [pc, #20]	@ (800875c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	0b5b      	lsrs	r3, r3, #13
 800874c:	f003 0307 	and.w	r3, r3, #7
 8008750:	4903      	ldr	r1, [pc, #12]	@ (8008760 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008752:	5ccb      	ldrb	r3, [r1, r3]
 8008754:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008758:	4618      	mov	r0, r3
 800875a:	bd80      	pop	{r7, pc}
 800875c:	40023800 	.word	0x40023800
 8008760:	0800e558 	.word	0x0800e558

08008764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b082      	sub	sp, #8
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d101      	bne.n	8008776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008772:	2301      	movs	r3, #1
 8008774:	e041      	b.n	80087fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800877c:	b2db      	uxtb	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d106      	bne.n	8008790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2200      	movs	r2, #0
 8008786:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7f9 fa00 	bl	8001b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681a      	ldr	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	3304      	adds	r3, #4
 80087a0:	4619      	mov	r1, r3
 80087a2:	4610      	mov	r0, r2
 80087a4:	f000 fbce 	bl	8008f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2201      	movs	r2, #1
 80087ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2201      	movs	r2, #1
 80087c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	2201      	movs	r2, #1
 80087dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2201      	movs	r2, #1
 80087e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2201      	movs	r2, #1
 80087ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2201      	movs	r2, #1
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80087f8:	2300      	movs	r3, #0
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}
	...

08008804 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008804:	b480      	push	{r7}
 8008806:	b085      	sub	sp, #20
 8008808:	af00      	add	r7, sp, #0
 800880a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	d001      	beq.n	800881c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008818:	2301      	movs	r3, #1
 800881a:	e044      	b.n	80088a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2202      	movs	r2, #2
 8008820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68da      	ldr	r2, [r3, #12]
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f042 0201 	orr.w	r2, r2, #1
 8008832:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a1e      	ldr	r2, [pc, #120]	@ (80088b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d018      	beq.n	8008870 <HAL_TIM_Base_Start_IT+0x6c>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008846:	d013      	beq.n	8008870 <HAL_TIM_Base_Start_IT+0x6c>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a1a      	ldr	r2, [pc, #104]	@ (80088b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d00e      	beq.n	8008870 <HAL_TIM_Base_Start_IT+0x6c>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a19      	ldr	r2, [pc, #100]	@ (80088bc <HAL_TIM_Base_Start_IT+0xb8>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d009      	beq.n	8008870 <HAL_TIM_Base_Start_IT+0x6c>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a17      	ldr	r2, [pc, #92]	@ (80088c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d004      	beq.n	8008870 <HAL_TIM_Base_Start_IT+0x6c>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a16      	ldr	r2, [pc, #88]	@ (80088c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d111      	bne.n	8008894 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	f003 0307 	and.w	r3, r3, #7
 800887a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2b06      	cmp	r3, #6
 8008880:	d010      	beq.n	80088a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681a      	ldr	r2, [r3, #0]
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f042 0201 	orr.w	r2, r2, #1
 8008890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008892:	e007      	b.n	80088a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	681a      	ldr	r2, [r3, #0]
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f042 0201 	orr.w	r2, r2, #1
 80088a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3714      	adds	r7, #20
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	40010000 	.word	0x40010000
 80088b8:	40000400 	.word	0x40000400
 80088bc:	40000800 	.word	0x40000800
 80088c0:	40000c00 	.word	0x40000c00
 80088c4:	40014000 	.word	0x40014000

080088c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d101      	bne.n	80088da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e041      	b.n	800895e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088e0:	b2db      	uxtb	r3, r3
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d106      	bne.n	80088f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f839 	bl	8008966 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	3304      	adds	r3, #4
 8008904:	4619      	mov	r1, r3
 8008906:	4610      	mov	r0, r2
 8008908:	f000 fb1c 	bl	8008f44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2201      	movs	r2, #1
 8008948:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2201      	movs	r2, #1
 8008950:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2201      	movs	r2, #1
 8008958:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008966:	b480      	push	{r7}
 8008968:	b083      	sub	sp, #12
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800896e:	bf00      	nop
 8008970:	370c      	adds	r7, #12
 8008972:	46bd      	mov	sp, r7
 8008974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008978:	4770      	bx	lr

0800897a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b084      	sub	sp, #16
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	68db      	ldr	r3, [r3, #12]
 8008988:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	691b      	ldr	r3, [r3, #16]
 8008990:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008992:	68bb      	ldr	r3, [r7, #8]
 8008994:	f003 0302 	and.w	r3, r3, #2
 8008998:	2b00      	cmp	r3, #0
 800899a:	d020      	beq.n	80089de <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	f003 0302 	and.w	r3, r3, #2
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d01b      	beq.n	80089de <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	f06f 0202 	mvn.w	r2, #2
 80089ae:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	699b      	ldr	r3, [r3, #24]
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d003      	beq.n	80089cc <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 fa9e 	bl	8008f06 <HAL_TIM_IC_CaptureCallback>
 80089ca:	e005      	b.n	80089d8 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f000 fa90 	bl	8008ef2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 faa1 	bl	8008f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2200      	movs	r2, #0
 80089dc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	f003 0304 	and.w	r3, r3, #4
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d020      	beq.n	8008a2a <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f003 0304 	and.w	r3, r3, #4
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d01b      	beq.n	8008a2a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f06f 0204 	mvn.w	r2, #4
 80089fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	699b      	ldr	r3, [r3, #24]
 8008a08:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d003      	beq.n	8008a18 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f000 fa78 	bl	8008f06 <HAL_TIM_IC_CaptureCallback>
 8008a16:	e005      	b.n	8008a24 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a18:	6878      	ldr	r0, [r7, #4]
 8008a1a:	f000 fa6a 	bl	8008ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa7b 	bl	8008f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	f003 0308 	and.w	r3, r3, #8
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d020      	beq.n	8008a76 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	f003 0308 	and.w	r3, r3, #8
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d01b      	beq.n	8008a76 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f06f 0208 	mvn.w	r2, #8
 8008a46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2204      	movs	r2, #4
 8008a4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	f003 0303 	and.w	r3, r3, #3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d003      	beq.n	8008a64 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a5c:	6878      	ldr	r0, [r7, #4]
 8008a5e:	f000 fa52 	bl	8008f06 <HAL_TIM_IC_CaptureCallback>
 8008a62:	e005      	b.n	8008a70 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a64:	6878      	ldr	r0, [r7, #4]
 8008a66:	f000 fa44 	bl	8008ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 fa55 	bl	8008f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2200      	movs	r2, #0
 8008a74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	f003 0310 	and.w	r3, r3, #16
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d020      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f003 0310 	and.w	r3, r3, #16
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d01b      	beq.n	8008ac2 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f06f 0210 	mvn.w	r2, #16
 8008a92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2208      	movs	r2, #8
 8008a98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	69db      	ldr	r3, [r3, #28]
 8008aa0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d003      	beq.n	8008ab0 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f000 fa2c 	bl	8008f06 <HAL_TIM_IC_CaptureCallback>
 8008aae:	e005      	b.n	8008abc <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ab0:	6878      	ldr	r0, [r7, #4]
 8008ab2:	f000 fa1e 	bl	8008ef2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f000 fa2f 	bl	8008f1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008ac2:	68bb      	ldr	r3, [r7, #8]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d00c      	beq.n	8008ae6 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d007      	beq.n	8008ae6 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f06f 0201 	mvn.w	r2, #1
 8008ade:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f7f7 fdbd 	bl	8000660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d00c      	beq.n	8008b0a <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d007      	beq.n	8008b0a <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fdd3 	bl	80096b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00c      	beq.n	8008b2e <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d007      	beq.n	8008b2e <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008b26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f000 fa00 	bl	8008f2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	f003 0320 	and.w	r3, r3, #32
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d00c      	beq.n	8008b52 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f003 0320 	and.w	r3, r3, #32
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d007      	beq.n	8008b52 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f06f 0220 	mvn.w	r2, #32
 8008b4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fda5 	bl	800969c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008b52:	bf00      	nop
 8008b54:	3710      	adds	r7, #16
 8008b56:	46bd      	mov	sp, r7
 8008b58:	bd80      	pop	{r7, pc}
	...

08008b5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	60b9      	str	r1, [r7, #8]
 8008b66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008b72:	2b01      	cmp	r3, #1
 8008b74:	d101      	bne.n	8008b7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008b76:	2302      	movs	r3, #2
 8008b78:	e0ae      	b.n	8008cd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	2201      	movs	r2, #1
 8008b7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	2b0c      	cmp	r3, #12
 8008b86:	f200 809f 	bhi.w	8008cc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b90:	08008bc5 	.word	0x08008bc5
 8008b94:	08008cc9 	.word	0x08008cc9
 8008b98:	08008cc9 	.word	0x08008cc9
 8008b9c:	08008cc9 	.word	0x08008cc9
 8008ba0:	08008c05 	.word	0x08008c05
 8008ba4:	08008cc9 	.word	0x08008cc9
 8008ba8:	08008cc9 	.word	0x08008cc9
 8008bac:	08008cc9 	.word	0x08008cc9
 8008bb0:	08008c47 	.word	0x08008c47
 8008bb4:	08008cc9 	.word	0x08008cc9
 8008bb8:	08008cc9 	.word	0x08008cc9
 8008bbc:	08008cc9 	.word	0x08008cc9
 8008bc0:	08008c87 	.word	0x08008c87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	68b9      	ldr	r1, [r7, #8]
 8008bca:	4618      	mov	r0, r3
 8008bcc:	f000 fa40 	bl	8009050 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	699a      	ldr	r2, [r3, #24]
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	f042 0208 	orr.w	r2, r2, #8
 8008bde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	699a      	ldr	r2, [r3, #24]
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f022 0204 	bic.w	r2, r2, #4
 8008bee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6999      	ldr	r1, [r3, #24]
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	691a      	ldr	r2, [r3, #16]
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	619a      	str	r2, [r3, #24]
      break;
 8008c02:	e064      	b.n	8008cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68b9      	ldr	r1, [r7, #8]
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f000 fa86 	bl	800911c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	699a      	ldr	r2, [r3, #24]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008c1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	699a      	ldr	r2, [r3, #24]
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	6999      	ldr	r1, [r3, #24]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	691b      	ldr	r3, [r3, #16]
 8008c3a:	021a      	lsls	r2, r3, #8
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	430a      	orrs	r2, r1
 8008c42:	619a      	str	r2, [r3, #24]
      break;
 8008c44:	e043      	b.n	8008cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	68b9      	ldr	r1, [r7, #8]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f000 fad1 	bl	80091f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	69da      	ldr	r2, [r3, #28]
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	f042 0208 	orr.w	r2, r2, #8
 8008c60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	69da      	ldr	r2, [r3, #28]
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	f022 0204 	bic.w	r2, r2, #4
 8008c70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69d9      	ldr	r1, [r3, #28]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	691a      	ldr	r2, [r3, #16]
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	430a      	orrs	r2, r1
 8008c82:	61da      	str	r2, [r3, #28]
      break;
 8008c84:	e023      	b.n	8008cce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	68b9      	ldr	r1, [r7, #8]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f000 fb1b 	bl	80092c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	69da      	ldr	r2, [r3, #28]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ca0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	69da      	ldr	r2, [r3, #28]
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008cb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	69d9      	ldr	r1, [r3, #28]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	021a      	lsls	r2, r3, #8
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	61da      	str	r2, [r3, #28]
      break;
 8008cc6:	e002      	b.n	8008cce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	75fb      	strb	r3, [r7, #23]
      break;
 8008ccc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008cd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3718      	adds	r7, #24
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cea:	2300      	movs	r3, #0
 8008cec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d101      	bne.n	8008cfc <HAL_TIM_ConfigClockSource+0x1c>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	e0b4      	b.n	8008e66 <HAL_TIM_ConfigClockSource+0x186>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	689b      	ldr	r3, [r3, #8]
 8008d12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008d1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d1c:	68bb      	ldr	r3, [r7, #8]
 8008d1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	68ba      	ldr	r2, [r7, #8]
 8008d2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d34:	d03e      	beq.n	8008db4 <HAL_TIM_ConfigClockSource+0xd4>
 8008d36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008d3a:	f200 8087 	bhi.w	8008e4c <HAL_TIM_ConfigClockSource+0x16c>
 8008d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d42:	f000 8086 	beq.w	8008e52 <HAL_TIM_ConfigClockSource+0x172>
 8008d46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008d4a:	d87f      	bhi.n	8008e4c <HAL_TIM_ConfigClockSource+0x16c>
 8008d4c:	2b70      	cmp	r3, #112	@ 0x70
 8008d4e:	d01a      	beq.n	8008d86 <HAL_TIM_ConfigClockSource+0xa6>
 8008d50:	2b70      	cmp	r3, #112	@ 0x70
 8008d52:	d87b      	bhi.n	8008e4c <HAL_TIM_ConfigClockSource+0x16c>
 8008d54:	2b60      	cmp	r3, #96	@ 0x60
 8008d56:	d050      	beq.n	8008dfa <HAL_TIM_ConfigClockSource+0x11a>
 8008d58:	2b60      	cmp	r3, #96	@ 0x60
 8008d5a:	d877      	bhi.n	8008e4c <HAL_TIM_ConfigClockSource+0x16c>
 8008d5c:	2b50      	cmp	r3, #80	@ 0x50
 8008d5e:	d03c      	beq.n	8008dda <HAL_TIM_ConfigClockSource+0xfa>
 8008d60:	2b50      	cmp	r3, #80	@ 0x50
 8008d62:	d873      	bhi.n	8008e4c <HAL_TIM_ConfigClockSource+0x16c>
 8008d64:	2b40      	cmp	r3, #64	@ 0x40
 8008d66:	d058      	beq.n	8008e1a <HAL_TIM_ConfigClockSource+0x13a>
 8008d68:	2b40      	cmp	r3, #64	@ 0x40
 8008d6a:	d86f      	bhi.n	8008e4c <HAL_TIM_ConfigClockSource+0x16c>
 8008d6c:	2b30      	cmp	r3, #48	@ 0x30
 8008d6e:	d064      	beq.n	8008e3a <HAL_TIM_ConfigClockSource+0x15a>
 8008d70:	2b30      	cmp	r3, #48	@ 0x30
 8008d72:	d86b      	bhi.n	8008e4c <HAL_TIM_ConfigClockSource+0x16c>
 8008d74:	2b20      	cmp	r3, #32
 8008d76:	d060      	beq.n	8008e3a <HAL_TIM_ConfigClockSource+0x15a>
 8008d78:	2b20      	cmp	r3, #32
 8008d7a:	d867      	bhi.n	8008e4c <HAL_TIM_ConfigClockSource+0x16c>
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d05c      	beq.n	8008e3a <HAL_TIM_ConfigClockSource+0x15a>
 8008d80:	2b10      	cmp	r3, #16
 8008d82:	d05a      	beq.n	8008e3a <HAL_TIM_ConfigClockSource+0x15a>
 8008d84:	e062      	b.n	8008e4c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008d8a:	683b      	ldr	r3, [r7, #0]
 8008d8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008d96:	f000 fbf2 	bl	800957e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	689b      	ldr	r3, [r3, #8]
 8008da0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008da8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	609a      	str	r2, [r3, #8]
      break;
 8008db2:	e04f      	b.n	8008e54 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008dc4:	f000 fbdb 	bl	800957e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	689a      	ldr	r2, [r3, #8]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008dd6:	609a      	str	r2, [r3, #8]
      break;
 8008dd8:	e03c      	b.n	8008e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008de6:	461a      	mov	r2, r3
 8008de8:	f000 fb4f 	bl	800948a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2150      	movs	r1, #80	@ 0x50
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fba8 	bl	8009548 <TIM_ITRx_SetConfig>
      break;
 8008df8:	e02c      	b.n	8008e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008e06:	461a      	mov	r2, r3
 8008e08:	f000 fb6e 	bl	80094e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2160      	movs	r1, #96	@ 0x60
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 fb98 	bl	8009548 <TIM_ITRx_SetConfig>
      break;
 8008e18:	e01c      	b.n	8008e54 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008e26:	461a      	mov	r2, r3
 8008e28:	f000 fb2f 	bl	800948a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2140      	movs	r1, #64	@ 0x40
 8008e32:	4618      	mov	r0, r3
 8008e34:	f000 fb88 	bl	8009548 <TIM_ITRx_SetConfig>
      break;
 8008e38:	e00c      	b.n	8008e54 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	4619      	mov	r1, r3
 8008e44:	4610      	mov	r0, r2
 8008e46:	f000 fb7f 	bl	8009548 <TIM_ITRx_SetConfig>
      break;
 8008e4a:	e003      	b.n	8008e54 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008e50:	e000      	b.n	8008e54 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008e52:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b082      	sub	sp, #8
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
 8008e76:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e7e:	2b01      	cmp	r3, #1
 8008e80:	d101      	bne.n	8008e86 <HAL_TIM_SlaveConfigSynchro+0x18>
 8008e82:	2302      	movs	r3, #2
 8008e84:	e031      	b.n	8008eea <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2201      	movs	r2, #1
 8008e8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2202      	movs	r2, #2
 8008e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008e96:	6839      	ldr	r1, [r7, #0]
 8008e98:	6878      	ldr	r0, [r7, #4]
 8008e9a:	f000 fa65 	bl	8009368 <TIM_SlaveTimer_SetConfig>
 8008e9e:	4603      	mov	r3, r0
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d009      	beq.n	8008eb8 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2201      	movs	r2, #1
 8008ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e018      	b.n	8008eea <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	68da      	ldr	r2, [r3, #12]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008ec6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68da      	ldr	r2, [r3, #12]
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8008ed6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2201      	movs	r2, #1
 8008edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	3708      	adds	r7, #8
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bd80      	pop	{r7, pc}

08008ef2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	b083      	sub	sp, #12
 8008ef6:	af00      	add	r7, sp, #0
 8008ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008efa:	bf00      	nop
 8008efc:	370c      	adds	r7, #12
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b083      	sub	sp, #12
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr

08008f1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f1a:	b480      	push	{r7}
 8008f1c:	b083      	sub	sp, #12
 8008f1e:	af00      	add	r7, sp, #0
 8008f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f22:	bf00      	nop
 8008f24:	370c      	adds	r7, #12
 8008f26:	46bd      	mov	sp, r7
 8008f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2c:	4770      	bx	lr

08008f2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f2e:	b480      	push	{r7}
 8008f30:	b083      	sub	sp, #12
 8008f32:	af00      	add	r7, sp, #0
 8008f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f36:	bf00      	nop
 8008f38:	370c      	adds	r7, #12
 8008f3a:	46bd      	mov	sp, r7
 8008f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f40:	4770      	bx	lr
	...

08008f44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f44:	b480      	push	{r7}
 8008f46:	b085      	sub	sp, #20
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
 8008f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	4a37      	ldr	r2, [pc, #220]	@ (8009034 <TIM_Base_SetConfig+0xf0>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d00f      	beq.n	8008f7c <TIM_Base_SetConfig+0x38>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f62:	d00b      	beq.n	8008f7c <TIM_Base_SetConfig+0x38>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4a34      	ldr	r2, [pc, #208]	@ (8009038 <TIM_Base_SetConfig+0xf4>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d007      	beq.n	8008f7c <TIM_Base_SetConfig+0x38>
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	4a33      	ldr	r2, [pc, #204]	@ (800903c <TIM_Base_SetConfig+0xf8>)
 8008f70:	4293      	cmp	r3, r2
 8008f72:	d003      	beq.n	8008f7c <TIM_Base_SetConfig+0x38>
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	4a32      	ldr	r2, [pc, #200]	@ (8009040 <TIM_Base_SetConfig+0xfc>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d108      	bne.n	8008f8e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	685b      	ldr	r3, [r3, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a28      	ldr	r2, [pc, #160]	@ (8009034 <TIM_Base_SetConfig+0xf0>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d01b      	beq.n	8008fce <TIM_Base_SetConfig+0x8a>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f9c:	d017      	beq.n	8008fce <TIM_Base_SetConfig+0x8a>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a25      	ldr	r2, [pc, #148]	@ (8009038 <TIM_Base_SetConfig+0xf4>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d013      	beq.n	8008fce <TIM_Base_SetConfig+0x8a>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	4a24      	ldr	r2, [pc, #144]	@ (800903c <TIM_Base_SetConfig+0xf8>)
 8008faa:	4293      	cmp	r3, r2
 8008fac:	d00f      	beq.n	8008fce <TIM_Base_SetConfig+0x8a>
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a23      	ldr	r2, [pc, #140]	@ (8009040 <TIM_Base_SetConfig+0xfc>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d00b      	beq.n	8008fce <TIM_Base_SetConfig+0x8a>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a22      	ldr	r2, [pc, #136]	@ (8009044 <TIM_Base_SetConfig+0x100>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d007      	beq.n	8008fce <TIM_Base_SetConfig+0x8a>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a21      	ldr	r2, [pc, #132]	@ (8009048 <TIM_Base_SetConfig+0x104>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d003      	beq.n	8008fce <TIM_Base_SetConfig+0x8a>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	4a20      	ldr	r2, [pc, #128]	@ (800904c <TIM_Base_SetConfig+0x108>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d108      	bne.n	8008fe0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	68fa      	ldr	r2, [r7, #12]
 8008fdc:	4313      	orrs	r3, r2
 8008fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	695b      	ldr	r3, [r3, #20]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	689a      	ldr	r2, [r3, #8]
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a0c      	ldr	r2, [pc, #48]	@ (8009034 <TIM_Base_SetConfig+0xf0>)
 8009002:	4293      	cmp	r3, r2
 8009004:	d103      	bne.n	800900e <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	691a      	ldr	r2, [r3, #16]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f043 0204 	orr.w	r2, r3, #4
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	68fa      	ldr	r2, [r7, #12]
 8009024:	601a      	str	r2, [r3, #0]
}
 8009026:	bf00      	nop
 8009028:	3714      	adds	r7, #20
 800902a:	46bd      	mov	sp, r7
 800902c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009030:	4770      	bx	lr
 8009032:	bf00      	nop
 8009034:	40010000 	.word	0x40010000
 8009038:	40000400 	.word	0x40000400
 800903c:	40000800 	.word	0x40000800
 8009040:	40000c00 	.word	0x40000c00
 8009044:	40014000 	.word	0x40014000
 8009048:	40014400 	.word	0x40014400
 800904c:	40014800 	.word	0x40014800

08009050 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a1b      	ldr	r3, [r3, #32]
 8009064:	f023 0201 	bic.w	r2, r3, #1
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	699b      	ldr	r3, [r3, #24]
 8009076:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800907e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 0303 	bic.w	r3, r3, #3
 8009086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f023 0302 	bic.w	r3, r3, #2
 8009098:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	689b      	ldr	r3, [r3, #8]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	4313      	orrs	r3, r2
 80090a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a1c      	ldr	r2, [pc, #112]	@ (8009118 <TIM_OC1_SetConfig+0xc8>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d10c      	bne.n	80090c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f023 0308 	bic.w	r3, r3, #8
 80090b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	4313      	orrs	r3, r2
 80090bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	f023 0304 	bic.w	r3, r3, #4
 80090c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a13      	ldr	r2, [pc, #76]	@ (8009118 <TIM_OC1_SetConfig+0xc8>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d111      	bne.n	80090f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80090d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80090d6:	693b      	ldr	r3, [r7, #16]
 80090d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80090dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	695b      	ldr	r3, [r3, #20]
 80090e2:	693a      	ldr	r2, [r7, #16]
 80090e4:	4313      	orrs	r3, r2
 80090e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	693a      	ldr	r2, [r7, #16]
 80090ee:	4313      	orrs	r3, r2
 80090f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	685a      	ldr	r2, [r3, #4]
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	697a      	ldr	r2, [r7, #20]
 800910a:	621a      	str	r2, [r3, #32]
}
 800910c:	bf00      	nop
 800910e:	371c      	adds	r7, #28
 8009110:	46bd      	mov	sp, r7
 8009112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009116:	4770      	bx	lr
 8009118:	40010000 	.word	0x40010000

0800911c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800911c:	b480      	push	{r7}
 800911e:	b087      	sub	sp, #28
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
 8009124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a1b      	ldr	r3, [r3, #32]
 8009130:	f023 0210 	bic.w	r2, r3, #16
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	699b      	ldr	r3, [r3, #24]
 8009142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800914a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009152:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	021b      	lsls	r3, r3, #8
 800915a:	68fa      	ldr	r2, [r7, #12]
 800915c:	4313      	orrs	r3, r2
 800915e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009160:	697b      	ldr	r3, [r7, #20]
 8009162:	f023 0320 	bic.w	r3, r3, #32
 8009166:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	011b      	lsls	r3, r3, #4
 800916e:	697a      	ldr	r2, [r7, #20]
 8009170:	4313      	orrs	r3, r2
 8009172:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a1e      	ldr	r2, [pc, #120]	@ (80091f0 <TIM_OC2_SetConfig+0xd4>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d10d      	bne.n	8009198 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	68db      	ldr	r3, [r3, #12]
 8009188:	011b      	lsls	r3, r3, #4
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4313      	orrs	r3, r2
 800918e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009190:	697b      	ldr	r3, [r7, #20]
 8009192:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009196:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	4a15      	ldr	r2, [pc, #84]	@ (80091f0 <TIM_OC2_SetConfig+0xd4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d113      	bne.n	80091c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	009b      	lsls	r3, r3, #2
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	4313      	orrs	r3, r2
 80091ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	009b      	lsls	r3, r3, #2
 80091c2:	693a      	ldr	r2, [r7, #16]
 80091c4:	4313      	orrs	r3, r2
 80091c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	68fa      	ldr	r2, [r7, #12]
 80091d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	685a      	ldr	r2, [r3, #4]
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	697a      	ldr	r2, [r7, #20]
 80091e0:	621a      	str	r2, [r3, #32]
}
 80091e2:	bf00      	nop
 80091e4:	371c      	adds	r7, #28
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
 80091ee:	bf00      	nop
 80091f0:	40010000 	.word	0x40010000

080091f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b087      	sub	sp, #28
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6a1b      	ldr	r3, [r3, #32]
 8009202:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	6a1b      	ldr	r3, [r3, #32]
 8009208:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	69db      	ldr	r3, [r3, #28]
 800921a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f023 0303 	bic.w	r3, r3, #3
 800922a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68fa      	ldr	r2, [r7, #12]
 8009232:	4313      	orrs	r3, r2
 8009234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009236:	697b      	ldr	r3, [r7, #20]
 8009238:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800923c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	4313      	orrs	r3, r2
 8009248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a1d      	ldr	r2, [pc, #116]	@ (80092c4 <TIM_OC3_SetConfig+0xd0>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d10d      	bne.n	800926e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	68db      	ldr	r3, [r3, #12]
 800925e:	021b      	lsls	r3, r3, #8
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	4313      	orrs	r3, r2
 8009264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009266:	697b      	ldr	r3, [r7, #20]
 8009268:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800926c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	4a14      	ldr	r2, [pc, #80]	@ (80092c4 <TIM_OC3_SetConfig+0xd0>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d113      	bne.n	800929e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800927c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	695b      	ldr	r3, [r3, #20]
 800928a:	011b      	lsls	r3, r3, #4
 800928c:	693a      	ldr	r2, [r7, #16]
 800928e:	4313      	orrs	r3, r2
 8009290:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	011b      	lsls	r3, r3, #4
 8009298:	693a      	ldr	r2, [r7, #16]
 800929a:	4313      	orrs	r3, r2
 800929c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	68fa      	ldr	r2, [r7, #12]
 80092a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80092aa:	683b      	ldr	r3, [r7, #0]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	697a      	ldr	r2, [r7, #20]
 80092b6:	621a      	str	r2, [r3, #32]
}
 80092b8:	bf00      	nop
 80092ba:	371c      	adds	r7, #28
 80092bc:	46bd      	mov	sp, r7
 80092be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c2:	4770      	bx	lr
 80092c4:	40010000 	.word	0x40010000

080092c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092c8:	b480      	push	{r7}
 80092ca:	b087      	sub	sp, #28
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
 80092d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6a1b      	ldr	r3, [r3, #32]
 80092d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6a1b      	ldr	r3, [r3, #32]
 80092dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	69db      	ldr	r3, [r3, #28]
 80092ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80092fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	021b      	lsls	r3, r3, #8
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	4313      	orrs	r3, r2
 800930a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009312:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009314:	683b      	ldr	r3, [r7, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	031b      	lsls	r3, r3, #12
 800931a:	693a      	ldr	r2, [r7, #16]
 800931c:	4313      	orrs	r3, r2
 800931e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	4a10      	ldr	r2, [pc, #64]	@ (8009364 <TIM_OC4_SetConfig+0x9c>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d109      	bne.n	800933c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009328:	697b      	ldr	r3, [r7, #20]
 800932a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800932e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	695b      	ldr	r3, [r3, #20]
 8009334:	019b      	lsls	r3, r3, #6
 8009336:	697a      	ldr	r2, [r7, #20]
 8009338:	4313      	orrs	r3, r2
 800933a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	68fa      	ldr	r2, [r7, #12]
 8009346:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	685a      	ldr	r2, [r3, #4]
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	693a      	ldr	r2, [r7, #16]
 8009354:	621a      	str	r2, [r3, #32]
}
 8009356:	bf00      	nop
 8009358:	371c      	adds	r7, #28
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	40010000 	.word	0x40010000

08009368 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009368:	b580      	push	{r7, lr}
 800936a:	b086      	sub	sp, #24
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	689b      	ldr	r3, [r3, #8]
 800937c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009384:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	4313      	orrs	r3, r2
 800938e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009390:	693b      	ldr	r3, [r7, #16]
 8009392:	f023 0307 	bic.w	r3, r3, #7
 8009396:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	693a      	ldr	r2, [r7, #16]
 800939e:	4313      	orrs	r3, r2
 80093a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	2b70      	cmp	r3, #112	@ 0x70
 80093b0:	d01a      	beq.n	80093e8 <TIM_SlaveTimer_SetConfig+0x80>
 80093b2:	2b70      	cmp	r3, #112	@ 0x70
 80093b4:	d860      	bhi.n	8009478 <TIM_SlaveTimer_SetConfig+0x110>
 80093b6:	2b60      	cmp	r3, #96	@ 0x60
 80093b8:	d054      	beq.n	8009464 <TIM_SlaveTimer_SetConfig+0xfc>
 80093ba:	2b60      	cmp	r3, #96	@ 0x60
 80093bc:	d85c      	bhi.n	8009478 <TIM_SlaveTimer_SetConfig+0x110>
 80093be:	2b50      	cmp	r3, #80	@ 0x50
 80093c0:	d046      	beq.n	8009450 <TIM_SlaveTimer_SetConfig+0xe8>
 80093c2:	2b50      	cmp	r3, #80	@ 0x50
 80093c4:	d858      	bhi.n	8009478 <TIM_SlaveTimer_SetConfig+0x110>
 80093c6:	2b40      	cmp	r3, #64	@ 0x40
 80093c8:	d019      	beq.n	80093fe <TIM_SlaveTimer_SetConfig+0x96>
 80093ca:	2b40      	cmp	r3, #64	@ 0x40
 80093cc:	d854      	bhi.n	8009478 <TIM_SlaveTimer_SetConfig+0x110>
 80093ce:	2b30      	cmp	r3, #48	@ 0x30
 80093d0:	d055      	beq.n	800947e <TIM_SlaveTimer_SetConfig+0x116>
 80093d2:	2b30      	cmp	r3, #48	@ 0x30
 80093d4:	d850      	bhi.n	8009478 <TIM_SlaveTimer_SetConfig+0x110>
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d051      	beq.n	800947e <TIM_SlaveTimer_SetConfig+0x116>
 80093da:	2b20      	cmp	r3, #32
 80093dc:	d84c      	bhi.n	8009478 <TIM_SlaveTimer_SetConfig+0x110>
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d04d      	beq.n	800947e <TIM_SlaveTimer_SetConfig+0x116>
 80093e2:	2b10      	cmp	r3, #16
 80093e4:	d04b      	beq.n	800947e <TIM_SlaveTimer_SetConfig+0x116>
 80093e6:	e047      	b.n	8009478 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80093f4:	683b      	ldr	r3, [r7, #0]
 80093f6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80093f8:	f000 f8c1 	bl	800957e <TIM_ETR_SetConfig>
      break;
 80093fc:	e040      	b.n	8009480 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	2b05      	cmp	r3, #5
 8009404:	d101      	bne.n	800940a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8009406:	2301      	movs	r3, #1
 8009408:	e03b      	b.n	8009482 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	6a1b      	ldr	r3, [r3, #32]
 8009410:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	6a1a      	ldr	r2, [r3, #32]
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f022 0201 	bic.w	r2, r2, #1
 8009420:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	699b      	ldr	r3, [r3, #24]
 8009428:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009430:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	691b      	ldr	r3, [r3, #16]
 8009436:	011b      	lsls	r3, r3, #4
 8009438:	68ba      	ldr	r2, [r7, #8]
 800943a:	4313      	orrs	r3, r2
 800943c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	68ba      	ldr	r2, [r7, #8]
 8009444:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68fa      	ldr	r2, [r7, #12]
 800944c:	621a      	str	r2, [r3, #32]
      break;
 800944e:	e017      	b.n	8009480 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800945c:	461a      	mov	r2, r3
 800945e:	f000 f814 	bl	800948a <TIM_TI1_ConfigInputStage>
      break;
 8009462:	e00d      	b.n	8009480 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009470:	461a      	mov	r2, r3
 8009472:	f000 f839 	bl	80094e8 <TIM_TI2_ConfigInputStage>
      break;
 8009476:	e003      	b.n	8009480 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	75fb      	strb	r3, [r7, #23]
      break;
 800947c:	e000      	b.n	8009480 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800947e:	bf00      	nop
  }

  return status;
 8009480:	7dfb      	ldrb	r3, [r7, #23]
}
 8009482:	4618      	mov	r0, r3
 8009484:	3718      	adds	r7, #24
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}

0800948a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800948a:	b480      	push	{r7}
 800948c:	b087      	sub	sp, #28
 800948e:	af00      	add	r7, sp, #0
 8009490:	60f8      	str	r0, [r7, #12]
 8009492:	60b9      	str	r1, [r7, #8]
 8009494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	6a1b      	ldr	r3, [r3, #32]
 800949a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	6a1b      	ldr	r3, [r3, #32]
 80094a0:	f023 0201 	bic.w	r2, r3, #1
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	699b      	ldr	r3, [r3, #24]
 80094ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80094b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	011b      	lsls	r3, r3, #4
 80094ba:	693a      	ldr	r2, [r7, #16]
 80094bc:	4313      	orrs	r3, r2
 80094be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80094c0:	697b      	ldr	r3, [r7, #20]
 80094c2:	f023 030a 	bic.w	r3, r3, #10
 80094c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	693a      	ldr	r2, [r7, #16]
 80094d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	697a      	ldr	r2, [r7, #20]
 80094da:	621a      	str	r2, [r3, #32]
}
 80094dc:	bf00      	nop
 80094de:	371c      	adds	r7, #28
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b087      	sub	sp, #28
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	60f8      	str	r0, [r7, #12]
 80094f0:	60b9      	str	r1, [r7, #8]
 80094f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	6a1b      	ldr	r3, [r3, #32]
 80094f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	6a1b      	ldr	r3, [r3, #32]
 80094fe:	f023 0210 	bic.w	r2, r3, #16
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	699b      	ldr	r3, [r3, #24]
 800950a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009512:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	031b      	lsls	r3, r3, #12
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	4313      	orrs	r3, r2
 800951c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800951e:	697b      	ldr	r3, [r7, #20]
 8009520:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009524:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	011b      	lsls	r3, r3, #4
 800952a:	697a      	ldr	r2, [r7, #20]
 800952c:	4313      	orrs	r3, r2
 800952e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	693a      	ldr	r2, [r7, #16]
 8009534:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	697a      	ldr	r2, [r7, #20]
 800953a:	621a      	str	r2, [r3, #32]
}
 800953c:	bf00      	nop
 800953e:	371c      	adds	r7, #28
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr

08009548 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009548:	b480      	push	{r7}
 800954a:	b085      	sub	sp, #20
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
 8009550:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800955e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009560:	683a      	ldr	r2, [r7, #0]
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	4313      	orrs	r3, r2
 8009566:	f043 0307 	orr.w	r3, r3, #7
 800956a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68fa      	ldr	r2, [r7, #12]
 8009570:	609a      	str	r2, [r3, #8]
}
 8009572:	bf00      	nop
 8009574:	3714      	adds	r7, #20
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800957e:	b480      	push	{r7}
 8009580:	b087      	sub	sp, #28
 8009582:	af00      	add	r7, sp, #0
 8009584:	60f8      	str	r0, [r7, #12]
 8009586:	60b9      	str	r1, [r7, #8]
 8009588:	607a      	str	r2, [r7, #4]
 800958a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009598:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	021a      	lsls	r2, r3, #8
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	431a      	orrs	r2, r3
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	4313      	orrs	r3, r2
 80095a6:	697a      	ldr	r2, [r7, #20]
 80095a8:	4313      	orrs	r3, r2
 80095aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	697a      	ldr	r2, [r7, #20]
 80095b0:	609a      	str	r2, [r3, #8]
}
 80095b2:	bf00      	nop
 80095b4:	371c      	adds	r7, #28
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
	...

080095c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d101      	bne.n	80095d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80095d4:	2302      	movs	r3, #2
 80095d6:	e050      	b.n	800967a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2202      	movs	r2, #2
 80095e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	685b      	ldr	r3, [r3, #4]
 80095ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80095f8:	68fb      	ldr	r3, [r7, #12]
 80095fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	4313      	orrs	r3, r2
 8009608:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	4a1c      	ldr	r2, [pc, #112]	@ (8009688 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009618:	4293      	cmp	r3, r2
 800961a:	d018      	beq.n	800964e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009624:	d013      	beq.n	800964e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	4a18      	ldr	r2, [pc, #96]	@ (800968c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800962c:	4293      	cmp	r3, r2
 800962e:	d00e      	beq.n	800964e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a16      	ldr	r2, [pc, #88]	@ (8009690 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d009      	beq.n	800964e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a15      	ldr	r2, [pc, #84]	@ (8009694 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d004      	beq.n	800964e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a13      	ldr	r2, [pc, #76]	@ (8009698 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d10c      	bne.n	8009668 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800964e:	68bb      	ldr	r3, [r7, #8]
 8009650:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009654:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	4313      	orrs	r3, r2
 800965e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	68ba      	ldr	r2, [r7, #8]
 8009666:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2201      	movs	r2, #1
 800966c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2200      	movs	r2, #0
 8009674:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr
 8009686:	bf00      	nop
 8009688:	40010000 	.word	0x40010000
 800968c:	40000400 	.word	0x40000400
 8009690:	40000800 	.word	0x40000800
 8009694:	40000c00 	.word	0x40000c00
 8009698:	40014000 	.word	0x40014000

0800969c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800969c:	b480      	push	{r7}
 800969e:	b083      	sub	sp, #12
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096a4:	bf00      	nop
 80096a6:	370c      	adds	r7, #12
 80096a8:	46bd      	mov	sp, r7
 80096aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ae:	4770      	bx	lr

080096b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096b8:	bf00      	nop
 80096ba:	370c      	adds	r7, #12
 80096bc:	46bd      	mov	sp, r7
 80096be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c2:	4770      	bx	lr

080096c4 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b082      	sub	sp, #8
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d101      	bne.n	80096d6 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80096d2:	2301      	movs	r3, #1
 80096d4:	e033      	b.n	800973e <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096dc:	b2db      	uxtb	r3, r3
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d106      	bne.n	80096f0 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2200      	movs	r2, #0
 80096e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7f8 fb22 	bl	8001d34 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2202      	movs	r2, #2
 80096f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f000 fb61 	bl	8009dc0 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	691a      	ldr	r2, [r3, #16]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800970c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	695a      	ldr	r2, [r3, #20]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800971c:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	68da      	ldr	r2, [r3, #12]
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800972c:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800973c:	2300      	movs	r3, #0
}
 800973e:	4618      	mov	r0, r3
 8009740:	3708      	adds	r7, #8
 8009742:	46bd      	mov	sp, r7
 8009744:	bd80      	pop	{r7, pc}
	...

08009748 <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b088      	sub	sp, #32
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	68db      	ldr	r3, [r3, #12]
 800975e:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	695b      	ldr	r3, [r3, #20]
 8009766:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009768:	2300      	movs	r3, #0
 800976a:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 800976c:	2300      	movs	r3, #0
 800976e:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d117      	bne.n	80097ae <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800977e:	69fb      	ldr	r3, [r7, #28]
 8009780:	f003 0320 	and.w	r3, r3, #32
 8009784:	2b00      	cmp	r3, #0
 8009786:	d012      	beq.n	80097ae <HAL_USART_IRQHandler+0x66>
 8009788:	69bb      	ldr	r3, [r7, #24]
 800978a:	f003 0320 	and.w	r3, r3, #32
 800978e:	2b00      	cmp	r3, #0
 8009790:	d00d      	beq.n	80097ae <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b22      	cmp	r3, #34	@ 0x22
 800979c:	d103      	bne.n	80097a6 <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f9ba 	bl	8009b18 <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 80097a4:	e0e9      	b.n	800997a <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f000 fa3c 	bl	8009c24 <USART_TransmitReceive_IT>
      return;
 80097ac:	e0e5      	b.n	800997a <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	f000 80bb 	beq.w	800992c <HAL_USART_IRQHandler+0x1e4>
 80097b6:	697b      	ldr	r3, [r7, #20]
 80097b8:	f003 0301 	and.w	r3, r3, #1
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d105      	bne.n	80097cc <HAL_USART_IRQHandler+0x84>
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	f000 80b0 	beq.w	800992c <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	f003 0301 	and.w	r3, r3, #1
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d00a      	beq.n	80097ec <HAL_USART_IRQHandler+0xa4>
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d005      	beq.n	80097ec <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80097e4:	f043 0201 	orr.w	r2, r3, #1
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	f003 0304 	and.w	r3, r3, #4
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00a      	beq.n	800980c <HAL_USART_IRQHandler+0xc4>
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	f003 0301 	and.w	r3, r3, #1
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d005      	beq.n	800980c <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009804:	f043 0202 	orr.w	r2, r3, #2
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	f003 0302 	and.w	r3, r3, #2
 8009812:	2b00      	cmp	r3, #0
 8009814:	d00a      	beq.n	800982c <HAL_USART_IRQHandler+0xe4>
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	f003 0301 	and.w	r3, r3, #1
 800981c:	2b00      	cmp	r3, #0
 800981e:	d005      	beq.n	800982c <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009824:	f043 0204 	orr.w	r2, r3, #4
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800982c:	69fb      	ldr	r3, [r7, #28]
 800982e:	f003 0308 	and.w	r3, r3, #8
 8009832:	2b00      	cmp	r3, #0
 8009834:	d00f      	beq.n	8009856 <HAL_USART_IRQHandler+0x10e>
 8009836:	69bb      	ldr	r3, [r7, #24]
 8009838:	f003 0320 	and.w	r3, r3, #32
 800983c:	2b00      	cmp	r3, #0
 800983e:	d104      	bne.n	800984a <HAL_USART_IRQHandler+0x102>
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f003 0301 	and.w	r3, r3, #1
 8009846:	2b00      	cmp	r3, #0
 8009848:	d005      	beq.n	8009856 <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800984e:	f043 0208 	orr.w	r2, r3, #8
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	f000 808c 	beq.w	8009978 <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009860:	69fb      	ldr	r3, [r7, #28]
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b00      	cmp	r3, #0
 8009868:	d011      	beq.n	800988e <HAL_USART_IRQHandler+0x146>
 800986a:	69bb      	ldr	r3, [r7, #24]
 800986c:	f003 0320 	and.w	r3, r3, #32
 8009870:	2b00      	cmp	r3, #0
 8009872:	d00c      	beq.n	800988e <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800987a:	b2db      	uxtb	r3, r3
 800987c:	2b22      	cmp	r3, #34	@ 0x22
 800987e:	d103      	bne.n	8009888 <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8009880:	6878      	ldr	r0, [r7, #4]
 8009882:	f000 f949 	bl	8009b18 <USART_Receive_IT>
 8009886:	e002      	b.n	800988e <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8009888:	6878      	ldr	r0, [r7, #4]
 800988a:	f000 f9cb 	bl	8009c24 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009898:	2b40      	cmp	r3, #64	@ 0x40
 800989a:	bf0c      	ite	eq
 800989c:	2301      	moveq	r3, #1
 800989e:	2300      	movne	r3, #0
 80098a0:	b2db      	uxtb	r3, r3
 80098a2:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098a8:	f003 0308 	and.w	r3, r3, #8
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d102      	bne.n	80098b6 <HAL_USART_IRQHandler+0x16e>
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d031      	beq.n	800991a <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 80098b6:	6878      	ldr	r0, [r7, #4]
 80098b8:	f000 f88c 	bl	80099d4 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
 80098c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80098c6:	2b40      	cmp	r3, #64	@ 0x40
 80098c8:	d123      	bne.n	8009912 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	695a      	ldr	r2, [r3, #20]
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80098d8:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d013      	beq.n	800990a <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098e6:	4a26      	ldr	r2, [pc, #152]	@ (8009980 <HAL_USART_IRQHandler+0x238>)
 80098e8:	651a      	str	r2, [r3, #80]	@ 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7f9 fd98 	bl	8003424 <HAL_DMA_Abort_IT>
 80098f4:	4603      	mov	r3, r0
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d016      	beq.n	8009928 <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009900:	687a      	ldr	r2, [r7, #4]
 8009902:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009904:	4610      	mov	r0, r2
 8009906:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009908:	e00e      	b.n	8009928 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 800990a:	6878      	ldr	r0, [r7, #4]
 800990c:	f000 f858 	bl	80099c0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009910:	e00a      	b.n	8009928 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f000 f854 	bl	80099c0 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009918:	e006      	b.n	8009928 <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 800991a:	6878      	ldr	r0, [r7, #4]
 800991c:	f000 f850 	bl	80099c0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2200      	movs	r2, #0
 8009924:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009926:	e027      	b.n	8009978 <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009928:	bf00      	nop
    return;
 800992a:	e025      	b.n	8009978 <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800992c:	69fb      	ldr	r3, [r7, #28]
 800992e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009932:	2b00      	cmp	r3, #0
 8009934:	d012      	beq.n	800995c <HAL_USART_IRQHandler+0x214>
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800993c:	2b00      	cmp	r3, #0
 800993e:	d00d      	beq.n	800995c <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b12      	cmp	r3, #18
 800994a:	d103      	bne.n	8009954 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f000 f873 	bl	8009a38 <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8009952:	e012      	b.n	800997a <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f965 	bl	8009c24 <USART_TransmitReceive_IT>
    return;
 800995a:	e00e      	b.n	800997a <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009962:	2b00      	cmp	r3, #0
 8009964:	d009      	beq.n	800997a <HAL_USART_IRQHandler+0x232>
 8009966:	69bb      	ldr	r3, [r7, #24]
 8009968:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800996c:	2b00      	cmp	r3, #0
 800996e:	d004      	beq.n	800997a <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f000 f8b1 	bl	8009ad8 <USART_EndTransmit_IT>
    return;
 8009976:	e000      	b.n	800997a <HAL_USART_IRQHandler+0x232>
    return;
 8009978:	bf00      	nop
  }
}
 800997a:	3720      	adds	r7, #32
 800997c:	46bd      	mov	sp, r7
 800997e:	bd80      	pop	{r7, pc}
 8009980:	08009a11 	.word	0x08009a11

08009984 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 80099a0:	bf00      	nop
 80099a2:	370c      	adds	r7, #12
 80099a4:	46bd      	mov	sp, r7
 80099a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099aa:	4770      	bx	lr

080099ac <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 80099ac:	b480      	push	{r7}
 80099ae:	b083      	sub	sp, #12
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 80099b4:	bf00      	nop
 80099b6:	370c      	adds	r7, #12
 80099b8:	46bd      	mov	sp, r7
 80099ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099be:	4770      	bx	lr

080099c0 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 80099c8:	bf00      	nop
 80099ca:	370c      	adds	r7, #12
 80099cc:	46bd      	mov	sp, r7
 80099ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d2:	4770      	bx	lr

080099d4 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b083      	sub	sp, #12
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	68da      	ldr	r2, [r3, #12]
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 80099ea:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	695a      	ldr	r2, [r3, #20]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f022 0201 	bic.w	r2, r2, #1
 80099fa:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8009a04:	bf00      	nop
 8009a06:	370c      	adds	r7, #12
 8009a08:	46bd      	mov	sp, r7
 8009a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0e:	4770      	bx	lr

08009a10 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b084      	sub	sp, #16
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a1c:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2200      	movs	r2, #0
 8009a22:	865a      	strh	r2, [r3, #50]	@ 0x32
  husart->TxXferCount = 0x00U;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	2200      	movs	r2, #0
 8009a28:	855a      	strh	r2, [r3, #42]	@ 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009a2a:	68f8      	ldr	r0, [r7, #12]
 8009a2c:	f7ff ffc8 	bl	80099c0 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009a30:	bf00      	nop
 8009a32:	3710      	adds	r7, #16
 8009a34:	46bd      	mov	sp, r7
 8009a36:	bd80      	pop	{r7, pc}

08009a38 <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b12      	cmp	r3, #18
 8009a4a:	d13e      	bne.n	8009aca <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	689b      	ldr	r3, [r3, #8]
 8009a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009a54:	d114      	bne.n	8009a80 <USART_Transmit_IT+0x48>
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d110      	bne.n	8009a80 <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a62:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	881b      	ldrh	r3, [r3, #0]
 8009a68:	461a      	mov	r2, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a72:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a78:	1c9a      	adds	r2, r3, #2
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	625a      	str	r2, [r3, #36]	@ 0x24
 8009a7e:	e008      	b.n	8009a92 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a84:	1c59      	adds	r1, r3, #1
 8009a86:	687a      	ldr	r2, [r7, #4]
 8009a88:	6251      	str	r1, [r2, #36]	@ 0x24
 8009a8a:	781a      	ldrb	r2, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a96:	b29b      	uxth	r3, r3
 8009a98:	3b01      	subs	r3, #1
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	8551      	strh	r1, [r2, #42]	@ 0x2a
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d10f      	bne.n	8009ac6 <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68da      	ldr	r2, [r3, #12]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009ab4:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68da      	ldr	r2, [r3, #12]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ac4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
 8009ac8:	e000      	b.n	8009acc <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009aca:	2302      	movs	r3, #2
  }
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	3714      	adds	r7, #20
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b082      	sub	sp, #8
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	68da      	ldr	r2, [r3, #12]
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009aee:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	695a      	ldr	r2, [r3, #20]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	f022 0201 	bic.w	r2, r2, #1
 8009afe:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f7ff ff3b 	bl	8009984 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009b0e:	2300      	movs	r3, #0
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3708      	adds	r7, #8
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b084      	sub	sp, #16
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60fb      	str	r3, [r7, #12]
  uint16_t *pdata16bits = NULL;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60bb      	str	r3, [r7, #8]

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b2e:	b2db      	uxtb	r3, r3
 8009b30:	2b22      	cmp	r3, #34	@ 0x22
 8009b32:	d172      	bne.n	8009c1a <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b3c:	d115      	bne.n	8009b6a <USART_Receive_IT+0x52>
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	691b      	ldr	r3, [r3, #16]
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d111      	bne.n	8009b6a <USART_Receive_IT+0x52>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b4a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009b58:	b29a      	uxth	r2, r3
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b62:	1c9a      	adds	r2, r3, #2
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009b68:	e024      	b.n	8009bb4 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b6e:	60fb      	str	r3, [r7, #12]
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009b78:	d007      	beq.n	8009b8a <USART_Receive_IT+0x72>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	689b      	ldr	r3, [r3, #8]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d10a      	bne.n	8009b98 <USART_Receive_IT+0x80>
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	685b      	ldr	r3, [r3, #4]
 8009b90:	b2da      	uxtb	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	701a      	strb	r2, [r3, #0]
 8009b96:	e008      	b.n	8009baa <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	685b      	ldr	r3, [r3, #4]
 8009b9e:	b2db      	uxtb	r3, r3
 8009ba0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ba4:	b2da      	uxtb	r2, r3
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009bae:	1c5a      	adds	r2, r3, #1
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    husart->RxXferCount--;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009bb8:	b29b      	uxth	r3, r3
 8009bba:	3b01      	subs	r3, #1
 8009bbc:	b29a      	uxth	r2, r3
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	865a      	strh	r2, [r3, #50]	@ 0x32

    if (husart->RxXferCount == 0U)
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009bc6:	b29b      	uxth	r3, r3
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d120      	bne.n	8009c0e <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	68da      	ldr	r2, [r3, #12]
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	f022 0220 	bic.w	r2, r2, #32
 8009bda:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	68da      	ldr	r2, [r3, #12]
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009bea:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	695a      	ldr	r2, [r3, #20]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f022 0201 	bic.w	r2, r2, #1
 8009bfa:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8009c04:	6878      	ldr	r0, [r7, #4]
 8009c06:	f7ff fec7 	bl	8009998 <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	e006      	b.n	8009c1c <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	22ff      	movs	r2, #255	@ 0xff
 8009c14:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8009c16:	2300      	movs	r3, #0
 8009c18:	e000      	b.n	8009c1c <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8009c1a:	2302      	movs	r3, #2
  }
}
 8009c1c:	4618      	mov	r0, r3
 8009c1e:	3710      	adds	r7, #16
 8009c20:	46bd      	mov	sp, r7
 8009c22:	bd80      	pop	{r7, pc}

08009c24 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b084      	sub	sp, #16
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c32:	b2db      	uxtb	r3, r3
 8009c34:	2b32      	cmp	r3, #50	@ 0x32
 8009c36:	f040 80bd 	bne.w	8009db4 <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c3e:	b29b      	uxth	r3, r3
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d03d      	beq.n	8009cc0 <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c4e:	2b80      	cmp	r3, #128	@ 0x80
 8009c50:	d136      	bne.n	8009cc0 <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	689b      	ldr	r3, [r3, #8]
 8009c56:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c5a:	d114      	bne.n	8009c86 <USART_TransmitReceive_IT+0x62>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	691b      	ldr	r3, [r3, #16]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d110      	bne.n	8009c86 <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c68:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	881b      	ldrh	r3, [r3, #0]
 8009c6e:	461a      	mov	r2, r3
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c78:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c7e:	1c9a      	adds	r2, r3, #2
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c84:	e008      	b.n	8009c98 <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c8a:	1c59      	adds	r1, r3, #1
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	6251      	str	r1, [r2, #36]	@ 0x24
 8009c90:	781a      	ldrb	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c9c:	b29b      	uxth	r3, r3
 8009c9e:	3b01      	subs	r3, #1
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d107      	bne.n	8009cc0 <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	68da      	ldr	r2, [r3, #12]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009cbe:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009cc4:	b29b      	uxth	r3, r3
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d04c      	beq.n	8009d64 <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 0320 	and.w	r3, r3, #32
 8009cd4:	2b20      	cmp	r3, #32
 8009cd6:	d145      	bne.n	8009d64 <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009ce0:	d115      	bne.n	8009d0e <USART_TransmitReceive_IT+0xea>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	691b      	ldr	r3, [r3, #16]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d111      	bne.n	8009d0e <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cee:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	685b      	ldr	r3, [r3, #4]
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cfc:	b29a      	uxth	r2, r3
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d06:	1c9a      	adds	r2, r3, #2
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009d0c:	e023      	b.n	8009d56 <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d16:	d007      	beq.n	8009d28 <USART_TransmitReceive_IT+0x104>
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d10b      	bne.n	8009d38 <USART_TransmitReceive_IT+0x114>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	691b      	ldr	r3, [r3, #16]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d107      	bne.n	8009d38 <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	685a      	ldr	r2, [r3, #4]
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d32:	b2d2      	uxtb	r2, r2
 8009d34:	701a      	strb	r2, [r3, #0]
 8009d36:	e009      	b.n	8009d4c <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685b      	ldr	r3, [r3, #4]
 8009d3e:	b2da      	uxtb	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009d48:	b2d2      	uxtb	r2, r2
 8009d4a:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d50:	1c5a      	adds	r2, r3, #1
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	62da      	str	r2, [r3, #44]	@ 0x2c
        }

        husart->RxXferCount--;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d5a:	b29b      	uxth	r3, r3
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	b29a      	uxth	r2, r3
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	865a      	strh	r2, [r3, #50]	@ 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d120      	bne.n	8009db0 <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68da      	ldr	r2, [r3, #12]
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f022 0220 	bic.w	r2, r2, #32
 8009d7c:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68da      	ldr	r2, [r3, #12]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d8c:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	695a      	ldr	r2, [r3, #20]
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	f022 0201 	bic.w	r2, r2, #1
 8009d9c:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8009da6:	6878      	ldr	r0, [r7, #4]
 8009da8:	f7ff fe00 	bl	80099ac <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009dac:	2300      	movs	r3, #0
 8009dae:	e002      	b.n	8009db6 <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 8009db0:	2300      	movs	r3, #0
 8009db2:	e000      	b.n	8009db6 <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 8009db4:	2302      	movs	r3, #2
  }
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3710      	adds	r7, #16
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
	...

08009dc0 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8009dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009dc4:	b0c6      	sub	sp, #280	@ 0x118
 8009dc6:	af00      	add	r7, sp, #0
 8009dc8:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8009dcc:	2300      	movs	r3, #0
 8009dce:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8009dd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68d9      	ldr	r1, [r3, #12]
 8009dda:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	f021 030c 	bic.w	r3, r1, #12
 8009de4:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8009de6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	691b      	ldr	r3, [r3, #16]
 8009dee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8009df2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009df6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009dfa:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8009dfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e02:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8009e04:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e08:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8009e0a:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8009e0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e10:	6a1b      	ldr	r3, [r3, #32]
 8009e12:	431a      	orrs	r2, r3
 8009e14:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e18:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8009e1a:	431a      	orrs	r2, r3
 8009e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e20:	4313      	orrs	r3, r2
 8009e22:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009e26:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8009e2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e34:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8009e36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	68db      	ldr	r3, [r3, #12]
 8009e3e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8009e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e46:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8009e4a:	f023 030c 	bic.w	r3, r3, #12
 8009e4e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8009e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e56:	689a      	ldr	r2, [r3, #8]
 8009e58:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	431a      	orrs	r2, r3
 8009e60:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	431a      	orrs	r2, r3
 8009e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e6c:	4313      	orrs	r3, r2
 8009e6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009e72:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8009e76:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e7a:	681a      	ldr	r2, [r3, #0]
 8009e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009e80:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8009e82:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	6959      	ldr	r1, [r3, #20]
 8009e8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e8e:	681a      	ldr	r2, [r3, #0]
 8009e90:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8009e94:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8009e96:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	4b8b      	ldr	r3, [pc, #556]	@ (800a0cc <USART_SetConfig+0x30c>)
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d006      	beq.n	8009eb0 <USART_SetConfig+0xf0>
 8009ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	4b89      	ldr	r3, [pc, #548]	@ (800a0d0 <USART_SetConfig+0x310>)
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	f040 8114 	bne.w	800a0d8 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8009eb0:	f7fe fc44 	bl	800873c <HAL_RCC_GetPCLK2Freq>
 8009eb4:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8009eb8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8009ec2:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8009ec6:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8009eca:	4622      	mov	r2, r4
 8009ecc:	462b      	mov	r3, r5
 8009ece:	1891      	adds	r1, r2, r2
 8009ed0:	6739      	str	r1, [r7, #112]	@ 0x70
 8009ed2:	415b      	adcs	r3, r3
 8009ed4:	677b      	str	r3, [r7, #116]	@ 0x74
 8009ed6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8009eda:	4621      	mov	r1, r4
 8009edc:	eb12 0801 	adds.w	r8, r2, r1
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	eb43 0901 	adc.w	r9, r3, r1
 8009ee6:	f04f 0200 	mov.w	r2, #0
 8009eea:	f04f 0300 	mov.w	r3, #0
 8009eee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ef2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009ef6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009efa:	4690      	mov	r8, r2
 8009efc:	4699      	mov	r9, r3
 8009efe:	4623      	mov	r3, r4
 8009f00:	eb18 0303 	adds.w	r3, r8, r3
 8009f04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8009f08:	462b      	mov	r3, r5
 8009f0a:	eb49 0303 	adc.w	r3, r9, r3
 8009f0e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8009f12:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	2200      	movs	r2, #0
 8009f1a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8009f1e:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8009f22:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8009f26:	460b      	mov	r3, r1
 8009f28:	18db      	adds	r3, r3, r3
 8009f2a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009f2c:	4613      	mov	r3, r2
 8009f2e:	eb42 0303 	adc.w	r3, r2, r3
 8009f32:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009f34:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8009f38:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8009f3c:	f7f6 f94c 	bl	80001d8 <__aeabi_uldivmod>
 8009f40:	4602      	mov	r2, r0
 8009f42:	460b      	mov	r3, r1
 8009f44:	4b63      	ldr	r3, [pc, #396]	@ (800a0d4 <USART_SetConfig+0x314>)
 8009f46:	fba3 2302 	umull	r2, r3, r3, r2
 8009f4a:	095b      	lsrs	r3, r3, #5
 8009f4c:	011c      	lsls	r4, r3, #4
 8009f4e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8009f52:	2200      	movs	r2, #0
 8009f54:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009f58:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009f5c:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8009f60:	4642      	mov	r2, r8
 8009f62:	464b      	mov	r3, r9
 8009f64:	1891      	adds	r1, r2, r2
 8009f66:	6639      	str	r1, [r7, #96]	@ 0x60
 8009f68:	415b      	adcs	r3, r3
 8009f6a:	667b      	str	r3, [r7, #100]	@ 0x64
 8009f6c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8009f70:	4641      	mov	r1, r8
 8009f72:	1851      	adds	r1, r2, r1
 8009f74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009f76:	4649      	mov	r1, r9
 8009f78:	414b      	adcs	r3, r1
 8009f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f7c:	f04f 0200 	mov.w	r2, #0
 8009f80:	f04f 0300 	mov.w	r3, #0
 8009f84:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8009f88:	4659      	mov	r1, fp
 8009f8a:	00cb      	lsls	r3, r1, #3
 8009f8c:	4651      	mov	r1, sl
 8009f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009f92:	4651      	mov	r1, sl
 8009f94:	00ca      	lsls	r2, r1, #3
 8009f96:	4610      	mov	r0, r2
 8009f98:	4619      	mov	r1, r3
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	4642      	mov	r2, r8
 8009f9e:	189b      	adds	r3, r3, r2
 8009fa0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009fa4:	464b      	mov	r3, r9
 8009fa6:	460a      	mov	r2, r1
 8009fa8:	eb42 0303 	adc.w	r3, r2, r3
 8009fac:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009fb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009fbc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009fc0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	18db      	adds	r3, r3, r3
 8009fc8:	653b      	str	r3, [r7, #80]	@ 0x50
 8009fca:	4613      	mov	r3, r2
 8009fcc:	eb42 0303 	adc.w	r3, r2, r3
 8009fd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fd2:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009fd6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009fda:	f7f6 f8fd 	bl	80001d8 <__aeabi_uldivmod>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	4b3b      	ldr	r3, [pc, #236]	@ (800a0d4 <USART_SetConfig+0x314>)
 8009fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8009fea:	095b      	lsrs	r3, r3, #5
 8009fec:	2264      	movs	r2, #100	@ 0x64
 8009fee:	fb02 f303 	mul.w	r3, r2, r3
 8009ff2:	1acb      	subs	r3, r1, r3
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009ffa:	4b36      	ldr	r3, [pc, #216]	@ (800a0d4 <USART_SetConfig+0x314>)
 8009ffc:	fba3 2302 	umull	r2, r3, r3, r2
 800a000:	095b      	lsrs	r3, r3, #5
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a008:	441c      	add	r4, r3
 800a00a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a014:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a018:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a01c:	4642      	mov	r2, r8
 800a01e:	464b      	mov	r3, r9
 800a020:	1891      	adds	r1, r2, r2
 800a022:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a024:	415b      	adcs	r3, r3
 800a026:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a028:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a02c:	4641      	mov	r1, r8
 800a02e:	1851      	adds	r1, r2, r1
 800a030:	6439      	str	r1, [r7, #64]	@ 0x40
 800a032:	4649      	mov	r1, r9
 800a034:	414b      	adcs	r3, r1
 800a036:	647b      	str	r3, [r7, #68]	@ 0x44
 800a038:	f04f 0200 	mov.w	r2, #0
 800a03c:	f04f 0300 	mov.w	r3, #0
 800a040:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 800a044:	4659      	mov	r1, fp
 800a046:	00cb      	lsls	r3, r1, #3
 800a048:	4651      	mov	r1, sl
 800a04a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a04e:	4651      	mov	r1, sl
 800a050:	00ca      	lsls	r2, r1, #3
 800a052:	4610      	mov	r0, r2
 800a054:	4619      	mov	r1, r3
 800a056:	4603      	mov	r3, r0
 800a058:	4642      	mov	r2, r8
 800a05a:	189b      	adds	r3, r3, r2
 800a05c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a060:	464b      	mov	r3, r9
 800a062:	460a      	mov	r2, r1
 800a064:	eb42 0303 	adc.w	r3, r2, r3
 800a068:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a06c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a078:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a07c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a080:	460b      	mov	r3, r1
 800a082:	18db      	adds	r3, r3, r3
 800a084:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a086:	4613      	mov	r3, r2
 800a088:	eb42 0303 	adc.w	r3, r2, r3
 800a08c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a08e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a096:	f7f6 f89f 	bl	80001d8 <__aeabi_uldivmod>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4b0d      	ldr	r3, [pc, #52]	@ (800a0d4 <USART_SetConfig+0x314>)
 800a0a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a0a4:	095b      	lsrs	r3, r3, #5
 800a0a6:	2164      	movs	r1, #100	@ 0x64
 800a0a8:	fb01 f303 	mul.w	r3, r1, r3
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	00db      	lsls	r3, r3, #3
 800a0b0:	3332      	adds	r3, #50	@ 0x32
 800a0b2:	4a08      	ldr	r2, [pc, #32]	@ (800a0d4 <USART_SetConfig+0x314>)
 800a0b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b8:	095b      	lsrs	r3, r3, #5
 800a0ba:	f003 0207 	and.w	r2, r3, #7
 800a0be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4422      	add	r2, r4
 800a0c6:	609a      	str	r2, [r3, #8]
 800a0c8:	e109      	b.n	800a2de <USART_SetConfig+0x51e>
 800a0ca:	bf00      	nop
 800a0cc:	40011000 	.word	0x40011000
 800a0d0:	40011400 	.word	0x40011400
 800a0d4:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a0d8:	f7fe fb1c 	bl	8008714 <HAL_RCC_GetPCLK1Freq>
 800a0dc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800a0e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a0ea:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a0ee:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a0f2:	4642      	mov	r2, r8
 800a0f4:	464b      	mov	r3, r9
 800a0f6:	1891      	adds	r1, r2, r2
 800a0f8:	6339      	str	r1, [r7, #48]	@ 0x30
 800a0fa:	415b      	adcs	r3, r3
 800a0fc:	637b      	str	r3, [r7, #52]	@ 0x34
 800a0fe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a102:	4641      	mov	r1, r8
 800a104:	1854      	adds	r4, r2, r1
 800a106:	4649      	mov	r1, r9
 800a108:	eb43 0501 	adc.w	r5, r3, r1
 800a10c:	f04f 0200 	mov.w	r2, #0
 800a110:	f04f 0300 	mov.w	r3, #0
 800a114:	00eb      	lsls	r3, r5, #3
 800a116:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a11a:	00e2      	lsls	r2, r4, #3
 800a11c:	4614      	mov	r4, r2
 800a11e:	461d      	mov	r5, r3
 800a120:	4643      	mov	r3, r8
 800a122:	18e3      	adds	r3, r4, r3
 800a124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a128:	464b      	mov	r3, r9
 800a12a:	eb45 0303 	adc.w	r3, r5, r3
 800a12e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a132:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a136:	685b      	ldr	r3, [r3, #4]
 800a138:	2200      	movs	r2, #0
 800a13a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a13e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a142:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a146:	460b      	mov	r3, r1
 800a148:	18db      	adds	r3, r3, r3
 800a14a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a14c:	4613      	mov	r3, r2
 800a14e:	eb42 0303 	adc.w	r3, r2, r3
 800a152:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a154:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a158:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a15c:	f7f6 f83c 	bl	80001d8 <__aeabi_uldivmod>
 800a160:	4602      	mov	r2, r0
 800a162:	460b      	mov	r3, r1
 800a164:	4b61      	ldr	r3, [pc, #388]	@ (800a2ec <USART_SetConfig+0x52c>)
 800a166:	fba3 2302 	umull	r2, r3, r3, r2
 800a16a:	095b      	lsrs	r3, r3, #5
 800a16c:	011c      	lsls	r4, r3, #4
 800a16e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a172:	2200      	movs	r2, #0
 800a174:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a178:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a17c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a180:	4642      	mov	r2, r8
 800a182:	464b      	mov	r3, r9
 800a184:	1891      	adds	r1, r2, r2
 800a186:	6239      	str	r1, [r7, #32]
 800a188:	415b      	adcs	r3, r3
 800a18a:	627b      	str	r3, [r7, #36]	@ 0x24
 800a18c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a190:	4641      	mov	r1, r8
 800a192:	eb12 0a01 	adds.w	sl, r2, r1
 800a196:	4649      	mov	r1, r9
 800a198:	eb43 0b01 	adc.w	fp, r3, r1
 800a19c:	f04f 0200 	mov.w	r2, #0
 800a1a0:	f04f 0300 	mov.w	r3, #0
 800a1a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a1a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a1ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a1b0:	4692      	mov	sl, r2
 800a1b2:	469b      	mov	fp, r3
 800a1b4:	4643      	mov	r3, r8
 800a1b6:	eb1a 0303 	adds.w	r3, sl, r3
 800a1ba:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a1be:	464b      	mov	r3, r9
 800a1c0:	eb4b 0303 	adc.w	r3, fp, r3
 800a1c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a1c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a1d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a1d8:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a1dc:	460b      	mov	r3, r1
 800a1de:	18db      	adds	r3, r3, r3
 800a1e0:	61bb      	str	r3, [r7, #24]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	eb42 0303 	adc.w	r3, r2, r3
 800a1e8:	61fb      	str	r3, [r7, #28]
 800a1ea:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1ee:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a1f2:	f7f5 fff1 	bl	80001d8 <__aeabi_uldivmod>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	460b      	mov	r3, r1
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	4b3b      	ldr	r3, [pc, #236]	@ (800a2ec <USART_SetConfig+0x52c>)
 800a1fe:	fba3 2301 	umull	r2, r3, r3, r1
 800a202:	095b      	lsrs	r3, r3, #5
 800a204:	2264      	movs	r2, #100	@ 0x64
 800a206:	fb02 f303 	mul.w	r3, r2, r3
 800a20a:	1acb      	subs	r3, r1, r3
 800a20c:	00db      	lsls	r3, r3, #3
 800a20e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a212:	4b36      	ldr	r3, [pc, #216]	@ (800a2ec <USART_SetConfig+0x52c>)
 800a214:	fba3 2302 	umull	r2, r3, r3, r2
 800a218:	095b      	lsrs	r3, r3, #5
 800a21a:	005b      	lsls	r3, r3, #1
 800a21c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a220:	441c      	add	r4, r3
 800a222:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a226:	2200      	movs	r2, #0
 800a228:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a22c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a230:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a234:	4642      	mov	r2, r8
 800a236:	464b      	mov	r3, r9
 800a238:	1891      	adds	r1, r2, r2
 800a23a:	6139      	str	r1, [r7, #16]
 800a23c:	415b      	adcs	r3, r3
 800a23e:	617b      	str	r3, [r7, #20]
 800a240:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a244:	4641      	mov	r1, r8
 800a246:	1851      	adds	r1, r2, r1
 800a248:	60b9      	str	r1, [r7, #8]
 800a24a:	4649      	mov	r1, r9
 800a24c:	414b      	adcs	r3, r1
 800a24e:	60fb      	str	r3, [r7, #12]
 800a250:	f04f 0200 	mov.w	r2, #0
 800a254:	f04f 0300 	mov.w	r3, #0
 800a258:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a25c:	4659      	mov	r1, fp
 800a25e:	00cb      	lsls	r3, r1, #3
 800a260:	4651      	mov	r1, sl
 800a262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a266:	4651      	mov	r1, sl
 800a268:	00ca      	lsls	r2, r1, #3
 800a26a:	4610      	mov	r0, r2
 800a26c:	4619      	mov	r1, r3
 800a26e:	4603      	mov	r3, r0
 800a270:	4642      	mov	r2, r8
 800a272:	189b      	adds	r3, r3, r2
 800a274:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a278:	464b      	mov	r3, r9
 800a27a:	460a      	mov	r2, r1
 800a27c:	eb42 0303 	adc.w	r3, r2, r3
 800a280:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a284:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a288:	685b      	ldr	r3, [r3, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a28e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a290:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a294:	460b      	mov	r3, r1
 800a296:	18db      	adds	r3, r3, r3
 800a298:	603b      	str	r3, [r7, #0]
 800a29a:	4613      	mov	r3, r2
 800a29c:	eb42 0303 	adc.w	r3, r2, r3
 800a2a0:	607b      	str	r3, [r7, #4]
 800a2a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2a6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a2aa:	f7f5 ff95 	bl	80001d8 <__aeabi_uldivmod>
 800a2ae:	4602      	mov	r2, r0
 800a2b0:	460b      	mov	r3, r1
 800a2b2:	4b0e      	ldr	r3, [pc, #56]	@ (800a2ec <USART_SetConfig+0x52c>)
 800a2b4:	fba3 1302 	umull	r1, r3, r3, r2
 800a2b8:	095b      	lsrs	r3, r3, #5
 800a2ba:	2164      	movs	r1, #100	@ 0x64
 800a2bc:	fb01 f303 	mul.w	r3, r1, r3
 800a2c0:	1ad3      	subs	r3, r2, r3
 800a2c2:	00db      	lsls	r3, r3, #3
 800a2c4:	3332      	adds	r3, #50	@ 0x32
 800a2c6:	4a09      	ldr	r2, [pc, #36]	@ (800a2ec <USART_SetConfig+0x52c>)
 800a2c8:	fba2 2303 	umull	r2, r3, r2, r3
 800a2cc:	095b      	lsrs	r3, r3, #5
 800a2ce:	f003 0207 	and.w	r2, r3, #7
 800a2d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	4422      	add	r2, r4
 800a2da:	609a      	str	r2, [r3, #8]
  }
}
 800a2dc:	bf00      	nop
 800a2de:	bf00      	nop
 800a2e0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2ea:	bf00      	nop
 800a2ec:	51eb851f 	.word	0x51eb851f

0800a2f0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b084      	sub	sp, #16
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
 800a2fa:	f107 001c 	add.w	r0, r7, #28
 800a2fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a302:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a306:	2b01      	cmp	r3, #1
 800a308:	d123      	bne.n	800a352 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a30e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	68db      	ldr	r3, [r3, #12]
 800a31a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a31e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a322:	687a      	ldr	r2, [r7, #4]
 800a324:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68db      	ldr	r3, [r3, #12]
 800a32a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a332:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a336:	2b01      	cmp	r3, #1
 800a338:	d105      	bne.n	800a346 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	68db      	ldr	r3, [r3, #12]
 800a33e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f001 fae8 	bl	800b91c <USB_CoreReset>
 800a34c:	4603      	mov	r3, r0
 800a34e:	73fb      	strb	r3, [r7, #15]
 800a350:	e01b      	b.n	800a38a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	68db      	ldr	r3, [r3, #12]
 800a356:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a35e:	6878      	ldr	r0, [r7, #4]
 800a360:	f001 fadc 	bl	800b91c <USB_CoreReset>
 800a364:	4603      	mov	r3, r0
 800a366:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a368:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d106      	bne.n	800a37e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a374:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	639a      	str	r2, [r3, #56]	@ 0x38
 800a37c:	e005      	b.n	800a38a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a382:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a38a:	7fbb      	ldrb	r3, [r7, #30]
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d10b      	bne.n	800a3a8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	689b      	ldr	r3, [r3, #8]
 800a394:	f043 0206 	orr.w	r2, r3, #6
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	689b      	ldr	r3, [r3, #8]
 800a3a0:	f043 0220 	orr.w	r2, r3, #32
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3710      	adds	r7, #16
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3b4:	b004      	add	sp, #16
 800a3b6:	4770      	bx	lr

0800a3b8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	60f8      	str	r0, [r7, #12]
 800a3c0:	60b9      	str	r1, [r7, #8]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a3c6:	79fb      	ldrb	r3, [r7, #7]
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	d165      	bne.n	800a498 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	4a41      	ldr	r2, [pc, #260]	@ (800a4d4 <USB_SetTurnaroundTime+0x11c>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d906      	bls.n	800a3e2 <USB_SetTurnaroundTime+0x2a>
 800a3d4:	68bb      	ldr	r3, [r7, #8]
 800a3d6:	4a40      	ldr	r2, [pc, #256]	@ (800a4d8 <USB_SetTurnaroundTime+0x120>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d202      	bcs.n	800a3e2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3dc:	230f      	movs	r3, #15
 800a3de:	617b      	str	r3, [r7, #20]
 800a3e0:	e062      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	4a3c      	ldr	r2, [pc, #240]	@ (800a4d8 <USB_SetTurnaroundTime+0x120>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d306      	bcc.n	800a3f8 <USB_SetTurnaroundTime+0x40>
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	4a3b      	ldr	r2, [pc, #236]	@ (800a4dc <USB_SetTurnaroundTime+0x124>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d202      	bcs.n	800a3f8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a3f2:	230e      	movs	r3, #14
 800a3f4:	617b      	str	r3, [r7, #20]
 800a3f6:	e057      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4a38      	ldr	r2, [pc, #224]	@ (800a4dc <USB_SetTurnaroundTime+0x124>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d306      	bcc.n	800a40e <USB_SetTurnaroundTime+0x56>
 800a400:	68bb      	ldr	r3, [r7, #8]
 800a402:	4a37      	ldr	r2, [pc, #220]	@ (800a4e0 <USB_SetTurnaroundTime+0x128>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d202      	bcs.n	800a40e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a408:	230d      	movs	r3, #13
 800a40a:	617b      	str	r3, [r7, #20]
 800a40c:	e04c      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	4a33      	ldr	r2, [pc, #204]	@ (800a4e0 <USB_SetTurnaroundTime+0x128>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d306      	bcc.n	800a424 <USB_SetTurnaroundTime+0x6c>
 800a416:	68bb      	ldr	r3, [r7, #8]
 800a418:	4a32      	ldr	r2, [pc, #200]	@ (800a4e4 <USB_SetTurnaroundTime+0x12c>)
 800a41a:	4293      	cmp	r3, r2
 800a41c:	d802      	bhi.n	800a424 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a41e:	230c      	movs	r3, #12
 800a420:	617b      	str	r3, [r7, #20]
 800a422:	e041      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4a2f      	ldr	r2, [pc, #188]	@ (800a4e4 <USB_SetTurnaroundTime+0x12c>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d906      	bls.n	800a43a <USB_SetTurnaroundTime+0x82>
 800a42c:	68bb      	ldr	r3, [r7, #8]
 800a42e:	4a2e      	ldr	r2, [pc, #184]	@ (800a4e8 <USB_SetTurnaroundTime+0x130>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d802      	bhi.n	800a43a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a434:	230b      	movs	r3, #11
 800a436:	617b      	str	r3, [r7, #20]
 800a438:	e036      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	4a2a      	ldr	r2, [pc, #168]	@ (800a4e8 <USB_SetTurnaroundTime+0x130>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d906      	bls.n	800a450 <USB_SetTurnaroundTime+0x98>
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	4a29      	ldr	r2, [pc, #164]	@ (800a4ec <USB_SetTurnaroundTime+0x134>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d802      	bhi.n	800a450 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a44a:	230a      	movs	r3, #10
 800a44c:	617b      	str	r3, [r7, #20]
 800a44e:	e02b      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	4a26      	ldr	r2, [pc, #152]	@ (800a4ec <USB_SetTurnaroundTime+0x134>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d906      	bls.n	800a466 <USB_SetTurnaroundTime+0xae>
 800a458:	68bb      	ldr	r3, [r7, #8]
 800a45a:	4a25      	ldr	r2, [pc, #148]	@ (800a4f0 <USB_SetTurnaroundTime+0x138>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d202      	bcs.n	800a466 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a460:	2309      	movs	r3, #9
 800a462:	617b      	str	r3, [r7, #20]
 800a464:	e020      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	4a21      	ldr	r2, [pc, #132]	@ (800a4f0 <USB_SetTurnaroundTime+0x138>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d306      	bcc.n	800a47c <USB_SetTurnaroundTime+0xc4>
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	4a20      	ldr	r2, [pc, #128]	@ (800a4f4 <USB_SetTurnaroundTime+0x13c>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d802      	bhi.n	800a47c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a476:	2308      	movs	r3, #8
 800a478:	617b      	str	r3, [r7, #20]
 800a47a:	e015      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	4a1d      	ldr	r2, [pc, #116]	@ (800a4f4 <USB_SetTurnaroundTime+0x13c>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d906      	bls.n	800a492 <USB_SetTurnaroundTime+0xda>
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	4a1c      	ldr	r2, [pc, #112]	@ (800a4f8 <USB_SetTurnaroundTime+0x140>)
 800a488:	4293      	cmp	r3, r2
 800a48a:	d202      	bcs.n	800a492 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a48c:	2307      	movs	r3, #7
 800a48e:	617b      	str	r3, [r7, #20]
 800a490:	e00a      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a492:	2306      	movs	r3, #6
 800a494:	617b      	str	r3, [r7, #20]
 800a496:	e007      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a498:	79fb      	ldrb	r3, [r7, #7]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d102      	bne.n	800a4a4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a49e:	2309      	movs	r3, #9
 800a4a0:	617b      	str	r3, [r7, #20]
 800a4a2:	e001      	b.n	800a4a8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a4a4:	2309      	movs	r3, #9
 800a4a6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	68db      	ldr	r3, [r3, #12]
 800a4ac:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	68da      	ldr	r2, [r3, #12]
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	029b      	lsls	r3, r3, #10
 800a4bc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a4c0:	431a      	orrs	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4c6:	2300      	movs	r3, #0
}
 800a4c8:	4618      	mov	r0, r3
 800a4ca:	371c      	adds	r7, #28
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	00d8acbf 	.word	0x00d8acbf
 800a4d8:	00e4e1c0 	.word	0x00e4e1c0
 800a4dc:	00f42400 	.word	0x00f42400
 800a4e0:	01067380 	.word	0x01067380
 800a4e4:	011a499f 	.word	0x011a499f
 800a4e8:	01312cff 	.word	0x01312cff
 800a4ec:	014ca43f 	.word	0x014ca43f
 800a4f0:	016e3600 	.word	0x016e3600
 800a4f4:	01a6ab1f 	.word	0x01a6ab1f
 800a4f8:	01e84800 	.word	0x01e84800

0800a4fc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b083      	sub	sp, #12
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f043 0201 	orr.w	r2, r3, #1
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a510:	2300      	movs	r3, #0
}
 800a512:	4618      	mov	r0, r3
 800a514:	370c      	adds	r7, #12
 800a516:	46bd      	mov	sp, r7
 800a518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51c:	4770      	bx	lr

0800a51e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a51e:	b480      	push	{r7}
 800a520:	b083      	sub	sp, #12
 800a522:	af00      	add	r7, sp, #0
 800a524:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f023 0201 	bic.w	r2, r3, #1
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a532:	2300      	movs	r3, #0
}
 800a534:	4618      	mov	r0, r3
 800a536:	370c      	adds	r7, #12
 800a538:	46bd      	mov	sp, r7
 800a53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53e:	4770      	bx	lr

0800a540 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a540:	b580      	push	{r7, lr}
 800a542:	b084      	sub	sp, #16
 800a544:	af00      	add	r7, sp, #0
 800a546:	6078      	str	r0, [r7, #4]
 800a548:	460b      	mov	r3, r1
 800a54a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a54c:	2300      	movs	r3, #0
 800a54e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a55c:	78fb      	ldrb	r3, [r7, #3]
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d115      	bne.n	800a58e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	68db      	ldr	r3, [r3, #12]
 800a566:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a56e:	200a      	movs	r0, #10
 800a570:	f7f7 fffc 	bl	800256c <HAL_Delay>
      ms += 10U;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	330a      	adds	r3, #10
 800a578:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f001 f93f 	bl	800b7fe <USB_GetMode>
 800a580:	4603      	mov	r3, r0
 800a582:	2b01      	cmp	r3, #1
 800a584:	d01e      	beq.n	800a5c4 <USB_SetCurrentMode+0x84>
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2bc7      	cmp	r3, #199	@ 0xc7
 800a58a:	d9f0      	bls.n	800a56e <USB_SetCurrentMode+0x2e>
 800a58c:	e01a      	b.n	800a5c4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a58e:	78fb      	ldrb	r3, [r7, #3]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d115      	bne.n	800a5c0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	68db      	ldr	r3, [r3, #12]
 800a598:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5a0:	200a      	movs	r0, #10
 800a5a2:	f7f7 ffe3 	bl	800256c <HAL_Delay>
      ms += 10U;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	330a      	adds	r3, #10
 800a5aa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f001 f926 	bl	800b7fe <USB_GetMode>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d005      	beq.n	800a5c4 <USB_SetCurrentMode+0x84>
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	2bc7      	cmp	r3, #199	@ 0xc7
 800a5bc:	d9f0      	bls.n	800a5a0 <USB_SetCurrentMode+0x60>
 800a5be:	e001      	b.n	800a5c4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e005      	b.n	800a5d0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2bc8      	cmp	r3, #200	@ 0xc8
 800a5c8:	d101      	bne.n	800a5ce <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5ca:	2301      	movs	r3, #1
 800a5cc:	e000      	b.n	800a5d0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3710      	adds	r7, #16
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5d8:	b084      	sub	sp, #16
 800a5da:	b580      	push	{r7, lr}
 800a5dc:	b086      	sub	sp, #24
 800a5de:	af00      	add	r7, sp, #0
 800a5e0:	6078      	str	r0, [r7, #4]
 800a5e2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a5e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	613b      	str	r3, [r7, #16]
 800a5f6:	e009      	b.n	800a60c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5f8:	687a      	ldr	r2, [r7, #4]
 800a5fa:	693b      	ldr	r3, [r7, #16]
 800a5fc:	3340      	adds	r3, #64	@ 0x40
 800a5fe:	009b      	lsls	r3, r3, #2
 800a600:	4413      	add	r3, r2
 800a602:	2200      	movs	r2, #0
 800a604:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a606:	693b      	ldr	r3, [r7, #16]
 800a608:	3301      	adds	r3, #1
 800a60a:	613b      	str	r3, [r7, #16]
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	2b0e      	cmp	r3, #14
 800a610:	d9f2      	bls.n	800a5f8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a612:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a616:	2b00      	cmp	r3, #0
 800a618:	d11c      	bne.n	800a654 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a620:	685b      	ldr	r3, [r3, #4]
 800a622:	68fa      	ldr	r2, [r7, #12]
 800a624:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a628:	f043 0302 	orr.w	r3, r3, #2
 800a62c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a632:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a63e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a64a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	639a      	str	r2, [r3, #56]	@ 0x38
 800a652:	e00b      	b.n	800a66c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a658:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a664:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a672:	461a      	mov	r2, r3
 800a674:	2300      	movs	r3, #0
 800a676:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a678:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a67c:	2b01      	cmp	r3, #1
 800a67e:	d10d      	bne.n	800a69c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a680:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a684:	2b00      	cmp	r3, #0
 800a686:	d104      	bne.n	800a692 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a688:	2100      	movs	r1, #0
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 f968 	bl	800a960 <USB_SetDevSpeed>
 800a690:	e008      	b.n	800a6a4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a692:	2101      	movs	r1, #1
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 f963 	bl	800a960 <USB_SetDevSpeed>
 800a69a:	e003      	b.n	800a6a4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a69c:	2103      	movs	r1, #3
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f95e 	bl	800a960 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a6a4:	2110      	movs	r1, #16
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 f8fa 	bl	800a8a0 <USB_FlushTxFifo>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d001      	beq.n	800a6b6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 f924 	bl	800a904 <USB_FlushRxFifo>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d001      	beq.n	800a6c6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6cc:	461a      	mov	r2, r3
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d8:	461a      	mov	r2, r3
 800a6da:	2300      	movs	r3, #0
 800a6dc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6e4:	461a      	mov	r2, r3
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	613b      	str	r3, [r7, #16]
 800a6ee:	e043      	b.n	800a778 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	015a      	lsls	r2, r3, #5
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	4413      	add	r3, r2
 800a6f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a702:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a706:	d118      	bne.n	800a73a <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a708:	693b      	ldr	r3, [r7, #16]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10a      	bne.n	800a724 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a70e:	693b      	ldr	r3, [r7, #16]
 800a710:	015a      	lsls	r2, r3, #5
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	4413      	add	r3, r2
 800a716:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a71a:	461a      	mov	r2, r3
 800a71c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a720:	6013      	str	r3, [r2, #0]
 800a722:	e013      	b.n	800a74c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	015a      	lsls	r2, r3, #5
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	4413      	add	r3, r2
 800a72c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a730:	461a      	mov	r2, r3
 800a732:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a736:	6013      	str	r3, [r2, #0]
 800a738:	e008      	b.n	800a74c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a73a:	693b      	ldr	r3, [r7, #16]
 800a73c:	015a      	lsls	r2, r3, #5
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	4413      	add	r3, r2
 800a742:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a746:	461a      	mov	r2, r3
 800a748:	2300      	movs	r3, #0
 800a74a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a758:	461a      	mov	r2, r3
 800a75a:	2300      	movs	r3, #0
 800a75c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a75e:	693b      	ldr	r3, [r7, #16]
 800a760:	015a      	lsls	r2, r3, #5
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	4413      	add	r3, r2
 800a766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a76a:	461a      	mov	r2, r3
 800a76c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a770:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	3301      	adds	r3, #1
 800a776:	613b      	str	r3, [r7, #16]
 800a778:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a77c:	461a      	mov	r2, r3
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	4293      	cmp	r3, r2
 800a782:	d3b5      	bcc.n	800a6f0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a784:	2300      	movs	r3, #0
 800a786:	613b      	str	r3, [r7, #16]
 800a788:	e043      	b.n	800a812 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a78a:	693b      	ldr	r3, [r7, #16]
 800a78c:	015a      	lsls	r2, r3, #5
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4413      	add	r3, r2
 800a792:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a79c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7a0:	d118      	bne.n	800a7d4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d10a      	bne.n	800a7be <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a7ba:	6013      	str	r3, [r2, #0]
 800a7bc:	e013      	b.n	800a7e6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7ca:	461a      	mov	r2, r3
 800a7cc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a7d0:	6013      	str	r3, [r2, #0]
 800a7d2:	e008      	b.n	800a7e6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7d4:	693b      	ldr	r3, [r7, #16]
 800a7d6:	015a      	lsls	r2, r3, #5
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	4413      	add	r3, r2
 800a7dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7e0:	461a      	mov	r2, r3
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	015a      	lsls	r2, r3, #5
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7f8:	693b      	ldr	r3, [r7, #16]
 800a7fa:	015a      	lsls	r2, r3, #5
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	4413      	add	r3, r2
 800a800:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a804:	461a      	mov	r2, r3
 800a806:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a80a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	3301      	adds	r3, #1
 800a810:	613b      	str	r3, [r7, #16]
 800a812:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a816:	461a      	mov	r2, r3
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d3b5      	bcc.n	800a78a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a82c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a830:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	2200      	movs	r2, #0
 800a836:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a83e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a840:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a844:	2b00      	cmp	r3, #0
 800a846:	d105      	bne.n	800a854 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	699b      	ldr	r3, [r3, #24]
 800a84c:	f043 0210 	orr.w	r2, r3, #16
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	699a      	ldr	r2, [r3, #24]
 800a858:	4b10      	ldr	r3, [pc, #64]	@ (800a89c <USB_DevInit+0x2c4>)
 800a85a:	4313      	orrs	r3, r2
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a860:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a864:	2b00      	cmp	r3, #0
 800a866:	d005      	beq.n	800a874 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	699b      	ldr	r3, [r3, #24]
 800a86c:	f043 0208 	orr.w	r2, r3, #8
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a874:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a878:	2b01      	cmp	r3, #1
 800a87a:	d107      	bne.n	800a88c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a884:	f043 0304 	orr.w	r3, r3, #4
 800a888:	687a      	ldr	r2, [r7, #4]
 800a88a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a88c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a88e:	4618      	mov	r0, r3
 800a890:	3718      	adds	r7, #24
 800a892:	46bd      	mov	sp, r7
 800a894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a898:	b004      	add	sp, #16
 800a89a:	4770      	bx	lr
 800a89c:	803c3800 	.word	0x803c3800

0800a8a0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b085      	sub	sp, #20
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8ba:	d901      	bls.n	800a8c0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e01b      	b.n	800a8f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	691b      	ldr	r3, [r3, #16]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	daf2      	bge.n	800a8ae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8c8:	2300      	movs	r3, #0
 800a8ca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	019b      	lsls	r3, r3, #6
 800a8d0:	f043 0220 	orr.w	r2, r3, #32
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	3301      	adds	r3, #1
 800a8dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8e4:	d901      	bls.n	800a8ea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8e6:	2303      	movs	r3, #3
 800a8e8:	e006      	b.n	800a8f8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	691b      	ldr	r3, [r3, #16]
 800a8ee:	f003 0320 	and.w	r3, r3, #32
 800a8f2:	2b20      	cmp	r3, #32
 800a8f4:	d0f0      	beq.n	800a8d8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3714      	adds	r7, #20
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr

0800a904 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a904:	b480      	push	{r7}
 800a906:	b085      	sub	sp, #20
 800a908:	af00      	add	r7, sp, #0
 800a90a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a90c:	2300      	movs	r3, #0
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	3301      	adds	r3, #1
 800a914:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a91c:	d901      	bls.n	800a922 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e018      	b.n	800a954 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	daf2      	bge.n	800a910 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a92a:	2300      	movs	r3, #0
 800a92c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	2210      	movs	r2, #16
 800a932:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3301      	adds	r3, #1
 800a938:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a940:	d901      	bls.n	800a946 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e006      	b.n	800a954 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f003 0310 	and.w	r3, r3, #16
 800a94e:	2b10      	cmp	r3, #16
 800a950:	d0f0      	beq.n	800a934 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	460b      	mov	r3, r1
 800a96a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	78fb      	ldrb	r3, [r7, #3]
 800a97a:	68f9      	ldr	r1, [r7, #12]
 800a97c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a980:	4313      	orrs	r3, r2
 800a982:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a984:	2300      	movs	r3, #0
}
 800a986:	4618      	mov	r0, r3
 800a988:	3714      	adds	r7, #20
 800a98a:	46bd      	mov	sp, r7
 800a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a990:	4770      	bx	lr

0800a992 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a992:	b480      	push	{r7}
 800a994:	b087      	sub	sp, #28
 800a996:	af00      	add	r7, sp, #0
 800a998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a99e:	693b      	ldr	r3, [r7, #16]
 800a9a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9a4:	689b      	ldr	r3, [r3, #8]
 800a9a6:	f003 0306 	and.w	r3, r3, #6
 800a9aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d102      	bne.n	800a9b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	75fb      	strb	r3, [r7, #23]
 800a9b6:	e00a      	b.n	800a9ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d002      	beq.n	800a9c4 <USB_GetDevSpeed+0x32>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	2b06      	cmp	r3, #6
 800a9c2:	d102      	bne.n	800a9ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	75fb      	strb	r3, [r7, #23]
 800a9c8:	e001      	b.n	800a9ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a9ca:	230f      	movs	r3, #15
 800a9cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	371c      	adds	r7, #28
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9da:	4770      	bx	lr

0800a9dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a9dc:	b480      	push	{r7}
 800a9de:	b085      	sub	sp, #20
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	785b      	ldrb	r3, [r3, #1]
 800a9f4:	2b01      	cmp	r3, #1
 800a9f6:	d13a      	bne.n	800aa6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9fe:	69da      	ldr	r2, [r3, #28]
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	f003 030f 	and.w	r3, r3, #15
 800aa08:	2101      	movs	r1, #1
 800aa0a:	fa01 f303 	lsl.w	r3, r1, r3
 800aa0e:	b29b      	uxth	r3, r3
 800aa10:	68f9      	ldr	r1, [r7, #12]
 800aa12:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa16:	4313      	orrs	r3, r2
 800aa18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d155      	bne.n	800aadc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	015a      	lsls	r2, r3, #5
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	4413      	add	r3, r2
 800aa38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	791b      	ldrb	r3, [r3, #4]
 800aa4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	059b      	lsls	r3, r3, #22
 800aa52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa54:	4313      	orrs	r3, r2
 800aa56:	68ba      	ldr	r2, [r7, #8]
 800aa58:	0151      	lsls	r1, r2, #5
 800aa5a:	68fa      	ldr	r2, [r7, #12]
 800aa5c:	440a      	add	r2, r1
 800aa5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aa62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa66:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aa6a:	6013      	str	r3, [r2, #0]
 800aa6c:	e036      	b.n	800aadc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa74:	69da      	ldr	r2, [r3, #28]
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	781b      	ldrb	r3, [r3, #0]
 800aa7a:	f003 030f 	and.w	r3, r3, #15
 800aa7e:	2101      	movs	r1, #1
 800aa80:	fa01 f303 	lsl.w	r3, r1, r3
 800aa84:	041b      	lsls	r3, r3, #16
 800aa86:	68f9      	ldr	r1, [r7, #12]
 800aa88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa8c:	4313      	orrs	r3, r2
 800aa8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	015a      	lsls	r2, r3, #5
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	4413      	add	r3, r2
 800aa98:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d11a      	bne.n	800aadc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	015a      	lsls	r2, r3, #5
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4413      	add	r3, r2
 800aaae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aab2:	681a      	ldr	r2, [r3, #0]
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	689b      	ldr	r3, [r3, #8]
 800aab8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	791b      	ldrb	r3, [r3, #4]
 800aac0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aac2:	430b      	orrs	r3, r1
 800aac4:	4313      	orrs	r3, r2
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	0151      	lsls	r1, r2, #5
 800aaca:	68fa      	ldr	r2, [r7, #12]
 800aacc:	440a      	add	r2, r1
 800aace:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aad2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aad6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aada:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aadc:	2300      	movs	r3, #0
}
 800aade:	4618      	mov	r0, r3
 800aae0:	3714      	adds	r7, #20
 800aae2:	46bd      	mov	sp, r7
 800aae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae8:	4770      	bx	lr
	...

0800aaec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aaec:	b480      	push	{r7}
 800aaee:	b085      	sub	sp, #20
 800aaf0:	af00      	add	r7, sp, #0
 800aaf2:	6078      	str	r0, [r7, #4]
 800aaf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	785b      	ldrb	r3, [r3, #1]
 800ab04:	2b01      	cmp	r3, #1
 800ab06:	d161      	bne.n	800abcc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	015a      	lsls	r2, r3, #5
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	4413      	add	r3, r2
 800ab10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab1a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab1e:	d11f      	bne.n	800ab60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	015a      	lsls	r2, r3, #5
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	4413      	add	r3, r2
 800ab28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	0151      	lsls	r1, r2, #5
 800ab32:	68fa      	ldr	r2, [r7, #12]
 800ab34:	440a      	add	r2, r1
 800ab36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab3a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	015a      	lsls	r2, r3, #5
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	4413      	add	r3, r2
 800ab48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	0151      	lsls	r1, r2, #5
 800ab52:	68fa      	ldr	r2, [r7, #12]
 800ab54:	440a      	add	r2, r1
 800ab56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab5a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	781b      	ldrb	r3, [r3, #0]
 800ab6c:	f003 030f 	and.w	r3, r3, #15
 800ab70:	2101      	movs	r1, #1
 800ab72:	fa01 f303 	lsl.w	r3, r1, r3
 800ab76:	b29b      	uxth	r3, r3
 800ab78:	43db      	mvns	r3, r3
 800ab7a:	68f9      	ldr	r1, [r7, #12]
 800ab7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab80:	4013      	ands	r3, r2
 800ab82:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab8a:	69da      	ldr	r2, [r3, #28]
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	f003 030f 	and.w	r3, r3, #15
 800ab94:	2101      	movs	r1, #1
 800ab96:	fa01 f303 	lsl.w	r3, r1, r3
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	43db      	mvns	r3, r3
 800ab9e:	68f9      	ldr	r1, [r7, #12]
 800aba0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aba4:	4013      	ands	r3, r2
 800aba6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aba8:	68bb      	ldr	r3, [r7, #8]
 800abaa:	015a      	lsls	r2, r3, #5
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	4413      	add	r3, r2
 800abb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abb4:	681a      	ldr	r2, [r3, #0]
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	0159      	lsls	r1, r3, #5
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	440b      	add	r3, r1
 800abbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abc2:	4619      	mov	r1, r3
 800abc4:	4b35      	ldr	r3, [pc, #212]	@ (800ac9c <USB_DeactivateEndpoint+0x1b0>)
 800abc6:	4013      	ands	r3, r2
 800abc8:	600b      	str	r3, [r1, #0]
 800abca:	e060      	b.n	800ac8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abcc:	68bb      	ldr	r3, [r7, #8]
 800abce:	015a      	lsls	r2, r3, #5
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4413      	add	r3, r2
 800abd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800abde:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800abe2:	d11f      	bne.n	800ac24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	68ba      	ldr	r2, [r7, #8]
 800abf4:	0151      	lsls	r1, r2, #5
 800abf6:	68fa      	ldr	r2, [r7, #12]
 800abf8:	440a      	add	r2, r1
 800abfa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800abfe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ac02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	0151      	lsls	r1, r2, #5
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	440a      	add	r2, r1
 800ac1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac2a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	781b      	ldrb	r3, [r3, #0]
 800ac30:	f003 030f 	and.w	r3, r3, #15
 800ac34:	2101      	movs	r1, #1
 800ac36:	fa01 f303 	lsl.w	r3, r1, r3
 800ac3a:	041b      	lsls	r3, r3, #16
 800ac3c:	43db      	mvns	r3, r3
 800ac3e:	68f9      	ldr	r1, [r7, #12]
 800ac40:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac44:	4013      	ands	r3, r2
 800ac46:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac4e:	69da      	ldr	r2, [r3, #28]
 800ac50:	683b      	ldr	r3, [r7, #0]
 800ac52:	781b      	ldrb	r3, [r3, #0]
 800ac54:	f003 030f 	and.w	r3, r3, #15
 800ac58:	2101      	movs	r1, #1
 800ac5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ac5e:	041b      	lsls	r3, r3, #16
 800ac60:	43db      	mvns	r3, r3
 800ac62:	68f9      	ldr	r1, [r7, #12]
 800ac64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac68:	4013      	ands	r3, r2
 800ac6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	015a      	lsls	r2, r3, #5
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac78:	681a      	ldr	r2, [r3, #0]
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	0159      	lsls	r1, r3, #5
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	440b      	add	r3, r1
 800ac82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac86:	4619      	mov	r1, r3
 800ac88:	4b05      	ldr	r3, [pc, #20]	@ (800aca0 <USB_DeactivateEndpoint+0x1b4>)
 800ac8a:	4013      	ands	r3, r2
 800ac8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr
 800ac9c:	ec337800 	.word	0xec337800
 800aca0:	eff37800 	.word	0xeff37800

0800aca4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08a      	sub	sp, #40	@ 0x28
 800aca8:	af02      	add	r7, sp, #8
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	4613      	mov	r3, r2
 800acb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800acb6:	68bb      	ldr	r3, [r7, #8]
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	785b      	ldrb	r3, [r3, #1]
 800acc0:	2b01      	cmp	r3, #1
 800acc2:	f040 817f 	bne.w	800afc4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800acc6:	68bb      	ldr	r3, [r7, #8]
 800acc8:	691b      	ldr	r3, [r3, #16]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d132      	bne.n	800ad34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acce:	69bb      	ldr	r3, [r7, #24]
 800acd0:	015a      	lsls	r2, r3, #5
 800acd2:	69fb      	ldr	r3, [r7, #28]
 800acd4:	4413      	add	r3, r2
 800acd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acda:	691b      	ldr	r3, [r3, #16]
 800acdc:	69ba      	ldr	r2, [r7, #24]
 800acde:	0151      	lsls	r1, r2, #5
 800ace0:	69fa      	ldr	r2, [r7, #28]
 800ace2:	440a      	add	r2, r1
 800ace4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ace8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800acec:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800acf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800acf2:	69bb      	ldr	r3, [r7, #24]
 800acf4:	015a      	lsls	r2, r3, #5
 800acf6:	69fb      	ldr	r3, [r7, #28]
 800acf8:	4413      	add	r3, r2
 800acfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acfe:	691b      	ldr	r3, [r3, #16]
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	0151      	lsls	r1, r2, #5
 800ad04:	69fa      	ldr	r2, [r7, #28]
 800ad06:	440a      	add	r2, r1
 800ad08:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad12:	69bb      	ldr	r3, [r7, #24]
 800ad14:	015a      	lsls	r2, r3, #5
 800ad16:	69fb      	ldr	r3, [r7, #28]
 800ad18:	4413      	add	r3, r2
 800ad1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad1e:	691b      	ldr	r3, [r3, #16]
 800ad20:	69ba      	ldr	r2, [r7, #24]
 800ad22:	0151      	lsls	r1, r2, #5
 800ad24:	69fa      	ldr	r2, [r7, #28]
 800ad26:	440a      	add	r2, r1
 800ad28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad2c:	0cdb      	lsrs	r3, r3, #19
 800ad2e:	04db      	lsls	r3, r3, #19
 800ad30:	6113      	str	r3, [r2, #16]
 800ad32:	e097      	b.n	800ae64 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad34:	69bb      	ldr	r3, [r7, #24]
 800ad36:	015a      	lsls	r2, r3, #5
 800ad38:	69fb      	ldr	r3, [r7, #28]
 800ad3a:	4413      	add	r3, r2
 800ad3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad40:	691b      	ldr	r3, [r3, #16]
 800ad42:	69ba      	ldr	r2, [r7, #24]
 800ad44:	0151      	lsls	r1, r2, #5
 800ad46:	69fa      	ldr	r2, [r7, #28]
 800ad48:	440a      	add	r2, r1
 800ad4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad4e:	0cdb      	lsrs	r3, r3, #19
 800ad50:	04db      	lsls	r3, r3, #19
 800ad52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	69fb      	ldr	r3, [r7, #28]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad60:	691b      	ldr	r3, [r3, #16]
 800ad62:	69ba      	ldr	r2, [r7, #24]
 800ad64:	0151      	lsls	r1, r2, #5
 800ad66:	69fa      	ldr	r2, [r7, #28]
 800ad68:	440a      	add	r2, r1
 800ad6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad6e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ad72:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ad76:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d11a      	bne.n	800adb4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ad7e:	68bb      	ldr	r3, [r7, #8]
 800ad80:	691a      	ldr	r2, [r3, #16]
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d903      	bls.n	800ad92 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	689a      	ldr	r2, [r3, #8]
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad92:	69bb      	ldr	r3, [r7, #24]
 800ad94:	015a      	lsls	r2, r3, #5
 800ad96:	69fb      	ldr	r3, [r7, #28]
 800ad98:	4413      	add	r3, r2
 800ad9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	69ba      	ldr	r2, [r7, #24]
 800ada2:	0151      	lsls	r1, r2, #5
 800ada4:	69fa      	ldr	r2, [r7, #28]
 800ada6:	440a      	add	r2, r1
 800ada8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800adb0:	6113      	str	r3, [r2, #16]
 800adb2:	e044      	b.n	800ae3e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800adb4:	68bb      	ldr	r3, [r7, #8]
 800adb6:	691a      	ldr	r2, [r3, #16]
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	689b      	ldr	r3, [r3, #8]
 800adbc:	4413      	add	r3, r2
 800adbe:	1e5a      	subs	r2, r3, #1
 800adc0:	68bb      	ldr	r3, [r7, #8]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	fbb2 f3f3 	udiv	r3, r2, r3
 800adc8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	015a      	lsls	r2, r3, #5
 800adce:	69fb      	ldr	r3, [r7, #28]
 800add0:	4413      	add	r3, r2
 800add2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800add6:	691a      	ldr	r2, [r3, #16]
 800add8:	8afb      	ldrh	r3, [r7, #22]
 800adda:	04d9      	lsls	r1, r3, #19
 800addc:	4ba4      	ldr	r3, [pc, #656]	@ (800b070 <USB_EPStartXfer+0x3cc>)
 800adde:	400b      	ands	r3, r1
 800ade0:	69b9      	ldr	r1, [r7, #24]
 800ade2:	0148      	lsls	r0, r1, #5
 800ade4:	69f9      	ldr	r1, [r7, #28]
 800ade6:	4401      	add	r1, r0
 800ade8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800adec:	4313      	orrs	r3, r2
 800adee:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	791b      	ldrb	r3, [r3, #4]
 800adf4:	2b01      	cmp	r3, #1
 800adf6:	d122      	bne.n	800ae3e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800adf8:	69bb      	ldr	r3, [r7, #24]
 800adfa:	015a      	lsls	r2, r3, #5
 800adfc:	69fb      	ldr	r3, [r7, #28]
 800adfe:	4413      	add	r3, r2
 800ae00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae04:	691b      	ldr	r3, [r3, #16]
 800ae06:	69ba      	ldr	r2, [r7, #24]
 800ae08:	0151      	lsls	r1, r2, #5
 800ae0a:	69fa      	ldr	r2, [r7, #28]
 800ae0c:	440a      	add	r2, r1
 800ae0e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae12:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ae16:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800ae18:	69bb      	ldr	r3, [r7, #24]
 800ae1a:	015a      	lsls	r2, r3, #5
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	4413      	add	r3, r2
 800ae20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae24:	691a      	ldr	r2, [r3, #16]
 800ae26:	8afb      	ldrh	r3, [r7, #22]
 800ae28:	075b      	lsls	r3, r3, #29
 800ae2a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800ae2e:	69b9      	ldr	r1, [r7, #24]
 800ae30:	0148      	lsls	r0, r1, #5
 800ae32:	69f9      	ldr	r1, [r7, #28]
 800ae34:	4401      	add	r1, r0
 800ae36:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ae3a:	4313      	orrs	r3, r2
 800ae3c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ae3e:	69bb      	ldr	r3, [r7, #24]
 800ae40:	015a      	lsls	r2, r3, #5
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	4413      	add	r3, r2
 800ae46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae4a:	691a      	ldr	r2, [r3, #16]
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	691b      	ldr	r3, [r3, #16]
 800ae50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae54:	69b9      	ldr	r1, [r7, #24]
 800ae56:	0148      	lsls	r0, r1, #5
 800ae58:	69f9      	ldr	r1, [r7, #28]
 800ae5a:	4401      	add	r1, r0
 800ae5c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ae60:	4313      	orrs	r3, r2
 800ae62:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ae64:	79fb      	ldrb	r3, [r7, #7]
 800ae66:	2b01      	cmp	r3, #1
 800ae68:	d14b      	bne.n	800af02 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	69db      	ldr	r3, [r3, #28]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d009      	beq.n	800ae86 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	015a      	lsls	r2, r3, #5
 800ae76:	69fb      	ldr	r3, [r7, #28]
 800ae78:	4413      	add	r3, r2
 800ae7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae7e:	461a      	mov	r2, r3
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	69db      	ldr	r3, [r3, #28]
 800ae84:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	791b      	ldrb	r3, [r3, #4]
 800ae8a:	2b01      	cmp	r3, #1
 800ae8c:	d128      	bne.n	800aee0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae94:	689b      	ldr	r3, [r3, #8]
 800ae96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d110      	bne.n	800aec0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae9e:	69bb      	ldr	r3, [r7, #24]
 800aea0:	015a      	lsls	r2, r3, #5
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	4413      	add	r3, r2
 800aea6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	69ba      	ldr	r2, [r7, #24]
 800aeae:	0151      	lsls	r1, r2, #5
 800aeb0:	69fa      	ldr	r2, [r7, #28]
 800aeb2:	440a      	add	r2, r1
 800aeb4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeb8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aebc:	6013      	str	r3, [r2, #0]
 800aebe:	e00f      	b.n	800aee0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aec0:	69bb      	ldr	r3, [r7, #24]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	69fb      	ldr	r3, [r7, #28]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	69ba      	ldr	r2, [r7, #24]
 800aed0:	0151      	lsls	r1, r2, #5
 800aed2:	69fa      	ldr	r2, [r7, #28]
 800aed4:	440a      	add	r2, r1
 800aed6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aede:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aee0:	69bb      	ldr	r3, [r7, #24]
 800aee2:	015a      	lsls	r2, r3, #5
 800aee4:	69fb      	ldr	r3, [r7, #28]
 800aee6:	4413      	add	r3, r2
 800aee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	0151      	lsls	r1, r2, #5
 800aef2:	69fa      	ldr	r2, [r7, #28]
 800aef4:	440a      	add	r2, r1
 800aef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aefa:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800aefe:	6013      	str	r3, [r2, #0]
 800af00:	e166      	b.n	800b1d0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af02:	69bb      	ldr	r3, [r7, #24]
 800af04:	015a      	lsls	r2, r3, #5
 800af06:	69fb      	ldr	r3, [r7, #28]
 800af08:	4413      	add	r3, r2
 800af0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	69ba      	ldr	r2, [r7, #24]
 800af12:	0151      	lsls	r1, r2, #5
 800af14:	69fa      	ldr	r2, [r7, #28]
 800af16:	440a      	add	r2, r1
 800af18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af20:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	791b      	ldrb	r3, [r3, #4]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d015      	beq.n	800af56 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	f000 814e 	beq.w	800b1d0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af34:	69fb      	ldr	r3, [r7, #28]
 800af36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af3c:	68bb      	ldr	r3, [r7, #8]
 800af3e:	781b      	ldrb	r3, [r3, #0]
 800af40:	f003 030f 	and.w	r3, r3, #15
 800af44:	2101      	movs	r1, #1
 800af46:	fa01 f303 	lsl.w	r3, r1, r3
 800af4a:	69f9      	ldr	r1, [r7, #28]
 800af4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af50:	4313      	orrs	r3, r2
 800af52:	634b      	str	r3, [r1, #52]	@ 0x34
 800af54:	e13c      	b.n	800b1d0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af56:	69fb      	ldr	r3, [r7, #28]
 800af58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af5c:	689b      	ldr	r3, [r3, #8]
 800af5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800af62:	2b00      	cmp	r3, #0
 800af64:	d110      	bne.n	800af88 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af66:	69bb      	ldr	r3, [r7, #24]
 800af68:	015a      	lsls	r2, r3, #5
 800af6a:	69fb      	ldr	r3, [r7, #28]
 800af6c:	4413      	add	r3, r2
 800af6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	69ba      	ldr	r2, [r7, #24]
 800af76:	0151      	lsls	r1, r2, #5
 800af78:	69fa      	ldr	r2, [r7, #28]
 800af7a:	440a      	add	r2, r1
 800af7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af84:	6013      	str	r3, [r2, #0]
 800af86:	e00f      	b.n	800afa8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af88:	69bb      	ldr	r3, [r7, #24]
 800af8a:	015a      	lsls	r2, r3, #5
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	4413      	add	r3, r2
 800af90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	69ba      	ldr	r2, [r7, #24]
 800af98:	0151      	lsls	r1, r2, #5
 800af9a:	69fa      	ldr	r2, [r7, #28]
 800af9c:	440a      	add	r2, r1
 800af9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afa2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afa6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800afa8:	68bb      	ldr	r3, [r7, #8]
 800afaa:	68d9      	ldr	r1, [r3, #12]
 800afac:	68bb      	ldr	r3, [r7, #8]
 800afae:	781a      	ldrb	r2, [r3, #0]
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	b298      	uxth	r0, r3
 800afb6:	79fb      	ldrb	r3, [r7, #7]
 800afb8:	9300      	str	r3, [sp, #0]
 800afba:	4603      	mov	r3, r0
 800afbc:	68f8      	ldr	r0, [r7, #12]
 800afbe:	f000 f9b9 	bl	800b334 <USB_WritePacket>
 800afc2:	e105      	b.n	800b1d0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800afc4:	69bb      	ldr	r3, [r7, #24]
 800afc6:	015a      	lsls	r2, r3, #5
 800afc8:	69fb      	ldr	r3, [r7, #28]
 800afca:	4413      	add	r3, r2
 800afcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800afd0:	691b      	ldr	r3, [r3, #16]
 800afd2:	69ba      	ldr	r2, [r7, #24]
 800afd4:	0151      	lsls	r1, r2, #5
 800afd6:	69fa      	ldr	r2, [r7, #28]
 800afd8:	440a      	add	r2, r1
 800afda:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800afde:	0cdb      	lsrs	r3, r3, #19
 800afe0:	04db      	lsls	r3, r3, #19
 800afe2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	69ba      	ldr	r2, [r7, #24]
 800aff4:	0151      	lsls	r1, r2, #5
 800aff6:	69fa      	ldr	r2, [r7, #28]
 800aff8:	440a      	add	r2, r1
 800affa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800affe:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b002:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b006:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b008:	69bb      	ldr	r3, [r7, #24]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d132      	bne.n	800b074 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	691b      	ldr	r3, [r3, #16]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d003      	beq.n	800b01e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	689a      	ldr	r2, [r3, #8]
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	689a      	ldr	r2, [r3, #8]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b032:	691a      	ldr	r2, [r3, #16]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	6a1b      	ldr	r3, [r3, #32]
 800b038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b03c:	69b9      	ldr	r1, [r7, #24]
 800b03e:	0148      	lsls	r0, r1, #5
 800b040:	69f9      	ldr	r1, [r7, #28]
 800b042:	4401      	add	r1, r0
 800b044:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b048:	4313      	orrs	r3, r2
 800b04a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	015a      	lsls	r2, r3, #5
 800b050:	69fb      	ldr	r3, [r7, #28]
 800b052:	4413      	add	r3, r2
 800b054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b058:	691b      	ldr	r3, [r3, #16]
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	0151      	lsls	r1, r2, #5
 800b05e:	69fa      	ldr	r2, [r7, #28]
 800b060:	440a      	add	r2, r1
 800b062:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b066:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b06a:	6113      	str	r3, [r2, #16]
 800b06c:	e062      	b.n	800b134 <USB_EPStartXfer+0x490>
 800b06e:	bf00      	nop
 800b070:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	691b      	ldr	r3, [r3, #16]
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d123      	bne.n	800b0c4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b07c:	69bb      	ldr	r3, [r7, #24]
 800b07e:	015a      	lsls	r2, r3, #5
 800b080:	69fb      	ldr	r3, [r7, #28]
 800b082:	4413      	add	r3, r2
 800b084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b088:	691a      	ldr	r2, [r3, #16]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	689b      	ldr	r3, [r3, #8]
 800b08e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b092:	69b9      	ldr	r1, [r7, #24]
 800b094:	0148      	lsls	r0, r1, #5
 800b096:	69f9      	ldr	r1, [r7, #28]
 800b098:	4401      	add	r1, r0
 800b09a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	015a      	lsls	r2, r3, #5
 800b0a6:	69fb      	ldr	r3, [r7, #28]
 800b0a8:	4413      	add	r3, r2
 800b0aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0ae:	691b      	ldr	r3, [r3, #16]
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	0151      	lsls	r1, r2, #5
 800b0b4:	69fa      	ldr	r2, [r7, #28]
 800b0b6:	440a      	add	r2, r1
 800b0b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0bc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b0c0:	6113      	str	r3, [r2, #16]
 800b0c2:	e037      	b.n	800b134 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	691a      	ldr	r2, [r3, #16]
 800b0c8:	68bb      	ldr	r3, [r7, #8]
 800b0ca:	689b      	ldr	r3, [r3, #8]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	1e5a      	subs	r2, r3, #1
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0d8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	8afa      	ldrh	r2, [r7, #22]
 800b0e0:	fb03 f202 	mul.w	r2, r3, r2
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b0e8:	69bb      	ldr	r3, [r7, #24]
 800b0ea:	015a      	lsls	r2, r3, #5
 800b0ec:	69fb      	ldr	r3, [r7, #28]
 800b0ee:	4413      	add	r3, r2
 800b0f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0f4:	691a      	ldr	r2, [r3, #16]
 800b0f6:	8afb      	ldrh	r3, [r7, #22]
 800b0f8:	04d9      	lsls	r1, r3, #19
 800b0fa:	4b38      	ldr	r3, [pc, #224]	@ (800b1dc <USB_EPStartXfer+0x538>)
 800b0fc:	400b      	ands	r3, r1
 800b0fe:	69b9      	ldr	r1, [r7, #24]
 800b100:	0148      	lsls	r0, r1, #5
 800b102:	69f9      	ldr	r1, [r7, #28]
 800b104:	4401      	add	r1, r0
 800b106:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b10a:	4313      	orrs	r3, r2
 800b10c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	015a      	lsls	r2, r3, #5
 800b112:	69fb      	ldr	r3, [r7, #28]
 800b114:	4413      	add	r3, r2
 800b116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b11a:	691a      	ldr	r2, [r3, #16]
 800b11c:	68bb      	ldr	r3, [r7, #8]
 800b11e:	6a1b      	ldr	r3, [r3, #32]
 800b120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b124:	69b9      	ldr	r1, [r7, #24]
 800b126:	0148      	lsls	r0, r1, #5
 800b128:	69f9      	ldr	r1, [r7, #28]
 800b12a:	4401      	add	r1, r0
 800b12c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b130:	4313      	orrs	r3, r2
 800b132:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b134:	79fb      	ldrb	r3, [r7, #7]
 800b136:	2b01      	cmp	r3, #1
 800b138:	d10d      	bne.n	800b156 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b13a:	68bb      	ldr	r3, [r7, #8]
 800b13c:	68db      	ldr	r3, [r3, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d009      	beq.n	800b156 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	68d9      	ldr	r1, [r3, #12]
 800b146:	69bb      	ldr	r3, [r7, #24]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b152:	460a      	mov	r2, r1
 800b154:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	791b      	ldrb	r3, [r3, #4]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d128      	bne.n	800b1b0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b164:	689b      	ldr	r3, [r3, #8]
 800b166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d110      	bne.n	800b190 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	015a      	lsls	r2, r3, #5
 800b172:	69fb      	ldr	r3, [r7, #28]
 800b174:	4413      	add	r3, r2
 800b176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	69ba      	ldr	r2, [r7, #24]
 800b17e:	0151      	lsls	r1, r2, #5
 800b180:	69fa      	ldr	r2, [r7, #28]
 800b182:	440a      	add	r2, r1
 800b184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b188:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	e00f      	b.n	800b1b0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	69fb      	ldr	r3, [r7, #28]
 800b196:	4413      	add	r3, r2
 800b198:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b19c:	681b      	ldr	r3, [r3, #0]
 800b19e:	69ba      	ldr	r2, [r7, #24]
 800b1a0:	0151      	lsls	r1, r2, #5
 800b1a2:	69fa      	ldr	r2, [r7, #28]
 800b1a4:	440a      	add	r2, r1
 800b1a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b1b0:	69bb      	ldr	r3, [r7, #24]
 800b1b2:	015a      	lsls	r2, r3, #5
 800b1b4:	69fb      	ldr	r3, [r7, #28]
 800b1b6:	4413      	add	r3, r2
 800b1b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	69ba      	ldr	r2, [r7, #24]
 800b1c0:	0151      	lsls	r1, r2, #5
 800b1c2:	69fa      	ldr	r2, [r7, #28]
 800b1c4:	440a      	add	r2, r1
 800b1c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1ca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b1ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3720      	adds	r7, #32
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
 800b1da:	bf00      	nop
 800b1dc:	1ff80000 	.word	0x1ff80000

0800b1e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b087      	sub	sp, #28
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
 800b1e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b1ea:	2300      	movs	r3, #0
 800b1ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b1f6:	683b      	ldr	r3, [r7, #0]
 800b1f8:	785b      	ldrb	r3, [r3, #1]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d14a      	bne.n	800b294 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	781b      	ldrb	r3, [r3, #0]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b212:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b216:	f040 8086 	bne.w	800b326 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	015a      	lsls	r2, r3, #5
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	4413      	add	r3, r2
 800b224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	683a      	ldr	r2, [r7, #0]
 800b22c:	7812      	ldrb	r2, [r2, #0]
 800b22e:	0151      	lsls	r1, r2, #5
 800b230:	693a      	ldr	r2, [r7, #16]
 800b232:	440a      	add	r2, r1
 800b234:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b238:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b23c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	781b      	ldrb	r3, [r3, #0]
 800b242:	015a      	lsls	r2, r3, #5
 800b244:	693b      	ldr	r3, [r7, #16]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	683a      	ldr	r2, [r7, #0]
 800b250:	7812      	ldrb	r2, [r2, #0]
 800b252:	0151      	lsls	r1, r2, #5
 800b254:	693a      	ldr	r2, [r7, #16]
 800b256:	440a      	add	r2, r1
 800b258:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b25c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b260:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	3301      	adds	r3, #1
 800b266:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b26e:	4293      	cmp	r3, r2
 800b270:	d902      	bls.n	800b278 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b272:	2301      	movs	r3, #1
 800b274:	75fb      	strb	r3, [r7, #23]
          break;
 800b276:	e056      	b.n	800b326 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	781b      	ldrb	r3, [r3, #0]
 800b27c:	015a      	lsls	r2, r3, #5
 800b27e:	693b      	ldr	r3, [r7, #16]
 800b280:	4413      	add	r3, r2
 800b282:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b28c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b290:	d0e7      	beq.n	800b262 <USB_EPStopXfer+0x82>
 800b292:	e048      	b.n	800b326 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	015a      	lsls	r2, r3, #5
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	4413      	add	r3, r2
 800b29e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2ac:	d13b      	bne.n	800b326 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	683a      	ldr	r2, [r7, #0]
 800b2c0:	7812      	ldrb	r2, [r2, #0]
 800b2c2:	0151      	lsls	r1, r2, #5
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	440a      	add	r2, r1
 800b2c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2cc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b2d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b2d2:	683b      	ldr	r3, [r7, #0]
 800b2d4:	781b      	ldrb	r3, [r3, #0]
 800b2d6:	015a      	lsls	r2, r3, #5
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	4413      	add	r3, r2
 800b2dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	7812      	ldrb	r2, [r2, #0]
 800b2e6:	0151      	lsls	r1, r2, #5
 800b2e8:	693a      	ldr	r2, [r7, #16]
 800b2ea:	440a      	add	r2, r1
 800b2ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2f0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b2f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b302:	4293      	cmp	r3, r2
 800b304:	d902      	bls.n	800b30c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b306:	2301      	movs	r3, #1
 800b308:	75fb      	strb	r3, [r7, #23]
          break;
 800b30a:	e00c      	b.n	800b326 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	015a      	lsls	r2, r3, #5
 800b312:	693b      	ldr	r3, [r7, #16]
 800b314:	4413      	add	r3, r2
 800b316:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b320:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b324:	d0e7      	beq.n	800b2f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b326:	7dfb      	ldrb	r3, [r7, #23]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	371c      	adds	r7, #28
 800b32c:	46bd      	mov	sp, r7
 800b32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b332:	4770      	bx	lr

0800b334 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b334:	b480      	push	{r7}
 800b336:	b089      	sub	sp, #36	@ 0x24
 800b338:	af00      	add	r7, sp, #0
 800b33a:	60f8      	str	r0, [r7, #12]
 800b33c:	60b9      	str	r1, [r7, #8]
 800b33e:	4611      	mov	r1, r2
 800b340:	461a      	mov	r2, r3
 800b342:	460b      	mov	r3, r1
 800b344:	71fb      	strb	r3, [r7, #7]
 800b346:	4613      	mov	r3, r2
 800b348:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b352:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b356:	2b00      	cmp	r3, #0
 800b358:	d123      	bne.n	800b3a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b35a:	88bb      	ldrh	r3, [r7, #4]
 800b35c:	3303      	adds	r3, #3
 800b35e:	089b      	lsrs	r3, r3, #2
 800b360:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b362:	2300      	movs	r3, #0
 800b364:	61bb      	str	r3, [r7, #24]
 800b366:	e018      	b.n	800b39a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b368:	79fb      	ldrb	r3, [r7, #7]
 800b36a:	031a      	lsls	r2, r3, #12
 800b36c:	697b      	ldr	r3, [r7, #20]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b374:	461a      	mov	r2, r3
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b37c:	69fb      	ldr	r3, [r7, #28]
 800b37e:	3301      	adds	r3, #1
 800b380:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b382:	69fb      	ldr	r3, [r7, #28]
 800b384:	3301      	adds	r3, #1
 800b386:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	3301      	adds	r3, #1
 800b38c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	3301      	adds	r3, #1
 800b392:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b394:	69bb      	ldr	r3, [r7, #24]
 800b396:	3301      	adds	r3, #1
 800b398:	61bb      	str	r3, [r7, #24]
 800b39a:	69ba      	ldr	r2, [r7, #24]
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	429a      	cmp	r2, r3
 800b3a0:	d3e2      	bcc.n	800b368 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b3a2:	2300      	movs	r3, #0
}
 800b3a4:	4618      	mov	r0, r3
 800b3a6:	3724      	adds	r7, #36	@ 0x24
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ae:	4770      	bx	lr

0800b3b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b08b      	sub	sp, #44	@ 0x2c
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	60f8      	str	r0, [r7, #12]
 800b3b8:	60b9      	str	r1, [r7, #8]
 800b3ba:	4613      	mov	r3, r2
 800b3bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b3c6:	88fb      	ldrh	r3, [r7, #6]
 800b3c8:	089b      	lsrs	r3, r3, #2
 800b3ca:	b29b      	uxth	r3, r3
 800b3cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b3ce:	88fb      	ldrh	r3, [r7, #6]
 800b3d0:	f003 0303 	and.w	r3, r3, #3
 800b3d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	623b      	str	r3, [r7, #32]
 800b3da:	e014      	b.n	800b406 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3e6:	601a      	str	r2, [r3, #0]
    pDest++;
 800b3e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3ea:	3301      	adds	r3, #1
 800b3ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b3ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b3f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f6:	3301      	adds	r3, #1
 800b3f8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b3fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3fc:	3301      	adds	r3, #1
 800b3fe:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	3301      	adds	r3, #1
 800b404:	623b      	str	r3, [r7, #32]
 800b406:	6a3a      	ldr	r2, [r7, #32]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d3e6      	bcc.n	800b3dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b40e:	8bfb      	ldrh	r3, [r7, #30]
 800b410:	2b00      	cmp	r3, #0
 800b412:	d01e      	beq.n	800b452 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b414:	2300      	movs	r3, #0
 800b416:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b418:	69bb      	ldr	r3, [r7, #24]
 800b41a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b41e:	461a      	mov	r2, r3
 800b420:	f107 0310 	add.w	r3, r7, #16
 800b424:	6812      	ldr	r2, [r2, #0]
 800b426:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b428:	693a      	ldr	r2, [r7, #16]
 800b42a:	6a3b      	ldr	r3, [r7, #32]
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	fa22 f303 	lsr.w	r3, r2, r3
 800b434:	b2da      	uxtb	r2, r3
 800b436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b438:	701a      	strb	r2, [r3, #0]
      i++;
 800b43a:	6a3b      	ldr	r3, [r7, #32]
 800b43c:	3301      	adds	r3, #1
 800b43e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b442:	3301      	adds	r3, #1
 800b444:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b446:	8bfb      	ldrh	r3, [r7, #30]
 800b448:	3b01      	subs	r3, #1
 800b44a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b44c:	8bfb      	ldrh	r3, [r7, #30]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1ea      	bne.n	800b428 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b454:	4618      	mov	r0, r3
 800b456:	372c      	adds	r7, #44	@ 0x2c
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr

0800b460 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	781b      	ldrb	r3, [r3, #0]
 800b472:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	785b      	ldrb	r3, [r3, #1]
 800b478:	2b01      	cmp	r3, #1
 800b47a:	d12c      	bne.n	800b4d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	015a      	lsls	r2, r3, #5
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4413      	add	r3, r2
 800b484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	db12      	blt.n	800b4b4 <USB_EPSetStall+0x54>
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d00f      	beq.n	800b4b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	015a      	lsls	r2, r3, #5
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	4413      	add	r3, r2
 800b49c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	0151      	lsls	r1, r2, #5
 800b4a6:	68fa      	ldr	r2, [r7, #12]
 800b4a8:	440a      	add	r2, r1
 800b4aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4ae:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b4b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68ba      	ldr	r2, [r7, #8]
 800b4c4:	0151      	lsls	r1, r2, #5
 800b4c6:	68fa      	ldr	r2, [r7, #12]
 800b4c8:	440a      	add	r2, r1
 800b4ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4ce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	e02b      	b.n	800b52e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	015a      	lsls	r2, r3, #5
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	4413      	add	r3, r2
 800b4de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	db12      	blt.n	800b50e <USB_EPSetStall+0xae>
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d00f      	beq.n	800b50e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	015a      	lsls	r2, r3, #5
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68ba      	ldr	r2, [r7, #8]
 800b4fe:	0151      	lsls	r1, r2, #5
 800b500:	68fa      	ldr	r2, [r7, #12]
 800b502:	440a      	add	r2, r1
 800b504:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b508:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b50c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	4413      	add	r3, r2
 800b516:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68ba      	ldr	r2, [r7, #8]
 800b51e:	0151      	lsls	r1, r2, #5
 800b520:	68fa      	ldr	r2, [r7, #12]
 800b522:	440a      	add	r2, r1
 800b524:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b528:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b52c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b52e:	2300      	movs	r3, #0
}
 800b530:	4618      	mov	r0, r3
 800b532:	3714      	adds	r7, #20
 800b534:	46bd      	mov	sp, r7
 800b536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b53a:	4770      	bx	lr

0800b53c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b53c:	b480      	push	{r7}
 800b53e:	b085      	sub	sp, #20
 800b540:	af00      	add	r7, sp, #0
 800b542:	6078      	str	r0, [r7, #4]
 800b544:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b54a:	683b      	ldr	r3, [r7, #0]
 800b54c:	781b      	ldrb	r3, [r3, #0]
 800b54e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	785b      	ldrb	r3, [r3, #1]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d128      	bne.n	800b5aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	015a      	lsls	r2, r3, #5
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	4413      	add	r3, r2
 800b560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	68ba      	ldr	r2, [r7, #8]
 800b568:	0151      	lsls	r1, r2, #5
 800b56a:	68fa      	ldr	r2, [r7, #12]
 800b56c:	440a      	add	r2, r1
 800b56e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b572:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b576:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	791b      	ldrb	r3, [r3, #4]
 800b57c:	2b03      	cmp	r3, #3
 800b57e:	d003      	beq.n	800b588 <USB_EPClearStall+0x4c>
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	791b      	ldrb	r3, [r3, #4]
 800b584:	2b02      	cmp	r3, #2
 800b586:	d138      	bne.n	800b5fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	015a      	lsls	r2, r3, #5
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	4413      	add	r3, r2
 800b590:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	68ba      	ldr	r2, [r7, #8]
 800b598:	0151      	lsls	r1, r2, #5
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	440a      	add	r2, r1
 800b59e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b5a6:	6013      	str	r3, [r2, #0]
 800b5a8:	e027      	b.n	800b5fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	015a      	lsls	r2, r3, #5
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	0151      	lsls	r1, r2, #5
 800b5bc:	68fa      	ldr	r2, [r7, #12]
 800b5be:	440a      	add	r2, r1
 800b5c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b5c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b5ca:	683b      	ldr	r3, [r7, #0]
 800b5cc:	791b      	ldrb	r3, [r3, #4]
 800b5ce:	2b03      	cmp	r3, #3
 800b5d0:	d003      	beq.n	800b5da <USB_EPClearStall+0x9e>
 800b5d2:	683b      	ldr	r3, [r7, #0]
 800b5d4:	791b      	ldrb	r3, [r3, #4]
 800b5d6:	2b02      	cmp	r3, #2
 800b5d8:	d10f      	bne.n	800b5fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	015a      	lsls	r2, r3, #5
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	68ba      	ldr	r2, [r7, #8]
 800b5ea:	0151      	lsls	r1, r2, #5
 800b5ec:	68fa      	ldr	r2, [r7, #12]
 800b5ee:	440a      	add	r2, r1
 800b5f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b5f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b5fa:	2300      	movs	r3, #0
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3714      	adds	r7, #20
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
 800b610:	460b      	mov	r3, r1
 800b612:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	68fa      	ldr	r2, [r7, #12]
 800b622:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b626:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b62a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b632:	681a      	ldr	r2, [r3, #0]
 800b634:	78fb      	ldrb	r3, [r7, #3]
 800b636:	011b      	lsls	r3, r3, #4
 800b638:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b63c:	68f9      	ldr	r1, [r7, #12]
 800b63e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b642:	4313      	orrs	r3, r2
 800b644:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b646:	2300      	movs	r3, #0
}
 800b648:	4618      	mov	r0, r3
 800b64a:	3714      	adds	r7, #20
 800b64c:	46bd      	mov	sp, r7
 800b64e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b652:	4770      	bx	lr

0800b654 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b654:	b480      	push	{r7}
 800b656:	b085      	sub	sp, #20
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b66e:	f023 0303 	bic.w	r3, r3, #3
 800b672:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b67a:	685b      	ldr	r3, [r3, #4]
 800b67c:	68fa      	ldr	r2, [r7, #12]
 800b67e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b682:	f023 0302 	bic.w	r3, r3, #2
 800b686:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b688:	2300      	movs	r3, #0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3714      	adds	r7, #20
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b696:	b480      	push	{r7}
 800b698:	b085      	sub	sp, #20
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b6b0:	f023 0303 	bic.w	r3, r3, #3
 800b6b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6c4:	f043 0302 	orr.w	r3, r3, #2
 800b6c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3714      	adds	r7, #20
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b085      	sub	sp, #20
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	699b      	ldr	r3, [r3, #24]
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	4013      	ands	r3, r2
 800b6ee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b6f0:	68fb      	ldr	r3, [r7, #12]
}
 800b6f2:	4618      	mov	r0, r3
 800b6f4:	3714      	adds	r7, #20
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fc:	4770      	bx	lr

0800b6fe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b085      	sub	sp, #20
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b710:	699b      	ldr	r3, [r3, #24]
 800b712:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b71a:	69db      	ldr	r3, [r3, #28]
 800b71c:	68ba      	ldr	r2, [r7, #8]
 800b71e:	4013      	ands	r3, r2
 800b720:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	0c1b      	lsrs	r3, r3, #16
}
 800b726:	4618      	mov	r0, r3
 800b728:	3714      	adds	r7, #20
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr

0800b732 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b732:	b480      	push	{r7}
 800b734:	b085      	sub	sp, #20
 800b736:	af00      	add	r7, sp, #0
 800b738:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b744:	699b      	ldr	r3, [r3, #24]
 800b746:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b748:	68fb      	ldr	r3, [r7, #12]
 800b74a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b74e:	69db      	ldr	r3, [r3, #28]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	4013      	ands	r3, r2
 800b754:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b756:	68bb      	ldr	r3, [r7, #8]
 800b758:	b29b      	uxth	r3, r3
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3714      	adds	r7, #20
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b766:	b480      	push	{r7}
 800b768:	b085      	sub	sp, #20
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	6078      	str	r0, [r7, #4]
 800b76e:	460b      	mov	r3, r1
 800b770:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b776:	78fb      	ldrb	r3, [r7, #3]
 800b778:	015a      	lsls	r2, r3, #5
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	4413      	add	r3, r2
 800b77e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b782:	689b      	ldr	r3, [r3, #8]
 800b784:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b78c:	695b      	ldr	r3, [r3, #20]
 800b78e:	68ba      	ldr	r2, [r7, #8]
 800b790:	4013      	ands	r3, r2
 800b792:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b794:	68bb      	ldr	r3, [r7, #8]
}
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr

0800b7a2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b7a2:	b480      	push	{r7}
 800b7a4:	b087      	sub	sp, #28
 800b7a6:	af00      	add	r7, sp, #0
 800b7a8:	6078      	str	r0, [r7, #4]
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b7bc:	697b      	ldr	r3, [r7, #20]
 800b7be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b7c4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b7c6:	78fb      	ldrb	r3, [r7, #3]
 800b7c8:	f003 030f 	and.w	r3, r3, #15
 800b7cc:	68fa      	ldr	r2, [r7, #12]
 800b7ce:	fa22 f303 	lsr.w	r3, r2, r3
 800b7d2:	01db      	lsls	r3, r3, #7
 800b7d4:	b2db      	uxtb	r3, r3
 800b7d6:	693a      	ldr	r2, [r7, #16]
 800b7d8:	4313      	orrs	r3, r2
 800b7da:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b7dc:	78fb      	ldrb	r3, [r7, #3]
 800b7de:	015a      	lsls	r2, r3, #5
 800b7e0:	697b      	ldr	r3, [r7, #20]
 800b7e2:	4413      	add	r3, r2
 800b7e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7e8:	689b      	ldr	r3, [r3, #8]
 800b7ea:	693a      	ldr	r2, [r7, #16]
 800b7ec:	4013      	ands	r3, r2
 800b7ee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b7f0:	68bb      	ldr	r3, [r7, #8]
}
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	371c      	adds	r7, #28
 800b7f6:	46bd      	mov	sp, r7
 800b7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7fe:	b480      	push	{r7}
 800b800:	b083      	sub	sp, #12
 800b802:	af00      	add	r7, sp, #0
 800b804:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	695b      	ldr	r3, [r3, #20]
 800b80a:	f003 0301 	and.w	r3, r3, #1
}
 800b80e:	4618      	mov	r0, r3
 800b810:	370c      	adds	r7, #12
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr

0800b81a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b81a:	b480      	push	{r7}
 800b81c:	b085      	sub	sp, #20
 800b81e:	af00      	add	r7, sp, #0
 800b820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	68fa      	ldr	r2, [r7, #12]
 800b830:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b834:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b838:	f023 0307 	bic.w	r3, r3, #7
 800b83c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	68fa      	ldr	r2, [r7, #12]
 800b848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b84c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b850:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b860:	b480      	push	{r7}
 800b862:	b087      	sub	sp, #28
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	460b      	mov	r3, r1
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	333c      	adds	r3, #60	@ 0x3c
 800b876:	3304      	adds	r3, #4
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b87c:	693b      	ldr	r3, [r7, #16]
 800b87e:	4a26      	ldr	r2, [pc, #152]	@ (800b918 <USB_EP0_OutStart+0xb8>)
 800b880:	4293      	cmp	r3, r2
 800b882:	d90a      	bls.n	800b89a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b890:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b894:	d101      	bne.n	800b89a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b896:	2300      	movs	r3, #0
 800b898:	e037      	b.n	800b90a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b89a:	697b      	ldr	r3, [r7, #20]
 800b89c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b8b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8c8:	f043 0318 	orr.w	r3, r3, #24
 800b8cc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8d4:	691b      	ldr	r3, [r3, #16]
 800b8d6:	697a      	ldr	r2, [r7, #20]
 800b8d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8dc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b8e0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b8e2:	7afb      	ldrb	r3, [r7, #11]
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d10f      	bne.n	800b908 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b8f4:	697b      	ldr	r3, [r7, #20]
 800b8f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	697a      	ldr	r2, [r7, #20]
 800b8fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b902:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b906:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b908:	2300      	movs	r3, #0
}
 800b90a:	4618      	mov	r0, r3
 800b90c:	371c      	adds	r7, #28
 800b90e:	46bd      	mov	sp, r7
 800b910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	4f54300a 	.word	0x4f54300a

0800b91c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b91c:	b480      	push	{r7}
 800b91e:	b085      	sub	sp, #20
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b924:	2300      	movs	r3, #0
 800b926:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	3301      	adds	r3, #1
 800b92c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b934:	d901      	bls.n	800b93a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b936:	2303      	movs	r3, #3
 800b938:	e022      	b.n	800b980 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	691b      	ldr	r3, [r3, #16]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	daf2      	bge.n	800b928 <USB_CoreReset+0xc>

  count = 10U;
 800b942:	230a      	movs	r3, #10
 800b944:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800b946:	e002      	b.n	800b94e <USB_CoreReset+0x32>
  {
    count--;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	3b01      	subs	r3, #1
 800b94c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d1f9      	bne.n	800b948 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	f043 0201 	orr.w	r2, r3, #1
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	3301      	adds	r3, #1
 800b964:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b96c:	d901      	bls.n	800b972 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800b96e:	2303      	movs	r3, #3
 800b970:	e006      	b.n	800b980 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	691b      	ldr	r3, [r3, #16]
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	2b01      	cmp	r3, #1
 800b97c:	d0f0      	beq.n	800b960 <USB_CoreReset+0x44>

  return HAL_OK;
 800b97e:	2300      	movs	r3, #0
}
 800b980:	4618      	mov	r0, r3
 800b982:	3714      	adds	r7, #20
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b084      	sub	sp, #16
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
 800b994:	460b      	mov	r3, r1
 800b996:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b998:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b99c:	f002 fd1e 	bl	800e3dc <USBD_static_malloc>
 800b9a0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d109      	bne.n	800b9bc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	32b0      	adds	r2, #176	@ 0xb0
 800b9b2:	2100      	movs	r1, #0
 800b9b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b9b8:	2302      	movs	r3, #2
 800b9ba:	e0d4      	b.n	800bb66 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b9bc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800b9c0:	2100      	movs	r1, #0
 800b9c2:	68f8      	ldr	r0, [r7, #12]
 800b9c4:	f002 fd4e 	bl	800e464 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	32b0      	adds	r2, #176	@ 0xb0
 800b9d2:	68f9      	ldr	r1, [r7, #12]
 800b9d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	32b0      	adds	r2, #176	@ 0xb0
 800b9e2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	7c1b      	ldrb	r3, [r3, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d138      	bne.n	800ba66 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b9f4:	4b5e      	ldr	r3, [pc, #376]	@ (800bb70 <USBD_CDC_Init+0x1e4>)
 800b9f6:	7819      	ldrb	r1, [r3, #0]
 800b9f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b9fc:	2202      	movs	r2, #2
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f002 fbc9 	bl	800e196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ba04:	4b5a      	ldr	r3, [pc, #360]	@ (800bb70 <USBD_CDC_Init+0x1e4>)
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	f003 020f 	and.w	r2, r3, #15
 800ba0c:	6879      	ldr	r1, [r7, #4]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	009b      	lsls	r3, r3, #2
 800ba12:	4413      	add	r3, r2
 800ba14:	009b      	lsls	r3, r3, #2
 800ba16:	440b      	add	r3, r1
 800ba18:	3323      	adds	r3, #35	@ 0x23
 800ba1a:	2201      	movs	r2, #1
 800ba1c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ba1e:	4b55      	ldr	r3, [pc, #340]	@ (800bb74 <USBD_CDC_Init+0x1e8>)
 800ba20:	7819      	ldrb	r1, [r3, #0]
 800ba22:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba26:	2202      	movs	r2, #2
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f002 fbb4 	bl	800e196 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ba2e:	4b51      	ldr	r3, [pc, #324]	@ (800bb74 <USBD_CDC_Init+0x1e8>)
 800ba30:	781b      	ldrb	r3, [r3, #0]
 800ba32:	f003 020f 	and.w	r2, r3, #15
 800ba36:	6879      	ldr	r1, [r7, #4]
 800ba38:	4613      	mov	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	4413      	add	r3, r2
 800ba3e:	009b      	lsls	r3, r3, #2
 800ba40:	440b      	add	r3, r1
 800ba42:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800ba46:	2201      	movs	r2, #1
 800ba48:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ba4a:	4b4b      	ldr	r3, [pc, #300]	@ (800bb78 <USBD_CDC_Init+0x1ec>)
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	f003 020f 	and.w	r2, r3, #15
 800ba52:	6879      	ldr	r1, [r7, #4]
 800ba54:	4613      	mov	r3, r2
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	009b      	lsls	r3, r3, #2
 800ba5c:	440b      	add	r3, r1
 800ba5e:	331c      	adds	r3, #28
 800ba60:	2210      	movs	r2, #16
 800ba62:	601a      	str	r2, [r3, #0]
 800ba64:	e035      	b.n	800bad2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ba66:	4b42      	ldr	r3, [pc, #264]	@ (800bb70 <USBD_CDC_Init+0x1e4>)
 800ba68:	7819      	ldrb	r1, [r3, #0]
 800ba6a:	2340      	movs	r3, #64	@ 0x40
 800ba6c:	2202      	movs	r2, #2
 800ba6e:	6878      	ldr	r0, [r7, #4]
 800ba70:	f002 fb91 	bl	800e196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ba74:	4b3e      	ldr	r3, [pc, #248]	@ (800bb70 <USBD_CDC_Init+0x1e4>)
 800ba76:	781b      	ldrb	r3, [r3, #0]
 800ba78:	f003 020f 	and.w	r2, r3, #15
 800ba7c:	6879      	ldr	r1, [r7, #4]
 800ba7e:	4613      	mov	r3, r2
 800ba80:	009b      	lsls	r3, r3, #2
 800ba82:	4413      	add	r3, r2
 800ba84:	009b      	lsls	r3, r3, #2
 800ba86:	440b      	add	r3, r1
 800ba88:	3323      	adds	r3, #35	@ 0x23
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ba8e:	4b39      	ldr	r3, [pc, #228]	@ (800bb74 <USBD_CDC_Init+0x1e8>)
 800ba90:	7819      	ldrb	r1, [r3, #0]
 800ba92:	2340      	movs	r3, #64	@ 0x40
 800ba94:	2202      	movs	r2, #2
 800ba96:	6878      	ldr	r0, [r7, #4]
 800ba98:	f002 fb7d 	bl	800e196 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ba9c:	4b35      	ldr	r3, [pc, #212]	@ (800bb74 <USBD_CDC_Init+0x1e8>)
 800ba9e:	781b      	ldrb	r3, [r3, #0]
 800baa0:	f003 020f 	and.w	r2, r3, #15
 800baa4:	6879      	ldr	r1, [r7, #4]
 800baa6:	4613      	mov	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	4413      	add	r3, r2
 800baac:	009b      	lsls	r3, r3, #2
 800baae:	440b      	add	r3, r1
 800bab0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bab4:	2201      	movs	r2, #1
 800bab6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bab8:	4b2f      	ldr	r3, [pc, #188]	@ (800bb78 <USBD_CDC_Init+0x1ec>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	f003 020f 	and.w	r2, r3, #15
 800bac0:	6879      	ldr	r1, [r7, #4]
 800bac2:	4613      	mov	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	440b      	add	r3, r1
 800bacc:	331c      	adds	r3, #28
 800bace:	2210      	movs	r2, #16
 800bad0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bad2:	4b29      	ldr	r3, [pc, #164]	@ (800bb78 <USBD_CDC_Init+0x1ec>)
 800bad4:	7819      	ldrb	r1, [r3, #0]
 800bad6:	2308      	movs	r3, #8
 800bad8:	2203      	movs	r2, #3
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f002 fb5b 	bl	800e196 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bae0:	4b25      	ldr	r3, [pc, #148]	@ (800bb78 <USBD_CDC_Init+0x1ec>)
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	f003 020f 	and.w	r2, r3, #15
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	4613      	mov	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	440b      	add	r3, r1
 800baf4:	3323      	adds	r3, #35	@ 0x23
 800baf6:	2201      	movs	r2, #1
 800baf8:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	2200      	movs	r2, #0
 800bafe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	33b0      	adds	r3, #176	@ 0xb0
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	4413      	add	r3, r2
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2200      	movs	r2, #0
 800bb1a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d101      	bne.n	800bb34 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bb30:	2302      	movs	r3, #2
 800bb32:	e018      	b.n	800bb66 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	7c1b      	ldrb	r3, [r3, #16]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d10a      	bne.n	800bb52 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb3c:	4b0d      	ldr	r3, [pc, #52]	@ (800bb74 <USBD_CDC_Init+0x1e8>)
 800bb3e:	7819      	ldrb	r1, [r3, #0]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb46:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	f002 fc12 	bl	800e374 <USBD_LL_PrepareReceive>
 800bb50:	e008      	b.n	800bb64 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb52:	4b08      	ldr	r3, [pc, #32]	@ (800bb74 <USBD_CDC_Init+0x1e8>)
 800bb54:	7819      	ldrb	r1, [r3, #0]
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb5c:	2340      	movs	r3, #64	@ 0x40
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f002 fc08 	bl	800e374 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	3710      	adds	r7, #16
 800bb6a:	46bd      	mov	sp, r7
 800bb6c:	bd80      	pop	{r7, pc}
 800bb6e:	bf00      	nop
 800bb70:	200000bf 	.word	0x200000bf
 800bb74:	200000c0 	.word	0x200000c0
 800bb78:	200000c1 	.word	0x200000c1

0800bb7c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	b082      	sub	sp, #8
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
 800bb84:	460b      	mov	r3, r1
 800bb86:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bb88:	4b3a      	ldr	r3, [pc, #232]	@ (800bc74 <USBD_CDC_DeInit+0xf8>)
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	4619      	mov	r1, r3
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f002 fb27 	bl	800e1e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bb94:	4b37      	ldr	r3, [pc, #220]	@ (800bc74 <USBD_CDC_DeInit+0xf8>)
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	f003 020f 	and.w	r2, r3, #15
 800bb9c:	6879      	ldr	r1, [r7, #4]
 800bb9e:	4613      	mov	r3, r2
 800bba0:	009b      	lsls	r3, r3, #2
 800bba2:	4413      	add	r3, r2
 800bba4:	009b      	lsls	r3, r3, #2
 800bba6:	440b      	add	r3, r1
 800bba8:	3323      	adds	r3, #35	@ 0x23
 800bbaa:	2200      	movs	r2, #0
 800bbac:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bbae:	4b32      	ldr	r3, [pc, #200]	@ (800bc78 <USBD_CDC_DeInit+0xfc>)
 800bbb0:	781b      	ldrb	r3, [r3, #0]
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f002 fb14 	bl	800e1e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bbba:	4b2f      	ldr	r3, [pc, #188]	@ (800bc78 <USBD_CDC_DeInit+0xfc>)
 800bbbc:	781b      	ldrb	r3, [r3, #0]
 800bbbe:	f003 020f 	and.w	r2, r3, #15
 800bbc2:	6879      	ldr	r1, [r7, #4]
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	440b      	add	r3, r1
 800bbce:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bbd2:	2200      	movs	r2, #0
 800bbd4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bbd6:	4b29      	ldr	r3, [pc, #164]	@ (800bc7c <USBD_CDC_DeInit+0x100>)
 800bbd8:	781b      	ldrb	r3, [r3, #0]
 800bbda:	4619      	mov	r1, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f002 fb00 	bl	800e1e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bbe2:	4b26      	ldr	r3, [pc, #152]	@ (800bc7c <USBD_CDC_DeInit+0x100>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	f003 020f 	and.w	r2, r3, #15
 800bbea:	6879      	ldr	r1, [r7, #4]
 800bbec:	4613      	mov	r3, r2
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	440b      	add	r3, r1
 800bbf6:	3323      	adds	r3, #35	@ 0x23
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bbfc:	4b1f      	ldr	r3, [pc, #124]	@ (800bc7c <USBD_CDC_DeInit+0x100>)
 800bbfe:	781b      	ldrb	r3, [r3, #0]
 800bc00:	f003 020f 	and.w	r2, r3, #15
 800bc04:	6879      	ldr	r1, [r7, #4]
 800bc06:	4613      	mov	r3, r2
 800bc08:	009b      	lsls	r3, r3, #2
 800bc0a:	4413      	add	r3, r2
 800bc0c:	009b      	lsls	r3, r3, #2
 800bc0e:	440b      	add	r3, r1
 800bc10:	331c      	adds	r3, #28
 800bc12:	2200      	movs	r2, #0
 800bc14:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	32b0      	adds	r2, #176	@ 0xb0
 800bc20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d01f      	beq.n	800bc68 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc2e:	687a      	ldr	r2, [r7, #4]
 800bc30:	33b0      	adds	r3, #176	@ 0xb0
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	685b      	ldr	r3, [r3, #4]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	32b0      	adds	r2, #176	@ 0xb0
 800bc46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f002 fbd4 	bl	800e3f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	32b0      	adds	r2, #176	@ 0xb0
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2200      	movs	r2, #0
 800bc64:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bc68:	2300      	movs	r3, #0
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3708      	adds	r7, #8
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
 800bc72:	bf00      	nop
 800bc74:	200000bf 	.word	0x200000bf
 800bc78:	200000c0 	.word	0x200000c0
 800bc7c:	200000c1 	.word	0x200000c1

0800bc80 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b086      	sub	sp, #24
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	32b0      	adds	r2, #176	@ 0xb0
 800bc94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc98:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bca2:	2300      	movs	r3, #0
 800bca4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d101      	bne.n	800bcb0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e0bf      	b.n	800be30 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d050      	beq.n	800bd5e <USBD_CDC_Setup+0xde>
 800bcbc:	2b20      	cmp	r3, #32
 800bcbe:	f040 80af 	bne.w	800be20 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	88db      	ldrh	r3, [r3, #6]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d03a      	beq.n	800bd40 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	781b      	ldrb	r3, [r3, #0]
 800bcce:	b25b      	sxtb	r3, r3
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	da1b      	bge.n	800bd0c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcda:	687a      	ldr	r2, [r7, #4]
 800bcdc:	33b0      	adds	r3, #176	@ 0xb0
 800bcde:	009b      	lsls	r3, r3, #2
 800bce0:	4413      	add	r3, r2
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	689b      	ldr	r3, [r3, #8]
 800bce6:	683a      	ldr	r2, [r7, #0]
 800bce8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bcea:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	88d2      	ldrh	r2, [r2, #6]
 800bcf0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	88db      	ldrh	r3, [r3, #6]
 800bcf6:	2b07      	cmp	r3, #7
 800bcf8:	bf28      	it	cs
 800bcfa:	2307      	movcs	r3, #7
 800bcfc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bcfe:	693b      	ldr	r3, [r7, #16]
 800bd00:	89fa      	ldrh	r2, [r7, #14]
 800bd02:	4619      	mov	r1, r3
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	f001 fda9 	bl	800d85c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bd0a:	e090      	b.n	800be2e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bd0c:	683b      	ldr	r3, [r7, #0]
 800bd0e:	785a      	ldrb	r2, [r3, #1]
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	88db      	ldrh	r3, [r3, #6]
 800bd1a:	2b3f      	cmp	r3, #63	@ 0x3f
 800bd1c:	d803      	bhi.n	800bd26 <USBD_CDC_Setup+0xa6>
 800bd1e:	683b      	ldr	r3, [r7, #0]
 800bd20:	88db      	ldrh	r3, [r3, #6]
 800bd22:	b2da      	uxtb	r2, r3
 800bd24:	e000      	b.n	800bd28 <USBD_CDC_Setup+0xa8>
 800bd26:	2240      	movs	r2, #64	@ 0x40
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bd2e:	6939      	ldr	r1, [r7, #16]
 800bd30:	693b      	ldr	r3, [r7, #16]
 800bd32:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bd36:	461a      	mov	r2, r3
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f001 fdbe 	bl	800d8ba <USBD_CtlPrepareRx>
      break;
 800bd3e:	e076      	b.n	800be2e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	33b0      	adds	r3, #176	@ 0xb0
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	689b      	ldr	r3, [r3, #8]
 800bd52:	683a      	ldr	r2, [r7, #0]
 800bd54:	7850      	ldrb	r0, [r2, #1]
 800bd56:	2200      	movs	r2, #0
 800bd58:	6839      	ldr	r1, [r7, #0]
 800bd5a:	4798      	blx	r3
      break;
 800bd5c:	e067      	b.n	800be2e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd5e:	683b      	ldr	r3, [r7, #0]
 800bd60:	785b      	ldrb	r3, [r3, #1]
 800bd62:	2b0b      	cmp	r3, #11
 800bd64:	d851      	bhi.n	800be0a <USBD_CDC_Setup+0x18a>
 800bd66:	a201      	add	r2, pc, #4	@ (adr r2, 800bd6c <USBD_CDC_Setup+0xec>)
 800bd68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd6c:	0800bd9d 	.word	0x0800bd9d
 800bd70:	0800be19 	.word	0x0800be19
 800bd74:	0800be0b 	.word	0x0800be0b
 800bd78:	0800be0b 	.word	0x0800be0b
 800bd7c:	0800be0b 	.word	0x0800be0b
 800bd80:	0800be0b 	.word	0x0800be0b
 800bd84:	0800be0b 	.word	0x0800be0b
 800bd88:	0800be0b 	.word	0x0800be0b
 800bd8c:	0800be0b 	.word	0x0800be0b
 800bd90:	0800be0b 	.word	0x0800be0b
 800bd94:	0800bdc7 	.word	0x0800bdc7
 800bd98:	0800bdf1 	.word	0x0800bdf1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b03      	cmp	r3, #3
 800bda6:	d107      	bne.n	800bdb8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bda8:	f107 030a 	add.w	r3, r7, #10
 800bdac:	2202      	movs	r2, #2
 800bdae:	4619      	mov	r1, r3
 800bdb0:	6878      	ldr	r0, [r7, #4]
 800bdb2:	f001 fd53 	bl	800d85c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdb6:	e032      	b.n	800be1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bdb8:	6839      	ldr	r1, [r7, #0]
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f001 fcd1 	bl	800d762 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	75fb      	strb	r3, [r7, #23]
          break;
 800bdc4:	e02b      	b.n	800be1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	2b03      	cmp	r3, #3
 800bdd0:	d107      	bne.n	800bde2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bdd2:	f107 030d 	add.w	r3, r7, #13
 800bdd6:	2201      	movs	r2, #1
 800bdd8:	4619      	mov	r1, r3
 800bdda:	6878      	ldr	r0, [r7, #4]
 800bddc:	f001 fd3e 	bl	800d85c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bde0:	e01d      	b.n	800be1e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bde2:	6839      	ldr	r1, [r7, #0]
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f001 fcbc 	bl	800d762 <USBD_CtlError>
            ret = USBD_FAIL;
 800bdea:	2303      	movs	r3, #3
 800bdec:	75fb      	strb	r3, [r7, #23]
          break;
 800bdee:	e016      	b.n	800be1e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdf6:	b2db      	uxtb	r3, r3
 800bdf8:	2b03      	cmp	r3, #3
 800bdfa:	d00f      	beq.n	800be1c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 fcaf 	bl	800d762 <USBD_CtlError>
            ret = USBD_FAIL;
 800be04:	2303      	movs	r3, #3
 800be06:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be08:	e008      	b.n	800be1c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800be0a:	6839      	ldr	r1, [r7, #0]
 800be0c:	6878      	ldr	r0, [r7, #4]
 800be0e:	f001 fca8 	bl	800d762 <USBD_CtlError>
          ret = USBD_FAIL;
 800be12:	2303      	movs	r3, #3
 800be14:	75fb      	strb	r3, [r7, #23]
          break;
 800be16:	e002      	b.n	800be1e <USBD_CDC_Setup+0x19e>
          break;
 800be18:	bf00      	nop
 800be1a:	e008      	b.n	800be2e <USBD_CDC_Setup+0x1ae>
          break;
 800be1c:	bf00      	nop
      }
      break;
 800be1e:	e006      	b.n	800be2e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f001 fc9d 	bl	800d762 <USBD_CtlError>
      ret = USBD_FAIL;
 800be28:	2303      	movs	r3, #3
 800be2a:	75fb      	strb	r3, [r7, #23]
      break;
 800be2c:	bf00      	nop
  }

  return (uint8_t)ret;
 800be2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be30:	4618      	mov	r0, r3
 800be32:	3718      	adds	r7, #24
 800be34:	46bd      	mov	sp, r7
 800be36:	bd80      	pop	{r7, pc}

0800be38 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b084      	sub	sp, #16
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
 800be40:	460b      	mov	r3, r1
 800be42:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be4a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	32b0      	adds	r2, #176	@ 0xb0
 800be56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d101      	bne.n	800be62 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800be5e:	2303      	movs	r3, #3
 800be60:	e065      	b.n	800bf2e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	32b0      	adds	r2, #176	@ 0xb0
 800be6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be70:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800be72:	78fb      	ldrb	r3, [r7, #3]
 800be74:	f003 020f 	and.w	r2, r3, #15
 800be78:	6879      	ldr	r1, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	440b      	add	r3, r1
 800be84:	3314      	adds	r3, #20
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d02f      	beq.n	800beec <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800be8c:	78fb      	ldrb	r3, [r7, #3]
 800be8e:	f003 020f 	and.w	r2, r3, #15
 800be92:	6879      	ldr	r1, [r7, #4]
 800be94:	4613      	mov	r3, r2
 800be96:	009b      	lsls	r3, r3, #2
 800be98:	4413      	add	r3, r2
 800be9a:	009b      	lsls	r3, r3, #2
 800be9c:	440b      	add	r3, r1
 800be9e:	3314      	adds	r3, #20
 800bea0:	681a      	ldr	r2, [r3, #0]
 800bea2:	78fb      	ldrb	r3, [r7, #3]
 800bea4:	f003 010f 	and.w	r1, r3, #15
 800bea8:	68f8      	ldr	r0, [r7, #12]
 800beaa:	460b      	mov	r3, r1
 800beac:	00db      	lsls	r3, r3, #3
 800beae:	440b      	add	r3, r1
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4403      	add	r3, r0
 800beb4:	331c      	adds	r3, #28
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	fbb2 f1f3 	udiv	r1, r2, r3
 800bebc:	fb01 f303 	mul.w	r3, r1, r3
 800bec0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d112      	bne.n	800beec <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bec6:	78fb      	ldrb	r3, [r7, #3]
 800bec8:	f003 020f 	and.w	r2, r3, #15
 800becc:	6879      	ldr	r1, [r7, #4]
 800bece:	4613      	mov	r3, r2
 800bed0:	009b      	lsls	r3, r3, #2
 800bed2:	4413      	add	r3, r2
 800bed4:	009b      	lsls	r3, r3, #2
 800bed6:	440b      	add	r3, r1
 800bed8:	3314      	adds	r3, #20
 800beda:	2200      	movs	r2, #0
 800bedc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bede:	78f9      	ldrb	r1, [r7, #3]
 800bee0:	2300      	movs	r3, #0
 800bee2:	2200      	movs	r2, #0
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	f002 fa24 	bl	800e332 <USBD_LL_Transmit>
 800beea:	e01f      	b.n	800bf2c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2200      	movs	r2, #0
 800bef0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	33b0      	adds	r3, #176	@ 0xb0
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	691b      	ldr	r3, [r3, #16]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d010      	beq.n	800bf2c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf10:	687a      	ldr	r2, [r7, #4]
 800bf12:	33b0      	adds	r3, #176	@ 0xb0
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	685b      	ldr	r3, [r3, #4]
 800bf1a:	691b      	ldr	r3, [r3, #16]
 800bf1c:	68ba      	ldr	r2, [r7, #8]
 800bf1e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bf22:	68ba      	ldr	r2, [r7, #8]
 800bf24:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bf28:	78fa      	ldrb	r2, [r7, #3]
 800bf2a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf2c:	2300      	movs	r3, #0
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}

0800bf36 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf36:	b580      	push	{r7, lr}
 800bf38:	b084      	sub	sp, #16
 800bf3a:	af00      	add	r7, sp, #0
 800bf3c:	6078      	str	r0, [r7, #4]
 800bf3e:	460b      	mov	r3, r1
 800bf40:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	32b0      	adds	r2, #176	@ 0xb0
 800bf4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf50:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	32b0      	adds	r2, #176	@ 0xb0
 800bf5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d101      	bne.n	800bf68 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bf64:	2303      	movs	r3, #3
 800bf66:	e01a      	b.n	800bf9e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf68:	78fb      	ldrb	r3, [r7, #3]
 800bf6a:	4619      	mov	r1, r3
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f002 fa22 	bl	800e3b6 <USBD_LL_GetRxDataSize>
 800bf72:	4602      	mov	r2, r0
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf80:	687a      	ldr	r2, [r7, #4]
 800bf82:	33b0      	adds	r3, #176	@ 0xb0
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4413      	add	r3, r2
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	68fa      	ldr	r2, [r7, #12]
 800bf8e:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bf98:	4611      	mov	r1, r2
 800bf9a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf9c:	2300      	movs	r3, #0
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3710      	adds	r7, #16
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	bd80      	pop	{r7, pc}

0800bfa6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bfa6:	b580      	push	{r7, lr}
 800bfa8:	b084      	sub	sp, #16
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	32b0      	adds	r2, #176	@ 0xb0
 800bfb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfbc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d101      	bne.n	800bfc8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bfc4:	2303      	movs	r3, #3
 800bfc6:	e024      	b.n	800c012 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	33b0      	adds	r3, #176	@ 0xb0
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4413      	add	r3, r2
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d019      	beq.n	800c010 <USBD_CDC_EP0_RxReady+0x6a>
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800bfe2:	2bff      	cmp	r3, #255	@ 0xff
 800bfe4:	d014      	beq.n	800c010 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfec:	687a      	ldr	r2, [r7, #4]
 800bfee:	33b0      	adds	r3, #176	@ 0xb0
 800bff0:	009b      	lsls	r3, r3, #2
 800bff2:	4413      	add	r3, r2
 800bff4:	685b      	ldr	r3, [r3, #4]
 800bff6:	689b      	ldr	r3, [r3, #8]
 800bff8:	68fa      	ldr	r2, [r7, #12]
 800bffa:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800bffe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c000:	68fa      	ldr	r2, [r7, #12]
 800c002:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c006:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	22ff      	movs	r2, #255	@ 0xff
 800c00c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3710      	adds	r7, #16
 800c016:	46bd      	mov	sp, r7
 800c018:	bd80      	pop	{r7, pc}
	...

0800c01c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b086      	sub	sp, #24
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c024:	2182      	movs	r1, #130	@ 0x82
 800c026:	4818      	ldr	r0, [pc, #96]	@ (800c088 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c028:	f000 fd62 	bl	800caf0 <USBD_GetEpDesc>
 800c02c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c02e:	2101      	movs	r1, #1
 800c030:	4815      	ldr	r0, [pc, #84]	@ (800c088 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c032:	f000 fd5d 	bl	800caf0 <USBD_GetEpDesc>
 800c036:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c038:	2181      	movs	r1, #129	@ 0x81
 800c03a:	4813      	ldr	r0, [pc, #76]	@ (800c088 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c03c:	f000 fd58 	bl	800caf0 <USBD_GetEpDesc>
 800c040:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	2210      	movs	r2, #16
 800c04c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d006      	beq.n	800c062 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	2200      	movs	r2, #0
 800c058:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c05c:	711a      	strb	r2, [r3, #4]
 800c05e:	2200      	movs	r2, #0
 800c060:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d006      	beq.n	800c076 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c070:	711a      	strb	r2, [r3, #4]
 800c072:	2200      	movs	r2, #0
 800c074:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2243      	movs	r2, #67	@ 0x43
 800c07a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c07c:	4b02      	ldr	r3, [pc, #8]	@ (800c088 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3718      	adds	r7, #24
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	2000007c 	.word	0x2000007c

0800c08c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b086      	sub	sp, #24
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c094:	2182      	movs	r1, #130	@ 0x82
 800c096:	4818      	ldr	r0, [pc, #96]	@ (800c0f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c098:	f000 fd2a 	bl	800caf0 <USBD_GetEpDesc>
 800c09c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c09e:	2101      	movs	r1, #1
 800c0a0:	4815      	ldr	r0, [pc, #84]	@ (800c0f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0a2:	f000 fd25 	bl	800caf0 <USBD_GetEpDesc>
 800c0a6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c0a8:	2181      	movs	r1, #129	@ 0x81
 800c0aa:	4813      	ldr	r0, [pc, #76]	@ (800c0f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0ac:	f000 fd20 	bl	800caf0 <USBD_GetEpDesc>
 800c0b0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c0b2:	697b      	ldr	r3, [r7, #20]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d002      	beq.n	800c0be <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	2210      	movs	r2, #16
 800c0bc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c0be:	693b      	ldr	r3, [r7, #16]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d006      	beq.n	800c0d2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	711a      	strb	r2, [r3, #4]
 800c0ca:	2200      	movs	r2, #0
 800c0cc:	f042 0202 	orr.w	r2, r2, #2
 800c0d0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d006      	beq.n	800c0e6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	2200      	movs	r2, #0
 800c0dc:	711a      	strb	r2, [r3, #4]
 800c0de:	2200      	movs	r2, #0
 800c0e0:	f042 0202 	orr.w	r2, r2, #2
 800c0e4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	2243      	movs	r2, #67	@ 0x43
 800c0ea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c0ec:	4b02      	ldr	r3, [pc, #8]	@ (800c0f8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	2000007c 	.word	0x2000007c

0800c0fc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c104:	2182      	movs	r1, #130	@ 0x82
 800c106:	4818      	ldr	r0, [pc, #96]	@ (800c168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c108:	f000 fcf2 	bl	800caf0 <USBD_GetEpDesc>
 800c10c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c10e:	2101      	movs	r1, #1
 800c110:	4815      	ldr	r0, [pc, #84]	@ (800c168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c112:	f000 fced 	bl	800caf0 <USBD_GetEpDesc>
 800c116:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c118:	2181      	movs	r1, #129	@ 0x81
 800c11a:	4813      	ldr	r0, [pc, #76]	@ (800c168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c11c:	f000 fce8 	bl	800caf0 <USBD_GetEpDesc>
 800c120:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c122:	697b      	ldr	r3, [r7, #20]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d002      	beq.n	800c12e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	2210      	movs	r2, #16
 800c12c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d006      	beq.n	800c142 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	2200      	movs	r2, #0
 800c138:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c13c:	711a      	strb	r2, [r3, #4]
 800c13e:	2200      	movs	r2, #0
 800c140:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	2b00      	cmp	r3, #0
 800c146:	d006      	beq.n	800c156 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	2200      	movs	r2, #0
 800c14c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c150:	711a      	strb	r2, [r3, #4]
 800c152:	2200      	movs	r2, #0
 800c154:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2243      	movs	r2, #67	@ 0x43
 800c15a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c15c:	4b02      	ldr	r3, [pc, #8]	@ (800c168 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3718      	adds	r7, #24
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	2000007c 	.word	0x2000007c

0800c16c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	220a      	movs	r2, #10
 800c178:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c17a:	4b03      	ldr	r3, [pc, #12]	@ (800c188 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c17c:	4618      	mov	r0, r3
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	20000038 	.word	0x20000038

0800c18c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c18c:	b480      	push	{r7}
 800c18e:	b083      	sub	sp, #12
 800c190:	af00      	add	r7, sp, #0
 800c192:	6078      	str	r0, [r7, #4]
 800c194:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d101      	bne.n	800c1a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c19c:	2303      	movs	r3, #3
 800c19e:	e009      	b.n	800c1b4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1a6:	687a      	ldr	r2, [r7, #4]
 800c1a8:	33b0      	adds	r3, #176	@ 0xb0
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	4413      	add	r3, r2
 800c1ae:	683a      	ldr	r2, [r7, #0]
 800c1b0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	370c      	adds	r7, #12
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr

0800c1c0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c1c0:	b480      	push	{r7}
 800c1c2:	b087      	sub	sp, #28
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	60f8      	str	r0, [r7, #12]
 800c1c8:	60b9      	str	r1, [r7, #8]
 800c1ca:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	32b0      	adds	r2, #176	@ 0xb0
 800c1d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1da:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c1dc:	697b      	ldr	r3, [r7, #20]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c1e2:	2303      	movs	r3, #3
 800c1e4:	e008      	b.n	800c1f8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c1e6:	697b      	ldr	r3, [r7, #20]
 800c1e8:	68ba      	ldr	r2, [r7, #8]
 800c1ea:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	371c      	adds	r7, #28
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c204:	b480      	push	{r7}
 800c206:	b085      	sub	sp, #20
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
 800c20c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	32b0      	adds	r2, #176	@ 0xb0
 800c218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d101      	bne.n	800c228 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c224:	2303      	movs	r3, #3
 800c226:	e004      	b.n	800c232 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	683a      	ldr	r2, [r7, #0]
 800c22c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c230:	2300      	movs	r3, #0
}
 800c232:	4618      	mov	r0, r3
 800c234:	3714      	adds	r7, #20
 800c236:	46bd      	mov	sp, r7
 800c238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c23c:	4770      	bx	lr
	...

0800c240 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b084      	sub	sp, #16
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	32b0      	adds	r2, #176	@ 0xb0
 800c252:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c256:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c258:	2301      	movs	r3, #1
 800c25a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d101      	bne.n	800c266 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c262:	2303      	movs	r3, #3
 800c264:	e025      	b.n	800c2b2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d11f      	bne.n	800c2b0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	2201      	movs	r2, #1
 800c274:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c278:	4b10      	ldr	r3, [pc, #64]	@ (800c2bc <USBD_CDC_TransmitPacket+0x7c>)
 800c27a:	781b      	ldrb	r3, [r3, #0]
 800c27c:	f003 020f 	and.w	r2, r3, #15
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	4613      	mov	r3, r2
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	4413      	add	r3, r2
 800c28e:	009b      	lsls	r3, r3, #2
 800c290:	4403      	add	r3, r0
 800c292:	3314      	adds	r3, #20
 800c294:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c296:	4b09      	ldr	r3, [pc, #36]	@ (800c2bc <USBD_CDC_TransmitPacket+0x7c>)
 800c298:	7819      	ldrb	r1, [r3, #0]
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c2a6:	6878      	ldr	r0, [r7, #4]
 800c2a8:	f002 f843 	bl	800e332 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c2b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2b2:	4618      	mov	r0, r3
 800c2b4:	3710      	adds	r7, #16
 800c2b6:	46bd      	mov	sp, r7
 800c2b8:	bd80      	pop	{r7, pc}
 800c2ba:	bf00      	nop
 800c2bc:	200000bf 	.word	0x200000bf

0800c2c0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b084      	sub	sp, #16
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	32b0      	adds	r2, #176	@ 0xb0
 800c2d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2d6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	32b0      	adds	r2, #176	@ 0xb0
 800c2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d101      	bne.n	800c2ee <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	e018      	b.n	800c320 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	7c1b      	ldrb	r3, [r3, #16]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10a      	bne.n	800c30c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c2f6:	4b0c      	ldr	r3, [pc, #48]	@ (800c328 <USBD_CDC_ReceivePacket+0x68>)
 800c2f8:	7819      	ldrb	r1, [r3, #0]
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c300:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c304:	6878      	ldr	r0, [r7, #4]
 800c306:	f002 f835 	bl	800e374 <USBD_LL_PrepareReceive>
 800c30a:	e008      	b.n	800c31e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c30c:	4b06      	ldr	r3, [pc, #24]	@ (800c328 <USBD_CDC_ReceivePacket+0x68>)
 800c30e:	7819      	ldrb	r1, [r3, #0]
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c316:	2340      	movs	r3, #64	@ 0x40
 800c318:	6878      	ldr	r0, [r7, #4]
 800c31a:	f002 f82b 	bl	800e374 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}
 800c328:	200000c0 	.word	0x200000c0

0800c32c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b086      	sub	sp, #24
 800c330:	af00      	add	r7, sp, #0
 800c332:	60f8      	str	r0, [r7, #12]
 800c334:	60b9      	str	r1, [r7, #8]
 800c336:	4613      	mov	r3, r2
 800c338:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d101      	bne.n	800c344 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c340:	2303      	movs	r3, #3
 800c342:	e01f      	b.n	800c384 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	2200      	movs	r2, #0
 800c348:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	2200      	movs	r2, #0
 800c350:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	2200      	movs	r2, #0
 800c358:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d003      	beq.n	800c36a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	68ba      	ldr	r2, [r7, #8]
 800c366:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	2201      	movs	r2, #1
 800c36e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	79fa      	ldrb	r2, [r7, #7]
 800c376:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f001 fea5 	bl	800e0c8 <USBD_LL_Init>
 800c37e:	4603      	mov	r3, r0
 800c380:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c382:	7dfb      	ldrb	r3, [r7, #23]
}
 800c384:	4618      	mov	r0, r3
 800c386:	3718      	adds	r7, #24
 800c388:	46bd      	mov	sp, r7
 800c38a:	bd80      	pop	{r7, pc}

0800c38c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c38c:	b580      	push	{r7, lr}
 800c38e:	b084      	sub	sp, #16
 800c390:	af00      	add	r7, sp, #0
 800c392:	6078      	str	r0, [r7, #4]
 800c394:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c396:	2300      	movs	r3, #0
 800c398:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d101      	bne.n	800c3a4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c3a0:	2303      	movs	r3, #3
 800c3a2:	e025      	b.n	800c3f0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	683a      	ldr	r2, [r7, #0]
 800c3a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	32ae      	adds	r2, #174	@ 0xae
 800c3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d00f      	beq.n	800c3e0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	32ae      	adds	r2, #174	@ 0xae
 800c3ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d0:	f107 020e 	add.w	r2, r7, #14
 800c3d4:	4610      	mov	r0, r2
 800c3d6:	4798      	blx	r3
 800c3d8:	4602      	mov	r2, r0
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c3e6:	1c5a      	adds	r2, r3, #1
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c3ee:	2300      	movs	r3, #0
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3710      	adds	r7, #16
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	bd80      	pop	{r7, pc}

0800c3f8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c400:	6878      	ldr	r0, [r7, #4]
 800c402:	f001 fead 	bl	800e160 <USBD_LL_Start>
 800c406:	4603      	mov	r3, r0
}
 800c408:	4618      	mov	r0, r3
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}

0800c410 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c410:	b480      	push	{r7}
 800c412:	b083      	sub	sp, #12
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c418:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	370c      	adds	r7, #12
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr

0800c426 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c426:	b580      	push	{r7, lr}
 800c428:	b084      	sub	sp, #16
 800c42a:	af00      	add	r7, sp, #0
 800c42c:	6078      	str	r0, [r7, #4]
 800c42e:	460b      	mov	r3, r1
 800c430:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c432:	2300      	movs	r3, #0
 800c434:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d009      	beq.n	800c454 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c446:	681b      	ldr	r3, [r3, #0]
 800c448:	78fa      	ldrb	r2, [r7, #3]
 800c44a:	4611      	mov	r1, r2
 800c44c:	6878      	ldr	r0, [r7, #4]
 800c44e:	4798      	blx	r3
 800c450:	4603      	mov	r3, r0
 800c452:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
 800c466:	460b      	mov	r3, r1
 800c468:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c46a:	2300      	movs	r3, #0
 800c46c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	78fa      	ldrb	r2, [r7, #3]
 800c478:	4611      	mov	r1, r2
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	4798      	blx	r3
 800c47e:	4603      	mov	r3, r0
 800c480:	2b00      	cmp	r3, #0
 800c482:	d001      	beq.n	800c488 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c484:	2303      	movs	r3, #3
 800c486:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c488:	7bfb      	ldrb	r3, [r7, #15]
}
 800c48a:	4618      	mov	r0, r3
 800c48c:	3710      	adds	r7, #16
 800c48e:	46bd      	mov	sp, r7
 800c490:	bd80      	pop	{r7, pc}

0800c492 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c492:	b580      	push	{r7, lr}
 800c494:	b084      	sub	sp, #16
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
 800c49a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4a2:	6839      	ldr	r1, [r7, #0]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f001 f922 	bl	800d6ee <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	2201      	movs	r2, #1
 800c4ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c4b8:	461a      	mov	r2, r3
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c4c6:	f003 031f 	and.w	r3, r3, #31
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d01a      	beq.n	800c504 <USBD_LL_SetupStage+0x72>
 800c4ce:	2b02      	cmp	r3, #2
 800c4d0:	d822      	bhi.n	800c518 <USBD_LL_SetupStage+0x86>
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d002      	beq.n	800c4dc <USBD_LL_SetupStage+0x4a>
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d00a      	beq.n	800c4f0 <USBD_LL_SetupStage+0x5e>
 800c4da:	e01d      	b.n	800c518 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	6878      	ldr	r0, [r7, #4]
 800c4e6:	f000 fb77 	bl	800cbd8 <USBD_StdDevReq>
 800c4ea:	4603      	mov	r3, r0
 800c4ec:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ee:	e020      	b.n	800c532 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	6878      	ldr	r0, [r7, #4]
 800c4fa:	f000 fbdf 	bl	800ccbc <USBD_StdItfReq>
 800c4fe:	4603      	mov	r3, r0
 800c500:	73fb      	strb	r3, [r7, #15]
      break;
 800c502:	e016      	b.n	800c532 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c50a:	4619      	mov	r1, r3
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f000 fc41 	bl	800cd94 <USBD_StdEPReq>
 800c512:	4603      	mov	r3, r0
 800c514:	73fb      	strb	r3, [r7, #15]
      break;
 800c516:	e00c      	b.n	800c532 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c51e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c522:	b2db      	uxtb	r3, r3
 800c524:	4619      	mov	r1, r3
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f001 fe7a 	bl	800e220 <USBD_LL_StallEP>
 800c52c:	4603      	mov	r3, r0
 800c52e:	73fb      	strb	r3, [r7, #15]
      break;
 800c530:	bf00      	nop
  }

  return ret;
 800c532:	7bfb      	ldrb	r3, [r7, #15]
}
 800c534:	4618      	mov	r0, r3
 800c536:	3710      	adds	r7, #16
 800c538:	46bd      	mov	sp, r7
 800c53a:	bd80      	pop	{r7, pc}

0800c53c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c53c:	b580      	push	{r7, lr}
 800c53e:	b086      	sub	sp, #24
 800c540:	af00      	add	r7, sp, #0
 800c542:	60f8      	str	r0, [r7, #12]
 800c544:	460b      	mov	r3, r1
 800c546:	607a      	str	r2, [r7, #4]
 800c548:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c54a:	2300      	movs	r3, #0
 800c54c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c54e:	7afb      	ldrb	r3, [r7, #11]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d177      	bne.n	800c644 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c55a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c562:	2b03      	cmp	r3, #3
 800c564:	f040 80a1 	bne.w	800c6aa <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	685b      	ldr	r3, [r3, #4]
 800c56c:	693a      	ldr	r2, [r7, #16]
 800c56e:	8992      	ldrh	r2, [r2, #12]
 800c570:	4293      	cmp	r3, r2
 800c572:	d91c      	bls.n	800c5ae <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	685b      	ldr	r3, [r3, #4]
 800c578:	693a      	ldr	r2, [r7, #16]
 800c57a:	8992      	ldrh	r2, [r2, #12]
 800c57c:	1a9a      	subs	r2, r3, r2
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	691b      	ldr	r3, [r3, #16]
 800c586:	693a      	ldr	r2, [r7, #16]
 800c588:	8992      	ldrh	r2, [r2, #12]
 800c58a:	441a      	add	r2, r3
 800c58c:	693b      	ldr	r3, [r7, #16]
 800c58e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	6919      	ldr	r1, [r3, #16]
 800c594:	693b      	ldr	r3, [r7, #16]
 800c596:	899b      	ldrh	r3, [r3, #12]
 800c598:	461a      	mov	r2, r3
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	685b      	ldr	r3, [r3, #4]
 800c59e:	4293      	cmp	r3, r2
 800c5a0:	bf38      	it	cc
 800c5a2:	4613      	movcc	r3, r2
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	68f8      	ldr	r0, [r7, #12]
 800c5a8:	f001 f9a8 	bl	800d8fc <USBD_CtlContinueRx>
 800c5ac:	e07d      	b.n	800c6aa <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c5b4:	f003 031f 	and.w	r3, r3, #31
 800c5b8:	2b02      	cmp	r3, #2
 800c5ba:	d014      	beq.n	800c5e6 <USBD_LL_DataOutStage+0xaa>
 800c5bc:	2b02      	cmp	r3, #2
 800c5be:	d81d      	bhi.n	800c5fc <USBD_LL_DataOutStage+0xc0>
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d002      	beq.n	800c5ca <USBD_LL_DataOutStage+0x8e>
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d003      	beq.n	800c5d0 <USBD_LL_DataOutStage+0x94>
 800c5c8:	e018      	b.n	800c5fc <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	75bb      	strb	r3, [r7, #22]
            break;
 800c5ce:	e018      	b.n	800c602 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	4619      	mov	r1, r3
 800c5da:	68f8      	ldr	r0, [r7, #12]
 800c5dc:	f000 fa6e 	bl	800cabc <USBD_CoreFindIF>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	75bb      	strb	r3, [r7, #22]
            break;
 800c5e4:	e00d      	b.n	800c602 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c5ec:	b2db      	uxtb	r3, r3
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f000 fa70 	bl	800cad6 <USBD_CoreFindEP>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	75bb      	strb	r3, [r7, #22]
            break;
 800c5fa:	e002      	b.n	800c602 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	75bb      	strb	r3, [r7, #22]
            break;
 800c600:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c602:	7dbb      	ldrb	r3, [r7, #22]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d119      	bne.n	800c63c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c60e:	b2db      	uxtb	r3, r3
 800c610:	2b03      	cmp	r3, #3
 800c612:	d113      	bne.n	800c63c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c614:	7dba      	ldrb	r2, [r7, #22]
 800c616:	68fb      	ldr	r3, [r7, #12]
 800c618:	32ae      	adds	r2, #174	@ 0xae
 800c61a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c61e:	691b      	ldr	r3, [r3, #16]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d00b      	beq.n	800c63c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c624:	7dba      	ldrb	r2, [r7, #22]
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c62c:	7dba      	ldrb	r2, [r7, #22]
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	32ae      	adds	r2, #174	@ 0xae
 800c632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c636:	691b      	ldr	r3, [r3, #16]
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c63c:	68f8      	ldr	r0, [r7, #12]
 800c63e:	f001 f96e 	bl	800d91e <USBD_CtlSendStatus>
 800c642:	e032      	b.n	800c6aa <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c644:	7afb      	ldrb	r3, [r7, #11]
 800c646:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c64a:	b2db      	uxtb	r3, r3
 800c64c:	4619      	mov	r1, r3
 800c64e:	68f8      	ldr	r0, [r7, #12]
 800c650:	f000 fa41 	bl	800cad6 <USBD_CoreFindEP>
 800c654:	4603      	mov	r3, r0
 800c656:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c658:	7dbb      	ldrb	r3, [r7, #22]
 800c65a:	2bff      	cmp	r3, #255	@ 0xff
 800c65c:	d025      	beq.n	800c6aa <USBD_LL_DataOutStage+0x16e>
 800c65e:	7dbb      	ldrb	r3, [r7, #22]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d122      	bne.n	800c6aa <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	2b03      	cmp	r3, #3
 800c66e:	d117      	bne.n	800c6a0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c670:	7dba      	ldrb	r2, [r7, #22]
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	32ae      	adds	r2, #174	@ 0xae
 800c676:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c67a:	699b      	ldr	r3, [r3, #24]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d00f      	beq.n	800c6a0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c680:	7dba      	ldrb	r2, [r7, #22]
 800c682:	68fb      	ldr	r3, [r7, #12]
 800c684:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c688:	7dba      	ldrb	r2, [r7, #22]
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	32ae      	adds	r2, #174	@ 0xae
 800c68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c692:	699b      	ldr	r3, [r3, #24]
 800c694:	7afa      	ldrb	r2, [r7, #11]
 800c696:	4611      	mov	r1, r2
 800c698:	68f8      	ldr	r0, [r7, #12]
 800c69a:	4798      	blx	r3
 800c69c:	4603      	mov	r3, r0
 800c69e:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c6a0:	7dfb      	ldrb	r3, [r7, #23]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d001      	beq.n	800c6aa <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c6a6:	7dfb      	ldrb	r3, [r7, #23]
 800c6a8:	e000      	b.n	800c6ac <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c6aa:	2300      	movs	r3, #0
}
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	3718      	adds	r7, #24
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b086      	sub	sp, #24
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	60f8      	str	r0, [r7, #12]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	607a      	str	r2, [r7, #4]
 800c6c0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c6c2:	7afb      	ldrb	r3, [r7, #11]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d178      	bne.n	800c7ba <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	3314      	adds	r3, #20
 800c6cc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c6ce:	68fb      	ldr	r3, [r7, #12]
 800c6d0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d163      	bne.n	800c7a0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	685b      	ldr	r3, [r3, #4]
 800c6dc:	693a      	ldr	r2, [r7, #16]
 800c6de:	8992      	ldrh	r2, [r2, #12]
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d91c      	bls.n	800c71e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	685b      	ldr	r3, [r3, #4]
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	8992      	ldrh	r2, [r2, #12]
 800c6ec:	1a9a      	subs	r2, r3, r2
 800c6ee:	693b      	ldr	r3, [r7, #16]
 800c6f0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c6f2:	693b      	ldr	r3, [r7, #16]
 800c6f4:	691b      	ldr	r3, [r3, #16]
 800c6f6:	693a      	ldr	r2, [r7, #16]
 800c6f8:	8992      	ldrh	r2, [r2, #12]
 800c6fa:	441a      	add	r2, r3
 800c6fc:	693b      	ldr	r3, [r7, #16]
 800c6fe:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	6919      	ldr	r1, [r3, #16]
 800c704:	693b      	ldr	r3, [r7, #16]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	461a      	mov	r2, r3
 800c70a:	68f8      	ldr	r0, [r7, #12]
 800c70c:	f001 f8c4 	bl	800d898 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c710:	2300      	movs	r3, #0
 800c712:	2200      	movs	r2, #0
 800c714:	2100      	movs	r1, #0
 800c716:	68f8      	ldr	r0, [r7, #12]
 800c718:	f001 fe2c 	bl	800e374 <USBD_LL_PrepareReceive>
 800c71c:	e040      	b.n	800c7a0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	899b      	ldrh	r3, [r3, #12]
 800c722:	461a      	mov	r2, r3
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	685b      	ldr	r3, [r3, #4]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d11c      	bne.n	800c766 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	693a      	ldr	r2, [r7, #16]
 800c732:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c734:	4293      	cmp	r3, r2
 800c736:	d316      	bcc.n	800c766 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c738:	693b      	ldr	r3, [r7, #16]
 800c73a:	681a      	ldr	r2, [r3, #0]
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c742:	429a      	cmp	r2, r3
 800c744:	d20f      	bcs.n	800c766 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c746:	2200      	movs	r2, #0
 800c748:	2100      	movs	r1, #0
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	f001 f8a4 	bl	800d898 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c750:	68fb      	ldr	r3, [r7, #12]
 800c752:	2200      	movs	r2, #0
 800c754:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c758:	2300      	movs	r3, #0
 800c75a:	2200      	movs	r2, #0
 800c75c:	2100      	movs	r1, #0
 800c75e:	68f8      	ldr	r0, [r7, #12]
 800c760:	f001 fe08 	bl	800e374 <USBD_LL_PrepareReceive>
 800c764:	e01c      	b.n	800c7a0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c76c:	b2db      	uxtb	r3, r3
 800c76e:	2b03      	cmp	r3, #3
 800c770:	d10f      	bne.n	800c792 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c778:	68db      	ldr	r3, [r3, #12]
 800c77a:	2b00      	cmp	r3, #0
 800c77c:	d009      	beq.n	800c792 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2200      	movs	r2, #0
 800c782:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c792:	2180      	movs	r1, #128	@ 0x80
 800c794:	68f8      	ldr	r0, [r7, #12]
 800c796:	f001 fd43 	bl	800e220 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c79a:	68f8      	ldr	r0, [r7, #12]
 800c79c:	f001 f8d2 	bl	800d944 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c7a0:	68fb      	ldr	r3, [r7, #12]
 800c7a2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d03a      	beq.n	800c820 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c7aa:	68f8      	ldr	r0, [r7, #12]
 800c7ac:	f7ff fe30 	bl	800c410 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	2200      	movs	r2, #0
 800c7b4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c7b8:	e032      	b.n	800c820 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c7ba:	7afb      	ldrb	r3, [r7, #11]
 800c7bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	4619      	mov	r1, r3
 800c7c4:	68f8      	ldr	r0, [r7, #12]
 800c7c6:	f000 f986 	bl	800cad6 <USBD_CoreFindEP>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7ce:	7dfb      	ldrb	r3, [r7, #23]
 800c7d0:	2bff      	cmp	r3, #255	@ 0xff
 800c7d2:	d025      	beq.n	800c820 <USBD_LL_DataInStage+0x16c>
 800c7d4:	7dfb      	ldrb	r3, [r7, #23]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d122      	bne.n	800c820 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	2b03      	cmp	r3, #3
 800c7e4:	d11c      	bne.n	800c820 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c7e6:	7dfa      	ldrb	r2, [r7, #23]
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	32ae      	adds	r2, #174	@ 0xae
 800c7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7f0:	695b      	ldr	r3, [r3, #20]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d014      	beq.n	800c820 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c7f6:	7dfa      	ldrb	r2, [r7, #23]
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c7fe:	7dfa      	ldrb	r2, [r7, #23]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	32ae      	adds	r2, #174	@ 0xae
 800c804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	7afa      	ldrb	r2, [r7, #11]
 800c80c:	4611      	mov	r1, r2
 800c80e:	68f8      	ldr	r0, [r7, #12]
 800c810:	4798      	blx	r3
 800c812:	4603      	mov	r3, r0
 800c814:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c816:	7dbb      	ldrb	r3, [r7, #22]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d001      	beq.n	800c820 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c81c:	7dbb      	ldrb	r3, [r7, #22]
 800c81e:	e000      	b.n	800c822 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c820:	2300      	movs	r3, #0
}
 800c822:	4618      	mov	r0, r3
 800c824:	3718      	adds	r7, #24
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b084      	sub	sp, #16
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c832:	2300      	movs	r3, #0
 800c834:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	2201      	movs	r2, #1
 800c83a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2200      	movs	r2, #0
 800c842:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2200      	movs	r2, #0
 800c84a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2200      	movs	r2, #0
 800c850:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	2200      	movs	r2, #0
 800c858:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c862:	2b00      	cmp	r3, #0
 800c864:	d014      	beq.n	800c890 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d00e      	beq.n	800c890 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c878:	685b      	ldr	r3, [r3, #4]
 800c87a:	687a      	ldr	r2, [r7, #4]
 800c87c:	6852      	ldr	r2, [r2, #4]
 800c87e:	b2d2      	uxtb	r2, r2
 800c880:	4611      	mov	r1, r2
 800c882:	6878      	ldr	r0, [r7, #4]
 800c884:	4798      	blx	r3
 800c886:	4603      	mov	r3, r0
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c88c:	2303      	movs	r3, #3
 800c88e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c890:	2340      	movs	r3, #64	@ 0x40
 800c892:	2200      	movs	r2, #0
 800c894:	2100      	movs	r1, #0
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f001 fc7d 	bl	800e196 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2201      	movs	r2, #1
 800c8a0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2240      	movs	r2, #64	@ 0x40
 800c8a8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8ac:	2340      	movs	r3, #64	@ 0x40
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	2180      	movs	r1, #128	@ 0x80
 800c8b2:	6878      	ldr	r0, [r7, #4]
 800c8b4:	f001 fc6f 	bl	800e196 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2201      	movs	r2, #1
 800c8bc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2240      	movs	r2, #64	@ 0x40
 800c8c4:	841a      	strh	r2, [r3, #32]

  return ret;
 800c8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3710      	adds	r7, #16
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	78fa      	ldrb	r2, [r7, #3]
 800c8e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c8e2:	2300      	movs	r3, #0
}
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	370c      	adds	r7, #12
 800c8e8:	46bd      	mov	sp, r7
 800c8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ee:	4770      	bx	lr

0800c8f0 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c8fe:	b2db      	uxtb	r3, r3
 800c900:	2b04      	cmp	r3, #4
 800c902:	d006      	beq.n	800c912 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2204      	movs	r2, #4
 800c916:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	370c      	adds	r7, #12
 800c920:	46bd      	mov	sp, r7
 800c922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c926:	4770      	bx	lr

0800c928 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c928:	b480      	push	{r7}
 800c92a:	b083      	sub	sp, #12
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b04      	cmp	r3, #4
 800c93a:	d106      	bne.n	800c94a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c942:	b2da      	uxtb	r2, r3
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c94a:	2300      	movs	r3, #0
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	370c      	adds	r7, #12
 800c950:	46bd      	mov	sp, r7
 800c952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c956:	4770      	bx	lr

0800c958 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c966:	b2db      	uxtb	r3, r3
 800c968:	2b03      	cmp	r3, #3
 800c96a:	d110      	bne.n	800c98e <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c972:	2b00      	cmp	r3, #0
 800c974:	d00b      	beq.n	800c98e <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c97c:	69db      	ldr	r3, [r3, #28]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d005      	beq.n	800c98e <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c988:	69db      	ldr	r3, [r3, #28]
 800c98a:	6878      	ldr	r0, [r7, #4]
 800c98c:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c98e:	2300      	movs	r3, #0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b082      	sub	sp, #8
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
 800c9a0:	460b      	mov	r3, r1
 800c9a2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	32ae      	adds	r2, #174	@ 0xae
 800c9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d101      	bne.n	800c9ba <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c9b6:	2303      	movs	r3, #3
 800c9b8:	e01c      	b.n	800c9f4 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	2b03      	cmp	r3, #3
 800c9c4:	d115      	bne.n	800c9f2 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	32ae      	adds	r2, #174	@ 0xae
 800c9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d4:	6a1b      	ldr	r3, [r3, #32]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00b      	beq.n	800c9f2 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	32ae      	adds	r2, #174	@ 0xae
 800c9e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9e8:	6a1b      	ldr	r3, [r3, #32]
 800c9ea:	78fa      	ldrb	r2, [r7, #3]
 800c9ec:	4611      	mov	r1, r2
 800c9ee:	6878      	ldr	r0, [r7, #4]
 800c9f0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c9f2:	2300      	movs	r3, #0
}
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3708      	adds	r7, #8
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}

0800c9fc <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c9fc:	b580      	push	{r7, lr}
 800c9fe:	b082      	sub	sp, #8
 800ca00:	af00      	add	r7, sp, #0
 800ca02:	6078      	str	r0, [r7, #4]
 800ca04:	460b      	mov	r3, r1
 800ca06:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	32ae      	adds	r2, #174	@ 0xae
 800ca12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d101      	bne.n	800ca1e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ca1a:	2303      	movs	r3, #3
 800ca1c:	e01c      	b.n	800ca58 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca24:	b2db      	uxtb	r3, r3
 800ca26:	2b03      	cmp	r3, #3
 800ca28:	d115      	bne.n	800ca56 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	32ae      	adds	r2, #174	@ 0xae
 800ca34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca3a:	2b00      	cmp	r3, #0
 800ca3c:	d00b      	beq.n	800ca56 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	32ae      	adds	r2, #174	@ 0xae
 800ca48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca4e:	78fa      	ldrb	r2, [r7, #3]
 800ca50:	4611      	mov	r1, r2
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca56:	2300      	movs	r3, #0
}
 800ca58:	4618      	mov	r0, r3
 800ca5a:	3708      	adds	r7, #8
 800ca5c:	46bd      	mov	sp, r7
 800ca5e:	bd80      	pop	{r7, pc}

0800ca60 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ca60:	b480      	push	{r7}
 800ca62:	b083      	sub	sp, #12
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca68:	2300      	movs	r3, #0
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	370c      	adds	r7, #12
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca74:	4770      	bx	lr

0800ca76 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ca76:	b580      	push	{r7, lr}
 800ca78:	b084      	sub	sp, #16
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ca7e:	2300      	movs	r3, #0
 800ca80:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2201      	movs	r2, #1
 800ca86:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d00e      	beq.n	800cab2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	687a      	ldr	r2, [r7, #4]
 800ca9e:	6852      	ldr	r2, [r2, #4]
 800caa0:	b2d2      	uxtb	r2, r2
 800caa2:	4611      	mov	r1, r2
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	4798      	blx	r3
 800caa8:	4603      	mov	r3, r0
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d001      	beq.n	800cab2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800caae:	2303      	movs	r3, #3
 800cab0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cab2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3710      	adds	r7, #16
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cabc:	b480      	push	{r7}
 800cabe:	b083      	sub	sp, #12
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	460b      	mov	r3, r1
 800cac6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cac8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800caca:	4618      	mov	r0, r3
 800cacc:	370c      	adds	r7, #12
 800cace:	46bd      	mov	sp, r7
 800cad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad4:	4770      	bx	lr

0800cad6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cad6:	b480      	push	{r7}
 800cad8:	b083      	sub	sp, #12
 800cada:	af00      	add	r7, sp, #0
 800cadc:	6078      	str	r0, [r7, #4]
 800cade:	460b      	mov	r3, r1
 800cae0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cae2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	370c      	adds	r7, #12
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr

0800caf0 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800caf0:	b580      	push	{r7, lr}
 800caf2:	b086      	sub	sp, #24
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	6078      	str	r0, [r7, #4]
 800caf8:	460b      	mov	r3, r1
 800cafa:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cb04:	2300      	movs	r3, #0
 800cb06:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cb08:	68fb      	ldr	r3, [r7, #12]
 800cb0a:	885b      	ldrh	r3, [r3, #2]
 800cb0c:	b29b      	uxth	r3, r3
 800cb0e:	68fa      	ldr	r2, [r7, #12]
 800cb10:	7812      	ldrb	r2, [r2, #0]
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d91f      	bls.n	800cb56 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cb1c:	e013      	b.n	800cb46 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cb1e:	f107 030a 	add.w	r3, r7, #10
 800cb22:	4619      	mov	r1, r3
 800cb24:	6978      	ldr	r0, [r7, #20]
 800cb26:	f000 f81b 	bl	800cb60 <USBD_GetNextDesc>
 800cb2a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cb2c:	697b      	ldr	r3, [r7, #20]
 800cb2e:	785b      	ldrb	r3, [r3, #1]
 800cb30:	2b05      	cmp	r3, #5
 800cb32:	d108      	bne.n	800cb46 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	789b      	ldrb	r3, [r3, #2]
 800cb3c:	78fa      	ldrb	r2, [r7, #3]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d008      	beq.n	800cb54 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cb42:	2300      	movs	r3, #0
 800cb44:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	885b      	ldrh	r3, [r3, #2]
 800cb4a:	b29a      	uxth	r2, r3
 800cb4c:	897b      	ldrh	r3, [r7, #10]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d8e5      	bhi.n	800cb1e <USBD_GetEpDesc+0x2e>
 800cb52:	e000      	b.n	800cb56 <USBD_GetEpDesc+0x66>
          break;
 800cb54:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cb56:	693b      	ldr	r3, [r7, #16]
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3718      	adds	r7, #24
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cb60:	b480      	push	{r7}
 800cb62:	b085      	sub	sp, #20
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
 800cb68:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	881b      	ldrh	r3, [r3, #0]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	7812      	ldrb	r2, [r2, #0]
 800cb76:	4413      	add	r3, r2
 800cb78:	b29a      	uxth	r2, r3
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	781b      	ldrb	r3, [r3, #0]
 800cb82:	461a      	mov	r2, r3
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	4413      	add	r3, r2
 800cb88:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
}
 800cb8c:	4618      	mov	r0, r3
 800cb8e:	3714      	adds	r7, #20
 800cb90:	46bd      	mov	sp, r7
 800cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb96:	4770      	bx	lr

0800cb98 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb98:	b480      	push	{r7}
 800cb9a:	b087      	sub	sp, #28
 800cb9c:	af00      	add	r7, sp, #0
 800cb9e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	781b      	ldrb	r3, [r3, #0]
 800cba8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	3301      	adds	r3, #1
 800cbae:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cbb0:	697b      	ldr	r3, [r7, #20]
 800cbb2:	781b      	ldrb	r3, [r3, #0]
 800cbb4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cbb6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cbba:	021b      	lsls	r3, r3, #8
 800cbbc:	b21a      	sxth	r2, r3
 800cbbe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	b21b      	sxth	r3, r3
 800cbc6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cbc8:	89fb      	ldrh	r3, [r7, #14]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	371c      	adds	r7, #28
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
	...

0800cbd8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	b084      	sub	sp, #16
 800cbdc:	af00      	add	r7, sp, #0
 800cbde:	6078      	str	r0, [r7, #4]
 800cbe0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cbe6:	683b      	ldr	r3, [r7, #0]
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cbee:	2b40      	cmp	r3, #64	@ 0x40
 800cbf0:	d005      	beq.n	800cbfe <USBD_StdDevReq+0x26>
 800cbf2:	2b40      	cmp	r3, #64	@ 0x40
 800cbf4:	d857      	bhi.n	800cca6 <USBD_StdDevReq+0xce>
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00f      	beq.n	800cc1a <USBD_StdDevReq+0x42>
 800cbfa:	2b20      	cmp	r3, #32
 800cbfc:	d153      	bne.n	800cca6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	32ae      	adds	r2, #174	@ 0xae
 800cc08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	6839      	ldr	r1, [r7, #0]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	4798      	blx	r3
 800cc14:	4603      	mov	r3, r0
 800cc16:	73fb      	strb	r3, [r7, #15]
      break;
 800cc18:	e04a      	b.n	800ccb0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	785b      	ldrb	r3, [r3, #1]
 800cc1e:	2b09      	cmp	r3, #9
 800cc20:	d83b      	bhi.n	800cc9a <USBD_StdDevReq+0xc2>
 800cc22:	a201      	add	r2, pc, #4	@ (adr r2, 800cc28 <USBD_StdDevReq+0x50>)
 800cc24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc28:	0800cc7d 	.word	0x0800cc7d
 800cc2c:	0800cc91 	.word	0x0800cc91
 800cc30:	0800cc9b 	.word	0x0800cc9b
 800cc34:	0800cc87 	.word	0x0800cc87
 800cc38:	0800cc9b 	.word	0x0800cc9b
 800cc3c:	0800cc5b 	.word	0x0800cc5b
 800cc40:	0800cc51 	.word	0x0800cc51
 800cc44:	0800cc9b 	.word	0x0800cc9b
 800cc48:	0800cc73 	.word	0x0800cc73
 800cc4c:	0800cc65 	.word	0x0800cc65
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cc50:	6839      	ldr	r1, [r7, #0]
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f000 fa3e 	bl	800d0d4 <USBD_GetDescriptor>
          break;
 800cc58:	e024      	b.n	800cca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cc5a:	6839      	ldr	r1, [r7, #0]
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f000 fba3 	bl	800d3a8 <USBD_SetAddress>
          break;
 800cc62:	e01f      	b.n	800cca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	6878      	ldr	r0, [r7, #4]
 800cc68:	f000 fbe2 	bl	800d430 <USBD_SetConfig>
 800cc6c:	4603      	mov	r3, r0
 800cc6e:	73fb      	strb	r3, [r7, #15]
          break;
 800cc70:	e018      	b.n	800cca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc72:	6839      	ldr	r1, [r7, #0]
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f000 fc85 	bl	800d584 <USBD_GetConfig>
          break;
 800cc7a:	e013      	b.n	800cca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc7c:	6839      	ldr	r1, [r7, #0]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f000 fcb6 	bl	800d5f0 <USBD_GetStatus>
          break;
 800cc84:	e00e      	b.n	800cca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc86:	6839      	ldr	r1, [r7, #0]
 800cc88:	6878      	ldr	r0, [r7, #4]
 800cc8a:	f000 fce5 	bl	800d658 <USBD_SetFeature>
          break;
 800cc8e:	e009      	b.n	800cca4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cc90:	6839      	ldr	r1, [r7, #0]
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f000 fd09 	bl	800d6aa <USBD_ClrFeature>
          break;
 800cc98:	e004      	b.n	800cca4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cc9a:	6839      	ldr	r1, [r7, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	f000 fd60 	bl	800d762 <USBD_CtlError>
          break;
 800cca2:	bf00      	nop
      }
      break;
 800cca4:	e004      	b.n	800ccb0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cca6:	6839      	ldr	r1, [r7, #0]
 800cca8:	6878      	ldr	r0, [r7, #4]
 800ccaa:	f000 fd5a 	bl	800d762 <USBD_CtlError>
      break;
 800ccae:	bf00      	nop
  }

  return ret;
 800ccb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb2:	4618      	mov	r0, r3
 800ccb4:	3710      	adds	r7, #16
 800ccb6:	46bd      	mov	sp, r7
 800ccb8:	bd80      	pop	{r7, pc}
 800ccba:	bf00      	nop

0800ccbc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccbc:	b580      	push	{r7, lr}
 800ccbe:	b084      	sub	sp, #16
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
 800ccc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ccd2:	2b40      	cmp	r3, #64	@ 0x40
 800ccd4:	d005      	beq.n	800cce2 <USBD_StdItfReq+0x26>
 800ccd6:	2b40      	cmp	r3, #64	@ 0x40
 800ccd8:	d852      	bhi.n	800cd80 <USBD_StdItfReq+0xc4>
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d001      	beq.n	800cce2 <USBD_StdItfReq+0x26>
 800ccde:	2b20      	cmp	r3, #32
 800cce0:	d14e      	bne.n	800cd80 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cce8:	b2db      	uxtb	r3, r3
 800ccea:	3b01      	subs	r3, #1
 800ccec:	2b02      	cmp	r3, #2
 800ccee:	d840      	bhi.n	800cd72 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	889b      	ldrh	r3, [r3, #4]
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b01      	cmp	r3, #1
 800ccf8:	d836      	bhi.n	800cd68 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	889b      	ldrh	r3, [r3, #4]
 800ccfe:	b2db      	uxtb	r3, r3
 800cd00:	4619      	mov	r1, r3
 800cd02:	6878      	ldr	r0, [r7, #4]
 800cd04:	f7ff feda 	bl	800cabc <USBD_CoreFindIF>
 800cd08:	4603      	mov	r3, r0
 800cd0a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd0c:	7bbb      	ldrb	r3, [r7, #14]
 800cd0e:	2bff      	cmp	r3, #255	@ 0xff
 800cd10:	d01d      	beq.n	800cd4e <USBD_StdItfReq+0x92>
 800cd12:	7bbb      	ldrb	r3, [r7, #14]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d11a      	bne.n	800cd4e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cd18:	7bba      	ldrb	r2, [r7, #14]
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	32ae      	adds	r2, #174	@ 0xae
 800cd1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d00f      	beq.n	800cd48 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cd28:	7bba      	ldrb	r2, [r7, #14]
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cd30:	7bba      	ldrb	r2, [r7, #14]
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	32ae      	adds	r2, #174	@ 0xae
 800cd36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	6839      	ldr	r1, [r7, #0]
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	4798      	blx	r3
 800cd42:	4603      	mov	r3, r0
 800cd44:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd46:	e004      	b.n	800cd52 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cd48:	2303      	movs	r3, #3
 800cd4a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd4c:	e001      	b.n	800cd52 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cd4e:	2303      	movs	r3, #3
 800cd50:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	88db      	ldrh	r3, [r3, #6]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d110      	bne.n	800cd7c <USBD_StdItfReq+0xc0>
 800cd5a:	7bfb      	ldrb	r3, [r7, #15]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d10d      	bne.n	800cd7c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f000 fddc 	bl	800d91e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cd66:	e009      	b.n	800cd7c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cd68:	6839      	ldr	r1, [r7, #0]
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 fcf9 	bl	800d762 <USBD_CtlError>
          break;
 800cd70:	e004      	b.n	800cd7c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cd72:	6839      	ldr	r1, [r7, #0]
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 fcf4 	bl	800d762 <USBD_CtlError>
          break;
 800cd7a:	e000      	b.n	800cd7e <USBD_StdItfReq+0xc2>
          break;
 800cd7c:	bf00      	nop
      }
      break;
 800cd7e:	e004      	b.n	800cd8a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cd80:	6839      	ldr	r1, [r7, #0]
 800cd82:	6878      	ldr	r0, [r7, #4]
 800cd84:	f000 fced 	bl	800d762 <USBD_CtlError>
      break;
 800cd88:	bf00      	nop
  }

  return ret;
 800cd8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd8c:	4618      	mov	r0, r3
 800cd8e:	3710      	adds	r7, #16
 800cd90:	46bd      	mov	sp, r7
 800cd92:	bd80      	pop	{r7, pc}

0800cd94 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd9e:	2300      	movs	r3, #0
 800cda0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cda2:	683b      	ldr	r3, [r7, #0]
 800cda4:	889b      	ldrh	r3, [r3, #4]
 800cda6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cda8:	683b      	ldr	r3, [r7, #0]
 800cdaa:	781b      	ldrb	r3, [r3, #0]
 800cdac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cdb0:	2b40      	cmp	r3, #64	@ 0x40
 800cdb2:	d007      	beq.n	800cdc4 <USBD_StdEPReq+0x30>
 800cdb4:	2b40      	cmp	r3, #64	@ 0x40
 800cdb6:	f200 8181 	bhi.w	800d0bc <USBD_StdEPReq+0x328>
 800cdba:	2b00      	cmp	r3, #0
 800cdbc:	d02a      	beq.n	800ce14 <USBD_StdEPReq+0x80>
 800cdbe:	2b20      	cmp	r3, #32
 800cdc0:	f040 817c 	bne.w	800d0bc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cdc4:	7bbb      	ldrb	r3, [r7, #14]
 800cdc6:	4619      	mov	r1, r3
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f7ff fe84 	bl	800cad6 <USBD_CoreFindEP>
 800cdce:	4603      	mov	r3, r0
 800cdd0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdd2:	7b7b      	ldrb	r3, [r7, #13]
 800cdd4:	2bff      	cmp	r3, #255	@ 0xff
 800cdd6:	f000 8176 	beq.w	800d0c6 <USBD_StdEPReq+0x332>
 800cdda:	7b7b      	ldrb	r3, [r7, #13]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	f040 8172 	bne.w	800d0c6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800cde2:	7b7a      	ldrb	r2, [r7, #13]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cdea:	7b7a      	ldrb	r2, [r7, #13]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	32ae      	adds	r2, #174	@ 0xae
 800cdf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	f000 8165 	beq.w	800d0c6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cdfc:	7b7a      	ldrb	r2, [r7, #13]
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	32ae      	adds	r2, #174	@ 0xae
 800ce02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	6839      	ldr	r1, [r7, #0]
 800ce0a:	6878      	ldr	r0, [r7, #4]
 800ce0c:	4798      	blx	r3
 800ce0e:	4603      	mov	r3, r0
 800ce10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ce12:	e158      	b.n	800d0c6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	785b      	ldrb	r3, [r3, #1]
 800ce18:	2b03      	cmp	r3, #3
 800ce1a:	d008      	beq.n	800ce2e <USBD_StdEPReq+0x9a>
 800ce1c:	2b03      	cmp	r3, #3
 800ce1e:	f300 8147 	bgt.w	800d0b0 <USBD_StdEPReq+0x31c>
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	f000 809b 	beq.w	800cf5e <USBD_StdEPReq+0x1ca>
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	d03c      	beq.n	800cea6 <USBD_StdEPReq+0x112>
 800ce2c:	e140      	b.n	800d0b0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce34:	b2db      	uxtb	r3, r3
 800ce36:	2b02      	cmp	r3, #2
 800ce38:	d002      	beq.n	800ce40 <USBD_StdEPReq+0xac>
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	d016      	beq.n	800ce6c <USBD_StdEPReq+0xd8>
 800ce3e:	e02c      	b.n	800ce9a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce40:	7bbb      	ldrb	r3, [r7, #14]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00d      	beq.n	800ce62 <USBD_StdEPReq+0xce>
 800ce46:	7bbb      	ldrb	r3, [r7, #14]
 800ce48:	2b80      	cmp	r3, #128	@ 0x80
 800ce4a:	d00a      	beq.n	800ce62 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce4c:	7bbb      	ldrb	r3, [r7, #14]
 800ce4e:	4619      	mov	r1, r3
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f001 f9e5 	bl	800e220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce56:	2180      	movs	r1, #128	@ 0x80
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f001 f9e1 	bl	800e220 <USBD_LL_StallEP>
 800ce5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce60:	e020      	b.n	800cea4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ce62:	6839      	ldr	r1, [r7, #0]
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f000 fc7c 	bl	800d762 <USBD_CtlError>
              break;
 800ce6a:	e01b      	b.n	800cea4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce6c:	683b      	ldr	r3, [r7, #0]
 800ce6e:	885b      	ldrh	r3, [r3, #2]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d10e      	bne.n	800ce92 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce74:	7bbb      	ldrb	r3, [r7, #14]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00b      	beq.n	800ce92 <USBD_StdEPReq+0xfe>
 800ce7a:	7bbb      	ldrb	r3, [r7, #14]
 800ce7c:	2b80      	cmp	r3, #128	@ 0x80
 800ce7e:	d008      	beq.n	800ce92 <USBD_StdEPReq+0xfe>
 800ce80:	683b      	ldr	r3, [r7, #0]
 800ce82:	88db      	ldrh	r3, [r3, #6]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d104      	bne.n	800ce92 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce88:	7bbb      	ldrb	r3, [r7, #14]
 800ce8a:	4619      	mov	r1, r3
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f001 f9c7 	bl	800e220 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fd43 	bl	800d91e <USBD_CtlSendStatus>

              break;
 800ce98:	e004      	b.n	800cea4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ce9a:	6839      	ldr	r1, [r7, #0]
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f000 fc60 	bl	800d762 <USBD_CtlError>
              break;
 800cea2:	bf00      	nop
          }
          break;
 800cea4:	e109      	b.n	800d0ba <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b02      	cmp	r3, #2
 800ceb0:	d002      	beq.n	800ceb8 <USBD_StdEPReq+0x124>
 800ceb2:	2b03      	cmp	r3, #3
 800ceb4:	d016      	beq.n	800cee4 <USBD_StdEPReq+0x150>
 800ceb6:	e04b      	b.n	800cf50 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ceb8:	7bbb      	ldrb	r3, [r7, #14]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d00d      	beq.n	800ceda <USBD_StdEPReq+0x146>
 800cebe:	7bbb      	ldrb	r3, [r7, #14]
 800cec0:	2b80      	cmp	r3, #128	@ 0x80
 800cec2:	d00a      	beq.n	800ceda <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cec4:	7bbb      	ldrb	r3, [r7, #14]
 800cec6:	4619      	mov	r1, r3
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f001 f9a9 	bl	800e220 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cece:	2180      	movs	r1, #128	@ 0x80
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f001 f9a5 	bl	800e220 <USBD_LL_StallEP>
 800ced6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ced8:	e040      	b.n	800cf5c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ceda:	6839      	ldr	r1, [r7, #0]
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fc40 	bl	800d762 <USBD_CtlError>
              break;
 800cee2:	e03b      	b.n	800cf5c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	885b      	ldrh	r3, [r3, #2]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d136      	bne.n	800cf5a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ceec:	7bbb      	ldrb	r3, [r7, #14]
 800ceee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d004      	beq.n	800cf00 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cef6:	7bbb      	ldrb	r3, [r7, #14]
 800cef8:	4619      	mov	r1, r3
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f001 f9af 	bl	800e25e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 fd0c 	bl	800d91e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cf06:	7bbb      	ldrb	r3, [r7, #14]
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7ff fde3 	bl	800cad6 <USBD_CoreFindEP>
 800cf10:	4603      	mov	r3, r0
 800cf12:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf14:	7b7b      	ldrb	r3, [r7, #13]
 800cf16:	2bff      	cmp	r3, #255	@ 0xff
 800cf18:	d01f      	beq.n	800cf5a <USBD_StdEPReq+0x1c6>
 800cf1a:	7b7b      	ldrb	r3, [r7, #13]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d11c      	bne.n	800cf5a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cf20:	7b7a      	ldrb	r2, [r7, #13]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cf28:	7b7a      	ldrb	r2, [r7, #13]
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	32ae      	adds	r2, #174	@ 0xae
 800cf2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf32:	689b      	ldr	r3, [r3, #8]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d010      	beq.n	800cf5a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cf38:	7b7a      	ldrb	r2, [r7, #13]
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	32ae      	adds	r2, #174	@ 0xae
 800cf3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf42:	689b      	ldr	r3, [r3, #8]
 800cf44:	6839      	ldr	r1, [r7, #0]
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	4798      	blx	r3
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cf4e:	e004      	b.n	800cf5a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cf50:	6839      	ldr	r1, [r7, #0]
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f000 fc05 	bl	800d762 <USBD_CtlError>
              break;
 800cf58:	e000      	b.n	800cf5c <USBD_StdEPReq+0x1c8>
              break;
 800cf5a:	bf00      	nop
          }
          break;
 800cf5c:	e0ad      	b.n	800d0ba <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf64:	b2db      	uxtb	r3, r3
 800cf66:	2b02      	cmp	r3, #2
 800cf68:	d002      	beq.n	800cf70 <USBD_StdEPReq+0x1dc>
 800cf6a:	2b03      	cmp	r3, #3
 800cf6c:	d033      	beq.n	800cfd6 <USBD_StdEPReq+0x242>
 800cf6e:	e099      	b.n	800d0a4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf70:	7bbb      	ldrb	r3, [r7, #14]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d007      	beq.n	800cf86 <USBD_StdEPReq+0x1f2>
 800cf76:	7bbb      	ldrb	r3, [r7, #14]
 800cf78:	2b80      	cmp	r3, #128	@ 0x80
 800cf7a:	d004      	beq.n	800cf86 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cf7c:	6839      	ldr	r1, [r7, #0]
 800cf7e:	6878      	ldr	r0, [r7, #4]
 800cf80:	f000 fbef 	bl	800d762 <USBD_CtlError>
                break;
 800cf84:	e093      	b.n	800d0ae <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	da0b      	bge.n	800cfa6 <USBD_StdEPReq+0x212>
 800cf8e:	7bbb      	ldrb	r3, [r7, #14]
 800cf90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cf94:	4613      	mov	r3, r2
 800cf96:	009b      	lsls	r3, r3, #2
 800cf98:	4413      	add	r3, r2
 800cf9a:	009b      	lsls	r3, r3, #2
 800cf9c:	3310      	adds	r3, #16
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	4413      	add	r3, r2
 800cfa2:	3304      	adds	r3, #4
 800cfa4:	e00b      	b.n	800cfbe <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cfa6:	7bbb      	ldrb	r3, [r7, #14]
 800cfa8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfac:	4613      	mov	r3, r2
 800cfae:	009b      	lsls	r3, r3, #2
 800cfb0:	4413      	add	r3, r2
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	4413      	add	r3, r2
 800cfbc:	3304      	adds	r3, #4
 800cfbe:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cfc6:	68bb      	ldr	r3, [r7, #8]
 800cfc8:	330e      	adds	r3, #14
 800cfca:	2202      	movs	r2, #2
 800cfcc:	4619      	mov	r1, r3
 800cfce:	6878      	ldr	r0, [r7, #4]
 800cfd0:	f000 fc44 	bl	800d85c <USBD_CtlSendData>
              break;
 800cfd4:	e06b      	b.n	800d0ae <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cfd6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	da11      	bge.n	800d002 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cfde:	7bbb      	ldrb	r3, [r7, #14]
 800cfe0:	f003 020f 	and.w	r2, r3, #15
 800cfe4:	6879      	ldr	r1, [r7, #4]
 800cfe6:	4613      	mov	r3, r2
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	4413      	add	r3, r2
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	440b      	add	r3, r1
 800cff0:	3323      	adds	r3, #35	@ 0x23
 800cff2:	781b      	ldrb	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d117      	bne.n	800d028 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fbb1 	bl	800d762 <USBD_CtlError>
                  break;
 800d000:	e055      	b.n	800d0ae <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d002:	7bbb      	ldrb	r3, [r7, #14]
 800d004:	f003 020f 	and.w	r2, r3, #15
 800d008:	6879      	ldr	r1, [r7, #4]
 800d00a:	4613      	mov	r3, r2
 800d00c:	009b      	lsls	r3, r3, #2
 800d00e:	4413      	add	r3, r2
 800d010:	009b      	lsls	r3, r3, #2
 800d012:	440b      	add	r3, r1
 800d014:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d104      	bne.n	800d028 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d01e:	6839      	ldr	r1, [r7, #0]
 800d020:	6878      	ldr	r0, [r7, #4]
 800d022:	f000 fb9e 	bl	800d762 <USBD_CtlError>
                  break;
 800d026:	e042      	b.n	800d0ae <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d028:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	da0b      	bge.n	800d048 <USBD_StdEPReq+0x2b4>
 800d030:	7bbb      	ldrb	r3, [r7, #14]
 800d032:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d036:	4613      	mov	r3, r2
 800d038:	009b      	lsls	r3, r3, #2
 800d03a:	4413      	add	r3, r2
 800d03c:	009b      	lsls	r3, r3, #2
 800d03e:	3310      	adds	r3, #16
 800d040:	687a      	ldr	r2, [r7, #4]
 800d042:	4413      	add	r3, r2
 800d044:	3304      	adds	r3, #4
 800d046:	e00b      	b.n	800d060 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d048:	7bbb      	ldrb	r3, [r7, #14]
 800d04a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d04e:	4613      	mov	r3, r2
 800d050:	009b      	lsls	r3, r3, #2
 800d052:	4413      	add	r3, r2
 800d054:	009b      	lsls	r3, r3, #2
 800d056:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	4413      	add	r3, r2
 800d05e:	3304      	adds	r3, #4
 800d060:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d062:	7bbb      	ldrb	r3, [r7, #14]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d002      	beq.n	800d06e <USBD_StdEPReq+0x2da>
 800d068:	7bbb      	ldrb	r3, [r7, #14]
 800d06a:	2b80      	cmp	r3, #128	@ 0x80
 800d06c:	d103      	bne.n	800d076 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	2200      	movs	r2, #0
 800d072:	739a      	strb	r2, [r3, #14]
 800d074:	e00e      	b.n	800d094 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d076:	7bbb      	ldrb	r3, [r7, #14]
 800d078:	4619      	mov	r1, r3
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f001 f90e 	bl	800e29c <USBD_LL_IsStallEP>
 800d080:	4603      	mov	r3, r0
 800d082:	2b00      	cmp	r3, #0
 800d084:	d003      	beq.n	800d08e <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	2201      	movs	r2, #1
 800d08a:	739a      	strb	r2, [r3, #14]
 800d08c:	e002      	b.n	800d094 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800d08e:	68bb      	ldr	r3, [r7, #8]
 800d090:	2200      	movs	r2, #0
 800d092:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	330e      	adds	r3, #14
 800d098:	2202      	movs	r2, #2
 800d09a:	4619      	mov	r1, r3
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	f000 fbdd 	bl	800d85c <USBD_CtlSendData>
              break;
 800d0a2:	e004      	b.n	800d0ae <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800d0a4:	6839      	ldr	r1, [r7, #0]
 800d0a6:	6878      	ldr	r0, [r7, #4]
 800d0a8:	f000 fb5b 	bl	800d762 <USBD_CtlError>
              break;
 800d0ac:	bf00      	nop
          }
          break;
 800d0ae:	e004      	b.n	800d0ba <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800d0b0:	6839      	ldr	r1, [r7, #0]
 800d0b2:	6878      	ldr	r0, [r7, #4]
 800d0b4:	f000 fb55 	bl	800d762 <USBD_CtlError>
          break;
 800d0b8:	bf00      	nop
      }
      break;
 800d0ba:	e005      	b.n	800d0c8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 fb4f 	bl	800d762 <USBD_CtlError>
      break;
 800d0c4:	e000      	b.n	800d0c8 <USBD_StdEPReq+0x334>
      break;
 800d0c6:	bf00      	nop
  }

  return ret;
 800d0c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
	...

0800d0d4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b084      	sub	sp, #16
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
 800d0dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d0e2:	2300      	movs	r3, #0
 800d0e4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	885b      	ldrh	r3, [r3, #2]
 800d0ee:	0a1b      	lsrs	r3, r3, #8
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	3b01      	subs	r3, #1
 800d0f4:	2b06      	cmp	r3, #6
 800d0f6:	f200 8128 	bhi.w	800d34a <USBD_GetDescriptor+0x276>
 800d0fa:	a201      	add	r2, pc, #4	@ (adr r2, 800d100 <USBD_GetDescriptor+0x2c>)
 800d0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d100:	0800d11d 	.word	0x0800d11d
 800d104:	0800d135 	.word	0x0800d135
 800d108:	0800d175 	.word	0x0800d175
 800d10c:	0800d34b 	.word	0x0800d34b
 800d110:	0800d34b 	.word	0x0800d34b
 800d114:	0800d2eb 	.word	0x0800d2eb
 800d118:	0800d317 	.word	0x0800d317
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	687a      	ldr	r2, [r7, #4]
 800d126:	7c12      	ldrb	r2, [r2, #16]
 800d128:	f107 0108 	add.w	r1, r7, #8
 800d12c:	4610      	mov	r0, r2
 800d12e:	4798      	blx	r3
 800d130:	60f8      	str	r0, [r7, #12]
      break;
 800d132:	e112      	b.n	800d35a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	7c1b      	ldrb	r3, [r3, #16]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d10d      	bne.n	800d158 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d144:	f107 0208 	add.w	r2, r7, #8
 800d148:	4610      	mov	r0, r2
 800d14a:	4798      	blx	r3
 800d14c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	3301      	adds	r3, #1
 800d152:	2202      	movs	r2, #2
 800d154:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d156:	e100      	b.n	800d35a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d15e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d160:	f107 0208 	add.w	r2, r7, #8
 800d164:	4610      	mov	r0, r2
 800d166:	4798      	blx	r3
 800d168:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	3301      	adds	r3, #1
 800d16e:	2202      	movs	r2, #2
 800d170:	701a      	strb	r2, [r3, #0]
      break;
 800d172:	e0f2      	b.n	800d35a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	885b      	ldrh	r3, [r3, #2]
 800d178:	b2db      	uxtb	r3, r3
 800d17a:	2b05      	cmp	r3, #5
 800d17c:	f200 80ac 	bhi.w	800d2d8 <USBD_GetDescriptor+0x204>
 800d180:	a201      	add	r2, pc, #4	@ (adr r2, 800d188 <USBD_GetDescriptor+0xb4>)
 800d182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d186:	bf00      	nop
 800d188:	0800d1a1 	.word	0x0800d1a1
 800d18c:	0800d1d5 	.word	0x0800d1d5
 800d190:	0800d209 	.word	0x0800d209
 800d194:	0800d23d 	.word	0x0800d23d
 800d198:	0800d271 	.word	0x0800d271
 800d19c:	0800d2a5 	.word	0x0800d2a5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1a6:	685b      	ldr	r3, [r3, #4]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d00b      	beq.n	800d1c4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	687a      	ldr	r2, [r7, #4]
 800d1b6:	7c12      	ldrb	r2, [r2, #16]
 800d1b8:	f107 0108 	add.w	r1, r7, #8
 800d1bc:	4610      	mov	r0, r2
 800d1be:	4798      	blx	r3
 800d1c0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1c2:	e091      	b.n	800d2e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1c4:	6839      	ldr	r1, [r7, #0]
 800d1c6:	6878      	ldr	r0, [r7, #4]
 800d1c8:	f000 facb 	bl	800d762 <USBD_CtlError>
            err++;
 800d1cc:	7afb      	ldrb	r3, [r7, #11]
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1d2:	e089      	b.n	800d2e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1da:	689b      	ldr	r3, [r3, #8]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00b      	beq.n	800d1f8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	687a      	ldr	r2, [r7, #4]
 800d1ea:	7c12      	ldrb	r2, [r2, #16]
 800d1ec:	f107 0108 	add.w	r1, r7, #8
 800d1f0:	4610      	mov	r0, r2
 800d1f2:	4798      	blx	r3
 800d1f4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1f6:	e077      	b.n	800d2e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1f8:	6839      	ldr	r1, [r7, #0]
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	f000 fab1 	bl	800d762 <USBD_CtlError>
            err++;
 800d200:	7afb      	ldrb	r3, [r7, #11]
 800d202:	3301      	adds	r3, #1
 800d204:	72fb      	strb	r3, [r7, #11]
          break;
 800d206:	e06f      	b.n	800d2e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d00b      	beq.n	800d22c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d21a:	68db      	ldr	r3, [r3, #12]
 800d21c:	687a      	ldr	r2, [r7, #4]
 800d21e:	7c12      	ldrb	r2, [r2, #16]
 800d220:	f107 0108 	add.w	r1, r7, #8
 800d224:	4610      	mov	r0, r2
 800d226:	4798      	blx	r3
 800d228:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d22a:	e05d      	b.n	800d2e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d22c:	6839      	ldr	r1, [r7, #0]
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f000 fa97 	bl	800d762 <USBD_CtlError>
            err++;
 800d234:	7afb      	ldrb	r3, [r7, #11]
 800d236:	3301      	adds	r3, #1
 800d238:	72fb      	strb	r3, [r7, #11]
          break;
 800d23a:	e055      	b.n	800d2e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d242:	691b      	ldr	r3, [r3, #16]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d00b      	beq.n	800d260 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d24e:	691b      	ldr	r3, [r3, #16]
 800d250:	687a      	ldr	r2, [r7, #4]
 800d252:	7c12      	ldrb	r2, [r2, #16]
 800d254:	f107 0108 	add.w	r1, r7, #8
 800d258:	4610      	mov	r0, r2
 800d25a:	4798      	blx	r3
 800d25c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d25e:	e043      	b.n	800d2e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d260:	6839      	ldr	r1, [r7, #0]
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 fa7d 	bl	800d762 <USBD_CtlError>
            err++;
 800d268:	7afb      	ldrb	r3, [r7, #11]
 800d26a:	3301      	adds	r3, #1
 800d26c:	72fb      	strb	r3, [r7, #11]
          break;
 800d26e:	e03b      	b.n	800d2e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d276:	695b      	ldr	r3, [r3, #20]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d00b      	beq.n	800d294 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d282:	695b      	ldr	r3, [r3, #20]
 800d284:	687a      	ldr	r2, [r7, #4]
 800d286:	7c12      	ldrb	r2, [r2, #16]
 800d288:	f107 0108 	add.w	r1, r7, #8
 800d28c:	4610      	mov	r0, r2
 800d28e:	4798      	blx	r3
 800d290:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d292:	e029      	b.n	800d2e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d294:	6839      	ldr	r1, [r7, #0]
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 fa63 	bl	800d762 <USBD_CtlError>
            err++;
 800d29c:	7afb      	ldrb	r3, [r7, #11]
 800d29e:	3301      	adds	r3, #1
 800d2a0:	72fb      	strb	r3, [r7, #11]
          break;
 800d2a2:	e021      	b.n	800d2e8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2aa:	699b      	ldr	r3, [r3, #24]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d00b      	beq.n	800d2c8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2b6:	699b      	ldr	r3, [r3, #24]
 800d2b8:	687a      	ldr	r2, [r7, #4]
 800d2ba:	7c12      	ldrb	r2, [r2, #16]
 800d2bc:	f107 0108 	add.w	r1, r7, #8
 800d2c0:	4610      	mov	r0, r2
 800d2c2:	4798      	blx	r3
 800d2c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2c6:	e00f      	b.n	800d2e8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2c8:	6839      	ldr	r1, [r7, #0]
 800d2ca:	6878      	ldr	r0, [r7, #4]
 800d2cc:	f000 fa49 	bl	800d762 <USBD_CtlError>
            err++;
 800d2d0:	7afb      	ldrb	r3, [r7, #11]
 800d2d2:	3301      	adds	r3, #1
 800d2d4:	72fb      	strb	r3, [r7, #11]
          break;
 800d2d6:	e007      	b.n	800d2e8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d2d8:	6839      	ldr	r1, [r7, #0]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 fa41 	bl	800d762 <USBD_CtlError>
          err++;
 800d2e0:	7afb      	ldrb	r3, [r7, #11]
 800d2e2:	3301      	adds	r3, #1
 800d2e4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d2e6:	bf00      	nop
      }
      break;
 800d2e8:	e037      	b.n	800d35a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	7c1b      	ldrb	r3, [r3, #16]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d109      	bne.n	800d306 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d2fa:	f107 0208 	add.w	r2, r7, #8
 800d2fe:	4610      	mov	r0, r2
 800d300:	4798      	blx	r3
 800d302:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d304:	e029      	b.n	800d35a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d306:	6839      	ldr	r1, [r7, #0]
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 fa2a 	bl	800d762 <USBD_CtlError>
        err++;
 800d30e:	7afb      	ldrb	r3, [r7, #11]
 800d310:	3301      	adds	r3, #1
 800d312:	72fb      	strb	r3, [r7, #11]
      break;
 800d314:	e021      	b.n	800d35a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	7c1b      	ldrb	r3, [r3, #16]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d10d      	bne.n	800d33a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d326:	f107 0208 	add.w	r2, r7, #8
 800d32a:	4610      	mov	r0, r2
 800d32c:	4798      	blx	r3
 800d32e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	3301      	adds	r3, #1
 800d334:	2207      	movs	r2, #7
 800d336:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d338:	e00f      	b.n	800d35a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d33a:	6839      	ldr	r1, [r7, #0]
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fa10 	bl	800d762 <USBD_CtlError>
        err++;
 800d342:	7afb      	ldrb	r3, [r7, #11]
 800d344:	3301      	adds	r3, #1
 800d346:	72fb      	strb	r3, [r7, #11]
      break;
 800d348:	e007      	b.n	800d35a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d34a:	6839      	ldr	r1, [r7, #0]
 800d34c:	6878      	ldr	r0, [r7, #4]
 800d34e:	f000 fa08 	bl	800d762 <USBD_CtlError>
      err++;
 800d352:	7afb      	ldrb	r3, [r7, #11]
 800d354:	3301      	adds	r3, #1
 800d356:	72fb      	strb	r3, [r7, #11]
      break;
 800d358:	bf00      	nop
  }

  if (err != 0U)
 800d35a:	7afb      	ldrb	r3, [r7, #11]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d11e      	bne.n	800d39e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d360:	683b      	ldr	r3, [r7, #0]
 800d362:	88db      	ldrh	r3, [r3, #6]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d016      	beq.n	800d396 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d368:	893b      	ldrh	r3, [r7, #8]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d00e      	beq.n	800d38c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	88da      	ldrh	r2, [r3, #6]
 800d372:	893b      	ldrh	r3, [r7, #8]
 800d374:	4293      	cmp	r3, r2
 800d376:	bf28      	it	cs
 800d378:	4613      	movcs	r3, r2
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d37e:	893b      	ldrh	r3, [r7, #8]
 800d380:	461a      	mov	r2, r3
 800d382:	68f9      	ldr	r1, [r7, #12]
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fa69 	bl	800d85c <USBD_CtlSendData>
 800d38a:	e009      	b.n	800d3a0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d38c:	6839      	ldr	r1, [r7, #0]
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f000 f9e7 	bl	800d762 <USBD_CtlError>
 800d394:	e004      	b.n	800d3a0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d396:	6878      	ldr	r0, [r7, #4]
 800d398:	f000 fac1 	bl	800d91e <USBD_CtlSendStatus>
 800d39c:	e000      	b.n	800d3a0 <USBD_GetDescriptor+0x2cc>
    return;
 800d39e:	bf00      	nop
  }
}
 800d3a0:	3710      	adds	r7, #16
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}
 800d3a6:	bf00      	nop

0800d3a8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	6078      	str	r0, [r7, #4]
 800d3b0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d3b2:	683b      	ldr	r3, [r7, #0]
 800d3b4:	889b      	ldrh	r3, [r3, #4]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d131      	bne.n	800d41e <USBD_SetAddress+0x76>
 800d3ba:	683b      	ldr	r3, [r7, #0]
 800d3bc:	88db      	ldrh	r3, [r3, #6]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d12d      	bne.n	800d41e <USBD_SetAddress+0x76>
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	885b      	ldrh	r3, [r3, #2]
 800d3c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3c8:	d829      	bhi.n	800d41e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	885b      	ldrh	r3, [r3, #2]
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3d4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3dc:	b2db      	uxtb	r3, r3
 800d3de:	2b03      	cmp	r3, #3
 800d3e0:	d104      	bne.n	800d3ec <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d3e2:	6839      	ldr	r1, [r7, #0]
 800d3e4:	6878      	ldr	r0, [r7, #4]
 800d3e6:	f000 f9bc 	bl	800d762 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ea:	e01d      	b.n	800d428 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	7bfa      	ldrb	r2, [r7, #15]
 800d3f0:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d3f4:	7bfb      	ldrb	r3, [r7, #15]
 800d3f6:	4619      	mov	r1, r3
 800d3f8:	6878      	ldr	r0, [r7, #4]
 800d3fa:	f000 ff7b 	bl	800e2f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d3fe:	6878      	ldr	r0, [r7, #4]
 800d400:	f000 fa8d 	bl	800d91e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d404:	7bfb      	ldrb	r3, [r7, #15]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d004      	beq.n	800d414 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2202      	movs	r2, #2
 800d40e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d412:	e009      	b.n	800d428 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	2201      	movs	r2, #1
 800d418:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d41c:	e004      	b.n	800d428 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d41e:	6839      	ldr	r1, [r7, #0]
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	f000 f99e 	bl	800d762 <USBD_CtlError>
  }
}
 800d426:	bf00      	nop
 800d428:	bf00      	nop
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d43a:	2300      	movs	r3, #0
 800d43c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	885b      	ldrh	r3, [r3, #2]
 800d442:	b2da      	uxtb	r2, r3
 800d444:	4b4e      	ldr	r3, [pc, #312]	@ (800d580 <USBD_SetConfig+0x150>)
 800d446:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d448:	4b4d      	ldr	r3, [pc, #308]	@ (800d580 <USBD_SetConfig+0x150>)
 800d44a:	781b      	ldrb	r3, [r3, #0]
 800d44c:	2b01      	cmp	r3, #1
 800d44e:	d905      	bls.n	800d45c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d450:	6839      	ldr	r1, [r7, #0]
 800d452:	6878      	ldr	r0, [r7, #4]
 800d454:	f000 f985 	bl	800d762 <USBD_CtlError>
    return USBD_FAIL;
 800d458:	2303      	movs	r3, #3
 800d45a:	e08c      	b.n	800d576 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d462:	b2db      	uxtb	r3, r3
 800d464:	2b02      	cmp	r3, #2
 800d466:	d002      	beq.n	800d46e <USBD_SetConfig+0x3e>
 800d468:	2b03      	cmp	r3, #3
 800d46a:	d029      	beq.n	800d4c0 <USBD_SetConfig+0x90>
 800d46c:	e075      	b.n	800d55a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d46e:	4b44      	ldr	r3, [pc, #272]	@ (800d580 <USBD_SetConfig+0x150>)
 800d470:	781b      	ldrb	r3, [r3, #0]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d020      	beq.n	800d4b8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d476:	4b42      	ldr	r3, [pc, #264]	@ (800d580 <USBD_SetConfig+0x150>)
 800d478:	781b      	ldrb	r3, [r3, #0]
 800d47a:	461a      	mov	r2, r3
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d480:	4b3f      	ldr	r3, [pc, #252]	@ (800d580 <USBD_SetConfig+0x150>)
 800d482:	781b      	ldrb	r3, [r3, #0]
 800d484:	4619      	mov	r1, r3
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f7fe ffcd 	bl	800c426 <USBD_SetClassConfig>
 800d48c:	4603      	mov	r3, r0
 800d48e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d490:	7bfb      	ldrb	r3, [r7, #15]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d008      	beq.n	800d4a8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d496:	6839      	ldr	r1, [r7, #0]
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f000 f962 	bl	800d762 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2202      	movs	r2, #2
 800d4a2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d4a6:	e065      	b.n	800d574 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d4a8:	6878      	ldr	r0, [r7, #4]
 800d4aa:	f000 fa38 	bl	800d91e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2203      	movs	r2, #3
 800d4b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d4b6:	e05d      	b.n	800d574 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f000 fa30 	bl	800d91e <USBD_CtlSendStatus>
      break;
 800d4be:	e059      	b.n	800d574 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d4c0:	4b2f      	ldr	r3, [pc, #188]	@ (800d580 <USBD_SetConfig+0x150>)
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d112      	bne.n	800d4ee <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2202      	movs	r2, #2
 800d4cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d4d0:	4b2b      	ldr	r3, [pc, #172]	@ (800d580 <USBD_SetConfig+0x150>)
 800d4d2:	781b      	ldrb	r3, [r3, #0]
 800d4d4:	461a      	mov	r2, r3
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d4da:	4b29      	ldr	r3, [pc, #164]	@ (800d580 <USBD_SetConfig+0x150>)
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	4619      	mov	r1, r3
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f7fe ffbc 	bl	800c45e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d4e6:	6878      	ldr	r0, [r7, #4]
 800d4e8:	f000 fa19 	bl	800d91e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d4ec:	e042      	b.n	800d574 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d4ee:	4b24      	ldr	r3, [pc, #144]	@ (800d580 <USBD_SetConfig+0x150>)
 800d4f0:	781b      	ldrb	r3, [r3, #0]
 800d4f2:	461a      	mov	r2, r3
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	d02a      	beq.n	800d552 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	685b      	ldr	r3, [r3, #4]
 800d500:	b2db      	uxtb	r3, r3
 800d502:	4619      	mov	r1, r3
 800d504:	6878      	ldr	r0, [r7, #4]
 800d506:	f7fe ffaa 	bl	800c45e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d50a:	4b1d      	ldr	r3, [pc, #116]	@ (800d580 <USBD_SetConfig+0x150>)
 800d50c:	781b      	ldrb	r3, [r3, #0]
 800d50e:	461a      	mov	r2, r3
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d514:	4b1a      	ldr	r3, [pc, #104]	@ (800d580 <USBD_SetConfig+0x150>)
 800d516:	781b      	ldrb	r3, [r3, #0]
 800d518:	4619      	mov	r1, r3
 800d51a:	6878      	ldr	r0, [r7, #4]
 800d51c:	f7fe ff83 	bl	800c426 <USBD_SetClassConfig>
 800d520:	4603      	mov	r3, r0
 800d522:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d524:	7bfb      	ldrb	r3, [r7, #15]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d00f      	beq.n	800d54a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d52a:	6839      	ldr	r1, [r7, #0]
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f000 f918 	bl	800d762 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	685b      	ldr	r3, [r3, #4]
 800d536:	b2db      	uxtb	r3, r3
 800d538:	4619      	mov	r1, r3
 800d53a:	6878      	ldr	r0, [r7, #4]
 800d53c:	f7fe ff8f 	bl	800c45e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2202      	movs	r2, #2
 800d544:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d548:	e014      	b.n	800d574 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 f9e7 	bl	800d91e <USBD_CtlSendStatus>
      break;
 800d550:	e010      	b.n	800d574 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f000 f9e3 	bl	800d91e <USBD_CtlSendStatus>
      break;
 800d558:	e00c      	b.n	800d574 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d55a:	6839      	ldr	r1, [r7, #0]
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 f900 	bl	800d762 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d562:	4b07      	ldr	r3, [pc, #28]	@ (800d580 <USBD_SetConfig+0x150>)
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f7fe ff78 	bl	800c45e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d56e:	2303      	movs	r3, #3
 800d570:	73fb      	strb	r3, [r7, #15]
      break;
 800d572:	bf00      	nop
  }

  return ret;
 800d574:	7bfb      	ldrb	r3, [r7, #15]
}
 800d576:	4618      	mov	r0, r3
 800d578:	3710      	adds	r7, #16
 800d57a:	46bd      	mov	sp, r7
 800d57c:	bd80      	pop	{r7, pc}
 800d57e:	bf00      	nop
 800d580:	20000b38 	.word	0x20000b38

0800d584 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b082      	sub	sp, #8
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	88db      	ldrh	r3, [r3, #6]
 800d592:	2b01      	cmp	r3, #1
 800d594:	d004      	beq.n	800d5a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f8e2 	bl	800d762 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d59e:	e023      	b.n	800d5e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5a6:	b2db      	uxtb	r3, r3
 800d5a8:	2b02      	cmp	r3, #2
 800d5aa:	dc02      	bgt.n	800d5b2 <USBD_GetConfig+0x2e>
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	dc03      	bgt.n	800d5b8 <USBD_GetConfig+0x34>
 800d5b0:	e015      	b.n	800d5de <USBD_GetConfig+0x5a>
 800d5b2:	2b03      	cmp	r3, #3
 800d5b4:	d00b      	beq.n	800d5ce <USBD_GetConfig+0x4a>
 800d5b6:	e012      	b.n	800d5de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	3308      	adds	r3, #8
 800d5c2:	2201      	movs	r2, #1
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 f948 	bl	800d85c <USBD_CtlSendData>
        break;
 800d5cc:	e00c      	b.n	800d5e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	3304      	adds	r3, #4
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	4619      	mov	r1, r3
 800d5d6:	6878      	ldr	r0, [r7, #4]
 800d5d8:	f000 f940 	bl	800d85c <USBD_CtlSendData>
        break;
 800d5dc:	e004      	b.n	800d5e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d5de:	6839      	ldr	r1, [r7, #0]
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f000 f8be 	bl	800d762 <USBD_CtlError>
        break;
 800d5e6:	bf00      	nop
}
 800d5e8:	bf00      	nop
 800d5ea:	3708      	adds	r7, #8
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b082      	sub	sp, #8
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d600:	b2db      	uxtb	r3, r3
 800d602:	3b01      	subs	r3, #1
 800d604:	2b02      	cmp	r3, #2
 800d606:	d81e      	bhi.n	800d646 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	88db      	ldrh	r3, [r3, #6]
 800d60c:	2b02      	cmp	r3, #2
 800d60e:	d004      	beq.n	800d61a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d610:	6839      	ldr	r1, [r7, #0]
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 f8a5 	bl	800d762 <USBD_CtlError>
        break;
 800d618:	e01a      	b.n	800d650 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2201      	movs	r2, #1
 800d61e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d626:	2b00      	cmp	r3, #0
 800d628:	d005      	beq.n	800d636 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	68db      	ldr	r3, [r3, #12]
 800d62e:	f043 0202 	orr.w	r2, r3, #2
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	330c      	adds	r3, #12
 800d63a:	2202      	movs	r2, #2
 800d63c:	4619      	mov	r1, r3
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 f90c 	bl	800d85c <USBD_CtlSendData>
      break;
 800d644:	e004      	b.n	800d650 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d646:	6839      	ldr	r1, [r7, #0]
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 f88a 	bl	800d762 <USBD_CtlError>
      break;
 800d64e:	bf00      	nop
  }
}
 800d650:	bf00      	nop
 800d652:	3708      	adds	r7, #8
 800d654:	46bd      	mov	sp, r7
 800d656:	bd80      	pop	{r7, pc}

0800d658 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d658:	b580      	push	{r7, lr}
 800d65a:	b082      	sub	sp, #8
 800d65c:	af00      	add	r7, sp, #0
 800d65e:	6078      	str	r0, [r7, #4]
 800d660:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	885b      	ldrh	r3, [r3, #2]
 800d666:	2b01      	cmp	r3, #1
 800d668:	d107      	bne.n	800d67a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	2201      	movs	r2, #1
 800d66e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f000 f953 	bl	800d91e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d678:	e013      	b.n	800d6a2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	885b      	ldrh	r3, [r3, #2]
 800d67e:	2b02      	cmp	r3, #2
 800d680:	d10b      	bne.n	800d69a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	889b      	ldrh	r3, [r3, #4]
 800d686:	0a1b      	lsrs	r3, r3, #8
 800d688:	b29b      	uxth	r3, r3
 800d68a:	b2da      	uxtb	r2, r3
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f000 f943 	bl	800d91e <USBD_CtlSendStatus>
}
 800d698:	e003      	b.n	800d6a2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d69a:	6839      	ldr	r1, [r7, #0]
 800d69c:	6878      	ldr	r0, [r7, #4]
 800d69e:	f000 f860 	bl	800d762 <USBD_CtlError>
}
 800d6a2:	bf00      	nop
 800d6a4:	3708      	adds	r7, #8
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}

0800d6aa <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6aa:	b580      	push	{r7, lr}
 800d6ac:	b082      	sub	sp, #8
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
 800d6b2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6ba:	b2db      	uxtb	r3, r3
 800d6bc:	3b01      	subs	r3, #1
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d80b      	bhi.n	800d6da <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	885b      	ldrh	r3, [r3, #2]
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d10c      	bne.n	800d6e4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 f923 	bl	800d91e <USBD_CtlSendStatus>
      }
      break;
 800d6d8:	e004      	b.n	800d6e4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d6da:	6839      	ldr	r1, [r7, #0]
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 f840 	bl	800d762 <USBD_CtlError>
      break;
 800d6e2:	e000      	b.n	800d6e6 <USBD_ClrFeature+0x3c>
      break;
 800d6e4:	bf00      	nop
  }
}
 800d6e6:	bf00      	nop
 800d6e8:	3708      	adds	r7, #8
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}

0800d6ee <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d6ee:	b580      	push	{r7, lr}
 800d6f0:	b084      	sub	sp, #16
 800d6f2:	af00      	add	r7, sp, #0
 800d6f4:	6078      	str	r0, [r7, #4]
 800d6f6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	781a      	ldrb	r2, [r3, #0]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	3301      	adds	r3, #1
 800d708:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	781a      	ldrb	r2, [r3, #0]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d712:	68fb      	ldr	r3, [r7, #12]
 800d714:	3301      	adds	r3, #1
 800d716:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d718:	68f8      	ldr	r0, [r7, #12]
 800d71a:	f7ff fa3d 	bl	800cb98 <SWAPBYTE>
 800d71e:	4603      	mov	r3, r0
 800d720:	461a      	mov	r2, r3
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	3301      	adds	r3, #1
 800d72a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	3301      	adds	r3, #1
 800d730:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d732:	68f8      	ldr	r0, [r7, #12]
 800d734:	f7ff fa30 	bl	800cb98 <SWAPBYTE>
 800d738:	4603      	mov	r3, r0
 800d73a:	461a      	mov	r2, r3
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	3301      	adds	r3, #1
 800d744:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	3301      	adds	r3, #1
 800d74a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d74c:	68f8      	ldr	r0, [r7, #12]
 800d74e:	f7ff fa23 	bl	800cb98 <SWAPBYTE>
 800d752:	4603      	mov	r3, r0
 800d754:	461a      	mov	r2, r3
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	80da      	strh	r2, [r3, #6]
}
 800d75a:	bf00      	nop
 800d75c:	3710      	adds	r7, #16
 800d75e:	46bd      	mov	sp, r7
 800d760:	bd80      	pop	{r7, pc}

0800d762 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d762:	b580      	push	{r7, lr}
 800d764:	b082      	sub	sp, #8
 800d766:	af00      	add	r7, sp, #0
 800d768:	6078      	str	r0, [r7, #4]
 800d76a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d76c:	2180      	movs	r1, #128	@ 0x80
 800d76e:	6878      	ldr	r0, [r7, #4]
 800d770:	f000 fd56 	bl	800e220 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d774:	2100      	movs	r1, #0
 800d776:	6878      	ldr	r0, [r7, #4]
 800d778:	f000 fd52 	bl	800e220 <USBD_LL_StallEP>
}
 800d77c:	bf00      	nop
 800d77e:	3708      	adds	r7, #8
 800d780:	46bd      	mov	sp, r7
 800d782:	bd80      	pop	{r7, pc}

0800d784 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b086      	sub	sp, #24
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d790:	2300      	movs	r3, #0
 800d792:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2b00      	cmp	r3, #0
 800d798:	d042      	beq.n	800d820 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d79e:	6938      	ldr	r0, [r7, #16]
 800d7a0:	f000 f842 	bl	800d828 <USBD_GetLen>
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	3301      	adds	r3, #1
 800d7a8:	005b      	lsls	r3, r3, #1
 800d7aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d7ae:	d808      	bhi.n	800d7c2 <USBD_GetString+0x3e>
 800d7b0:	6938      	ldr	r0, [r7, #16]
 800d7b2:	f000 f839 	bl	800d828 <USBD_GetLen>
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	3301      	adds	r3, #1
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	005b      	lsls	r3, r3, #1
 800d7be:	b29a      	uxth	r2, r3
 800d7c0:	e001      	b.n	800d7c6 <USBD_GetString+0x42>
 800d7c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d7ca:	7dfb      	ldrb	r3, [r7, #23]
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	7812      	ldrb	r2, [r2, #0]
 800d7d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d7dc:	7dfb      	ldrb	r3, [r7, #23]
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	2203      	movs	r2, #3
 800d7e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d7ec:	e013      	b.n	800d816 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d7ee:	7dfb      	ldrb	r3, [r7, #23]
 800d7f0:	68ba      	ldr	r2, [r7, #8]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	693a      	ldr	r2, [r7, #16]
 800d7f6:	7812      	ldrb	r2, [r2, #0]
 800d7f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	613b      	str	r3, [r7, #16]
    idx++;
 800d800:	7dfb      	ldrb	r3, [r7, #23]
 800d802:	3301      	adds	r3, #1
 800d804:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d806:	7dfb      	ldrb	r3, [r7, #23]
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	4413      	add	r3, r2
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d810:	7dfb      	ldrb	r3, [r7, #23]
 800d812:	3301      	adds	r3, #1
 800d814:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1e7      	bne.n	800d7ee <USBD_GetString+0x6a>
 800d81e:	e000      	b.n	800d822 <USBD_GetString+0x9e>
    return;
 800d820:	bf00      	nop
  }
}
 800d822:	3718      	adds	r7, #24
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d838:	e005      	b.n	800d846 <USBD_GetLen+0x1e>
  {
    len++;
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
 800d83c:	3301      	adds	r3, #1
 800d83e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	3301      	adds	r3, #1
 800d844:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1f5      	bne.n	800d83a <USBD_GetLen+0x12>
  }

  return len;
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2202      	movs	r2, #2
 800d86c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	68ba      	ldr	r2, [r7, #8]
 800d87a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	687a      	ldr	r2, [r7, #4]
 800d880:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	68ba      	ldr	r2, [r7, #8]
 800d886:	2100      	movs	r1, #0
 800d888:	68f8      	ldr	r0, [r7, #12]
 800d88a:	f000 fd52 	bl	800e332 <USBD_LL_Transmit>

  return USBD_OK;
 800d88e:	2300      	movs	r3, #0
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}

0800d898 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b084      	sub	sp, #16
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	68ba      	ldr	r2, [r7, #8]
 800d8a8:	2100      	movs	r1, #0
 800d8aa:	68f8      	ldr	r0, [r7, #12]
 800d8ac:	f000 fd41 	bl	800e332 <USBD_LL_Transmit>

  return USBD_OK;
 800d8b0:	2300      	movs	r3, #0
}
 800d8b2:	4618      	mov	r0, r3
 800d8b4:	3710      	adds	r7, #16
 800d8b6:	46bd      	mov	sp, r7
 800d8b8:	bd80      	pop	{r7, pc}

0800d8ba <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d8ba:	b580      	push	{r7, lr}
 800d8bc:	b084      	sub	sp, #16
 800d8be:	af00      	add	r7, sp, #0
 800d8c0:	60f8      	str	r0, [r7, #12]
 800d8c2:	60b9      	str	r1, [r7, #8]
 800d8c4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	2203      	movs	r2, #3
 800d8ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d8ce:	68fb      	ldr	r3, [r7, #12]
 800d8d0:	687a      	ldr	r2, [r7, #4]
 800d8d2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800d8d6:	68fb      	ldr	r3, [r7, #12]
 800d8d8:	68ba      	ldr	r2, [r7, #8]
 800d8da:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	687a      	ldr	r2, [r7, #4]
 800d8e2:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	68ba      	ldr	r2, [r7, #8]
 800d8ea:	2100      	movs	r1, #0
 800d8ec:	68f8      	ldr	r0, [r7, #12]
 800d8ee:	f000 fd41 	bl	800e374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3710      	adds	r7, #16
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	b084      	sub	sp, #16
 800d900:	af00      	add	r7, sp, #0
 800d902:	60f8      	str	r0, [r7, #12]
 800d904:	60b9      	str	r1, [r7, #8]
 800d906:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	68ba      	ldr	r2, [r7, #8]
 800d90c:	2100      	movs	r1, #0
 800d90e:	68f8      	ldr	r0, [r7, #12]
 800d910:	f000 fd30 	bl	800e374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d914:	2300      	movs	r3, #0
}
 800d916:	4618      	mov	r0, r3
 800d918:	3710      	adds	r7, #16
 800d91a:	46bd      	mov	sp, r7
 800d91c:	bd80      	pop	{r7, pc}

0800d91e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d91e:	b580      	push	{r7, lr}
 800d920:	b082      	sub	sp, #8
 800d922:	af00      	add	r7, sp, #0
 800d924:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	2204      	movs	r2, #4
 800d92a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d92e:	2300      	movs	r3, #0
 800d930:	2200      	movs	r2, #0
 800d932:	2100      	movs	r1, #0
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fcfc 	bl	800e332 <USBD_LL_Transmit>

  return USBD_OK;
 800d93a:	2300      	movs	r3, #0
}
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}

0800d944 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2205      	movs	r2, #5
 800d950:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d954:	2300      	movs	r3, #0
 800d956:	2200      	movs	r2, #0
 800d958:	2100      	movs	r1, #0
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f000 fd0a 	bl	800e374 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d960:	2300      	movs	r3, #0
}
 800d962:	4618      	mov	r0, r3
 800d964:	3708      	adds	r7, #8
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
	...

0800d96c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800d970:	2200      	movs	r2, #0
 800d972:	4912      	ldr	r1, [pc, #72]	@ (800d9bc <MX_USB_DEVICE_Init+0x50>)
 800d974:	4812      	ldr	r0, [pc, #72]	@ (800d9c0 <MX_USB_DEVICE_Init+0x54>)
 800d976:	f7fe fcd9 	bl	800c32c <USBD_Init>
 800d97a:	4603      	mov	r3, r0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d001      	beq.n	800d984 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800d980:	f7f3 fe08 	bl	8001594 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800d984:	490f      	ldr	r1, [pc, #60]	@ (800d9c4 <MX_USB_DEVICE_Init+0x58>)
 800d986:	480e      	ldr	r0, [pc, #56]	@ (800d9c0 <MX_USB_DEVICE_Init+0x54>)
 800d988:	f7fe fd00 	bl	800c38c <USBD_RegisterClass>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d001      	beq.n	800d996 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800d992:	f7f3 fdff 	bl	8001594 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800d996:	490c      	ldr	r1, [pc, #48]	@ (800d9c8 <MX_USB_DEVICE_Init+0x5c>)
 800d998:	4809      	ldr	r0, [pc, #36]	@ (800d9c0 <MX_USB_DEVICE_Init+0x54>)
 800d99a:	f7fe fbf7 	bl	800c18c <USBD_CDC_RegisterInterface>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d001      	beq.n	800d9a8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800d9a4:	f7f3 fdf6 	bl	8001594 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800d9a8:	4805      	ldr	r0, [pc, #20]	@ (800d9c0 <MX_USB_DEVICE_Init+0x54>)
 800d9aa:	f7fe fd25 	bl	800c3f8 <USBD_Start>
 800d9ae:	4603      	mov	r3, r0
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d001      	beq.n	800d9b8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800d9b4:	f7f3 fdee 	bl	8001594 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800d9b8:	bf00      	nop
 800d9ba:	bd80      	pop	{r7, pc}
 800d9bc:	200000e0 	.word	0x200000e0
 800d9c0:	20000b3c 	.word	0x20000b3c
 800d9c4:	20000044 	.word	0x20000044
 800d9c8:	200000cc 	.word	0x200000cc

0800d9cc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	4905      	ldr	r1, [pc, #20]	@ (800d9e8 <CDC_Init_FS+0x1c>)
 800d9d4:	4805      	ldr	r0, [pc, #20]	@ (800d9ec <CDC_Init_FS+0x20>)
 800d9d6:	f7fe fbf3 	bl	800c1c0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800d9da:	4905      	ldr	r1, [pc, #20]	@ (800d9f0 <CDC_Init_FS+0x24>)
 800d9dc:	4803      	ldr	r0, [pc, #12]	@ (800d9ec <CDC_Init_FS+0x20>)
 800d9de:	f7fe fc11 	bl	800c204 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800d9e2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800d9e4:	4618      	mov	r0, r3
 800d9e6:	bd80      	pop	{r7, pc}
 800d9e8:	20001018 	.word	0x20001018
 800d9ec:	20000b3c 	.word	0x20000b3c
 800d9f0:	20000e18 	.word	0x20000e18

0800d9f4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800d9f4:	b480      	push	{r7}
 800d9f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800d9f8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	46bd      	mov	sp, r7
 800d9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da02:	4770      	bx	lr

0800da04 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	4603      	mov	r3, r0
 800da0c:	6039      	str	r1, [r7, #0]
 800da0e:	71fb      	strb	r3, [r7, #7]
 800da10:	4613      	mov	r3, r2
 800da12:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800da14:	79fb      	ldrb	r3, [r7, #7]
 800da16:	2b23      	cmp	r3, #35	@ 0x23
 800da18:	f200 8098 	bhi.w	800db4c <CDC_Control_FS+0x148>
 800da1c:	a201      	add	r2, pc, #4	@ (adr r2, 800da24 <CDC_Control_FS+0x20>)
 800da1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da22:	bf00      	nop
 800da24:	0800db4d 	.word	0x0800db4d
 800da28:	0800db4d 	.word	0x0800db4d
 800da2c:	0800db4d 	.word	0x0800db4d
 800da30:	0800db4d 	.word	0x0800db4d
 800da34:	0800db4d 	.word	0x0800db4d
 800da38:	0800db4d 	.word	0x0800db4d
 800da3c:	0800db4d 	.word	0x0800db4d
 800da40:	0800db4d 	.word	0x0800db4d
 800da44:	0800db4d 	.word	0x0800db4d
 800da48:	0800db4d 	.word	0x0800db4d
 800da4c:	0800db4d 	.word	0x0800db4d
 800da50:	0800db4d 	.word	0x0800db4d
 800da54:	0800db4d 	.word	0x0800db4d
 800da58:	0800db4d 	.word	0x0800db4d
 800da5c:	0800db4d 	.word	0x0800db4d
 800da60:	0800db4d 	.word	0x0800db4d
 800da64:	0800db4d 	.word	0x0800db4d
 800da68:	0800db4d 	.word	0x0800db4d
 800da6c:	0800db4d 	.word	0x0800db4d
 800da70:	0800db4d 	.word	0x0800db4d
 800da74:	0800db4d 	.word	0x0800db4d
 800da78:	0800db4d 	.word	0x0800db4d
 800da7c:	0800db4d 	.word	0x0800db4d
 800da80:	0800db4d 	.word	0x0800db4d
 800da84:	0800db4d 	.word	0x0800db4d
 800da88:	0800db4d 	.word	0x0800db4d
 800da8c:	0800db4d 	.word	0x0800db4d
 800da90:	0800db4d 	.word	0x0800db4d
 800da94:	0800db4d 	.word	0x0800db4d
 800da98:	0800db4d 	.word	0x0800db4d
 800da9c:	0800db4d 	.word	0x0800db4d
 800daa0:	0800db4d 	.word	0x0800db4d
 800daa4:	0800dab5 	.word	0x0800dab5
 800daa8:	0800daf9 	.word	0x0800daf9
 800daac:	0800db4d 	.word	0x0800db4d
 800dab0:	0800db4d 	.word	0x0800db4d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	461a      	mov	r2, r3
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	3301      	adds	r3, #1
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	021b      	lsls	r3, r3, #8
 800dac2:	431a      	orrs	r2, r3
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	3302      	adds	r3, #2
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	041b      	lsls	r3, r3, #16
 800dacc:	431a      	orrs	r2, r3
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	3303      	adds	r3, #3
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	061b      	lsls	r3, r3, #24
 800dad6:	4313      	orrs	r3, r2
 800dad8:	461a      	mov	r2, r3
 800dada:	4b20      	ldr	r3, [pc, #128]	@ (800db5c <CDC_Control_FS+0x158>)
 800dadc:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	791a      	ldrb	r2, [r3, #4]
 800dae2:	4b1e      	ldr	r3, [pc, #120]	@ (800db5c <CDC_Control_FS+0x158>)
 800dae4:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	795a      	ldrb	r2, [r3, #5]
 800daea:	4b1c      	ldr	r3, [pc, #112]	@ (800db5c <CDC_Control_FS+0x158>)
 800daec:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800daee:	683b      	ldr	r3, [r7, #0]
 800daf0:	799a      	ldrb	r2, [r3, #6]
 800daf2:	4b1a      	ldr	r3, [pc, #104]	@ (800db5c <CDC_Control_FS+0x158>)
 800daf4:	719a      	strb	r2, [r3, #6]
    break;
 800daf6:	e02a      	b.n	800db4e <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800daf8:	4b18      	ldr	r3, [pc, #96]	@ (800db5c <CDC_Control_FS+0x158>)
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	b2da      	uxtb	r2, r3
 800dafe:	683b      	ldr	r3, [r7, #0]
 800db00:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800db02:	4b16      	ldr	r3, [pc, #88]	@ (800db5c <CDC_Control_FS+0x158>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	0a1a      	lsrs	r2, r3, #8
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	3301      	adds	r3, #1
 800db0c:	b2d2      	uxtb	r2, r2
 800db0e:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800db10:	4b12      	ldr	r3, [pc, #72]	@ (800db5c <CDC_Control_FS+0x158>)
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	0c1a      	lsrs	r2, r3, #16
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	3302      	adds	r3, #2
 800db1a:	b2d2      	uxtb	r2, r2
 800db1c:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800db1e:	4b0f      	ldr	r3, [pc, #60]	@ (800db5c <CDC_Control_FS+0x158>)
 800db20:	681b      	ldr	r3, [r3, #0]
 800db22:	0e1a      	lsrs	r2, r3, #24
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	3303      	adds	r3, #3
 800db28:	b2d2      	uxtb	r2, r2
 800db2a:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	3304      	adds	r3, #4
 800db30:	4a0a      	ldr	r2, [pc, #40]	@ (800db5c <CDC_Control_FS+0x158>)
 800db32:	7912      	ldrb	r2, [r2, #4]
 800db34:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800db36:	683b      	ldr	r3, [r7, #0]
 800db38:	3305      	adds	r3, #5
 800db3a:	4a08      	ldr	r2, [pc, #32]	@ (800db5c <CDC_Control_FS+0x158>)
 800db3c:	7952      	ldrb	r2, [r2, #5]
 800db3e:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	3306      	adds	r3, #6
 800db44:	4a05      	ldr	r2, [pc, #20]	@ (800db5c <CDC_Control_FS+0x158>)
 800db46:	7992      	ldrb	r2, [r2, #6]
 800db48:	701a      	strb	r2, [r3, #0]
    break;
 800db4a:	e000      	b.n	800db4e <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800db4c:	bf00      	nop
  }

  return (USBD_OK);
 800db4e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800db50:	4618      	mov	r0, r3
 800db52:	370c      	adds	r7, #12
 800db54:	46bd      	mov	sp, r7
 800db56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db5a:	4770      	bx	lr
 800db5c:	200000c4 	.word	0x200000c4

0800db60 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
 800db68:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800db6a:	4b0b      	ldr	r3, [pc, #44]	@ (800db98 <CDC_Receive_FS+0x38>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d006      	beq.n	800db80 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800db72:	4b09      	ldr	r3, [pc, #36]	@ (800db98 <CDC_Receive_FS+0x38>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	683a      	ldr	r2, [r7, #0]
 800db78:	6812      	ldr	r2, [r2, #0]
 800db7a:	4611      	mov	r1, r2
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800db80:	6879      	ldr	r1, [r7, #4]
 800db82:	4806      	ldr	r0, [pc, #24]	@ (800db9c <CDC_Receive_FS+0x3c>)
 800db84:	f7fe fb3e 	bl	800c204 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800db88:	4804      	ldr	r0, [pc, #16]	@ (800db9c <CDC_Receive_FS+0x3c>)
 800db8a:	f7fe fb99 	bl	800c2c0 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800db8e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800db90:	4618      	mov	r0, r3
 800db92:	3708      	adds	r7, #8
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}
 800db98:	20001218 	.word	0x20001218
 800db9c:	20000b3c 	.word	0x20000b3c

0800dba0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
 800dba8:	460b      	mov	r3, r1
 800dbaa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dbb0:	4b0d      	ldr	r3, [pc, #52]	@ (800dbe8 <CDC_Transmit_FS+0x48>)
 800dbb2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dbb6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dbb8:	68bb      	ldr	r3, [r7, #8]
 800dbba:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d001      	beq.n	800dbc6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e00b      	b.n	800dbde <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dbc6:	887b      	ldrh	r3, [r7, #2]
 800dbc8:	461a      	mov	r2, r3
 800dbca:	6879      	ldr	r1, [r7, #4]
 800dbcc:	4806      	ldr	r0, [pc, #24]	@ (800dbe8 <CDC_Transmit_FS+0x48>)
 800dbce:	f7fe faf7 	bl	800c1c0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dbd2:	4805      	ldr	r0, [pc, #20]	@ (800dbe8 <CDC_Transmit_FS+0x48>)
 800dbd4:	f7fe fb34 	bl	800c240 <USBD_CDC_TransmitPacket>
 800dbd8:	4603      	mov	r3, r0
 800dbda:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
 800dbe6:	bf00      	nop
 800dbe8:	20000b3c 	.word	0x20000b3c

0800dbec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dbec:	b480      	push	{r7}
 800dbee:	b087      	sub	sp, #28
 800dbf0:	af00      	add	r7, sp, #0
 800dbf2:	60f8      	str	r0, [r7, #12]
 800dbf4:	60b9      	str	r1, [r7, #8]
 800dbf6:	4613      	mov	r3, r2
 800dbf8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800dbfe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800dc02:	4618      	mov	r0, r3
 800dc04:	371c      	adds	r7, #28
 800dc06:	46bd      	mov	sp, r7
 800dc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0c:	4770      	bx	lr
	...

0800dc10 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800dc10:	b480      	push	{r7}
 800dc12:	b083      	sub	sp, #12
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800dc18:	4a04      	ldr	r2, [pc, #16]	@ (800dc2c <CDC_Attach_Rx+0x1c>)
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	6013      	str	r3, [r2, #0]
}
 800dc1e:	bf00      	nop
 800dc20:	370c      	adds	r7, #12
 800dc22:	46bd      	mov	sp, r7
 800dc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc28:	4770      	bx	lr
 800dc2a:	bf00      	nop
 800dc2c:	20001218 	.word	0x20001218

0800dc30 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc30:	b480      	push	{r7}
 800dc32:	b083      	sub	sp, #12
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	4603      	mov	r3, r0
 800dc38:	6039      	str	r1, [r7, #0]
 800dc3a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	2212      	movs	r2, #18
 800dc40:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dc42:	4b03      	ldr	r3, [pc, #12]	@ (800dc50 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dc44:	4618      	mov	r0, r3
 800dc46:	370c      	adds	r7, #12
 800dc48:	46bd      	mov	sp, r7
 800dc4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc4e:	4770      	bx	lr
 800dc50:	200000fc 	.word	0x200000fc

0800dc54 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b083      	sub	sp, #12
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	6039      	str	r1, [r7, #0]
 800dc5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	2204      	movs	r2, #4
 800dc64:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dc66:	4b03      	ldr	r3, [pc, #12]	@ (800dc74 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dc68:	4618      	mov	r0, r3
 800dc6a:	370c      	adds	r7, #12
 800dc6c:	46bd      	mov	sp, r7
 800dc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc72:	4770      	bx	lr
 800dc74:	20000110 	.word	0x20000110

0800dc78 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dc78:	b580      	push	{r7, lr}
 800dc7a:	b082      	sub	sp, #8
 800dc7c:	af00      	add	r7, sp, #0
 800dc7e:	4603      	mov	r3, r0
 800dc80:	6039      	str	r1, [r7, #0]
 800dc82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dc84:	79fb      	ldrb	r3, [r7, #7]
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d105      	bne.n	800dc96 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dc8a:	683a      	ldr	r2, [r7, #0]
 800dc8c:	4907      	ldr	r1, [pc, #28]	@ (800dcac <USBD_FS_ProductStrDescriptor+0x34>)
 800dc8e:	4808      	ldr	r0, [pc, #32]	@ (800dcb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dc90:	f7ff fd78 	bl	800d784 <USBD_GetString>
 800dc94:	e004      	b.n	800dca0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dc96:	683a      	ldr	r2, [r7, #0]
 800dc98:	4904      	ldr	r1, [pc, #16]	@ (800dcac <USBD_FS_ProductStrDescriptor+0x34>)
 800dc9a:	4805      	ldr	r0, [pc, #20]	@ (800dcb0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dc9c:	f7ff fd72 	bl	800d784 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dca0:	4b02      	ldr	r3, [pc, #8]	@ (800dcac <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dca2:	4618      	mov	r0, r3
 800dca4:	3708      	adds	r7, #8
 800dca6:	46bd      	mov	sp, r7
 800dca8:	bd80      	pop	{r7, pc}
 800dcaa:	bf00      	nop
 800dcac:	2000121c 	.word	0x2000121c
 800dcb0:	0800e4f0 	.word	0x0800e4f0

0800dcb4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b082      	sub	sp, #8
 800dcb8:	af00      	add	r7, sp, #0
 800dcba:	4603      	mov	r3, r0
 800dcbc:	6039      	str	r1, [r7, #0]
 800dcbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dcc0:	683a      	ldr	r2, [r7, #0]
 800dcc2:	4904      	ldr	r1, [pc, #16]	@ (800dcd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dcc4:	4804      	ldr	r0, [pc, #16]	@ (800dcd8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dcc6:	f7ff fd5d 	bl	800d784 <USBD_GetString>
  return USBD_StrDesc;
 800dcca:	4b02      	ldr	r3, [pc, #8]	@ (800dcd4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dccc:	4618      	mov	r0, r3
 800dcce:	3708      	adds	r7, #8
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	bd80      	pop	{r7, pc}
 800dcd4:	2000121c 	.word	0x2000121c
 800dcd8:	0800e508 	.word	0x0800e508

0800dcdc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dcdc:	b580      	push	{r7, lr}
 800dcde:	b082      	sub	sp, #8
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	4603      	mov	r3, r0
 800dce4:	6039      	str	r1, [r7, #0]
 800dce6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	221a      	movs	r2, #26
 800dcec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dcee:	f000 f843 	bl	800dd78 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dcf2:	4b02      	ldr	r3, [pc, #8]	@ (800dcfc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dcf4:	4618      	mov	r0, r3
 800dcf6:	3708      	adds	r7, #8
 800dcf8:	46bd      	mov	sp, r7
 800dcfa:	bd80      	pop	{r7, pc}
 800dcfc:	20000114 	.word	0x20000114

0800dd00 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd00:	b580      	push	{r7, lr}
 800dd02:	b082      	sub	sp, #8
 800dd04:	af00      	add	r7, sp, #0
 800dd06:	4603      	mov	r3, r0
 800dd08:	6039      	str	r1, [r7, #0]
 800dd0a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dd0c:	79fb      	ldrb	r3, [r7, #7]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d105      	bne.n	800dd1e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd12:	683a      	ldr	r2, [r7, #0]
 800dd14:	4907      	ldr	r1, [pc, #28]	@ (800dd34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd16:	4808      	ldr	r0, [pc, #32]	@ (800dd38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd18:	f7ff fd34 	bl	800d784 <USBD_GetString>
 800dd1c:	e004      	b.n	800dd28 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dd1e:	683a      	ldr	r2, [r7, #0]
 800dd20:	4904      	ldr	r1, [pc, #16]	@ (800dd34 <USBD_FS_ConfigStrDescriptor+0x34>)
 800dd22:	4805      	ldr	r0, [pc, #20]	@ (800dd38 <USBD_FS_ConfigStrDescriptor+0x38>)
 800dd24:	f7ff fd2e 	bl	800d784 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd28:	4b02      	ldr	r3, [pc, #8]	@ (800dd34 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	3708      	adds	r7, #8
 800dd2e:	46bd      	mov	sp, r7
 800dd30:	bd80      	pop	{r7, pc}
 800dd32:	bf00      	nop
 800dd34:	2000121c 	.word	0x2000121c
 800dd38:	0800e51c 	.word	0x0800e51c

0800dd3c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b082      	sub	sp, #8
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	4603      	mov	r3, r0
 800dd44:	6039      	str	r1, [r7, #0]
 800dd46:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dd48:	79fb      	ldrb	r3, [r7, #7]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d105      	bne.n	800dd5a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd4e:	683a      	ldr	r2, [r7, #0]
 800dd50:	4907      	ldr	r1, [pc, #28]	@ (800dd70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd52:	4808      	ldr	r0, [pc, #32]	@ (800dd74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd54:	f7ff fd16 	bl	800d784 <USBD_GetString>
 800dd58:	e004      	b.n	800dd64 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dd5a:	683a      	ldr	r2, [r7, #0]
 800dd5c:	4904      	ldr	r1, [pc, #16]	@ (800dd70 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800dd5e:	4805      	ldr	r0, [pc, #20]	@ (800dd74 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800dd60:	f7ff fd10 	bl	800d784 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dd64:	4b02      	ldr	r3, [pc, #8]	@ (800dd70 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800dd66:	4618      	mov	r0, r3
 800dd68:	3708      	adds	r7, #8
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop
 800dd70:	2000121c 	.word	0x2000121c
 800dd74:	0800e528 	.word	0x0800e528

0800dd78 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800dd78:	b580      	push	{r7, lr}
 800dd7a:	b084      	sub	sp, #16
 800dd7c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800dd7e:	4b0f      	ldr	r3, [pc, #60]	@ (800ddbc <Get_SerialNum+0x44>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800dd84:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc0 <Get_SerialNum+0x48>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800dd8a:	4b0e      	ldr	r3, [pc, #56]	@ (800ddc4 <Get_SerialNum+0x4c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800dd90:	68fa      	ldr	r2, [r7, #12]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	4413      	add	r3, r2
 800dd96:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d009      	beq.n	800ddb2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800dd9e:	2208      	movs	r2, #8
 800dda0:	4909      	ldr	r1, [pc, #36]	@ (800ddc8 <Get_SerialNum+0x50>)
 800dda2:	68f8      	ldr	r0, [r7, #12]
 800dda4:	f000 f814 	bl	800ddd0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800dda8:	2204      	movs	r2, #4
 800ddaa:	4908      	ldr	r1, [pc, #32]	@ (800ddcc <Get_SerialNum+0x54>)
 800ddac:	68b8      	ldr	r0, [r7, #8]
 800ddae:	f000 f80f 	bl	800ddd0 <IntToUnicode>
  }
}
 800ddb2:	bf00      	nop
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}
 800ddba:	bf00      	nop
 800ddbc:	1fff7a10 	.word	0x1fff7a10
 800ddc0:	1fff7a14 	.word	0x1fff7a14
 800ddc4:	1fff7a18 	.word	0x1fff7a18
 800ddc8:	20000116 	.word	0x20000116
 800ddcc:	20000126 	.word	0x20000126

0800ddd0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b087      	sub	sp, #28
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	60f8      	str	r0, [r7, #12]
 800ddd8:	60b9      	str	r1, [r7, #8]
 800ddda:	4613      	mov	r3, r2
 800dddc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ddde:	2300      	movs	r3, #0
 800dde0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800dde2:	2300      	movs	r3, #0
 800dde4:	75fb      	strb	r3, [r7, #23]
 800dde6:	e027      	b.n	800de38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	0f1b      	lsrs	r3, r3, #28
 800ddec:	2b09      	cmp	r3, #9
 800ddee:	d80b      	bhi.n	800de08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	0f1b      	lsrs	r3, r3, #28
 800ddf4:	b2da      	uxtb	r2, r3
 800ddf6:	7dfb      	ldrb	r3, [r7, #23]
 800ddf8:	005b      	lsls	r3, r3, #1
 800ddfa:	4619      	mov	r1, r3
 800ddfc:	68bb      	ldr	r3, [r7, #8]
 800ddfe:	440b      	add	r3, r1
 800de00:	3230      	adds	r2, #48	@ 0x30
 800de02:	b2d2      	uxtb	r2, r2
 800de04:	701a      	strb	r2, [r3, #0]
 800de06:	e00a      	b.n	800de1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	0f1b      	lsrs	r3, r3, #28
 800de0c:	b2da      	uxtb	r2, r3
 800de0e:	7dfb      	ldrb	r3, [r7, #23]
 800de10:	005b      	lsls	r3, r3, #1
 800de12:	4619      	mov	r1, r3
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	440b      	add	r3, r1
 800de18:	3237      	adds	r2, #55	@ 0x37
 800de1a:	b2d2      	uxtb	r2, r2
 800de1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	011b      	lsls	r3, r3, #4
 800de22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800de24:	7dfb      	ldrb	r3, [r7, #23]
 800de26:	005b      	lsls	r3, r3, #1
 800de28:	3301      	adds	r3, #1
 800de2a:	68ba      	ldr	r2, [r7, #8]
 800de2c:	4413      	add	r3, r2
 800de2e:	2200      	movs	r2, #0
 800de30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800de32:	7dfb      	ldrb	r3, [r7, #23]
 800de34:	3301      	adds	r3, #1
 800de36:	75fb      	strb	r3, [r7, #23]
 800de38:	7dfa      	ldrb	r2, [r7, #23]
 800de3a:	79fb      	ldrb	r3, [r7, #7]
 800de3c:	429a      	cmp	r2, r3
 800de3e:	d3d3      	bcc.n	800dde8 <IntToUnicode+0x18>
  }
}
 800de40:	bf00      	nop
 800de42:	bf00      	nop
 800de44:	371c      	adds	r7, #28
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr
	...

0800de50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b08a      	sub	sp, #40	@ 0x28
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800de58:	f107 0314 	add.w	r3, r7, #20
 800de5c:	2200      	movs	r2, #0
 800de5e:	601a      	str	r2, [r3, #0]
 800de60:	605a      	str	r2, [r3, #4]
 800de62:	609a      	str	r2, [r3, #8]
 800de64:	60da      	str	r2, [r3, #12]
 800de66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800de70:	d13a      	bne.n	800dee8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800de72:	2300      	movs	r3, #0
 800de74:	613b      	str	r3, [r7, #16]
 800de76:	4b1e      	ldr	r3, [pc, #120]	@ (800def0 <HAL_PCD_MspInit+0xa0>)
 800de78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de7a:	4a1d      	ldr	r2, [pc, #116]	@ (800def0 <HAL_PCD_MspInit+0xa0>)
 800de7c:	f043 0301 	orr.w	r3, r3, #1
 800de80:	6313      	str	r3, [r2, #48]	@ 0x30
 800de82:	4b1b      	ldr	r3, [pc, #108]	@ (800def0 <HAL_PCD_MspInit+0xa0>)
 800de84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800de86:	f003 0301 	and.w	r3, r3, #1
 800de8a:	613b      	str	r3, [r7, #16]
 800de8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800de8e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800de92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800de94:	2302      	movs	r3, #2
 800de96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800de98:	2300      	movs	r3, #0
 800de9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800de9c:	2303      	movs	r3, #3
 800de9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800dea0:	230a      	movs	r3, #10
 800dea2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800dea4:	f107 0314 	add.w	r3, r7, #20
 800dea8:	4619      	mov	r1, r3
 800deaa:	4812      	ldr	r0, [pc, #72]	@ (800def4 <HAL_PCD_MspInit+0xa4>)
 800deac:	f7f5 fd60 	bl	8003970 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800deb0:	4b0f      	ldr	r3, [pc, #60]	@ (800def0 <HAL_PCD_MspInit+0xa0>)
 800deb2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800deb4:	4a0e      	ldr	r2, [pc, #56]	@ (800def0 <HAL_PCD_MspInit+0xa0>)
 800deb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800deba:	6353      	str	r3, [r2, #52]	@ 0x34
 800debc:	2300      	movs	r3, #0
 800debe:	60fb      	str	r3, [r7, #12]
 800dec0:	4b0b      	ldr	r3, [pc, #44]	@ (800def0 <HAL_PCD_MspInit+0xa0>)
 800dec2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dec4:	4a0a      	ldr	r2, [pc, #40]	@ (800def0 <HAL_PCD_MspInit+0xa0>)
 800dec6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800deca:	6453      	str	r3, [r2, #68]	@ 0x44
 800decc:	4b08      	ldr	r3, [pc, #32]	@ (800def0 <HAL_PCD_MspInit+0xa0>)
 800dece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ded0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ded4:	60fb      	str	r3, [r7, #12]
 800ded6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ded8:	2200      	movs	r2, #0
 800deda:	2100      	movs	r1, #0
 800dedc:	2043      	movs	r0, #67	@ 0x43
 800dede:	f7f5 f964 	bl	80031aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800dee2:	2043      	movs	r0, #67	@ 0x43
 800dee4:	f7f5 f97d 	bl	80031e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800dee8:	bf00      	nop
 800deea:	3728      	adds	r7, #40	@ 0x28
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	40023800 	.word	0x40023800
 800def4:	40020000 	.word	0x40020000

0800def8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800df0c:	4619      	mov	r1, r3
 800df0e:	4610      	mov	r0, r2
 800df10:	f7fe fabf 	bl	800c492 <USBD_LL_SetupStage>
}
 800df14:	bf00      	nop
 800df16:	3708      	adds	r7, #8
 800df18:	46bd      	mov	sp, r7
 800df1a:	bd80      	pop	{r7, pc}

0800df1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df1c:	b580      	push	{r7, lr}
 800df1e:	b082      	sub	sp, #8
 800df20:	af00      	add	r7, sp, #0
 800df22:	6078      	str	r0, [r7, #4]
 800df24:	460b      	mov	r3, r1
 800df26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800df2e:	78fa      	ldrb	r2, [r7, #3]
 800df30:	6879      	ldr	r1, [r7, #4]
 800df32:	4613      	mov	r3, r2
 800df34:	00db      	lsls	r3, r3, #3
 800df36:	4413      	add	r3, r2
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	440b      	add	r3, r1
 800df3c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800df40:	681a      	ldr	r2, [r3, #0]
 800df42:	78fb      	ldrb	r3, [r7, #3]
 800df44:	4619      	mov	r1, r3
 800df46:	f7fe faf9 	bl	800c53c <USBD_LL_DataOutStage>
}
 800df4a:	bf00      	nop
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b082      	sub	sp, #8
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
 800df5a:	460b      	mov	r3, r1
 800df5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800df64:	78fa      	ldrb	r2, [r7, #3]
 800df66:	6879      	ldr	r1, [r7, #4]
 800df68:	4613      	mov	r3, r2
 800df6a:	00db      	lsls	r3, r3, #3
 800df6c:	4413      	add	r3, r2
 800df6e:	009b      	lsls	r3, r3, #2
 800df70:	440b      	add	r3, r1
 800df72:	3320      	adds	r3, #32
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	78fb      	ldrb	r3, [r7, #3]
 800df78:	4619      	mov	r1, r3
 800df7a:	f7fe fb9b 	bl	800c6b4 <USBD_LL_DataInStage>
}
 800df7e:	bf00      	nop
 800df80:	3708      	adds	r7, #8
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}

0800df86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800df86:	b580      	push	{r7, lr}
 800df88:	b082      	sub	sp, #8
 800df8a:	af00      	add	r7, sp, #0
 800df8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800df94:	4618      	mov	r0, r3
 800df96:	f7fe fcdf 	bl	800c958 <USBD_LL_SOF>
}
 800df9a:	bf00      	nop
 800df9c:	3708      	adds	r7, #8
 800df9e:	46bd      	mov	sp, r7
 800dfa0:	bd80      	pop	{r7, pc}

0800dfa2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfa2:	b580      	push	{r7, lr}
 800dfa4:	b084      	sub	sp, #16
 800dfa6:	af00      	add	r7, sp, #0
 800dfa8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800dfaa:	2301      	movs	r3, #1
 800dfac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	79db      	ldrb	r3, [r3, #7]
 800dfb2:	2b02      	cmp	r3, #2
 800dfb4:	d001      	beq.n	800dfba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800dfb6:	f7f3 faed 	bl	8001594 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfc0:	7bfa      	ldrb	r2, [r7, #15]
 800dfc2:	4611      	mov	r1, r2
 800dfc4:	4618      	mov	r0, r3
 800dfc6:	f7fe fc83 	bl	800c8d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f7fe fc2a 	bl	800c82a <USBD_LL_Reset>
}
 800dfd6:	bf00      	nop
 800dfd8:	3710      	adds	r7, #16
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
	...

0800dfe0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fe fc7e 	bl	800c8f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	6812      	ldr	r2, [r2, #0]
 800e002:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e006:	f043 0301 	orr.w	r3, r3, #1
 800e00a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	7adb      	ldrb	r3, [r3, #11]
 800e010:	2b00      	cmp	r3, #0
 800e012:	d005      	beq.n	800e020 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e014:	4b04      	ldr	r3, [pc, #16]	@ (800e028 <HAL_PCD_SuspendCallback+0x48>)
 800e016:	691b      	ldr	r3, [r3, #16]
 800e018:	4a03      	ldr	r2, [pc, #12]	@ (800e028 <HAL_PCD_SuspendCallback+0x48>)
 800e01a:	f043 0306 	orr.w	r3, r3, #6
 800e01e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e020:	bf00      	nop
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}
 800e028:	e000ed00 	.word	0xe000ed00

0800e02c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e02c:	b580      	push	{r7, lr}
 800e02e:	b082      	sub	sp, #8
 800e030:	af00      	add	r7, sp, #0
 800e032:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e03a:	4618      	mov	r0, r3
 800e03c:	f7fe fc74 	bl	800c928 <USBD_LL_Resume>
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e048:	b580      	push	{r7, lr}
 800e04a:	b082      	sub	sp, #8
 800e04c:	af00      	add	r7, sp, #0
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	460b      	mov	r3, r1
 800e052:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e054:	687b      	ldr	r3, [r7, #4]
 800e056:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e05a:	78fa      	ldrb	r2, [r7, #3]
 800e05c:	4611      	mov	r1, r2
 800e05e:	4618      	mov	r0, r3
 800e060:	f7fe fccc 	bl	800c9fc <USBD_LL_IsoOUTIncomplete>
}
 800e064:	bf00      	nop
 800e066:	3708      	adds	r7, #8
 800e068:	46bd      	mov	sp, r7
 800e06a:	bd80      	pop	{r7, pc}

0800e06c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b082      	sub	sp, #8
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	460b      	mov	r3, r1
 800e076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e07e:	78fa      	ldrb	r2, [r7, #3]
 800e080:	4611      	mov	r1, r2
 800e082:	4618      	mov	r0, r3
 800e084:	f7fe fc88 	bl	800c998 <USBD_LL_IsoINIncomplete>
}
 800e088:	bf00      	nop
 800e08a:	3708      	adds	r7, #8
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e09e:	4618      	mov	r0, r3
 800e0a0:	f7fe fcde 	bl	800ca60 <USBD_LL_DevConnected>
}
 800e0a4:	bf00      	nop
 800e0a6:	3708      	adds	r7, #8
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}

0800e0ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e0ba:	4618      	mov	r0, r3
 800e0bc:	f7fe fcdb 	bl	800ca76 <USBD_LL_DevDisconnected>
}
 800e0c0:	bf00      	nop
 800e0c2:	3708      	adds	r7, #8
 800e0c4:	46bd      	mov	sp, r7
 800e0c6:	bd80      	pop	{r7, pc}

0800e0c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e0c8:	b580      	push	{r7, lr}
 800e0ca:	b082      	sub	sp, #8
 800e0cc:	af00      	add	r7, sp, #0
 800e0ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d13c      	bne.n	800e152 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e0d8:	4a20      	ldr	r2, [pc, #128]	@ (800e15c <USBD_LL_Init+0x94>)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	4a1e      	ldr	r2, [pc, #120]	@ (800e15c <USBD_LL_Init+0x94>)
 800e0e4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e0e8:	4b1c      	ldr	r3, [pc, #112]	@ (800e15c <USBD_LL_Init+0x94>)
 800e0ea:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e0ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e0f0:	4b1a      	ldr	r3, [pc, #104]	@ (800e15c <USBD_LL_Init+0x94>)
 800e0f2:	2204      	movs	r2, #4
 800e0f4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e0f6:	4b19      	ldr	r3, [pc, #100]	@ (800e15c <USBD_LL_Init+0x94>)
 800e0f8:	2202      	movs	r2, #2
 800e0fa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e0fc:	4b17      	ldr	r3, [pc, #92]	@ (800e15c <USBD_LL_Init+0x94>)
 800e0fe:	2200      	movs	r2, #0
 800e100:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e102:	4b16      	ldr	r3, [pc, #88]	@ (800e15c <USBD_LL_Init+0x94>)
 800e104:	2202      	movs	r2, #2
 800e106:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e108:	4b14      	ldr	r3, [pc, #80]	@ (800e15c <USBD_LL_Init+0x94>)
 800e10a:	2200      	movs	r2, #0
 800e10c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e10e:	4b13      	ldr	r3, [pc, #76]	@ (800e15c <USBD_LL_Init+0x94>)
 800e110:	2200      	movs	r2, #0
 800e112:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e114:	4b11      	ldr	r3, [pc, #68]	@ (800e15c <USBD_LL_Init+0x94>)
 800e116:	2200      	movs	r2, #0
 800e118:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e11a:	4b10      	ldr	r3, [pc, #64]	@ (800e15c <USBD_LL_Init+0x94>)
 800e11c:	2200      	movs	r2, #0
 800e11e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e120:	4b0e      	ldr	r3, [pc, #56]	@ (800e15c <USBD_LL_Init+0x94>)
 800e122:	2200      	movs	r2, #0
 800e124:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e126:	480d      	ldr	r0, [pc, #52]	@ (800e15c <USBD_LL_Init+0x94>)
 800e128:	f7f8 fc72 	bl	8006a10 <HAL_PCD_Init>
 800e12c:	4603      	mov	r3, r0
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d001      	beq.n	800e136 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e132:	f7f3 fa2f 	bl	8001594 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e136:	2180      	movs	r1, #128	@ 0x80
 800e138:	4808      	ldr	r0, [pc, #32]	@ (800e15c <USBD_LL_Init+0x94>)
 800e13a:	f7f9 fe9e 	bl	8007e7a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e13e:	2240      	movs	r2, #64	@ 0x40
 800e140:	2100      	movs	r1, #0
 800e142:	4806      	ldr	r0, [pc, #24]	@ (800e15c <USBD_LL_Init+0x94>)
 800e144:	f7f9 fe52 	bl	8007dec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e148:	2280      	movs	r2, #128	@ 0x80
 800e14a:	2101      	movs	r1, #1
 800e14c:	4803      	ldr	r0, [pc, #12]	@ (800e15c <USBD_LL_Init+0x94>)
 800e14e:	f7f9 fe4d 	bl	8007dec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e152:	2300      	movs	r3, #0
}
 800e154:	4618      	mov	r0, r3
 800e156:	3708      	adds	r7, #8
 800e158:	46bd      	mov	sp, r7
 800e15a:	bd80      	pop	{r7, pc}
 800e15c:	2000141c 	.word	0x2000141c

0800e160 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b084      	sub	sp, #16
 800e164:	af00      	add	r7, sp, #0
 800e166:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e168:	2300      	movs	r3, #0
 800e16a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e16c:	2300      	movs	r3, #0
 800e16e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e176:	4618      	mov	r0, r3
 800e178:	f7f8 fd59 	bl	8006c2e <HAL_PCD_Start>
 800e17c:	4603      	mov	r3, r0
 800e17e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e180:	7bfb      	ldrb	r3, [r7, #15]
 800e182:	4618      	mov	r0, r3
 800e184:	f000 f942 	bl	800e40c <USBD_Get_USB_Status>
 800e188:	4603      	mov	r3, r0
 800e18a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e18c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b084      	sub	sp, #16
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	6078      	str	r0, [r7, #4]
 800e19e:	4608      	mov	r0, r1
 800e1a0:	4611      	mov	r1, r2
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	70fb      	strb	r3, [r7, #3]
 800e1a8:	460b      	mov	r3, r1
 800e1aa:	70bb      	strb	r3, [r7, #2]
 800e1ac:	4613      	mov	r3, r2
 800e1ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e1be:	78bb      	ldrb	r3, [r7, #2]
 800e1c0:	883a      	ldrh	r2, [r7, #0]
 800e1c2:	78f9      	ldrb	r1, [r7, #3]
 800e1c4:	f7f9 fa2d 	bl	8007622 <HAL_PCD_EP_Open>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e1cc:	7bfb      	ldrb	r3, [r7, #15]
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	f000 f91c 	bl	800e40c <USBD_Get_USB_Status>
 800e1d4:	4603      	mov	r3, r0
 800e1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e1da:	4618      	mov	r0, r3
 800e1dc:	3710      	adds	r7, #16
 800e1de:	46bd      	mov	sp, r7
 800e1e0:	bd80      	pop	{r7, pc}

0800e1e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e1e2:	b580      	push	{r7, lr}
 800e1e4:	b084      	sub	sp, #16
 800e1e6:	af00      	add	r7, sp, #0
 800e1e8:	6078      	str	r0, [r7, #4]
 800e1ea:	460b      	mov	r3, r1
 800e1ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e1fc:	78fa      	ldrb	r2, [r7, #3]
 800e1fe:	4611      	mov	r1, r2
 800e200:	4618      	mov	r0, r3
 800e202:	f7f9 fa78 	bl	80076f6 <HAL_PCD_EP_Close>
 800e206:	4603      	mov	r3, r0
 800e208:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e20a:	7bfb      	ldrb	r3, [r7, #15]
 800e20c:	4618      	mov	r0, r3
 800e20e:	f000 f8fd 	bl	800e40c <USBD_Get_USB_Status>
 800e212:	4603      	mov	r3, r0
 800e214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e216:	7bbb      	ldrb	r3, [r7, #14]
}
 800e218:	4618      	mov	r0, r3
 800e21a:	3710      	adds	r7, #16
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b084      	sub	sp, #16
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	460b      	mov	r3, r1
 800e22a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e22c:	2300      	movs	r3, #0
 800e22e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e230:	2300      	movs	r3, #0
 800e232:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e23a:	78fa      	ldrb	r2, [r7, #3]
 800e23c:	4611      	mov	r1, r2
 800e23e:	4618      	mov	r0, r3
 800e240:	f7f9 fb30 	bl	80078a4 <HAL_PCD_EP_SetStall>
 800e244:	4603      	mov	r3, r0
 800e246:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e248:	7bfb      	ldrb	r3, [r7, #15]
 800e24a:	4618      	mov	r0, r3
 800e24c:	f000 f8de 	bl	800e40c <USBD_Get_USB_Status>
 800e250:	4603      	mov	r3, r0
 800e252:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e254:	7bbb      	ldrb	r3, [r7, #14]
}
 800e256:	4618      	mov	r0, r3
 800e258:	3710      	adds	r7, #16
 800e25a:	46bd      	mov	sp, r7
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b084      	sub	sp, #16
 800e262:	af00      	add	r7, sp, #0
 800e264:	6078      	str	r0, [r7, #4]
 800e266:	460b      	mov	r3, r1
 800e268:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e26a:	2300      	movs	r3, #0
 800e26c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e26e:	2300      	movs	r3, #0
 800e270:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e278:	78fa      	ldrb	r2, [r7, #3]
 800e27a:	4611      	mov	r1, r2
 800e27c:	4618      	mov	r0, r3
 800e27e:	f7f9 fb74 	bl	800796a <HAL_PCD_EP_ClrStall>
 800e282:	4603      	mov	r3, r0
 800e284:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e286:	7bfb      	ldrb	r3, [r7, #15]
 800e288:	4618      	mov	r0, r3
 800e28a:	f000 f8bf 	bl	800e40c <USBD_Get_USB_Status>
 800e28e:	4603      	mov	r3, r0
 800e290:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e292:	7bbb      	ldrb	r3, [r7, #14]
}
 800e294:	4618      	mov	r0, r3
 800e296:	3710      	adds	r7, #16
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e29c:	b480      	push	{r7}
 800e29e:	b085      	sub	sp, #20
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e2ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e2b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	da0b      	bge.n	800e2d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e2b8:	78fb      	ldrb	r3, [r7, #3]
 800e2ba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2be:	68f9      	ldr	r1, [r7, #12]
 800e2c0:	4613      	mov	r3, r2
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	4413      	add	r3, r2
 800e2c6:	009b      	lsls	r3, r3, #2
 800e2c8:	440b      	add	r3, r1
 800e2ca:	3316      	adds	r3, #22
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	e00b      	b.n	800e2e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e2d0:	78fb      	ldrb	r3, [r7, #3]
 800e2d2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e2d6:	68f9      	ldr	r1, [r7, #12]
 800e2d8:	4613      	mov	r3, r2
 800e2da:	00db      	lsls	r3, r3, #3
 800e2dc:	4413      	add	r3, r2
 800e2de:	009b      	lsls	r3, r3, #2
 800e2e0:	440b      	add	r3, r1
 800e2e2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e2e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	3714      	adds	r7, #20
 800e2ec:	46bd      	mov	sp, r7
 800e2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f2:	4770      	bx	lr

0800e2f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e300:	2300      	movs	r3, #0
 800e302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e304:	2300      	movs	r3, #0
 800e306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e30e:	78fa      	ldrb	r2, [r7, #3]
 800e310:	4611      	mov	r1, r2
 800e312:	4618      	mov	r0, r3
 800e314:	f7f9 f961 	bl	80075da <HAL_PCD_SetAddress>
 800e318:	4603      	mov	r3, r0
 800e31a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e31c:	7bfb      	ldrb	r3, [r7, #15]
 800e31e:	4618      	mov	r0, r3
 800e320:	f000 f874 	bl	800e40c <USBD_Get_USB_Status>
 800e324:	4603      	mov	r3, r0
 800e326:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e328:	7bbb      	ldrb	r3, [r7, #14]
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}

0800e332 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e332:	b580      	push	{r7, lr}
 800e334:	b086      	sub	sp, #24
 800e336:	af00      	add	r7, sp, #0
 800e338:	60f8      	str	r0, [r7, #12]
 800e33a:	607a      	str	r2, [r7, #4]
 800e33c:	603b      	str	r3, [r7, #0]
 800e33e:	460b      	mov	r3, r1
 800e340:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e342:	2300      	movs	r3, #0
 800e344:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e346:	2300      	movs	r3, #0
 800e348:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e350:	7af9      	ldrb	r1, [r7, #11]
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	687a      	ldr	r2, [r7, #4]
 800e356:	f7f9 fa6b 	bl	8007830 <HAL_PCD_EP_Transmit>
 800e35a:	4603      	mov	r3, r0
 800e35c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e35e:	7dfb      	ldrb	r3, [r7, #23]
 800e360:	4618      	mov	r0, r3
 800e362:	f000 f853 	bl	800e40c <USBD_Get_USB_Status>
 800e366:	4603      	mov	r3, r0
 800e368:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e36a:	7dbb      	ldrb	r3, [r7, #22]
}
 800e36c:	4618      	mov	r0, r3
 800e36e:	3718      	adds	r7, #24
 800e370:	46bd      	mov	sp, r7
 800e372:	bd80      	pop	{r7, pc}

0800e374 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b086      	sub	sp, #24
 800e378:	af00      	add	r7, sp, #0
 800e37a:	60f8      	str	r0, [r7, #12]
 800e37c:	607a      	str	r2, [r7, #4]
 800e37e:	603b      	str	r3, [r7, #0]
 800e380:	460b      	mov	r3, r1
 800e382:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e384:	2300      	movs	r3, #0
 800e386:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e388:	2300      	movs	r3, #0
 800e38a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e392:	7af9      	ldrb	r1, [r7, #11]
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	f7f9 f9f7 	bl	800778a <HAL_PCD_EP_Receive>
 800e39c:	4603      	mov	r3, r0
 800e39e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3a0:	7dfb      	ldrb	r3, [r7, #23]
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f000 f832 	bl	800e40c <USBD_Get_USB_Status>
 800e3a8:	4603      	mov	r3, r0
 800e3aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e3ac:	7dbb      	ldrb	r3, [r7, #22]
}
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	3718      	adds	r7, #24
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	460b      	mov	r3, r1
 800e3c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3c8:	78fa      	ldrb	r2, [r7, #3]
 800e3ca:	4611      	mov	r1, r2
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	f7f9 fa17 	bl	8007800 <HAL_PCD_EP_GetRxCount>
 800e3d2:	4603      	mov	r3, r0
}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3708      	adds	r7, #8
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e3dc:	b480      	push	{r7}
 800e3de:	b083      	sub	sp, #12
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e3e4:	4b03      	ldr	r3, [pc, #12]	@ (800e3f4 <USBD_static_malloc+0x18>)
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	370c      	adds	r7, #12
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	20001900 	.word	0x20001900

0800e3f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e3f8:	b480      	push	{r7}
 800e3fa:	b083      	sub	sp, #12
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]

}
 800e400:	bf00      	nop
 800e402:	370c      	adds	r7, #12
 800e404:	46bd      	mov	sp, r7
 800e406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40a:	4770      	bx	lr

0800e40c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e40c:	b480      	push	{r7}
 800e40e:	b085      	sub	sp, #20
 800e410:	af00      	add	r7, sp, #0
 800e412:	4603      	mov	r3, r0
 800e414:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e416:	2300      	movs	r3, #0
 800e418:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e41a:	79fb      	ldrb	r3, [r7, #7]
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	d817      	bhi.n	800e450 <USBD_Get_USB_Status+0x44>
 800e420:	a201      	add	r2, pc, #4	@ (adr r2, 800e428 <USBD_Get_USB_Status+0x1c>)
 800e422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e426:	bf00      	nop
 800e428:	0800e439 	.word	0x0800e439
 800e42c:	0800e43f 	.word	0x0800e43f
 800e430:	0800e445 	.word	0x0800e445
 800e434:	0800e44b 	.word	0x0800e44b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e438:	2300      	movs	r3, #0
 800e43a:	73fb      	strb	r3, [r7, #15]
    break;
 800e43c:	e00b      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e43e:	2303      	movs	r3, #3
 800e440:	73fb      	strb	r3, [r7, #15]
    break;
 800e442:	e008      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e444:	2301      	movs	r3, #1
 800e446:	73fb      	strb	r3, [r7, #15]
    break;
 800e448:	e005      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e44a:	2303      	movs	r3, #3
 800e44c:	73fb      	strb	r3, [r7, #15]
    break;
 800e44e:	e002      	b.n	800e456 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e450:	2303      	movs	r3, #3
 800e452:	73fb      	strb	r3, [r7, #15]
    break;
 800e454:	bf00      	nop
  }
  return usb_status;
 800e456:	7bfb      	ldrb	r3, [r7, #15]
}
 800e458:	4618      	mov	r0, r3
 800e45a:	3714      	adds	r7, #20
 800e45c:	46bd      	mov	sp, r7
 800e45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e462:	4770      	bx	lr

0800e464 <memset>:
 800e464:	4402      	add	r2, r0
 800e466:	4603      	mov	r3, r0
 800e468:	4293      	cmp	r3, r2
 800e46a:	d100      	bne.n	800e46e <memset+0xa>
 800e46c:	4770      	bx	lr
 800e46e:	f803 1b01 	strb.w	r1, [r3], #1
 800e472:	e7f9      	b.n	800e468 <memset+0x4>

0800e474 <__libc_init_array>:
 800e474:	b570      	push	{r4, r5, r6, lr}
 800e476:	4d0d      	ldr	r5, [pc, #52]	@ (800e4ac <__libc_init_array+0x38>)
 800e478:	4c0d      	ldr	r4, [pc, #52]	@ (800e4b0 <__libc_init_array+0x3c>)
 800e47a:	1b64      	subs	r4, r4, r5
 800e47c:	10a4      	asrs	r4, r4, #2
 800e47e:	2600      	movs	r6, #0
 800e480:	42a6      	cmp	r6, r4
 800e482:	d109      	bne.n	800e498 <__libc_init_array+0x24>
 800e484:	4d0b      	ldr	r5, [pc, #44]	@ (800e4b4 <__libc_init_array+0x40>)
 800e486:	4c0c      	ldr	r4, [pc, #48]	@ (800e4b8 <__libc_init_array+0x44>)
 800e488:	f000 f826 	bl	800e4d8 <_init>
 800e48c:	1b64      	subs	r4, r4, r5
 800e48e:	10a4      	asrs	r4, r4, #2
 800e490:	2600      	movs	r6, #0
 800e492:	42a6      	cmp	r6, r4
 800e494:	d105      	bne.n	800e4a2 <__libc_init_array+0x2e>
 800e496:	bd70      	pop	{r4, r5, r6, pc}
 800e498:	f855 3b04 	ldr.w	r3, [r5], #4
 800e49c:	4798      	blx	r3
 800e49e:	3601      	adds	r6, #1
 800e4a0:	e7ee      	b.n	800e480 <__libc_init_array+0xc>
 800e4a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e4a6:	4798      	blx	r3
 800e4a8:	3601      	adds	r6, #1
 800e4aa:	e7f2      	b.n	800e492 <__libc_init_array+0x1e>
 800e4ac:	0800e570 	.word	0x0800e570
 800e4b0:	0800e570 	.word	0x0800e570
 800e4b4:	0800e570 	.word	0x0800e570
 800e4b8:	0800e574 	.word	0x0800e574

0800e4bc <memcpy>:
 800e4bc:	440a      	add	r2, r1
 800e4be:	4291      	cmp	r1, r2
 800e4c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800e4c4:	d100      	bne.n	800e4c8 <memcpy+0xc>
 800e4c6:	4770      	bx	lr
 800e4c8:	b510      	push	{r4, lr}
 800e4ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e4d2:	4291      	cmp	r1, r2
 800e4d4:	d1f9      	bne.n	800e4ca <memcpy+0xe>
 800e4d6:	bd10      	pop	{r4, pc}

0800e4d8 <_init>:
 800e4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4da:	bf00      	nop
 800e4dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4de:	bc08      	pop	{r3}
 800e4e0:	469e      	mov	lr, r3
 800e4e2:	4770      	bx	lr

0800e4e4 <_fini>:
 800e4e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4e6:	bf00      	nop
 800e4e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e4ea:	bc08      	pop	{r3}
 800e4ec:	469e      	mov	lr, r3
 800e4ee:	4770      	bx	lr
