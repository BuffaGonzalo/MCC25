
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e630  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800e7c8  0800e7c8  0000f7c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e840  0800e840  00010130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e840  0800e840  0000f840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e848  0800e848  00010130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e848  0800e848  0000f848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e84c  0800e84c  0000f84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800e850  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019c8  20000130  0800e980  00010130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001af8  0800e980  00010af8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ceee  00000000  00000000  00010160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ab  00000000  00000000  0002d04e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00031800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014ae  00000000  00000000  000332c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007988  00000000  00000000  0003476e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d06  00000000  00000000  0003c0f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1fc3  00000000  00000000  0005ddfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffdbf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007148  00000000  00000000  000ffe04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00106f4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800e7b0 	.word	0x0800e7b0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	0800e7b0 	.word	0x0800e7b0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <ESP01_Timeout10ms>:
	ESP01ChangeState = NULL;
	ESP01DbgStr = NULL;
}


void ESP01_Timeout10ms(){
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 8000508:	4b13      	ldr	r3, [pc, #76]	@ (8000558 <ESP01_Timeout10ms+0x54>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d004      	beq.n	800051a <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 8000510:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <ESP01_Timeout10ms+0x54>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	3b01      	subs	r3, #1
 8000516:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <ESP01_Timeout10ms+0x54>)
 8000518:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 800051a:	4b10      	ldr	r3, [pc, #64]	@ (800055c <ESP01_Timeout10ms+0x58>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	2b00      	cmp	r3, #0
 8000520:	d00b      	beq.n	800053a <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 8000522:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <ESP01_Timeout10ms+0x58>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	3b01      	subs	r3, #1
 8000528:	4a0c      	ldr	r2, [pc, #48]	@ (800055c <ESP01_Timeout10ms+0x58>)
 800052a:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 800052c:	4b0b      	ldr	r3, [pc, #44]	@ (800055c <ESP01_Timeout10ms+0x58>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d102      	bne.n	800053a <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 8000534:	4b0a      	ldr	r3, [pc, #40]	@ (8000560 <ESP01_Timeout10ms+0x5c>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 800053a:	4b0a      	ldr	r3, [pc, #40]	@ (8000564 <ESP01_Timeout10ms+0x60>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d004      	beq.n	800054c <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <ESP01_Timeout10ms+0x60>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	3b01      	subs	r3, #1
 8000548:	4a06      	ldr	r2, [pc, #24]	@ (8000564 <ESP01_Timeout10ms+0x60>)
 800054a:	6013      	str	r3, [r2, #0]
}
 800054c:	bf00      	nop
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	2000014c 	.word	0x2000014c
 800055c:	20000150 	.word	0x20000150
 8000560:	20000158 	.word	0x20000158
 8000564:	20000154 	.word	0x20000154

08000568 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000568:	b480      	push	{r7}
 800056a:	b085      	sub	sp, #20
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 8000570:	2300      	movs	r3, #0
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	e00a      	b.n	800058c <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000576:	4a0a      	ldr	r2, [pc, #40]	@ (80005a0 <HAL_ADC_ConvCpltCallback+0x38>)
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800057e:	4a09      	ldr	r2, [pc, #36]	@ (80005a4 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000586:	68fb      	ldr	r3, [r7, #12]
 8000588:	3301      	adds	r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	2b07      	cmp	r3, #7
 8000590:	ddf1      	ble.n	8000576 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	3714      	adds	r7, #20
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr
 80005a0:	20000480 	.word	0x20000480
 80005a4:	20000490 	.word	0x20000490

080005a8 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 80005b0:	4b04      	ldr	r3, [pc, #16]	@ (80005c4 <HAL_I2C_MemTxCpltCallback+0x1c>)
 80005b2:	2201      	movs	r2, #1
 80005b4:	701a      	strb	r2, [r3, #0]
}
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	200006bd 	.word	0x200006bd

080005c8 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 80005c8:	b480      	push	{r7}
 80005ca:	b083      	sub	sp, #12
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 80005d0:	4b04      	ldr	r3, [pc, #16]	@ (80005e4 <HAL_I2C_MemRxCpltCallback+0x1c>)
 80005d2:	2201      	movs	r2, #1
 80005d4:	701a      	strb	r2, [r3, #0]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200006be 	.word	0x200006be

080005e8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) { //250us
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a2a      	ldr	r2, [pc, #168]	@ (80006a0 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d116      	bne.n	8000628 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 80005fa:	4b2a      	ldr	r3, [pc, #168]	@ (80006a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	3301      	adds	r3, #1
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b28      	ldr	r3, [pc, #160]	@ (80006a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000604:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000606:	4b27      	ldr	r3, [pc, #156]	@ (80006a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	2b28      	cmp	r3, #40	@ 0x28
 800060c:	d107      	bne.n	800061e <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 800060e:	4b25      	ldr	r3, [pc, #148]	@ (80006a4 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000610:	2200      	movs	r2, #0
 8000612:	701a      	strb	r2, [r3, #0]
			IS10MS = TRUE;
 8000614:	4a24      	ldr	r2, [pc, #144]	@ (80006a8 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000616:	7813      	ldrb	r3, [r2, #0]
 8000618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800061c:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 800061e:	2208      	movs	r2, #8
 8000620:	4922      	ldr	r1, [pc, #136]	@ (80006ac <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000622:	4823      	ldr	r0, [pc, #140]	@ (80006b0 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000624:	f002 f9c0 	bl	80029a8 <HAL_ADC_Start_DMA>
	}

	if (htim->Instance == TIM2) { //20ms
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000630:	d132      	bne.n	8000698 <HAL_TIM_PeriodElapsedCallback+0xb0>
		Pila[i2cIndex] = MPU6050;
 8000632:	4b20      	ldr	r3, [pc, #128]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	461a      	mov	r2, r3
 8000638:	4b1f      	ldr	r3, [pc, #124]	@ (80006b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800063a:	2101      	movs	r1, #1
 800063c:	5499      	strb	r1, [r3, r2]
		i2cIndex++;
 800063e:	4b1d      	ldr	r3, [pc, #116]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	3301      	adds	r3, #1
 8000644:	b2da      	uxtb	r2, r3
 8000646:	4b1b      	ldr	r3, [pc, #108]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000648:	701a      	strb	r2, [r3, #0]
		i2cIndex&=(I2CSIZE-1);
 800064a:	4b1a      	ldr	r3, [pc, #104]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800064c:	781b      	ldrb	r3, [r3, #0]
 800064e:	f003 030f 	and.w	r3, r3, #15
 8000652:	b2da      	uxtb	r2, r3
 8000654:	4b17      	ldr	r3, [pc, #92]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000656:	701a      	strb	r2, [r3, #0]
		tmo100--;
 8000658:	4b18      	ldr	r3, [pc, #96]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800065a:	781b      	ldrb	r3, [r3, #0]
 800065c:	3b01      	subs	r3, #1
 800065e:	b2da      	uxtb	r2, r3
 8000660:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000662:	701a      	strb	r2, [r3, #0]
		if(!tmo100){
 8000664:	4b15      	ldr	r3, [pc, #84]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d115      	bne.n	8000698 <HAL_TIM_PeriodElapsedCallback+0xb0>
			tmo100=5;
 800066c:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800066e:	2205      	movs	r2, #5
 8000670:	701a      	strb	r2, [r3, #0]
			Pila[i2cIndex] = SSD1306;
 8000672:	4b10      	ldr	r3, [pc, #64]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	461a      	mov	r2, r3
 8000678:	4b0f      	ldr	r3, [pc, #60]	@ (80006b8 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800067a:	2100      	movs	r1, #0
 800067c:	5499      	strb	r1, [r3, r2]
			i2cIndex++;
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	3301      	adds	r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4b0b      	ldr	r3, [pc, #44]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000688:	701a      	strb	r2, [r3, #0]
			i2cIndex&=(I2CSIZE-1);
 800068a:	4b0a      	ldr	r3, [pc, #40]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	f003 030f 	and.w	r3, r3, #15
 8000692:	b2da      	uxtb	r2, r3
 8000694:	4b07      	ldr	r3, [pc, #28]	@ (80006b4 <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM4) { //100ms

	}
}
 8000698:	bf00      	nop
 800069a:	3708      	adds	r7, #8
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40010000 	.word	0x40010000
 80006a4:	2000047c 	.word	0x2000047c
 80006a8:	200006bc 	.word	0x200006bc
 80006ac:	20000480 	.word	0x20000480
 80006b0:	2000015c 	.word	0x2000015c
 80006b4:	200006dc 	.word	0x200006dc
 80006b8:	200006cc 	.word	0x200006cc
 80006bc:	2000002a 	.word	0x2000002a

080006c0 <USBRxData>:


void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 80006c0:	b490      	push	{r4, r7}
 80006c2:	b084      	sub	sp, #16
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80006ca:	2300      	movs	r3, #0
 80006cc:	73fb      	strb	r3, [r7, #15]
 80006ce:	e018      	b.n	8000702 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 80006d0:	7bfb      	ldrb	r3, [r7, #15]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	441a      	add	r2, r3
 80006d6:	4b10      	ldr	r3, [pc, #64]	@ (8000718 <USBRxData+0x58>)
 80006d8:	6819      	ldr	r1, [r3, #0]
 80006da:	4b0f      	ldr	r3, [pc, #60]	@ (8000718 <USBRxData+0x58>)
 80006dc:	795b      	ldrb	r3, [r3, #5]
 80006de:	1c58      	adds	r0, r3, #1
 80006e0:	b2c4      	uxtb	r4, r0
 80006e2:	480d      	ldr	r0, [pc, #52]	@ (8000718 <USBRxData+0x58>)
 80006e4:	7144      	strb	r4, [r0, #5]
 80006e6:	440b      	add	r3, r1
 80006e8:	7812      	ldrb	r2, [r2, #0]
 80006ea:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 80006ec:	4b0a      	ldr	r3, [pc, #40]	@ (8000718 <USBRxData+0x58>)
 80006ee:	795a      	ldrb	r2, [r3, #5]
 80006f0:	4b09      	ldr	r3, [pc, #36]	@ (8000718 <USBRxData+0x58>)
 80006f2:	799b      	ldrb	r3, [r3, #6]
 80006f4:	4013      	ands	r3, r2
 80006f6:	b2da      	uxtb	r2, r3
 80006f8:	4b07      	ldr	r3, [pc, #28]	@ (8000718 <USBRxData+0x58>)
 80006fa:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	3301      	adds	r3, #1
 8000700:	73fb      	strb	r3, [r7, #15]
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	683a      	ldr	r2, [r7, #0]
 8000706:	429a      	cmp	r2, r3
 8000708:	d8e2      	bhi.n	80006d0 <USBRxData+0x10>
	}

}
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bc90      	pop	{r4, r7}
 8000714:	4770      	bx	lr
 8000716:	bf00      	nop
 8000718:	200004ac 	.word	0x200004ac

0800071c <USBTask>:

void USBTask() {
 800071c:	b580      	push	{r7, lr}
 800071e:	b0c2      	sub	sp, #264	@ 0x108
 8000720:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000722:	4b22      	ldr	r3, [pc, #136]	@ (80007ac <USBTask+0x90>)
 8000724:	791a      	ldrb	r2, [r3, #4]
 8000726:	4b21      	ldr	r3, [pc, #132]	@ (80007ac <USBTask+0x90>)
 8000728:	795b      	ldrb	r3, [r3, #5]
 800072a:	429a      	cmp	r2, r3
 800072c:	d039      	beq.n	80007a2 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 800072e:	481f      	ldr	r0, [pc, #124]	@ (80007ac <USBTask+0x90>)
 8000730:	f001 fdf0 	bl	8002314 <unerPrtcl_DecodeHeader>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d003      	beq.n	8000742 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 800073a:	491d      	ldr	r1, [pc, #116]	@ (80007b0 <USBTask+0x94>)
 800073c:	481b      	ldr	r0, [pc, #108]	@ (80007ac <USBTask+0x90>)
 800073e:	f000 f839 	bl	80007b4 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000742:	2300      	movs	r3, #0
 8000744:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000748:	e01d      	b.n	8000786 <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 800074a:	4b19      	ldr	r3, [pc, #100]	@ (80007b0 <USBTask+0x94>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <USBTask+0x94>)
 8000750:	7a1b      	ldrb	r3, [r3, #8]
 8000752:	1c59      	adds	r1, r3, #1
 8000754:	b2c8      	uxtb	r0, r1
 8000756:	4916      	ldr	r1, [pc, #88]	@ (80007b0 <USBTask+0x94>)
 8000758:	7208      	strb	r0, [r1, #8]
 800075a:	441a      	add	r2, r3
 800075c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000760:	7811      	ldrb	r1, [r2, #0]
 8000762:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000766:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800076a:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 800076c:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <USBTask+0x94>)
 800076e:	7a1a      	ldrb	r2, [r3, #8]
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <USBTask+0x94>)
 8000772:	799b      	ldrb	r3, [r3, #6]
 8000774:	4013      	ands	r3, r2
 8000776:	b2da      	uxtb	r2, r3
 8000778:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <USBTask+0x94>)
 800077a:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 800077c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000780:	3301      	adds	r3, #1
 8000782:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000786:	4b0a      	ldr	r3, [pc, #40]	@ (80007b0 <USBTask+0x94>)
 8000788:	79db      	ldrb	r3, [r3, #7]
 800078a:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 800078e:	429a      	cmp	r2, r3
 8000790:	d3db      	bcc.n	800074a <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000792:	4b07      	ldr	r3, [pc, #28]	@ (80007b0 <USBTask+0x94>)
 8000794:	79db      	ldrb	r3, [r3, #7]
 8000796:	461a      	mov	r2, r3
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f00d fb79 	bl	800de94 <CDC_Transmit_FS>
	}

}
 80007a2:	bf00      	nop
 80007a4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200004ac 	.word	0x200004ac
 80007b0:	200004a0 	.word	0x200004a0

080007b4 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	687a      	ldr	r2, [r7, #4]
 80007c4:	7a12      	ldrb	r2, [r2, #8]
 80007c6:	4413      	add	r3, r2
 80007c8:	781b      	ldrb	r3, [r3, #0]
 80007ca:	3bf0      	subs	r3, #240	@ 0xf0
 80007cc:	2b04      	cmp	r3, #4
 80007ce:	f200 819f 	bhi.w	8000b10 <decodeCommand+0x35c>
 80007d2:	a201      	add	r2, pc, #4	@ (adr r2, 80007d8 <decodeCommand+0x24>)
 80007d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007d8:	080007ed 	.word	0x080007ed
 80007dc:	0800080d 	.word	0x0800080d
 80007e0:	0800082d 	.word	0x0800082d
 80007e4:	08000911 	.word	0x08000911
 80007e8:	08000a4d 	.word	0x08000a4d
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 80007ec:	2202      	movs	r2, #2
 80007ee:	21f0      	movs	r1, #240	@ 0xf0
 80007f0:	6838      	ldr	r0, [r7, #0]
 80007f2:	f001 fc39 	bl	8002068 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 80007f6:	210d      	movs	r1, #13
 80007f8:	6838      	ldr	r0, [r7, #0]
 80007fa:	f001 fce4 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	7a5b      	ldrb	r3, [r3, #9]
 8000802:	4619      	mov	r1, r3
 8000804:	6838      	ldr	r0, [r7, #0]
 8000806:	f001 fcde 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		break;
 800080a:	e197      	b.n	8000b3c <decodeCommand+0x388>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 800080c:	220d      	movs	r2, #13
 800080e:	21f1      	movs	r1, #241	@ 0xf1
 8000810:	6838      	ldr	r0, [r7, #0]
 8000812:	f001 fc29 	bl	8002068 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000816:	4984      	ldr	r1, [pc, #528]	@ (8000a28 <decodeCommand+0x274>)
 8000818:	6838      	ldr	r0, [r7, #0]
 800081a:	f001 fd02 	bl	8002222 <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	7a5b      	ldrb	r3, [r3, #9]
 8000822:	4619      	mov	r1, r3
 8000824:	6838      	ldr	r0, [r7, #0]
 8000826:	f001 fcce 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		break;
 800082a:	e187      	b.n	8000b3c <decodeCommand+0x388>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 800082c:	220d      	movs	r2, #13
 800082e:	21f2      	movs	r1, #242	@ 0xf2
 8000830:	6838      	ldr	r0, [r7, #0]
 8000832:	f001 fc19 	bl	8002068 <unerPrtcl_PutHeaderOnTx>
		myWord.i16[0] = ax;
 8000836:	4b7d      	ldr	r3, [pc, #500]	@ (8000a2c <decodeCommand+0x278>)
 8000838:	f9b3 2000 	ldrsh.w	r2, [r3]
 800083c:	4b7c      	ldr	r3, [pc, #496]	@ (8000a30 <decodeCommand+0x27c>)
 800083e:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000840:	4b7b      	ldr	r3, [pc, #492]	@ (8000a30 <decodeCommand+0x27c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	6838      	ldr	r0, [r7, #0]
 8000848:	f001 fcbd 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800084c:	4b78      	ldr	r3, [pc, #480]	@ (8000a30 <decodeCommand+0x27c>)
 800084e:	785b      	ldrb	r3, [r3, #1]
 8000850:	4619      	mov	r1, r3
 8000852:	6838      	ldr	r0, [r7, #0]
 8000854:	f001 fcb7 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = ay;
 8000858:	4b76      	ldr	r3, [pc, #472]	@ (8000a34 <decodeCommand+0x280>)
 800085a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800085e:	4b74      	ldr	r3, [pc, #464]	@ (8000a30 <decodeCommand+0x27c>)
 8000860:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000862:	4b73      	ldr	r3, [pc, #460]	@ (8000a30 <decodeCommand+0x27c>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	4619      	mov	r1, r3
 8000868:	6838      	ldr	r0, [r7, #0]
 800086a:	f001 fcac 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800086e:	4b70      	ldr	r3, [pc, #448]	@ (8000a30 <decodeCommand+0x27c>)
 8000870:	785b      	ldrb	r3, [r3, #1]
 8000872:	4619      	mov	r1, r3
 8000874:	6838      	ldr	r0, [r7, #0]
 8000876:	f001 fca6 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = az;
 800087a:	4b6f      	ldr	r3, [pc, #444]	@ (8000a38 <decodeCommand+0x284>)
 800087c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000880:	4b6b      	ldr	r3, [pc, #428]	@ (8000a30 <decodeCommand+0x27c>)
 8000882:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000884:	4b6a      	ldr	r3, [pc, #424]	@ (8000a30 <decodeCommand+0x27c>)
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	4619      	mov	r1, r3
 800088a:	6838      	ldr	r0, [r7, #0]
 800088c:	f001 fc9b 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000890:	4b67      	ldr	r3, [pc, #412]	@ (8000a30 <decodeCommand+0x27c>)
 8000892:	785b      	ldrb	r3, [r3, #1]
 8000894:	4619      	mov	r1, r3
 8000896:	6838      	ldr	r0, [r7, #0]
 8000898:	f001 fc95 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gx;
 800089c:	4b67      	ldr	r3, [pc, #412]	@ (8000a3c <decodeCommand+0x288>)
 800089e:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008a2:	4b63      	ldr	r3, [pc, #396]	@ (8000a30 <decodeCommand+0x27c>)
 80008a4:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80008a6:	4b62      	ldr	r3, [pc, #392]	@ (8000a30 <decodeCommand+0x27c>)
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	4619      	mov	r1, r3
 80008ac:	6838      	ldr	r0, [r7, #0]
 80008ae:	f001 fc8a 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80008b2:	4b5f      	ldr	r3, [pc, #380]	@ (8000a30 <decodeCommand+0x27c>)
 80008b4:	785b      	ldrb	r3, [r3, #1]
 80008b6:	4619      	mov	r1, r3
 80008b8:	6838      	ldr	r0, [r7, #0]
 80008ba:	f001 fc84 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gy;
 80008be:	4b60      	ldr	r3, [pc, #384]	@ (8000a40 <decodeCommand+0x28c>)
 80008c0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008c4:	4b5a      	ldr	r3, [pc, #360]	@ (8000a30 <decodeCommand+0x27c>)
 80008c6:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80008c8:	4b59      	ldr	r3, [pc, #356]	@ (8000a30 <decodeCommand+0x27c>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	4619      	mov	r1, r3
 80008ce:	6838      	ldr	r0, [r7, #0]
 80008d0:	f001 fc79 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80008d4:	4b56      	ldr	r3, [pc, #344]	@ (8000a30 <decodeCommand+0x27c>)
 80008d6:	785b      	ldrb	r3, [r3, #1]
 80008d8:	4619      	mov	r1, r3
 80008da:	6838      	ldr	r0, [r7, #0]
 80008dc:	f001 fc73 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gz;
 80008e0:	4b58      	ldr	r3, [pc, #352]	@ (8000a44 <decodeCommand+0x290>)
 80008e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008e6:	4b52      	ldr	r3, [pc, #328]	@ (8000a30 <decodeCommand+0x27c>)
 80008e8:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80008ea:	4b51      	ldr	r3, [pc, #324]	@ (8000a30 <decodeCommand+0x27c>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	4619      	mov	r1, r3
 80008f0:	6838      	ldr	r0, [r7, #0]
 80008f2:	f001 fc68 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80008f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000a30 <decodeCommand+0x27c>)
 80008f8:	785b      	ldrb	r3, [r3, #1]
 80008fa:	4619      	mov	r1, r3
 80008fc:	6838      	ldr	r0, [r7, #0]
 80008fe:	f001 fc62 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	7a5b      	ldrb	r3, [r3, #9]
 8000906:	4619      	mov	r1, r3
 8000908:	6838      	ldr	r0, [r7, #0]
 800090a:	f001 fc5c 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		break;
 800090e:	e115      	b.n	8000b3c <decodeCommand+0x388>
	case GETADC:
		unerPrtcl_PutHeaderOnTx(dataTx, GETADC, 17);
 8000910:	2211      	movs	r2, #17
 8000912:	21f3      	movs	r1, #243	@ 0xf3
 8000914:	6838      	ldr	r0, [r7, #0]
 8000916:	f001 fba7 	bl	8002068 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = adcDataTx[0];
 800091a:	4b4b      	ldr	r3, [pc, #300]	@ (8000a48 <decodeCommand+0x294>)
 800091c:	881a      	ldrh	r2, [r3, #0]
 800091e:	4b44      	ldr	r3, [pc, #272]	@ (8000a30 <decodeCommand+0x27c>)
 8000920:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000922:	4b43      	ldr	r3, [pc, #268]	@ (8000a30 <decodeCommand+0x27c>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4619      	mov	r1, r3
 8000928:	6838      	ldr	r0, [r7, #0]
 800092a:	f001 fc4c 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800092e:	4b40      	ldr	r3, [pc, #256]	@ (8000a30 <decodeCommand+0x27c>)
 8000930:	785b      	ldrb	r3, [r3, #1]
 8000932:	4619      	mov	r1, r3
 8000934:	6838      	ldr	r0, [r7, #0]
 8000936:	f001 fc46 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[1];
 800093a:	4b43      	ldr	r3, [pc, #268]	@ (8000a48 <decodeCommand+0x294>)
 800093c:	885a      	ldrh	r2, [r3, #2]
 800093e:	4b3c      	ldr	r3, [pc, #240]	@ (8000a30 <decodeCommand+0x27c>)
 8000940:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000942:	4b3b      	ldr	r3, [pc, #236]	@ (8000a30 <decodeCommand+0x27c>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	4619      	mov	r1, r3
 8000948:	6838      	ldr	r0, [r7, #0]
 800094a:	f001 fc3c 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800094e:	4b38      	ldr	r3, [pc, #224]	@ (8000a30 <decodeCommand+0x27c>)
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	4619      	mov	r1, r3
 8000954:	6838      	ldr	r0, [r7, #0]
 8000956:	f001 fc36 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[2];
 800095a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a48 <decodeCommand+0x294>)
 800095c:	889a      	ldrh	r2, [r3, #4]
 800095e:	4b34      	ldr	r3, [pc, #208]	@ (8000a30 <decodeCommand+0x27c>)
 8000960:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000962:	4b33      	ldr	r3, [pc, #204]	@ (8000a30 <decodeCommand+0x27c>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4619      	mov	r1, r3
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	f001 fc2c 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800096e:	4b30      	ldr	r3, [pc, #192]	@ (8000a30 <decodeCommand+0x27c>)
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	4619      	mov	r1, r3
 8000974:	6838      	ldr	r0, [r7, #0]
 8000976:	f001 fc26 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[3];
 800097a:	4b33      	ldr	r3, [pc, #204]	@ (8000a48 <decodeCommand+0x294>)
 800097c:	88da      	ldrh	r2, [r3, #6]
 800097e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <decodeCommand+0x27c>)
 8000980:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000982:	4b2b      	ldr	r3, [pc, #172]	@ (8000a30 <decodeCommand+0x27c>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	4619      	mov	r1, r3
 8000988:	6838      	ldr	r0, [r7, #0]
 800098a:	f001 fc1c 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800098e:	4b28      	ldr	r3, [pc, #160]	@ (8000a30 <decodeCommand+0x27c>)
 8000990:	785b      	ldrb	r3, [r3, #1]
 8000992:	4619      	mov	r1, r3
 8000994:	6838      	ldr	r0, [r7, #0]
 8000996:	f001 fc16 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[4];
 800099a:	4b2b      	ldr	r3, [pc, #172]	@ (8000a48 <decodeCommand+0x294>)
 800099c:	891a      	ldrh	r2, [r3, #8]
 800099e:	4b24      	ldr	r3, [pc, #144]	@ (8000a30 <decodeCommand+0x27c>)
 80009a0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80009a2:	4b23      	ldr	r3, [pc, #140]	@ (8000a30 <decodeCommand+0x27c>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	4619      	mov	r1, r3
 80009a8:	6838      	ldr	r0, [r7, #0]
 80009aa:	f001 fc0c 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80009ae:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <decodeCommand+0x27c>)
 80009b0:	785b      	ldrb	r3, [r3, #1]
 80009b2:	4619      	mov	r1, r3
 80009b4:	6838      	ldr	r0, [r7, #0]
 80009b6:	f001 fc06 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[5];
 80009ba:	4b23      	ldr	r3, [pc, #140]	@ (8000a48 <decodeCommand+0x294>)
 80009bc:	895a      	ldrh	r2, [r3, #10]
 80009be:	4b1c      	ldr	r3, [pc, #112]	@ (8000a30 <decodeCommand+0x27c>)
 80009c0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80009c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000a30 <decodeCommand+0x27c>)
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	4619      	mov	r1, r3
 80009c8:	6838      	ldr	r0, [r7, #0]
 80009ca:	f001 fbfc 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80009ce:	4b18      	ldr	r3, [pc, #96]	@ (8000a30 <decodeCommand+0x27c>)
 80009d0:	785b      	ldrb	r3, [r3, #1]
 80009d2:	4619      	mov	r1, r3
 80009d4:	6838      	ldr	r0, [r7, #0]
 80009d6:	f001 fbf6 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[6];
 80009da:	4b1b      	ldr	r3, [pc, #108]	@ (8000a48 <decodeCommand+0x294>)
 80009dc:	899a      	ldrh	r2, [r3, #12]
 80009de:	4b14      	ldr	r3, [pc, #80]	@ (8000a30 <decodeCommand+0x27c>)
 80009e0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80009e2:	4b13      	ldr	r3, [pc, #76]	@ (8000a30 <decodeCommand+0x27c>)
 80009e4:	781b      	ldrb	r3, [r3, #0]
 80009e6:	4619      	mov	r1, r3
 80009e8:	6838      	ldr	r0, [r7, #0]
 80009ea:	f001 fbec 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80009ee:	4b10      	ldr	r3, [pc, #64]	@ (8000a30 <decodeCommand+0x27c>)
 80009f0:	785b      	ldrb	r3, [r3, #1]
 80009f2:	4619      	mov	r1, r3
 80009f4:	6838      	ldr	r0, [r7, #0]
 80009f6:	f001 fbe6 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[7];
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <decodeCommand+0x294>)
 80009fc:	89da      	ldrh	r2, [r3, #14]
 80009fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000a30 <decodeCommand+0x27c>)
 8000a00:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000a02:	4b0b      	ldr	r3, [pc, #44]	@ (8000a30 <decodeCommand+0x27c>)
 8000a04:	781b      	ldrb	r3, [r3, #0]
 8000a06:	4619      	mov	r1, r3
 8000a08:	6838      	ldr	r0, [r7, #0]
 8000a0a:	f001 fbdc 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a0e:	4b08      	ldr	r3, [pc, #32]	@ (8000a30 <decodeCommand+0x27c>)
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	4619      	mov	r1, r3
 8000a14:	6838      	ldr	r0, [r7, #0]
 8000a16:	f001 fbd6 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	7a5b      	ldrb	r3, [r3, #9]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	6838      	ldr	r0, [r7, #0]
 8000a22:	f001 fbd0 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		break;
 8000a26:	e089      	b.n	8000b3c <decodeCommand+0x388>
 8000a28:	0800e810 	.word	0x0800e810
 8000a2c:	200006c0 	.word	0x200006c0
 8000a30:	200006b8 	.word	0x200006b8
 8000a34:	200006c2 	.word	0x200006c2
 8000a38:	200006c4 	.word	0x200006c4
 8000a3c:	200006c6 	.word	0x200006c6
 8000a40:	200006c8 	.word	0x200006c8
 8000a44:	200006ca 	.word	0x200006ca
 8000a48:	20000490 	.word	0x20000490
	case SETPWM:
        unerPrtcl_PutHeaderOnTx(dataTx, SETPWM, 2);
 8000a4c:	2202      	movs	r2, #2
 8000a4e:	21f4      	movs	r1, #244	@ 0xf4
 8000a50:	6838      	ldr	r0, [r7, #0]
 8000a52:	f001 fb09 	bl	8002068 <unerPrtcl_PutHeaderOnTx>
        unerPrtcl_PutByteOnTx(dataTx, ACK );
 8000a56:	210d      	movs	r1, #13
 8000a58:	6838      	ldr	r0, [r7, #0]
 8000a5a:	f001 fbb4 	bl	80021c6 <unerPrtcl_PutByteOnTx>
        unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	7a5b      	ldrb	r3, [r3, #9]
 8000a62:	4619      	mov	r1, r3
 8000a64:	6838      	ldr	r0, [r7, #0]
 8000a66:	f001 fbae 	bl	80021c6 <unerPrtcl_PutByteOnTx>
        myWord.ui8[0]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	6878      	ldr	r0, [r7, #4]
 8000a70:	f001 fc1b 	bl	80022aa <unerPrtcl_GetByteFromRx>
 8000a74:	4603      	mov	r3, r0
 8000a76:	461a      	mov	r2, r3
 8000a78:	4b32      	ldr	r3, [pc, #200]	@ (8000b44 <decodeCommand+0x390>)
 8000a7a:	701a      	strb	r2, [r3, #0]
        myWord.ui8[1]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2101      	movs	r1, #1
 8000a80:	6878      	ldr	r0, [r7, #4]
 8000a82:	f001 fc12 	bl	80022aa <unerPrtcl_GetByteFromRx>
 8000a86:	4603      	mov	r3, r0
 8000a88:	461a      	mov	r2, r3
 8000a8a:	4b2e      	ldr	r3, [pc, #184]	@ (8000b44 <decodeCommand+0x390>)
 8000a8c:	705a      	strb	r2, [r3, #1]
        myWord.ui8[2]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2101      	movs	r1, #1
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f001 fc09 	bl	80022aa <unerPrtcl_GetByteFromRx>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	461a      	mov	r2, r3
 8000a9c:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <decodeCommand+0x390>)
 8000a9e:	709a      	strb	r2, [r3, #2]
        myWord.ui8[3]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f001 fc00 	bl	80022aa <unerPrtcl_GetByteFromRx>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <decodeCommand+0x390>)
 8000ab0:	70da      	strb	r2, [r3, #3]
        lPwm = myWord.i32;
 8000ab2:	4b24      	ldr	r3, [pc, #144]	@ (8000b44 <decodeCommand+0x390>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <decodeCommand+0x394>)
 8000aba:	601a      	str	r2, [r3, #0]
        myWord.ui8[0]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	2101      	movs	r1, #1
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f001 fbf2 	bl	80022aa <unerPrtcl_GetByteFromRx>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4b1e      	ldr	r3, [pc, #120]	@ (8000b44 <decodeCommand+0x390>)
 8000acc:	701a      	strb	r2, [r3, #0]
        myWord.ui8[1]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f001 fbe9 	bl	80022aa <unerPrtcl_GetByteFromRx>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	461a      	mov	r2, r3
 8000adc:	4b19      	ldr	r3, [pc, #100]	@ (8000b44 <decodeCommand+0x390>)
 8000ade:	705a      	strb	r2, [r3, #1]
        myWord.ui8[2]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2101      	movs	r1, #1
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f001 fbe0 	bl	80022aa <unerPrtcl_GetByteFromRx>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <decodeCommand+0x390>)
 8000af0:	709a      	strb	r2, [r3, #2]
        myWord.ui8[3]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	2101      	movs	r1, #1
 8000af6:	6878      	ldr	r0, [r7, #4]
 8000af8:	f001 fbd7 	bl	80022aa <unerPrtcl_GetByteFromRx>
 8000afc:	4603      	mov	r3, r0
 8000afe:	461a      	mov	r2, r3
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <decodeCommand+0x390>)
 8000b02:	70da      	strb	r2, [r3, #3]
        rPwm = myWord.i32;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	@ (8000b44 <decodeCommand+0x390>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b10      	ldr	r3, [pc, #64]	@ (8000b4c <decodeCommand+0x398>)
 8000b0c:	601a      	str	r2, [r3, #0]
		break;
 8000b0e:	e015      	b.n	8000b3c <decodeCommand+0x388>
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	687a      	ldr	r2, [r7, #4]
 8000b16:	7a12      	ldrb	r2, [r2, #8]
 8000b18:	4413      	add	r3, r2
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	4619      	mov	r1, r3
 8000b20:	6838      	ldr	r0, [r7, #0]
 8000b22:	f001 faa1 	bl	8002068 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 8000b26:	21ff      	movs	r1, #255	@ 0xff
 8000b28:	6838      	ldr	r0, [r7, #0]
 8000b2a:	f001 fb4c 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	7a5b      	ldrb	r3, [r3, #9]
 8000b32:	4619      	mov	r1, r3
 8000b34:	6838      	ldr	r0, [r7, #0]
 8000b36:	f001 fb46 	bl	80021c6 <unerPrtcl_PutByteOnTx>
		break;
 8000b3a:	bf00      	nop
	}
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200006b8 	.word	0x200006b8
 8000b48:	200006e4 	.word	0x200006e4
 8000b4c:	200006e0 	.word	0x200006e0

08000b50 <do10ms>:

void do10ms() {
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	if (IS10MS) {
 8000b54:	4b1a      	ldr	r3, [pc, #104]	@ (8000bc0 <do10ms+0x70>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d02c      	beq.n	8000bbc <do10ms+0x6c>
		IS10MS = FALSE;
 8000b62:	4a17      	ldr	r2, [pc, #92]	@ (8000bc0 <do10ms+0x70>)
 8000b64:	7813      	ldrb	r3, [r2, #0]
 8000b66:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000b6a:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000b6c:	4b15      	ldr	r3, [pc, #84]	@ (8000bc4 <do10ms+0x74>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	4b13      	ldr	r3, [pc, #76]	@ (8000bc4 <do10ms+0x74>)
 8000b76:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 8000b78:	4b13      	ldr	r3, [pc, #76]	@ (8000bc8 <do10ms+0x78>)
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	3b01      	subs	r3, #1
 8000b7e:	b2da      	uxtb	r2, r3
 8000b80:	4b11      	ldr	r3, [pc, #68]	@ (8000bc8 <do10ms+0x78>)
 8000b82:	701a      	strb	r2, [r3, #0]
		ESP01_Timeout10ms();
 8000b84:	f7ff fcbe 	bl	8000504 <ESP01_Timeout10ms>
		if (!tmo20ms) {
 8000b88:	4b0f      	ldr	r3, [pc, #60]	@ (8000bc8 <do10ms+0x78>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d107      	bne.n	8000ba0 <do10ms+0x50>
			tmo20ms = 2;
 8000b90:	4b0d      	ldr	r3, [pc, #52]	@ (8000bc8 <do10ms+0x78>)
 8000b92:	2202      	movs	r2, #2
 8000b94:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <do10ms+0x70>)
 8000b98:	7813      	ldrb	r3, [r2, #0]
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b9e:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 8000ba0:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <do10ms+0x74>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d109      	bne.n	8000bbc <do10ms+0x6c>
			tmo100ms = 10;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	@ (8000bc4 <do10ms+0x74>)
 8000baa:	220a      	movs	r2, #10
 8000bac:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 8000bae:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <do10ms+0x70>)
 8000bb0:	7813      	ldrb	r3, [r2, #0]
 8000bb2:	f043 0320 	orr.w	r3, r3, #32
 8000bb6:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 8000bb8:	f000 f808 	bl	8000bcc <heartBeatTask>
		}
	}
}
 8000bbc:	bf00      	nop
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200006bc 	.word	0x200006bc
 8000bc4:	20000028 	.word	0x20000028
 8000bc8:	20000029 	.word	0x20000029

08000bcc <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 8000bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c10 <heartBeatTask+0x44>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	43db      	mvns	r3, r3
 8000bd6:	4a0f      	ldr	r2, [pc, #60]	@ (8000c14 <heartBeatTask+0x48>)
 8000bd8:	7812      	ldrb	r2, [r2, #0]
 8000bda:	4611      	mov	r1, r2
 8000bdc:	2201      	movs	r2, #1
 8000bde:	408a      	lsls	r2, r1
 8000be0:	4013      	ands	r3, r2
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d004      	beq.n	8000bf0 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 8000be6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bea:	480b      	ldr	r0, [pc, #44]	@ (8000c18 <heartBeatTask+0x4c>)
 8000bec:	f003 f903 	bl	8003df6 <HAL_GPIO_TogglePin>

	times++;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <heartBeatTask+0x48>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	3301      	adds	r3, #1
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <heartBeatTask+0x48>)
 8000bfa:	701a      	strb	r2, [r3, #0]
	times &= 31;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	@ (8000c14 <heartBeatTask+0x48>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	f003 031f 	and.w	r3, r3, #31
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	4b03      	ldr	r3, [pc, #12]	@ (8000c14 <heartBeatTask+0x48>)
 8000c08:	701a      	strb	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000000 	.word	0x20000000
 8000c14:	200006e8 	.word	0x200006e8
 8000c18:	40020800 	.word	0x40020800

08000c1c <displayMemWrite>:

void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af04      	add	r7, sp, #16
 8000c22:	6039      	str	r1, [r7, #0]
 8000c24:	4611      	mov	r1, r2
 8000c26:	461a      	mov	r2, r3
 8000c28:	4603      	mov	r3, r0
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	460b      	mov	r3, r1
 8000c2e:	71bb      	strb	r3, [r7, #6]
 8000c30:	4613      	mov	r3, r2
 8000c32:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8000c34:	79fb      	ldrb	r3, [r7, #7]
 8000c36:	b299      	uxth	r1, r3
 8000c38:	797b      	ldrb	r3, [r7, #5]
 8000c3a:	b29a      	uxth	r2, r3
 8000c3c:	79bb      	ldrb	r3, [r7, #6]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	9002      	str	r0, [sp, #8]
 8000c46:	9301      	str	r3, [sp, #4]
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	4803      	ldr	r0, [pc, #12]	@ (8000c5c <displayMemWrite+0x40>)
 8000c50:	f003 fa46 	bl	80040e0 <HAL_I2C_Mem_Write>
}
 8000c54:	bf00      	nop
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000204 	.word	0x20000204

08000c60 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	6039      	str	r1, [r7, #0]
 8000c68:	4611      	mov	r1, r2
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	71fb      	strb	r3, [r7, #7]
 8000c70:	460b      	mov	r3, r1
 8000c72:	71bb      	strb	r3, [r7, #6]
 8000c74:	4613      	mov	r3, r2
 8000c76:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 8000c78:	79fb      	ldrb	r3, [r7, #7]
 8000c7a:	b299      	uxth	r1, r3
 8000c7c:	797b      	ldrb	r3, [r7, #5]
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	79bb      	ldrb	r3, [r7, #6]
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	9301      	str	r3, [sp, #4]
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	9300      	str	r3, [sp, #0]
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	4803      	ldr	r0, [pc, #12]	@ (8000c9c <displayMemWriteDMA+0x3c>)
 8000c8e:	f003 fb21 	bl	80042d4 <HAL_I2C_Mem_Write_DMA>
}
 8000c92:	bf00      	nop
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	20000204 	.word	0x20000204

08000ca0 <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b086      	sub	sp, #24
 8000ca4:	af04      	add	r7, sp, #16
 8000ca6:	6039      	str	r1, [r7, #0]
 8000ca8:	4611      	mov	r1, r2
 8000caa:	461a      	mov	r2, r3
 8000cac:	4603      	mov	r3, r0
 8000cae:	71fb      	strb	r3, [r7, #7]
 8000cb0:	460b      	mov	r3, r1
 8000cb2:	71bb      	strb	r3, [r7, #6]
 8000cb4:	4613      	mov	r3, r2
 8000cb6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	b299      	uxth	r1, r3
 8000cbc:	797b      	ldrb	r3, [r7, #5]
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	79bb      	ldrb	r3, [r7, #6]
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc8:	9002      	str	r0, [sp, #8]
 8000cca:	9301      	str	r3, [sp, #4]
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	9300      	str	r3, [sp, #0]
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <mpuMemWrite+0x40>)
 8000cd4:	f003 fa04 	bl	80040e0 <HAL_I2C_Mem_Write>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000204 	.word	0x20000204

08000ce4 <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af02      	add	r7, sp, #8
 8000cea:	6039      	str	r1, [r7, #0]
 8000cec:	4611      	mov	r1, r2
 8000cee:	461a      	mov	r2, r3
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	71fb      	strb	r3, [r7, #7]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	71bb      	strb	r3, [r7, #6]
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 8000cfc:	79fb      	ldrb	r3, [r7, #7]
 8000cfe:	b299      	uxth	r1, r3
 8000d00:	797b      	ldrb	r3, [r7, #5]
 8000d02:	b29a      	uxth	r2, r3
 8000d04:	79bb      	ldrb	r3, [r7, #6]
 8000d06:	b29b      	uxth	r3, r3
 8000d08:	9301      	str	r3, [sp, #4]
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	9300      	str	r3, [sp, #0]
 8000d0e:	2301      	movs	r3, #1
 8000d10:	4803      	ldr	r0, [pc, #12]	@ (8000d20 <mpuMemReadDMA+0x3c>)
 8000d12:	f003 fc3d 	bl	8004590 <HAL_I2C_Mem_Read_DMA>
}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000204 	.word	0x20000204

08000d24 <PWM_Control>:
//	}
//
//}


void PWM_Control(){
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0

	  // Calcula CCRx = period * percent / 100
	  uint32_t lPulse = TIM3CP * lPwm / 100UL;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	@ (8000d84 <PWM_Control+0x60>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d32:	fb02 f303 	mul.w	r3, r2, r3
 8000d36:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <PWM_Control+0x64>)
 8000d38:	fba2 2303 	umull	r2, r3, r2, r3
 8000d3c:	095b      	lsrs	r3, r3, #5
 8000d3e:	607b      	str	r3, [r7, #4]
	  uint32_t rPulse = TIM3CP * rPwm / 100UL;
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <PWM_Control+0x68>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000d48:	fb02 f303 	mul.w	r3, r2, r3
 8000d4c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d88 <PWM_Control+0x64>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	603b      	str	r3, [r7, #0]

	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,lPulse);
 8000d56:	4b0e      	ldr	r3, [pc, #56]	@ (8000d90 <PWM_Control+0x6c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,lPulse);
 8000d5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000d90 <PWM_Control+0x6c>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	639a      	str	r2, [r3, #56]	@ 0x38

	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,rPulse);
 8000d66:	4b0a      	ldr	r3, [pc, #40]	@ (8000d90 <PWM_Control+0x6c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	683a      	ldr	r2, [r7, #0]
 8000d6c:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,rPulse);
 8000d6e:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <PWM_Control+0x6c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8000d76:	bf00      	nop
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200006e4 	.word	0x200006e4
 8000d88:	51eb851f 	.word	0x51eb851f
 8000d8c:	200006e0 	.word	0x200006e0
 8000d90:	200003a8 	.word	0x200003a8

08000d94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d98:	f001 fc1c 	bl	80025d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9c:	f000 f882 	bl	8000ea4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da0:	f000 fbfa 	bl	8001598 <MX_GPIO_Init>
  MX_DMA_Init();
 8000da4:	f000 fbba 	bl	800151c <MX_DMA_Init>
  MX_ADC1_Init();
 8000da8:	f000 f8e4 	bl	8000f74 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000dac:	f000 f996 	bl	80010dc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000db0:	f000 f9c2 	bl	8001138 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000db4:	f00c ff54 	bl	800dc60 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000db8:	f000 fa24 	bl	8001204 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000dbc:	f000 fa86 	bl	80012cc <MX_TIM3_Init>
  MX_TIM4_Init();
 8000dc0:	f000 fb32 	bl	8001428 <MX_TIM4_Init>
  MX_USART1_Init();
 8000dc4:	f000 fb7e 	bl	80014c4 <MX_USART1_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8000dc8:	4825      	ldr	r0, [pc, #148]	@ (8000e60 <main+0xcc>)
 8000dca:	f00d f89b 	bl	800df04 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1);
 8000dce:	4825      	ldr	r0, [pc, #148]	@ (8000e64 <main+0xd0>)
 8000dd0:	f007 fdbe 	bl	8008950 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000dd4:	4824      	ldr	r0, [pc, #144]	@ (8000e68 <main+0xd4>)
 8000dd6:	f007 fdbb 	bl	8008950 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000dda:	4824      	ldr	r0, [pc, #144]	@ (8000e6c <main+0xd8>)
 8000ddc:	f007 fdb8 	bl	8008950 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000de0:	4823      	ldr	r0, [pc, #140]	@ (8000e70 <main+0xdc>)
 8000de2:	f007 fdb5 	bl	8008950 <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000de6:	2100      	movs	r1, #0
 8000de8:	4820      	ldr	r0, [pc, #128]	@ (8000e6c <main+0xd8>)
 8000dea:	f007 fe6d 	bl	8008ac8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dee:	2104      	movs	r1, #4
 8000df0:	481e      	ldr	r0, [pc, #120]	@ (8000e6c <main+0xd8>)
 8000df2:	f007 fe69 	bl	8008ac8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000df6:	2108      	movs	r1, #8
 8000df8:	481c      	ldr	r0, [pc, #112]	@ (8000e6c <main+0xd8>)
 8000dfa:	f007 fe65 	bl	8008ac8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000dfe:	210c      	movs	r1, #12
 8000e00:	481a      	ldr	r0, [pc, #104]	@ (8000e6c <main+0xd8>)
 8000e02:	f007 fe61 	bl	8008ac8 <HAL_TIM_PWM_Start>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8000e06:	2201      	movs	r2, #1
 8000e08:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0c:	4819      	ldr	r0, [pc, #100]	@ (8000e74 <main+0xe0>)
 8000e0e:	f002 ffd9 	bl	8003dc4 <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 8000e12:	4819      	ldr	r0, [pc, #100]	@ (8000e78 <main+0xe4>)
 8000e14:	f000 fce0 	bl	80017d8 <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 8000e18:	4818      	ldr	r0, [pc, #96]	@ (8000e7c <main+0xe8>)
 8000e1a:	f000 fccd 	bl	80017b8 <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 8000e1e:	4818      	ldr	r0, [pc, #96]	@ (8000e80 <main+0xec>)
 8000e20:	f000 fcba 	bl	8001798 <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 8000e24:	f000 fce8 	bl	80017f8 <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 8000e28:	4816      	ldr	r0, [pc, #88]	@ (8000e84 <main+0xf0>)
 8000e2a:	f000 fc2b 	bl	8001684 <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 8000e2e:	4816      	ldr	r0, [pc, #88]	@ (8000e88 <main+0xf4>)
 8000e30:	f000 fc38 	bl	80016a4 <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 8000e34:	4815      	ldr	r0, [pc, #84]	@ (8000e8c <main+0xf8>)
 8000e36:	f000 fc45 	bl	80016c4 <mpu6050_Attach_MemReadDMA>
	mpu6050_Init();
 8000e3a:	f000 fc67 	bl	800170c <mpu6050_Init>

	//ESP01_SetWIFI("ARPANET","1969-Apolo_11-2022");
	//ESP01_StartUDP("192.168.0.10", 30010, 30001);

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 8000e3e:	4b14      	ldr	r3, [pc, #80]	@ (8000e90 <main+0xfc>)
 8000e40:	4a14      	ldr	r2, [pc, #80]	@ (8000e94 <main+0x100>)
 8000e42:	4915      	ldr	r1, [pc, #84]	@ (8000e98 <main+0x104>)
 8000e44:	4815      	ldr	r0, [pc, #84]	@ (8000e9c <main+0x108>)
 8000e46:	f001 fb63 	bl	8002510 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 8000e4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <main+0x10c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 8000e50:	f7ff fe7e 	bl	8000b50 <do10ms>
		USBTask();
 8000e54:	f7ff fc62 	bl	800071c <USBTask>
		PWM_Control();
 8000e58:	f7ff ff64 	bl	8000d24 <PWM_Control>
		do10ms();
 8000e5c:	bf00      	nop
 8000e5e:	e7f7      	b.n	8000e50 <main+0xbc>
 8000e60:	080006c1 	.word	0x080006c1
 8000e64:	20000318 	.word	0x20000318
 8000e68:	20000360 	.word	0x20000360
 8000e6c:	200003a8 	.word	0x200003a8
 8000e70:	200003f0 	.word	0x200003f0
 8000e74:	40020800 	.word	0x40020800
 8000e78:	200006bd 	.word	0x200006bd
 8000e7c:	08000c1d 	.word	0x08000c1d
 8000e80:	08000c61 	.word	0x08000c61
 8000e84:	200006be 	.word	0x200006be
 8000e88:	08000ca1 	.word	0x08000ca1
 8000e8c:	08000ce5 	.word	0x08000ce5
 8000e90:	200004b8 	.word	0x200004b8
 8000e94:	200005b8 	.word	0x200005b8
 8000e98:	200004a0 	.word	0x200004a0
 8000e9c:	200004ac 	.word	0x200004ac
 8000ea0:	200006bc 	.word	0x200006bc

08000ea4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b094      	sub	sp, #80	@ 0x50
 8000ea8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eaa:	f107 0320 	add.w	r3, r7, #32
 8000eae:	2230      	movs	r2, #48	@ 0x30
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f00d fc50 	bl	800e758 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ec8:	2300      	movs	r3, #0
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	4b27      	ldr	r3, [pc, #156]	@ (8000f6c <SystemClock_Config+0xc8>)
 8000ece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed0:	4a26      	ldr	r2, [pc, #152]	@ (8000f6c <SystemClock_Config+0xc8>)
 8000ed2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed8:	4b24      	ldr	r3, [pc, #144]	@ (8000f6c <SystemClock_Config+0xc8>)
 8000eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000edc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
 8000ee8:	4b21      	ldr	r3, [pc, #132]	@ (8000f70 <SystemClock_Config+0xcc>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a20      	ldr	r2, [pc, #128]	@ (8000f70 <SystemClock_Config+0xcc>)
 8000eee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ef2:	6013      	str	r3, [r2, #0]
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f70 <SystemClock_Config+0xcc>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000efc:	607b      	str	r3, [r7, #4]
 8000efe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f00:	2301      	movs	r3, #1
 8000f02:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f04:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f08:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f0e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f14:	2319      	movs	r3, #25
 8000f16:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f18:	23c0      	movs	r3, #192	@ 0xc0
 8000f1a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f20:	2304      	movs	r3, #4
 8000f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f24:	f107 0320 	add.w	r3, r7, #32
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f007 f869 	bl	8008000 <HAL_RCC_OscConfig>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f34:	f000 fba0 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f38:	230f      	movs	r3, #15
 8000f3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f44:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f4e:	f107 030c 	add.w	r3, r7, #12
 8000f52:	2103      	movs	r1, #3
 8000f54:	4618      	mov	r0, r3
 8000f56:	f007 facb 	bl	80084f0 <HAL_RCC_ClockConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f60:	f000 fb8a 	bl	8001678 <Error_Handler>
  }
}
 8000f64:	bf00      	nop
 8000f66:	3750      	adds	r7, #80	@ 0x50
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40007000 	.word	0x40007000

08000f74 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f7a:	463b      	mov	r3, r7
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f86:	4b52      	ldr	r3, [pc, #328]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000f88:	4a52      	ldr	r2, [pc, #328]	@ (80010d4 <MX_ADC1_Init+0x160>)
 8000f8a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f8c:	4b50      	ldr	r3, [pc, #320]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000f8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000f92:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f94:	4b4e      	ldr	r3, [pc, #312]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f9a:	4b4d      	ldr	r3, [pc, #308]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fa0:	4b4b      	ldr	r3, [pc, #300]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fa6:	4b4a      	ldr	r3, [pc, #296]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fae:	4b48      	ldr	r3, [pc, #288]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fb4:	4b46      	ldr	r3, [pc, #280]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000fb6:	4a48      	ldr	r2, [pc, #288]	@ (80010d8 <MX_ADC1_Init+0x164>)
 8000fb8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fba:	4b45      	ldr	r3, [pc, #276]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000fc0:	4b43      	ldr	r3, [pc, #268]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000fc2:	2208      	movs	r2, #8
 8000fc4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fc6:	4b42      	ldr	r3, [pc, #264]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fce:	4b40      	ldr	r3, [pc, #256]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fd4:	483e      	ldr	r0, [pc, #248]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000fd6:	f001 fb93 	bl	8002700 <HAL_ADC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fe0:	f000 fb4a 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fec:	2300      	movs	r3, #0
 8000fee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff0:	463b      	mov	r3, r7
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	4836      	ldr	r0, [pc, #216]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8000ff6:	f001 fde9 	bl	8002bcc <HAL_ADC_ConfigChannel>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001000:	f000 fb3a 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001004:	2301      	movs	r3, #1
 8001006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001008:	2302      	movs	r3, #2
 800100a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800100c:	463b      	mov	r3, r7
 800100e:	4619      	mov	r1, r3
 8001010:	482f      	ldr	r0, [pc, #188]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8001012:	f001 fddb 	bl	8002bcc <HAL_ADC_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800101c:	f000 fb2c 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001020:	2302      	movs	r3, #2
 8001022:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001024:	2303      	movs	r3, #3
 8001026:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001028:	463b      	mov	r3, r7
 800102a:	4619      	mov	r1, r3
 800102c:	4828      	ldr	r0, [pc, #160]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 800102e:	f001 fdcd 	bl	8002bcc <HAL_ADC_ConfigChannel>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001038:	f000 fb1e 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800103c:	2303      	movs	r3, #3
 800103e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001040:	2304      	movs	r3, #4
 8001042:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001044:	463b      	mov	r3, r7
 8001046:	4619      	mov	r1, r3
 8001048:	4821      	ldr	r0, [pc, #132]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 800104a:	f001 fdbf 	bl	8002bcc <HAL_ADC_ConfigChannel>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001054:	f000 fb10 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001058:	2304      	movs	r3, #4
 800105a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800105c:	2305      	movs	r3, #5
 800105e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001060:	463b      	mov	r3, r7
 8001062:	4619      	mov	r1, r3
 8001064:	481a      	ldr	r0, [pc, #104]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8001066:	f001 fdb1 	bl	8002bcc <HAL_ADC_ConfigChannel>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001070:	f000 fb02 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001074:	2305      	movs	r3, #5
 8001076:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001078:	2306      	movs	r3, #6
 800107a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107c:	463b      	mov	r3, r7
 800107e:	4619      	mov	r1, r3
 8001080:	4813      	ldr	r0, [pc, #76]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 8001082:	f001 fda3 	bl	8002bcc <HAL_ADC_ConfigChannel>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d001      	beq.n	8001090 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 800108c:	f000 faf4 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001090:	2306      	movs	r3, #6
 8001092:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 8001094:	2307      	movs	r3, #7
 8001096:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001098:	463b      	mov	r3, r7
 800109a:	4619      	mov	r1, r3
 800109c:	480c      	ldr	r0, [pc, #48]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 800109e:	f001 fd95 	bl	8002bcc <HAL_ADC_ConfigChannel>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80010a8:	f000 fae6 	bl	8001678 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010ac:	2307      	movs	r3, #7
 80010ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80010b0:	2308      	movs	r3, #8
 80010b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	@ (80010d0 <MX_ADC1_Init+0x15c>)
 80010ba:	f001 fd87 	bl	8002bcc <HAL_ADC_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80010c4:	f000 fad8 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000015c 	.word	0x2000015c
 80010d4:	40012000 	.word	0x40012000
 80010d8:	0f000001 	.word	0x0f000001

080010dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010e0:	4b12      	ldr	r3, [pc, #72]	@ (800112c <MX_I2C1_Init+0x50>)
 80010e2:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <MX_I2C1_Init+0x54>)
 80010e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80010e6:	4b11      	ldr	r3, [pc, #68]	@ (800112c <MX_I2C1_Init+0x50>)
 80010e8:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <MX_I2C1_Init+0x58>)
 80010ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <MX_I2C1_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	@ (800112c <MX_I2C1_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <MX_I2C1_Init+0x50>)
 80010fa:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80010fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <MX_I2C1_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001106:	4b09      	ldr	r3, [pc, #36]	@ (800112c <MX_I2C1_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <MX_I2C1_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001112:	4b06      	ldr	r3, [pc, #24]	@ (800112c <MX_I2C1_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	@ (800112c <MX_I2C1_Init+0x50>)
 800111a:	f002 fe87 	bl	8003e2c <HAL_I2C_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001124:	f000 faa8 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20000204 	.word	0x20000204
 8001130:	40005400 	.word	0x40005400
 8001134:	00061a80 	.word	0x00061a80

08001138 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08c      	sub	sp, #48	@ 0x30
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800115c:	1d3b      	adds	r3, r7, #4
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001164:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <MX_TIM1_Init+0xc4>)
 8001166:	4a26      	ldr	r2, [pc, #152]	@ (8001200 <MX_TIM1_Init+0xc8>)
 8001168:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 800116a:	4b24      	ldr	r3, [pc, #144]	@ (80011fc <MX_TIM1_Init+0xc4>)
 800116c:	225f      	movs	r2, #95	@ 0x5f
 800116e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b22      	ldr	r3, [pc, #136]	@ (80011fc <MX_TIM1_Init+0xc4>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001176:	4b21      	ldr	r3, [pc, #132]	@ (80011fc <MX_TIM1_Init+0xc4>)
 8001178:	22f9      	movs	r2, #249	@ 0xf9
 800117a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117c:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <MX_TIM1_Init+0xc4>)
 800117e:	2200      	movs	r2, #0
 8001180:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001182:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <MX_TIM1_Init+0xc4>)
 8001184:	2200      	movs	r2, #0
 8001186:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	4b1c      	ldr	r3, [pc, #112]	@ (80011fc <MX_TIM1_Init+0xc4>)
 800118a:	2200      	movs	r2, #0
 800118c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118e:	481b      	ldr	r0, [pc, #108]	@ (80011fc <MX_TIM1_Init+0xc4>)
 8001190:	f007 fb8e 	bl	80088b0 <HAL_TIM_Base_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 800119a:	f000 fa6d 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	4619      	mov	r1, r3
 80011aa:	4814      	ldr	r0, [pc, #80]	@ (80011fc <MX_TIM1_Init+0xc4>)
 80011ac:	f007 feee 	bl	8008f8c <HAL_TIM_ConfigClockSource>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80011b6:	f000 fa5f 	bl	8001678 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80011c2:	f107 030c 	add.w	r3, r7, #12
 80011c6:	4619      	mov	r1, r3
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <MX_TIM1_Init+0xc4>)
 80011ca:	f007 ffa6 	bl	800911a <HAL_TIM_SlaveConfigSynchro>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d001      	beq.n	80011d8 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 80011d4:	f000 fa50 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e0:	1d3b      	adds	r3, r7, #4
 80011e2:	4619      	mov	r1, r3
 80011e4:	4805      	ldr	r0, [pc, #20]	@ (80011fc <MX_TIM1_Init+0xc4>)
 80011e6:	f008 fb65 	bl	80098b4 <HAL_TIMEx_MasterConfigSynchronization>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d001      	beq.n	80011f4 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 80011f0:	f000 fa42 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80011f4:	bf00      	nop
 80011f6:	3730      	adds	r7, #48	@ 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000318 	.word	0x20000318
 8001200:	40010000 	.word	0x40010000

08001204 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08c      	sub	sp, #48	@ 0x30
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800120a:	f107 0320 	add.w	r3, r7, #32
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001218:	f107 030c 	add.w	r3, r7, #12
 800121c:	2200      	movs	r2, #0
 800121e:	601a      	str	r2, [r3, #0]
 8001220:	605a      	str	r2, [r3, #4]
 8001222:	609a      	str	r2, [r3, #8]
 8001224:	60da      	str	r2, [r3, #12]
 8001226:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001230:	4b25      	ldr	r3, [pc, #148]	@ (80012c8 <MX_TIM2_Init+0xc4>)
 8001232:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001238:	4b23      	ldr	r3, [pc, #140]	@ (80012c8 <MX_TIM2_Init+0xc4>)
 800123a:	225f      	movs	r2, #95	@ 0x5f
 800123c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b22      	ldr	r3, [pc, #136]	@ (80012c8 <MX_TIM2_Init+0xc4>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001244:	4b20      	ldr	r3, [pc, #128]	@ (80012c8 <MX_TIM2_Init+0xc4>)
 8001246:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800124a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124c:	4b1e      	ldr	r3, [pc, #120]	@ (80012c8 <MX_TIM2_Init+0xc4>)
 800124e:	2200      	movs	r2, #0
 8001250:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001252:	4b1d      	ldr	r3, [pc, #116]	@ (80012c8 <MX_TIM2_Init+0xc4>)
 8001254:	2200      	movs	r2, #0
 8001256:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001258:	481b      	ldr	r0, [pc, #108]	@ (80012c8 <MX_TIM2_Init+0xc4>)
 800125a:	f007 fb29 	bl	80088b0 <HAL_TIM_Base_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001264:	f000 fa08 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001268:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800126c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800126e:	f107 0320 	add.w	r3, r7, #32
 8001272:	4619      	mov	r1, r3
 8001274:	4814      	ldr	r0, [pc, #80]	@ (80012c8 <MX_TIM2_Init+0xc4>)
 8001276:	f007 fe89 	bl	8008f8c <HAL_TIM_ConfigClockSource>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001280:	f000 f9fa 	bl	8001678 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001288:	2300      	movs	r3, #0
 800128a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800128c:	f107 030c 	add.w	r3, r7, #12
 8001290:	4619      	mov	r1, r3
 8001292:	480d      	ldr	r0, [pc, #52]	@ (80012c8 <MX_TIM2_Init+0xc4>)
 8001294:	f007 ff41 	bl	800911a <HAL_TIM_SlaveConfigSynchro>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 800129e:	f000 f9eb 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	4806      	ldr	r0, [pc, #24]	@ (80012c8 <MX_TIM2_Init+0xc4>)
 80012b0:	f008 fb00 	bl	80098b4 <HAL_TIMEx_MasterConfigSynchronization>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80012ba:	f000 f9dd 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	3730      	adds	r7, #48	@ 0x30
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000360 	.word	0x20000360

080012cc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b092      	sub	sp, #72	@ 0x48
 80012d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012d2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	605a      	str	r2, [r3, #4]
 80012ea:	609a      	str	r2, [r3, #8]
 80012ec:	60da      	str	r2, [r3, #12]
 80012ee:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f0:	f107 031c 	add.w	r3, r7, #28
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fa:	463b      	mov	r3, r7
 80012fc:	2200      	movs	r2, #0
 80012fe:	601a      	str	r2, [r3, #0]
 8001300:	605a      	str	r2, [r3, #4]
 8001302:	609a      	str	r2, [r3, #8]
 8001304:	60da      	str	r2, [r3, #12]
 8001306:	611a      	str	r2, [r3, #16]
 8001308:	615a      	str	r2, [r3, #20]
 800130a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800130c:	4b44      	ldr	r3, [pc, #272]	@ (8001420 <MX_TIM3_Init+0x154>)
 800130e:	4a45      	ldr	r2, [pc, #276]	@ (8001424 <MX_TIM3_Init+0x158>)
 8001310:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8001312:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <MX_TIM3_Init+0x154>)
 8001314:	225f      	movs	r2, #95	@ 0x5f
 8001316:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001318:	4b41      	ldr	r3, [pc, #260]	@ (8001420 <MX_TIM3_Init+0x154>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800131e:	4b40      	ldr	r3, [pc, #256]	@ (8001420 <MX_TIM3_Init+0x154>)
 8001320:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001324:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001326:	4b3e      	ldr	r3, [pc, #248]	@ (8001420 <MX_TIM3_Init+0x154>)
 8001328:	2200      	movs	r2, #0
 800132a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132c:	4b3c      	ldr	r3, [pc, #240]	@ (8001420 <MX_TIM3_Init+0x154>)
 800132e:	2200      	movs	r2, #0
 8001330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001332:	483b      	ldr	r0, [pc, #236]	@ (8001420 <MX_TIM3_Init+0x154>)
 8001334:	f007 fabc 	bl	80088b0 <HAL_TIM_Base_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800133e:	f000 f99b 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001342:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001346:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001348:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800134c:	4619      	mov	r1, r3
 800134e:	4834      	ldr	r0, [pc, #208]	@ (8001420 <MX_TIM3_Init+0x154>)
 8001350:	f007 fe1c 	bl	8008f8c <HAL_TIM_ConfigClockSource>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800135a:	f000 f98d 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800135e:	4830      	ldr	r0, [pc, #192]	@ (8001420 <MX_TIM3_Init+0x154>)
 8001360:	f007 fb58 	bl	8008a14 <HAL_TIM_PWM_Init>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 800136a:	f000 f985 	bl	8001678 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001372:	2300      	movs	r3, #0
 8001374:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001376:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137a:	4619      	mov	r1, r3
 800137c:	4828      	ldr	r0, [pc, #160]	@ (8001420 <MX_TIM3_Init+0x154>)
 800137e:	f007 fecc 	bl	800911a <HAL_TIM_SlaveConfigSynchro>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001388:	f000 f976 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001394:	f107 031c 	add.w	r3, r7, #28
 8001398:	4619      	mov	r1, r3
 800139a:	4821      	ldr	r0, [pc, #132]	@ (8001420 <MX_TIM3_Init+0x154>)
 800139c:	f008 fa8a 	bl	80098b4 <HAL_TIMEx_MasterConfigSynchronization>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 80013a6:	f000 f967 	bl	8001678 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013aa:	2360      	movs	r3, #96	@ 0x60
 80013ac:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ba:	463b      	mov	r3, r7
 80013bc:	2200      	movs	r2, #0
 80013be:	4619      	mov	r1, r3
 80013c0:	4817      	ldr	r0, [pc, #92]	@ (8001420 <MX_TIM3_Init+0x154>)
 80013c2:	f007 fd21 	bl	8008e08 <HAL_TIM_PWM_ConfigChannel>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80013cc:	f000 f954 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013d0:	463b      	mov	r3, r7
 80013d2:	2204      	movs	r2, #4
 80013d4:	4619      	mov	r1, r3
 80013d6:	4812      	ldr	r0, [pc, #72]	@ (8001420 <MX_TIM3_Init+0x154>)
 80013d8:	f007 fd16 	bl	8008e08 <HAL_TIM_PWM_ConfigChannel>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 80013e2:	f000 f949 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013e6:	463b      	mov	r3, r7
 80013e8:	2208      	movs	r2, #8
 80013ea:	4619      	mov	r1, r3
 80013ec:	480c      	ldr	r0, [pc, #48]	@ (8001420 <MX_TIM3_Init+0x154>)
 80013ee:	f007 fd0b 	bl	8008e08 <HAL_TIM_PWM_ConfigChannel>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 80013f8:	f000 f93e 	bl	8001678 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80013fc:	463b      	mov	r3, r7
 80013fe:	220c      	movs	r2, #12
 8001400:	4619      	mov	r1, r3
 8001402:	4807      	ldr	r0, [pc, #28]	@ (8001420 <MX_TIM3_Init+0x154>)
 8001404:	f007 fd00 	bl	8008e08 <HAL_TIM_PWM_ConfigChannel>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 800140e:	f000 f933 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001412:	4803      	ldr	r0, [pc, #12]	@ (8001420 <MX_TIM3_Init+0x154>)
 8001414:	f000 fcc6 	bl	8001da4 <HAL_TIM_MspPostInit>

}
 8001418:	bf00      	nop
 800141a:	3748      	adds	r7, #72	@ 0x48
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	200003a8 	.word	0x200003a8
 8001424:	40000400 	.word	0x40000400

08001428 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b086      	sub	sp, #24
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800142e:	f107 0308 	add.w	r3, r7, #8
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	463b      	mov	r3, r7
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001444:	4b1d      	ldr	r3, [pc, #116]	@ (80014bc <MX_TIM4_Init+0x94>)
 8001446:	4a1e      	ldr	r2, [pc, #120]	@ (80014c0 <MX_TIM4_Init+0x98>)
 8001448:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 191;
 800144a:	4b1c      	ldr	r3, [pc, #112]	@ (80014bc <MX_TIM4_Init+0x94>)
 800144c:	22bf      	movs	r2, #191	@ 0xbf
 800144e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <MX_TIM4_Init+0x94>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8001456:	4b19      	ldr	r3, [pc, #100]	@ (80014bc <MX_TIM4_Init+0x94>)
 8001458:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 800145c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <MX_TIM4_Init+0x94>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b15      	ldr	r3, [pc, #84]	@ (80014bc <MX_TIM4_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800146a:	4814      	ldr	r0, [pc, #80]	@ (80014bc <MX_TIM4_Init+0x94>)
 800146c:	f007 fa20 	bl	80088b0 <HAL_TIM_Base_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001476:	f000 f8ff 	bl	8001678 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800147a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800147e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4619      	mov	r1, r3
 8001486:	480d      	ldr	r0, [pc, #52]	@ (80014bc <MX_TIM4_Init+0x94>)
 8001488:	f007 fd80 	bl	8008f8c <HAL_TIM_ConfigClockSource>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001492:	f000 f8f1 	bl	8001678 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001496:	2300      	movs	r3, #0
 8001498:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149a:	2300      	movs	r3, #0
 800149c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800149e:	463b      	mov	r3, r7
 80014a0:	4619      	mov	r1, r3
 80014a2:	4806      	ldr	r0, [pc, #24]	@ (80014bc <MX_TIM4_Init+0x94>)
 80014a4:	f008 fa06 	bl	80098b4 <HAL_TIMEx_MasterConfigSynchronization>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 80014ae:	f000 f8e3 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80014b2:	bf00      	nop
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	200003f0 	.word	0x200003f0
 80014c0:	40000800 	.word	0x40000800

080014c4 <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80014c8:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <MX_USART1_Init+0x50>)
 80014ca:	4a13      	ldr	r2, [pc, #76]	@ (8001518 <MX_USART1_Init+0x54>)
 80014cc:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80014ce:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <MX_USART1_Init+0x50>)
 80014d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d4:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80014d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001514 <MX_USART1_Init+0x50>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80014dc:	4b0d      	ldr	r3, [pc, #52]	@ (8001514 <MX_USART1_Init+0x50>)
 80014de:	2200      	movs	r2, #0
 80014e0:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <MX_USART1_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 80014e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001514 <MX_USART1_Init+0x50>)
 80014ea:	220c      	movs	r2, #12
 80014ec:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 80014ee:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <MX_USART1_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 80014f4:	4b07      	ldr	r3, [pc, #28]	@ (8001514 <MX_USART1_Init+0x50>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 80014fa:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <MX_USART1_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001500:	4804      	ldr	r0, [pc, #16]	@ (8001514 <MX_USART1_Init+0x50>)
 8001502:	f008 fa59 	bl	80099b8 <HAL_USART_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 800150c:	f000 f8b4 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001510:	bf00      	nop
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000438 	.word	0x20000438
 8001518:	40011000 	.word	0x40011000

0800151c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b1b      	ldr	r3, [pc, #108]	@ (8001594 <MX_DMA_Init+0x78>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a1a      	ldr	r2, [pc, #104]	@ (8001594 <MX_DMA_Init+0x78>)
 800152c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b18      	ldr	r3, [pc, #96]	@ (8001594 <MX_DMA_Init+0x78>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800153e:	2300      	movs	r3, #0
 8001540:	603b      	str	r3, [r7, #0]
 8001542:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <MX_DMA_Init+0x78>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	4a13      	ldr	r2, [pc, #76]	@ (8001594 <MX_DMA_Init+0x78>)
 8001548:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800154c:	6313      	str	r3, [r2, #48]	@ 0x30
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <MX_DMA_Init+0x78>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001552:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800155a:	2200      	movs	r2, #0
 800155c:	2100      	movs	r1, #0
 800155e:	200b      	movs	r0, #11
 8001560:	f001 fec9 	bl	80032f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001564:	200b      	movs	r0, #11
 8001566:	f001 fee2 	bl	800332e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800156a:	2200      	movs	r2, #0
 800156c:	2100      	movs	r1, #0
 800156e:	200c      	movs	r0, #12
 8001570:	f001 fec1 	bl	80032f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001574:	200c      	movs	r0, #12
 8001576:	f001 feda 	bl	800332e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	2100      	movs	r1, #0
 800157e:	2038      	movs	r0, #56	@ 0x38
 8001580:	f001 feb9 	bl	80032f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001584:	2038      	movs	r0, #56	@ 0x38
 8001586:	f001 fed2 	bl	800332e <HAL_NVIC_EnableIRQ>

}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800

08001598 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	@ 0x28
 800159c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159e:	f107 0314 	add.w	r3, r7, #20
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]
 80015aa:	60da      	str	r2, [r3, #12]
 80015ac:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	613b      	str	r3, [r7, #16]
 80015b2:	4b2e      	ldr	r3, [pc, #184]	@ (800166c <MX_GPIO_Init+0xd4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a2d      	ldr	r2, [pc, #180]	@ (800166c <MX_GPIO_Init+0xd4>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b2b      	ldr	r3, [pc, #172]	@ (800166c <MX_GPIO_Init+0xd4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	613b      	str	r3, [r7, #16]
 80015c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	4b27      	ldr	r3, [pc, #156]	@ (800166c <MX_GPIO_Init+0xd4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a26      	ldr	r2, [pc, #152]	@ (800166c <MX_GPIO_Init+0xd4>)
 80015d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b24      	ldr	r3, [pc, #144]	@ (800166c <MX_GPIO_Init+0xd4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80015e2:	60fb      	str	r3, [r7, #12]
 80015e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	4b20      	ldr	r3, [pc, #128]	@ (800166c <MX_GPIO_Init+0xd4>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ee:	4a1f      	ldr	r2, [pc, #124]	@ (800166c <MX_GPIO_Init+0xd4>)
 80015f0:	f043 0301 	orr.w	r3, r3, #1
 80015f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f6:	4b1d      	ldr	r3, [pc, #116]	@ (800166c <MX_GPIO_Init+0xd4>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	607b      	str	r3, [r7, #4]
 8001606:	4b19      	ldr	r3, [pc, #100]	@ (800166c <MX_GPIO_Init+0xd4>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800160a:	4a18      	ldr	r2, [pc, #96]	@ (800166c <MX_GPIO_Init+0xd4>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	6313      	str	r3, [r2, #48]	@ 0x30
 8001612:	4b16      	ldr	r3, [pc, #88]	@ (800166c <MX_GPIO_Init+0xd4>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800161e:	2200      	movs	r2, #0
 8001620:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001624:	4812      	ldr	r0, [pc, #72]	@ (8001670 <MX_GPIO_Init+0xd8>)
 8001626:	f002 fbcd 	bl	8003dc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800162a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800162e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001630:	2301      	movs	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001634:	2300      	movs	r3, #0
 8001636:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001638:	2300      	movs	r3, #0
 800163a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	4619      	mov	r1, r3
 8001642:	480b      	ldr	r0, [pc, #44]	@ (8001670 <MX_GPIO_Init+0xd8>)
 8001644:	f002 fa3a 	bl	8003abc <HAL_GPIO_Init>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 8001648:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800164c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800164e:	2300      	movs	r3, #0
 8001650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 0314 	add.w	r3, r7, #20
 800165a:	4619      	mov	r1, r3
 800165c:	4805      	ldr	r0, [pc, #20]	@ (8001674 <MX_GPIO_Init+0xdc>)
 800165e:	f002 fa2d 	bl	8003abc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	@ 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40020800 	.word	0x40020800
 8001674:	40020400 	.word	0x40020400

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	bf00      	nop
 8001682:	e7fd      	b.n	8001680 <Error_Handler+0x8>

08001684 <mpu6050_ADC_ConfCpltCallback>:
int16_t gz_real;

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = (uint8_t *)PtrRx;
 800168c:	4a04      	ldr	r2, [pc, #16]	@ (80016a0 <mpu6050_ADC_ConfCpltCallback+0x1c>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	200006ec 	.word	0x200006ec

080016a4 <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 80016ac:	4a04      	ldr	r2, [pc, #16]	@ (80016c0 <mpu6050_Attach_MemWrite+0x1c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6013      	str	r3, [r2, #0]
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	200006f0 	.word	0x200006f0

080016c4 <mpu6050_Attach_MemReadDMA>:

void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 80016cc:	4a04      	ldr	r2, [pc, #16]	@ (80016e0 <mpu6050_Attach_MemReadDMA+0x1c>)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6013      	str	r3, [r2, #0]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
 80016de:	bf00      	nop
 80016e0:	200006f4 	.word	0x200006f4

080016e4 <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 80016e4:	b590      	push	{r4, r7, lr}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	460b      	mov	r3, r1
 80016ee:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <mpu6050_WriteData+0x24>)
 80016f2:	681c      	ldr	r4, [r3, #0]
 80016f4:	78fb      	ldrb	r3, [r7, #3]
 80016f6:	2201      	movs	r2, #1
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	20d0      	movs	r0, #208	@ 0xd0
 80016fc:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	bd90      	pop	{r4, r7, pc}
 8001706:	bf00      	nop
 8001708:	200006f0 	.word	0x200006f0

0800170c <mpu6050_Init>:
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
}


void mpu6050_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 8001712:	2300      	movs	r3, #0
 8001714:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 8001716:	1dfb      	adds	r3, r7, #7
 8001718:	216b      	movs	r1, #107	@ 0x6b
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ffe2 	bl	80016e4 <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    //data = 0x00;
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 8001720:	1dfb      	adds	r3, r7, #7
 8001722:	211c      	movs	r1, #28
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ffdd 	bl	80016e4 <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    //data = 0x00;
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 800172a:	1dfb      	adds	r3, r7, #7
 800172c:	211b      	movs	r1, #27
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ffd8 	bl	80016e4 <mpu6050_WriteData>

}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8001756:	4b05      	ldr	r3, [pc, #20]	@ (800176c <ssd1306_WriteCommand+0x20>)
 8001758:	681c      	ldr	r4, [r3, #0]
 800175a:	1df9      	adds	r1, r7, #7
 800175c:	2300      	movs	r3, #0
 800175e:	2201      	movs	r2, #1
 8001760:	2078      	movs	r0, #120	@ 0x78
 8001762:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bd90      	pop	{r4, r7, pc}
 800176c:	200006fc 	.word	0x200006fc

08001770 <ssd1306_WriteData>:
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <ssd1306_WriteData+0x24>)
 800177c:	681c      	ldr	r4, [r3, #0]
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	2340      	movs	r3, #64	@ 0x40
 8001784:	6879      	ldr	r1, [r7, #4]
 8001786:	2078      	movs	r0, #120	@ 0x78
 8001788:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 800178a:	bf00      	nop
 800178c:	370c      	adds	r7, #12
 800178e:	46bd      	mov	sp, r7
 8001790:	bd90      	pop	{r4, r7, pc}
 8001792:	bf00      	nop
 8001794:	200006fc 	.word	0x200006fc

08001798 <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 80017a0:	4a04      	ldr	r2, [pc, #16]	@ (80017b4 <ssd1306_Attach_MemWriteDMA+0x1c>)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6013      	str	r3, [r2, #0]
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000700 	.word	0x20000700

080017b8 <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 80017c0:	4a04      	ldr	r2, [pc, #16]	@ (80017d4 <ssd1306_Attach_MemWrite+0x1c>)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6013      	str	r3, [r2, #0]
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop
 80017d4:	200006fc 	.word	0x200006fc

080017d8 <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 80017e0:	4a04      	ldr	r2, [pc, #16]	@ (80017f4 <ssd1306_ADC_ConfCpltCallback+0x1c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6013      	str	r3, [r2, #0]
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr
 80017f2:	bf00      	nop
 80017f4:	200006f8 	.word	0x200006f8

080017f8 <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80017fc:	f7ff ff9e 	bl	800173c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001800:	2064      	movs	r0, #100	@ 0x64
 8001802:	f000 ff59 	bl	80026b8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001806:	2000      	movs	r0, #0
 8001808:	f000 f8b4 	bl	8001974 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800180c:	2020      	movs	r0, #32
 800180e:	f7ff ff9d 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001812:	2000      	movs	r0, #0
 8001814:	f7ff ff9a 	bl	800174c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001818:	20b0      	movs	r0, #176	@ 0xb0
 800181a:	f7ff ff97 	bl	800174c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800181e:	20c8      	movs	r0, #200	@ 0xc8
 8001820:	f7ff ff94 	bl	800174c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001824:	2000      	movs	r0, #0
 8001826:	f7ff ff91 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800182a:	2010      	movs	r0, #16
 800182c:	f7ff ff8e 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001830:	2040      	movs	r0, #64	@ 0x40
 8001832:	f7ff ff8b 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001836:	20ff      	movs	r0, #255	@ 0xff
 8001838:	f000 f888 	bl	800194c <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800183c:	20a1      	movs	r0, #161	@ 0xa1
 800183e:	f7ff ff85 	bl	800174c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001842:	20a6      	movs	r0, #166	@ 0xa6
 8001844:	f7ff ff82 	bl	800174c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001848:	20a8      	movs	r0, #168	@ 0xa8
 800184a:	f7ff ff7f 	bl	800174c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800184e:	203f      	movs	r0, #63	@ 0x3f
 8001850:	f7ff ff7c 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001854:	20a4      	movs	r0, #164	@ 0xa4
 8001856:	f7ff ff79 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800185a:	20d3      	movs	r0, #211	@ 0xd3
 800185c:	f7ff ff76 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001860:	2000      	movs	r0, #0
 8001862:	f7ff ff73 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001866:	20d5      	movs	r0, #213	@ 0xd5
 8001868:	f7ff ff70 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 800186c:	20f0      	movs	r0, #240	@ 0xf0
 800186e:	f7ff ff6d 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001872:	20d9      	movs	r0, #217	@ 0xd9
 8001874:	f7ff ff6a 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001878:	2022      	movs	r0, #34	@ 0x22
 800187a:	f7ff ff67 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 800187e:	20da      	movs	r0, #218	@ 0xda
 8001880:	f7ff ff64 	bl	800174c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001884:	2012      	movs	r0, #18
 8001886:	f7ff ff61 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800188a:	20db      	movs	r0, #219	@ 0xdb
 800188c:	f7ff ff5e 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001890:	2020      	movs	r0, #32
 8001892:	f7ff ff5b 	bl	800174c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001896:	208d      	movs	r0, #141	@ 0x8d
 8001898:	f7ff ff58 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 800189c:	2014      	movs	r0, #20
 800189e:	f7ff ff55 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80018a2:	2001      	movs	r0, #1
 80018a4:	f000 f866 	bl	8001974 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80018a8:	2000      	movs	r0, #0
 80018aa:	f000 f80f 	bl	80018cc <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80018ae:	f000 f825 	bl	80018fc <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <ssd1306_Init+0xd0>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80018b8:	4b03      	ldr	r3, [pc, #12]	@ (80018c8 <ssd1306_Init+0xd0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 80018be:	4b02      	ldr	r3, [pc, #8]	@ (80018c8 <ssd1306_Init+0xd0>)
 80018c0:	2201      	movs	r2, #1
 80018c2:	711a      	strb	r2, [r3, #4]
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	20000b04 	.word	0x20000b04

080018cc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <ssd1306_Fill+0x14>
 80018dc:	2300      	movs	r3, #0
 80018de:	e000      	b.n	80018e2 <ssd1306_Fill+0x16>
 80018e0:	23ff      	movs	r3, #255	@ 0xff
 80018e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80018e6:	4619      	mov	r1, r3
 80018e8:	4803      	ldr	r0, [pc, #12]	@ (80018f8 <ssd1306_Fill+0x2c>)
 80018ea:	f00c ff35 	bl	800e758 <memset>
}
 80018ee:	bf00      	nop
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000704 	.word	0x20000704

080018fc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001902:	2300      	movs	r3, #0
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	e016      	b.n	8001936 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	3b50      	subs	r3, #80	@ 0x50
 800190c:	b2db      	uxtb	r3, r3
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff1c 	bl	800174c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001914:	2000      	movs	r0, #0
 8001916:	f7ff ff19 	bl	800174c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800191a:	2010      	movs	r0, #16
 800191c:	f7ff ff16 	bl	800174c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	01db      	lsls	r3, r3, #7
 8001924:	4a08      	ldr	r2, [pc, #32]	@ (8001948 <ssd1306_UpdateScreen+0x4c>)
 8001926:	4413      	add	r3, r2
 8001928:	2180      	movs	r1, #128	@ 0x80
 800192a:	4618      	mov	r0, r3
 800192c:	f7ff ff20 	bl	8001770 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	3301      	adds	r3, #1
 8001934:	71fb      	strb	r3, [r7, #7]
 8001936:	79fb      	ldrb	r3, [r7, #7]
 8001938:	2b07      	cmp	r3, #7
 800193a:	d9e5      	bls.n	8001908 <ssd1306_UpdateScreen+0xc>
    }
}
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	20000704 	.word	0x20000704

0800194c <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001956:	2381      	movs	r3, #129	@ 0x81
 8001958:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800195a:	7bfb      	ldrb	r3, [r7, #15]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fef5 	bl	800174c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001962:	79fb      	ldrb	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fef1 	bl	800174c <ssd1306_WriteCommand>
}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001984:	23af      	movs	r3, #175	@ 0xaf
 8001986:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001988:	4b08      	ldr	r3, [pc, #32]	@ (80019ac <ssd1306_SetDisplayOn+0x38>)
 800198a:	2201      	movs	r2, #1
 800198c:	715a      	strb	r2, [r3, #5]
 800198e:	e004      	b.n	800199a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001990:	23ae      	movs	r3, #174	@ 0xae
 8001992:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001994:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <ssd1306_SetDisplayOn+0x38>)
 8001996:	2200      	movs	r2, #0
 8001998:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800199a:	7bfb      	ldrb	r3, [r7, #15]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fed5 	bl	800174c <ssd1306_WriteCommand>
}
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20000b04 	.word	0x20000b04

080019b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b10      	ldr	r3, [pc, #64]	@ (80019fc <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	4a0f      	ldr	r2, [pc, #60]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c6:	4b0d      	ldr	r3, [pc, #52]	@ (80019fc <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4b09      	ldr	r3, [pc, #36]	@ (80019fc <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019da:	4a08      	ldr	r2, [pc, #32]	@ (80019fc <HAL_MspInit+0x4c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e2:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a32      	ldr	r2, [pc, #200]	@ (8001ae8 <HAL_ADC_MspInit+0xe8>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d15e      	bne.n	8001ae0 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b31      	ldr	r3, [pc, #196]	@ (8001aec <HAL_ADC_MspInit+0xec>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a2a:	4a30      	ldr	r2, [pc, #192]	@ (8001aec <HAL_ADC_MspInit+0xec>)
 8001a2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a30:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a32:	4b2e      	ldr	r3, [pc, #184]	@ (8001aec <HAL_ADC_MspInit+0xec>)
 8001a34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b2a      	ldr	r3, [pc, #168]	@ (8001aec <HAL_ADC_MspInit+0xec>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a29      	ldr	r2, [pc, #164]	@ (8001aec <HAL_ADC_MspInit+0xec>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b27      	ldr	r3, [pc, #156]	@ (8001aec <HAL_ADC_MspInit+0xec>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001a5a:	23ff      	movs	r3, #255	@ 0xff
 8001a5c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a66:	f107 0314 	add.w	r3, r7, #20
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4820      	ldr	r0, [pc, #128]	@ (8001af0 <HAL_ADC_MspInit+0xf0>)
 8001a6e:	f002 f825 	bl	8003abc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001a72:	4b20      	ldr	r3, [pc, #128]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001a74:	4a20      	ldr	r2, [pc, #128]	@ (8001af8 <HAL_ADC_MspInit+0xf8>)
 8001a76:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001a78:	4b1e      	ldr	r3, [pc, #120]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a7e:	4b1d      	ldr	r3, [pc, #116]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a8a:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001a8c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a90:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a92:	4b18      	ldr	r3, [pc, #96]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001a94:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a98:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a9a:	4b16      	ldr	r3, [pc, #88]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001aa0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001aa2:	4b14      	ldr	r3, [pc, #80]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001aa8:	4b12      	ldr	r3, [pc, #72]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001aae:	4b11      	ldr	r3, [pc, #68]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001ab4:	480f      	ldr	r0, [pc, #60]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001ab6:	f001 fc55 	bl	8003364 <HAL_DMA_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001ac0:	f7ff fdda 	bl	8001678 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001ac8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001aca:	4a0a      	ldr	r2, [pc, #40]	@ (8001af4 <HAL_ADC_MspInit+0xf4>)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	2012      	movs	r0, #18
 8001ad6:	f001 fc0e 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001ada:	2012      	movs	r0, #18
 8001adc:	f001 fc27 	bl	800332e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001ae0:	bf00      	nop
 8001ae2:	3728      	adds	r7, #40	@ 0x28
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	40012000 	.word	0x40012000
 8001aec:	40023800 	.word	0x40023800
 8001af0:	40020000 	.word	0x40020000
 8001af4:	200001a4 	.word	0x200001a4
 8001af8:	40026410 	.word	0x40026410

08001afc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b08a      	sub	sp, #40	@ 0x28
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	605a      	str	r2, [r3, #4]
 8001b0e:	609a      	str	r2, [r3, #8]
 8001b10:	60da      	str	r2, [r3, #12]
 8001b12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a4f      	ldr	r2, [pc, #316]	@ (8001c58 <HAL_I2C_MspInit+0x15c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	f040 8098 	bne.w	8001c50 <HAL_I2C_MspInit+0x154>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	4b4d      	ldr	r3, [pc, #308]	@ (8001c5c <HAL_I2C_MspInit+0x160>)
 8001b26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b28:	4a4c      	ldr	r2, [pc, #304]	@ (8001c5c <HAL_I2C_MspInit+0x160>)
 8001b2a:	f043 0302 	orr.w	r3, r3, #2
 8001b2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b30:	4b4a      	ldr	r3, [pc, #296]	@ (8001c5c <HAL_I2C_MspInit+0x160>)
 8001b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b34:	f003 0302 	and.w	r3, r3, #2
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b3c:	23c0      	movs	r3, #192	@ 0xc0
 8001b3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b40:	2312      	movs	r3, #18
 8001b42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b48:	2303      	movs	r3, #3
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b4c:	2304      	movs	r3, #4
 8001b4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	4619      	mov	r1, r3
 8001b56:	4842      	ldr	r0, [pc, #264]	@ (8001c60 <HAL_I2C_MspInit+0x164>)
 8001b58:	f001 ffb0 	bl	8003abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]
 8001b60:	4b3e      	ldr	r3, [pc, #248]	@ (8001c5c <HAL_I2C_MspInit+0x160>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	4a3d      	ldr	r2, [pc, #244]	@ (8001c5c <HAL_I2C_MspInit+0x160>)
 8001b66:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b6a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c5c <HAL_I2C_MspInit+0x160>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001b78:	4b3a      	ldr	r3, [pc, #232]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001b7a:	4a3b      	ldr	r2, [pc, #236]	@ (8001c68 <HAL_I2C_MspInit+0x16c>)
 8001b7c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001b7e:	4b39      	ldr	r3, [pc, #228]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001b80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001b84:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b86:	4b37      	ldr	r3, [pc, #220]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8c:	4b35      	ldr	r3, [pc, #212]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b92:	4b34      	ldr	r3, [pc, #208]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001b94:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001b98:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b9a:	4b32      	ldr	r3, [pc, #200]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ba0:	4b30      	ldr	r3, [pc, #192]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001bac:	4b2d      	ldr	r3, [pc, #180]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001bb8:	482a      	ldr	r0, [pc, #168]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001bba:	f001 fbd3 	bl	8003364 <HAL_DMA_Init>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001bc4:	f7ff fd58 	bl	8001678 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a26      	ldr	r2, [pc, #152]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001bcc:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bce:	4a25      	ldr	r2, [pc, #148]	@ (8001c64 <HAL_I2C_MspInit+0x168>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001bd4:	4b25      	ldr	r3, [pc, #148]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001bd6:	4a26      	ldr	r2, [pc, #152]	@ (8001c70 <HAL_I2C_MspInit+0x174>)
 8001bd8:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001bda:	4b24      	ldr	r3, [pc, #144]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001bdc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001be0:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001be2:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001be4:	2240      	movs	r2, #64	@ 0x40
 8001be6:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be8:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001bf0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001bf4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bfc:	4b1b      	ldr	r3, [pc, #108]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c08:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c0e:	4b17      	ldr	r3, [pc, #92]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001c14:	4815      	ldr	r0, [pc, #84]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001c16:	f001 fba5 	bl	8003364 <HAL_DMA_Init>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001c20:	f7ff fd2a 	bl	8001678 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	4a11      	ldr	r2, [pc, #68]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001c28:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c2a:	4a10      	ldr	r2, [pc, #64]	@ (8001c6c <HAL_I2C_MspInit+0x170>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2100      	movs	r1, #0
 8001c34:	201f      	movs	r0, #31
 8001c36:	f001 fb5e 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001c3a:	201f      	movs	r0, #31
 8001c3c:	f001 fb77 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001c40:	2200      	movs	r2, #0
 8001c42:	2100      	movs	r1, #0
 8001c44:	2020      	movs	r0, #32
 8001c46:	f001 fb56 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001c4a:	2020      	movs	r0, #32
 8001c4c:	f001 fb6f 	bl	800332e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001c50:	bf00      	nop
 8001c52:	3728      	adds	r7, #40	@ 0x28
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40005400 	.word	0x40005400
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020400 	.word	0x40020400
 8001c64:	20000258 	.word	0x20000258
 8001c68:	40026010 	.word	0x40026010
 8001c6c:	200002b8 	.word	0x200002b8
 8001c70:	400260a0 	.word	0x400260a0

08001c74 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a44      	ldr	r2, [pc, #272]	@ (8001d94 <HAL_TIM_Base_MspInit+0x120>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d12e      	bne.n	8001ce4 <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	4b43      	ldr	r3, [pc, #268]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	4a42      	ldr	r2, [pc, #264]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001c90:	f043 0301 	orr.w	r3, r3, #1
 8001c94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c96:	4b40      	ldr	r3, [pc, #256]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	2018      	movs	r0, #24
 8001ca8:	f001 fb25 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001cac:	2018      	movs	r0, #24
 8001cae:	f001 fb3e 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2100      	movs	r1, #0
 8001cb6:	2019      	movs	r0, #25
 8001cb8:	f001 fb1d 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001cbc:	2019      	movs	r0, #25
 8001cbe:	f001 fb36 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	201a      	movs	r0, #26
 8001cc8:	f001 fb15 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001ccc:	201a      	movs	r0, #26
 8001cce:	f001 fb2e 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	201b      	movs	r0, #27
 8001cd8:	f001 fb0d 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001cdc:	201b      	movs	r0, #27
 8001cde:	f001 fb26 	bl	800332e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ce2:	e052      	b.n	8001d8a <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM2)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001cec:	d116      	bne.n	8001d1c <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	613b      	str	r3, [r7, #16]
 8001cf2:	4b29      	ldr	r3, [pc, #164]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf6:	4a28      	ldr	r2, [pc, #160]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cfe:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	613b      	str	r3, [r7, #16]
 8001d08:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	201c      	movs	r0, #28
 8001d10:	f001 faf1 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d14:	201c      	movs	r0, #28
 8001d16:	f001 fb0a 	bl	800332e <HAL_NVIC_EnableIRQ>
}
 8001d1a:	e036      	b.n	8001d8a <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM3)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1e      	ldr	r2, [pc, #120]	@ (8001d9c <HAL_TIM_Base_MspInit+0x128>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d116      	bne.n	8001d54 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
 8001d2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	60fb      	str	r3, [r7, #12]
 8001d40:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d42:	2200      	movs	r2, #0
 8001d44:	2100      	movs	r1, #0
 8001d46:	201d      	movs	r0, #29
 8001d48:	f001 fad5 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d4c:	201d      	movs	r0, #29
 8001d4e:	f001 faee 	bl	800332e <HAL_NVIC_EnableIRQ>
}
 8001d52:	e01a      	b.n	8001d8a <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM4)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a11      	ldr	r2, [pc, #68]	@ (8001da0 <HAL_TIM_Base_MspInit+0x12c>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d115      	bne.n	8001d8a <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60bb      	str	r3, [r7, #8]
 8001d62:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d66:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001d68:	f043 0304 	orr.w	r3, r3, #4
 8001d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d98 <HAL_TIM_Base_MspInit+0x124>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d72:	f003 0304 	and.w	r3, r3, #4
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	201e      	movs	r0, #30
 8001d80:	f001 fab9 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001d84:	201e      	movs	r0, #30
 8001d86:	f001 fad2 	bl	800332e <HAL_NVIC_EnableIRQ>
}
 8001d8a:	bf00      	nop
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40000400 	.word	0x40000400
 8001da0:	40000800 	.word	0x40000800

08001da4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
 8001dba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a12      	ldr	r2, [pc, #72]	@ (8001e0c <HAL_TIM_MspPostInit+0x68>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d11d      	bne.n	8001e02 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_TIM_MspPostInit+0x6c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_TIM_MspPostInit+0x6c>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_TIM_MspPostInit+0x6c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001de2:	2333      	movs	r3, #51	@ 0x33
 8001de4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de6:	2302      	movs	r3, #2
 8001de8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df6:	f107 030c 	add.w	r3, r7, #12
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4805      	ldr	r0, [pc, #20]	@ (8001e14 <HAL_TIM_MspPostInit+0x70>)
 8001dfe:	f001 fe5d 	bl	8003abc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e02:	bf00      	nop
 8001e04:	3720      	adds	r7, #32
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	40000400 	.word	0x40000400
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020400 	.word	0x40020400

08001e18 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b08a      	sub	sp, #40	@ 0x28
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e20:	f107 0314 	add.w	r3, r7, #20
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
 8001e28:	605a      	str	r2, [r3, #4]
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	60da      	str	r2, [r3, #12]
 8001e2e:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a1d      	ldr	r2, [pc, #116]	@ (8001eac <HAL_USART_MspInit+0x94>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d134      	bne.n	8001ea4 <HAL_USART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	613b      	str	r3, [r7, #16]
 8001e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8001eb0 <HAL_USART_MspInit+0x98>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	4a1b      	ldr	r2, [pc, #108]	@ (8001eb0 <HAL_USART_MspInit+0x98>)
 8001e44:	f043 0310 	orr.w	r3, r3, #16
 8001e48:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e4a:	4b19      	ldr	r3, [pc, #100]	@ (8001eb0 <HAL_USART_MspInit+0x98>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	613b      	str	r3, [r7, #16]
 8001e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	60fb      	str	r3, [r7, #12]
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_USART_MspInit+0x98>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	4a14      	ldr	r2, [pc, #80]	@ (8001eb0 <HAL_USART_MspInit+0x98>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e66:	4b12      	ldr	r3, [pc, #72]	@ (8001eb0 <HAL_USART_MspInit+0x98>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001e72:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001e84:	2307      	movs	r3, #7
 8001e86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4809      	ldr	r0, [pc, #36]	@ (8001eb4 <HAL_USART_MspInit+0x9c>)
 8001e90:	f001 fe14 	bl	8003abc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	2025      	movs	r0, #37	@ 0x25
 8001e9a:	f001 fa2c 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001e9e:	2025      	movs	r0, #37	@ 0x25
 8001ea0:	f001 fa45 	bl	800332e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001ea4:	bf00      	nop
 8001ea6:	3728      	adds	r7, #40	@ 0x28
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40011000 	.word	0x40011000
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000

08001eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <NMI_Handler+0x4>

08001ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <HardFault_Handler+0x4>

08001ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <MemManage_Handler+0x4>

08001ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <BusFault_Handler+0x4>

08001ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <UsageFault_Handler+0x4>

08001ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ee4:	bf00      	nop
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ef2:	bf00      	nop
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr

08001efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f0a:	b580      	push	{r7, lr}
 8001f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f0e:	f000 fbb3 	bl	8002678 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
	...

08001f18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001f1c:	4802      	ldr	r0, [pc, #8]	@ (8001f28 <DMA1_Stream0_IRQHandler+0x10>)
 8001f1e:	f001 fb49 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	20000258 	.word	0x20000258

08001f2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001f30:	4802      	ldr	r0, [pc, #8]	@ (8001f3c <DMA1_Stream6_IRQHandler+0x10>)
 8001f32:	f001 fb3f 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	200002b8 	.word	0x200002b8

08001f40 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f44:	4802      	ldr	r0, [pc, #8]	@ (8001f50 <ADC_IRQHandler+0x10>)
 8001f46:	f000 fc1e 	bl	8002786 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	2000015c 	.word	0x2000015c

08001f54 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f58:	4802      	ldr	r0, [pc, #8]	@ (8001f64 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001f5a:	f006 fe65 	bl	8008c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000318 	.word	0x20000318

08001f68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f6c:	4802      	ldr	r0, [pc, #8]	@ (8001f78 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001f6e:	f006 fe5b 	bl	8008c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000318 	.word	0x20000318

08001f7c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f80:	4802      	ldr	r0, [pc, #8]	@ (8001f8c <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001f82:	f006 fe51 	bl	8008c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000318 	.word	0x20000318

08001f90 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001f94:	4802      	ldr	r0, [pc, #8]	@ (8001fa0 <TIM1_CC_IRQHandler+0x10>)
 8001f96:	f006 fe47 	bl	8008c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000318 	.word	0x20000318

08001fa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001fa8:	4802      	ldr	r0, [pc, #8]	@ (8001fb4 <TIM2_IRQHandler+0x10>)
 8001faa:	f006 fe3d 	bl	8008c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000360 	.word	0x20000360

08001fb8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001fbc:	4802      	ldr	r0, [pc, #8]	@ (8001fc8 <TIM3_IRQHandler+0x10>)
 8001fbe:	f006 fe33 	bl	8008c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	200003a8 	.word	0x200003a8

08001fcc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001fd0:	4802      	ldr	r0, [pc, #8]	@ (8001fdc <TIM4_IRQHandler+0x10>)
 8001fd2:	f006 fe29 	bl	8008c28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200003f0 	.word	0x200003f0

08001fe0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001fe4:	4802      	ldr	r0, [pc, #8]	@ (8001ff0 <I2C1_EV_IRQHandler+0x10>)
 8001fe6:	f002 fc63 	bl	80048b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000204 	.word	0x20000204

08001ff4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001ff8:	4802      	ldr	r0, [pc, #8]	@ (8002004 <I2C1_ER_IRQHandler+0x10>)
 8001ffa:	f002 fdca 	bl	8004b92 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000204 	.word	0x20000204

08002008 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 800200c:	4802      	ldr	r0, [pc, #8]	@ (8002018 <USART1_IRQHandler+0x10>)
 800200e:	f007 fd15 	bl	8009a3c <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000438 	.word	0x20000438

0800201c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <DMA2_Stream0_IRQHandler+0x10>)
 8002022:	f001 fac7 	bl	80035b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200001a4 	.word	0x200001a4

08002030 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <OTG_FS_IRQHandler+0x10>)
 8002036:	f004 fed5 	bl	8006de4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200013f4 	.word	0x200013f4

08002044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002048:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <SystemInit+0x20>)
 800204a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204e:	4a05      	ldr	r2, [pc, #20]	@ (8002064 <SystemInit+0x20>)
 8002050:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002054:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	460b      	mov	r3, r1
 8002072:	70fb      	strb	r3, [r7, #3]
 8002074:	4613      	mov	r3, r2
 8002076:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 8002078:	78bb      	ldrb	r3, [r7, #2]
 800207a:	3301      	adds	r3, #1
 800207c:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	795a      	ldrb	r2, [r3, #5]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	795b      	ldrb	r3, [r3, #5]
 8002094:	1c59      	adds	r1, r3, #1
 8002096:	b2c8      	uxtb	r0, r1
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	7148      	strb	r0, [r1, #5]
 800209c:	4413      	add	r3, r2
 800209e:	2255      	movs	r2, #85	@ 0x55
 80020a0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	795a      	ldrb	r2, [r3, #5]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	799b      	ldrb	r3, [r3, #6]
 80020aa:	4013      	ands	r3, r2
 80020ac:	b2da      	uxtb	r2, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	795b      	ldrb	r3, [r3, #5]
 80020ba:	1c59      	adds	r1, r3, #1
 80020bc:	b2c8      	uxtb	r0, r1
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	7148      	strb	r0, [r1, #5]
 80020c2:	4413      	add	r3, r2
 80020c4:	224e      	movs	r2, #78	@ 0x4e
 80020c6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	795a      	ldrb	r2, [r3, #5]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	799b      	ldrb	r3, [r3, #6]
 80020d0:	4013      	ands	r3, r2
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	795b      	ldrb	r3, [r3, #5]
 80020e0:	1c59      	adds	r1, r3, #1
 80020e2:	b2c8      	uxtb	r0, r1
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	7148      	strb	r0, [r1, #5]
 80020e8:	4413      	add	r3, r2
 80020ea:	2245      	movs	r2, #69	@ 0x45
 80020ec:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	795a      	ldrb	r2, [r3, #5]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	799b      	ldrb	r3, [r3, #6]
 80020f6:	4013      	ands	r3, r2
 80020f8:	b2da      	uxtb	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	795b      	ldrb	r3, [r3, #5]
 8002106:	1c59      	adds	r1, r3, #1
 8002108:	b2c8      	uxtb	r0, r1
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	7148      	strb	r0, [r1, #5]
 800210e:	4413      	add	r3, r2
 8002110:	2252      	movs	r2, #82	@ 0x52
 8002112:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	795a      	ldrb	r2, [r3, #5]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	799b      	ldrb	r3, [r3, #6]
 800211c:	4013      	ands	r3, r2
 800211e:	b2da      	uxtb	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	795b      	ldrb	r3, [r3, #5]
 800212c:	1c59      	adds	r1, r3, #1
 800212e:	b2c8      	uxtb	r0, r1
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	7148      	strb	r0, [r1, #5]
 8002134:	4413      	add	r3, r2
 8002136:	78ba      	ldrb	r2, [r7, #2]
 8002138:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	795a      	ldrb	r2, [r3, #5]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	799b      	ldrb	r3, [r3, #6]
 8002142:	4013      	ands	r3, r2
 8002144:	b2da      	uxtb	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681a      	ldr	r2, [r3, #0]
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	795b      	ldrb	r3, [r3, #5]
 8002152:	1c59      	adds	r1, r3, #1
 8002154:	b2c8      	uxtb	r0, r1
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	7148      	strb	r0, [r1, #5]
 800215a:	4413      	add	r3, r2
 800215c:	223a      	movs	r2, #58	@ 0x3a
 800215e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	795a      	ldrb	r2, [r3, #5]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	799b      	ldrb	r3, [r3, #6]
 8002168:	4013      	ands	r3, r2
 800216a:	b2da      	uxtb	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	795b      	ldrb	r3, [r3, #5]
 8002178:	1c59      	adds	r1, r3, #1
 800217a:	b2c8      	uxtb	r0, r1
 800217c:	6879      	ldr	r1, [r7, #4]
 800217e:	7148      	strb	r0, [r1, #5]
 8002180:	4413      	add	r3, r2
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	795a      	ldrb	r2, [r3, #5]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	799b      	ldrb	r3, [r3, #6]
 800218e:	4013      	ands	r3, r2
 8002190:	b2da      	uxtb	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2207      	movs	r2, #7
 800219a:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	7a5a      	ldrb	r2, [r3, #9]
 80021a0:	78b9      	ldrb	r1, [r7, #2]
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	404b      	eors	r3, r1
 80021a6:	b2db      	uxtb	r3, r3
 80021a8:	4053      	eors	r3, r2
 80021aa:	b2db      	uxtb	r3, r3
 80021ac:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7a5b      	ldrb	r3, [r3, #9]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	460b      	mov	r3, r1
 80021d0:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	79db      	ldrb	r3, [r3, #7]
 80021d6:	3301      	adds	r3, #1
 80021d8:	b2da      	uxtb	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	795b      	ldrb	r3, [r3, #5]
 80021e6:	1c59      	adds	r1, r3, #1
 80021e8:	b2c8      	uxtb	r0, r1
 80021ea:	6879      	ldr	r1, [r7, #4]
 80021ec:	7148      	strb	r0, [r1, #5]
 80021ee:	4413      	add	r3, r2
 80021f0:	78fa      	ldrb	r2, [r7, #3]
 80021f2:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	795a      	ldrb	r2, [r3, #5]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	799b      	ldrb	r3, [r3, #6]
 80021fc:	4013      	ands	r3, r2
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7a5a      	ldrb	r2, [r3, #9]
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	4053      	eors	r3, r2
 800220c:	b2da      	uxtb	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7a5b      	ldrb	r3, [r3, #9]
}
 8002216:	4618      	mov	r0, r3
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 8002222:	b490      	push	{r4, r7}
 8002224:	b084      	sub	sp, #16
 8002226:	af00      	add	r7, sp, #0
 8002228:	6078      	str	r0, [r7, #4]
 800222a:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 800222c:	2300      	movs	r3, #0
 800222e:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8002230:	e02c      	b.n	800228c <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	79db      	ldrb	r3, [r3, #7]
 8002236:	3301      	adds	r3, #1
 8002238:	b2da      	uxtb	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 800223e:	7bfb      	ldrb	r3, [r7, #15]
 8002240:	b2db      	uxtb	r3, r3
 8002242:	461a      	mov	r2, r3
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	441a      	add	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6819      	ldr	r1, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	795b      	ldrb	r3, [r3, #5]
 8002250:	1c58      	adds	r0, r3, #1
 8002252:	b2c4      	uxtb	r4, r0
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	7144      	strb	r4, [r0, #5]
 8002258:	440b      	add	r3, r1
 800225a:	7812      	ldrb	r2, [r2, #0]
 800225c:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	795a      	ldrb	r2, [r3, #5]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	799b      	ldrb	r3, [r3, #6]
 8002266:	4013      	ands	r3, r2
 8002268:	b2da      	uxtb	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	b2d2      	uxtb	r2, r2
 8002276:	73fa      	strb	r2, [r7, #15]
 8002278:	461a      	mov	r2, r3
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	4413      	add	r3, r2
 800227e:	781a      	ldrb	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	7a5b      	ldrb	r3, [r3, #9]
 8002284:	4053      	eors	r3, r2
 8002286:	b2da      	uxtb	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	b2db      	uxtb	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	4413      	add	r3, r2
 8002296:	781b      	ldrb	r3, [r3, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1ca      	bne.n	8002232 <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	7a5b      	ldrb	r3, [r3, #9]
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3710      	adds	r7, #16
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc90      	pop	{r4, r7}
 80022a8:	4770      	bx	lr

080022aa <unerPrtcl_GetByteFromRx>:

uint8_t unerPrtcl_GetByteFromRx(_sTx *dataRx, uint8_t start, uint8_t end) {
 80022aa:	b480      	push	{r7}
 80022ac:	b085      	sub	sp, #20
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
 80022b2:	460b      	mov	r3, r1
 80022b4:	70fb      	strb	r3, [r7, #3]
 80022b6:	4613      	mov	r3, r2
 80022b8:	70bb      	strb	r3, [r7, #2]
	uint8_t getByte;
	dataRx->indexData += start;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7a1a      	ldrb	r2, [r3, #8]
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	4413      	add	r3, r2
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	721a      	strb	r2, [r3, #8]
	dataRx->indexData &= dataRx->mask;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7a1a      	ldrb	r2, [r3, #8]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	799b      	ldrb	r3, [r3, #6]
 80022d0:	4013      	ands	r3, r2
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	721a      	strb	r2, [r3, #8]
	getByte = dataRx->buff[dataRx->indexData];
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	7a12      	ldrb	r2, [r2, #8]
 80022e0:	4413      	add	r3, r2
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	73fb      	strb	r3, [r7, #15]
	dataRx->indexData += end;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	7a1a      	ldrb	r2, [r3, #8]
 80022ea:	78bb      	ldrb	r3, [r7, #2]
 80022ec:	4413      	add	r3, r2
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	721a      	strb	r2, [r3, #8]
	dataRx->indexData &= dataRx->mask;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	7a1a      	ldrb	r2, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	799b      	ldrb	r3, [r3, #6]
 80022fc:	4013      	ands	r3, r2
 80022fe:	b2da      	uxtb	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	721a      	strb	r2, [r3, #8]
	return getByte;
 8002304:	7bfb      	ldrb	r3, [r7, #15]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <unerPrtcl_DecodeHeader>:


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	795b      	ldrb	r3, [r3, #5]
 8002324:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8002326:	e0e4      	b.n	80024f2 <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 8002328:	4b78      	ldr	r3, [pc, #480]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	2b07      	cmp	r3, #7
 800232e:	f200 80c9 	bhi.w	80024c4 <unerPrtcl_DecodeHeader+0x1b0>
 8002332:	a201      	add	r2, pc, #4	@ (adr r2, 8002338 <unerPrtcl_DecodeHeader+0x24>)
 8002334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002338:	08002359 	.word	0x08002359
 800233c:	08002373 	.word	0x08002373
 8002340:	080023b1 	.word	0x080023b1
 8002344:	080023dd 	.word	0x080023dd
 8002348:	08002409 	.word	0x08002409
 800234c:	0800241f 	.word	0x0800241f
 8002350:	080024c5 	.word	0x080024c5
 8002354:	08002481 	.word	0x08002481
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	7912      	ldrb	r2, [r2, #4]
 8002360:	4413      	add	r3, r2
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b55      	cmp	r3, #85	@ 0x55
 8002366:	f040 80b1 	bne.w	80024cc <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 800236a:	4b68      	ldr	r3, [pc, #416]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 800236c:	2201      	movs	r2, #1
 800236e:	701a      	strb	r2, [r3, #0]
                }
            break;
 8002370:	e0ac      	b.n	80024cc <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	687a      	ldr	r2, [r7, #4]
 8002378:	7912      	ldrb	r2, [r2, #4]
 800237a:	4413      	add	r3, r2
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	2b4e      	cmp	r3, #78	@ 0x4e
 8002380:	d103      	bne.n	800238a <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8002382:	4b62      	ldr	r3, [pc, #392]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 8002384:	2202      	movs	r2, #2
 8002386:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8002388:	e0a2      	b.n	80024d0 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	7912      	ldrb	r2, [r2, #4]
 8002392:	4413      	add	r3, r2
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	2b55      	cmp	r3, #85	@ 0x55
 8002398:	f000 809a 	beq.w	80024d0 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 800239c:	4b5b      	ldr	r3, [pc, #364]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	791b      	ldrb	r3, [r3, #4]
 80023a6:	3b01      	subs	r3, #1
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	711a      	strb	r2, [r3, #4]
            break;
 80023ae:	e08f      	b.n	80024d0 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	7912      	ldrb	r2, [r2, #4]
 80023b8:	4413      	add	r3, r2
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b45      	cmp	r3, #69	@ 0x45
 80023be:	d103      	bne.n	80023c8 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 80023c0:	4b52      	ldr	r3, [pc, #328]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 80023c2:	2203      	movs	r2, #3
 80023c4:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80023c6:	e086      	b.n	80024d6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80023c8:	4b50      	ldr	r3, [pc, #320]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	791b      	ldrb	r3, [r3, #4]
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b2da      	uxtb	r2, r3
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	711a      	strb	r2, [r3, #4]
            break;
 80023da:	e07c      	b.n	80024d6 <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	7912      	ldrb	r2, [r2, #4]
 80023e4:	4413      	add	r3, r2
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b52      	cmp	r3, #82	@ 0x52
 80023ea:	d103      	bne.n	80023f4 <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 80023ec:	4b47      	ldr	r3, [pc, #284]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 80023ee:	2204      	movs	r2, #4
 80023f0:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80023f2:	e070      	b.n	80024d6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80023f4:	4b45      	ldr	r3, [pc, #276]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	791b      	ldrb	r3, [r3, #4]
 80023fe:	3b01      	subs	r3, #1
 8002400:	b2da      	uxtb	r2, r3
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	711a      	strb	r2, [r3, #4]
            break;
 8002406:	e066      	b.n	80024d6 <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	7912      	ldrb	r2, [r2, #4]
 8002410:	4413      	add	r3, r2
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8002416:	4b3d      	ldr	r3, [pc, #244]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 8002418:	2205      	movs	r2, #5
 800241a:	701a      	strb	r2, [r3, #0]
            break;
 800241c:	e05b      	b.n	80024d6 <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	687a      	ldr	r2, [r7, #4]
 8002424:	7912      	ldrb	r2, [r2, #4]
 8002426:	4413      	add	r3, r2
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b3a      	cmp	r3, #58	@ 0x3a
 800242c:	d11e      	bne.n	800246c <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 800242e:	4b37      	ldr	r3, [pc, #220]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 8002430:	2207      	movs	r2, #7
 8002432:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	791b      	ldrb	r3, [r3, #4]
 8002438:	3301      	adds	r3, #1
 800243a:	b2da      	uxtb	r2, r3
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7a1a      	ldrb	r2, [r3, #8]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	799b      	ldrb	r3, [r3, #6]
 8002448:	4013      	ands	r3, r2
 800244a:	b2da      	uxtb	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	7a5a      	ldrb	r2, [r3, #9]
 800245a:	7bfb      	ldrb	r3, [r7, #15]
 800245c:	4053      	eors	r3, r2
 800245e:	b2db      	uxtb	r3, r3
 8002460:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002464:	b2da      	uxtb	r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800246a:	e034      	b.n	80024d6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 800246c:	4b27      	ldr	r3, [pc, #156]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 800246e:	2200      	movs	r2, #0
 8002470:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	791b      	ldrb	r3, [r3, #4]
 8002476:	3b01      	subs	r3, #1
 8002478:	b2da      	uxtb	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	711a      	strb	r2, [r3, #4]
            break;
 800247e:	e02a      	b.n	80024d6 <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8002480:	7bfb      	ldrb	r3, [r7, #15]
 8002482:	3b01      	subs	r3, #1
 8002484:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8002486:	7bfb      	ldrb	r3, [r7, #15]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00c      	beq.n	80024a6 <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	7a5a      	ldrb	r2, [r3, #9]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	6879      	ldr	r1, [r7, #4]
 8002496:	7909      	ldrb	r1, [r1, #4]
 8002498:	440b      	add	r3, r1
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4053      	eors	r3, r2
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 80024a4:	e016      	b.n	80024d4 <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 80024a6:	4b19      	ldr	r3, [pc, #100]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	7912      	ldrb	r2, [r2, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	781a      	ldrb	r2, [r3, #0]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7a5b      	ldrb	r3, [r3, #9]
 80024bc:	429a      	cmp	r2, r3
 80024be:	d109      	bne.n	80024d4 <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 80024c0:	2301      	movs	r3, #1
 80024c2:	e01d      	b.n	8002500 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <unerPrtcl_DecodeHeader+0x1f8>)
 80024c6:	2200      	movs	r2, #0
 80024c8:	701a      	strb	r2, [r3, #0]
            break;
 80024ca:	e004      	b.n	80024d6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80024cc:	bf00      	nop
 80024ce:	e002      	b.n	80024d6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80024d0:	bf00      	nop
 80024d2:	e000      	b.n	80024d6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80024d4:	bf00      	nop
        }
        dataRx->indexR++;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	791b      	ldrb	r3, [r3, #4]
 80024da:	3301      	adds	r3, #1
 80024dc:	b2da      	uxtb	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	791a      	ldrb	r2, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	799b      	ldrb	r3, [r3, #6]
 80024ea:	4013      	ands	r3, r2
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	791b      	ldrb	r3, [r3, #4]
 80024f6:	7bba      	ldrb	r2, [r7, #14]
 80024f8:	429a      	cmp	r2, r3
 80024fa:	f47f af15 	bne.w	8002328 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	20000b0a 	.word	0x20000b0a

08002510 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	60b9      	str	r1, [r7, #8]
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	2200      	movs	r2, #0
 800252e:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2200      	movs	r2, #0
 8002534:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	22ff      	movs	r2, #255	@ 0xff
 8002540:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	683a      	ldr	r2, [r7, #0]
 800254c:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2200      	movs	r2, #0
 8002552:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	2200      	movs	r2, #0
 8002558:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2200      	movs	r2, #0
 800255e:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2200      	movs	r2, #0
 8002564:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	22ff      	movs	r2, #255	@ 0xff
 800256a:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2200      	movs	r2, #0
 8002570:	725a      	strb	r2, [r3, #9]

}
 8002572:	bf00      	nop
 8002574:	3714      	adds	r7, #20
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
	...

08002580 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002580:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002584:	f7ff fd5e 	bl	8002044 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002588:	480c      	ldr	r0, [pc, #48]	@ (80025bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800258a:	490d      	ldr	r1, [pc, #52]	@ (80025c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800258c:	4a0d      	ldr	r2, [pc, #52]	@ (80025c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800258e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002590:	e002      	b.n	8002598 <LoopCopyDataInit>

08002592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002596:	3304      	adds	r3, #4

08002598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800259a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800259c:	d3f9      	bcc.n	8002592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800259e:	4a0a      	ldr	r2, [pc, #40]	@ (80025c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025a0:	4c0a      	ldr	r4, [pc, #40]	@ (80025cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80025a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025a4:	e001      	b.n	80025aa <LoopFillZerobss>

080025a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025a8:	3204      	adds	r2, #4

080025aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025ac:	d3fb      	bcc.n	80025a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025ae:	f00c f8db 	bl	800e768 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025b2:	f7fe fbef 	bl	8000d94 <main>
  bx  lr    
 80025b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80025b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80025bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025c0:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 80025c4:	0800e850 	.word	0x0800e850
  ldr r2, =_sbss
 80025c8:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 80025cc:	20001af8 	.word	0x20001af8

080025d0 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025d0:	e7fe      	b.n	80025d0 <DMA1_Stream1_IRQHandler>
	...

080025d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025d8:	4b0e      	ldr	r3, [pc, #56]	@ (8002614 <HAL_Init+0x40>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002614 <HAL_Init+0x40>)
 80025de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002614 <HAL_Init+0x40>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <HAL_Init+0x40>)
 80025ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025f0:	4b08      	ldr	r3, [pc, #32]	@ (8002614 <HAL_Init+0x40>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a07      	ldr	r2, [pc, #28]	@ (8002614 <HAL_Init+0x40>)
 80025f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025fc:	2003      	movs	r0, #3
 80025fe:	f000 fe6f 	bl	80032e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002602:	200f      	movs	r0, #15
 8002604:	f000 f808 	bl	8002618 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002608:	f7ff f9d2 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800260c:	2300      	movs	r3, #0
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40023c00 	.word	0x40023c00

08002618 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002620:	4b12      	ldr	r3, [pc, #72]	@ (800266c <HAL_InitTick+0x54>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4b12      	ldr	r3, [pc, #72]	@ (8002670 <HAL_InitTick+0x58>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800262e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002632:	fbb2 f3f3 	udiv	r3, r2, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f000 fe87 	bl	800334a <HAL_SYSTICK_Config>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e00e      	b.n	8002664 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b0f      	cmp	r3, #15
 800264a:	d80a      	bhi.n	8002662 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800264c:	2200      	movs	r2, #0
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	f04f 30ff 	mov.w	r0, #4294967295
 8002654:	f000 fe4f 	bl	80032f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002658:	4a06      	ldr	r2, [pc, #24]	@ (8002674 <HAL_InitTick+0x5c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
 8002660:	e000      	b.n	8002664 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
}
 8002664:	4618      	mov	r0, r3
 8002666:	3708      	adds	r7, #8
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	2000002c 	.word	0x2000002c
 8002670:	20000034 	.word	0x20000034
 8002674:	20000030 	.word	0x20000030

08002678 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800267c:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_IncTick+0x20>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	461a      	mov	r2, r3
 8002682:	4b06      	ldr	r3, [pc, #24]	@ (800269c <HAL_IncTick+0x24>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4413      	add	r3, r2
 8002688:	4a04      	ldr	r2, [pc, #16]	@ (800269c <HAL_IncTick+0x24>)
 800268a:	6013      	str	r3, [r2, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000034 	.word	0x20000034
 800269c:	20000b0c 	.word	0x20000b0c

080026a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return uwTick;
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <HAL_GetTick+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000b0c 	.word	0x20000b0c

080026b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b084      	sub	sp, #16
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026c0:	f7ff ffee 	bl	80026a0 <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026d0:	d005      	beq.n	80026de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026d2:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <HAL_Delay+0x44>)
 80026d4:	781b      	ldrb	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	4413      	add	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026de:	bf00      	nop
 80026e0:	f7ff ffde 	bl	80026a0 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	68fa      	ldr	r2, [r7, #12]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d8f7      	bhi.n	80026e0 <HAL_Delay+0x28>
  {
  }
}
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000034 	.word	0x20000034

08002700 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d101      	bne.n	8002716 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e033      	b.n	800277e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271a:	2b00      	cmp	r3, #0
 800271c:	d109      	bne.n	8002732 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff f96e 	bl	8001a00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	f003 0310 	and.w	r3, r3, #16
 800273a:	2b00      	cmp	r3, #0
 800273c:	d118      	bne.n	8002770 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002742:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002746:	f023 0302 	bic.w	r3, r3, #2
 800274a:	f043 0202 	orr.w	r2, r3, #2
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 fb6c 	bl	8002e30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f023 0303 	bic.w	r3, r3, #3
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	641a      	str	r2, [r3, #64]	@ 0x40
 800276e:	e001      	b.n	8002774 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2200      	movs	r2, #0
 8002778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800277c:	7bfb      	ldrb	r3, [r7, #15]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3710      	adds	r7, #16
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002786:	b580      	push	{r7, lr}
 8002788:	b086      	sub	sp, #24
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800278e:	2300      	movs	r3, #0
 8002790:	617b      	str	r3, [r7, #20]
 8002792:	2300      	movs	r3, #0
 8002794:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	f003 0302 	and.w	r3, r3, #2
 80027ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d049      	beq.n	8002850 <HAL_ADC_IRQHandler+0xca>
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d046      	beq.n	8002850 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c6:	f003 0310 	and.w	r3, r3, #16
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d12b      	bne.n	8002840 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d127      	bne.n	8002840 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d006      	beq.n	800280c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002808:	2b00      	cmp	r3, #0
 800280a:	d119      	bne.n	8002840 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f022 0220 	bic.w	r2, r2, #32
 800281a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d105      	bne.n	8002840 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002838:	f043 0201 	orr.w	r2, r3, #1
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7fd fe91 	bl	8000568 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0212 	mvn.w	r2, #18
 800284e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d057      	beq.n	8002916 <HAL_ADC_IRQHandler+0x190>
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d054      	beq.n	8002916 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b00      	cmp	r3, #0
 8002876:	d105      	bne.n	8002884 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d139      	bne.n	8002906 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002898:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800289c:	2b00      	cmp	r3, #0
 800289e:	d006      	beq.n	80028ae <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d12b      	bne.n	8002906 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d124      	bne.n	8002906 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d11d      	bne.n	8002906 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d119      	bne.n	8002906 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	685a      	ldr	r2, [r3, #4]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028e0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	f043 0201 	orr.w	r2, r3, #1
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 fc10 	bl	800312c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f06f 020c 	mvn.w	r2, #12
 8002914:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0301 	and.w	r3, r3, #1
 800291c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002924:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d017      	beq.n	800295c <HAL_ADC_IRQHandler+0x1d6>
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d014      	beq.n	800295c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b01      	cmp	r3, #1
 800293e:	d10d      	bne.n	800295c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002944:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f929 	bl	8002ba4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f06f 0201 	mvn.w	r2, #1
 800295a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f003 0320 	and.w	r3, r3, #32
 8002962:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800296a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d015      	beq.n	800299e <HAL_ADC_IRQHandler+0x218>
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d012      	beq.n	800299e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800297c:	f043 0202 	orr.w	r2, r3, #2
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f06f 0220 	mvn.w	r2, #32
 800298c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f000 f912 	bl	8002bb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f06f 0220 	mvn.w	r2, #32
 800299c:	601a      	str	r2, [r3, #0]
  }
}
 800299e:	bf00      	nop
 80029a0:	3718      	adds	r7, #24
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
	...

080029a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b088      	sub	sp, #32
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029b8:	2300      	movs	r3, #0
 80029ba:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d101      	bne.n	80029ca <HAL_ADC_Start_DMA+0x22>
 80029c6:	2302      	movs	r3, #2
 80029c8:	e0d0      	b.n	8002b6c <HAL_ADC_Start_DMA+0x1c4>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2201      	movs	r2, #1
 80029ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d018      	beq.n	8002a12 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f042 0201 	orr.w	r2, r2, #1
 80029ee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029f0:	4b60      	ldr	r3, [pc, #384]	@ (8002b74 <HAL_ADC_Start_DMA+0x1cc>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a60      	ldr	r2, [pc, #384]	@ (8002b78 <HAL_ADC_Start_DMA+0x1d0>)
 80029f6:	fba2 2303 	umull	r2, r3, r2, r3
 80029fa:	0c9a      	lsrs	r2, r3, #18
 80029fc:	4613      	mov	r3, r2
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	4413      	add	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002a04:	e002      	b.n	8002a0c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1f9      	bne.n	8002a06 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a20:	d107      	bne.n	8002a32 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a30:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	f040 8088 	bne.w	8002b52 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002a4a:	f023 0301 	bic.w	r3, r3, #1
 8002a4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d007      	beq.n	8002a74 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a80:	d106      	bne.n	8002a90 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	f023 0206 	bic.w	r2, r3, #6
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8002a8e:	e002      	b.n	8002a96 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a9e:	4b37      	ldr	r3, [pc, #220]	@ (8002b7c <HAL_ADC_Start_DMA+0x1d4>)
 8002aa0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa6:	4a36      	ldr	r2, [pc, #216]	@ (8002b80 <HAL_ADC_Start_DMA+0x1d8>)
 8002aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aae:	4a35      	ldr	r2, [pc, #212]	@ (8002b84 <HAL_ADC_Start_DMA+0x1dc>)
 8002ab0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ab6:	4a34      	ldr	r2, [pc, #208]	@ (8002b88 <HAL_ADC_Start_DMA+0x1e0>)
 8002ab8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002ac2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002ad2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ae2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	334c      	adds	r3, #76	@ 0x4c
 8002aee:	4619      	mov	r1, r3
 8002af0:	68ba      	ldr	r2, [r7, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	f000 fce4 	bl	80034c0 <HAL_DMA_Start_IT>
 8002af8:	4603      	mov	r3, r0
 8002afa:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 031f 	and.w	r3, r3, #31
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10f      	bne.n	8002b28 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d129      	bne.n	8002b6a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689a      	ldr	r2, [r3, #8]
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b24:	609a      	str	r2, [r3, #8]
 8002b26:	e020      	b.n	8002b6a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a17      	ldr	r2, [pc, #92]	@ (8002b8c <HAL_ADC_Start_DMA+0x1e4>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d11b      	bne.n	8002b6a <HAL_ADC_Start_DMA+0x1c2>
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d114      	bne.n	8002b6a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	e00b      	b.n	8002b6a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	f043 0210 	orr.w	r2, r3, #16
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002b6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3720      	adds	r7, #32
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	2000002c 	.word	0x2000002c
 8002b78:	431bde83 	.word	0x431bde83
 8002b7c:	40012300 	.word	0x40012300
 8002b80:	08003029 	.word	0x08003029
 8002b84:	080030e3 	.word	0x080030e3
 8002b88:	080030ff 	.word	0x080030ff
 8002b8c:	40012000 	.word	0x40012000

08002b90 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002bc0:	bf00      	nop
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d101      	bne.n	8002be8 <HAL_ADC_ConfigChannel+0x1c>
 8002be4:	2302      	movs	r3, #2
 8002be6:	e113      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x244>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b09      	cmp	r3, #9
 8002bf6:	d925      	bls.n	8002c44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	68d9      	ldr	r1, [r3, #12]
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	b29b      	uxth	r3, r3
 8002c04:	461a      	mov	r2, r3
 8002c06:	4613      	mov	r3, r2
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	4413      	add	r3, r2
 8002c0c:	3b1e      	subs	r3, #30
 8002c0e:	2207      	movs	r2, #7
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43da      	mvns	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	400a      	ands	r2, r1
 8002c1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68d9      	ldr	r1, [r3, #12]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	4618      	mov	r0, r3
 8002c30:	4603      	mov	r3, r0
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	4403      	add	r3, r0
 8002c36:	3b1e      	subs	r3, #30
 8002c38:	409a      	lsls	r2, r3
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	60da      	str	r2, [r3, #12]
 8002c42:	e022      	b.n	8002c8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6919      	ldr	r1, [r3, #16]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	461a      	mov	r2, r3
 8002c52:	4613      	mov	r3, r2
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4413      	add	r3, r2
 8002c58:	2207      	movs	r2, #7
 8002c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c5e:	43da      	mvns	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	400a      	ands	r2, r1
 8002c66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6919      	ldr	r1, [r3, #16]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	689a      	ldr	r2, [r3, #8]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	4618      	mov	r0, r3
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	4403      	add	r3, r0
 8002c80:	409a      	lsls	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	2b06      	cmp	r3, #6
 8002c90:	d824      	bhi.n	8002cdc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685a      	ldr	r2, [r3, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3b05      	subs	r3, #5
 8002ca4:	221f      	movs	r2, #31
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	400a      	ands	r2, r1
 8002cb2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685a      	ldr	r2, [r3, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	3b05      	subs	r3, #5
 8002cce:	fa00 f203 	lsl.w	r2, r0, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8002cda:	e04c      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b0c      	cmp	r3, #12
 8002ce2:	d824      	bhi.n	8002d2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685a      	ldr	r2, [r3, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3b23      	subs	r3, #35	@ 0x23
 8002cf6:	221f      	movs	r2, #31
 8002cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfc:	43da      	mvns	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	400a      	ands	r2, r1
 8002d04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	b29b      	uxth	r3, r3
 8002d12:	4618      	mov	r0, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3b23      	subs	r3, #35	@ 0x23
 8002d20:	fa00 f203 	lsl.w	r2, r0, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d2c:	e023      	b.n	8002d76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	3b41      	subs	r3, #65	@ 0x41
 8002d40:	221f      	movs	r2, #31
 8002d42:	fa02 f303 	lsl.w	r3, r2, r3
 8002d46:	43da      	mvns	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	400a      	ands	r2, r1
 8002d4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685a      	ldr	r2, [r3, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	3b41      	subs	r3, #65	@ 0x41
 8002d6a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	430a      	orrs	r2, r1
 8002d74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d76:	4b29      	ldr	r3, [pc, #164]	@ (8002e1c <HAL_ADC_ConfigChannel+0x250>)
 8002d78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a28      	ldr	r2, [pc, #160]	@ (8002e20 <HAL_ADC_ConfigChannel+0x254>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d10f      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x1d8>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2b12      	cmp	r3, #18
 8002d8a:	d10b      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1d      	ldr	r2, [pc, #116]	@ (8002e20 <HAL_ADC_ConfigChannel+0x254>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d12b      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x23a>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1c      	ldr	r2, [pc, #112]	@ (8002e24 <HAL_ADC_ConfigChannel+0x258>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d003      	beq.n	8002dc0 <HAL_ADC_ConfigChannel+0x1f4>
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b11      	cmp	r3, #17
 8002dbe:	d122      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a11      	ldr	r2, [pc, #68]	@ (8002e24 <HAL_ADC_ConfigChannel+0x258>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d111      	bne.n	8002e06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002de2:	4b11      	ldr	r3, [pc, #68]	@ (8002e28 <HAL_ADC_ConfigChannel+0x25c>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a11      	ldr	r2, [pc, #68]	@ (8002e2c <HAL_ADC_ConfigChannel+0x260>)
 8002de8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dec:	0c9a      	lsrs	r2, r3, #18
 8002dee:	4613      	mov	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4413      	add	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002df8:	e002      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f9      	bne.n	8002dfa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40012300 	.word	0x40012300
 8002e20:	40012000 	.word	0x40012000
 8002e24:	10000012 	.word	0x10000012
 8002e28:	2000002c 	.word	0x2000002c
 8002e2c:	431bde83 	.word	0x431bde83

08002e30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b085      	sub	sp, #20
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e38:	4b79      	ldr	r3, [pc, #484]	@ (8003020 <ADC_Init+0x1f0>)
 8002e3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6859      	ldr	r1, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	021a      	lsls	r2, r3, #8
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	6859      	ldr	r1, [r3, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	430a      	orrs	r2, r1
 8002e9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689a      	ldr	r2, [r3, #8]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002eaa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	6899      	ldr	r1, [r3, #8]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	68da      	ldr	r2, [r3, #12]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec2:	4a58      	ldr	r2, [pc, #352]	@ (8003024 <ADC_Init+0x1f4>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d022      	beq.n	8002f0e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ed6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	6899      	ldr	r1, [r3, #8]
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	430a      	orrs	r2, r1
 8002ee8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ef8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6899      	ldr	r1, [r3, #8]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	e00f      	b.n	8002f2e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689a      	ldr	r2, [r3, #8]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f2c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0202 	bic.w	r2, r2, #2
 8002f3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6899      	ldr	r1, [r3, #8]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	7e1b      	ldrb	r3, [r3, #24]
 8002f48:	005a      	lsls	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01b      	beq.n	8002f94 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685a      	ldr	r2, [r3, #4]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f6a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f7a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	3b01      	subs	r3, #1
 8002f88:	035a      	lsls	r2, r3, #13
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	e007      	b.n	8002fa4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685a      	ldr	r2, [r3, #4]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fa2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002fb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	69db      	ldr	r3, [r3, #28]
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	051a      	lsls	r2, r3, #20
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fd8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6899      	ldr	r1, [r3, #8]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002fe6:	025a      	lsls	r2, r3, #9
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ffe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6899      	ldr	r1, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	029a      	lsls	r2, r3, #10
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	430a      	orrs	r2, r1
 8003012:	609a      	str	r2, [r3, #8]
}
 8003014:	bf00      	nop
 8003016:	3714      	adds	r7, #20
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr
 8003020:	40012300 	.word	0x40012300
 8003024:	0f000001 	.word	0x0f000001

08003028 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003034:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800303e:	2b00      	cmp	r3, #0
 8003040:	d13c      	bne.n	80030bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003046:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d12b      	bne.n	80030b4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003060:	2b00      	cmp	r3, #0
 8003062:	d127      	bne.n	80030b4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800306e:	2b00      	cmp	r3, #0
 8003070:	d006      	beq.n	8003080 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800307c:	2b00      	cmp	r3, #0
 800307e:	d119      	bne.n	80030b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 0220 	bic.w	r2, r2, #32
 800308e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d105      	bne.n	80030b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f043 0201 	orr.w	r2, r3, #1
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7fd fa57 	bl	8000568 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030ba:	e00e      	b.n	80030da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d003      	beq.n	80030d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80030c8:	68f8      	ldr	r0, [r7, #12]
 80030ca:	f7ff fd75 	bl	8002bb8 <HAL_ADC_ErrorCallback>
}
 80030ce:	e004      	b.n	80030da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4798      	blx	r3
}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80030e2:	b580      	push	{r7, lr}
 80030e4:	b084      	sub	sp, #16
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80030ee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80030f0:	68f8      	ldr	r0, [r7, #12]
 80030f2:	f7ff fd4d 	bl	8002b90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030f6:	bf00      	nop
 80030f8:	3710      	adds	r7, #16
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}

080030fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80030fe:	b580      	push	{r7, lr}
 8003100:	b084      	sub	sp, #16
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2240      	movs	r2, #64	@ 0x40
 8003110:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003116:	f043 0204 	orr.w	r2, r3, #4
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800311e:	68f8      	ldr	r0, [r7, #12]
 8003120:	f7ff fd4a 	bl	8002bb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr

08003140 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003150:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <__NVIC_SetPriorityGrouping+0x44>)
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800315c:	4013      	ands	r3, r2
 800315e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003168:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800316c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003170:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003172:	4a04      	ldr	r2, [pc, #16]	@ (8003184 <__NVIC_SetPriorityGrouping+0x44>)
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	60d3      	str	r3, [r2, #12]
}
 8003178:	bf00      	nop
 800317a:	3714      	adds	r7, #20
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr
 8003184:	e000ed00 	.word	0xe000ed00

08003188 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003188:	b480      	push	{r7}
 800318a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800318c:	4b04      	ldr	r3, [pc, #16]	@ (80031a0 <__NVIC_GetPriorityGrouping+0x18>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	0a1b      	lsrs	r3, r3, #8
 8003192:	f003 0307 	and.w	r3, r3, #7
}
 8003196:	4618      	mov	r0, r3
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	db0b      	blt.n	80031ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	f003 021f 	and.w	r2, r3, #31
 80031bc:	4907      	ldr	r1, [pc, #28]	@ (80031dc <__NVIC_EnableIRQ+0x38>)
 80031be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2001      	movs	r0, #1
 80031c6:	fa00 f202 	lsl.w	r2, r0, r2
 80031ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80031ce:	bf00      	nop
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000e100 	.word	0xe000e100

080031e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	6039      	str	r1, [r7, #0]
 80031ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	db0a      	blt.n	800320a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	490c      	ldr	r1, [pc, #48]	@ (800322c <__NVIC_SetPriority+0x4c>)
 80031fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fe:	0112      	lsls	r2, r2, #4
 8003200:	b2d2      	uxtb	r2, r2
 8003202:	440b      	add	r3, r1
 8003204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003208:	e00a      	b.n	8003220 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	b2da      	uxtb	r2, r3
 800320e:	4908      	ldr	r1, [pc, #32]	@ (8003230 <__NVIC_SetPriority+0x50>)
 8003210:	79fb      	ldrb	r3, [r7, #7]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	3b04      	subs	r3, #4
 8003218:	0112      	lsls	r2, r2, #4
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	440b      	add	r3, r1
 800321e:	761a      	strb	r2, [r3, #24]
}
 8003220:	bf00      	nop
 8003222:	370c      	adds	r7, #12
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr
 800322c:	e000e100 	.word	0xe000e100
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003234:	b480      	push	{r7}
 8003236:	b089      	sub	sp, #36	@ 0x24
 8003238:	af00      	add	r7, sp, #0
 800323a:	60f8      	str	r0, [r7, #12]
 800323c:	60b9      	str	r1, [r7, #8]
 800323e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	f003 0307 	and.w	r3, r3, #7
 8003246:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	f1c3 0307 	rsb	r3, r3, #7
 800324e:	2b04      	cmp	r3, #4
 8003250:	bf28      	it	cs
 8003252:	2304      	movcs	r3, #4
 8003254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003256:	69fb      	ldr	r3, [r7, #28]
 8003258:	3304      	adds	r3, #4
 800325a:	2b06      	cmp	r3, #6
 800325c:	d902      	bls.n	8003264 <NVIC_EncodePriority+0x30>
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	3b03      	subs	r3, #3
 8003262:	e000      	b.n	8003266 <NVIC_EncodePriority+0x32>
 8003264:	2300      	movs	r3, #0
 8003266:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003268:	f04f 32ff 	mov.w	r2, #4294967295
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43da      	mvns	r2, r3
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	401a      	ands	r2, r3
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800327c:	f04f 31ff 	mov.w	r1, #4294967295
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	fa01 f303 	lsl.w	r3, r1, r3
 8003286:	43d9      	mvns	r1, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800328c:	4313      	orrs	r3, r2
         );
}
 800328e:	4618      	mov	r0, r3
 8003290:	3724      	adds	r7, #36	@ 0x24
 8003292:	46bd      	mov	sp, r7
 8003294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003298:	4770      	bx	lr
	...

0800329c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032ac:	d301      	bcc.n	80032b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ae:	2301      	movs	r3, #1
 80032b0:	e00f      	b.n	80032d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032b2:	4a0a      	ldr	r2, [pc, #40]	@ (80032dc <SysTick_Config+0x40>)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ba:	210f      	movs	r1, #15
 80032bc:	f04f 30ff 	mov.w	r0, #4294967295
 80032c0:	f7ff ff8e 	bl	80031e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032c4:	4b05      	ldr	r3, [pc, #20]	@ (80032dc <SysTick_Config+0x40>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032ca:	4b04      	ldr	r3, [pc, #16]	@ (80032dc <SysTick_Config+0x40>)
 80032cc:	2207      	movs	r2, #7
 80032ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032d0:	2300      	movs	r3, #0
}
 80032d2:	4618      	mov	r0, r3
 80032d4:	3708      	adds	r7, #8
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	e000e010 	.word	0xe000e010

080032e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff29 	bl	8003140 <__NVIC_SetPriorityGrouping>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b086      	sub	sp, #24
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	4603      	mov	r3, r0
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
 8003302:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003308:	f7ff ff3e 	bl	8003188 <__NVIC_GetPriorityGrouping>
 800330c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800330e:	687a      	ldr	r2, [r7, #4]
 8003310:	68b9      	ldr	r1, [r7, #8]
 8003312:	6978      	ldr	r0, [r7, #20]
 8003314:	f7ff ff8e 	bl	8003234 <NVIC_EncodePriority>
 8003318:	4602      	mov	r2, r0
 800331a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800331e:	4611      	mov	r1, r2
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff ff5d 	bl	80031e0 <__NVIC_SetPriority>
}
 8003326:	bf00      	nop
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	4603      	mov	r3, r0
 8003336:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333c:	4618      	mov	r0, r3
 800333e:	f7ff ff31 	bl	80031a4 <__NVIC_EnableIRQ>
}
 8003342:	bf00      	nop
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b082      	sub	sp, #8
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003352:	6878      	ldr	r0, [r7, #4]
 8003354:	f7ff ffa2 	bl	800329c <SysTick_Config>
 8003358:	4603      	mov	r3, r0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b086      	sub	sp, #24
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003370:	f7ff f996 	bl	80026a0 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e099      	b.n	80034b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2202      	movs	r2, #2
 8003384:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033a0:	e00f      	b.n	80033c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033a2:	f7ff f97d 	bl	80026a0 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b05      	cmp	r3, #5
 80033ae:	d908      	bls.n	80033c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2220      	movs	r2, #32
 80033b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2203      	movs	r2, #3
 80033ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e078      	b.n	80034b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0301 	and.w	r3, r3, #1
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1e8      	bne.n	80033a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	4b38      	ldr	r3, [pc, #224]	@ (80034bc <HAL_DMA_Init+0x158>)
 80033dc:	4013      	ands	r3, r2
 80033de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	691b      	ldr	r3, [r3, #16]
 80033f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003406:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800340e:	697a      	ldr	r2, [r7, #20]
 8003410:	4313      	orrs	r3, r2
 8003412:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003418:	2b04      	cmp	r3, #4
 800341a:	d107      	bne.n	800342c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003424:	4313      	orrs	r3, r2
 8003426:	697a      	ldr	r2, [r7, #20]
 8003428:	4313      	orrs	r3, r2
 800342a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	697a      	ldr	r2, [r7, #20]
 8003432:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800343c:	697b      	ldr	r3, [r7, #20]
 800343e:	f023 0307 	bic.w	r3, r3, #7
 8003442:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	2b04      	cmp	r3, #4
 8003454:	d117      	bne.n	8003486 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800345a:	697a      	ldr	r2, [r7, #20]
 800345c:	4313      	orrs	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	2b00      	cmp	r3, #0
 8003466:	d00e      	beq.n	8003486 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 faab 	bl	80039c4 <DMA_CheckFifoParam>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2240      	movs	r2, #64	@ 0x40
 8003478:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003482:	2301      	movs	r3, #1
 8003484:	e016      	b.n	80034b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	697a      	ldr	r2, [r7, #20]
 800348c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 fa62 	bl	8003958 <DMA_CalcBaseAndBitshift>
 8003494:	4603      	mov	r3, r0
 8003496:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800349c:	223f      	movs	r2, #63	@ 0x3f
 800349e:	409a      	lsls	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3718      	adds	r7, #24
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	f010803f 	.word	0xf010803f

080034c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	60f8      	str	r0, [r7, #12]
 80034c8:	60b9      	str	r1, [r7, #8]
 80034ca:	607a      	str	r2, [r7, #4]
 80034cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034ce:	2300      	movs	r3, #0
 80034d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d101      	bne.n	80034e6 <HAL_DMA_Start_IT+0x26>
 80034e2:	2302      	movs	r3, #2
 80034e4:	e040      	b.n	8003568 <HAL_DMA_Start_IT+0xa8>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d12f      	bne.n	800355a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2202      	movs	r2, #2
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2200      	movs	r2, #0
 8003506:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	68f8      	ldr	r0, [r7, #12]
 8003510:	f000 f9f4 	bl	80038fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003518:	223f      	movs	r2, #63	@ 0x3f
 800351a:	409a      	lsls	r2, r3
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f042 0216 	orr.w	r2, r2, #22
 800352e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003534:	2b00      	cmp	r3, #0
 8003536:	d007      	beq.n	8003548 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0208 	orr.w	r2, r2, #8
 8003546:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f042 0201 	orr.w	r2, r2, #1
 8003556:	601a      	str	r2, [r3, #0]
 8003558:	e005      	b.n	8003566 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003562:	2302      	movs	r3, #2
 8003564:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003566:	7dfb      	ldrb	r3, [r7, #23]
}
 8003568:	4618      	mov	r0, r3
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d004      	beq.n	800358e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2280      	movs	r2, #128	@ 0x80
 8003588:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e00c      	b.n	80035a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2205      	movs	r2, #5
 8003592:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0201 	bic.w	r2, r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035c0:	4b8e      	ldr	r3, [pc, #568]	@ (80037fc <HAL_DMA_IRQHandler+0x248>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a8e      	ldr	r2, [pc, #568]	@ (8003800 <HAL_DMA_IRQHandler+0x24c>)
 80035c6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ca:	0a9b      	lsrs	r3, r3, #10
 80035cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035de:	2208      	movs	r2, #8
 80035e0:	409a      	lsls	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	4013      	ands	r3, r2
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d01a      	beq.n	8003620 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d013      	beq.n	8003620 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f022 0204 	bic.w	r2, r2, #4
 8003606:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800360c:	2208      	movs	r2, #8
 800360e:	409a      	lsls	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003618:	f043 0201 	orr.w	r2, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003624:	2201      	movs	r2, #1
 8003626:	409a      	lsls	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	4013      	ands	r3, r2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d012      	beq.n	8003656 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00b      	beq.n	8003656 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003642:	2201      	movs	r2, #1
 8003644:	409a      	lsls	r2, r3
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800364e:	f043 0202 	orr.w	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365a:	2204      	movs	r2, #4
 800365c:	409a      	lsls	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	4013      	ands	r3, r2
 8003662:	2b00      	cmp	r3, #0
 8003664:	d012      	beq.n	800368c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d00b      	beq.n	800368c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003678:	2204      	movs	r2, #4
 800367a:	409a      	lsls	r2, r3
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003684:	f043 0204 	orr.w	r2, r3, #4
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003690:	2210      	movs	r2, #16
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d043      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d03c      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ae:	2210      	movs	r2, #16
 80036b0:	409a      	lsls	r2, r3
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d018      	beq.n	80036f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d108      	bne.n	80036e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d024      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	4798      	blx	r3
 80036e2:	e01f      	b.n	8003724 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d01b      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	4798      	blx	r3
 80036f4:	e016      	b.n	8003724 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d107      	bne.n	8003714 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0208 	bic.w	r2, r2, #8
 8003712:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003720:	6878      	ldr	r0, [r7, #4]
 8003722:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003728:	2220      	movs	r2, #32
 800372a:	409a      	lsls	r2, r3
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	4013      	ands	r3, r2
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 808f 	beq.w	8003854 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0310 	and.w	r3, r3, #16
 8003740:	2b00      	cmp	r3, #0
 8003742:	f000 8087 	beq.w	8003854 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800374a:	2220      	movs	r2, #32
 800374c:	409a      	lsls	r2, r3
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b05      	cmp	r3, #5
 800375c:	d136      	bne.n	80037cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0216 	bic.w	r2, r2, #22
 800376c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	695a      	ldr	r2, [r3, #20]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800377c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <HAL_DMA_IRQHandler+0x1da>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800378a:	2b00      	cmp	r3, #0
 800378c:	d007      	beq.n	800379e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0208 	bic.w	r2, r2, #8
 800379c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a2:	223f      	movs	r2, #63	@ 0x3f
 80037a4:	409a      	lsls	r2, r3
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d07e      	beq.n	80038c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
        }
        return;
 80037ca:	e079      	b.n	80038c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d01d      	beq.n	8003816 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d10d      	bne.n	8003804 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d031      	beq.n	8003854 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
 80037f8:	e02c      	b.n	8003854 <HAL_DMA_IRQHandler+0x2a0>
 80037fa:	bf00      	nop
 80037fc:	2000002c 	.word	0x2000002c
 8003800:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d023      	beq.n	8003854 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	4798      	blx	r3
 8003814:	e01e      	b.n	8003854 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10f      	bne.n	8003844 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0210 	bic.w	r2, r2, #16
 8003832:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003848:	2b00      	cmp	r3, #0
 800384a:	d003      	beq.n	8003854 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003858:	2b00      	cmp	r3, #0
 800385a:	d032      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d022      	beq.n	80038ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2205      	movs	r2, #5
 800386c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f022 0201 	bic.w	r2, r2, #1
 800387e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	3301      	adds	r3, #1
 8003884:	60bb      	str	r3, [r7, #8]
 8003886:	697a      	ldr	r2, [r7, #20]
 8003888:	429a      	cmp	r2, r3
 800388a:	d307      	bcc.n	800389c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f003 0301 	and.w	r3, r3, #1
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f2      	bne.n	8003880 <HAL_DMA_IRQHandler+0x2cc>
 800389a:	e000      	b.n	800389e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800389c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d005      	beq.n	80038c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	4798      	blx	r3
 80038be:	e000      	b.n	80038c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80038c0:	bf00      	nop
    }
  }
}
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038d6:	b2db      	uxtb	r3, r3
}
 80038d8:	4618      	mov	r0, r3
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr

080038e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80038f0:	4618      	mov	r0, r3
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
 8003908:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681a      	ldr	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003918:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	683a      	ldr	r2, [r7, #0]
 8003920:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	2b40      	cmp	r3, #64	@ 0x40
 8003928:	d108      	bne.n	800393c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800393a:	e007      	b.n	800394c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68ba      	ldr	r2, [r7, #8]
 8003942:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	60da      	str	r2, [r3, #12]
}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	b2db      	uxtb	r3, r3
 8003966:	3b10      	subs	r3, #16
 8003968:	4a14      	ldr	r2, [pc, #80]	@ (80039bc <DMA_CalcBaseAndBitshift+0x64>)
 800396a:	fba2 2303 	umull	r2, r3, r2, r3
 800396e:	091b      	lsrs	r3, r3, #4
 8003970:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003972:	4a13      	ldr	r2, [pc, #76]	@ (80039c0 <DMA_CalcBaseAndBitshift+0x68>)
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	4413      	add	r3, r2
 8003978:	781b      	ldrb	r3, [r3, #0]
 800397a:	461a      	mov	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2b03      	cmp	r3, #3
 8003984:	d909      	bls.n	800399a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800398e:	f023 0303 	bic.w	r3, r3, #3
 8003992:	1d1a      	adds	r2, r3, #4
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	659a      	str	r2, [r3, #88]	@ 0x58
 8003998:	e007      	b.n	80039aa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039a2:	f023 0303 	bic.w	r3, r3, #3
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3714      	adds	r7, #20
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	aaaaaaab 	.word	0xaaaaaaab
 80039c0:	0800e838 	.word	0x0800e838

080039c4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039cc:	2300      	movs	r3, #0
 80039ce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039d4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d11f      	bne.n	8003a1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	d856      	bhi.n	8003a92 <DMA_CheckFifoParam+0xce>
 80039e4:	a201      	add	r2, pc, #4	@ (adr r2, 80039ec <DMA_CheckFifoParam+0x28>)
 80039e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ea:	bf00      	nop
 80039ec:	080039fd 	.word	0x080039fd
 80039f0:	08003a0f 	.word	0x08003a0f
 80039f4:	080039fd 	.word	0x080039fd
 80039f8:	08003a93 	.word	0x08003a93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d046      	beq.n	8003a96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a0c:	e043      	b.n	8003a96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a16:	d140      	bne.n	8003a9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1c:	e03d      	b.n	8003a9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a26:	d121      	bne.n	8003a6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b03      	cmp	r3, #3
 8003a2c:	d837      	bhi.n	8003a9e <DMA_CheckFifoParam+0xda>
 8003a2e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a34 <DMA_CheckFifoParam+0x70>)
 8003a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a34:	08003a45 	.word	0x08003a45
 8003a38:	08003a4b 	.word	0x08003a4b
 8003a3c:	08003a45 	.word	0x08003a45
 8003a40:	08003a5d 	.word	0x08003a5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	73fb      	strb	r3, [r7, #15]
      break;
 8003a48:	e030      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d025      	beq.n	8003aa2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a5a:	e022      	b.n	8003aa2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a64:	d11f      	bne.n	8003aa6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a6a:	e01c      	b.n	8003aa6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b02      	cmp	r3, #2
 8003a70:	d903      	bls.n	8003a7a <DMA_CheckFifoParam+0xb6>
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d003      	beq.n	8003a80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a78:	e018      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	73fb      	strb	r3, [r7, #15]
      break;
 8003a7e:	e015      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00e      	beq.n	8003aaa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a90:	e00b      	b.n	8003aaa <DMA_CheckFifoParam+0xe6>
      break;
 8003a92:	bf00      	nop
 8003a94:	e00a      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;
 8003a96:	bf00      	nop
 8003a98:	e008      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e006      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e004      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;   
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
    }
  } 
  
  return status; 
 8003aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3714      	adds	r7, #20
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop

08003abc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b089      	sub	sp, #36	@ 0x24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	e159      	b.n	8003d8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ad8:	2201      	movs	r2, #1
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4013      	ands	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003aec:	693a      	ldr	r2, [r7, #16]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	f040 8148 	bne.w	8003d86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d005      	beq.n	8003b0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d130      	bne.n	8003b70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	2203      	movs	r2, #3
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4013      	ands	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b44:	2201      	movs	r2, #1
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	43db      	mvns	r3, r3
 8003b4e:	69ba      	ldr	r2, [r7, #24]
 8003b50:	4013      	ands	r3, r2
 8003b52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	091b      	lsrs	r3, r3, #4
 8003b5a:	f003 0201 	and.w	r2, r3, #1
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	4313      	orrs	r3, r2
 8003b68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f003 0303 	and.w	r3, r3, #3
 8003b78:	2b03      	cmp	r3, #3
 8003b7a:	d017      	beq.n	8003bac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	005b      	lsls	r3, r3, #1
 8003b86:	2203      	movs	r2, #3
 8003b88:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	69ba      	ldr	r2, [r7, #24]
 8003b90:	4013      	ands	r3, r2
 8003b92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	69ba      	ldr	r2, [r7, #24]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f003 0303 	and.w	r3, r3, #3
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	d123      	bne.n	8003c00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	08da      	lsrs	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	3208      	adds	r2, #8
 8003bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	f003 0307 	and.w	r3, r3, #7
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	220f      	movs	r2, #15
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	691a      	ldr	r2, [r3, #16]
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	f003 0307 	and.w	r3, r3, #7
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	08da      	lsrs	r2, r3, #3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	3208      	adds	r2, #8
 8003bfa:	69b9      	ldr	r1, [r7, #24]
 8003bfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	2203      	movs	r2, #3
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	43db      	mvns	r3, r3
 8003c12:	69ba      	ldr	r2, [r7, #24]
 8003c14:	4013      	ands	r3, r2
 8003c16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	f003 0203 	and.w	r2, r3, #3
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 80a2 	beq.w	8003d86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c42:	2300      	movs	r3, #0
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	4b57      	ldr	r3, [pc, #348]	@ (8003da4 <HAL_GPIO_Init+0x2e8>)
 8003c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c4a:	4a56      	ldr	r2, [pc, #344]	@ (8003da4 <HAL_GPIO_Init+0x2e8>)
 8003c4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c50:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c52:	4b54      	ldr	r3, [pc, #336]	@ (8003da4 <HAL_GPIO_Init+0x2e8>)
 8003c54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c5e:	4a52      	ldr	r2, [pc, #328]	@ (8003da8 <HAL_GPIO_Init+0x2ec>)
 8003c60:	69fb      	ldr	r3, [r7, #28]
 8003c62:	089b      	lsrs	r3, r3, #2
 8003c64:	3302      	adds	r3, #2
 8003c66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	f003 0303 	and.w	r3, r3, #3
 8003c72:	009b      	lsls	r3, r3, #2
 8003c74:	220f      	movs	r2, #15
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43db      	mvns	r3, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4013      	ands	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a49      	ldr	r2, [pc, #292]	@ (8003dac <HAL_GPIO_Init+0x2f0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d019      	beq.n	8003cbe <HAL_GPIO_Init+0x202>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a48      	ldr	r2, [pc, #288]	@ (8003db0 <HAL_GPIO_Init+0x2f4>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0x1fe>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a47      	ldr	r2, [pc, #284]	@ (8003db4 <HAL_GPIO_Init+0x2f8>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00d      	beq.n	8003cb6 <HAL_GPIO_Init+0x1fa>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a46      	ldr	r2, [pc, #280]	@ (8003db8 <HAL_GPIO_Init+0x2fc>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <HAL_GPIO_Init+0x1f6>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a45      	ldr	r2, [pc, #276]	@ (8003dbc <HAL_GPIO_Init+0x300>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_GPIO_Init+0x1f2>
 8003caa:	2304      	movs	r3, #4
 8003cac:	e008      	b.n	8003cc0 <HAL_GPIO_Init+0x204>
 8003cae:	2307      	movs	r3, #7
 8003cb0:	e006      	b.n	8003cc0 <HAL_GPIO_Init+0x204>
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e004      	b.n	8003cc0 <HAL_GPIO_Init+0x204>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e002      	b.n	8003cc0 <HAL_GPIO_Init+0x204>
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_GPIO_Init+0x204>
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	69fa      	ldr	r2, [r7, #28]
 8003cc2:	f002 0203 	and.w	r2, r2, #3
 8003cc6:	0092      	lsls	r2, r2, #2
 8003cc8:	4093      	lsls	r3, r2
 8003cca:	69ba      	ldr	r2, [r7, #24]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cd0:	4935      	ldr	r1, [pc, #212]	@ (8003da8 <HAL_GPIO_Init+0x2ec>)
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	089b      	lsrs	r3, r3, #2
 8003cd6:	3302      	adds	r3, #2
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cde:	4b38      	ldr	r3, [pc, #224]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ce4:	693b      	ldr	r3, [r7, #16]
 8003ce6:	43db      	mvns	r3, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4013      	ands	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d003      	beq.n	8003d02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003cfa:	69ba      	ldr	r2, [r7, #24]
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d02:	4a2f      	ldr	r2, [pc, #188]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d08:	4b2d      	ldr	r3, [pc, #180]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	4013      	ands	r3, r2
 8003d16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d003      	beq.n	8003d2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d24:	69ba      	ldr	r2, [r7, #24]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d2c:	4a24      	ldr	r2, [pc, #144]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d32:	4b23      	ldr	r3, [pc, #140]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	43db      	mvns	r3, r3
 8003d3c:	69ba      	ldr	r2, [r7, #24]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d56:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d5c:	4b18      	ldr	r3, [pc, #96]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	43db      	mvns	r3, r3
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4013      	ands	r3, r2
 8003d6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d003      	beq.n	8003d80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d80:	4a0f      	ldr	r2, [pc, #60]	@ (8003dc0 <HAL_GPIO_Init+0x304>)
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d86:	69fb      	ldr	r3, [r7, #28]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	61fb      	str	r3, [r7, #28]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	2b0f      	cmp	r3, #15
 8003d90:	f67f aea2 	bls.w	8003ad8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003d94:	bf00      	nop
 8003d96:	bf00      	nop
 8003d98:	3724      	adds	r7, #36	@ 0x24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800
 8003da8:	40013800 	.word	0x40013800
 8003dac:	40020000 	.word	0x40020000
 8003db0:	40020400 	.word	0x40020400
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020c00 	.word	0x40020c00
 8003dbc:	40021000 	.word	0x40021000
 8003dc0:	40013c00 	.word	0x40013c00

08003dc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	460b      	mov	r3, r1
 8003dce:	807b      	strh	r3, [r7, #2]
 8003dd0:	4613      	mov	r3, r2
 8003dd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dd4:	787b      	ldrb	r3, [r7, #1]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dda:	887a      	ldrh	r2, [r7, #2]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003de0:	e003      	b.n	8003dea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003de2:	887b      	ldrh	r3, [r7, #2]
 8003de4:	041a      	lsls	r2, r3, #16
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	619a      	str	r2, [r3, #24]
}
 8003dea:	bf00      	nop
 8003dec:	370c      	adds	r7, #12
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr

08003df6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003df6:	b480      	push	{r7}
 8003df8:	b085      	sub	sp, #20
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
 8003dfe:	460b      	mov	r3, r1
 8003e00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e08:	887a      	ldrh	r2, [r7, #2]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	041a      	lsls	r2, r3, #16
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	43d9      	mvns	r1, r3
 8003e14:	887b      	ldrh	r3, [r7, #2]
 8003e16:	400b      	ands	r3, r1
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	619a      	str	r2, [r3, #24]
}
 8003e1e:	bf00      	nop
 8003e20:	3714      	adds	r7, #20
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
	...

08003e2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d101      	bne.n	8003e3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e12b      	b.n	8004096 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d106      	bne.n	8003e58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f7fd fe52 	bl	8001afc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2224      	movs	r2, #36	@ 0x24
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f022 0201 	bic.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003e8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e90:	f004 fce6 	bl	8008860 <HAL_RCC_GetPCLK1Freq>
 8003e94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	4a81      	ldr	r2, [pc, #516]	@ (80040a0 <HAL_I2C_Init+0x274>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d807      	bhi.n	8003eb0 <HAL_I2C_Init+0x84>
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	4a80      	ldr	r2, [pc, #512]	@ (80040a4 <HAL_I2C_Init+0x278>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	bf94      	ite	ls
 8003ea8:	2301      	movls	r3, #1
 8003eaa:	2300      	movhi	r3, #0
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	e006      	b.n	8003ebe <HAL_I2C_Init+0x92>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4a7d      	ldr	r2, [pc, #500]	@ (80040a8 <HAL_I2C_Init+0x27c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	bf94      	ite	ls
 8003eb8:	2301      	movls	r3, #1
 8003eba:	2300      	movhi	r3, #0
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d001      	beq.n	8003ec6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e0e7      	b.n	8004096 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4a78      	ldr	r2, [pc, #480]	@ (80040ac <HAL_I2C_Init+0x280>)
 8003eca:	fba2 2303 	umull	r2, r3, r2, r3
 8003ece:	0c9b      	lsrs	r3, r3, #18
 8003ed0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	4a6a      	ldr	r2, [pc, #424]	@ (80040a0 <HAL_I2C_Init+0x274>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d802      	bhi.n	8003f00 <HAL_I2C_Init+0xd4>
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3301      	adds	r3, #1
 8003efe:	e009      	b.n	8003f14 <HAL_I2C_Init+0xe8>
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f06:	fb02 f303 	mul.w	r3, r2, r3
 8003f0a:	4a69      	ldr	r2, [pc, #420]	@ (80040b0 <HAL_I2C_Init+0x284>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	3301      	adds	r3, #1
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6812      	ldr	r2, [r2, #0]
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69db      	ldr	r3, [r3, #28]
 8003f22:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f26:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	495c      	ldr	r1, [pc, #368]	@ (80040a0 <HAL_I2C_Init+0x274>)
 8003f30:	428b      	cmp	r3, r1
 8003f32:	d819      	bhi.n	8003f68 <HAL_I2C_Init+0x13c>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	1e59      	subs	r1, r3, #1
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	005b      	lsls	r3, r3, #1
 8003f3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f42:	1c59      	adds	r1, r3, #1
 8003f44:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f48:	400b      	ands	r3, r1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_I2C_Init+0x138>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	1e59      	subs	r1, r3, #1
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f62:	e051      	b.n	8004008 <HAL_I2C_Init+0x1dc>
 8003f64:	2304      	movs	r3, #4
 8003f66:	e04f      	b.n	8004008 <HAL_I2C_Init+0x1dc>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d111      	bne.n	8003f94 <HAL_I2C_Init+0x168>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	1e58      	subs	r0, r3, #1
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6859      	ldr	r1, [r3, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	440b      	add	r3, r1
 8003f7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f82:	3301      	adds	r3, #1
 8003f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	bf0c      	ite	eq
 8003f8c:	2301      	moveq	r3, #1
 8003f8e:	2300      	movne	r3, #0
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	e012      	b.n	8003fba <HAL_I2C_Init+0x18e>
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	1e58      	subs	r0, r3, #1
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	0099      	lsls	r1, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003faa:	3301      	adds	r3, #1
 8003fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	bf0c      	ite	eq
 8003fb4:	2301      	moveq	r3, #1
 8003fb6:	2300      	movne	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_I2C_Init+0x196>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e022      	b.n	8004008 <HAL_I2C_Init+0x1dc>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10e      	bne.n	8003fe8 <HAL_I2C_Init+0x1bc>
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	1e58      	subs	r0, r3, #1
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6859      	ldr	r1, [r3, #4]
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	005b      	lsls	r3, r3, #1
 8003fd6:	440b      	add	r3, r1
 8003fd8:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fdc:	3301      	adds	r3, #1
 8003fde:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fe6:	e00f      	b.n	8004008 <HAL_I2C_Init+0x1dc>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	1e58      	subs	r0, r3, #1
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6859      	ldr	r1, [r3, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	440b      	add	r3, r1
 8003ff6:	0099      	lsls	r1, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ffe:	3301      	adds	r3, #1
 8004000:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004004:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	6809      	ldr	r1, [r1, #0]
 800400c:	4313      	orrs	r3, r2
 800400e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69da      	ldr	r2, [r3, #28]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	431a      	orrs	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	430a      	orrs	r2, r1
 800402a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004036:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	6911      	ldr	r1, [r2, #16]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	68d2      	ldr	r2, [r2, #12]
 8004042:	4311      	orrs	r1, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	6812      	ldr	r2, [r2, #0]
 8004048:	430b      	orrs	r3, r1
 800404a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	695a      	ldr	r2, [r3, #20]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	431a      	orrs	r2, r3
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	430a      	orrs	r2, r1
 8004066:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f042 0201 	orr.w	r2, r2, #1
 8004076:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2220      	movs	r2, #32
 8004082:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	000186a0 	.word	0x000186a0
 80040a4:	001e847f 	.word	0x001e847f
 80040a8:	003d08ff 	.word	0x003d08ff
 80040ac:	431bde83 	.word	0x431bde83
 80040b0:	10624dd3 	.word	0x10624dd3

080040b4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c6:	2b80      	cmp	r3, #128	@ 0x80
 80040c8:	d103      	bne.n	80040d2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2200      	movs	r2, #0
 80040d0:	611a      	str	r2, [r3, #16]
  }
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
	...

080040e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b088      	sub	sp, #32
 80040e4:	af02      	add	r7, sp, #8
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	4608      	mov	r0, r1
 80040ea:	4611      	mov	r1, r2
 80040ec:	461a      	mov	r2, r3
 80040ee:	4603      	mov	r3, r0
 80040f0:	817b      	strh	r3, [r7, #10]
 80040f2:	460b      	mov	r3, r1
 80040f4:	813b      	strh	r3, [r7, #8]
 80040f6:	4613      	mov	r3, r2
 80040f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040fa:	f7fe fad1 	bl	80026a0 <HAL_GetTick>
 80040fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004106:	b2db      	uxtb	r3, r3
 8004108:	2b20      	cmp	r3, #32
 800410a:	f040 80d9 	bne.w	80042c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	9300      	str	r3, [sp, #0]
 8004112:	2319      	movs	r3, #25
 8004114:	2201      	movs	r2, #1
 8004116:	496d      	ldr	r1, [pc, #436]	@ (80042cc <HAL_I2C_Mem_Write+0x1ec>)
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f002 faf9 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d001      	beq.n	8004128 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004124:	2302      	movs	r3, #2
 8004126:	e0cc      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800412e:	2b01      	cmp	r3, #1
 8004130:	d101      	bne.n	8004136 <HAL_I2C_Mem_Write+0x56>
 8004132:	2302      	movs	r3, #2
 8004134:	e0c5      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2201      	movs	r2, #1
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0301 	and.w	r3, r3, #1
 8004148:	2b01      	cmp	r3, #1
 800414a:	d007      	beq.n	800415c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0201 	orr.w	r2, r2, #1
 800415a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800416a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2221      	movs	r2, #33	@ 0x21
 8004170:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	2240      	movs	r2, #64	@ 0x40
 8004178:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2200      	movs	r2, #0
 8004180:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6a3a      	ldr	r2, [r7, #32]
 8004186:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800418c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004192:	b29a      	uxth	r2, r3
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	4a4d      	ldr	r2, [pc, #308]	@ (80042d0 <HAL_I2C_Mem_Write+0x1f0>)
 800419c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800419e:	88f8      	ldrh	r0, [r7, #6]
 80041a0:	893a      	ldrh	r2, [r7, #8]
 80041a2:	8979      	ldrh	r1, [r7, #10]
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	9301      	str	r3, [sp, #4]
 80041a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	4603      	mov	r3, r0
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f001 ff6c 	bl	800608c <I2C_RequestMemoryWrite>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d052      	beq.n	8004260 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	e081      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f002 fbbe 	bl	8006944 <I2C_WaitOnTXEFlagUntilTimeout>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00d      	beq.n	80041ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d107      	bne.n	80041e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e06b      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004204:	3b01      	subs	r3, #1
 8004206:	b29a      	uxth	r2, r3
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004210:	b29b      	uxth	r3, r3
 8004212:	3b01      	subs	r3, #1
 8004214:	b29a      	uxth	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	695b      	ldr	r3, [r3, #20]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d11b      	bne.n	8004260 <HAL_I2C_Mem_Write+0x180>
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800422c:	2b00      	cmp	r3, #0
 800422e:	d017      	beq.n	8004260 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1aa      	bne.n	80041be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004268:	697a      	ldr	r2, [r7, #20]
 800426a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f002 fbb1 	bl	80069d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d00d      	beq.n	8004294 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800427c:	2b04      	cmp	r3, #4
 800427e:	d107      	bne.n	8004290 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800428e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	e016      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2200      	movs	r2, #0
 80042b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042bc:	2300      	movs	r3, #0
 80042be:	e000      	b.n	80042c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042c0:	2302      	movs	r3, #2
  }
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3718      	adds	r7, #24
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	00100002 	.word	0x00100002
 80042d0:	ffff0000 	.word	0xffff0000

080042d4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b08a      	sub	sp, #40	@ 0x28
 80042d8:	af02      	add	r7, sp, #8
 80042da:	60f8      	str	r0, [r7, #12]
 80042dc:	4608      	mov	r0, r1
 80042de:	4611      	mov	r1, r2
 80042e0:	461a      	mov	r2, r3
 80042e2:	4603      	mov	r3, r0
 80042e4:	817b      	strh	r3, [r7, #10]
 80042e6:	460b      	mov	r3, r1
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042f2:	f7fe f9d5 	bl	80026a0 <HAL_GetTick>
 80042f6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	f040 8136 	bne.w	8004572 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004306:	4b9d      	ldr	r3, [pc, #628]	@ (800457c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	08db      	lsrs	r3, r3, #3
 800430c:	4a9c      	ldr	r2, [pc, #624]	@ (8004580 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800430e:	fba2 2303 	umull	r2, r3, r2, r3
 8004312:	0a1a      	lsrs	r2, r3, #8
 8004314:	4613      	mov	r3, r2
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	4413      	add	r3, r2
 800431a:	009a      	lsls	r2, r3, #2
 800431c:	4413      	add	r3, r2
 800431e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	3b01      	subs	r3, #1
 8004324:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d112      	bne.n	8004352 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2220      	movs	r2, #32
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800434e:	2302      	movs	r3, #2
 8004350:	e110      	b.n	8004574 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0302 	and.w	r3, r3, #2
 800435c:	2b02      	cmp	r3, #2
 800435e:	d0df      	beq.n	8004320 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004366:	2b01      	cmp	r3, #1
 8004368:	d101      	bne.n	800436e <HAL_I2C_Mem_Write_DMA+0x9a>
 800436a:	2302      	movs	r3, #2
 800436c:	e102      	b.n	8004574 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2201      	movs	r2, #1
 8004372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0301 	and.w	r3, r3, #1
 8004380:	2b01      	cmp	r3, #1
 8004382:	d007      	beq.n	8004394 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2221      	movs	r2, #33	@ 0x21
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	2240      	movs	r2, #64	@ 0x40
 80043b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2200      	movs	r2, #0
 80043b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80043be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80043c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4a6c      	ldr	r2, [pc, #432]	@ (8004584 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80043d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80043d6:	897a      	ldrh	r2, [r7, #10]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80043dc:	893a      	ldrh	r2, [r7, #8]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80043e2:	88fa      	ldrh	r2, [r7, #6]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f000 80a9 	beq.w	800454a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d02a      	beq.n	8004456 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004404:	4a60      	ldr	r2, [pc, #384]	@ (8004588 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8004406:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440c:	4a5f      	ldr	r2, [pc, #380]	@ (800458c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800440e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004414:	2200      	movs	r2, #0
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800441c:	2200      	movs	r2, #0
 800441e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004424:	2200      	movs	r2, #0
 8004426:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442c:	2200      	movs	r2, #0
 800442e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004438:	4619      	mov	r1, r3
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	3310      	adds	r3, #16
 8004440:	461a      	mov	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004446:	f7ff f83b 	bl	80034c0 <HAL_DMA_Start_IT>
 800444a:	4603      	mov	r3, r0
 800444c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800444e:	7efb      	ldrb	r3, [r7, #27]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d166      	bne.n	8004522 <HAL_I2C_Mem_Write_DMA+0x24e>
 8004454:	e013      	b.n	800447e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e07a      	b.n	8004574 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800447e:	88f8      	ldrh	r0, [r7, #6]
 8004480:	893a      	ldrh	r2, [r7, #8]
 8004482:	8979      	ldrh	r1, [r7, #10]
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	9301      	str	r3, [sp, #4]
 8004488:	2323      	movs	r3, #35	@ 0x23
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	4603      	mov	r3, r0
 800448e:	68f8      	ldr	r0, [r7, #12]
 8004490:	f001 fdfc 	bl	800608c <I2C_RequestMemoryWrite>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d022      	beq.n	80044e0 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800449e:	4618      	mov	r0, r3
 80044a0:	f7ff f866 	bl	8003570 <HAL_DMA_Abort_IT>
 80044a4:	4603      	mov	r3, r0
 80044a6:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044ac:	2200      	movs	r2, #0
 80044ae:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80044be:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2200      	movs	r2, #0
 80044c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0201 	bic.w	r2, r2, #1
 80044da:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80044dc:	2301      	movs	r3, #1
 80044de:	e049      	b.n	8004574 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044e0:	2300      	movs	r3, #0
 80044e2:	613b      	str	r3, [r7, #16]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	699b      	ldr	r3, [r3, #24]
 80044f2:	613b      	str	r3, [r7, #16]
 80044f4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800450c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800451c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800451e:	2300      	movs	r3, #0
 8004520:	e028      	b.n	8004574 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004536:	f043 0210 	orr.w	r2, r3, #16
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e014      	b.n	8004574 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	2220      	movs	r2, #32
 800454e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8004572:	2302      	movs	r3, #2
  }
}
 8004574:	4618      	mov	r0, r3
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	2000002c 	.word	0x2000002c
 8004580:	14f8b589 	.word	0x14f8b589
 8004584:	ffff0000 	.word	0xffff0000
 8004588:	08006389 	.word	0x08006389
 800458c:	08006547 	.word	0x08006547

08004590 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b08c      	sub	sp, #48	@ 0x30
 8004594:	af02      	add	r7, sp, #8
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	4608      	mov	r0, r1
 800459a:	4611      	mov	r1, r2
 800459c:	461a      	mov	r2, r3
 800459e:	4603      	mov	r3, r0
 80045a0:	817b      	strh	r3, [r7, #10]
 80045a2:	460b      	mov	r3, r1
 80045a4:	813b      	strh	r3, [r7, #8]
 80045a6:	4613      	mov	r3, r2
 80045a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80045aa:	f7fe f879 	bl	80026a0 <HAL_GetTick>
 80045ae:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80045b0:	2300      	movs	r3, #0
 80045b2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	2b20      	cmp	r3, #32
 80045be:	f040 8172 	bne.w	80048a6 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80045c2:	4b93      	ldr	r3, [pc, #588]	@ (8004810 <HAL_I2C_Mem_Read_DMA+0x280>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	08db      	lsrs	r3, r3, #3
 80045c8:	4a92      	ldr	r2, [pc, #584]	@ (8004814 <HAL_I2C_Mem_Read_DMA+0x284>)
 80045ca:	fba2 2303 	umull	r2, r3, r2, r3
 80045ce:	0a1a      	lsrs	r2, r3, #8
 80045d0:	4613      	mov	r3, r2
 80045d2:	009b      	lsls	r3, r3, #2
 80045d4:	4413      	add	r3, r2
 80045d6:	009a      	lsls	r2, r3, #2
 80045d8:	4413      	add	r3, r2
 80045da:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	3b01      	subs	r3, #1
 80045e0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d112      	bne.n	800460e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2200      	movs	r2, #0
 80045ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2220      	movs	r2, #32
 80045f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004602:	f043 0220 	orr.w	r2, r3, #32
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800460a:	2302      	movs	r3, #2
 800460c:	e14c      	b.n	80048a8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	f003 0302 	and.w	r3, r3, #2
 8004618:	2b02      	cmp	r3, #2
 800461a:	d0df      	beq.n	80045dc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004622:	2b01      	cmp	r3, #1
 8004624:	d101      	bne.n	800462a <HAL_I2C_Mem_Read_DMA+0x9a>
 8004626:	2302      	movs	r3, #2
 8004628:	e13e      	b.n	80048a8 <HAL_I2C_Mem_Read_DMA+0x318>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d007      	beq.n	8004650 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f042 0201 	orr.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800465e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2222      	movs	r2, #34	@ 0x22
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2240      	movs	r2, #64	@ 0x40
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800467a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004680:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4a62      	ldr	r2, [pc, #392]	@ (8004818 <HAL_I2C_Mem_Read_DMA+0x288>)
 8004690:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8004692:	897a      	ldrh	r2, [r7, #10]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004698:	893a      	ldrh	r2, [r7, #8]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800469e:	88fa      	ldrh	r2, [r7, #6]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80cc 	beq.w	800484c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d02d      	beq.n	8004718 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c0:	4a56      	ldr	r2, [pc, #344]	@ (800481c <HAL_I2C_Mem_Read_DMA+0x28c>)
 80046c2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046c8:	4a55      	ldr	r2, [pc, #340]	@ (8004820 <HAL_I2C_Mem_Read_DMA+0x290>)
 80046ca:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	2200      	movs	r2, #0
 80046d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d8:	2200      	movs	r2, #0
 80046da:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e0:	2200      	movs	r2, #0
 80046e2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e8:	2200      	movs	r2, #0
 80046ea:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	3310      	adds	r3, #16
 80046f6:	4619      	mov	r1, r3
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	461a      	mov	r2, r3
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004702:	f7fe fedd 	bl	80034c0 <HAL_DMA_Start_IT>
 8004706:	4603      	mov	r3, r0
 8004708:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800470c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004710:	2b00      	cmp	r3, #0
 8004712:	f040 8087 	bne.w	8004824 <HAL_I2C_Mem_Read_DMA+0x294>
 8004716:	e013      	b.n	8004740 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e0b3      	b.n	80048a8 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004740:	88f8      	ldrh	r0, [r7, #6]
 8004742:	893a      	ldrh	r2, [r7, #8]
 8004744:	8979      	ldrh	r1, [r7, #10]
 8004746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	2323      	movs	r3, #35	@ 0x23
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	4603      	mov	r3, r0
 8004750:	68f8      	ldr	r0, [r7, #12]
 8004752:	f001 fd31 	bl	80061b8 <I2C_RequestMemoryRead>
 8004756:	4603      	mov	r3, r0
 8004758:	2b00      	cmp	r3, #0
 800475a:	d023      	beq.n	80047a4 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004760:	4618      	mov	r0, r3
 8004762:	f7fe ff05 	bl	8003570 <HAL_DMA_Abort_IT>
 8004766:	4603      	mov	r3, r0
 8004768:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004770:	2200      	movs	r2, #0
 8004772:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004782:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	2200      	movs	r2, #0
 800478e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f022 0201 	bic.w	r2, r2, #1
 800479e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e081      	b.n	80048a8 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d108      	bne.n	80047be <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681a      	ldr	r2, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e007      	b.n	80047ce <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80047cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	695b      	ldr	r3, [r3, #20]
 80047d8:	61bb      	str	r3, [r7, #24]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047fa:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685a      	ldr	r2, [r3, #4]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800480a:	605a      	str	r2, [r3, #4]
 800480c:	e049      	b.n	80048a2 <HAL_I2C_Mem_Read_DMA+0x312>
 800480e:	bf00      	nop
 8004810:	2000002c 	.word	0x2000002c
 8004814:	14f8b589 	.word	0x14f8b589
 8004818:	ffff0000 	.word	0xffff0000
 800481c:	08006389 	.word	0x08006389
 8004820:	08006547 	.word	0x08006547
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	2220      	movs	r2, #32
 8004828:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004838:	f043 0210 	orr.w	r2, r3, #16
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2200      	movs	r2, #0
 8004844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e02d      	b.n	80048a8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800484c:	88f8      	ldrh	r0, [r7, #6]
 800484e:	893a      	ldrh	r2, [r7, #8]
 8004850:	8979      	ldrh	r1, [r7, #10]
 8004852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004854:	9301      	str	r3, [sp, #4]
 8004856:	2323      	movs	r3, #35	@ 0x23
 8004858:	9300      	str	r3, [sp, #0]
 800485a:	4603      	mov	r3, r0
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f001 fcab 	bl	80061b8 <I2C_RequestMemoryRead>
 8004862:	4603      	mov	r3, r0
 8004864:	2b00      	cmp	r3, #0
 8004866:	d001      	beq.n	800486c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e01d      	b.n	80048a8 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	617b      	str	r3, [r7, #20]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004890:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2200      	movs	r2, #0
 800489e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e000      	b.n	80048a8 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80048a6:	2302      	movs	r3, #2
  }
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3728      	adds	r7, #40	@ 0x28
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80048da:	7bfb      	ldrb	r3, [r7, #15]
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d003      	beq.n	80048e8 <HAL_I2C_EV_IRQHandler+0x38>
 80048e0:	7bfb      	ldrb	r3, [r7, #15]
 80048e2:	2b40      	cmp	r3, #64	@ 0x40
 80048e4:	f040 80c1 	bne.w	8004a6a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10d      	bne.n	800491e <HAL_I2C_EV_IRQHandler+0x6e>
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004908:	d003      	beq.n	8004912 <HAL_I2C_EV_IRQHandler+0x62>
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004910:	d101      	bne.n	8004916 <HAL_I2C_EV_IRQHandler+0x66>
 8004912:	2301      	movs	r3, #1
 8004914:	e000      	b.n	8004918 <HAL_I2C_EV_IRQHandler+0x68>
 8004916:	2300      	movs	r3, #0
 8004918:	2b01      	cmp	r3, #1
 800491a:	f000 8132 	beq.w	8004b82 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f003 0301 	and.w	r3, r3, #1
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00c      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x92>
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	0a5b      	lsrs	r3, r3, #9
 800492c:	f003 0301 	and.w	r3, r3, #1
 8004930:	2b00      	cmp	r3, #0
 8004932:	d006      	beq.n	8004942 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f002 f8f6 	bl	8006b26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 fd87 	bl	800544e <I2C_Master_SB>
 8004940:	e092      	b.n	8004a68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	08db      	lsrs	r3, r3, #3
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d009      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0xb2>
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	0a5b      	lsrs	r3, r3, #9
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fdfd 	bl	800555a <I2C_Master_ADD10>
 8004960:	e082      	b.n	8004a68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	085b      	lsrs	r3, r3, #1
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d009      	beq.n	8004982 <HAL_I2C_EV_IRQHandler+0xd2>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	0a5b      	lsrs	r3, r3, #9
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d003      	beq.n	8004982 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f000 fe17 	bl	80055ae <I2C_Master_ADDR>
 8004980:	e072      	b.n	8004a68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004982:	69bb      	ldr	r3, [r7, #24]
 8004984:	089b      	lsrs	r3, r3, #2
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d03b      	beq.n	8004a06 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004998:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800499c:	f000 80f3 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049a0:	69fb      	ldr	r3, [r7, #28]
 80049a2:	09db      	lsrs	r3, r3, #7
 80049a4:	f003 0301 	and.w	r3, r3, #1
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00f      	beq.n	80049cc <HAL_I2C_EV_IRQHandler+0x11c>
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	0a9b      	lsrs	r3, r3, #10
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d009      	beq.n	80049cc <HAL_I2C_EV_IRQHandler+0x11c>
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	f003 0301 	and.w	r3, r3, #1
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d103      	bne.n	80049cc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80049c4:	6878      	ldr	r0, [r7, #4]
 80049c6:	f000 f9df 	bl	8004d88 <I2C_MasterTransmit_TXE>
 80049ca:	e04d      	b.n	8004a68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	089b      	lsrs	r3, r3, #2
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80d6 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
 80049da:	697b      	ldr	r3, [r7, #20]
 80049dc:	0a5b      	lsrs	r3, r3, #9
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 80cf 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80049e8:	7bbb      	ldrb	r3, [r7, #14]
 80049ea:	2b21      	cmp	r3, #33	@ 0x21
 80049ec:	d103      	bne.n	80049f6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80049ee:	6878      	ldr	r0, [r7, #4]
 80049f0:	f000 fa66 	bl	8004ec0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049f4:	e0c7      	b.n	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80049f6:	7bfb      	ldrb	r3, [r7, #15]
 80049f8:	2b40      	cmp	r3, #64	@ 0x40
 80049fa:	f040 80c4 	bne.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fad4 	bl	8004fac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a04:	e0bf      	b.n	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a14:	f000 80b7 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	099b      	lsrs	r3, r3, #6
 8004a1c:	f003 0301 	and.w	r3, r3, #1
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00f      	beq.n	8004a44 <HAL_I2C_EV_IRQHandler+0x194>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	0a9b      	lsrs	r3, r3, #10
 8004a28:	f003 0301 	and.w	r3, r3, #1
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <HAL_I2C_EV_IRQHandler+0x194>
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	089b      	lsrs	r3, r3, #2
 8004a34:	f003 0301 	and.w	r3, r3, #1
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d103      	bne.n	8004a44 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 fb4d 	bl	80050dc <I2C_MasterReceive_RXNE>
 8004a42:	e011      	b.n	8004a68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	089b      	lsrs	r3, r3, #2
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	f000 809a 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	0a5b      	lsrs	r3, r3, #9
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8093 	beq.w	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fc03 	bl	800526c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a66:	e08e      	b.n	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a68:	e08d      	b.n	8004b86 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d004      	beq.n	8004a7c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	61fb      	str	r3, [r7, #28]
 8004a7a:	e007      	b.n	8004a8c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	085b      	lsrs	r3, r3, #1
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d012      	beq.n	8004abe <HAL_I2C_EV_IRQHandler+0x20e>
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	0a5b      	lsrs	r3, r3, #9
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00c      	beq.n	8004abe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004ab4:	69b9      	ldr	r1, [r7, #24]
 8004ab6:	6878      	ldr	r0, [r7, #4]
 8004ab8:	f000 ffc8 	bl	8005a4c <I2C_Slave_ADDR>
 8004abc:	e066      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	091b      	lsrs	r3, r3, #4
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d009      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x22e>
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	0a5b      	lsrs	r3, r3, #9
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d003      	beq.n	8004ade <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f001 f802 	bl	8005ae0 <I2C_Slave_STOPF>
 8004adc:	e056      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004ade:	7bbb      	ldrb	r3, [r7, #14]
 8004ae0:	2b21      	cmp	r3, #33	@ 0x21
 8004ae2:	d002      	beq.n	8004aea <HAL_I2C_EV_IRQHandler+0x23a>
 8004ae4:	7bbb      	ldrb	r3, [r7, #14]
 8004ae6:	2b29      	cmp	r3, #41	@ 0x29
 8004ae8:	d125      	bne.n	8004b36 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	09db      	lsrs	r3, r3, #7
 8004aee:	f003 0301 	and.w	r3, r3, #1
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00f      	beq.n	8004b16 <HAL_I2C_EV_IRQHandler+0x266>
 8004af6:	697b      	ldr	r3, [r7, #20]
 8004af8:	0a9b      	lsrs	r3, r3, #10
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <HAL_I2C_EV_IRQHandler+0x266>
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	089b      	lsrs	r3, r3, #2
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d103      	bne.n	8004b16 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fede 	bl	80058d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b14:	e039      	b.n	8004b8a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	089b      	lsrs	r3, r3, #2
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d033      	beq.n	8004b8a <HAL_I2C_EV_IRQHandler+0x2da>
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	0a5b      	lsrs	r3, r3, #9
 8004b26:	f003 0301 	and.w	r3, r3, #1
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d02d      	beq.n	8004b8a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b2e:	6878      	ldr	r0, [r7, #4]
 8004b30:	f000 ff0b 	bl	800594a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b34:	e029      	b.n	8004b8a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	099b      	lsrs	r3, r3, #6
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00f      	beq.n	8004b62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	0a9b      	lsrs	r3, r3, #10
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d009      	beq.n	8004b62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8004b4e:	69fb      	ldr	r3, [r7, #28]
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d103      	bne.n	8004b62 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004b5a:	6878      	ldr	r0, [r7, #4]
 8004b5c:	f000 ff16 	bl	800598c <I2C_SlaveReceive_RXNE>
 8004b60:	e014      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	089b      	lsrs	r3, r3, #2
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00e      	beq.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	0a5b      	lsrs	r3, r3, #9
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d008      	beq.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 ff44 	bl	8005a08 <I2C_SlaveReceive_BTF>
 8004b80:	e004      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004b82:	bf00      	nop
 8004b84:	e002      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b86:	bf00      	nop
 8004b88:	e000      	b.n	8004b8c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b8a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b08a      	sub	sp, #40	@ 0x28
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004baa:	2300      	movs	r3, #0
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004bb4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	0a1b      	lsrs	r3, r3, #8
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00e      	beq.n	8004be0 <HAL_I2C_ER_IRQHandler+0x4e>
 8004bc2:	69fb      	ldr	r3, [r7, #28]
 8004bc4:	0a1b      	lsrs	r3, r3, #8
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d008      	beq.n	8004be0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd0:	f043 0301 	orr.w	r3, r3, #1
 8004bd4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004bde:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004be0:	6a3b      	ldr	r3, [r7, #32]
 8004be2:	0a5b      	lsrs	r3, r3, #9
 8004be4:	f003 0301 	and.w	r3, r3, #1
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00e      	beq.n	8004c0a <HAL_I2C_ER_IRQHandler+0x78>
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d008      	beq.n	8004c0a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bfa:	f043 0302 	orr.w	r3, r3, #2
 8004bfe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004c08:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c0a:	6a3b      	ldr	r3, [r7, #32]
 8004c0c:	0a9b      	lsrs	r3, r3, #10
 8004c0e:	f003 0301 	and.w	r3, r3, #1
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d03f      	beq.n	8004c96 <HAL_I2C_ER_IRQHandler+0x104>
 8004c16:	69fb      	ldr	r3, [r7, #28]
 8004c18:	0a1b      	lsrs	r3, r3, #8
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d039      	beq.n	8004c96 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004c22:	7efb      	ldrb	r3, [r7, #27]
 8004c24:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c2a:	b29b      	uxth	r3, r3
 8004c2c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c34:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c3a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004c3c:	7ebb      	ldrb	r3, [r7, #26]
 8004c3e:	2b20      	cmp	r3, #32
 8004c40:	d112      	bne.n	8004c68 <HAL_I2C_ER_IRQHandler+0xd6>
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d10f      	bne.n	8004c68 <HAL_I2C_ER_IRQHandler+0xd6>
 8004c48:	7cfb      	ldrb	r3, [r7, #19]
 8004c4a:	2b21      	cmp	r3, #33	@ 0x21
 8004c4c:	d008      	beq.n	8004c60 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004c4e:	7cfb      	ldrb	r3, [r7, #19]
 8004c50:	2b29      	cmp	r3, #41	@ 0x29
 8004c52:	d005      	beq.n	8004c60 <HAL_I2C_ER_IRQHandler+0xce>
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	2b28      	cmp	r3, #40	@ 0x28
 8004c58:	d106      	bne.n	8004c68 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b21      	cmp	r3, #33	@ 0x21
 8004c5e:	d103      	bne.n	8004c68 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f001 f86d 	bl	8005d40 <I2C_Slave_AF>
 8004c66:	e016      	b.n	8004c96 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004c70:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	f043 0304 	orr.w	r3, r3, #4
 8004c78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004c7a:	7efb      	ldrb	r3, [r7, #27]
 8004c7c:	2b10      	cmp	r3, #16
 8004c7e:	d002      	beq.n	8004c86 <HAL_I2C_ER_IRQHandler+0xf4>
 8004c80:	7efb      	ldrb	r3, [r7, #27]
 8004c82:	2b40      	cmp	r3, #64	@ 0x40
 8004c84:	d107      	bne.n	8004c96 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	681a      	ldr	r2, [r3, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c94:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	0adb      	lsrs	r3, r3, #11
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_I2C_ER_IRQHandler+0x12e>
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	0a1b      	lsrs	r3, r3, #8
 8004ca6:	f003 0301 	and.w	r3, r3, #1
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d008      	beq.n	8004cc0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb0:	f043 0308 	orr.w	r3, r3, #8
 8004cb4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004cbe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d008      	beq.n	8004cd8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f001 f8a8 	bl	8005e28 <I2C_ITError>
  }
}
 8004cd8:	bf00      	nop
 8004cda:	3728      	adds	r7, #40	@ 0x28
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004cfc:	bf00      	nop
 8004cfe:	370c      	adds	r7, #12
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr

08004d08 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b083      	sub	sp, #12
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d24:	bf00      	nop
 8004d26:	370c      	adds	r7, #12
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr

08004d30 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	460b      	mov	r3, r1
 8004d3a:	70fb      	strb	r3, [r7, #3]
 8004d3c:	4613      	mov	r3, r2
 8004d3e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004d7c:	bf00      	nop
 8004d7e:	370c      	adds	r7, #12
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr

08004d88 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d150      	bne.n	8004e50 <I2C_MasterTransmit_TXE+0xc8>
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	2b21      	cmp	r3, #33	@ 0x21
 8004db2:	d14d      	bne.n	8004e50 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b08      	cmp	r3, #8
 8004db8:	d01d      	beq.n	8004df6 <I2C_MasterTransmit_TXE+0x6e>
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	2b20      	cmp	r3, #32
 8004dbe:	d01a      	beq.n	8004df6 <I2C_MasterTransmit_TXE+0x6e>
 8004dc0:	68bb      	ldr	r3, [r7, #8]
 8004dc2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004dc6:	d016      	beq.n	8004df6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004dd6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2211      	movs	r2, #17
 8004ddc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2220      	movs	r2, #32
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f7ff ff76 	bl	8004ce0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004df4:	e060      	b.n	8004eb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685a      	ldr	r2, [r3, #4]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e04:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	681a      	ldr	r2, [r3, #0]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e14:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b40      	cmp	r3, #64	@ 0x40
 8004e2e:	d107      	bne.n	8004e40 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f7fb fbb5 	bl	80005a8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e3e:	e03b      	b.n	8004eb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2200      	movs	r2, #0
 8004e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	f7ff ff49 	bl	8004ce0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e4e:	e033      	b.n	8004eb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b21      	cmp	r3, #33	@ 0x21
 8004e54:	d005      	beq.n	8004e62 <I2C_MasterTransmit_TXE+0xda>
 8004e56:	7bbb      	ldrb	r3, [r7, #14]
 8004e58:	2b40      	cmp	r3, #64	@ 0x40
 8004e5a:	d12d      	bne.n	8004eb8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004e5c:	7bfb      	ldrb	r3, [r7, #15]
 8004e5e:	2b22      	cmp	r3, #34	@ 0x22
 8004e60:	d12a      	bne.n	8004eb8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d108      	bne.n	8004e7e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e7a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004e7c:	e01c      	b.n	8004eb8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e84:	b2db      	uxtb	r3, r3
 8004e86:	2b40      	cmp	r3, #64	@ 0x40
 8004e88:	d103      	bne.n	8004e92 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f88e 	bl	8004fac <I2C_MemoryTransmit_TXE_BTF>
}
 8004e90:	e012      	b.n	8004eb8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e96:	781a      	ldrb	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004eb6:	e7ff      	b.n	8004eb8 <I2C_MasterTransmit_TXE+0x130>
 8004eb8:	bf00      	nop
 8004eba:	3710      	adds	r7, #16
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ecc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b21      	cmp	r3, #33	@ 0x21
 8004ed8:	d164      	bne.n	8004fa4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d012      	beq.n	8004f0a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee8:	781a      	ldrb	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef4:	1c5a      	adds	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f08:	e04c      	b.n	8004fa4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d01d      	beq.n	8004f4c <I2C_MasterTransmit_BTF+0x8c>
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b20      	cmp	r3, #32
 8004f14:	d01a      	beq.n	8004f4c <I2C_MasterTransmit_BTF+0x8c>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f1c:	d016      	beq.n	8004f4c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	685a      	ldr	r2, [r3, #4]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f2c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2211      	movs	r2, #17
 8004f32:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2220      	movs	r2, #32
 8004f40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f44:	6878      	ldr	r0, [r7, #4]
 8004f46:	f7ff fecb 	bl	8004ce0 <HAL_I2C_MasterTxCpltCallback>
}
 8004f4a:	e02b      	b.n	8004fa4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	685a      	ldr	r2, [r3, #4]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f5a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2220      	movs	r2, #32
 8004f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b40      	cmp	r3, #64	@ 0x40
 8004f84:	d107      	bne.n	8004f96 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fb fb0a 	bl	80005a8 <HAL_I2C_MemTxCpltCallback>
}
 8004f94:	e006      	b.n	8004fa4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f7ff fe9e 	bl	8004ce0 <HAL_I2C_MasterTxCpltCallback>
}
 8004fa4:	bf00      	nop
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d11d      	bne.n	8005000 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d10b      	bne.n	8004fe4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fdc:	1c9a      	adds	r2, r3, #2
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8004fe2:	e077      	b.n	80050d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fe8:	b29b      	uxth	r3, r3
 8004fea:	121b      	asrs	r3, r3, #8
 8004fec:	b2da      	uxtb	r2, r3
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ff8:	1c5a      	adds	r2, r3, #1
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004ffe:	e069      	b.n	80050d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005004:	2b01      	cmp	r3, #1
 8005006:	d10b      	bne.n	8005020 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800500c:	b2da      	uxtb	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800501e:	e059      	b.n	80050d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005024:	2b02      	cmp	r3, #2
 8005026:	d152      	bne.n	80050ce <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005028:	7bfb      	ldrb	r3, [r7, #15]
 800502a:	2b22      	cmp	r3, #34	@ 0x22
 800502c:	d10d      	bne.n	800504a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800503c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005042:	1c5a      	adds	r2, r3, #1
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005048:	e044      	b.n	80050d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b00      	cmp	r3, #0
 8005052:	d015      	beq.n	8005080 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005054:	7bfb      	ldrb	r3, [r7, #15]
 8005056:	2b21      	cmp	r3, #33	@ 0x21
 8005058:	d112      	bne.n	8005080 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505e:	781a      	ldrb	r2, [r3, #0]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	1c5a      	adds	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005074:	b29b      	uxth	r3, r3
 8005076:	3b01      	subs	r3, #1
 8005078:	b29a      	uxth	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800507e:	e029      	b.n	80050d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005084:	b29b      	uxth	r3, r3
 8005086:	2b00      	cmp	r3, #0
 8005088:	d124      	bne.n	80050d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800508a:	7bfb      	ldrb	r3, [r7, #15]
 800508c:	2b21      	cmp	r3, #33	@ 0x21
 800508e:	d121      	bne.n	80050d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685a      	ldr	r2, [r3, #4]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800509e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80050ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fb fa6e 	bl	80005a8 <HAL_I2C_MemTxCpltCallback>
}
 80050cc:	e002      	b.n	80050d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f7fe fff0 	bl	80040b4 <I2C_Flush_DR>
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	2b22      	cmp	r3, #34	@ 0x22
 80050ee:	f040 80b9 	bne.w	8005264 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050fc:	b29b      	uxth	r3, r3
 80050fe:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b03      	cmp	r3, #3
 8005104:	d921      	bls.n	800514a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	691a      	ldr	r2, [r3, #16]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005110:	b2d2      	uxtb	r2, r2
 8005112:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005118:	1c5a      	adds	r2, r3, #1
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005122:	b29b      	uxth	r3, r3
 8005124:	3b01      	subs	r3, #1
 8005126:	b29a      	uxth	r2, r3
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005130:	b29b      	uxth	r3, r3
 8005132:	2b03      	cmp	r3, #3
 8005134:	f040 8096 	bne.w	8005264 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005146:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005148:	e08c      	b.n	8005264 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	2b02      	cmp	r3, #2
 8005150:	d07f      	beq.n	8005252 <I2C_MasterReceive_RXNE+0x176>
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d002      	beq.n	800515e <I2C_MasterReceive_RXNE+0x82>
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d179      	bne.n	8005252 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f001 fc80 	bl	8006a64 <I2C_WaitOnSTOPRequestThroughIT>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d14c      	bne.n	8005204 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005178:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005188:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	691a      	ldr	r2, [r3, #16]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005194:	b2d2      	uxtb	r2, r2
 8005196:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b40      	cmp	r3, #64	@ 0x40
 80051c2:	d10a      	bne.n	80051da <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2200      	movs	r2, #0
 80051d0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7fb f9f8 	bl	80005c8 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051d8:	e044      	b.n	8005264 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	d002      	beq.n	80051ee <I2C_MasterReceive_RXNE+0x112>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2b20      	cmp	r3, #32
 80051ec:	d103      	bne.n	80051f6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80051f4:	e002      	b.n	80051fc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	2212      	movs	r2, #18
 80051fa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7ff fd79 	bl	8004cf4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005202:	e02f      	b.n	8005264 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005212:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	691a      	ldr	r2, [r3, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	b2d2      	uxtb	r2, r2
 8005220:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005226:	1c5a      	adds	r2, r3, #1
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2220      	movs	r2, #32
 800523e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7ff fd88 	bl	8004d60 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005250:	e008      	b.n	8005264 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005260:	605a      	str	r2, [r3, #4]
}
 8005262:	e7ff      	b.n	8005264 <I2C_MasterReceive_RXNE+0x188>
 8005264:	bf00      	nop
 8005266:	3710      	adds	r7, #16
 8005268:	46bd      	mov	sp, r7
 800526a:	bd80      	pop	{r7, pc}

0800526c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005278:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800527e:	b29b      	uxth	r3, r3
 8005280:	2b04      	cmp	r3, #4
 8005282:	d11b      	bne.n	80052bc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	685a      	ldr	r2, [r3, #4]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005292:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	691a      	ldr	r2, [r3, #16]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	1c5a      	adds	r2, r3, #1
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	3b01      	subs	r3, #1
 80052b4:	b29a      	uxth	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80052ba:	e0c4      	b.n	8005446 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052c0:	b29b      	uxth	r3, r3
 80052c2:	2b03      	cmp	r3, #3
 80052c4:	d129      	bne.n	800531a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d00a      	beq.n	80052f2 <I2C_MasterReceive_BTF+0x86>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2b02      	cmp	r3, #2
 80052e0:	d007      	beq.n	80052f2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	691a      	ldr	r2, [r3, #16]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fc:	b2d2      	uxtb	r2, r2
 80052fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800530e:	b29b      	uxth	r3, r3
 8005310:	3b01      	subs	r3, #1
 8005312:	b29a      	uxth	r2, r3
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005318:	e095      	b.n	8005446 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531e:	b29b      	uxth	r3, r3
 8005320:	2b02      	cmp	r3, #2
 8005322:	d17d      	bne.n	8005420 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d002      	beq.n	8005330 <I2C_MasterReceive_BTF+0xc4>
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2b10      	cmp	r3, #16
 800532e:	d108      	bne.n	8005342 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e016      	b.n	8005370 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b04      	cmp	r3, #4
 8005346:	d002      	beq.n	800534e <I2C_MasterReceive_BTF+0xe2>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2b02      	cmp	r3, #2
 800534c:	d108      	bne.n	8005360 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800535c:	601a      	str	r2, [r3, #0]
 800535e:	e007      	b.n	8005370 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800536e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	691a      	ldr	r2, [r3, #16]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800537a:	b2d2      	uxtb	r2, r2
 800537c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800538c:	b29b      	uxth	r3, r3
 800538e:	3b01      	subs	r3, #1
 8005390:	b29a      	uxth	r2, r3
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	691a      	ldr	r2, [r3, #16]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a0:	b2d2      	uxtb	r2, r2
 80053a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053a8:	1c5a      	adds	r2, r3, #1
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	3b01      	subs	r3, #1
 80053b6:	b29a      	uxth	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80053ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2220      	movs	r2, #32
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80053da:	b2db      	uxtb	r3, r3
 80053dc:	2b40      	cmp	r3, #64	@ 0x40
 80053de:	d10a      	bne.n	80053f6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f7fb f8ea 	bl	80005c8 <HAL_I2C_MemRxCpltCallback>
}
 80053f4:	e027      	b.n	8005446 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2b08      	cmp	r3, #8
 8005402:	d002      	beq.n	800540a <I2C_MasterReceive_BTF+0x19e>
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	2b20      	cmp	r3, #32
 8005408:	d103      	bne.n	8005412 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005410:	e002      	b.n	8005418 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2212      	movs	r2, #18
 8005416:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f7ff fc6b 	bl	8004cf4 <HAL_I2C_MasterRxCpltCallback>
}
 800541e:	e012      	b.n	8005446 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	691a      	ldr	r2, [r3, #16]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800542a:	b2d2      	uxtb	r2, r2
 800542c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005446:	bf00      	nop
 8005448:	3710      	adds	r7, #16
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800544e:	b480      	push	{r7}
 8005450:	b083      	sub	sp, #12
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b40      	cmp	r3, #64	@ 0x40
 8005460:	d117      	bne.n	8005492 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005466:	2b00      	cmp	r3, #0
 8005468:	d109      	bne.n	800547e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546e:	b2db      	uxtb	r3, r3
 8005470:	461a      	mov	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800547a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800547c:	e067      	b.n	800554e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005482:	b2db      	uxtb	r3, r3
 8005484:	f043 0301 	orr.w	r3, r3, #1
 8005488:	b2da      	uxtb	r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	611a      	str	r2, [r3, #16]
}
 8005490:	e05d      	b.n	800554e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800549a:	d133      	bne.n	8005504 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054a2:	b2db      	uxtb	r3, r3
 80054a4:	2b21      	cmp	r3, #33	@ 0x21
 80054a6:	d109      	bne.n	80054bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054b8:	611a      	str	r2, [r3, #16]
 80054ba:	e008      	b.n	80054ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054c0:	b2db      	uxtb	r3, r3
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d004      	beq.n	80054e0 <I2C_Master_SB+0x92>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d108      	bne.n	80054f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d032      	beq.n	800554e <I2C_Master_SB+0x100>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d02d      	beq.n	800554e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005500:	605a      	str	r2, [r3, #4]
}
 8005502:	e024      	b.n	800554e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10e      	bne.n	800552a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005510:	b29b      	uxth	r3, r3
 8005512:	11db      	asrs	r3, r3, #7
 8005514:	b2db      	uxtb	r3, r3
 8005516:	f003 0306 	and.w	r3, r3, #6
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f063 030f 	orn	r3, r3, #15
 8005520:	b2da      	uxtb	r2, r3
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	611a      	str	r2, [r3, #16]
}
 8005528:	e011      	b.n	800554e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800552e:	2b01      	cmp	r3, #1
 8005530:	d10d      	bne.n	800554e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005536:	b29b      	uxth	r3, r3
 8005538:	11db      	asrs	r3, r3, #7
 800553a:	b2db      	uxtb	r3, r3
 800553c:	f003 0306 	and.w	r3, r3, #6
 8005540:	b2db      	uxtb	r3, r3
 8005542:	f063 030e 	orn	r3, r3, #14
 8005546:	b2da      	uxtb	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	611a      	str	r2, [r3, #16]
}
 800554e:	bf00      	nop
 8005550:	370c      	adds	r7, #12
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800555a:	b480      	push	{r7}
 800555c:	b083      	sub	sp, #12
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005566:	b2da      	uxtb	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005572:	2b00      	cmp	r3, #0
 8005574:	d004      	beq.n	8005580 <I2C_Master_ADD10+0x26>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800557a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557c:	2b00      	cmp	r3, #0
 800557e:	d108      	bne.n	8005592 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00c      	beq.n	80055a2 <I2C_Master_ADD10+0x48>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800558c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800558e:	2b00      	cmp	r3, #0
 8005590:	d007      	beq.n	80055a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685a      	ldr	r2, [r3, #4]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80055a0:	605a      	str	r2, [r3, #4]
  }
}
 80055a2:	bf00      	nop
 80055a4:	370c      	adds	r7, #12
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr

080055ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80055ae:	b480      	push	{r7}
 80055b0:	b091      	sub	sp, #68	@ 0x44
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80055bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	2b22      	cmp	r3, #34	@ 0x22
 80055d6:	f040 8169 	bne.w	80058ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10f      	bne.n	8005602 <I2C_Master_ADDR+0x54>
 80055e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80055e6:	2b40      	cmp	r3, #64	@ 0x40
 80055e8:	d10b      	bne.n	8005602 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ea:	2300      	movs	r3, #0
 80055ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	695b      	ldr	r3, [r3, #20]
 80055f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	699b      	ldr	r3, [r3, #24]
 80055fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80055fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005600:	e160      	b.n	80058c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005606:	2b00      	cmp	r3, #0
 8005608:	d11d      	bne.n	8005646 <I2C_Master_ADDR+0x98>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8005612:	d118      	bne.n	8005646 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005614:	2300      	movs	r3, #0
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	699b      	ldr	r3, [r3, #24]
 8005626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005638:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800563e:	1c5a      	adds	r2, r3, #1
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	651a      	str	r2, [r3, #80]	@ 0x50
 8005644:	e13e      	b.n	80058c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800564a:	b29b      	uxth	r3, r3
 800564c:	2b00      	cmp	r3, #0
 800564e:	d113      	bne.n	8005678 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005650:	2300      	movs	r3, #0
 8005652:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695b      	ldr	r3, [r3, #20]
 800565a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005664:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	e115      	b.n	80058a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800567c:	b29b      	uxth	r3, r3
 800567e:	2b01      	cmp	r3, #1
 8005680:	f040 808a 	bne.w	8005798 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005686:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800568a:	d137      	bne.n	80056fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800569a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056aa:	d113      	bne.n	80056d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056bc:	2300      	movs	r3, #0
 80056be:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	695b      	ldr	r3, [r3, #20]
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80056d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d2:	e0e7      	b.n	80058a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d4:	2300      	movs	r3, #0
 80056d6:	623b      	str	r3, [r7, #32]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	623b      	str	r3, [r7, #32]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	623b      	str	r3, [r7, #32]
 80056e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	e0d3      	b.n	80058a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80056fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fe:	2b08      	cmp	r3, #8
 8005700:	d02e      	beq.n	8005760 <I2C_Master_ADDR+0x1b2>
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	2b20      	cmp	r3, #32
 8005706:	d02b      	beq.n	8005760 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005708:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800570a:	2b12      	cmp	r3, #18
 800570c:	d102      	bne.n	8005714 <I2C_Master_ADDR+0x166>
 800570e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005710:	2b01      	cmp	r3, #1
 8005712:	d125      	bne.n	8005760 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005716:	2b04      	cmp	r3, #4
 8005718:	d00e      	beq.n	8005738 <I2C_Master_ADDR+0x18a>
 800571a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571c:	2b02      	cmp	r3, #2
 800571e:	d00b      	beq.n	8005738 <I2C_Master_ADDR+0x18a>
 8005720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005722:	2b10      	cmp	r3, #16
 8005724:	d008      	beq.n	8005738 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005734:	601a      	str	r2, [r3, #0]
 8005736:	e007      	b.n	8005748 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	681a      	ldr	r2, [r3, #0]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005746:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005748:	2300      	movs	r3, #0
 800574a:	61fb      	str	r3, [r7, #28]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	61fb      	str	r3, [r7, #28]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	61fb      	str	r3, [r7, #28]
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	e0a1      	b.n	80058a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800576e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005770:	2300      	movs	r3, #0
 8005772:	61bb      	str	r3, [r7, #24]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	695b      	ldr	r3, [r3, #20]
 800577a:	61bb      	str	r3, [r7, #24]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	61bb      	str	r3, [r7, #24]
 8005784:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e085      	b.n	80058a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800579c:	b29b      	uxth	r3, r3
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d14d      	bne.n	800583e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d016      	beq.n	80057d6 <I2C_Master_ADDR+0x228>
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d013      	beq.n	80057d6 <I2C_Master_ADDR+0x228>
 80057ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b0:	2b10      	cmp	r3, #16
 80057b2:	d010      	beq.n	80057d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e007      	b.n	80057e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057f4:	d117      	bne.n	8005826 <I2C_Master_ADDR+0x278>
 80057f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80057fc:	d00b      	beq.n	8005816 <I2C_Master_ADDR+0x268>
 80057fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005800:	2b01      	cmp	r3, #1
 8005802:	d008      	beq.n	8005816 <I2C_Master_ADDR+0x268>
 8005804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005806:	2b08      	cmp	r3, #8
 8005808:	d005      	beq.n	8005816 <I2C_Master_ADDR+0x268>
 800580a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580c:	2b10      	cmp	r3, #16
 800580e:	d002      	beq.n	8005816 <I2C_Master_ADDR+0x268>
 8005810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005812:	2b20      	cmp	r3, #32
 8005814:	d107      	bne.n	8005826 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8005824:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	617b      	str	r3, [r7, #20]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	699b      	ldr	r3, [r3, #24]
 8005838:	617b      	str	r3, [r7, #20]
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	e032      	b.n	80058a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800584c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800585c:	d117      	bne.n	800588e <I2C_Master_ADDR+0x2e0>
 800585e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005860:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005864:	d00b      	beq.n	800587e <I2C_Master_ADDR+0x2d0>
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	2b01      	cmp	r3, #1
 800586a:	d008      	beq.n	800587e <I2C_Master_ADDR+0x2d0>
 800586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586e:	2b08      	cmp	r3, #8
 8005870:	d005      	beq.n	800587e <I2C_Master_ADDR+0x2d0>
 8005872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005874:	2b10      	cmp	r3, #16
 8005876:	d002      	beq.n	800587e <I2C_Master_ADDR+0x2d0>
 8005878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587a:	2b20      	cmp	r3, #32
 800587c:	d107      	bne.n	800588e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800588c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588e:	2300      	movs	r3, #0
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	613b      	str	r3, [r7, #16]
 80058a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80058aa:	e00b      	b.n	80058c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	60fb      	str	r3, [r7, #12]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	60fb      	str	r3, [r7, #12]
 80058c0:	68fb      	ldr	r3, [r7, #12]
}
 80058c2:	e7ff      	b.n	80058c4 <I2C_Master_ADDR+0x316>
 80058c4:	bf00      	nop
 80058c6:	3744      	adds	r7, #68	@ 0x44
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d02b      	beq.n	8005942 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ee:	781a      	ldrb	r2, [r3, #0]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005912:	b29b      	uxth	r3, r3
 8005914:	2b00      	cmp	r3, #0
 8005916:	d114      	bne.n	8005942 <I2C_SlaveTransmit_TXE+0x72>
 8005918:	7bfb      	ldrb	r3, [r7, #15]
 800591a:	2b29      	cmp	r3, #41	@ 0x29
 800591c:	d111      	bne.n	8005942 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685a      	ldr	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800592c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2221      	movs	r2, #33	@ 0x21
 8005932:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2228      	movs	r2, #40	@ 0x28
 8005938:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f7ff f9e3 	bl	8004d08 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005942:	bf00      	nop
 8005944:	3710      	adds	r7, #16
 8005946:	46bd      	mov	sp, r7
 8005948:	bd80      	pop	{r7, pc}

0800594a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005956:	b29b      	uxth	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d011      	beq.n	8005980 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800599a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d02c      	beq.n	8005a00 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	691a      	ldr	r2, [r3, #16]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b0:	b2d2      	uxtb	r2, r2
 80059b2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b8:	1c5a      	adds	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	3b01      	subs	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d114      	bne.n	8005a00 <I2C_SlaveReceive_RXNE+0x74>
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	2b2a      	cmp	r3, #42	@ 0x2a
 80059da:	d111      	bne.n	8005a00 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059ea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2222      	movs	r2, #34	@ 0x22
 80059f0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2228      	movs	r2, #40	@ 0x28
 80059f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f7ff f98e 	bl	8004d1c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a00:	bf00      	nop
 8005a02:	3710      	adds	r7, #16
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a08:	b480      	push	{r7}
 8005a0a:	b083      	sub	sp, #12
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d012      	beq.n	8005a40 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a24:	b2d2      	uxtb	r2, r2
 8005a26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2c:	1c5a      	adds	r2, r3, #1
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	3b01      	subs	r3, #1
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
 8005a54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005a56:	2300      	movs	r3, #0
 8005a58:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005a66:	2b28      	cmp	r3, #40	@ 0x28
 8005a68:	d127      	bne.n	8005aba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	685a      	ldr	r2, [r3, #4]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a78:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005a7a:	683b      	ldr	r3, [r7, #0]
 8005a7c:	089b      	lsrs	r3, r3, #2
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005a86:	2301      	movs	r3, #1
 8005a88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	09db      	lsrs	r3, r3, #7
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d103      	bne.n	8005a9e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	81bb      	strh	r3, [r7, #12]
 8005a9c:	e002      	b.n	8005aa4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005aac:	89ba      	ldrh	r2, [r7, #12]
 8005aae:	7bfb      	ldrb	r3, [r7, #15]
 8005ab0:	4619      	mov	r1, r3
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f7ff f93c 	bl	8004d30 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005ab8:	e00e      	b.n	8005ad8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aba:	2300      	movs	r3, #0
 8005abc:	60bb      	str	r3, [r7, #8]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	695b      	ldr	r3, [r3, #20]
 8005ac4:	60bb      	str	r3, [r7, #8]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	60bb      	str	r3, [r7, #8]
 8005ace:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005ad8:	bf00      	nop
 8005ada:	3710      	adds	r7, #16
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b084      	sub	sp, #16
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	685a      	ldr	r2, [r3, #4]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005afe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005b00:	2300      	movs	r3, #0
 8005b02:	60bb      	str	r3, [r7, #8]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	60bb      	str	r3, [r7, #8]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681a      	ldr	r2, [r3, #0]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0201 	orr.w	r2, r2, #1
 8005b1a:	601a      	str	r2, [r3, #0]
 8005b1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	681a      	ldr	r2, [r3, #0]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b3c:	d172      	bne.n	8005c24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005b3e:	7bfb      	ldrb	r3, [r7, #15]
 8005b40:	2b22      	cmp	r3, #34	@ 0x22
 8005b42:	d002      	beq.n	8005b4a <I2C_Slave_STOPF+0x6a>
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b48:	d135      	bne.n	8005bb6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	b29a      	uxth	r2, r3
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b5c:	b29b      	uxth	r3, r3
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	f043 0204 	orr.w	r2, r3, #4
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b82:	4618      	mov	r0, r3
 8005b84:	f7fd fea0 	bl	80038c8 <HAL_DMA_GetState>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d049      	beq.n	8005c22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b92:	4a69      	ldr	r2, [pc, #420]	@ (8005d38 <I2C_Slave_STOPF+0x258>)
 8005b94:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fd fce8 	bl	8003570 <HAL_DMA_Abort_IT>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d03d      	beq.n	8005c22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005baa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005bb0:	4610      	mov	r0, r2
 8005bb2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005bb4:	e035      	b.n	8005c22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	685b      	ldr	r3, [r3, #4]
 8005bbe:	b29a      	uxth	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d005      	beq.n	8005bda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bd2:	f043 0204 	orr.w	r2, r3, #4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	685a      	ldr	r2, [r3, #4]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005be8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fd fe6a 	bl	80038c8 <HAL_DMA_GetState>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d014      	beq.n	8005c24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bfe:	4a4e      	ldr	r2, [pc, #312]	@ (8005d38 <I2C_Slave_STOPF+0x258>)
 8005c00:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c06:	4618      	mov	r0, r3
 8005c08:	f7fd fcb2 	bl	8003570 <HAL_DMA_Abort_IT>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d008      	beq.n	8005c24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c1c:	4610      	mov	r0, r2
 8005c1e:	4798      	blx	r3
 8005c20:	e000      	b.n	8005c24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d03e      	beq.n	8005cac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b04      	cmp	r3, #4
 8005c3a:	d112      	bne.n	8005c62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	691a      	ldr	r2, [r3, #16]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	b2d2      	uxtb	r2, r2
 8005c48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	695b      	ldr	r3, [r3, #20]
 8005c68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c6c:	2b40      	cmp	r3, #64	@ 0x40
 8005c6e:	d112      	bne.n	8005c96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691a      	ldr	r2, [r3, #16]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	b2d2      	uxtb	r2, r2
 8005c7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c82:	1c5a      	adds	r2, r3, #1
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	b29a      	uxth	r2, r3
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d005      	beq.n	8005cac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ca4:	f043 0204 	orr.w	r2, r3, #4
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d003      	beq.n	8005cbc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f8b7 	bl	8005e28 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005cba:	e039      	b.n	8005d30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cc0:	d109      	bne.n	8005cd6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2228      	movs	r2, #40	@ 0x28
 8005ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	f7ff f823 	bl	8004d1c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b28      	cmp	r3, #40	@ 0x28
 8005ce0:	d111      	bne.n	8005d06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	4a15      	ldr	r2, [pc, #84]	@ (8005d3c <I2C_Slave_STOPF+0x25c>)
 8005ce6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff f824 	bl	8004d4c <HAL_I2C_ListenCpltCallback>
}
 8005d04:	e014      	b.n	8005d30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d0a:	2b22      	cmp	r3, #34	@ 0x22
 8005d0c:	d002      	beq.n	8005d14 <I2C_Slave_STOPF+0x234>
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	2b22      	cmp	r3, #34	@ 0x22
 8005d12:	d10d      	bne.n	8005d30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2200      	movs	r2, #0
 8005d18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fe fff6 	bl	8004d1c <HAL_I2C_SlaveRxCpltCallback>
}
 8005d30:	bf00      	nop
 8005d32:	3710      	adds	r7, #16
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	080065c1 	.word	0x080065c1
 8005d3c:	ffff0000 	.word	0xffff0000

08005d40 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d002      	beq.n	8005d62 <I2C_Slave_AF+0x22>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d129      	bne.n	8005db6 <I2C_Slave_AF+0x76>
 8005d62:	7bfb      	ldrb	r3, [r7, #15]
 8005d64:	2b28      	cmp	r3, #40	@ 0x28
 8005d66:	d126      	bne.n	8005db6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	4a2e      	ldr	r2, [pc, #184]	@ (8005e24 <I2C_Slave_AF+0xe4>)
 8005d6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d7c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d86:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	681a      	ldr	r2, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d96:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f7fe ffcc 	bl	8004d4c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005db4:	e031      	b.n	8005e1a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005db6:	7bfb      	ldrb	r3, [r7, #15]
 8005db8:	2b21      	cmp	r3, #33	@ 0x21
 8005dba:	d129      	bne.n	8005e10 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	4a19      	ldr	r2, [pc, #100]	@ (8005e24 <I2C_Slave_AF+0xe4>)
 8005dc0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2221      	movs	r2, #33	@ 0x21
 8005dc6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005de6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005df0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e00:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f7fe f956 	bl	80040b4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7fe ff7d 	bl	8004d08 <HAL_I2C_SlaveTxCpltCallback>
}
 8005e0e:	e004      	b.n	8005e1a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e18:	615a      	str	r2, [r3, #20]
}
 8005e1a:	bf00      	nop
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	ffff0000 	.word	0xffff0000

08005e28 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2b10      	cmp	r3, #16
 8005e44:	d002      	beq.n	8005e4c <I2C_ITError+0x24>
 8005e46:	7bbb      	ldrb	r3, [r7, #14]
 8005e48:	2b40      	cmp	r3, #64	@ 0x40
 8005e4a:	d10a      	bne.n	8005e62 <I2C_ITError+0x3a>
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	2b22      	cmp	r3, #34	@ 0x22
 8005e50:	d107      	bne.n	8005e62 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e60:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005e62:	7bfb      	ldrb	r3, [r7, #15]
 8005e64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005e68:	2b28      	cmp	r3, #40	@ 0x28
 8005e6a:	d107      	bne.n	8005e7c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2200      	movs	r2, #0
 8005e70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2228      	movs	r2, #40	@ 0x28
 8005e76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005e7a:	e015      	b.n	8005ea8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e8a:	d00a      	beq.n	8005ea2 <I2C_ITError+0x7a>
 8005e8c:	7bfb      	ldrb	r3, [r7, #15]
 8005e8e:	2b60      	cmp	r3, #96	@ 0x60
 8005e90:	d007      	beq.n	8005ea2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005eb6:	d162      	bne.n	8005f7e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685a      	ldr	r2, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ec6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ecc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d020      	beq.n	8005f18 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005eda:	4a6a      	ldr	r2, [pc, #424]	@ (8006084 <I2C_ITError+0x25c>)
 8005edc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f7fd fb44 	bl	8003570 <HAL_DMA_Abort_IT>
 8005ee8:	4603      	mov	r3, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8089 	beq.w	8006002 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f022 0201 	bic.w	r2, r2, #1
 8005efe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2220      	movs	r2, #32
 8005f04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f12:	4610      	mov	r0, r2
 8005f14:	4798      	blx	r3
 8005f16:	e074      	b.n	8006002 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f1c:	4a59      	ldr	r2, [pc, #356]	@ (8006084 <I2C_ITError+0x25c>)
 8005f1e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f24:	4618      	mov	r0, r3
 8005f26:	f7fd fb23 	bl	8003570 <HAL_DMA_Abort_IT>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d068      	beq.n	8006002 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	695b      	ldr	r3, [r3, #20]
 8005f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d10b      	bne.n	8005f56 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691a      	ldr	r2, [r3, #16]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f48:	b2d2      	uxtb	r2, r2
 8005f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f50:	1c5a      	adds	r2, r3, #1
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0201 	bic.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	2220      	movs	r2, #32
 8005f6a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005f78:	4610      	mov	r0, r2
 8005f7a:	4798      	blx	r3
 8005f7c:	e041      	b.n	8006002 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b60      	cmp	r3, #96	@ 0x60
 8005f88:	d125      	bne.n	8005fd6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2220      	movs	r2, #32
 8005f8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2200      	movs	r2, #0
 8005f96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b40      	cmp	r3, #64	@ 0x40
 8005fa4:	d10b      	bne.n	8005fbe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f7fe fed0 	bl	8004d74 <HAL_I2C_AbortCpltCallback>
 8005fd4:	e015      	b.n	8006002 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	695b      	ldr	r3, [r3, #20]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fe0:	2b40      	cmp	r3, #64	@ 0x40
 8005fe2:	d10b      	bne.n	8005ffc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	691a      	ldr	r2, [r3, #16]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fee:	b2d2      	uxtb	r2, r2
 8005ff0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff6:	1c5a      	adds	r2, r3, #1
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f7fe feaf 	bl	8004d60 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006006:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10e      	bne.n	8006030 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006018:	2b00      	cmp	r3, #0
 800601a:	d109      	bne.n	8006030 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006022:	2b00      	cmp	r3, #0
 8006024:	d104      	bne.n	8006030 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800602c:	2b00      	cmp	r3, #0
 800602e:	d007      	beq.n	8006040 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685a      	ldr	r2, [r3, #4]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800603e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006046:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604c:	f003 0304 	and.w	r3, r3, #4
 8006050:	2b04      	cmp	r3, #4
 8006052:	d113      	bne.n	800607c <I2C_ITError+0x254>
 8006054:	7bfb      	ldrb	r3, [r7, #15]
 8006056:	2b28      	cmp	r3, #40	@ 0x28
 8006058:	d110      	bne.n	800607c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	4a0a      	ldr	r2, [pc, #40]	@ (8006088 <I2C_ITError+0x260>)
 800605e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2220      	movs	r2, #32
 800606a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fe fe68 	bl	8004d4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800607c:	bf00      	nop
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	080065c1 	.word	0x080065c1
 8006088:	ffff0000 	.word	0xffff0000

0800608c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b088      	sub	sp, #32
 8006090:	af02      	add	r7, sp, #8
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	461a      	mov	r2, r3
 800609a:	4603      	mov	r3, r0
 800609c:	817b      	strh	r3, [r7, #10]
 800609e:	460b      	mov	r3, r1
 80060a0:	813b      	strh	r3, [r7, #8]
 80060a2:	4613      	mov	r3, r2
 80060a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	6a3b      	ldr	r3, [r7, #32]
 80060bc:	2200      	movs	r2, #0
 80060be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 fb24 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 80060c8:	4603      	mov	r3, r0
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00d      	beq.n	80060ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060dc:	d103      	bne.n	80060e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e05f      	b.n	80061aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060ea:	897b      	ldrh	r3, [r7, #10]
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	6a3a      	ldr	r2, [r7, #32]
 80060fe:	492d      	ldr	r1, [pc, #180]	@ (80061b4 <I2C_RequestMemoryWrite+0x128>)
 8006100:	68f8      	ldr	r0, [r7, #12]
 8006102:	f000 fb7f 	bl	8006804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d001      	beq.n	8006110 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e04c      	b.n	80061aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006110:	2300      	movs	r3, #0
 8006112:	617b      	str	r3, [r7, #20]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	617b      	str	r3, [r7, #20]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	617b      	str	r3, [r7, #20]
 8006124:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006126:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006128:	6a39      	ldr	r1, [r7, #32]
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fc0a 	bl	8006944 <I2C_WaitOnTXEFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00d      	beq.n	8006152 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800613a:	2b04      	cmp	r3, #4
 800613c:	d107      	bne.n	800614e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800614c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e02b      	b.n	80061aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006152:	88fb      	ldrh	r3, [r7, #6]
 8006154:	2b01      	cmp	r3, #1
 8006156:	d105      	bne.n	8006164 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006158:	893b      	ldrh	r3, [r7, #8]
 800615a:	b2da      	uxtb	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	611a      	str	r2, [r3, #16]
 8006162:	e021      	b.n	80061a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006164:	893b      	ldrh	r3, [r7, #8]
 8006166:	0a1b      	lsrs	r3, r3, #8
 8006168:	b29b      	uxth	r3, r3
 800616a:	b2da      	uxtb	r2, r3
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006174:	6a39      	ldr	r1, [r7, #32]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f000 fbe4 	bl	8006944 <I2C_WaitOnTXEFlagUntilTimeout>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d00d      	beq.n	800619e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	2b04      	cmp	r3, #4
 8006188:	d107      	bne.n	800619a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006198:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e005      	b.n	80061aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800619e:	893b      	ldrh	r3, [r7, #8]
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	00010002 	.word	0x00010002

080061b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	60f8      	str	r0, [r7, #12]
 80061c0:	4608      	mov	r0, r1
 80061c2:	4611      	mov	r1, r2
 80061c4:	461a      	mov	r2, r3
 80061c6:	4603      	mov	r3, r0
 80061c8:	817b      	strh	r3, [r7, #10]
 80061ca:	460b      	mov	r3, r1
 80061cc:	813b      	strh	r3, [r7, #8]
 80061ce:	4613      	mov	r3, r2
 80061d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	6a3b      	ldr	r3, [r7, #32]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 fa86 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00d      	beq.n	8006226 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006214:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006218:	d103      	bne.n	8006222 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006220:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006222:	2303      	movs	r3, #3
 8006224:	e0aa      	b.n	800637c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006226:	897b      	ldrh	r3, [r7, #10]
 8006228:	b2db      	uxtb	r3, r3
 800622a:	461a      	mov	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006234:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	6a3a      	ldr	r2, [r7, #32]
 800623a:	4952      	ldr	r1, [pc, #328]	@ (8006384 <I2C_RequestMemoryRead+0x1cc>)
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 fae1 	bl	8006804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e097      	b.n	800637c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800624c:	2300      	movs	r3, #0
 800624e:	617b      	str	r3, [r7, #20]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	695b      	ldr	r3, [r3, #20]
 8006256:	617b      	str	r3, [r7, #20]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006264:	6a39      	ldr	r1, [r7, #32]
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fb6c 	bl	8006944 <I2C_WaitOnTXEFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00d      	beq.n	800628e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006276:	2b04      	cmp	r3, #4
 8006278:	d107      	bne.n	800628a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006288:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	e076      	b.n	800637c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800628e:	88fb      	ldrh	r3, [r7, #6]
 8006290:	2b01      	cmp	r3, #1
 8006292:	d105      	bne.n	80062a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006294:	893b      	ldrh	r3, [r7, #8]
 8006296:	b2da      	uxtb	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	611a      	str	r2, [r3, #16]
 800629e:	e021      	b.n	80062e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062a0:	893b      	ldrh	r3, [r7, #8]
 80062a2:	0a1b      	lsrs	r3, r3, #8
 80062a4:	b29b      	uxth	r3, r3
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062b0:	6a39      	ldr	r1, [r7, #32]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 fb46 	bl	8006944 <I2C_WaitOnTXEFlagUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00d      	beq.n	80062da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c2:	2b04      	cmp	r3, #4
 80062c4:	d107      	bne.n	80062d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e050      	b.n	800637c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062da:	893b      	ldrh	r3, [r7, #8]
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e6:	6a39      	ldr	r1, [r7, #32]
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fb2b 	bl	8006944 <I2C_WaitOnTXEFlagUntilTimeout>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00d      	beq.n	8006310 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062f8:	2b04      	cmp	r3, #4
 80062fa:	d107      	bne.n	800630c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800630a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800630c:	2301      	movs	r3, #1
 800630e:	e035      	b.n	800637c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800631e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	9300      	str	r3, [sp, #0]
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	2200      	movs	r2, #0
 8006328:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800632c:	68f8      	ldr	r0, [r7, #12]
 800632e:	f000 f9ef 	bl	8006710 <I2C_WaitOnFlagUntilTimeout>
 8006332:	4603      	mov	r3, r0
 8006334:	2b00      	cmp	r3, #0
 8006336:	d00d      	beq.n	8006354 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006346:	d103      	bne.n	8006350 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800634e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006350:	2303      	movs	r3, #3
 8006352:	e013      	b.n	800637c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006354:	897b      	ldrh	r3, [r7, #10]
 8006356:	b2db      	uxtb	r3, r3
 8006358:	f043 0301 	orr.w	r3, r3, #1
 800635c:	b2da      	uxtb	r2, r3
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	6a3a      	ldr	r2, [r7, #32]
 8006368:	4906      	ldr	r1, [pc, #24]	@ (8006384 <I2C_RequestMemoryRead+0x1cc>)
 800636a:	68f8      	ldr	r0, [r7, #12]
 800636c:	f000 fa4a 	bl	8006804 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006370:	4603      	mov	r3, r0
 8006372:	2b00      	cmp	r3, #0
 8006374:	d001      	beq.n	800637a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e000      	b.n	800637c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	00010002 	.word	0x00010002

08006388 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b086      	sub	sp, #24
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006394:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800639c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80063a4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063aa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685a      	ldr	r2, [r3, #4]
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80063ba:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d003      	beq.n	80063cc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80063c4:	697b      	ldr	r3, [r7, #20]
 80063c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063c8:	2200      	movs	r2, #0
 80063ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d003      	beq.n	80063dc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063d8:	2200      	movs	r2, #0
 80063da:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80063dc:	7cfb      	ldrb	r3, [r7, #19]
 80063de:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80063e2:	2b21      	cmp	r3, #33	@ 0x21
 80063e4:	d007      	beq.n	80063f6 <I2C_DMAXferCplt+0x6e>
 80063e6:	7cfb      	ldrb	r3, [r7, #19]
 80063e8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80063ec:	2b22      	cmp	r3, #34	@ 0x22
 80063ee:	d131      	bne.n	8006454 <I2C_DMAXferCplt+0xcc>
 80063f0:	7cbb      	ldrb	r3, [r7, #18]
 80063f2:	2b20      	cmp	r3, #32
 80063f4:	d12e      	bne.n	8006454 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685a      	ldr	r2, [r3, #4]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006404:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2200      	movs	r2, #0
 800640a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800640c:	7cfb      	ldrb	r3, [r7, #19]
 800640e:	2b29      	cmp	r3, #41	@ 0x29
 8006410:	d10a      	bne.n	8006428 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2221      	movs	r2, #33	@ 0x21
 8006416:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	2228      	movs	r2, #40	@ 0x28
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006420:	6978      	ldr	r0, [r7, #20]
 8006422:	f7fe fc71 	bl	8004d08 <HAL_I2C_SlaveTxCpltCallback>
 8006426:	e00c      	b.n	8006442 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006428:	7cfb      	ldrb	r3, [r7, #19]
 800642a:	2b2a      	cmp	r3, #42	@ 0x2a
 800642c:	d109      	bne.n	8006442 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	2222      	movs	r2, #34	@ 0x22
 8006432:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	2228      	movs	r2, #40	@ 0x28
 8006438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800643c:	6978      	ldr	r0, [r7, #20]
 800643e:	f7fe fc6d 	bl	8004d1c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8006450:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006452:	e074      	b.n	800653e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d06e      	beq.n	800653e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006464:	b29b      	uxth	r3, r3
 8006466:	2b01      	cmp	r3, #1
 8006468:	d107      	bne.n	800647a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006478:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006488:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006490:	d009      	beq.n	80064a6 <I2C_DMAXferCplt+0x11e>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b08      	cmp	r3, #8
 8006496:	d006      	beq.n	80064a6 <I2C_DMAXferCplt+0x11e>
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800649e:	d002      	beq.n	80064a6 <I2C_DMAXferCplt+0x11e>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2b20      	cmp	r3, #32
 80064a4:	d107      	bne.n	80064b6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681a      	ldr	r2, [r3, #0]
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064b4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	685a      	ldr	r2, [r3, #4]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80064c4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064d4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	2200      	movs	r2, #0
 80064da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80064e4:	6978      	ldr	r0, [r7, #20]
 80064e6:	f7fe fc3b 	bl	8004d60 <HAL_I2C_ErrorCallback>
}
 80064ea:	e028      	b.n	800653e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b40      	cmp	r3, #64	@ 0x40
 80064fe:	d10a      	bne.n	8006516 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	2200      	movs	r2, #0
 800650c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800650e:	6978      	ldr	r0, [r7, #20]
 8006510:	f7fa f85a 	bl	80005c8 <HAL_I2C_MemRxCpltCallback>
}
 8006514:	e013      	b.n	800653e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2b08      	cmp	r3, #8
 8006522:	d002      	beq.n	800652a <I2C_DMAXferCplt+0x1a2>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2b20      	cmp	r3, #32
 8006528:	d103      	bne.n	8006532 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	2200      	movs	r2, #0
 800652e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006530:	e002      	b.n	8006538 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	2212      	movs	r2, #18
 8006536:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8006538:	6978      	ldr	r0, [r7, #20]
 800653a:	f7fe fbdb 	bl	8004cf4 <HAL_I2C_MasterRxCpltCallback>
}
 800653e:	bf00      	nop
 8006540:	3718      	adds	r7, #24
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8006546:	b580      	push	{r7, lr}
 8006548:	b084      	sub	sp, #16
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006552:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006558:	2b00      	cmp	r3, #0
 800655a:	d003      	beq.n	8006564 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006560:	2200      	movs	r2, #0
 8006562:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006570:	2200      	movs	r2, #0
 8006572:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7fd f9b5 	bl	80038e4 <HAL_DMA_GetError>
 800657a:	4603      	mov	r3, r0
 800657c:	2b02      	cmp	r3, #2
 800657e:	d01b      	beq.n	80065b8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800658e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2200      	movs	r2, #0
 8006594:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2220      	movs	r2, #32
 800659a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065aa:	f043 0210 	orr.w	r2, r3, #16
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f7fe fbd4 	bl	8004d60 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065b8:	bf00      	nop
 80065ba:	3710      	adds	r7, #16
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b086      	sub	sp, #24
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065d8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80065da:	4b4b      	ldr	r3, [pc, #300]	@ (8006708 <I2C_DMAAbort+0x148>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	08db      	lsrs	r3, r3, #3
 80065e0:	4a4a      	ldr	r2, [pc, #296]	@ (800670c <I2C_DMAAbort+0x14c>)
 80065e2:	fba2 2303 	umull	r2, r3, r2, r3
 80065e6:	0a1a      	lsrs	r2, r3, #8
 80065e8:	4613      	mov	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4413      	add	r3, r2
 80065ee:	00da      	lsls	r2, r3, #3
 80065f0:	1ad3      	subs	r3, r2, r3
 80065f2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d106      	bne.n	8006608 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065fe:	f043 0220 	orr.w	r2, r3, #32
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8006606:	e00a      	b.n	800661e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	3b01      	subs	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800661c:	d0ea      	beq.n	80065f4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006622:	2b00      	cmp	r3, #0
 8006624:	d003      	beq.n	800662e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800662a:	2200      	movs	r2, #0
 800662c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006632:	2b00      	cmp	r3, #0
 8006634:	d003      	beq.n	800663e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800663a:	2200      	movs	r2, #0
 800663c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800663e:	697b      	ldr	r3, [r7, #20]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800664c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2200      	movs	r2, #0
 8006652:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006658:	2b00      	cmp	r3, #0
 800665a:	d003      	beq.n	8006664 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006660:	2200      	movs	r2, #0
 8006662:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006668:	2b00      	cmp	r3, #0
 800666a:	d003      	beq.n	8006674 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800666c:	697b      	ldr	r3, [r7, #20]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	2200      	movs	r2, #0
 8006672:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f022 0201 	bic.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800668a:	b2db      	uxtb	r3, r3
 800668c:	2b60      	cmp	r3, #96	@ 0x60
 800668e:	d10e      	bne.n	80066ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	2200      	movs	r2, #0
 80066a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80066a6:	6978      	ldr	r0, [r7, #20]
 80066a8:	f7fe fb64 	bl	8004d74 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066ac:	e027      	b.n	80066fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80066ae:	7cfb      	ldrb	r3, [r7, #19]
 80066b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80066b4:	2b28      	cmp	r3, #40	@ 0x28
 80066b6:	d117      	bne.n	80066e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2200      	movs	r2, #0
 80066dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066de:	697b      	ldr	r3, [r7, #20]
 80066e0:	2228      	movs	r2, #40	@ 0x28
 80066e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80066e6:	e007      	b.n	80066f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	2220      	movs	r2, #32
 80066ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80066f8:	6978      	ldr	r0, [r7, #20]
 80066fa:	f7fe fb31 	bl	8004d60 <HAL_I2C_ErrorCallback>
}
 80066fe:	bf00      	nop
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	2000002c 	.word	0x2000002c
 800670c:	14f8b589 	.word	0x14f8b589

08006710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	4613      	mov	r3, r2
 800671e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006720:	e048      	b.n	80067b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006728:	d044      	beq.n	80067b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800672a:	f7fb ffb9 	bl	80026a0 <HAL_GetTick>
 800672e:	4602      	mov	r2, r0
 8006730:	69bb      	ldr	r3, [r7, #24]
 8006732:	1ad3      	subs	r3, r2, r3
 8006734:	683a      	ldr	r2, [r7, #0]
 8006736:	429a      	cmp	r2, r3
 8006738:	d302      	bcc.n	8006740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d139      	bne.n	80067b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	0c1b      	lsrs	r3, r3, #16
 8006744:	b2db      	uxtb	r3, r3
 8006746:	2b01      	cmp	r3, #1
 8006748:	d10d      	bne.n	8006766 <I2C_WaitOnFlagUntilTimeout+0x56>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	695b      	ldr	r3, [r3, #20]
 8006750:	43da      	mvns	r2, r3
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	4013      	ands	r3, r2
 8006756:	b29b      	uxth	r3, r3
 8006758:	2b00      	cmp	r3, #0
 800675a:	bf0c      	ite	eq
 800675c:	2301      	moveq	r3, #1
 800675e:	2300      	movne	r3, #0
 8006760:	b2db      	uxtb	r3, r3
 8006762:	461a      	mov	r2, r3
 8006764:	e00c      	b.n	8006780 <I2C_WaitOnFlagUntilTimeout+0x70>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	699b      	ldr	r3, [r3, #24]
 800676c:	43da      	mvns	r2, r3
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	4013      	ands	r3, r2
 8006772:	b29b      	uxth	r3, r3
 8006774:	2b00      	cmp	r3, #0
 8006776:	bf0c      	ite	eq
 8006778:	2301      	moveq	r3, #1
 800677a:	2300      	movne	r3, #0
 800677c:	b2db      	uxtb	r3, r3
 800677e:	461a      	mov	r2, r3
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	429a      	cmp	r2, r3
 8006784:	d116      	bne.n	80067b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067a0:	f043 0220 	orr.w	r2, r3, #32
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e023      	b.n	80067fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	0c1b      	lsrs	r3, r3, #16
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d10d      	bne.n	80067da <I2C_WaitOnFlagUntilTimeout+0xca>
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	695b      	ldr	r3, [r3, #20]
 80067c4:	43da      	mvns	r2, r3
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	4013      	ands	r3, r2
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	bf0c      	ite	eq
 80067d0:	2301      	moveq	r3, #1
 80067d2:	2300      	movne	r3, #0
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	461a      	mov	r2, r3
 80067d8:	e00c      	b.n	80067f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	43da      	mvns	r2, r3
 80067e2:	68bb      	ldr	r3, [r7, #8]
 80067e4:	4013      	ands	r3, r2
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	bf0c      	ite	eq
 80067ec:	2301      	moveq	r3, #1
 80067ee:	2300      	movne	r3, #0
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	461a      	mov	r2, r3
 80067f4:	79fb      	ldrb	r3, [r7, #7]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d093      	beq.n	8006722 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
 8006810:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006812:	e071      	b.n	80068f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	695b      	ldr	r3, [r3, #20]
 800681a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800681e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006822:	d123      	bne.n	800686c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006832:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800683c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2220      	movs	r2, #32
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006858:	f043 0204 	orr.w	r2, r3, #4
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	2200      	movs	r2, #0
 8006864:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e067      	b.n	800693c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006872:	d041      	beq.n	80068f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006874:	f7fb ff14 	bl	80026a0 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	429a      	cmp	r2, r3
 8006882:	d302      	bcc.n	800688a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d136      	bne.n	80068f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	0c1b      	lsrs	r3, r3, #16
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	d10c      	bne.n	80068ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	43da      	mvns	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4013      	ands	r3, r2
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bf14      	ite	ne
 80068a6:	2301      	movne	r3, #1
 80068a8:	2300      	moveq	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	e00b      	b.n	80068c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	699b      	ldr	r3, [r3, #24]
 80068b4:	43da      	mvns	r2, r3
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	4013      	ands	r3, r2
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	2b00      	cmp	r3, #0
 80068be:	bf14      	ite	ne
 80068c0:	2301      	movne	r3, #1
 80068c2:	2300      	moveq	r3, #0
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d016      	beq.n	80068f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2200      	movs	r2, #0
 80068ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2200      	movs	r2, #0
 80068f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e021      	b.n	800693c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	0c1b      	lsrs	r3, r3, #16
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d10c      	bne.n	800691c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	695b      	ldr	r3, [r3, #20]
 8006908:	43da      	mvns	r2, r3
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4013      	ands	r3, r2
 800690e:	b29b      	uxth	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	bf14      	ite	ne
 8006914:	2301      	movne	r3, #1
 8006916:	2300      	moveq	r3, #0
 8006918:	b2db      	uxtb	r3, r3
 800691a:	e00b      	b.n	8006934 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	699b      	ldr	r3, [r3, #24]
 8006922:	43da      	mvns	r2, r3
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	4013      	ands	r3, r2
 8006928:	b29b      	uxth	r3, r3
 800692a:	2b00      	cmp	r3, #0
 800692c:	bf14      	ite	ne
 800692e:	2301      	movne	r3, #1
 8006930:	2300      	moveq	r3, #0
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	f47f af6d 	bne.w	8006814 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3710      	adds	r7, #16
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006950:	e034      	b.n	80069bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 f8b8 	bl	8006ac8 <I2C_IsAcknowledgeFailed>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d001      	beq.n	8006962 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e034      	b.n	80069cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d028      	beq.n	80069bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696a:	f7fb fe99 	bl	80026a0 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	429a      	cmp	r2, r3
 8006978:	d302      	bcc.n	8006980 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d11d      	bne.n	80069bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800698a:	2b80      	cmp	r3, #128	@ 0x80
 800698c:	d016      	beq.n	80069bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2200      	movs	r2, #0
 8006992:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2220      	movs	r2, #32
 8006998:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	f043 0220 	orr.w	r2, r3, #32
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	2200      	movs	r2, #0
 80069b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80069b8:	2301      	movs	r3, #1
 80069ba:	e007      	b.n	80069cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069c6:	2b80      	cmp	r3, #128	@ 0x80
 80069c8:	d1c3      	bne.n	8006952 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80069ca:	2300      	movs	r3, #0
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}

080069d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069e0:	e034      	b.n	8006a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f870 	bl	8006ac8 <I2C_IsAcknowledgeFailed>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d001      	beq.n	80069f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e034      	b.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069f8:	d028      	beq.n	8006a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fa:	f7fb fe51 	bl	80026a0 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d302      	bcc.n	8006a10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d11d      	bne.n	8006a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	f003 0304 	and.w	r3, r3, #4
 8006a1a:	2b04      	cmp	r3, #4
 8006a1c:	d016      	beq.n	8006a4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2220      	movs	r2, #32
 8006a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a38:	f043 0220 	orr.w	r2, r3, #32
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a48:	2301      	movs	r3, #1
 8006a4a:	e007      	b.n	8006a5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f003 0304 	and.w	r3, r3, #4
 8006a56:	2b04      	cmp	r3, #4
 8006a58:	d1c3      	bne.n	80069e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006a70:	4b13      	ldr	r3, [pc, #76]	@ (8006ac0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	08db      	lsrs	r3, r3, #3
 8006a76:	4a13      	ldr	r2, [pc, #76]	@ (8006ac4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006a78:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7c:	0a1a      	lsrs	r2, r3, #8
 8006a7e:	4613      	mov	r3, r2
 8006a80:	009b      	lsls	r3, r3, #2
 8006a82:	4413      	add	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	3b01      	subs	r3, #1
 8006a8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d107      	bne.n	8006aa2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a96:	f043 0220 	orr.w	r2, r3, #32
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	e008      	b.n	8006ab4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab0:	d0e9      	beq.n	8006a86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006ab2:	2300      	movs	r3, #0
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3714      	adds	r7, #20
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abe:	4770      	bx	lr
 8006ac0:	2000002c 	.word	0x2000002c
 8006ac4:	14f8b589 	.word	0x14f8b589

08006ac8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b083      	sub	sp, #12
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	695b      	ldr	r3, [r3, #20]
 8006ad6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ada:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ade:	d11b      	bne.n	8006b18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ae8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2220      	movs	r2, #32
 8006af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2200      	movs	r2, #0
 8006afc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b04:	f043 0204 	orr.w	r2, r3, #4
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006b14:	2301      	movs	r3, #1
 8006b16:	e000      	b.n	8006b1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b24:	4770      	bx	lr

08006b26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b26:	b480      	push	{r7}
 8006b28:	b083      	sub	sp, #12
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b32:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006b36:	d103      	bne.n	8006b40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006b3e:	e007      	b.n	8006b50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b44:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006b48:	d102      	bne.n	8006b50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2208      	movs	r2, #8
 8006b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b086      	sub	sp, #24
 8006b60:	af02      	add	r7, sp, #8
 8006b62:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d101      	bne.n	8006b6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e101      	b.n	8006d72 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006b7a:	b2db      	uxtb	r3, r3
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d106      	bne.n	8006b8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f007 fadb 	bl	800e144 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2203      	movs	r2, #3
 8006b92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006b9c:	d102      	bne.n	8006ba4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4618      	mov	r0, r3
 8006baa:	f003 fe32 	bl	800a812 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6818      	ldr	r0, [r3, #0]
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	7c1a      	ldrb	r2, [r3, #16]
 8006bb6:	f88d 2000 	strb.w	r2, [sp]
 8006bba:	3304      	adds	r3, #4
 8006bbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bbe:	f003 fd11 	bl	800a5e4 <USB_CoreInit>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2202      	movs	r2, #2
 8006bcc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	e0ce      	b.n	8006d72 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2100      	movs	r1, #0
 8006bda:	4618      	mov	r0, r3
 8006bdc:	f003 fe2a 	bl	800a834 <USB_SetCurrentMode>
 8006be0:	4603      	mov	r3, r0
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d005      	beq.n	8006bf2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2202      	movs	r2, #2
 8006bea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e0bf      	b.n	8006d72 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	73fb      	strb	r3, [r7, #15]
 8006bf6:	e04a      	b.n	8006c8e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006bf8:	7bfa      	ldrb	r2, [r7, #15]
 8006bfa:	6879      	ldr	r1, [r7, #4]
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	00db      	lsls	r3, r3, #3
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	440b      	add	r3, r1
 8006c06:	3315      	adds	r3, #21
 8006c08:	2201      	movs	r2, #1
 8006c0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c0c:	7bfa      	ldrb	r2, [r7, #15]
 8006c0e:	6879      	ldr	r1, [r7, #4]
 8006c10:	4613      	mov	r3, r2
 8006c12:	00db      	lsls	r3, r3, #3
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	440b      	add	r3, r1
 8006c1a:	3314      	adds	r3, #20
 8006c1c:	7bfa      	ldrb	r2, [r7, #15]
 8006c1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c20:	7bfa      	ldrb	r2, [r7, #15]
 8006c22:	7bfb      	ldrb	r3, [r7, #15]
 8006c24:	b298      	uxth	r0, r3
 8006c26:	6879      	ldr	r1, [r7, #4]
 8006c28:	4613      	mov	r3, r2
 8006c2a:	00db      	lsls	r3, r3, #3
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	440b      	add	r3, r1
 8006c32:	332e      	adds	r3, #46	@ 0x2e
 8006c34:	4602      	mov	r2, r0
 8006c36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006c38:	7bfa      	ldrb	r2, [r7, #15]
 8006c3a:	6879      	ldr	r1, [r7, #4]
 8006c3c:	4613      	mov	r3, r2
 8006c3e:	00db      	lsls	r3, r3, #3
 8006c40:	4413      	add	r3, r2
 8006c42:	009b      	lsls	r3, r3, #2
 8006c44:	440b      	add	r3, r1
 8006c46:	3318      	adds	r3, #24
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006c4c:	7bfa      	ldrb	r2, [r7, #15]
 8006c4e:	6879      	ldr	r1, [r7, #4]
 8006c50:	4613      	mov	r3, r2
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	4413      	add	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	440b      	add	r3, r1
 8006c5a:	331c      	adds	r3, #28
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	3320      	adds	r3, #32
 8006c70:	2200      	movs	r2, #0
 8006c72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006c74:	7bfa      	ldrb	r2, [r7, #15]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	3324      	adds	r3, #36	@ 0x24
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c88:	7bfb      	ldrb	r3, [r7, #15]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	73fb      	strb	r3, [r7, #15]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	791b      	ldrb	r3, [r3, #4]
 8006c92:	7bfa      	ldrb	r2, [r7, #15]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d3af      	bcc.n	8006bf8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c98:	2300      	movs	r3, #0
 8006c9a:	73fb      	strb	r3, [r7, #15]
 8006c9c:	e044      	b.n	8006d28 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006c9e:	7bfa      	ldrb	r2, [r7, #15]
 8006ca0:	6879      	ldr	r1, [r7, #4]
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	00db      	lsls	r3, r3, #3
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006cb4:	7bfa      	ldrb	r2, [r7, #15]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006cc6:	7bfa      	ldrb	r2, [r7, #15]
 8006cc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006cca:	7bfa      	ldrb	r2, [r7, #15]
 8006ccc:	6879      	ldr	r1, [r7, #4]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	00db      	lsls	r3, r3, #3
 8006cd2:	4413      	add	r3, r2
 8006cd4:	009b      	lsls	r3, r3, #2
 8006cd6:	440b      	add	r3, r1
 8006cd8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006cdc:	2200      	movs	r2, #0
 8006cde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006ce0:	7bfa      	ldrb	r2, [r7, #15]
 8006ce2:	6879      	ldr	r1, [r7, #4]
 8006ce4:	4613      	mov	r3, r2
 8006ce6:	00db      	lsls	r3, r3, #3
 8006ce8:	4413      	add	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	440b      	add	r3, r1
 8006cee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006cf6:	7bfa      	ldrb	r2, [r7, #15]
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4613      	mov	r3, r2
 8006cfc:	00db      	lsls	r3, r3, #3
 8006cfe:	4413      	add	r3, r2
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	440b      	add	r3, r1
 8006d04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006d08:	2200      	movs	r2, #0
 8006d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d0c:	7bfa      	ldrb	r2, [r7, #15]
 8006d0e:	6879      	ldr	r1, [r7, #4]
 8006d10:	4613      	mov	r3, r2
 8006d12:	00db      	lsls	r3, r3, #3
 8006d14:	4413      	add	r3, r2
 8006d16:	009b      	lsls	r3, r3, #2
 8006d18:	440b      	add	r3, r1
 8006d1a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d22:	7bfb      	ldrb	r3, [r7, #15]
 8006d24:	3301      	adds	r3, #1
 8006d26:	73fb      	strb	r3, [r7, #15]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	791b      	ldrb	r3, [r3, #4]
 8006d2c:	7bfa      	ldrb	r2, [r7, #15]
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d3b5      	bcc.n	8006c9e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	7c1a      	ldrb	r2, [r3, #16]
 8006d3a:	f88d 2000 	strb.w	r2, [sp]
 8006d3e:	3304      	adds	r3, #4
 8006d40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006d42:	f003 fdc3 	bl	800a8cc <USB_DevInit>
 8006d46:	4603      	mov	r3, r0
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d005      	beq.n	8006d58 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2202      	movs	r2, #2
 8006d50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006d54:	2301      	movs	r3, #1
 8006d56:	e00c      	b.n	8006d72 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2201      	movs	r2, #1
 8006d62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f004 fe0d 	bl	800b98a <USB_DevDisconnect>

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}

08006d7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006d7a:	b580      	push	{r7, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
 8006d80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <HAL_PCD_Start+0x1c>
 8006d92:	2302      	movs	r3, #2
 8006d94:	e022      	b.n	8006ddc <HAL_PCD_Start+0x62>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d009      	beq.n	8006dbe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006dae:	2b01      	cmp	r3, #1
 8006db0:	d105      	bne.n	8006dbe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006db6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4618      	mov	r0, r3
 8006dc4:	f003 fd14 	bl	800a7f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f004 fdbb 	bl	800b948 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006dda:	2300      	movs	r3, #0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3710      	adds	r7, #16
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b08d      	sub	sp, #52	@ 0x34
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f004 fe79 	bl	800baf2 <USB_GetMode>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f040 848c 	bne.w	8007720 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f004 fddd 	bl	800b9cc <USB_ReadInterrupts>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 8482 	beq.w	800771e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006e1a:	69fb      	ldr	r3, [r7, #28]
 8006e1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	0a1b      	lsrs	r3, r3, #8
 8006e24:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f004 fdca 	bl	800b9cc <USB_ReadInterrupts>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	f003 0302 	and.w	r3, r3, #2
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	d107      	bne.n	8006e52 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	695a      	ldr	r2, [r3, #20]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f002 0202 	and.w	r2, r2, #2
 8006e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f004 fdb8 	bl	800b9cc <USB_ReadInterrupts>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d161      	bne.n	8006f2a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	699a      	ldr	r2, [r3, #24]
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f022 0210 	bic.w	r2, r2, #16
 8006e74:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006e76:	6a3b      	ldr	r3, [r7, #32]
 8006e78:	6a1b      	ldr	r3, [r3, #32]
 8006e7a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	f003 020f 	and.w	r2, r3, #15
 8006e82:	4613      	mov	r3, r2
 8006e84:	00db      	lsls	r3, r3, #3
 8006e86:	4413      	add	r3, r2
 8006e88:	009b      	lsls	r3, r3, #2
 8006e8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e8e:	687a      	ldr	r2, [r7, #4]
 8006e90:	4413      	add	r3, r2
 8006e92:	3304      	adds	r3, #4
 8006e94:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006e96:	69bb      	ldr	r3, [r7, #24]
 8006e98:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006e9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006ea0:	d124      	bne.n	8006eec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d035      	beq.n	8006f1a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006eb2:	69bb      	ldr	r3, [r7, #24]
 8006eb4:	091b      	lsrs	r3, r3, #4
 8006eb6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ebc:	b29b      	uxth	r3, r3
 8006ebe:	461a      	mov	r2, r3
 8006ec0:	6a38      	ldr	r0, [r7, #32]
 8006ec2:	f004 fbef 	bl	800b6a4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	68da      	ldr	r2, [r3, #12]
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	091b      	lsrs	r3, r3, #4
 8006ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ed2:	441a      	add	r2, r3
 8006ed4:	697b      	ldr	r3, [r7, #20]
 8006ed6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	695a      	ldr	r2, [r3, #20]
 8006edc:	69bb      	ldr	r3, [r7, #24]
 8006ede:	091b      	lsrs	r3, r3, #4
 8006ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ee4:	441a      	add	r2, r3
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	615a      	str	r2, [r3, #20]
 8006eea:	e016      	b.n	8006f1a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006eec:	69bb      	ldr	r3, [r7, #24]
 8006eee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006ef2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006ef6:	d110      	bne.n	8006f1a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006efe:	2208      	movs	r2, #8
 8006f00:	4619      	mov	r1, r3
 8006f02:	6a38      	ldr	r0, [r7, #32]
 8006f04:	f004 fbce 	bl	800b6a4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	69bb      	ldr	r3, [r7, #24]
 8006f0e:	091b      	lsrs	r3, r3, #4
 8006f10:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f14:	441a      	add	r2, r3
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	699a      	ldr	r2, [r3, #24]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	f042 0210 	orr.w	r2, r2, #16
 8006f28:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f004 fd4c 	bl	800b9cc <USB_ReadInterrupts>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006f3a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006f3e:	f040 80a7 	bne.w	8007090 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006f42:	2300      	movs	r3, #0
 8006f44:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f004 fd51 	bl	800b9f2 <USB_ReadDevAllOutEpInterrupt>
 8006f50:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006f52:	e099      	b.n	8007088 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f56:	f003 0301 	and.w	r3, r3, #1
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 808e 	beq.w	800707c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f66:	b2d2      	uxtb	r2, r2
 8006f68:	4611      	mov	r1, r2
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f004 fd75 	bl	800ba5a <USB_ReadDevOutEPInterrupt>
 8006f70:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d00c      	beq.n	8006f96 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7e:	015a      	lsls	r2, r3, #5
 8006f80:	69fb      	ldr	r3, [r7, #28]
 8006f82:	4413      	add	r3, r2
 8006f84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006f8e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 fea3 	bl	8007cdc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f003 0308 	and.w	r3, r3, #8
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d00c      	beq.n	8006fba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa2:	015a      	lsls	r2, r3, #5
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fac:	461a      	mov	r2, r3
 8006fae:	2308      	movs	r3, #8
 8006fb0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8006fb2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 ff79 	bl	8007eac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	f003 0310 	and.w	r3, r3, #16
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d008      	beq.n	8006fd6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc6:	015a      	lsls	r2, r3, #5
 8006fc8:	69fb      	ldr	r3, [r7, #28]
 8006fca:	4413      	add	r3, r2
 8006fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006fd0:	461a      	mov	r2, r3
 8006fd2:	2310      	movs	r3, #16
 8006fd4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f003 0302 	and.w	r3, r3, #2
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d030      	beq.n	8007042 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	695b      	ldr	r3, [r3, #20]
 8006fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fe8:	2b80      	cmp	r3, #128	@ 0x80
 8006fea:	d109      	bne.n	8007000 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006fec:	69fb      	ldr	r3, [r7, #28]
 8006fee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	69fa      	ldr	r2, [r7, #28]
 8006ff6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ffa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006ffe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007002:	4613      	mov	r3, r2
 8007004:	00db      	lsls	r3, r3, #3
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	4413      	add	r3, r2
 8007012:	3304      	adds	r3, #4
 8007014:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	78db      	ldrb	r3, [r3, #3]
 800701a:	2b01      	cmp	r3, #1
 800701c:	d108      	bne.n	8007030 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	2200      	movs	r2, #0
 8007022:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	b2db      	uxtb	r3, r3
 8007028:	4619      	mov	r1, r3
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f007 f986 	bl	800e33c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800703c:	461a      	mov	r2, r3
 800703e:	2302      	movs	r3, #2
 8007040:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	f003 0320 	and.w	r3, r3, #32
 8007048:	2b00      	cmp	r3, #0
 800704a:	d008      	beq.n	800705e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800704c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800704e:	015a      	lsls	r2, r3, #5
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007058:	461a      	mov	r2, r3
 800705a:	2320      	movs	r3, #32
 800705c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800705e:	693b      	ldr	r3, [r7, #16]
 8007060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d009      	beq.n	800707c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007068:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007074:	461a      	mov	r2, r3
 8007076:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800707a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800707c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800707e:	3301      	adds	r3, #1
 8007080:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007084:	085b      	lsrs	r3, r3, #1
 8007086:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800708a:	2b00      	cmp	r3, #0
 800708c:	f47f af62 	bne.w	8006f54 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	4618      	mov	r0, r3
 8007096:	f004 fc99 	bl	800b9cc <USB_ReadInterrupts>
 800709a:	4603      	mov	r3, r0
 800709c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80070a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80070a4:	f040 80db 	bne.w	800725e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f004 fcba 	bl	800ba26 <USB_ReadDevAllInEpInterrupt>
 80070b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80070b8:	e0cd      	b.n	8007256 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80070ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 80c2 	beq.w	800724a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	4611      	mov	r1, r2
 80070d0:	4618      	mov	r0, r3
 80070d2:	f004 fce0 	bl	800ba96 <USB_ReadDevInEPInterrupt>
 80070d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	f003 0301 	and.w	r3, r3, #1
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d057      	beq.n	8007192 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80070e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e4:	f003 030f 	and.w	r3, r3, #15
 80070e8:	2201      	movs	r2, #1
 80070ea:	fa02 f303 	lsl.w	r3, r2, r3
 80070ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80070f0:	69fb      	ldr	r3, [r7, #28]
 80070f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80070f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	43db      	mvns	r3, r3
 80070fc:	69f9      	ldr	r1, [r7, #28]
 80070fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007102:	4013      	ands	r3, r2
 8007104:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	015a      	lsls	r2, r3, #5
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	4413      	add	r3, r2
 800710e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007112:	461a      	mov	r2, r3
 8007114:	2301      	movs	r3, #1
 8007116:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	799b      	ldrb	r3, [r3, #6]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d132      	bne.n	8007186 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007124:	4613      	mov	r3, r2
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	4413      	add	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	440b      	add	r3, r1
 800712e:	3320      	adds	r3, #32
 8007130:	6819      	ldr	r1, [r3, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007136:	4613      	mov	r3, r2
 8007138:	00db      	lsls	r3, r3, #3
 800713a:	4413      	add	r3, r2
 800713c:	009b      	lsls	r3, r3, #2
 800713e:	4403      	add	r3, r0
 8007140:	331c      	adds	r3, #28
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4419      	add	r1, r3
 8007146:	6878      	ldr	r0, [r7, #4]
 8007148:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800714a:	4613      	mov	r3, r2
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4403      	add	r3, r0
 8007154:	3320      	adds	r3, #32
 8007156:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800715a:	2b00      	cmp	r3, #0
 800715c:	d113      	bne.n	8007186 <HAL_PCD_IRQHandler+0x3a2>
 800715e:	6879      	ldr	r1, [r7, #4]
 8007160:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007162:	4613      	mov	r3, r2
 8007164:	00db      	lsls	r3, r3, #3
 8007166:	4413      	add	r3, r2
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	440b      	add	r3, r1
 800716c:	3324      	adds	r3, #36	@ 0x24
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	2b00      	cmp	r3, #0
 8007172:	d108      	bne.n	8007186 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6818      	ldr	r0, [r3, #0]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800717e:	461a      	mov	r2, r3
 8007180:	2101      	movs	r1, #1
 8007182:	f004 fce7 	bl	800bb54 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007188:	b2db      	uxtb	r3, r3
 800718a:	4619      	mov	r1, r3
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f007 f85a 	bl	800e246 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d008      	beq.n	80071ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800719c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800719e:	015a      	lsls	r2, r3, #5
 80071a0:	69fb      	ldr	r3, [r7, #28]
 80071a2:	4413      	add	r3, r2
 80071a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071a8:	461a      	mov	r2, r3
 80071aa:	2308      	movs	r3, #8
 80071ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f003 0310 	and.w	r3, r3, #16
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071c4:	461a      	mov	r2, r3
 80071c6:	2310      	movs	r3, #16
 80071c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d008      	beq.n	80071e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80071d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80071e0:	461a      	mov	r2, r3
 80071e2:	2340      	movs	r3, #64	@ 0x40
 80071e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f003 0302 	and.w	r3, r3, #2
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d023      	beq.n	8007238 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80071f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80071f2:	6a38      	ldr	r0, [r7, #32]
 80071f4:	f003 fcce 	bl	800ab94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80071f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071fa:	4613      	mov	r3, r2
 80071fc:	00db      	lsls	r3, r3, #3
 80071fe:	4413      	add	r3, r2
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	3310      	adds	r3, #16
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	4413      	add	r3, r2
 8007208:	3304      	adds	r3, #4
 800720a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	78db      	ldrb	r3, [r3, #3]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d108      	bne.n	8007226 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	2200      	movs	r2, #0
 8007218:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800721a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800721c:	b2db      	uxtb	r3, r3
 800721e:	4619      	mov	r1, r3
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f007 f89d 	bl	800e360 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007228:	015a      	lsls	r2, r3, #5
 800722a:	69fb      	ldr	r3, [r7, #28]
 800722c:	4413      	add	r3, r2
 800722e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007232:	461a      	mov	r2, r3
 8007234:	2302      	movs	r3, #2
 8007236:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800723e:	2b00      	cmp	r3, #0
 8007240:	d003      	beq.n	800724a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007242:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 fcbd 	bl	8007bc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800724a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800724c:	3301      	adds	r3, #1
 800724e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8007250:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8007256:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007258:	2b00      	cmp	r3, #0
 800725a:	f47f af2e 	bne.w	80070ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4618      	mov	r0, r3
 8007264:	f004 fbb2 	bl	800b9cc <USB_ReadInterrupts>
 8007268:	4603      	mov	r3, r0
 800726a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800726e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007272:	d122      	bne.n	80072ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007274:	69fb      	ldr	r3, [r7, #28]
 8007276:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800727a:	685b      	ldr	r3, [r3, #4]
 800727c:	69fa      	ldr	r2, [r7, #28]
 800727e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007282:	f023 0301 	bic.w	r3, r3, #1
 8007286:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800728e:	2b01      	cmp	r3, #1
 8007290:	d108      	bne.n	80072a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800729a:	2100      	movs	r1, #0
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 fea3 	bl	8007fe8 <HAL_PCDEx_LPM_Callback>
 80072a2:	e002      	b.n	80072aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f007 f83b 	bl	800e320 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	695a      	ldr	r2, [r3, #20]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80072b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4618      	mov	r0, r3
 80072c0:	f004 fb84 	bl	800b9cc <USB_ReadInterrupts>
 80072c4:	4603      	mov	r3, r0
 80072c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80072ce:	d112      	bne.n	80072f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072d6:	689b      	ldr	r3, [r3, #8]
 80072d8:	f003 0301 	and.w	r3, r3, #1
 80072dc:	2b01      	cmp	r3, #1
 80072de:	d102      	bne.n	80072e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f006 fff7 	bl	800e2d4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	695a      	ldr	r2, [r3, #20]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80072f4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f004 fb66 	bl	800b9cc <USB_ReadInterrupts>
 8007300:	4603      	mov	r3, r0
 8007302:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800730a:	f040 80b7 	bne.w	800747c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800731c:	f023 0301 	bic.w	r3, r3, #1
 8007320:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2110      	movs	r1, #16
 8007328:	4618      	mov	r0, r3
 800732a:	f003 fc33 	bl	800ab94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800732e:	2300      	movs	r3, #0
 8007330:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007332:	e046      	b.n	80073c2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8007334:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007336:	015a      	lsls	r2, r3, #5
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	4413      	add	r3, r2
 800733c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007340:	461a      	mov	r2, r3
 8007342:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007346:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	4413      	add	r3, r2
 8007350:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007358:	0151      	lsls	r1, r2, #5
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	440a      	add	r2, r1
 800735e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007362:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007366:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8007368:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007374:	461a      	mov	r2, r3
 8007376:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800737a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800737c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800738c:	0151      	lsls	r1, r2, #5
 800738e:	69fa      	ldr	r2, [r7, #28]
 8007390:	440a      	add	r2, r1
 8007392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007396:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800739a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800739c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ac:	0151      	lsls	r1, r2, #5
 80073ae:	69fa      	ldr	r2, [r7, #28]
 80073b0:	440a      	add	r2, r1
 80073b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80073ba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073be:	3301      	adds	r3, #1
 80073c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	791b      	ldrb	r3, [r3, #4]
 80073c6:	461a      	mov	r2, r3
 80073c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d3b2      	bcc.n	8007334 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073d4:	69db      	ldr	r3, [r3, #28]
 80073d6:	69fa      	ldr	r2, [r7, #28]
 80073d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073dc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80073e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	7bdb      	ldrb	r3, [r3, #15]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d016      	beq.n	8007418 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80073f4:	69fa      	ldr	r2, [r7, #28]
 80073f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073fa:	f043 030b 	orr.w	r3, r3, #11
 80073fe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800740a:	69fa      	ldr	r2, [r7, #28]
 800740c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007410:	f043 030b 	orr.w	r3, r3, #11
 8007414:	6453      	str	r3, [r2, #68]	@ 0x44
 8007416:	e015      	b.n	8007444 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800741e:	695b      	ldr	r3, [r3, #20]
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007426:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800742a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800742e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007430:	69fb      	ldr	r3, [r7, #28]
 8007432:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	69fa      	ldr	r2, [r7, #28]
 800743a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800743e:	f043 030b 	orr.w	r3, r3, #11
 8007442:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	69fa      	ldr	r2, [r7, #28]
 800744e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007452:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8007456:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6818      	ldr	r0, [r3, #0]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8007466:	461a      	mov	r2, r3
 8007468:	f004 fb74 	bl	800bb54 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695a      	ldr	r2, [r3, #20]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800747a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	4618      	mov	r0, r3
 8007482:	f004 faa3 	bl	800b9cc <USB_ReadInterrupts>
 8007486:	4603      	mov	r3, r0
 8007488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800748c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007490:	d123      	bne.n	80074da <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	4618      	mov	r0, r3
 8007498:	f004 fb39 	bl	800bb0e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4618      	mov	r0, r3
 80074a2:	f003 fbf0 	bl	800ac86 <USB_GetDevSpeed>
 80074a6:	4603      	mov	r3, r0
 80074a8:	461a      	mov	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681c      	ldr	r4, [r3, #0]
 80074b2:	f001 f9c9 	bl	8008848 <HAL_RCC_GetHCLKFreq>
 80074b6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074bc:	461a      	mov	r2, r3
 80074be:	4620      	mov	r0, r4
 80074c0:	f003 f8f4 	bl	800a6ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f006 fee6 	bl	800e296 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	695a      	ldr	r2, [r3, #20]
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80074d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	4618      	mov	r0, r3
 80074e0:	f004 fa74 	bl	800b9cc <USB_ReadInterrupts>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f003 0308 	and.w	r3, r3, #8
 80074ea:	2b08      	cmp	r3, #8
 80074ec:	d10a      	bne.n	8007504 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f006 fec3 	bl	800e27a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f002 0208 	and.w	r2, r2, #8
 8007502:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4618      	mov	r0, r3
 800750a:	f004 fa5f 	bl	800b9cc <USB_ReadInterrupts>
 800750e:	4603      	mov	r3, r0
 8007510:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007514:	2b80      	cmp	r3, #128	@ 0x80
 8007516:	d123      	bne.n	8007560 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	699b      	ldr	r3, [r3, #24]
 800751c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007520:	6a3b      	ldr	r3, [r7, #32]
 8007522:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007524:	2301      	movs	r3, #1
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
 8007528:	e014      	b.n	8007554 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800752a:	6879      	ldr	r1, [r7, #4]
 800752c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800752e:	4613      	mov	r3, r2
 8007530:	00db      	lsls	r3, r3, #3
 8007532:	4413      	add	r3, r2
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	440b      	add	r3, r1
 8007538:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	2b01      	cmp	r3, #1
 8007540:	d105      	bne.n	800754e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8007542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007544:	b2db      	uxtb	r3, r3
 8007546:	4619      	mov	r1, r3
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fb0a 	bl	8007b62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800754e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007550:	3301      	adds	r3, #1
 8007552:	627b      	str	r3, [r7, #36]	@ 0x24
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	791b      	ldrb	r3, [r3, #4]
 8007558:	461a      	mov	r2, r3
 800755a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800755c:	4293      	cmp	r3, r2
 800755e:	d3e4      	bcc.n	800752a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4618      	mov	r0, r3
 8007566:	f004 fa31 	bl	800b9cc <USB_ReadInterrupts>
 800756a:	4603      	mov	r3, r0
 800756c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007570:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007574:	d13c      	bne.n	80075f0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007576:	2301      	movs	r3, #1
 8007578:	627b      	str	r3, [r7, #36]	@ 0x24
 800757a:	e02b      	b.n	80075d4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	015a      	lsls	r2, r3, #5
 8007580:	69fb      	ldr	r3, [r7, #28]
 8007582:	4413      	add	r3, r2
 8007584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007590:	4613      	mov	r3, r2
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	3318      	adds	r3, #24
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d115      	bne.n	80075ce <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80075a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	da12      	bge.n	80075ce <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80075a8:	6879      	ldr	r1, [r7, #4]
 80075aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ac:	4613      	mov	r3, r2
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	3317      	adds	r3, #23
 80075b8:	2201      	movs	r2, #1
 80075ba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80075bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075be:	b2db      	uxtb	r3, r3
 80075c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80075c4:	b2db      	uxtb	r3, r3
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 faca 	bl	8007b62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	3301      	adds	r3, #1
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	791b      	ldrb	r3, [r3, #4]
 80075d8:	461a      	mov	r2, r3
 80075da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075dc:	4293      	cmp	r3, r2
 80075de:	d3cd      	bcc.n	800757c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	695a      	ldr	r2, [r3, #20]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80075ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4618      	mov	r0, r3
 80075f6:	f004 f9e9 	bl	800b9cc <USB_ReadInterrupts>
 80075fa:	4603      	mov	r3, r0
 80075fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007600:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8007604:	d156      	bne.n	80076b4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007606:	2301      	movs	r3, #1
 8007608:	627b      	str	r3, [r7, #36]	@ 0x24
 800760a:	e045      	b.n	8007698 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	015a      	lsls	r2, r3, #5
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	4413      	add	r3, r2
 8007614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800761c:	6879      	ldr	r1, [r7, #4]
 800761e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007620:	4613      	mov	r3, r2
 8007622:	00db      	lsls	r3, r3, #3
 8007624:	4413      	add	r3, r2
 8007626:	009b      	lsls	r3, r3, #2
 8007628:	440b      	add	r3, r1
 800762a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b01      	cmp	r3, #1
 8007632:	d12e      	bne.n	8007692 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007634:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007636:	2b00      	cmp	r3, #0
 8007638:	da2b      	bge.n	8007692 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800763a:	69bb      	ldr	r3, [r7, #24]
 800763c:	0c1a      	lsrs	r2, r3, #16
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8007644:	4053      	eors	r3, r2
 8007646:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800764a:	2b00      	cmp	r3, #0
 800764c:	d121      	bne.n	8007692 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007652:	4613      	mov	r3, r2
 8007654:	00db      	lsls	r3, r3, #3
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	440b      	add	r3, r1
 800765c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8007660:	2201      	movs	r2, #1
 8007662:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	699b      	ldr	r3, [r3, #24]
 8007668:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800766c:	6a3b      	ldr	r3, [r7, #32]
 800766e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8007670:	6a3b      	ldr	r3, [r7, #32]
 8007672:	695b      	ldr	r3, [r3, #20]
 8007674:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007678:	2b00      	cmp	r3, #0
 800767a:	d10a      	bne.n	8007692 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	69fa      	ldr	r2, [r7, #28]
 8007686:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800768a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800768e:	6053      	str	r3, [r2, #4]
            break;
 8007690:	e008      	b.n	80076a4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007694:	3301      	adds	r3, #1
 8007696:	627b      	str	r3, [r7, #36]	@ 0x24
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	791b      	ldrb	r3, [r3, #4]
 800769c:	461a      	mov	r2, r3
 800769e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d3b3      	bcc.n	800760c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	695a      	ldr	r2, [r3, #20]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80076b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4618      	mov	r0, r3
 80076ba:	f004 f987 	bl	800b9cc <USB_ReadInterrupts>
 80076be:	4603      	mov	r3, r0
 80076c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80076c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076c8:	d10a      	bne.n	80076e0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f006 fe5a 	bl	800e384 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	695a      	ldr	r2, [r3, #20]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80076de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4618      	mov	r0, r3
 80076e6:	f004 f971 	bl	800b9cc <USB_ReadInterrupts>
 80076ea:	4603      	mov	r3, r0
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b04      	cmp	r3, #4
 80076f2:	d115      	bne.n	8007720 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	685b      	ldr	r3, [r3, #4]
 80076fa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	f003 0304 	and.w	r3, r3, #4
 8007702:	2b00      	cmp	r3, #0
 8007704:	d002      	beq.n	800770c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f006 fe4a 	bl	800e3a0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	6859      	ldr	r1, [r3, #4]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	69ba      	ldr	r2, [r7, #24]
 8007718:	430a      	orrs	r2, r1
 800771a:	605a      	str	r2, [r3, #4]
 800771c:	e000      	b.n	8007720 <HAL_PCD_IRQHandler+0x93c>
      return;
 800771e:	bf00      	nop
    }
  }
}
 8007720:	3734      	adds	r7, #52	@ 0x34
 8007722:	46bd      	mov	sp, r7
 8007724:	bd90      	pop	{r4, r7, pc}

08007726 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
 800772e:	460b      	mov	r3, r1
 8007730:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_PCD_SetAddress+0x1a>
 800773c:	2302      	movs	r3, #2
 800773e:	e012      	b.n	8007766 <HAL_PCD_SetAddress+0x40>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	78fa      	ldrb	r2, [r7, #3]
 800774c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f004 f8d0 	bl	800b8fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2200      	movs	r2, #0
 8007760:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	3708      	adds	r7, #8
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}

0800776e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800776e:	b580      	push	{r7, lr}
 8007770:	b084      	sub	sp, #16
 8007772:	af00      	add	r7, sp, #0
 8007774:	6078      	str	r0, [r7, #4]
 8007776:	4608      	mov	r0, r1
 8007778:	4611      	mov	r1, r2
 800777a:	461a      	mov	r2, r3
 800777c:	4603      	mov	r3, r0
 800777e:	70fb      	strb	r3, [r7, #3]
 8007780:	460b      	mov	r3, r1
 8007782:	803b      	strh	r3, [r7, #0]
 8007784:	4613      	mov	r3, r2
 8007786:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8007788:	2300      	movs	r3, #0
 800778a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800778c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007790:	2b00      	cmp	r3, #0
 8007792:	da0f      	bge.n	80077b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007794:	78fb      	ldrb	r3, [r7, #3]
 8007796:	f003 020f 	and.w	r2, r3, #15
 800779a:	4613      	mov	r3, r2
 800779c:	00db      	lsls	r3, r3, #3
 800779e:	4413      	add	r3, r2
 80077a0:	009b      	lsls	r3, r3, #2
 80077a2:	3310      	adds	r3, #16
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	4413      	add	r3, r2
 80077a8:	3304      	adds	r3, #4
 80077aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	705a      	strb	r2, [r3, #1]
 80077b2:	e00f      	b.n	80077d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077b4:	78fb      	ldrb	r3, [r7, #3]
 80077b6:	f003 020f 	and.w	r2, r3, #15
 80077ba:	4613      	mov	r3, r2
 80077bc:	00db      	lsls	r3, r3, #3
 80077be:	4413      	add	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	4413      	add	r3, r2
 80077ca:	3304      	adds	r3, #4
 80077cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2200      	movs	r2, #0
 80077d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	f003 030f 	and.w	r3, r3, #15
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80077e0:	883b      	ldrh	r3, [r7, #0]
 80077e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	78ba      	ldrb	r2, [r7, #2]
 80077ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	785b      	ldrb	r3, [r3, #1]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d004      	beq.n	8007802 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007802:	78bb      	ldrb	r3, [r7, #2]
 8007804:	2b02      	cmp	r3, #2
 8007806:	d102      	bne.n	800780e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_PCD_EP_Open+0xae>
 8007818:	2302      	movs	r3, #2
 800781a:	e00e      	b.n	800783a <HAL_PCD_EP_Open+0xcc>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68f9      	ldr	r1, [r7, #12]
 800782a:	4618      	mov	r0, r3
 800782c:	f003 fa50 	bl	800acd0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2200      	movs	r2, #0
 8007834:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8007838:	7afb      	ldrb	r3, [r7, #11]
}
 800783a:	4618      	mov	r0, r3
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
 800784a:	460b      	mov	r3, r1
 800784c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800784e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007852:	2b00      	cmp	r3, #0
 8007854:	da0f      	bge.n	8007876 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007856:	78fb      	ldrb	r3, [r7, #3]
 8007858:	f003 020f 	and.w	r2, r3, #15
 800785c:	4613      	mov	r3, r2
 800785e:	00db      	lsls	r3, r3, #3
 8007860:	4413      	add	r3, r2
 8007862:	009b      	lsls	r3, r3, #2
 8007864:	3310      	adds	r3, #16
 8007866:	687a      	ldr	r2, [r7, #4]
 8007868:	4413      	add	r3, r2
 800786a:	3304      	adds	r3, #4
 800786c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2201      	movs	r2, #1
 8007872:	705a      	strb	r2, [r3, #1]
 8007874:	e00f      	b.n	8007896 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007876:	78fb      	ldrb	r3, [r7, #3]
 8007878:	f003 020f 	and.w	r2, r3, #15
 800787c:	4613      	mov	r3, r2
 800787e:	00db      	lsls	r3, r3, #3
 8007880:	4413      	add	r3, r2
 8007882:	009b      	lsls	r3, r3, #2
 8007884:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	4413      	add	r3, r2
 800788c:	3304      	adds	r3, #4
 800788e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2200      	movs	r2, #0
 8007894:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8007896:	78fb      	ldrb	r3, [r7, #3]
 8007898:	f003 030f 	and.w	r3, r3, #15
 800789c:	b2da      	uxtb	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80078a8:	2b01      	cmp	r3, #1
 80078aa:	d101      	bne.n	80078b0 <HAL_PCD_EP_Close+0x6e>
 80078ac:	2302      	movs	r3, #2
 80078ae:	e00e      	b.n	80078ce <HAL_PCD_EP_Close+0x8c>
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68f9      	ldr	r1, [r7, #12]
 80078be:	4618      	mov	r0, r3
 80078c0:	f003 fa8e 	bl	800ade0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b086      	sub	sp, #24
 80078da:	af00      	add	r7, sp, #0
 80078dc:	60f8      	str	r0, [r7, #12]
 80078de:	607a      	str	r2, [r7, #4]
 80078e0:	603b      	str	r3, [r7, #0]
 80078e2:	460b      	mov	r3, r1
 80078e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078e6:	7afb      	ldrb	r3, [r7, #11]
 80078e8:	f003 020f 	and.w	r2, r3, #15
 80078ec:	4613      	mov	r3, r2
 80078ee:	00db      	lsls	r3, r3, #3
 80078f0:	4413      	add	r3, r2
 80078f2:	009b      	lsls	r3, r3, #2
 80078f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	4413      	add	r3, r2
 80078fc:	3304      	adds	r3, #4
 80078fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	687a      	ldr	r2, [r7, #4]
 8007904:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	2200      	movs	r2, #0
 8007910:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	2200      	movs	r2, #0
 8007916:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007918:	7afb      	ldrb	r3, [r7, #11]
 800791a:	f003 030f 	and.w	r3, r3, #15
 800791e:	b2da      	uxtb	r2, r3
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	799b      	ldrb	r3, [r3, #6]
 8007928:	2b01      	cmp	r3, #1
 800792a:	d102      	bne.n	8007932 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800792c:	687a      	ldr	r2, [r7, #4]
 800792e:	697b      	ldr	r3, [r7, #20]
 8007930:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6818      	ldr	r0, [r3, #0]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	799b      	ldrb	r3, [r3, #6]
 800793a:	461a      	mov	r2, r3
 800793c:	6979      	ldr	r1, [r7, #20]
 800793e:	f003 fb2b 	bl	800af98 <USB_EPStartXfer>

  return HAL_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007958:	78fb      	ldrb	r3, [r7, #3]
 800795a:	f003 020f 	and.w	r2, r3, #15
 800795e:	6879      	ldr	r1, [r7, #4]
 8007960:	4613      	mov	r3, r2
 8007962:	00db      	lsls	r3, r3, #3
 8007964:	4413      	add	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	440b      	add	r3, r1
 800796a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800796e:	681b      	ldr	r3, [r3, #0]
}
 8007970:	4618      	mov	r0, r3
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	607a      	str	r2, [r7, #4]
 8007986:	603b      	str	r3, [r7, #0]
 8007988:	460b      	mov	r3, r1
 800798a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800798c:	7afb      	ldrb	r3, [r7, #11]
 800798e:	f003 020f 	and.w	r2, r3, #15
 8007992:	4613      	mov	r3, r2
 8007994:	00db      	lsls	r3, r3, #3
 8007996:	4413      	add	r3, r2
 8007998:	009b      	lsls	r3, r3, #2
 800799a:	3310      	adds	r3, #16
 800799c:	68fa      	ldr	r2, [r7, #12]
 800799e:	4413      	add	r3, r2
 80079a0:	3304      	adds	r3, #4
 80079a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80079a4:	697b      	ldr	r3, [r7, #20]
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80079aa:	697b      	ldr	r3, [r7, #20]
 80079ac:	683a      	ldr	r2, [r7, #0]
 80079ae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80079b0:	697b      	ldr	r3, [r7, #20]
 80079b2:	2200      	movs	r2, #0
 80079b4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2201      	movs	r2, #1
 80079ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80079bc:	7afb      	ldrb	r3, [r7, #11]
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	799b      	ldrb	r3, [r3, #6]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d102      	bne.n	80079d6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	6818      	ldr	r0, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	799b      	ldrb	r3, [r3, #6]
 80079de:	461a      	mov	r2, r3
 80079e0:	6979      	ldr	r1, [r7, #20]
 80079e2:	f003 fad9 	bl	800af98 <USB_EPStartXfer>

  return HAL_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3718      	adds	r7, #24
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b084      	sub	sp, #16
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80079fc:	78fb      	ldrb	r3, [r7, #3]
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	7912      	ldrb	r2, [r2, #4]
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d901      	bls.n	8007a0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e04f      	b.n	8007aae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	da0f      	bge.n	8007a36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a16:	78fb      	ldrb	r3, [r7, #3]
 8007a18:	f003 020f 	and.w	r2, r3, #15
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	4413      	add	r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	3310      	adds	r3, #16
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	4413      	add	r3, r2
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	705a      	strb	r2, [r3, #1]
 8007a34:	e00d      	b.n	8007a52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a36:	78fa      	ldrb	r2, [r7, #3]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	00db      	lsls	r3, r3, #3
 8007a3c:	4413      	add	r3, r2
 8007a3e:	009b      	lsls	r3, r3, #2
 8007a40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	4413      	add	r3, r2
 8007a48:	3304      	adds	r3, #4
 8007a4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a58:	78fb      	ldrb	r3, [r7, #3]
 8007a5a:	f003 030f 	and.w	r3, r3, #15
 8007a5e:	b2da      	uxtb	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d101      	bne.n	8007a72 <HAL_PCD_EP_SetStall+0x82>
 8007a6e:	2302      	movs	r3, #2
 8007a70:	e01d      	b.n	8007aae <HAL_PCD_EP_SetStall+0xbe>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	68f9      	ldr	r1, [r7, #12]
 8007a80:	4618      	mov	r0, r3
 8007a82:	f003 fe67 	bl	800b754 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007a86:	78fb      	ldrb	r3, [r7, #3]
 8007a88:	f003 030f 	and.w	r3, r3, #15
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d109      	bne.n	8007aa4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6818      	ldr	r0, [r3, #0]
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	7999      	ldrb	r1, [r3, #6]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f004 f858 	bl	800bb54 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3710      	adds	r7, #16
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
 8007abe:	460b      	mov	r3, r1
 8007ac0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007ac2:	78fb      	ldrb	r3, [r7, #3]
 8007ac4:	f003 030f 	and.w	r3, r3, #15
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	7912      	ldrb	r2, [r2, #4]
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d901      	bls.n	8007ad4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e042      	b.n	8007b5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007ad4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	da0f      	bge.n	8007afc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007adc:	78fb      	ldrb	r3, [r7, #3]
 8007ade:	f003 020f 	and.w	r2, r3, #15
 8007ae2:	4613      	mov	r3, r2
 8007ae4:	00db      	lsls	r3, r3, #3
 8007ae6:	4413      	add	r3, r2
 8007ae8:	009b      	lsls	r3, r3, #2
 8007aea:	3310      	adds	r3, #16
 8007aec:	687a      	ldr	r2, [r7, #4]
 8007aee:	4413      	add	r3, r2
 8007af0:	3304      	adds	r3, #4
 8007af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2201      	movs	r2, #1
 8007af8:	705a      	strb	r2, [r3, #1]
 8007afa:	e00f      	b.n	8007b1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007afc:	78fb      	ldrb	r3, [r7, #3]
 8007afe:	f003 020f 	and.w	r2, r3, #15
 8007b02:	4613      	mov	r3, r2
 8007b04:	00db      	lsls	r3, r3, #3
 8007b06:	4413      	add	r3, r2
 8007b08:	009b      	lsls	r3, r3, #2
 8007b0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b0e:	687a      	ldr	r2, [r7, #4]
 8007b10:	4413      	add	r3, r2
 8007b12:	3304      	adds	r3, #4
 8007b14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b22:	78fb      	ldrb	r3, [r7, #3]
 8007b24:	f003 030f 	and.w	r3, r3, #15
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_PCD_EP_ClrStall+0x86>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e00e      	b.n	8007b5a <HAL_PCD_EP_ClrStall+0xa4>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68f9      	ldr	r1, [r7, #12]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f003 fe70 	bl	800b830 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b084      	sub	sp, #16
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
 8007b6a:	460b      	mov	r3, r1
 8007b6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007b6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	da0c      	bge.n	8007b90 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b76:	78fb      	ldrb	r3, [r7, #3]
 8007b78:	f003 020f 	and.w	r2, r3, #15
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	00db      	lsls	r3, r3, #3
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	3310      	adds	r3, #16
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	4413      	add	r3, r2
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	60fb      	str	r3, [r7, #12]
 8007b8e:	e00c      	b.n	8007baa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b90:	78fb      	ldrb	r3, [r7, #3]
 8007b92:	f003 020f 	and.w	r2, r3, #15
 8007b96:	4613      	mov	r3, r2
 8007b98:	00db      	lsls	r3, r3, #3
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007ba2:	687a      	ldr	r2, [r7, #4]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	3304      	adds	r3, #4
 8007ba8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68f9      	ldr	r1, [r7, #12]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f003 fc8f 	bl	800b4d4 <USB_EPStopXfer>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007bba:	7afb      	ldrb	r3, [r7, #11]
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	3710      	adds	r7, #16
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b08a      	sub	sp, #40	@ 0x28
 8007bc8:	af02      	add	r7, sp, #8
 8007bca:	6078      	str	r0, [r7, #4]
 8007bcc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bd4:	697b      	ldr	r3, [r7, #20]
 8007bd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	4613      	mov	r3, r2
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	4413      	add	r3, r2
 8007be0:	009b      	lsls	r3, r3, #2
 8007be2:	3310      	adds	r3, #16
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	4413      	add	r3, r2
 8007be8:	3304      	adds	r3, #4
 8007bea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	695a      	ldr	r2, [r3, #20]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	691b      	ldr	r3, [r3, #16]
 8007bf4:	429a      	cmp	r2, r3
 8007bf6:	d901      	bls.n	8007bfc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e06b      	b.n	8007cd4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	691a      	ldr	r2, [r3, #16]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	689b      	ldr	r3, [r3, #8]
 8007c0c:	69fa      	ldr	r2, [r7, #28]
 8007c0e:	429a      	cmp	r2, r3
 8007c10:	d902      	bls.n	8007c18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	689b      	ldr	r3, [r3, #8]
 8007c16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007c18:	69fb      	ldr	r3, [r7, #28]
 8007c1a:	3303      	adds	r3, #3
 8007c1c:	089b      	lsrs	r3, r3, #2
 8007c1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c20:	e02a      	b.n	8007c78 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	691a      	ldr	r2, [r3, #16]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	695b      	ldr	r3, [r3, #20]
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	69fa      	ldr	r2, [r7, #28]
 8007c34:	429a      	cmp	r2, r3
 8007c36:	d902      	bls.n	8007c3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007c3e:	69fb      	ldr	r3, [r7, #28]
 8007c40:	3303      	adds	r3, #3
 8007c42:	089b      	lsrs	r3, r3, #2
 8007c44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	68d9      	ldr	r1, [r3, #12]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	b2da      	uxtb	r2, r3
 8007c4e:	69fb      	ldr	r3, [r7, #28]
 8007c50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007c56:	9300      	str	r3, [sp, #0]
 8007c58:	4603      	mov	r3, r0
 8007c5a:	6978      	ldr	r0, [r7, #20]
 8007c5c:	f003 fce4 	bl	800b628 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	68da      	ldr	r2, [r3, #12]
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	441a      	add	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	695a      	ldr	r2, [r3, #20]
 8007c70:	69fb      	ldr	r3, [r7, #28]
 8007c72:	441a      	add	r2, r3
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c84:	699b      	ldr	r3, [r3, #24]
 8007c86:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d809      	bhi.n	8007ca2 <PCD_WriteEmptyTxFifo+0xde>
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	695a      	ldr	r2, [r3, #20]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d203      	bcs.n	8007ca2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d1bf      	bne.n	8007c22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	691a      	ldr	r2, [r3, #16]
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	429a      	cmp	r2, r3
 8007cac:	d811      	bhi.n	8007cd2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	f003 030f 	and.w	r3, r3, #15
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8007cba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	43db      	mvns	r3, r3
 8007cc8:	6939      	ldr	r1, [r7, #16]
 8007cca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007cce:	4013      	ands	r3, r2
 8007cd0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007cd2:	2300      	movs	r3, #0
}
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	3720      	adds	r7, #32
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b088      	sub	sp, #32
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cec:	69fb      	ldr	r3, [r7, #28]
 8007cee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007cf0:	69fb      	ldr	r3, [r7, #28]
 8007cf2:	333c      	adds	r3, #60	@ 0x3c
 8007cf4:	3304      	adds	r3, #4
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007cfa:	683b      	ldr	r3, [r7, #0]
 8007cfc:	015a      	lsls	r2, r3, #5
 8007cfe:	69bb      	ldr	r3, [r7, #24]
 8007d00:	4413      	add	r3, r2
 8007d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	799b      	ldrb	r3, [r3, #6]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d17b      	bne.n	8007e0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	f003 0308 	and.w	r3, r3, #8
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d015      	beq.n	8007d48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	4a61      	ldr	r2, [pc, #388]	@ (8007ea4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d20:	4293      	cmp	r3, r2
 8007d22:	f240 80b9 	bls.w	8007e98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f000 80b3 	beq.w	8007e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	015a      	lsls	r2, r3, #5
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	4413      	add	r3, r2
 8007d3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d3e:	461a      	mov	r2, r3
 8007d40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d44:	6093      	str	r3, [r2, #8]
 8007d46:	e0a7      	b.n	8007e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	f003 0320 	and.w	r3, r3, #32
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d009      	beq.n	8007d66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	015a      	lsls	r2, r3, #5
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	4413      	add	r3, r2
 8007d5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d5e:	461a      	mov	r2, r3
 8007d60:	2320      	movs	r3, #32
 8007d62:	6093      	str	r3, [r2, #8]
 8007d64:	e098      	b.n	8007e98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	f040 8093 	bne.w	8007e98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d72:	697b      	ldr	r3, [r7, #20]
 8007d74:	4a4b      	ldr	r2, [pc, #300]	@ (8007ea4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d90f      	bls.n	8007d9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00a      	beq.n	8007d9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	015a      	lsls	r2, r3, #5
 8007d88:	69bb      	ldr	r3, [r7, #24]
 8007d8a:	4413      	add	r3, r2
 8007d8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d90:	461a      	mov	r2, r3
 8007d92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007d96:	6093      	str	r3, [r2, #8]
 8007d98:	e07e      	b.n	8007e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007d9a:	683a      	ldr	r2, [r7, #0]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	00db      	lsls	r3, r3, #3
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007da8:	687a      	ldr	r2, [r7, #4]
 8007daa:	4413      	add	r3, r2
 8007dac:	3304      	adds	r3, #4
 8007dae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	6a1a      	ldr	r2, [r3, #32]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	0159      	lsls	r1, r3, #5
 8007db8:	69bb      	ldr	r3, [r7, #24]
 8007dba:	440b      	add	r3, r1
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007dc6:	1ad2      	subs	r2, r2, r3
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d114      	bne.n	8007dfc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6818      	ldr	r0, [r3, #0]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007de4:	461a      	mov	r2, r3
 8007de6:	2101      	movs	r1, #1
 8007de8:	f003 feb4 	bl	800bb54 <USB_EP0_OutStart>
 8007dec:	e006      	b.n	8007dfc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	441a      	add	r2, r3
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	b2db      	uxtb	r3, r3
 8007e00:	4619      	mov	r1, r3
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f006 fa04 	bl	800e210 <HAL_PCD_DataOutStageCallback>
 8007e08:	e046      	b.n	8007e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	4a26      	ldr	r2, [pc, #152]	@ (8007ea8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d124      	bne.n	8007e5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	015a      	lsls	r2, r3, #5
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	4413      	add	r3, r2
 8007e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e28:	461a      	mov	r2, r3
 8007e2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e2e:	6093      	str	r3, [r2, #8]
 8007e30:	e032      	b.n	8007e98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	f003 0320 	and.w	r3, r3, #32
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d008      	beq.n	8007e4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	015a      	lsls	r2, r3, #5
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	4413      	add	r3, r2
 8007e44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e48:	461a      	mov	r2, r3
 8007e4a:	2320      	movs	r3, #32
 8007e4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	4619      	mov	r1, r3
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f006 f9db 	bl	800e210 <HAL_PCD_DataOutStageCallback>
 8007e5a:	e01d      	b.n	8007e98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007e5c:	683b      	ldr	r3, [r7, #0]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d114      	bne.n	8007e8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	683a      	ldr	r2, [r7, #0]
 8007e66:	4613      	mov	r3, r2
 8007e68:	00db      	lsls	r3, r3, #3
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	440b      	add	r3, r1
 8007e70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d108      	bne.n	8007e8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6818      	ldr	r0, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e84:	461a      	mov	r2, r3
 8007e86:	2100      	movs	r1, #0
 8007e88:	f003 fe64 	bl	800bb54 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	b2db      	uxtb	r3, r3
 8007e90:	4619      	mov	r1, r3
 8007e92:	6878      	ldr	r0, [r7, #4]
 8007e94:	f006 f9bc 	bl	800e210 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007e98:	2300      	movs	r3, #0
}
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	3720      	adds	r7, #32
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	bd80      	pop	{r7, pc}
 8007ea2:	bf00      	nop
 8007ea4:	4f54300a 	.word	0x4f54300a
 8007ea8:	4f54310a 	.word	0x4f54310a

08007eac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	333c      	adds	r3, #60	@ 0x3c
 8007ec4:	3304      	adds	r3, #4
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	015a      	lsls	r2, r3, #5
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	4a15      	ldr	r2, [pc, #84]	@ (8007f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d90e      	bls.n	8007f00 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d009      	beq.n	8007f00 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007eec:	683b      	ldr	r3, [r7, #0]
 8007eee:	015a      	lsls	r2, r3, #5
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4413      	add	r3, r2
 8007ef4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ef8:	461a      	mov	r2, r3
 8007efa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007efe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f006 f973 	bl	800e1ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	4a0a      	ldr	r2, [pc, #40]	@ (8007f34 <PCD_EP_OutSetupPacket_int+0x88>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d90c      	bls.n	8007f28 <PCD_EP_OutSetupPacket_int+0x7c>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	799b      	ldrb	r3, [r3, #6]
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d108      	bne.n	8007f28 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f20:	461a      	mov	r2, r3
 8007f22:	2101      	movs	r1, #1
 8007f24:	f003 fe16 	bl	800bb54 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3718      	adds	r7, #24
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}
 8007f32:	bf00      	nop
 8007f34:	4f54300a 	.word	0x4f54300a

08007f38 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
 8007f44:	4613      	mov	r3, r2
 8007f46:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f4e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007f50:	78fb      	ldrb	r3, [r7, #3]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d107      	bne.n	8007f66 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007f56:	883b      	ldrh	r3, [r7, #0]
 8007f58:	0419      	lsls	r1, r3, #16
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68ba      	ldr	r2, [r7, #8]
 8007f60:	430a      	orrs	r2, r1
 8007f62:	629a      	str	r2, [r3, #40]	@ 0x28
 8007f64:	e028      	b.n	8007fb8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f6c:	0c1b      	lsrs	r3, r3, #16
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	4413      	add	r3, r2
 8007f72:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f74:	2300      	movs	r3, #0
 8007f76:	73fb      	strb	r3, [r7, #15]
 8007f78:	e00d      	b.n	8007f96 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	7bfb      	ldrb	r3, [r7, #15]
 8007f80:	3340      	adds	r3, #64	@ 0x40
 8007f82:	009b      	lsls	r3, r3, #2
 8007f84:	4413      	add	r3, r2
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	0c1b      	lsrs	r3, r3, #16
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	3301      	adds	r3, #1
 8007f94:	73fb      	strb	r3, [r7, #15]
 8007f96:	7bfa      	ldrb	r2, [r7, #15]
 8007f98:	78fb      	ldrb	r3, [r7, #3]
 8007f9a:	3b01      	subs	r3, #1
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d3ec      	bcc.n	8007f7a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007fa0:	883b      	ldrh	r3, [r7, #0]
 8007fa2:	0418      	lsls	r0, r3, #16
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6819      	ldr	r1, [r3, #0]
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	3b01      	subs	r3, #1
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	4302      	orrs	r2, r0
 8007fb0:	3340      	adds	r3, #64	@ 0x40
 8007fb2:	009b      	lsls	r3, r3, #2
 8007fb4:	440b      	add	r3, r1
 8007fb6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3714      	adds	r7, #20
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr

08007fc6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007fc6:	b480      	push	{r7}
 8007fc8:	b083      	sub	sp, #12
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	6078      	str	r0, [r7, #4]
 8007fce:	460b      	mov	r3, r1
 8007fd0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	887a      	ldrh	r2, [r7, #2]
 8007fd8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	370c      	adds	r7, #12
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe6:	4770      	bx	lr

08007fe8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	460b      	mov	r3, r1
 8007ff2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d101      	bne.n	8008012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e267      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 0301 	and.w	r3, r3, #1
 800801a:	2b00      	cmp	r3, #0
 800801c:	d075      	beq.n	800810a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800801e:	4b88      	ldr	r3, [pc, #544]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008020:	689b      	ldr	r3, [r3, #8]
 8008022:	f003 030c 	and.w	r3, r3, #12
 8008026:	2b04      	cmp	r3, #4
 8008028:	d00c      	beq.n	8008044 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800802a:	4b85      	ldr	r3, [pc, #532]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008032:	2b08      	cmp	r3, #8
 8008034:	d112      	bne.n	800805c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008036:	4b82      	ldr	r3, [pc, #520]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800803e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008042:	d10b      	bne.n	800805c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008044:	4b7e      	ldr	r3, [pc, #504]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d05b      	beq.n	8008108 <HAL_RCC_OscConfig+0x108>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	685b      	ldr	r3, [r3, #4]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d157      	bne.n	8008108 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008058:	2301      	movs	r3, #1
 800805a:	e242      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008064:	d106      	bne.n	8008074 <HAL_RCC_OscConfig+0x74>
 8008066:	4b76      	ldr	r3, [pc, #472]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a75      	ldr	r2, [pc, #468]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 800806c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008070:	6013      	str	r3, [r2, #0]
 8008072:	e01d      	b.n	80080b0 <HAL_RCC_OscConfig+0xb0>
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	685b      	ldr	r3, [r3, #4]
 8008078:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800807c:	d10c      	bne.n	8008098 <HAL_RCC_OscConfig+0x98>
 800807e:	4b70      	ldr	r3, [pc, #448]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a6f      	ldr	r2, [pc, #444]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008084:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008088:	6013      	str	r3, [r2, #0]
 800808a:	4b6d      	ldr	r3, [pc, #436]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a6c      	ldr	r2, [pc, #432]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008094:	6013      	str	r3, [r2, #0]
 8008096:	e00b      	b.n	80080b0 <HAL_RCC_OscConfig+0xb0>
 8008098:	4b69      	ldr	r3, [pc, #420]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a68      	ldr	r2, [pc, #416]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 800809e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	4b66      	ldr	r3, [pc, #408]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4a65      	ldr	r2, [pc, #404]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 80080aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80080ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	685b      	ldr	r3, [r3, #4]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d013      	beq.n	80080e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080b8:	f7fa faf2 	bl	80026a0 <HAL_GetTick>
 80080bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080be:	e008      	b.n	80080d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080c0:	f7fa faee 	bl	80026a0 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b64      	cmp	r3, #100	@ 0x64
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e207      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080d2:	4b5b      	ldr	r3, [pc, #364]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0f0      	beq.n	80080c0 <HAL_RCC_OscConfig+0xc0>
 80080de:	e014      	b.n	800810a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80080e0:	f7fa fade 	bl	80026a0 <HAL_GetTick>
 80080e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080e6:	e008      	b.n	80080fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80080e8:	f7fa fada 	bl	80026a0 <HAL_GetTick>
 80080ec:	4602      	mov	r2, r0
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	1ad3      	subs	r3, r2, r3
 80080f2:	2b64      	cmp	r3, #100	@ 0x64
 80080f4:	d901      	bls.n	80080fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80080f6:	2303      	movs	r3, #3
 80080f8:	e1f3      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80080fa:	4b51      	ldr	r3, [pc, #324]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008102:	2b00      	cmp	r3, #0
 8008104:	d1f0      	bne.n	80080e8 <HAL_RCC_OscConfig+0xe8>
 8008106:	e000      	b.n	800810a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008108:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f003 0302 	and.w	r3, r3, #2
 8008112:	2b00      	cmp	r3, #0
 8008114:	d063      	beq.n	80081de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008116:	4b4a      	ldr	r3, [pc, #296]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008118:	689b      	ldr	r3, [r3, #8]
 800811a:	f003 030c 	and.w	r3, r3, #12
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00b      	beq.n	800813a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008122:	4b47      	ldr	r3, [pc, #284]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800812a:	2b08      	cmp	r3, #8
 800812c:	d11c      	bne.n	8008168 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800812e:	4b44      	ldr	r3, [pc, #272]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008136:	2b00      	cmp	r3, #0
 8008138:	d116      	bne.n	8008168 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800813a:	4b41      	ldr	r3, [pc, #260]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d005      	beq.n	8008152 <HAL_RCC_OscConfig+0x152>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	68db      	ldr	r3, [r3, #12]
 800814a:	2b01      	cmp	r3, #1
 800814c:	d001      	beq.n	8008152 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e1c7      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008152:	4b3b      	ldr	r3, [pc, #236]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	691b      	ldr	r3, [r3, #16]
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	4937      	ldr	r1, [pc, #220]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008162:	4313      	orrs	r3, r2
 8008164:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008166:	e03a      	b.n	80081de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	2b00      	cmp	r3, #0
 800816e:	d020      	beq.n	80081b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008170:	4b34      	ldr	r3, [pc, #208]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 8008172:	2201      	movs	r2, #1
 8008174:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008176:	f7fa fa93 	bl	80026a0 <HAL_GetTick>
 800817a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800817c:	e008      	b.n	8008190 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800817e:	f7fa fa8f 	bl	80026a0 <HAL_GetTick>
 8008182:	4602      	mov	r2, r0
 8008184:	693b      	ldr	r3, [r7, #16]
 8008186:	1ad3      	subs	r3, r2, r3
 8008188:	2b02      	cmp	r3, #2
 800818a:	d901      	bls.n	8008190 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800818c:	2303      	movs	r3, #3
 800818e:	e1a8      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008190:	4b2b      	ldr	r3, [pc, #172]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0302 	and.w	r3, r3, #2
 8008198:	2b00      	cmp	r3, #0
 800819a:	d0f0      	beq.n	800817e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800819c:	4b28      	ldr	r3, [pc, #160]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	00db      	lsls	r3, r3, #3
 80081aa:	4925      	ldr	r1, [pc, #148]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 80081ac:	4313      	orrs	r3, r2
 80081ae:	600b      	str	r3, [r1, #0]
 80081b0:	e015      	b.n	80081de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80081b2:	4b24      	ldr	r3, [pc, #144]	@ (8008244 <HAL_RCC_OscConfig+0x244>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081b8:	f7fa fa72 	bl	80026a0 <HAL_GetTick>
 80081bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081be:	e008      	b.n	80081d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081c0:	f7fa fa6e 	bl	80026a0 <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d901      	bls.n	80081d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80081ce:	2303      	movs	r3, #3
 80081d0:	e187      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80081d2:	4b1b      	ldr	r3, [pc, #108]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1f0      	bne.n	80081c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0308 	and.w	r3, r3, #8
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d036      	beq.n	8008258 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	695b      	ldr	r3, [r3, #20]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d016      	beq.n	8008220 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80081f2:	4b15      	ldr	r3, [pc, #84]	@ (8008248 <HAL_RCC_OscConfig+0x248>)
 80081f4:	2201      	movs	r2, #1
 80081f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081f8:	f7fa fa52 	bl	80026a0 <HAL_GetTick>
 80081fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80081fe:	e008      	b.n	8008212 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008200:	f7fa fa4e 	bl	80026a0 <HAL_GetTick>
 8008204:	4602      	mov	r2, r0
 8008206:	693b      	ldr	r3, [r7, #16]
 8008208:	1ad3      	subs	r3, r2, r3
 800820a:	2b02      	cmp	r3, #2
 800820c:	d901      	bls.n	8008212 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800820e:	2303      	movs	r3, #3
 8008210:	e167      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008212:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <HAL_RCC_OscConfig+0x240>)
 8008214:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008216:	f003 0302 	and.w	r3, r3, #2
 800821a:	2b00      	cmp	r3, #0
 800821c:	d0f0      	beq.n	8008200 <HAL_RCC_OscConfig+0x200>
 800821e:	e01b      	b.n	8008258 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008220:	4b09      	ldr	r3, [pc, #36]	@ (8008248 <HAL_RCC_OscConfig+0x248>)
 8008222:	2200      	movs	r2, #0
 8008224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008226:	f7fa fa3b 	bl	80026a0 <HAL_GetTick>
 800822a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800822c:	e00e      	b.n	800824c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800822e:	f7fa fa37 	bl	80026a0 <HAL_GetTick>
 8008232:	4602      	mov	r2, r0
 8008234:	693b      	ldr	r3, [r7, #16]
 8008236:	1ad3      	subs	r3, r2, r3
 8008238:	2b02      	cmp	r3, #2
 800823a:	d907      	bls.n	800824c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800823c:	2303      	movs	r3, #3
 800823e:	e150      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
 8008240:	40023800 	.word	0x40023800
 8008244:	42470000 	.word	0x42470000
 8008248:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800824c:	4b88      	ldr	r3, [pc, #544]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 800824e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008250:	f003 0302 	and.w	r3, r3, #2
 8008254:	2b00      	cmp	r3, #0
 8008256:	d1ea      	bne.n	800822e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0304 	and.w	r3, r3, #4
 8008260:	2b00      	cmp	r3, #0
 8008262:	f000 8097 	beq.w	8008394 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008266:	2300      	movs	r3, #0
 8008268:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800826a:	4b81      	ldr	r3, [pc, #516]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 800826c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800826e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10f      	bne.n	8008296 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008276:	2300      	movs	r3, #0
 8008278:	60bb      	str	r3, [r7, #8]
 800827a:	4b7d      	ldr	r3, [pc, #500]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 800827c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800827e:	4a7c      	ldr	r2, [pc, #496]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 8008280:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008284:	6413      	str	r3, [r2, #64]	@ 0x40
 8008286:	4b7a      	ldr	r3, [pc, #488]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 8008288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800828a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800828e:	60bb      	str	r3, [r7, #8]
 8008290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008292:	2301      	movs	r3, #1
 8008294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008296:	4b77      	ldr	r3, [pc, #476]	@ (8008474 <HAL_RCC_OscConfig+0x474>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d118      	bne.n	80082d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80082a2:	4b74      	ldr	r3, [pc, #464]	@ (8008474 <HAL_RCC_OscConfig+0x474>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a73      	ldr	r2, [pc, #460]	@ (8008474 <HAL_RCC_OscConfig+0x474>)
 80082a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80082ae:	f7fa f9f7 	bl	80026a0 <HAL_GetTick>
 80082b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082b4:	e008      	b.n	80082c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082b6:	f7fa f9f3 	bl	80026a0 <HAL_GetTick>
 80082ba:	4602      	mov	r2, r0
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	1ad3      	subs	r3, r2, r3
 80082c0:	2b02      	cmp	r3, #2
 80082c2:	d901      	bls.n	80082c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80082c4:	2303      	movs	r3, #3
 80082c6:	e10c      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082c8:	4b6a      	ldr	r3, [pc, #424]	@ (8008474 <HAL_RCC_OscConfig+0x474>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0f0      	beq.n	80082b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	689b      	ldr	r3, [r3, #8]
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d106      	bne.n	80082ea <HAL_RCC_OscConfig+0x2ea>
 80082dc:	4b64      	ldr	r3, [pc, #400]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 80082de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082e0:	4a63      	ldr	r2, [pc, #396]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 80082e2:	f043 0301 	orr.w	r3, r3, #1
 80082e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80082e8:	e01c      	b.n	8008324 <HAL_RCC_OscConfig+0x324>
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	689b      	ldr	r3, [r3, #8]
 80082ee:	2b05      	cmp	r3, #5
 80082f0:	d10c      	bne.n	800830c <HAL_RCC_OscConfig+0x30c>
 80082f2:	4b5f      	ldr	r3, [pc, #380]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 80082f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80082f6:	4a5e      	ldr	r2, [pc, #376]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 80082f8:	f043 0304 	orr.w	r3, r3, #4
 80082fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80082fe:	4b5c      	ldr	r3, [pc, #368]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 8008300:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008302:	4a5b      	ldr	r2, [pc, #364]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 8008304:	f043 0301 	orr.w	r3, r3, #1
 8008308:	6713      	str	r3, [r2, #112]	@ 0x70
 800830a:	e00b      	b.n	8008324 <HAL_RCC_OscConfig+0x324>
 800830c:	4b58      	ldr	r3, [pc, #352]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 800830e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008310:	4a57      	ldr	r2, [pc, #348]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 8008312:	f023 0301 	bic.w	r3, r3, #1
 8008316:	6713      	str	r3, [r2, #112]	@ 0x70
 8008318:	4b55      	ldr	r3, [pc, #340]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 800831a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800831c:	4a54      	ldr	r2, [pc, #336]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 800831e:	f023 0304 	bic.w	r3, r3, #4
 8008322:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d015      	beq.n	8008358 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800832c:	f7fa f9b8 	bl	80026a0 <HAL_GetTick>
 8008330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008332:	e00a      	b.n	800834a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008334:	f7fa f9b4 	bl	80026a0 <HAL_GetTick>
 8008338:	4602      	mov	r2, r0
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008342:	4293      	cmp	r3, r2
 8008344:	d901      	bls.n	800834a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008346:	2303      	movs	r3, #3
 8008348:	e0cb      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800834a:	4b49      	ldr	r3, [pc, #292]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 800834c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800834e:	f003 0302 	and.w	r3, r3, #2
 8008352:	2b00      	cmp	r3, #0
 8008354:	d0ee      	beq.n	8008334 <HAL_RCC_OscConfig+0x334>
 8008356:	e014      	b.n	8008382 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008358:	f7fa f9a2 	bl	80026a0 <HAL_GetTick>
 800835c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800835e:	e00a      	b.n	8008376 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008360:	f7fa f99e 	bl	80026a0 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800836e:	4293      	cmp	r3, r2
 8008370:	d901      	bls.n	8008376 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e0b5      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008376:	4b3e      	ldr	r3, [pc, #248]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 8008378:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800837a:	f003 0302 	and.w	r3, r3, #2
 800837e:	2b00      	cmp	r3, #0
 8008380:	d1ee      	bne.n	8008360 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008382:	7dfb      	ldrb	r3, [r7, #23]
 8008384:	2b01      	cmp	r3, #1
 8008386:	d105      	bne.n	8008394 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008388:	4b39      	ldr	r3, [pc, #228]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 800838a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800838c:	4a38      	ldr	r2, [pc, #224]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 800838e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008392:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	699b      	ldr	r3, [r3, #24]
 8008398:	2b00      	cmp	r3, #0
 800839a:	f000 80a1 	beq.w	80084e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800839e:	4b34      	ldr	r3, [pc, #208]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 80083a0:	689b      	ldr	r3, [r3, #8]
 80083a2:	f003 030c 	and.w	r3, r3, #12
 80083a6:	2b08      	cmp	r3, #8
 80083a8:	d05c      	beq.n	8008464 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	699b      	ldr	r3, [r3, #24]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d141      	bne.n	8008436 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80083b2:	4b31      	ldr	r3, [pc, #196]	@ (8008478 <HAL_RCC_OscConfig+0x478>)
 80083b4:	2200      	movs	r2, #0
 80083b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80083b8:	f7fa f972 	bl	80026a0 <HAL_GetTick>
 80083bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083be:	e008      	b.n	80083d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083c0:	f7fa f96e 	bl	80026a0 <HAL_GetTick>
 80083c4:	4602      	mov	r2, r0
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	1ad3      	subs	r3, r2, r3
 80083ca:	2b02      	cmp	r3, #2
 80083cc:	d901      	bls.n	80083d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80083ce:	2303      	movs	r3, #3
 80083d0:	e087      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80083d2:	4b27      	ldr	r3, [pc, #156]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d1f0      	bne.n	80083c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	69da      	ldr	r2, [r3, #28]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ec:	019b      	lsls	r3, r3, #6
 80083ee:	431a      	orrs	r2, r3
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f4:	085b      	lsrs	r3, r3, #1
 80083f6:	3b01      	subs	r3, #1
 80083f8:	041b      	lsls	r3, r3, #16
 80083fa:	431a      	orrs	r2, r3
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008400:	061b      	lsls	r3, r3, #24
 8008402:	491b      	ldr	r1, [pc, #108]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 8008404:	4313      	orrs	r3, r2
 8008406:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008408:	4b1b      	ldr	r3, [pc, #108]	@ (8008478 <HAL_RCC_OscConfig+0x478>)
 800840a:	2201      	movs	r2, #1
 800840c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800840e:	f7fa f947 	bl	80026a0 <HAL_GetTick>
 8008412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008414:	e008      	b.n	8008428 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008416:	f7fa f943 	bl	80026a0 <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b02      	cmp	r3, #2
 8008422:	d901      	bls.n	8008428 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008424:	2303      	movs	r3, #3
 8008426:	e05c      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008428:	4b11      	ldr	r3, [pc, #68]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d0f0      	beq.n	8008416 <HAL_RCC_OscConfig+0x416>
 8008434:	e054      	b.n	80084e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008436:	4b10      	ldr	r3, [pc, #64]	@ (8008478 <HAL_RCC_OscConfig+0x478>)
 8008438:	2200      	movs	r2, #0
 800843a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800843c:	f7fa f930 	bl	80026a0 <HAL_GetTick>
 8008440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008442:	e008      	b.n	8008456 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008444:	f7fa f92c 	bl	80026a0 <HAL_GetTick>
 8008448:	4602      	mov	r2, r0
 800844a:	693b      	ldr	r3, [r7, #16]
 800844c:	1ad3      	subs	r3, r2, r3
 800844e:	2b02      	cmp	r3, #2
 8008450:	d901      	bls.n	8008456 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008452:	2303      	movs	r3, #3
 8008454:	e045      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008456:	4b06      	ldr	r3, [pc, #24]	@ (8008470 <HAL_RCC_OscConfig+0x470>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1f0      	bne.n	8008444 <HAL_RCC_OscConfig+0x444>
 8008462:	e03d      	b.n	80084e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	699b      	ldr	r3, [r3, #24]
 8008468:	2b01      	cmp	r3, #1
 800846a:	d107      	bne.n	800847c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e038      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
 8008470:	40023800 	.word	0x40023800
 8008474:	40007000 	.word	0x40007000
 8008478:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800847c:	4b1b      	ldr	r3, [pc, #108]	@ (80084ec <HAL_RCC_OscConfig+0x4ec>)
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	2b01      	cmp	r3, #1
 8008488:	d028      	beq.n	80084dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008494:	429a      	cmp	r2, r3
 8008496:	d121      	bne.n	80084dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d11a      	bne.n	80084dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80084ac:	4013      	ands	r3, r2
 80084ae:	687a      	ldr	r2, [r7, #4]
 80084b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80084b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d111      	bne.n	80084dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c2:	085b      	lsrs	r3, r3, #1
 80084c4:	3b01      	subs	r3, #1
 80084c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d107      	bne.n	80084dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80084d8:	429a      	cmp	r2, r3
 80084da:	d001      	beq.n	80084e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80084dc:	2301      	movs	r3, #1
 80084de:	e000      	b.n	80084e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80084e0:	2300      	movs	r3, #0
}
 80084e2:	4618      	mov	r0, r3
 80084e4:	3718      	adds	r7, #24
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	40023800 	.word	0x40023800

080084f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d101      	bne.n	8008504 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008500:	2301      	movs	r3, #1
 8008502:	e0cc      	b.n	800869e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008504:	4b68      	ldr	r3, [pc, #416]	@ (80086a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f003 0307 	and.w	r3, r3, #7
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	429a      	cmp	r2, r3
 8008510:	d90c      	bls.n	800852c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008512:	4b65      	ldr	r3, [pc, #404]	@ (80086a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008514:	683a      	ldr	r2, [r7, #0]
 8008516:	b2d2      	uxtb	r2, r2
 8008518:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800851a:	4b63      	ldr	r3, [pc, #396]	@ (80086a8 <HAL_RCC_ClockConfig+0x1b8>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f003 0307 	and.w	r3, r3, #7
 8008522:	683a      	ldr	r2, [r7, #0]
 8008524:	429a      	cmp	r2, r3
 8008526:	d001      	beq.n	800852c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e0b8      	b.n	800869e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f003 0302 	and.w	r3, r3, #2
 8008534:	2b00      	cmp	r3, #0
 8008536:	d020      	beq.n	800857a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 0304 	and.w	r3, r3, #4
 8008540:	2b00      	cmp	r3, #0
 8008542:	d005      	beq.n	8008550 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008544:	4b59      	ldr	r3, [pc, #356]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	4a58      	ldr	r2, [pc, #352]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 800854a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800854e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	f003 0308 	and.w	r3, r3, #8
 8008558:	2b00      	cmp	r3, #0
 800855a:	d005      	beq.n	8008568 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800855c:	4b53      	ldr	r3, [pc, #332]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	4a52      	ldr	r2, [pc, #328]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 8008562:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008566:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008568:	4b50      	ldr	r3, [pc, #320]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	689b      	ldr	r3, [r3, #8]
 8008574:	494d      	ldr	r1, [pc, #308]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 8008576:	4313      	orrs	r3, r2
 8008578:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0301 	and.w	r3, r3, #1
 8008582:	2b00      	cmp	r3, #0
 8008584:	d044      	beq.n	8008610 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d107      	bne.n	800859e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800858e:	4b47      	ldr	r3, [pc, #284]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008596:	2b00      	cmp	r3, #0
 8008598:	d119      	bne.n	80085ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e07f      	b.n	800869e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	d003      	beq.n	80085ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80085aa:	2b03      	cmp	r3, #3
 80085ac:	d107      	bne.n	80085be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80085ae:	4b3f      	ldr	r3, [pc, #252]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	e06f      	b.n	800869e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80085be:	4b3b      	ldr	r3, [pc, #236]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	f003 0302 	and.w	r3, r3, #2
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d101      	bne.n	80085ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80085ca:	2301      	movs	r3, #1
 80085cc:	e067      	b.n	800869e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80085ce:	4b37      	ldr	r3, [pc, #220]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 80085d0:	689b      	ldr	r3, [r3, #8]
 80085d2:	f023 0203 	bic.w	r2, r3, #3
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	4934      	ldr	r1, [pc, #208]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80085e0:	f7fa f85e 	bl	80026a0 <HAL_GetTick>
 80085e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085e6:	e00a      	b.n	80085fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085e8:	f7fa f85a 	bl	80026a0 <HAL_GetTick>
 80085ec:	4602      	mov	r2, r0
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d901      	bls.n	80085fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80085fa:	2303      	movs	r3, #3
 80085fc:	e04f      	b.n	800869e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085fe:	4b2b      	ldr	r3, [pc, #172]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	f003 020c 	and.w	r2, r3, #12
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	009b      	lsls	r3, r3, #2
 800860c:	429a      	cmp	r2, r3
 800860e:	d1eb      	bne.n	80085e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008610:	4b25      	ldr	r3, [pc, #148]	@ (80086a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	f003 0307 	and.w	r3, r3, #7
 8008618:	683a      	ldr	r2, [r7, #0]
 800861a:	429a      	cmp	r2, r3
 800861c:	d20c      	bcs.n	8008638 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800861e:	4b22      	ldr	r3, [pc, #136]	@ (80086a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008620:	683a      	ldr	r2, [r7, #0]
 8008622:	b2d2      	uxtb	r2, r2
 8008624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008626:	4b20      	ldr	r3, [pc, #128]	@ (80086a8 <HAL_RCC_ClockConfig+0x1b8>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0307 	and.w	r3, r3, #7
 800862e:	683a      	ldr	r2, [r7, #0]
 8008630:	429a      	cmp	r2, r3
 8008632:	d001      	beq.n	8008638 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008634:	2301      	movs	r3, #1
 8008636:	e032      	b.n	800869e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0304 	and.w	r3, r3, #4
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008644:	4b19      	ldr	r3, [pc, #100]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 8008646:	689b      	ldr	r3, [r3, #8]
 8008648:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	4916      	ldr	r1, [pc, #88]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 8008652:	4313      	orrs	r3, r2
 8008654:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f003 0308 	and.w	r3, r3, #8
 800865e:	2b00      	cmp	r3, #0
 8008660:	d009      	beq.n	8008676 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008662:	4b12      	ldr	r3, [pc, #72]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	691b      	ldr	r3, [r3, #16]
 800866e:	00db      	lsls	r3, r3, #3
 8008670:	490e      	ldr	r1, [pc, #56]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 8008672:	4313      	orrs	r3, r2
 8008674:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008676:	f000 f821 	bl	80086bc <HAL_RCC_GetSysClockFreq>
 800867a:	4602      	mov	r2, r0
 800867c:	4b0b      	ldr	r3, [pc, #44]	@ (80086ac <HAL_RCC_ClockConfig+0x1bc>)
 800867e:	689b      	ldr	r3, [r3, #8]
 8008680:	091b      	lsrs	r3, r3, #4
 8008682:	f003 030f 	and.w	r3, r3, #15
 8008686:	490a      	ldr	r1, [pc, #40]	@ (80086b0 <HAL_RCC_ClockConfig+0x1c0>)
 8008688:	5ccb      	ldrb	r3, [r1, r3]
 800868a:	fa22 f303 	lsr.w	r3, r2, r3
 800868e:	4a09      	ldr	r2, [pc, #36]	@ (80086b4 <HAL_RCC_ClockConfig+0x1c4>)
 8008690:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8008692:	4b09      	ldr	r3, [pc, #36]	@ (80086b8 <HAL_RCC_ClockConfig+0x1c8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4618      	mov	r0, r3
 8008698:	f7f9 ffbe 	bl	8002618 <HAL_InitTick>

  return HAL_OK;
 800869c:	2300      	movs	r3, #0
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	40023c00 	.word	0x40023c00
 80086ac:	40023800 	.word	0x40023800
 80086b0:	0800e820 	.word	0x0800e820
 80086b4:	2000002c 	.word	0x2000002c
 80086b8:	20000030 	.word	0x20000030

080086bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80086bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80086c0:	b090      	sub	sp, #64	@ 0x40
 80086c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80086c4:	2300      	movs	r3, #0
 80086c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80086c8:	2300      	movs	r3, #0
 80086ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80086cc:	2300      	movs	r3, #0
 80086ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80086d4:	4b59      	ldr	r3, [pc, #356]	@ (800883c <HAL_RCC_GetSysClockFreq+0x180>)
 80086d6:	689b      	ldr	r3, [r3, #8]
 80086d8:	f003 030c 	and.w	r3, r3, #12
 80086dc:	2b08      	cmp	r3, #8
 80086de:	d00d      	beq.n	80086fc <HAL_RCC_GetSysClockFreq+0x40>
 80086e0:	2b08      	cmp	r3, #8
 80086e2:	f200 80a1 	bhi.w	8008828 <HAL_RCC_GetSysClockFreq+0x16c>
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d002      	beq.n	80086f0 <HAL_RCC_GetSysClockFreq+0x34>
 80086ea:	2b04      	cmp	r3, #4
 80086ec:	d003      	beq.n	80086f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80086ee:	e09b      	b.n	8008828 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80086f0:	4b53      	ldr	r3, [pc, #332]	@ (8008840 <HAL_RCC_GetSysClockFreq+0x184>)
 80086f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80086f4:	e09b      	b.n	800882e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80086f6:	4b53      	ldr	r3, [pc, #332]	@ (8008844 <HAL_RCC_GetSysClockFreq+0x188>)
 80086f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80086fa:	e098      	b.n	800882e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80086fc:	4b4f      	ldr	r3, [pc, #316]	@ (800883c <HAL_RCC_GetSysClockFreq+0x180>)
 80086fe:	685b      	ldr	r3, [r3, #4]
 8008700:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008704:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008706:	4b4d      	ldr	r3, [pc, #308]	@ (800883c <HAL_RCC_GetSysClockFreq+0x180>)
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800870e:	2b00      	cmp	r3, #0
 8008710:	d028      	beq.n	8008764 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008712:	4b4a      	ldr	r3, [pc, #296]	@ (800883c <HAL_RCC_GetSysClockFreq+0x180>)
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	099b      	lsrs	r3, r3, #6
 8008718:	2200      	movs	r2, #0
 800871a:	623b      	str	r3, [r7, #32]
 800871c:	627a      	str	r2, [r7, #36]	@ 0x24
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008724:	2100      	movs	r1, #0
 8008726:	4b47      	ldr	r3, [pc, #284]	@ (8008844 <HAL_RCC_GetSysClockFreq+0x188>)
 8008728:	fb03 f201 	mul.w	r2, r3, r1
 800872c:	2300      	movs	r3, #0
 800872e:	fb00 f303 	mul.w	r3, r0, r3
 8008732:	4413      	add	r3, r2
 8008734:	4a43      	ldr	r2, [pc, #268]	@ (8008844 <HAL_RCC_GetSysClockFreq+0x188>)
 8008736:	fba0 1202 	umull	r1, r2, r0, r2
 800873a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800873c:	460a      	mov	r2, r1
 800873e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8008740:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008742:	4413      	add	r3, r2
 8008744:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008746:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008748:	2200      	movs	r2, #0
 800874a:	61bb      	str	r3, [r7, #24]
 800874c:	61fa      	str	r2, [r7, #28]
 800874e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008752:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8008756:	f7f7 fd3f 	bl	80001d8 <__aeabi_uldivmod>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4613      	mov	r3, r2
 8008760:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008762:	e053      	b.n	800880c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008764:	4b35      	ldr	r3, [pc, #212]	@ (800883c <HAL_RCC_GetSysClockFreq+0x180>)
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	099b      	lsrs	r3, r3, #6
 800876a:	2200      	movs	r2, #0
 800876c:	613b      	str	r3, [r7, #16]
 800876e:	617a      	str	r2, [r7, #20]
 8008770:	693b      	ldr	r3, [r7, #16]
 8008772:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008776:	f04f 0b00 	mov.w	fp, #0
 800877a:	4652      	mov	r2, sl
 800877c:	465b      	mov	r3, fp
 800877e:	f04f 0000 	mov.w	r0, #0
 8008782:	f04f 0100 	mov.w	r1, #0
 8008786:	0159      	lsls	r1, r3, #5
 8008788:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800878c:	0150      	lsls	r0, r2, #5
 800878e:	4602      	mov	r2, r0
 8008790:	460b      	mov	r3, r1
 8008792:	ebb2 080a 	subs.w	r8, r2, sl
 8008796:	eb63 090b 	sbc.w	r9, r3, fp
 800879a:	f04f 0200 	mov.w	r2, #0
 800879e:	f04f 0300 	mov.w	r3, #0
 80087a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80087a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80087aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80087ae:	ebb2 0408 	subs.w	r4, r2, r8
 80087b2:	eb63 0509 	sbc.w	r5, r3, r9
 80087b6:	f04f 0200 	mov.w	r2, #0
 80087ba:	f04f 0300 	mov.w	r3, #0
 80087be:	00eb      	lsls	r3, r5, #3
 80087c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087c4:	00e2      	lsls	r2, r4, #3
 80087c6:	4614      	mov	r4, r2
 80087c8:	461d      	mov	r5, r3
 80087ca:	eb14 030a 	adds.w	r3, r4, sl
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	eb45 030b 	adc.w	r3, r5, fp
 80087d4:	607b      	str	r3, [r7, #4]
 80087d6:	f04f 0200 	mov.w	r2, #0
 80087da:	f04f 0300 	mov.w	r3, #0
 80087de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80087e2:	4629      	mov	r1, r5
 80087e4:	028b      	lsls	r3, r1, #10
 80087e6:	4621      	mov	r1, r4
 80087e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80087ec:	4621      	mov	r1, r4
 80087ee:	028a      	lsls	r2, r1, #10
 80087f0:	4610      	mov	r0, r2
 80087f2:	4619      	mov	r1, r3
 80087f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f6:	2200      	movs	r2, #0
 80087f8:	60bb      	str	r3, [r7, #8]
 80087fa:	60fa      	str	r2, [r7, #12]
 80087fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008800:	f7f7 fcea 	bl	80001d8 <__aeabi_uldivmod>
 8008804:	4602      	mov	r2, r0
 8008806:	460b      	mov	r3, r1
 8008808:	4613      	mov	r3, r2
 800880a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800880c:	4b0b      	ldr	r3, [pc, #44]	@ (800883c <HAL_RCC_GetSysClockFreq+0x180>)
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	0c1b      	lsrs	r3, r3, #16
 8008812:	f003 0303 	and.w	r3, r3, #3
 8008816:	3301      	adds	r3, #1
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800881c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800881e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008820:	fbb2 f3f3 	udiv	r3, r2, r3
 8008824:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008826:	e002      	b.n	800882e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008828:	4b05      	ldr	r3, [pc, #20]	@ (8008840 <HAL_RCC_GetSysClockFreq+0x184>)
 800882a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800882c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800882e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008830:	4618      	mov	r0, r3
 8008832:	3740      	adds	r7, #64	@ 0x40
 8008834:	46bd      	mov	sp, r7
 8008836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800883a:	bf00      	nop
 800883c:	40023800 	.word	0x40023800
 8008840:	00f42400 	.word	0x00f42400
 8008844:	017d7840 	.word	0x017d7840

08008848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008848:	b480      	push	{r7}
 800884a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800884c:	4b03      	ldr	r3, [pc, #12]	@ (800885c <HAL_RCC_GetHCLKFreq+0x14>)
 800884e:	681b      	ldr	r3, [r3, #0]
}
 8008850:	4618      	mov	r0, r3
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr
 800885a:	bf00      	nop
 800885c:	2000002c 	.word	0x2000002c

08008860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008864:	f7ff fff0 	bl	8008848 <HAL_RCC_GetHCLKFreq>
 8008868:	4602      	mov	r2, r0
 800886a:	4b05      	ldr	r3, [pc, #20]	@ (8008880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	0a9b      	lsrs	r3, r3, #10
 8008870:	f003 0307 	and.w	r3, r3, #7
 8008874:	4903      	ldr	r1, [pc, #12]	@ (8008884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008876:	5ccb      	ldrb	r3, [r1, r3]
 8008878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800887c:	4618      	mov	r0, r3
 800887e:	bd80      	pop	{r7, pc}
 8008880:	40023800 	.word	0x40023800
 8008884:	0800e830 	.word	0x0800e830

08008888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800888c:	f7ff ffdc 	bl	8008848 <HAL_RCC_GetHCLKFreq>
 8008890:	4602      	mov	r2, r0
 8008892:	4b05      	ldr	r3, [pc, #20]	@ (80088a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	0b5b      	lsrs	r3, r3, #13
 8008898:	f003 0307 	and.w	r3, r3, #7
 800889c:	4903      	ldr	r1, [pc, #12]	@ (80088ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800889e:	5ccb      	ldrb	r3, [r1, r3]
 80088a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088a4:	4618      	mov	r0, r3
 80088a6:	bd80      	pop	{r7, pc}
 80088a8:	40023800 	.word	0x40023800
 80088ac:	0800e830 	.word	0x0800e830

080088b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b082      	sub	sp, #8
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d101      	bne.n	80088c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80088be:	2301      	movs	r3, #1
 80088c0:	e041      	b.n	8008946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d106      	bne.n	80088dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f7f9 f9cc 	bl	8001c74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2202      	movs	r2, #2
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681a      	ldr	r2, [r3, #0]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3304      	adds	r3, #4
 80088ec:	4619      	mov	r1, r3
 80088ee:	4610      	mov	r0, r2
 80088f0:	f000 fc7e 	bl	80091f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2201      	movs	r2, #1
 8008910:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2201      	movs	r2, #1
 8008928:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2201      	movs	r2, #1
 8008930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2201      	movs	r2, #1
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008944:	2300      	movs	r3, #0
}
 8008946:	4618      	mov	r0, r3
 8008948:	3708      	adds	r7, #8
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}
	...

08008950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008950:	b480      	push	{r7}
 8008952:	b085      	sub	sp, #20
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800895e:	b2db      	uxtb	r3, r3
 8008960:	2b01      	cmp	r3, #1
 8008962:	d001      	beq.n	8008968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	e044      	b.n	80089f2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2202      	movs	r2, #2
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	68da      	ldr	r2, [r3, #12]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f042 0201 	orr.w	r2, r2, #1
 800897e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a1e      	ldr	r2, [pc, #120]	@ (8008a00 <HAL_TIM_Base_Start_IT+0xb0>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d018      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x6c>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008992:	d013      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x6c>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a1a      	ldr	r2, [pc, #104]	@ (8008a04 <HAL_TIM_Base_Start_IT+0xb4>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d00e      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x6c>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a19      	ldr	r2, [pc, #100]	@ (8008a08 <HAL_TIM_Base_Start_IT+0xb8>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d009      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x6c>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a17      	ldr	r2, [pc, #92]	@ (8008a0c <HAL_TIM_Base_Start_IT+0xbc>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d004      	beq.n	80089bc <HAL_TIM_Base_Start_IT+0x6c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a16      	ldr	r2, [pc, #88]	@ (8008a10 <HAL_TIM_Base_Start_IT+0xc0>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d111      	bne.n	80089e0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 0307 	and.w	r3, r3, #7
 80089c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2b06      	cmp	r3, #6
 80089cc:	d010      	beq.n	80089f0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681a      	ldr	r2, [r3, #0]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	f042 0201 	orr.w	r2, r2, #1
 80089dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089de:	e007      	b.n	80089f0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	681a      	ldr	r2, [r3, #0]
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f042 0201 	orr.w	r2, r2, #1
 80089ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	3714      	adds	r7, #20
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	40010000 	.word	0x40010000
 8008a04:	40000400 	.word	0x40000400
 8008a08:	40000800 	.word	0x40000800
 8008a0c:	40000c00 	.word	0x40000c00
 8008a10:	40014000 	.word	0x40014000

08008a14 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b082      	sub	sp, #8
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d101      	bne.n	8008a26 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	e041      	b.n	8008aaa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d106      	bne.n	8008a40 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 f839 	bl	8008ab2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	2202      	movs	r2, #2
 8008a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	4619      	mov	r1, r3
 8008a52:	4610      	mov	r0, r2
 8008a54:	f000 fbcc 	bl	80091f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2201      	movs	r2, #1
 8008a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2201      	movs	r2, #1
 8008a94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2201      	movs	r2, #1
 8008a9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2201      	movs	r2, #1
 8008aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008aa8:	2300      	movs	r3, #0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b083      	sub	sp, #12
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008aba:	bf00      	nop
 8008abc:	370c      	adds	r7, #12
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac4:	4770      	bx	lr
	...

08008ac8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d109      	bne.n	8008aec <HAL_TIM_PWM_Start+0x24>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008ade:	b2db      	uxtb	r3, r3
 8008ae0:	2b01      	cmp	r3, #1
 8008ae2:	bf14      	ite	ne
 8008ae4:	2301      	movne	r3, #1
 8008ae6:	2300      	moveq	r3, #0
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	e022      	b.n	8008b32 <HAL_TIM_PWM_Start+0x6a>
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	2b04      	cmp	r3, #4
 8008af0:	d109      	bne.n	8008b06 <HAL_TIM_PWM_Start+0x3e>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	bf14      	ite	ne
 8008afe:	2301      	movne	r3, #1
 8008b00:	2300      	moveq	r3, #0
 8008b02:	b2db      	uxtb	r3, r3
 8008b04:	e015      	b.n	8008b32 <HAL_TIM_PWM_Start+0x6a>
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b08      	cmp	r3, #8
 8008b0a:	d109      	bne.n	8008b20 <HAL_TIM_PWM_Start+0x58>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8008b12:	b2db      	uxtb	r3, r3
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	bf14      	ite	ne
 8008b18:	2301      	movne	r3, #1
 8008b1a:	2300      	moveq	r3, #0
 8008b1c:	b2db      	uxtb	r3, r3
 8008b1e:	e008      	b.n	8008b32 <HAL_TIM_PWM_Start+0x6a>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	bf14      	ite	ne
 8008b2c:	2301      	movne	r3, #1
 8008b2e:	2300      	moveq	r3, #0
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008b36:	2301      	movs	r3, #1
 8008b38:	e068      	b.n	8008c0c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d104      	bne.n	8008b4a <HAL_TIM_PWM_Start+0x82>
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2202      	movs	r2, #2
 8008b44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b48:	e013      	b.n	8008b72 <HAL_TIM_PWM_Start+0xaa>
 8008b4a:	683b      	ldr	r3, [r7, #0]
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d104      	bne.n	8008b5a <HAL_TIM_PWM_Start+0x92>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	2202      	movs	r2, #2
 8008b54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b58:	e00b      	b.n	8008b72 <HAL_TIM_PWM_Start+0xaa>
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	2b08      	cmp	r3, #8
 8008b5e:	d104      	bne.n	8008b6a <HAL_TIM_PWM_Start+0xa2>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2202      	movs	r2, #2
 8008b64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b68:	e003      	b.n	8008b72 <HAL_TIM_PWM_Start+0xaa>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2201      	movs	r2, #1
 8008b78:	6839      	ldr	r1, [r7, #0]
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	f000 fe75 	bl	800986a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	4a23      	ldr	r2, [pc, #140]	@ (8008c14 <HAL_TIM_PWM_Start+0x14c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d107      	bne.n	8008b9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008b98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008c14 <HAL_TIM_PWM_Start+0x14c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d018      	beq.n	8008bd6 <HAL_TIM_PWM_Start+0x10e>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008bac:	d013      	beq.n	8008bd6 <HAL_TIM_PWM_Start+0x10e>
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	4a19      	ldr	r2, [pc, #100]	@ (8008c18 <HAL_TIM_PWM_Start+0x150>)
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d00e      	beq.n	8008bd6 <HAL_TIM_PWM_Start+0x10e>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	4a17      	ldr	r2, [pc, #92]	@ (8008c1c <HAL_TIM_PWM_Start+0x154>)
 8008bbe:	4293      	cmp	r3, r2
 8008bc0:	d009      	beq.n	8008bd6 <HAL_TIM_PWM_Start+0x10e>
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a16      	ldr	r2, [pc, #88]	@ (8008c20 <HAL_TIM_PWM_Start+0x158>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d004      	beq.n	8008bd6 <HAL_TIM_PWM_Start+0x10e>
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a14      	ldr	r2, [pc, #80]	@ (8008c24 <HAL_TIM_PWM_Start+0x15c>)
 8008bd2:	4293      	cmp	r3, r2
 8008bd4:	d111      	bne.n	8008bfa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f003 0307 	and.w	r3, r3, #7
 8008be0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b06      	cmp	r3, #6
 8008be6:	d010      	beq.n	8008c0a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f042 0201 	orr.w	r2, r2, #1
 8008bf6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bf8:	e007      	b.n	8008c0a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	681a      	ldr	r2, [r3, #0]
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f042 0201 	orr.w	r2, r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3710      	adds	r7, #16
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}
 8008c14:	40010000 	.word	0x40010000
 8008c18:	40000400 	.word	0x40000400
 8008c1c:	40000800 	.word	0x40000800
 8008c20:	40000c00 	.word	0x40000c00
 8008c24:	40014000 	.word	0x40014000

08008c28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b084      	sub	sp, #16
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	691b      	ldr	r3, [r3, #16]
 8008c3e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	f003 0302 	and.w	r3, r3, #2
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d020      	beq.n	8008c8c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01b      	beq.n	8008c8c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f06f 0202 	mvn.w	r2, #2
 8008c5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	f003 0303 	and.w	r3, r3, #3
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d003      	beq.n	8008c7a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c72:	6878      	ldr	r0, [r7, #4]
 8008c74:	f000 fa9d 	bl	80091b2 <HAL_TIM_IC_CaptureCallback>
 8008c78:	e005      	b.n	8008c86 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 fa8f 	bl	800919e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 faa0 	bl	80091c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008c8c:	68bb      	ldr	r3, [r7, #8]
 8008c8e:	f003 0304 	and.w	r3, r3, #4
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d020      	beq.n	8008cd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	f003 0304 	and.w	r3, r3, #4
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d01b      	beq.n	8008cd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	f06f 0204 	mvn.w	r2, #4
 8008ca8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	2202      	movs	r2, #2
 8008cae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	699b      	ldr	r3, [r3, #24]
 8008cb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d003      	beq.n	8008cc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fa77 	bl	80091b2 <HAL_TIM_IC_CaptureCallback>
 8008cc4:	e005      	b.n	8008cd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa69 	bl	800919e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f000 fa7a 	bl	80091c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008cd8:	68bb      	ldr	r3, [r7, #8]
 8008cda:	f003 0308 	and.w	r3, r3, #8
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d020      	beq.n	8008d24 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f003 0308 	and.w	r3, r3, #8
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d01b      	beq.n	8008d24 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f06f 0208 	mvn.w	r2, #8
 8008cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2204      	movs	r2, #4
 8008cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	69db      	ldr	r3, [r3, #28]
 8008d02:	f003 0303 	and.w	r3, r3, #3
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d003      	beq.n	8008d12 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f000 fa51 	bl	80091b2 <HAL_TIM_IC_CaptureCallback>
 8008d10:	e005      	b.n	8008d1e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 fa43 	bl	800919e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d18:	6878      	ldr	r0, [r7, #4]
 8008d1a:	f000 fa54 	bl	80091c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008d24:	68bb      	ldr	r3, [r7, #8]
 8008d26:	f003 0310 	and.w	r3, r3, #16
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d020      	beq.n	8008d70 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f003 0310 	and.w	r3, r3, #16
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d01b      	beq.n	8008d70 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f06f 0210 	mvn.w	r2, #16
 8008d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2208      	movs	r2, #8
 8008d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	69db      	ldr	r3, [r3, #28]
 8008d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d003      	beq.n	8008d5e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fa2b 	bl	80091b2 <HAL_TIM_IC_CaptureCallback>
 8008d5c:	e005      	b.n	8008d6a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa1d 	bl	800919e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f000 fa2e 	bl	80091c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f003 0301 	and.w	r3, r3, #1
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f003 0301 	and.w	r3, r3, #1
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d007      	beq.n	8008d94 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0201 	mvn.w	r2, #1
 8008d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f7f7 fc2a 	bl	80005e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d00c      	beq.n	8008db8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d007      	beq.n	8008db8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fdf6 	bl	80099a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d00c      	beq.n	8008ddc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d007      	beq.n	8008ddc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f9ff 	bl	80091da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f003 0320 	and.w	r3, r3, #32
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00c      	beq.n	8008e00 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f003 0320 	and.w	r3, r3, #32
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d007      	beq.n	8008e00 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f06f 0220 	mvn.w	r2, #32
 8008df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fdc8 	bl	8009990 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e00:	bf00      	nop
 8008e02:	3710      	adds	r7, #16
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b086      	sub	sp, #24
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	60f8      	str	r0, [r7, #12]
 8008e10:	60b9      	str	r1, [r7, #8]
 8008e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e14:	2300      	movs	r3, #0
 8008e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008e1e:	2b01      	cmp	r3, #1
 8008e20:	d101      	bne.n	8008e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e22:	2302      	movs	r3, #2
 8008e24:	e0ae      	b.n	8008f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2b0c      	cmp	r3, #12
 8008e32:	f200 809f 	bhi.w	8008f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008e36:	a201      	add	r2, pc, #4	@ (adr r2, 8008e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e3c:	08008e71 	.word	0x08008e71
 8008e40:	08008f75 	.word	0x08008f75
 8008e44:	08008f75 	.word	0x08008f75
 8008e48:	08008f75 	.word	0x08008f75
 8008e4c:	08008eb1 	.word	0x08008eb1
 8008e50:	08008f75 	.word	0x08008f75
 8008e54:	08008f75 	.word	0x08008f75
 8008e58:	08008f75 	.word	0x08008f75
 8008e5c:	08008ef3 	.word	0x08008ef3
 8008e60:	08008f75 	.word	0x08008f75
 8008e64:	08008f75 	.word	0x08008f75
 8008e68:	08008f75 	.word	0x08008f75
 8008e6c:	08008f33 	.word	0x08008f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68b9      	ldr	r1, [r7, #8]
 8008e76:	4618      	mov	r0, r3
 8008e78:	f000 fa40 	bl	80092fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	699a      	ldr	r2, [r3, #24]
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	f042 0208 	orr.w	r2, r2, #8
 8008e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	699a      	ldr	r2, [r3, #24]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f022 0204 	bic.w	r2, r2, #4
 8008e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6999      	ldr	r1, [r3, #24]
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	691a      	ldr	r2, [r3, #16]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	430a      	orrs	r2, r1
 8008eac:	619a      	str	r2, [r3, #24]
      break;
 8008eae:	e064      	b.n	8008f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f000 fa86 	bl	80093c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	699a      	ldr	r2, [r3, #24]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	699a      	ldr	r2, [r3, #24]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6999      	ldr	r1, [r3, #24]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	021a      	lsls	r2, r3, #8
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	430a      	orrs	r2, r1
 8008eee:	619a      	str	r2, [r3, #24]
      break;
 8008ef0:	e043      	b.n	8008f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68b9      	ldr	r1, [r7, #8]
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fad1 	bl	80094a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	69da      	ldr	r2, [r3, #28]
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f042 0208 	orr.w	r2, r2, #8
 8008f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	69da      	ldr	r2, [r3, #28]
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	f022 0204 	bic.w	r2, r2, #4
 8008f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	69d9      	ldr	r1, [r3, #28]
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	691a      	ldr	r2, [r3, #16]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	61da      	str	r2, [r3, #28]
      break;
 8008f30:	e023      	b.n	8008f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	4618      	mov	r0, r3
 8008f3a:	f000 fb1b 	bl	8009574 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	69da      	ldr	r2, [r3, #28]
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	69da      	ldr	r2, [r3, #28]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69d9      	ldr	r1, [r3, #28]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	691b      	ldr	r3, [r3, #16]
 8008f68:	021a      	lsls	r2, r3, #8
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	430a      	orrs	r2, r1
 8008f70:	61da      	str	r2, [r3, #28]
      break;
 8008f72:	e002      	b.n	8008f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008f74:	2301      	movs	r3, #1
 8008f76:	75fb      	strb	r3, [r7, #23]
      break;
 8008f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f84:	4618      	mov	r0, r3
 8008f86:	3718      	adds	r7, #24
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	bd80      	pop	{r7, pc}

08008f8c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f8c:	b580      	push	{r7, lr}
 8008f8e:	b084      	sub	sp, #16
 8008f90:	af00      	add	r7, sp, #0
 8008f92:	6078      	str	r0, [r7, #4]
 8008f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008f96:	2300      	movs	r3, #0
 8008f98:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d101      	bne.n	8008fa8 <HAL_TIM_ConfigClockSource+0x1c>
 8008fa4:	2302      	movs	r3, #2
 8008fa6:	e0b4      	b.n	8009112 <HAL_TIM_ConfigClockSource+0x186>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68ba      	ldr	r2, [r7, #8]
 8008fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fe0:	d03e      	beq.n	8009060 <HAL_TIM_ConfigClockSource+0xd4>
 8008fe2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008fe6:	f200 8087 	bhi.w	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008fee:	f000 8086 	beq.w	80090fe <HAL_TIM_ConfigClockSource+0x172>
 8008ff2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ff6:	d87f      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ff8:	2b70      	cmp	r3, #112	@ 0x70
 8008ffa:	d01a      	beq.n	8009032 <HAL_TIM_ConfigClockSource+0xa6>
 8008ffc:	2b70      	cmp	r3, #112	@ 0x70
 8008ffe:	d87b      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009000:	2b60      	cmp	r3, #96	@ 0x60
 8009002:	d050      	beq.n	80090a6 <HAL_TIM_ConfigClockSource+0x11a>
 8009004:	2b60      	cmp	r3, #96	@ 0x60
 8009006:	d877      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009008:	2b50      	cmp	r3, #80	@ 0x50
 800900a:	d03c      	beq.n	8009086 <HAL_TIM_ConfigClockSource+0xfa>
 800900c:	2b50      	cmp	r3, #80	@ 0x50
 800900e:	d873      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009010:	2b40      	cmp	r3, #64	@ 0x40
 8009012:	d058      	beq.n	80090c6 <HAL_TIM_ConfigClockSource+0x13a>
 8009014:	2b40      	cmp	r3, #64	@ 0x40
 8009016:	d86f      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009018:	2b30      	cmp	r3, #48	@ 0x30
 800901a:	d064      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x15a>
 800901c:	2b30      	cmp	r3, #48	@ 0x30
 800901e:	d86b      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009020:	2b20      	cmp	r3, #32
 8009022:	d060      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x15a>
 8009024:	2b20      	cmp	r3, #32
 8009026:	d867      	bhi.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
 8009028:	2b00      	cmp	r3, #0
 800902a:	d05c      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x15a>
 800902c:	2b10      	cmp	r3, #16
 800902e:	d05a      	beq.n	80090e6 <HAL_TIM_ConfigClockSource+0x15a>
 8009030:	e062      	b.n	80090f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009042:	f000 fbf2 	bl	800982a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	689b      	ldr	r3, [r3, #8]
 800904c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009054:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	68ba      	ldr	r2, [r7, #8]
 800905c:	609a      	str	r2, [r3, #8]
      break;
 800905e:	e04f      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009070:	f000 fbdb 	bl	800982a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	689a      	ldr	r2, [r3, #8]
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009082:	609a      	str	r2, [r3, #8]
      break;
 8009084:	e03c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009092:	461a      	mov	r2, r3
 8009094:	f000 fb4f 	bl	8009736 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	2150      	movs	r1, #80	@ 0x50
 800909e:	4618      	mov	r0, r3
 80090a0:	f000 fba8 	bl	80097f4 <TIM_ITRx_SetConfig>
      break;
 80090a4:	e02c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80090b2:	461a      	mov	r2, r3
 80090b4:	f000 fb6e 	bl	8009794 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2160      	movs	r1, #96	@ 0x60
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 fb98 	bl	80097f4 <TIM_ITRx_SetConfig>
      break;
 80090c4:	e01c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80090d2:	461a      	mov	r2, r3
 80090d4:	f000 fb2f 	bl	8009736 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2140      	movs	r1, #64	@ 0x40
 80090de:	4618      	mov	r0, r3
 80090e0:	f000 fb88 	bl	80097f4 <TIM_ITRx_SetConfig>
      break;
 80090e4:	e00c      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	683b      	ldr	r3, [r7, #0]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f000 fb7f 	bl	80097f4 <TIM_ITRx_SetConfig>
      break;
 80090f6:	e003      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80090f8:	2301      	movs	r3, #1
 80090fa:	73fb      	strb	r3, [r7, #15]
      break;
 80090fc:	e000      	b.n	8009100 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80090fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2201      	movs	r2, #1
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2200      	movs	r2, #0
 800910c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009110:	7bfb      	ldrb	r3, [r7, #15]
}
 8009112:	4618      	mov	r0, r3
 8009114:	3710      	adds	r7, #16
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}

0800911a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800911a:	b580      	push	{r7, lr}
 800911c:	b082      	sub	sp, #8
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800912a:	2b01      	cmp	r3, #1
 800912c:	d101      	bne.n	8009132 <HAL_TIM_SlaveConfigSynchro+0x18>
 800912e:	2302      	movs	r3, #2
 8009130:	e031      	b.n	8009196 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2201      	movs	r2, #1
 8009136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2202      	movs	r2, #2
 800913e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009142:	6839      	ldr	r1, [r7, #0]
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f000 fa65 	bl	8009614 <TIM_SlaveTimer_SetConfig>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d009      	beq.n	8009164 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009160:	2301      	movs	r3, #1
 8009162:	e018      	b.n	8009196 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	68da      	ldr	r2, [r3, #12]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009172:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009182:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2201      	movs	r2, #1
 8009188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2200      	movs	r2, #0
 8009190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009194:	2300      	movs	r3, #0
}
 8009196:	4618      	mov	r0, r3
 8009198:	3708      	adds	r7, #8
 800919a:	46bd      	mov	sp, r7
 800919c:	bd80      	pop	{r7, pc}

0800919e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800919e:	b480      	push	{r7}
 80091a0:	b083      	sub	sp, #12
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80091a6:	bf00      	nop
 80091a8:	370c      	adds	r7, #12
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b083      	sub	sp, #12
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80091ba:	bf00      	nop
 80091bc:	370c      	adds	r7, #12
 80091be:	46bd      	mov	sp, r7
 80091c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c4:	4770      	bx	lr

080091c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80091c6:	b480      	push	{r7}
 80091c8:	b083      	sub	sp, #12
 80091ca:	af00      	add	r7, sp, #0
 80091cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80091ce:	bf00      	nop
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80091da:	b480      	push	{r7}
 80091dc:	b083      	sub	sp, #12
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80091e2:	bf00      	nop
 80091e4:	370c      	adds	r7, #12
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr
	...

080091f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a37      	ldr	r2, [pc, #220]	@ (80092e0 <TIM_Base_SetConfig+0xf0>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00f      	beq.n	8009228 <TIM_Base_SetConfig+0x38>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800920e:	d00b      	beq.n	8009228 <TIM_Base_SetConfig+0x38>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a34      	ldr	r2, [pc, #208]	@ (80092e4 <TIM_Base_SetConfig+0xf4>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d007      	beq.n	8009228 <TIM_Base_SetConfig+0x38>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a33      	ldr	r2, [pc, #204]	@ (80092e8 <TIM_Base_SetConfig+0xf8>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d003      	beq.n	8009228 <TIM_Base_SetConfig+0x38>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a32      	ldr	r2, [pc, #200]	@ (80092ec <TIM_Base_SetConfig+0xfc>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d108      	bne.n	800923a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800922e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	685b      	ldr	r3, [r3, #4]
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	4313      	orrs	r3, r2
 8009238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	4a28      	ldr	r2, [pc, #160]	@ (80092e0 <TIM_Base_SetConfig+0xf0>)
 800923e:	4293      	cmp	r3, r2
 8009240:	d01b      	beq.n	800927a <TIM_Base_SetConfig+0x8a>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009248:	d017      	beq.n	800927a <TIM_Base_SetConfig+0x8a>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	4a25      	ldr	r2, [pc, #148]	@ (80092e4 <TIM_Base_SetConfig+0xf4>)
 800924e:	4293      	cmp	r3, r2
 8009250:	d013      	beq.n	800927a <TIM_Base_SetConfig+0x8a>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	4a24      	ldr	r2, [pc, #144]	@ (80092e8 <TIM_Base_SetConfig+0xf8>)
 8009256:	4293      	cmp	r3, r2
 8009258:	d00f      	beq.n	800927a <TIM_Base_SetConfig+0x8a>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4a23      	ldr	r2, [pc, #140]	@ (80092ec <TIM_Base_SetConfig+0xfc>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d00b      	beq.n	800927a <TIM_Base_SetConfig+0x8a>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a22      	ldr	r2, [pc, #136]	@ (80092f0 <TIM_Base_SetConfig+0x100>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d007      	beq.n	800927a <TIM_Base_SetConfig+0x8a>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4a21      	ldr	r2, [pc, #132]	@ (80092f4 <TIM_Base_SetConfig+0x104>)
 800926e:	4293      	cmp	r3, r2
 8009270:	d003      	beq.n	800927a <TIM_Base_SetConfig+0x8a>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a20      	ldr	r2, [pc, #128]	@ (80092f8 <TIM_Base_SetConfig+0x108>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d108      	bne.n	800928c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	68db      	ldr	r3, [r3, #12]
 8009286:	68fa      	ldr	r2, [r7, #12]
 8009288:	4313      	orrs	r3, r2
 800928a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	4313      	orrs	r3, r2
 8009298:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	689a      	ldr	r2, [r3, #8]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092a2:	683b      	ldr	r3, [r7, #0]
 80092a4:	681a      	ldr	r2, [r3, #0]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a0c      	ldr	r2, [pc, #48]	@ (80092e0 <TIM_Base_SetConfig+0xf0>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d103      	bne.n	80092ba <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	691a      	ldr	r2, [r3, #16]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	f043 0204 	orr.w	r2, r3, #4
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	2201      	movs	r2, #1
 80092ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	601a      	str	r2, [r3, #0]
}
 80092d2:	bf00      	nop
 80092d4:	3714      	adds	r7, #20
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
 80092de:	bf00      	nop
 80092e0:	40010000 	.word	0x40010000
 80092e4:	40000400 	.word	0x40000400
 80092e8:	40000800 	.word	0x40000800
 80092ec:	40000c00 	.word	0x40000c00
 80092f0:	40014000 	.word	0x40014000
 80092f4:	40014400 	.word	0x40014400
 80092f8:	40014800 	.word	0x40014800

080092fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b087      	sub	sp, #28
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6a1b      	ldr	r3, [r3, #32]
 800930a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6a1b      	ldr	r3, [r3, #32]
 8009310:	f023 0201 	bic.w	r2, r3, #1
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	699b      	ldr	r3, [r3, #24]
 8009322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800932a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f023 0303 	bic.w	r3, r3, #3
 8009332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	68fa      	ldr	r2, [r7, #12]
 800933a:	4313      	orrs	r3, r2
 800933c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	f023 0302 	bic.w	r3, r3, #2
 8009344:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	697a      	ldr	r2, [r7, #20]
 800934c:	4313      	orrs	r3, r2
 800934e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	4a1c      	ldr	r2, [pc, #112]	@ (80093c4 <TIM_OC1_SetConfig+0xc8>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d10c      	bne.n	8009372 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	f023 0308 	bic.w	r3, r3, #8
 800935e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	68db      	ldr	r3, [r3, #12]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4313      	orrs	r3, r2
 8009368:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f023 0304 	bic.w	r3, r3, #4
 8009370:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4a13      	ldr	r2, [pc, #76]	@ (80093c4 <TIM_OC1_SetConfig+0xc8>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d111      	bne.n	800939e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009380:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009388:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	695b      	ldr	r3, [r3, #20]
 800938e:	693a      	ldr	r2, [r7, #16]
 8009390:	4313      	orrs	r3, r2
 8009392:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	699b      	ldr	r3, [r3, #24]
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	4313      	orrs	r3, r2
 800939c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	693a      	ldr	r2, [r7, #16]
 80093a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68fa      	ldr	r2, [r7, #12]
 80093a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	685a      	ldr	r2, [r3, #4]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	697a      	ldr	r2, [r7, #20]
 80093b6:	621a      	str	r2, [r3, #32]
}
 80093b8:	bf00      	nop
 80093ba:	371c      	adds	r7, #28
 80093bc:	46bd      	mov	sp, r7
 80093be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c2:	4770      	bx	lr
 80093c4:	40010000 	.word	0x40010000

080093c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093c8:	b480      	push	{r7}
 80093ca:	b087      	sub	sp, #28
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	6a1b      	ldr	r3, [r3, #32]
 80093d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6a1b      	ldr	r3, [r3, #32]
 80093dc:	f023 0210 	bic.w	r2, r3, #16
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	685b      	ldr	r3, [r3, #4]
 80093e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	021b      	lsls	r3, r3, #8
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4313      	orrs	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800940c:	697b      	ldr	r3, [r7, #20]
 800940e:	f023 0320 	bic.w	r3, r3, #32
 8009412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	689b      	ldr	r3, [r3, #8]
 8009418:	011b      	lsls	r3, r3, #4
 800941a:	697a      	ldr	r2, [r7, #20]
 800941c:	4313      	orrs	r3, r2
 800941e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	4a1e      	ldr	r2, [pc, #120]	@ (800949c <TIM_OC2_SetConfig+0xd4>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d10d      	bne.n	8009444 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009428:	697b      	ldr	r3, [r7, #20]
 800942a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800942e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	68db      	ldr	r3, [r3, #12]
 8009434:	011b      	lsls	r3, r3, #4
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	4313      	orrs	r3, r2
 800943a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009442:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	4a15      	ldr	r2, [pc, #84]	@ (800949c <TIM_OC2_SetConfig+0xd4>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d113      	bne.n	8009474 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800944c:	693b      	ldr	r3, [r7, #16]
 800944e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009452:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800945a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	695b      	ldr	r3, [r3, #20]
 8009460:	009b      	lsls	r3, r3, #2
 8009462:	693a      	ldr	r2, [r7, #16]
 8009464:	4313      	orrs	r3, r2
 8009466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	699b      	ldr	r3, [r3, #24]
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	4313      	orrs	r3, r2
 8009472:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	693a      	ldr	r2, [r7, #16]
 8009478:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	685a      	ldr	r2, [r3, #4]
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	621a      	str	r2, [r3, #32]
}
 800948e:	bf00      	nop
 8009490:	371c      	adds	r7, #28
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	40010000 	.word	0x40010000

080094a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6a1b      	ldr	r3, [r3, #32]
 80094ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	6a1b      	ldr	r3, [r3, #32]
 80094b4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	69db      	ldr	r3, [r3, #28]
 80094c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	f023 0303 	bic.w	r3, r3, #3
 80094d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	68fa      	ldr	r2, [r7, #12]
 80094de:	4313      	orrs	r3, r2
 80094e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80094e2:	697b      	ldr	r3, [r7, #20]
 80094e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80094e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	021b      	lsls	r3, r3, #8
 80094f0:	697a      	ldr	r2, [r7, #20]
 80094f2:	4313      	orrs	r3, r2
 80094f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009570 <TIM_OC3_SetConfig+0xd0>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d10d      	bne.n	800951a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009504:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	021b      	lsls	r3, r3, #8
 800950c:	697a      	ldr	r2, [r7, #20]
 800950e:	4313      	orrs	r3, r2
 8009510:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009512:	697b      	ldr	r3, [r7, #20]
 8009514:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009518:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	4a14      	ldr	r2, [pc, #80]	@ (8009570 <TIM_OC3_SetConfig+0xd0>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d113      	bne.n	800954a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009528:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009530:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	695b      	ldr	r3, [r3, #20]
 8009536:	011b      	lsls	r3, r3, #4
 8009538:	693a      	ldr	r2, [r7, #16]
 800953a:	4313      	orrs	r3, r2
 800953c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	699b      	ldr	r3, [r3, #24]
 8009542:	011b      	lsls	r3, r3, #4
 8009544:	693a      	ldr	r2, [r7, #16]
 8009546:	4313      	orrs	r3, r2
 8009548:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	685a      	ldr	r2, [r3, #4]
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	621a      	str	r2, [r3, #32]
}
 8009564:	bf00      	nop
 8009566:	371c      	adds	r7, #28
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr
 8009570:	40010000 	.word	0x40010000

08009574 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009574:	b480      	push	{r7}
 8009576:	b087      	sub	sp, #28
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6a1b      	ldr	r3, [r3, #32]
 8009588:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	685b      	ldr	r3, [r3, #4]
 8009594:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	69db      	ldr	r3, [r3, #28]
 800959a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80095a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80095aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	021b      	lsls	r3, r3, #8
 80095b2:	68fa      	ldr	r2, [r7, #12]
 80095b4:	4313      	orrs	r3, r2
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80095be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	031b      	lsls	r3, r3, #12
 80095c6:	693a      	ldr	r2, [r7, #16]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	4a10      	ldr	r2, [pc, #64]	@ (8009610 <TIM_OC4_SetConfig+0x9c>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d109      	bne.n	80095e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80095da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	695b      	ldr	r3, [r3, #20]
 80095e0:	019b      	lsls	r3, r3, #6
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	4313      	orrs	r3, r2
 80095e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	697a      	ldr	r2, [r7, #20]
 80095ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	685a      	ldr	r2, [r3, #4]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	693a      	ldr	r2, [r7, #16]
 8009600:	621a      	str	r2, [r3, #32]
}
 8009602:	bf00      	nop
 8009604:	371c      	adds	r7, #28
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	40010000 	.word	0x40010000

08009614 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b086      	sub	sp, #24
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800961e:	2300      	movs	r3, #0
 8009620:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	689b      	ldr	r3, [r3, #8]
 8009628:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800962a:	693b      	ldr	r3, [r7, #16]
 800962c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009630:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	693a      	ldr	r2, [r7, #16]
 8009638:	4313      	orrs	r3, r2
 800963a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800963c:	693b      	ldr	r3, [r7, #16]
 800963e:	f023 0307 	bic.w	r3, r3, #7
 8009642:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009644:	683b      	ldr	r3, [r7, #0]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	693a      	ldr	r2, [r7, #16]
 800964a:	4313      	orrs	r3, r2
 800964c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	693a      	ldr	r2, [r7, #16]
 8009654:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	2b70      	cmp	r3, #112	@ 0x70
 800965c:	d01a      	beq.n	8009694 <TIM_SlaveTimer_SetConfig+0x80>
 800965e:	2b70      	cmp	r3, #112	@ 0x70
 8009660:	d860      	bhi.n	8009724 <TIM_SlaveTimer_SetConfig+0x110>
 8009662:	2b60      	cmp	r3, #96	@ 0x60
 8009664:	d054      	beq.n	8009710 <TIM_SlaveTimer_SetConfig+0xfc>
 8009666:	2b60      	cmp	r3, #96	@ 0x60
 8009668:	d85c      	bhi.n	8009724 <TIM_SlaveTimer_SetConfig+0x110>
 800966a:	2b50      	cmp	r3, #80	@ 0x50
 800966c:	d046      	beq.n	80096fc <TIM_SlaveTimer_SetConfig+0xe8>
 800966e:	2b50      	cmp	r3, #80	@ 0x50
 8009670:	d858      	bhi.n	8009724 <TIM_SlaveTimer_SetConfig+0x110>
 8009672:	2b40      	cmp	r3, #64	@ 0x40
 8009674:	d019      	beq.n	80096aa <TIM_SlaveTimer_SetConfig+0x96>
 8009676:	2b40      	cmp	r3, #64	@ 0x40
 8009678:	d854      	bhi.n	8009724 <TIM_SlaveTimer_SetConfig+0x110>
 800967a:	2b30      	cmp	r3, #48	@ 0x30
 800967c:	d055      	beq.n	800972a <TIM_SlaveTimer_SetConfig+0x116>
 800967e:	2b30      	cmp	r3, #48	@ 0x30
 8009680:	d850      	bhi.n	8009724 <TIM_SlaveTimer_SetConfig+0x110>
 8009682:	2b20      	cmp	r3, #32
 8009684:	d051      	beq.n	800972a <TIM_SlaveTimer_SetConfig+0x116>
 8009686:	2b20      	cmp	r3, #32
 8009688:	d84c      	bhi.n	8009724 <TIM_SlaveTimer_SetConfig+0x110>
 800968a:	2b00      	cmp	r3, #0
 800968c:	d04d      	beq.n	800972a <TIM_SlaveTimer_SetConfig+0x116>
 800968e:	2b10      	cmp	r3, #16
 8009690:	d04b      	beq.n	800972a <TIM_SlaveTimer_SetConfig+0x116>
 8009692:	e047      	b.n	8009724 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800969c:	683b      	ldr	r3, [r7, #0]
 800969e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80096a4:	f000 f8c1 	bl	800982a <TIM_ETR_SetConfig>
      break;
 80096a8:	e040      	b.n	800972c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	2b05      	cmp	r3, #5
 80096b0:	d101      	bne.n	80096b6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e03b      	b.n	800972e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	6a1b      	ldr	r3, [r3, #32]
 80096bc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6a1a      	ldr	r2, [r3, #32]
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f022 0201 	bic.w	r2, r2, #1
 80096cc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	699b      	ldr	r3, [r3, #24]
 80096d4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80096dc:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	691b      	ldr	r3, [r3, #16]
 80096e2:	011b      	lsls	r3, r3, #4
 80096e4:	68ba      	ldr	r2, [r7, #8]
 80096e6:	4313      	orrs	r3, r2
 80096e8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	68ba      	ldr	r2, [r7, #8]
 80096f0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	621a      	str	r2, [r3, #32]
      break;
 80096fa:	e017      	b.n	800972c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009708:	461a      	mov	r2, r3
 800970a:	f000 f814 	bl	8009736 <TIM_TI1_ConfigInputStage>
      break;
 800970e:	e00d      	b.n	800972c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800971c:	461a      	mov	r2, r3
 800971e:	f000 f839 	bl	8009794 <TIM_TI2_ConfigInputStage>
      break;
 8009722:	e003      	b.n	800972c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8009724:	2301      	movs	r3, #1
 8009726:	75fb      	strb	r3, [r7, #23]
      break;
 8009728:	e000      	b.n	800972c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800972a:	bf00      	nop
  }

  return status;
 800972c:	7dfb      	ldrb	r3, [r7, #23]
}
 800972e:	4618      	mov	r0, r3
 8009730:	3718      	adds	r7, #24
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}

08009736 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009736:	b480      	push	{r7}
 8009738:	b087      	sub	sp, #28
 800973a:	af00      	add	r7, sp, #0
 800973c:	60f8      	str	r0, [r7, #12]
 800973e:	60b9      	str	r1, [r7, #8]
 8009740:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	6a1b      	ldr	r3, [r3, #32]
 8009746:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	f023 0201 	bic.w	r2, r3, #1
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	699b      	ldr	r3, [r3, #24]
 8009758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009760:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	011b      	lsls	r3, r3, #4
 8009766:	693a      	ldr	r2, [r7, #16]
 8009768:	4313      	orrs	r3, r2
 800976a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800976c:	697b      	ldr	r3, [r7, #20]
 800976e:	f023 030a 	bic.w	r3, r3, #10
 8009772:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	68bb      	ldr	r3, [r7, #8]
 8009778:	4313      	orrs	r3, r2
 800977a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	693a      	ldr	r2, [r7, #16]
 8009780:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	621a      	str	r2, [r3, #32]
}
 8009788:	bf00      	nop
 800978a:	371c      	adds	r7, #28
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr

08009794 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009794:	b480      	push	{r7}
 8009796:	b087      	sub	sp, #28
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	6a1b      	ldr	r3, [r3, #32]
 80097a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	6a1b      	ldr	r3, [r3, #32]
 80097aa:	f023 0210 	bic.w	r2, r3, #16
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	699b      	ldr	r3, [r3, #24]
 80097b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80097be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	031b      	lsls	r3, r3, #12
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80097d0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	011b      	lsls	r3, r3, #4
 80097d6:	697a      	ldr	r2, [r7, #20]
 80097d8:	4313      	orrs	r3, r2
 80097da:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	693a      	ldr	r2, [r7, #16]
 80097e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	697a      	ldr	r2, [r7, #20]
 80097e6:	621a      	str	r2, [r3, #32]
}
 80097e8:	bf00      	nop
 80097ea:	371c      	adds	r7, #28
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
 80097fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800980a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800980c:	683a      	ldr	r2, [r7, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	4313      	orrs	r3, r2
 8009812:	f043 0307 	orr.w	r3, r3, #7
 8009816:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	68fa      	ldr	r2, [r7, #12]
 800981c:	609a      	str	r2, [r3, #8]
}
 800981e:	bf00      	nop
 8009820:	3714      	adds	r7, #20
 8009822:	46bd      	mov	sp, r7
 8009824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009828:	4770      	bx	lr

0800982a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800982a:	b480      	push	{r7}
 800982c:	b087      	sub	sp, #28
 800982e:	af00      	add	r7, sp, #0
 8009830:	60f8      	str	r0, [r7, #12]
 8009832:	60b9      	str	r1, [r7, #8]
 8009834:	607a      	str	r2, [r7, #4]
 8009836:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009844:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	021a      	lsls	r2, r3, #8
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	431a      	orrs	r2, r3
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	4313      	orrs	r3, r2
 8009852:	697a      	ldr	r2, [r7, #20]
 8009854:	4313      	orrs	r3, r2
 8009856:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	697a      	ldr	r2, [r7, #20]
 800985c:	609a      	str	r2, [r3, #8]
}
 800985e:	bf00      	nop
 8009860:	371c      	adds	r7, #28
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800986a:	b480      	push	{r7}
 800986c:	b087      	sub	sp, #28
 800986e:	af00      	add	r7, sp, #0
 8009870:	60f8      	str	r0, [r7, #12]
 8009872:	60b9      	str	r1, [r7, #8]
 8009874:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	f003 031f 	and.w	r3, r3, #31
 800987c:	2201      	movs	r2, #1
 800987e:	fa02 f303 	lsl.w	r3, r2, r3
 8009882:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6a1a      	ldr	r2, [r3, #32]
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	43db      	mvns	r3, r3
 800988c:	401a      	ands	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	6a1a      	ldr	r2, [r3, #32]
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	f003 031f 	and.w	r3, r3, #31
 800989c:	6879      	ldr	r1, [r7, #4]
 800989e:	fa01 f303 	lsl.w	r3, r1, r3
 80098a2:	431a      	orrs	r2, r3
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	621a      	str	r2, [r3, #32]
}
 80098a8:	bf00      	nop
 80098aa:	371c      	adds	r7, #28
 80098ac:	46bd      	mov	sp, r7
 80098ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
 80098bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d101      	bne.n	80098cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80098c8:	2302      	movs	r3, #2
 80098ca:	e050      	b.n	800996e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2201      	movs	r2, #1
 80098d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2202      	movs	r2, #2
 80098d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	689b      	ldr	r3, [r3, #8]
 80098ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80098f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	68fa      	ldr	r2, [r7, #12]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	68fa      	ldr	r2, [r7, #12]
 8009904:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a1c      	ldr	r2, [pc, #112]	@ (800997c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d018      	beq.n	8009942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009918:	d013      	beq.n	8009942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a18      	ldr	r2, [pc, #96]	@ (8009980 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d00e      	beq.n	8009942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a16      	ldr	r2, [pc, #88]	@ (8009984 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d009      	beq.n	8009942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a15      	ldr	r2, [pc, #84]	@ (8009988 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d004      	beq.n	8009942 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a13      	ldr	r2, [pc, #76]	@ (800998c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d10c      	bne.n	800995c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009948:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800994a:	683b      	ldr	r3, [r7, #0]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	4313      	orrs	r3, r2
 8009952:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2201      	movs	r2, #1
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3714      	adds	r7, #20
 8009972:	46bd      	mov	sp, r7
 8009974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009978:	4770      	bx	lr
 800997a:	bf00      	nop
 800997c:	40010000 	.word	0x40010000
 8009980:	40000400 	.word	0x40000400
 8009984:	40000800 	.word	0x40000800
 8009988:	40000c00 	.word	0x40000c00
 800998c:	40014000 	.word	0x40014000

08009990 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009990:	b480      	push	{r7}
 8009992:	b083      	sub	sp, #12
 8009994:	af00      	add	r7, sp, #0
 8009996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009998:	bf00      	nop
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b083      	sub	sp, #12
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80099ac:	bf00      	nop
 80099ae:	370c      	adds	r7, #12
 80099b0:	46bd      	mov	sp, r7
 80099b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b6:	4770      	bx	lr

080099b8 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b082      	sub	sp, #8
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d101      	bne.n	80099ca <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	e033      	b.n	8009a32 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d106      	bne.n	80099e4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f7f8 fa1a 	bl	8001e18 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2202      	movs	r2, #2
 80099e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f000 fb61 	bl	800a0b4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	691a      	ldr	r2, [r3, #16]
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8009a00:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	695a      	ldr	r2, [r3, #20]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009a10:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	68da      	ldr	r2, [r3, #12]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a20:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	2200      	movs	r2, #0
 8009a26:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2201      	movs	r2, #1
 8009a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a30:	2300      	movs	r3, #0
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3708      	adds	r7, #8
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
	...

08009a3c <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b088      	sub	sp, #32
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	695b      	ldr	r3, [r3, #20]
 8009a5a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009a60:	2300      	movs	r3, #0
 8009a62:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009a64:	69fb      	ldr	r3, [r7, #28]
 8009a66:	f003 030f 	and.w	r3, r3, #15
 8009a6a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8009a6c:	693b      	ldr	r3, [r7, #16]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d117      	bne.n	8009aa2 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	f003 0320 	and.w	r3, r3, #32
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d012      	beq.n	8009aa2 <HAL_USART_IRQHandler+0x66>
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	f003 0320 	and.w	r3, r3, #32
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00d      	beq.n	8009aa2 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	2b22      	cmp	r3, #34	@ 0x22
 8009a90:	d103      	bne.n	8009a9a <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f9ba 	bl	8009e0c <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8009a98:	e0e9      	b.n	8009c6e <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fa3c 	bl	8009f18 <USART_TransmitReceive_IT>
      return;
 8009aa0:	e0e5      	b.n	8009c6e <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009aa2:	693b      	ldr	r3, [r7, #16]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	f000 80bb 	beq.w	8009c20 <HAL_USART_IRQHandler+0x1e4>
 8009aaa:	697b      	ldr	r3, [r7, #20]
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d105      	bne.n	8009ac0 <HAL_USART_IRQHandler+0x84>
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f000 80b0 	beq.w	8009c20 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	f003 0301 	and.w	r3, r3, #1
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <HAL_USART_IRQHandler+0xa4>
 8009aca:	69bb      	ldr	r3, [r7, #24]
 8009acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d005      	beq.n	8009ae0 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ad8:	f043 0201 	orr.w	r2, r3, #1
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	f003 0304 	and.w	r3, r3, #4
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d00a      	beq.n	8009b00 <HAL_USART_IRQHandler+0xc4>
 8009aea:	697b      	ldr	r3, [r7, #20]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d005      	beq.n	8009b00 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009af8:	f043 0202 	orr.w	r2, r3, #2
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	f003 0302 	and.w	r3, r3, #2
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d00a      	beq.n	8009b20 <HAL_USART_IRQHandler+0xe4>
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	f003 0301 	and.w	r3, r3, #1
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d005      	beq.n	8009b20 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b18:	f043 0204 	orr.w	r2, r3, #4
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	f003 0308 	and.w	r3, r3, #8
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00f      	beq.n	8009b4a <HAL_USART_IRQHandler+0x10e>
 8009b2a:	69bb      	ldr	r3, [r7, #24]
 8009b2c:	f003 0320 	and.w	r3, r3, #32
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d104      	bne.n	8009b3e <HAL_USART_IRQHandler+0x102>
 8009b34:	697b      	ldr	r3, [r7, #20]
 8009b36:	f003 0301 	and.w	r3, r3, #1
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d005      	beq.n	8009b4a <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b42:	f043 0208 	orr.w	r2, r3, #8
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	f000 808c 	beq.w	8009c6c <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009b54:	69fb      	ldr	r3, [r7, #28]
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d011      	beq.n	8009b82 <HAL_USART_IRQHandler+0x146>
 8009b5e:	69bb      	ldr	r3, [r7, #24]
 8009b60:	f003 0320 	and.w	r3, r3, #32
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d00c      	beq.n	8009b82 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b22      	cmp	r3, #34	@ 0x22
 8009b72:	d103      	bne.n	8009b7c <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f000 f949 	bl	8009e0c <USART_Receive_IT>
 8009b7a:	e002      	b.n	8009b82 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 f9cb 	bl	8009f18 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	695b      	ldr	r3, [r3, #20]
 8009b88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b8c:	2b40      	cmp	r3, #64	@ 0x40
 8009b8e:	bf0c      	ite	eq
 8009b90:	2301      	moveq	r3, #1
 8009b92:	2300      	movne	r3, #0
 8009b94:	b2db      	uxtb	r3, r3
 8009b96:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009b9c:	f003 0308 	and.w	r3, r3, #8
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d102      	bne.n	8009baa <HAL_USART_IRQHandler+0x16e>
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d031      	beq.n	8009c0e <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 f88c 	bl	8009cc8 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	695b      	ldr	r3, [r3, #20]
 8009bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bba:	2b40      	cmp	r3, #64	@ 0x40
 8009bbc:	d123      	bne.n	8009c06 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	695a      	ldr	r2, [r3, #20]
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009bcc:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d013      	beq.n	8009bfe <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bda:	4a26      	ldr	r2, [pc, #152]	@ (8009c74 <HAL_USART_IRQHandler+0x238>)
 8009bdc:	651a      	str	r2, [r3, #80]	@ 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009be2:	4618      	mov	r0, r3
 8009be4:	f7f9 fcc4 	bl	8003570 <HAL_DMA_Abort_IT>
 8009be8:	4603      	mov	r3, r0
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d016      	beq.n	8009c1c <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009bf4:	687a      	ldr	r2, [r7, #4]
 8009bf6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009bf8:	4610      	mov	r0, r2
 8009bfa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009bfc:	e00e      	b.n	8009c1c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8009bfe:	6878      	ldr	r0, [r7, #4]
 8009c00:	f000 f858 	bl	8009cb4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009c04:	e00a      	b.n	8009c1c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f854 	bl	8009cb4 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009c0c:	e006      	b.n	8009c1c <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 f850 	bl	8009cb4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009c1a:	e027      	b.n	8009c6c <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009c1c:	bf00      	nop
    return;
 8009c1e:	e025      	b.n	8009c6c <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d012      	beq.n	8009c50 <HAL_USART_IRQHandler+0x214>
 8009c2a:	69bb      	ldr	r3, [r7, #24]
 8009c2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d00d      	beq.n	8009c50 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b12      	cmp	r3, #18
 8009c3e:	d103      	bne.n	8009c48 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	f000 f873 	bl	8009d2c <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8009c46:	e012      	b.n	8009c6e <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 f965 	bl	8009f18 <USART_TransmitReceive_IT>
    return;
 8009c4e:	e00e      	b.n	8009c6e <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d009      	beq.n	8009c6e <HAL_USART_IRQHandler+0x232>
 8009c5a:	69bb      	ldr	r3, [r7, #24]
 8009c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d004      	beq.n	8009c6e <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f8b1 	bl	8009dcc <USART_EndTransmit_IT>
    return;
 8009c6a:	e000      	b.n	8009c6e <HAL_USART_IRQHandler+0x232>
    return;
 8009c6c:	bf00      	nop
  }
}
 8009c6e:	3720      	adds	r7, #32
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}
 8009c74:	08009d05 	.word	0x08009d05

08009c78 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b083      	sub	sp, #12
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8009c80:	bf00      	nop
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8009c94:	bf00      	nop
 8009c96:	370c      	adds	r7, #12
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9e:	4770      	bx	lr

08009ca0 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b083      	sub	sp, #12
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8009ca8:	bf00      	nop
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b083      	sub	sp, #12
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68da      	ldr	r2, [r3, #12]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8009cde:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	695a      	ldr	r2, [r3, #20]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f022 0201 	bic.w	r2, r2, #1
 8009cee:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8009cf8:	bf00      	nop
 8009cfa:	370c      	adds	r7, #12
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d02:	4770      	bx	lr

08009d04 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b084      	sub	sp, #16
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009d10:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	865a      	strh	r2, [r3, #50]	@ 0x32
  husart->TxXferCount = 0x00U;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f7ff ffc8 	bl	8009cb4 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009d24:	bf00      	nop
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b12      	cmp	r3, #18
 8009d3e:	d13e      	bne.n	8009dbe <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d48:	d114      	bne.n	8009d74 <USART_Transmit_IT+0x48>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d110      	bne.n	8009d74 <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d56:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	881b      	ldrh	r3, [r3, #0]
 8009d5c:	461a      	mov	r2, r3
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009d66:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d6c:	1c9a      	adds	r2, r3, #2
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	625a      	str	r2, [r3, #36]	@ 0x24
 8009d72:	e008      	b.n	8009d86 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d78:	1c59      	adds	r1, r3, #1
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	6251      	str	r1, [r2, #36]	@ 0x24
 8009d7e:	781a      	ldrb	r2, [r3, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	687a      	ldr	r2, [r7, #4]
 8009d92:	4619      	mov	r1, r3
 8009d94:	8551      	strh	r1, [r2, #42]	@ 0x2a
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d10f      	bne.n	8009dba <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68da      	ldr	r2, [r3, #12]
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009da8:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	68da      	ldr	r2, [r3, #12]
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009db8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	e000      	b.n	8009dc0 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009dbe:	2302      	movs	r3, #2
  }
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3714      	adds	r7, #20
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dca:	4770      	bx	lr

08009dcc <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009dcc:	b580      	push	{r7, lr}
 8009dce:	b082      	sub	sp, #8
 8009dd0:	af00      	add	r7, sp, #0
 8009dd2:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	68da      	ldr	r2, [r3, #12]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009de2:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	695a      	ldr	r2, [r3, #20]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f022 0201 	bic.w	r2, r2, #1
 8009df2:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2201      	movs	r2, #1
 8009df8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f7ff ff3b 	bl	8009c78 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009e02:	2300      	movs	r3, #0
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3708      	adds	r7, #8
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b084      	sub	sp, #16
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009e14:	2300      	movs	r3, #0
 8009e16:	60fb      	str	r3, [r7, #12]
  uint16_t *pdata16bits = NULL;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	60bb      	str	r3, [r7, #8]

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009e22:	b2db      	uxtb	r3, r3
 8009e24:	2b22      	cmp	r3, #34	@ 0x22
 8009e26:	d172      	bne.n	8009f0e <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	689b      	ldr	r3, [r3, #8]
 8009e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e30:	d115      	bne.n	8009e5e <USART_Receive_IT+0x52>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d111      	bne.n	8009e5e <USART_Receive_IT+0x52>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e3e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	685b      	ldr	r3, [r3, #4]
 8009e46:	b29b      	uxth	r3, r3
 8009e48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009e4c:	b29a      	uxth	r2, r3
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e56:	1c9a      	adds	r2, r3, #2
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009e5c:	e024      	b.n	8009ea8 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e62:	60fb      	str	r3, [r7, #12]
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	689b      	ldr	r3, [r3, #8]
 8009e68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e6c:	d007      	beq.n	8009e7e <USART_Receive_IT+0x72>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	689b      	ldr	r3, [r3, #8]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d10a      	bne.n	8009e8c <USART_Receive_IT+0x80>
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	691b      	ldr	r3, [r3, #16]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d106      	bne.n	8009e8c <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	685b      	ldr	r3, [r3, #4]
 8009e84:	b2da      	uxtb	r2, r3
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	701a      	strb	r2, [r3, #0]
 8009e8a:	e008      	b.n	8009e9e <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	685b      	ldr	r3, [r3, #4]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    husart->RxXferCount--;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009eac:	b29b      	uxth	r3, r3
 8009eae:	3b01      	subs	r3, #1
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	865a      	strh	r2, [r3, #50]	@ 0x32

    if (husart->RxXferCount == 0U)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009eba:	b29b      	uxth	r3, r3
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d120      	bne.n	8009f02 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68da      	ldr	r2, [r3, #12]
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f022 0220 	bic.w	r2, r2, #32
 8009ece:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	68da      	ldr	r2, [r3, #12]
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009ede:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	695a      	ldr	r2, [r3, #20]
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f022 0201 	bic.w	r2, r2, #1
 8009eee:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f7ff fec7 	bl	8009c8c <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	e006      	b.n	8009f10 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	22ff      	movs	r2, #255	@ 0xff
 8009f08:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	e000      	b.n	8009f10 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8009f0e:	2302      	movs	r3, #2
  }
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3710      	adds	r7, #16
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}

08009f18 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b32      	cmp	r3, #50	@ 0x32
 8009f2a:	f040 80bd 	bne.w	800a0a8 <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f32:	b29b      	uxth	r3, r3
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d03d      	beq.n	8009fb4 <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009f42:	2b80      	cmp	r3, #128	@ 0x80
 8009f44:	d136      	bne.n	8009fb4 <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f4e:	d114      	bne.n	8009f7a <USART_TransmitReceive_IT+0x62>
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	691b      	ldr	r3, [r3, #16]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d110      	bne.n	8009f7a <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f5c:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	881b      	ldrh	r3, [r3, #0]
 8009f62:	461a      	mov	r2, r3
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009f6c:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f72:	1c9a      	adds	r2, r3, #2
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	625a      	str	r2, [r3, #36]	@ 0x24
 8009f78:	e008      	b.n	8009f8c <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009f7e:	1c59      	adds	r1, r3, #1
 8009f80:	687a      	ldr	r2, [r7, #4]
 8009f82:	6251      	str	r1, [r2, #36]	@ 0x24
 8009f84:	781a      	ldrb	r2, [r3, #0]
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f90:	b29b      	uxth	r3, r3
 8009f92:	3b01      	subs	r3, #1
 8009f94:	b29a      	uxth	r2, r3
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d107      	bne.n	8009fb4 <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	68da      	ldr	r2, [r3, #12]
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fb2:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009fb8:	b29b      	uxth	r3, r3
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d04c      	beq.n	800a058 <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0320 	and.w	r3, r3, #32
 8009fc8:	2b20      	cmp	r3, #32
 8009fca:	d145      	bne.n	800a058 <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009fd4:	d115      	bne.n	800a002 <USART_TransmitReceive_IT+0xea>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d111      	bne.n	800a002 <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009fe2:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	b29b      	uxth	r3, r3
 8009fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ff0:	b29a      	uxth	r2, r3
 8009ff2:	68bb      	ldr	r3, [r7, #8]
 8009ff4:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ffa:	1c9a      	adds	r2, r3, #2
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a000:	e023      	b.n	800a04a <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a00a:	d007      	beq.n	800a01c <USART_TransmitReceive_IT+0x104>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	689b      	ldr	r3, [r3, #8]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d10b      	bne.n	800a02c <USART_TransmitReceive_IT+0x114>
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	691b      	ldr	r3, [r3, #16]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d107      	bne.n	800a02c <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	685a      	ldr	r2, [r3, #4]
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a026:	b2d2      	uxtb	r2, r2
 800a028:	701a      	strb	r2, [r3, #0]
 800a02a:	e009      	b.n	800a040 <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	685b      	ldr	r3, [r3, #4]
 800a032:	b2da      	uxtb	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a038:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800a03c:	b2d2      	uxtb	r2, r2
 800a03e:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a044:	1c5a      	adds	r2, r3, #1
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	62da      	str	r2, [r3, #44]	@ 0x2c
        }

        husart->RxXferCount--;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a04e:	b29b      	uxth	r3, r3
 800a050:	3b01      	subs	r3, #1
 800a052:	b29a      	uxth	r2, r3
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	865a      	strh	r2, [r3, #50]	@ 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d120      	bne.n	800a0a4 <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	68da      	ldr	r2, [r3, #12]
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	f022 0220 	bic.w	r2, r2, #32
 800a070:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68da      	ldr	r2, [r3, #12]
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a080:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	695a      	ldr	r2, [r3, #20]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f022 0201 	bic.w	r2, r2, #1
 800a090:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2201      	movs	r2, #1
 800a096:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f7ff fe00 	bl	8009ca0 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	e002      	b.n	800a0aa <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	e000      	b.n	800a0aa <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 800a0a8:	2302      	movs	r3, #2
  }
}
 800a0aa:	4618      	mov	r0, r3
 800a0ac:	3710      	adds	r7, #16
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
	...

0800a0b4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 800a0b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a0b8:	b0c6      	sub	sp, #280	@ 0x118
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 800a0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68d9      	ldr	r1, [r3, #12]
 800a0ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0d2:	681a      	ldr	r2, [r3, #0]
 800a0d4:	f021 030c 	bic.w	r3, r1, #12
 800a0d8:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 800a0da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	691b      	ldr	r3, [r3, #16]
 800a0e2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 800a0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a0ea:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800a0ee:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800a0f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0f6:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800a0f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0fc:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800a0fe:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 800a100:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a104:	6a1b      	ldr	r3, [r3, #32]
 800a106:	431a      	orrs	r2, r3
 800a108:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a10c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 800a10e:	431a      	orrs	r2, r3
 800a110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a114:	4313      	orrs	r3, r2
 800a116:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a11a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 800a11e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a128:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 800a12a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	68db      	ldr	r3, [r3, #12]
 800a132:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800a136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a13a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 800a13e:	f023 030c 	bic.w	r3, r3, #12
 800a142:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800a146:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a14a:	689a      	ldr	r2, [r3, #8]
 800a14c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a150:	691b      	ldr	r3, [r3, #16]
 800a152:	431a      	orrs	r2, r3
 800a154:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a158:	695b      	ldr	r3, [r3, #20]
 800a15a:	431a      	orrs	r2, r3
 800a15c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a160:	4313      	orrs	r3, r2
 800a162:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a166:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800a16a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a174:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800a176:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	6959      	ldr	r1, [r3, #20]
 800a17e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a182:	681a      	ldr	r2, [r3, #0]
 800a184:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 800a188:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800a18a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a18e:	681a      	ldr	r2, [r3, #0]
 800a190:	4b8b      	ldr	r3, [pc, #556]	@ (800a3c0 <USART_SetConfig+0x30c>)
 800a192:	429a      	cmp	r2, r3
 800a194:	d006      	beq.n	800a1a4 <USART_SetConfig+0xf0>
 800a196:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	4b89      	ldr	r3, [pc, #548]	@ (800a3c4 <USART_SetConfig+0x310>)
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	f040 8114 	bne.w	800a3cc <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a1a4:	f7fe fb70 	bl	8008888 <HAL_RCC_GetPCLK2Freq>
 800a1a8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800a1ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a1b6:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 800a1ba:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800a1be:	4622      	mov	r2, r4
 800a1c0:	462b      	mov	r3, r5
 800a1c2:	1891      	adds	r1, r2, r2
 800a1c4:	6739      	str	r1, [r7, #112]	@ 0x70
 800a1c6:	415b      	adcs	r3, r3
 800a1c8:	677b      	str	r3, [r7, #116]	@ 0x74
 800a1ca:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800a1ce:	4621      	mov	r1, r4
 800a1d0:	eb12 0801 	adds.w	r8, r2, r1
 800a1d4:	4629      	mov	r1, r5
 800a1d6:	eb43 0901 	adc.w	r9, r3, r1
 800a1da:	f04f 0200 	mov.w	r2, #0
 800a1de:	f04f 0300 	mov.w	r3, #0
 800a1e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a1e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a1ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a1ee:	4690      	mov	r8, r2
 800a1f0:	4699      	mov	r9, r3
 800a1f2:	4623      	mov	r3, r4
 800a1f4:	eb18 0303 	adds.w	r3, r8, r3
 800a1f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a1fc:	462b      	mov	r3, r5
 800a1fe:	eb49 0303 	adc.w	r3, r9, r3
 800a202:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a206:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a20a:	685b      	ldr	r3, [r3, #4]
 800a20c:	2200      	movs	r2, #0
 800a20e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a212:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800a216:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a21a:	460b      	mov	r3, r1
 800a21c:	18db      	adds	r3, r3, r3
 800a21e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a220:	4613      	mov	r3, r2
 800a222:	eb42 0303 	adc.w	r3, r2, r3
 800a226:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a228:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a22c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800a230:	f7f5 ffd2 	bl	80001d8 <__aeabi_uldivmod>
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	4b63      	ldr	r3, [pc, #396]	@ (800a3c8 <USART_SetConfig+0x314>)
 800a23a:	fba3 2302 	umull	r2, r3, r3, r2
 800a23e:	095b      	lsrs	r3, r3, #5
 800a240:	011c      	lsls	r4, r3, #4
 800a242:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a246:	2200      	movs	r2, #0
 800a248:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a24c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a250:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800a254:	4642      	mov	r2, r8
 800a256:	464b      	mov	r3, r9
 800a258:	1891      	adds	r1, r2, r2
 800a25a:	6639      	str	r1, [r7, #96]	@ 0x60
 800a25c:	415b      	adcs	r3, r3
 800a25e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a260:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a264:	4641      	mov	r1, r8
 800a266:	1851      	adds	r1, r2, r1
 800a268:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a26a:	4649      	mov	r1, r9
 800a26c:	414b      	adcs	r3, r1
 800a26e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a270:	f04f 0200 	mov.w	r2, #0
 800a274:	f04f 0300 	mov.w	r3, #0
 800a278:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 800a27c:	4659      	mov	r1, fp
 800a27e:	00cb      	lsls	r3, r1, #3
 800a280:	4651      	mov	r1, sl
 800a282:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a286:	4651      	mov	r1, sl
 800a288:	00ca      	lsls	r2, r1, #3
 800a28a:	4610      	mov	r0, r2
 800a28c:	4619      	mov	r1, r3
 800a28e:	4603      	mov	r3, r0
 800a290:	4642      	mov	r2, r8
 800a292:	189b      	adds	r3, r3, r2
 800a294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a298:	464b      	mov	r3, r9
 800a29a:	460a      	mov	r2, r1
 800a29c:	eb42 0303 	adc.w	r3, r2, r3
 800a2a0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2b0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a2b4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	18db      	adds	r3, r3, r3
 800a2bc:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2be:	4613      	mov	r3, r2
 800a2c0:	eb42 0303 	adc.w	r3, r2, r3
 800a2c4:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2c6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a2ca:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a2ce:	f7f5 ff83 	bl	80001d8 <__aeabi_uldivmod>
 800a2d2:	4602      	mov	r2, r0
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	4611      	mov	r1, r2
 800a2d8:	4b3b      	ldr	r3, [pc, #236]	@ (800a3c8 <USART_SetConfig+0x314>)
 800a2da:	fba3 2301 	umull	r2, r3, r3, r1
 800a2de:	095b      	lsrs	r3, r3, #5
 800a2e0:	2264      	movs	r2, #100	@ 0x64
 800a2e2:	fb02 f303 	mul.w	r3, r2, r3
 800a2e6:	1acb      	subs	r3, r1, r3
 800a2e8:	00db      	lsls	r3, r3, #3
 800a2ea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a2ee:	4b36      	ldr	r3, [pc, #216]	@ (800a3c8 <USART_SetConfig+0x314>)
 800a2f0:	fba3 2302 	umull	r2, r3, r3, r2
 800a2f4:	095b      	lsrs	r3, r3, #5
 800a2f6:	005b      	lsls	r3, r3, #1
 800a2f8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a2fc:	441c      	add	r4, r3
 800a2fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a302:	2200      	movs	r2, #0
 800a304:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a308:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a30c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a310:	4642      	mov	r2, r8
 800a312:	464b      	mov	r3, r9
 800a314:	1891      	adds	r1, r2, r2
 800a316:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a318:	415b      	adcs	r3, r3
 800a31a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a31c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a320:	4641      	mov	r1, r8
 800a322:	1851      	adds	r1, r2, r1
 800a324:	6439      	str	r1, [r7, #64]	@ 0x40
 800a326:	4649      	mov	r1, r9
 800a328:	414b      	adcs	r3, r1
 800a32a:	647b      	str	r3, [r7, #68]	@ 0x44
 800a32c:	f04f 0200 	mov.w	r2, #0
 800a330:	f04f 0300 	mov.w	r3, #0
 800a334:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 800a338:	4659      	mov	r1, fp
 800a33a:	00cb      	lsls	r3, r1, #3
 800a33c:	4651      	mov	r1, sl
 800a33e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a342:	4651      	mov	r1, sl
 800a344:	00ca      	lsls	r2, r1, #3
 800a346:	4610      	mov	r0, r2
 800a348:	4619      	mov	r1, r3
 800a34a:	4603      	mov	r3, r0
 800a34c:	4642      	mov	r2, r8
 800a34e:	189b      	adds	r3, r3, r2
 800a350:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a354:	464b      	mov	r3, r9
 800a356:	460a      	mov	r2, r1
 800a358:	eb42 0303 	adc.w	r3, r2, r3
 800a35c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a360:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a364:	685b      	ldr	r3, [r3, #4]
 800a366:	2200      	movs	r2, #0
 800a368:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a36c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a370:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a374:	460b      	mov	r3, r1
 800a376:	18db      	adds	r3, r3, r3
 800a378:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a37a:	4613      	mov	r3, r2
 800a37c:	eb42 0303 	adc.w	r3, r2, r3
 800a380:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a382:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a386:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a38a:	f7f5 ff25 	bl	80001d8 <__aeabi_uldivmod>
 800a38e:	4602      	mov	r2, r0
 800a390:	460b      	mov	r3, r1
 800a392:	4b0d      	ldr	r3, [pc, #52]	@ (800a3c8 <USART_SetConfig+0x314>)
 800a394:	fba3 1302 	umull	r1, r3, r3, r2
 800a398:	095b      	lsrs	r3, r3, #5
 800a39a:	2164      	movs	r1, #100	@ 0x64
 800a39c:	fb01 f303 	mul.w	r3, r1, r3
 800a3a0:	1ad3      	subs	r3, r2, r3
 800a3a2:	00db      	lsls	r3, r3, #3
 800a3a4:	3332      	adds	r3, #50	@ 0x32
 800a3a6:	4a08      	ldr	r2, [pc, #32]	@ (800a3c8 <USART_SetConfig+0x314>)
 800a3a8:	fba2 2303 	umull	r2, r3, r2, r3
 800a3ac:	095b      	lsrs	r3, r3, #5
 800a3ae:	f003 0207 	and.w	r2, r3, #7
 800a3b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4422      	add	r2, r4
 800a3ba:	609a      	str	r2, [r3, #8]
 800a3bc:	e109      	b.n	800a5d2 <USART_SetConfig+0x51e>
 800a3be:	bf00      	nop
 800a3c0:	40011000 	.word	0x40011000
 800a3c4:	40011400 	.word	0x40011400
 800a3c8:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a3cc:	f7fe fa48 	bl	8008860 <HAL_RCC_GetPCLK1Freq>
 800a3d0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800a3d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a3d8:	2200      	movs	r2, #0
 800a3da:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3de:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a3e2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a3e6:	4642      	mov	r2, r8
 800a3e8:	464b      	mov	r3, r9
 800a3ea:	1891      	adds	r1, r2, r2
 800a3ec:	6339      	str	r1, [r7, #48]	@ 0x30
 800a3ee:	415b      	adcs	r3, r3
 800a3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a3f6:	4641      	mov	r1, r8
 800a3f8:	1854      	adds	r4, r2, r1
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	eb43 0501 	adc.w	r5, r3, r1
 800a400:	f04f 0200 	mov.w	r2, #0
 800a404:	f04f 0300 	mov.w	r3, #0
 800a408:	00eb      	lsls	r3, r5, #3
 800a40a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a40e:	00e2      	lsls	r2, r4, #3
 800a410:	4614      	mov	r4, r2
 800a412:	461d      	mov	r5, r3
 800a414:	4643      	mov	r3, r8
 800a416:	18e3      	adds	r3, r4, r3
 800a418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a41c:	464b      	mov	r3, r9
 800a41e:	eb45 0303 	adc.w	r3, r5, r3
 800a422:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	2200      	movs	r2, #0
 800a42e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a432:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a436:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a43a:	460b      	mov	r3, r1
 800a43c:	18db      	adds	r3, r3, r3
 800a43e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a440:	4613      	mov	r3, r2
 800a442:	eb42 0303 	adc.w	r3, r2, r3
 800a446:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a448:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a44c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a450:	f7f5 fec2 	bl	80001d8 <__aeabi_uldivmod>
 800a454:	4602      	mov	r2, r0
 800a456:	460b      	mov	r3, r1
 800a458:	4b61      	ldr	r3, [pc, #388]	@ (800a5e0 <USART_SetConfig+0x52c>)
 800a45a:	fba3 2302 	umull	r2, r3, r3, r2
 800a45e:	095b      	lsrs	r3, r3, #5
 800a460:	011c      	lsls	r4, r3, #4
 800a462:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a466:	2200      	movs	r2, #0
 800a468:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a46c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a470:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a474:	4642      	mov	r2, r8
 800a476:	464b      	mov	r3, r9
 800a478:	1891      	adds	r1, r2, r2
 800a47a:	6239      	str	r1, [r7, #32]
 800a47c:	415b      	adcs	r3, r3
 800a47e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a480:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a484:	4641      	mov	r1, r8
 800a486:	eb12 0a01 	adds.w	sl, r2, r1
 800a48a:	4649      	mov	r1, r9
 800a48c:	eb43 0b01 	adc.w	fp, r3, r1
 800a490:	f04f 0200 	mov.w	r2, #0
 800a494:	f04f 0300 	mov.w	r3, #0
 800a498:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a49c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a4a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a4a4:	4692      	mov	sl, r2
 800a4a6:	469b      	mov	fp, r3
 800a4a8:	4643      	mov	r3, r8
 800a4aa:	eb1a 0303 	adds.w	r3, sl, r3
 800a4ae:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4b2:	464b      	mov	r3, r9
 800a4b4:	eb4b 0303 	adc.w	r3, fp, r3
 800a4b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4c8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a4cc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	18db      	adds	r3, r3, r3
 800a4d4:	61bb      	str	r3, [r7, #24]
 800a4d6:	4613      	mov	r3, r2
 800a4d8:	eb42 0303 	adc.w	r3, r2, r3
 800a4dc:	61fb      	str	r3, [r7, #28]
 800a4de:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a4e2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a4e6:	f7f5 fe77 	bl	80001d8 <__aeabi_uldivmod>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	460b      	mov	r3, r1
 800a4ee:	4611      	mov	r1, r2
 800a4f0:	4b3b      	ldr	r3, [pc, #236]	@ (800a5e0 <USART_SetConfig+0x52c>)
 800a4f2:	fba3 2301 	umull	r2, r3, r3, r1
 800a4f6:	095b      	lsrs	r3, r3, #5
 800a4f8:	2264      	movs	r2, #100	@ 0x64
 800a4fa:	fb02 f303 	mul.w	r3, r2, r3
 800a4fe:	1acb      	subs	r3, r1, r3
 800a500:	00db      	lsls	r3, r3, #3
 800a502:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a506:	4b36      	ldr	r3, [pc, #216]	@ (800a5e0 <USART_SetConfig+0x52c>)
 800a508:	fba3 2302 	umull	r2, r3, r3, r2
 800a50c:	095b      	lsrs	r3, r3, #5
 800a50e:	005b      	lsls	r3, r3, #1
 800a510:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a514:	441c      	add	r4, r3
 800a516:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a51a:	2200      	movs	r2, #0
 800a51c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a520:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a524:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a528:	4642      	mov	r2, r8
 800a52a:	464b      	mov	r3, r9
 800a52c:	1891      	adds	r1, r2, r2
 800a52e:	6139      	str	r1, [r7, #16]
 800a530:	415b      	adcs	r3, r3
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a538:	4641      	mov	r1, r8
 800a53a:	1851      	adds	r1, r2, r1
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	4649      	mov	r1, r9
 800a540:	414b      	adcs	r3, r1
 800a542:	60fb      	str	r3, [r7, #12]
 800a544:	f04f 0200 	mov.w	r2, #0
 800a548:	f04f 0300 	mov.w	r3, #0
 800a54c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a550:	4659      	mov	r1, fp
 800a552:	00cb      	lsls	r3, r1, #3
 800a554:	4651      	mov	r1, sl
 800a556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a55a:	4651      	mov	r1, sl
 800a55c:	00ca      	lsls	r2, r1, #3
 800a55e:	4610      	mov	r0, r2
 800a560:	4619      	mov	r1, r3
 800a562:	4603      	mov	r3, r0
 800a564:	4642      	mov	r2, r8
 800a566:	189b      	adds	r3, r3, r2
 800a568:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a56c:	464b      	mov	r3, r9
 800a56e:	460a      	mov	r2, r1
 800a570:	eb42 0303 	adc.w	r3, r2, r3
 800a574:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a578:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	2200      	movs	r2, #0
 800a580:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a582:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a584:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a588:	460b      	mov	r3, r1
 800a58a:	18db      	adds	r3, r3, r3
 800a58c:	603b      	str	r3, [r7, #0]
 800a58e:	4613      	mov	r3, r2
 800a590:	eb42 0303 	adc.w	r3, r2, r3
 800a594:	607b      	str	r3, [r7, #4]
 800a596:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a59a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a59e:	f7f5 fe1b 	bl	80001d8 <__aeabi_uldivmod>
 800a5a2:	4602      	mov	r2, r0
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	4b0e      	ldr	r3, [pc, #56]	@ (800a5e0 <USART_SetConfig+0x52c>)
 800a5a8:	fba3 1302 	umull	r1, r3, r3, r2
 800a5ac:	095b      	lsrs	r3, r3, #5
 800a5ae:	2164      	movs	r1, #100	@ 0x64
 800a5b0:	fb01 f303 	mul.w	r3, r1, r3
 800a5b4:	1ad3      	subs	r3, r2, r3
 800a5b6:	00db      	lsls	r3, r3, #3
 800a5b8:	3332      	adds	r3, #50	@ 0x32
 800a5ba:	4a09      	ldr	r2, [pc, #36]	@ (800a5e0 <USART_SetConfig+0x52c>)
 800a5bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a5c0:	095b      	lsrs	r3, r3, #5
 800a5c2:	f003 0207 	and.w	r2, r3, #7
 800a5c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	4422      	add	r2, r4
 800a5ce:	609a      	str	r2, [r3, #8]
  }
}
 800a5d0:	bf00      	nop
 800a5d2:	bf00      	nop
 800a5d4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a5de:	bf00      	nop
 800a5e0:	51eb851f 	.word	0x51eb851f

0800a5e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	f107 001c 	add.w	r0, r7, #28
 800a5f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a5f6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a5fa:	2b01      	cmp	r3, #1
 800a5fc:	d123      	bne.n	800a646 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a602:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	68db      	ldr	r3, [r3, #12]
 800a60e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a612:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a616:	687a      	ldr	r2, [r7, #4]
 800a618:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a626:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a62a:	2b01      	cmp	r3, #1
 800a62c:	d105      	bne.n	800a63a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	68db      	ldr	r3, [r3, #12]
 800a632:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f001 fae8 	bl	800bc10 <USB_CoreReset>
 800a640:	4603      	mov	r3, r0
 800a642:	73fb      	strb	r3, [r7, #15]
 800a644:	e01b      	b.n	800a67e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	68db      	ldr	r3, [r3, #12]
 800a64a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f001 fadc 	bl	800bc10 <USB_CoreReset>
 800a658:	4603      	mov	r3, r0
 800a65a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a65c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a660:	2b00      	cmp	r3, #0
 800a662:	d106      	bne.n	800a672 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a668:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a670:	e005      	b.n	800a67e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a676:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a67e:	7fbb      	ldrb	r3, [r7, #30]
 800a680:	2b01      	cmp	r3, #1
 800a682:	d10b      	bne.n	800a69c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	689b      	ldr	r3, [r3, #8]
 800a688:	f043 0206 	orr.w	r2, r3, #6
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	689b      	ldr	r3, [r3, #8]
 800a694:	f043 0220 	orr.w	r2, r3, #32
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a69c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3710      	adds	r7, #16
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6a8:	b004      	add	sp, #16
 800a6aa:	4770      	bx	lr

0800a6ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b087      	sub	sp, #28
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	60f8      	str	r0, [r7, #12]
 800a6b4:	60b9      	str	r1, [r7, #8]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a6ba:	79fb      	ldrb	r3, [r7, #7]
 800a6bc:	2b02      	cmp	r3, #2
 800a6be:	d165      	bne.n	800a78c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	4a41      	ldr	r2, [pc, #260]	@ (800a7c8 <USB_SetTurnaroundTime+0x11c>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d906      	bls.n	800a6d6 <USB_SetTurnaroundTime+0x2a>
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	4a40      	ldr	r2, [pc, #256]	@ (800a7cc <USB_SetTurnaroundTime+0x120>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d202      	bcs.n	800a6d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a6d0:	230f      	movs	r3, #15
 800a6d2:	617b      	str	r3, [r7, #20]
 800a6d4:	e062      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	4a3c      	ldr	r2, [pc, #240]	@ (800a7cc <USB_SetTurnaroundTime+0x120>)
 800a6da:	4293      	cmp	r3, r2
 800a6dc:	d306      	bcc.n	800a6ec <USB_SetTurnaroundTime+0x40>
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	4a3b      	ldr	r2, [pc, #236]	@ (800a7d0 <USB_SetTurnaroundTime+0x124>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d202      	bcs.n	800a6ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a6e6:	230e      	movs	r3, #14
 800a6e8:	617b      	str	r3, [r7, #20]
 800a6ea:	e057      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a6ec:	68bb      	ldr	r3, [r7, #8]
 800a6ee:	4a38      	ldr	r2, [pc, #224]	@ (800a7d0 <USB_SetTurnaroundTime+0x124>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d306      	bcc.n	800a702 <USB_SetTurnaroundTime+0x56>
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	4a37      	ldr	r2, [pc, #220]	@ (800a7d4 <USB_SetTurnaroundTime+0x128>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d202      	bcs.n	800a702 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a6fc:	230d      	movs	r3, #13
 800a6fe:	617b      	str	r3, [r7, #20]
 800a700:	e04c      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	4a33      	ldr	r2, [pc, #204]	@ (800a7d4 <USB_SetTurnaroundTime+0x128>)
 800a706:	4293      	cmp	r3, r2
 800a708:	d306      	bcc.n	800a718 <USB_SetTurnaroundTime+0x6c>
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	4a32      	ldr	r2, [pc, #200]	@ (800a7d8 <USB_SetTurnaroundTime+0x12c>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d802      	bhi.n	800a718 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a712:	230c      	movs	r3, #12
 800a714:	617b      	str	r3, [r7, #20]
 800a716:	e041      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	4a2f      	ldr	r2, [pc, #188]	@ (800a7d8 <USB_SetTurnaroundTime+0x12c>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d906      	bls.n	800a72e <USB_SetTurnaroundTime+0x82>
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4a2e      	ldr	r2, [pc, #184]	@ (800a7dc <USB_SetTurnaroundTime+0x130>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d802      	bhi.n	800a72e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a728:	230b      	movs	r3, #11
 800a72a:	617b      	str	r3, [r7, #20]
 800a72c:	e036      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	4a2a      	ldr	r2, [pc, #168]	@ (800a7dc <USB_SetTurnaroundTime+0x130>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d906      	bls.n	800a744 <USB_SetTurnaroundTime+0x98>
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	4a29      	ldr	r2, [pc, #164]	@ (800a7e0 <USB_SetTurnaroundTime+0x134>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d802      	bhi.n	800a744 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a73e:	230a      	movs	r3, #10
 800a740:	617b      	str	r3, [r7, #20]
 800a742:	e02b      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	4a26      	ldr	r2, [pc, #152]	@ (800a7e0 <USB_SetTurnaroundTime+0x134>)
 800a748:	4293      	cmp	r3, r2
 800a74a:	d906      	bls.n	800a75a <USB_SetTurnaroundTime+0xae>
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4a25      	ldr	r2, [pc, #148]	@ (800a7e4 <USB_SetTurnaroundTime+0x138>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d202      	bcs.n	800a75a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a754:	2309      	movs	r3, #9
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	e020      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	4a21      	ldr	r2, [pc, #132]	@ (800a7e4 <USB_SetTurnaroundTime+0x138>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d306      	bcc.n	800a770 <USB_SetTurnaroundTime+0xc4>
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	4a20      	ldr	r2, [pc, #128]	@ (800a7e8 <USB_SetTurnaroundTime+0x13c>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d802      	bhi.n	800a770 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a76a:	2308      	movs	r3, #8
 800a76c:	617b      	str	r3, [r7, #20]
 800a76e:	e015      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	4a1d      	ldr	r2, [pc, #116]	@ (800a7e8 <USB_SetTurnaroundTime+0x13c>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d906      	bls.n	800a786 <USB_SetTurnaroundTime+0xda>
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4a1c      	ldr	r2, [pc, #112]	@ (800a7ec <USB_SetTurnaroundTime+0x140>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d202      	bcs.n	800a786 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a780:	2307      	movs	r3, #7
 800a782:	617b      	str	r3, [r7, #20]
 800a784:	e00a      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a786:	2306      	movs	r3, #6
 800a788:	617b      	str	r3, [r7, #20]
 800a78a:	e007      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a78c:	79fb      	ldrb	r3, [r7, #7]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d102      	bne.n	800a798 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a792:	2309      	movs	r3, #9
 800a794:	617b      	str	r3, [r7, #20]
 800a796:	e001      	b.n	800a79c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a798:	2309      	movs	r3, #9
 800a79a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	68da      	ldr	r2, [r3, #12]
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	029b      	lsls	r3, r3, #10
 800a7b0:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a7b4:	431a      	orrs	r2, r3
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7ba:	2300      	movs	r3, #0
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	371c      	adds	r7, #28
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c6:	4770      	bx	lr
 800a7c8:	00d8acbf 	.word	0x00d8acbf
 800a7cc:	00e4e1c0 	.word	0x00e4e1c0
 800a7d0:	00f42400 	.word	0x00f42400
 800a7d4:	01067380 	.word	0x01067380
 800a7d8:	011a499f 	.word	0x011a499f
 800a7dc:	01312cff 	.word	0x01312cff
 800a7e0:	014ca43f 	.word	0x014ca43f
 800a7e4:	016e3600 	.word	0x016e3600
 800a7e8:	01a6ab1f 	.word	0x01a6ab1f
 800a7ec:	01e84800 	.word	0x01e84800

0800a7f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a7f0:	b480      	push	{r7}
 800a7f2:	b083      	sub	sp, #12
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	f043 0201 	orr.w	r2, r3, #1
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	370c      	adds	r7, #12
 800a80a:	46bd      	mov	sp, r7
 800a80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a810:	4770      	bx	lr

0800a812 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a812:	b480      	push	{r7}
 800a814:	b083      	sub	sp, #12
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	689b      	ldr	r3, [r3, #8]
 800a81e:	f023 0201 	bic.w	r2, r3, #1
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a826:	2300      	movs	r3, #0
}
 800a828:	4618      	mov	r0, r3
 800a82a:	370c      	adds	r7, #12
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	460b      	mov	r3, r1
 800a83e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a840:	2300      	movs	r3, #0
 800a842:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	68db      	ldr	r3, [r3, #12]
 800a848:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a850:	78fb      	ldrb	r3, [r7, #3]
 800a852:	2b01      	cmp	r3, #1
 800a854:	d115      	bne.n	800a882 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	68db      	ldr	r3, [r3, #12]
 800a85a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a862:	200a      	movs	r0, #10
 800a864:	f7f7 ff28 	bl	80026b8 <HAL_Delay>
      ms += 10U;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	330a      	adds	r3, #10
 800a86c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f001 f93f 	bl	800baf2 <USB_GetMode>
 800a874:	4603      	mov	r3, r0
 800a876:	2b01      	cmp	r3, #1
 800a878:	d01e      	beq.n	800a8b8 <USB_SetCurrentMode+0x84>
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a87e:	d9f0      	bls.n	800a862 <USB_SetCurrentMode+0x2e>
 800a880:	e01a      	b.n	800a8b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a882:	78fb      	ldrb	r3, [r7, #3]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d115      	bne.n	800a8b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	68db      	ldr	r3, [r3, #12]
 800a88c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a894:	200a      	movs	r0, #10
 800a896:	f7f7 ff0f 	bl	80026b8 <HAL_Delay>
      ms += 10U;
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	330a      	adds	r3, #10
 800a89e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a8a0:	6878      	ldr	r0, [r7, #4]
 800a8a2:	f001 f926 	bl	800baf2 <USB_GetMode>
 800a8a6:	4603      	mov	r3, r0
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d005      	beq.n	800a8b8 <USB_SetCurrentMode+0x84>
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2bc7      	cmp	r3, #199	@ 0xc7
 800a8b0:	d9f0      	bls.n	800a894 <USB_SetCurrentMode+0x60>
 800a8b2:	e001      	b.n	800a8b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e005      	b.n	800a8c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	2bc8      	cmp	r3, #200	@ 0xc8
 800a8bc:	d101      	bne.n	800a8c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e000      	b.n	800a8c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3710      	adds	r7, #16
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}

0800a8cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8cc:	b084      	sub	sp, #16
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b086      	sub	sp, #24
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a8da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	613b      	str	r3, [r7, #16]
 800a8ea:	e009      	b.n	800a900 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a8ec:	687a      	ldr	r2, [r7, #4]
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	3340      	adds	r3, #64	@ 0x40
 800a8f2:	009b      	lsls	r3, r3, #2
 800a8f4:	4413      	add	r3, r2
 800a8f6:	2200      	movs	r2, #0
 800a8f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	3301      	adds	r3, #1
 800a8fe:	613b      	str	r3, [r7, #16]
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	2b0e      	cmp	r3, #14
 800a904:	d9f2      	bls.n	800a8ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a906:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d11c      	bne.n	800a948 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a91c:	f043 0302 	orr.w	r3, r3, #2
 800a920:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a926:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a932:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a93e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	639a      	str	r2, [r3, #56]	@ 0x38
 800a946:	e00b      	b.n	800a960 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a94c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a958:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a966:	461a      	mov	r2, r3
 800a968:	2300      	movs	r3, #0
 800a96a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a96c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a970:	2b01      	cmp	r3, #1
 800a972:	d10d      	bne.n	800a990 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d104      	bne.n	800a986 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a97c:	2100      	movs	r1, #0
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f000 f968 	bl	800ac54 <USB_SetDevSpeed>
 800a984:	e008      	b.n	800a998 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a986:	2101      	movs	r1, #1
 800a988:	6878      	ldr	r0, [r7, #4]
 800a98a:	f000 f963 	bl	800ac54 <USB_SetDevSpeed>
 800a98e:	e003      	b.n	800a998 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a990:	2103      	movs	r1, #3
 800a992:	6878      	ldr	r0, [r7, #4]
 800a994:	f000 f95e 	bl	800ac54 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a998:	2110      	movs	r1, #16
 800a99a:	6878      	ldr	r0, [r7, #4]
 800a99c:	f000 f8fa 	bl	800ab94 <USB_FlushTxFifo>
 800a9a0:	4603      	mov	r3, r0
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d001      	beq.n	800a9aa <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	f000 f924 	bl	800abf8 <USB_FlushRxFifo>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d001      	beq.n	800a9ba <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9c0:	461a      	mov	r2, r3
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9cc:	461a      	mov	r2, r3
 800a9ce:	2300      	movs	r3, #0
 800a9d0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d8:	461a      	mov	r2, r3
 800a9da:	2300      	movs	r3, #0
 800a9dc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9de:	2300      	movs	r3, #0
 800a9e0:	613b      	str	r3, [r7, #16]
 800a9e2:	e043      	b.n	800aa6c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a9e4:	693b      	ldr	r3, [r7, #16]
 800a9e6:	015a      	lsls	r2, r3, #5
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a9f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a9fa:	d118      	bne.n	800aa2e <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a9fc:	693b      	ldr	r3, [r7, #16]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d10a      	bne.n	800aa18 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	015a      	lsls	r2, r3, #5
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	4413      	add	r3, r2
 800aa0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa0e:	461a      	mov	r2, r3
 800aa10:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aa14:	6013      	str	r3, [r2, #0]
 800aa16:	e013      	b.n	800aa40 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	015a      	lsls	r2, r3, #5
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	4413      	add	r3, r2
 800aa20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa24:	461a      	mov	r2, r3
 800aa26:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aa2a:	6013      	str	r3, [r2, #0]
 800aa2c:	e008      	b.n	800aa40 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	015a      	lsls	r2, r3, #5
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	4413      	add	r3, r2
 800aa36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa3a:	461a      	mov	r2, r3
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	015a      	lsls	r2, r3, #5
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	4413      	add	r3, r2
 800aa48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa4c:	461a      	mov	r2, r3
 800aa4e:	2300      	movs	r3, #0
 800aa50:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa52:	693b      	ldr	r3, [r7, #16]
 800aa54:	015a      	lsls	r2, r3, #5
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	4413      	add	r3, r2
 800aa5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa5e:	461a      	mov	r2, r3
 800aa60:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aa64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa66:	693b      	ldr	r3, [r7, #16]
 800aa68:	3301      	adds	r3, #1
 800aa6a:	613b      	str	r3, [r7, #16]
 800aa6c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800aa70:	461a      	mov	r2, r3
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d3b5      	bcc.n	800a9e4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa78:	2300      	movs	r3, #0
 800aa7a:	613b      	str	r3, [r7, #16]
 800aa7c:	e043      	b.n	800ab06 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	015a      	lsls	r2, r3, #5
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	4413      	add	r3, r2
 800aa86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aa90:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aa94:	d118      	bne.n	800aac8 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d10a      	bne.n	800aab2 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	015a      	lsls	r2, r3, #5
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4413      	add	r3, r2
 800aaa4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaa8:	461a      	mov	r2, r3
 800aaaa:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800aaae:	6013      	str	r3, [r2, #0]
 800aab0:	e013      	b.n	800aada <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	015a      	lsls	r2, r3, #5
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	4413      	add	r3, r2
 800aaba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aabe:	461a      	mov	r2, r3
 800aac0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800aac4:	6013      	str	r3, [r2, #0]
 800aac6:	e008      	b.n	800aada <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	015a      	lsls	r2, r3, #5
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aad4:	461a      	mov	r2, r3
 800aad6:	2300      	movs	r3, #0
 800aad8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aada:	693b      	ldr	r3, [r7, #16]
 800aadc:	015a      	lsls	r2, r3, #5
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	4413      	add	r3, r2
 800aae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aae6:	461a      	mov	r2, r3
 800aae8:	2300      	movs	r3, #0
 800aaea:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf8:	461a      	mov	r2, r3
 800aafa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800aafe:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab00:	693b      	ldr	r3, [r7, #16]
 800ab02:	3301      	adds	r3, #1
 800ab04:	613b      	str	r3, [r7, #16]
 800ab06:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d3b5      	bcc.n	800aa7e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	68fa      	ldr	r2, [r7, #12]
 800ab1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ab20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ab24:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ab32:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d105      	bne.n	800ab48 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	699b      	ldr	r3, [r3, #24]
 800ab40:	f043 0210 	orr.w	r2, r3, #16
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	699a      	ldr	r2, [r3, #24]
 800ab4c:	4b10      	ldr	r3, [pc, #64]	@ (800ab90 <USB_DevInit+0x2c4>)
 800ab4e:	4313      	orrs	r3, r2
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d005      	beq.n	800ab68 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	f043 0208 	orr.w	r2, r3, #8
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab68:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ab6c:	2b01      	cmp	r3, #1
 800ab6e:	d107      	bne.n	800ab80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ab78:	f043 0304 	orr.w	r3, r3, #4
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ab80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3718      	adds	r7, #24
 800ab86:	46bd      	mov	sp, r7
 800ab88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ab8c:	b004      	add	sp, #16
 800ab8e:	4770      	bx	lr
 800ab90:	803c3800 	.word	0x803c3800

0800ab94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ab94:	b480      	push	{r7}
 800ab96:	b085      	sub	sp, #20
 800ab98:	af00      	add	r7, sp, #0
 800ab9a:	6078      	str	r0, [r7, #4]
 800ab9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ab9e:	2300      	movs	r3, #0
 800aba0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	3301      	adds	r3, #1
 800aba6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abae:	d901      	bls.n	800abb4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800abb0:	2303      	movs	r3, #3
 800abb2:	e01b      	b.n	800abec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	daf2      	bge.n	800aba2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800abbc:	2300      	movs	r3, #0
 800abbe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	019b      	lsls	r3, r3, #6
 800abc4:	f043 0220 	orr.w	r2, r3, #32
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	3301      	adds	r3, #1
 800abd0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800abd8:	d901      	bls.n	800abde <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800abda:	2303      	movs	r3, #3
 800abdc:	e006      	b.n	800abec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	691b      	ldr	r3, [r3, #16]
 800abe2:	f003 0320 	and.w	r3, r3, #32
 800abe6:	2b20      	cmp	r3, #32
 800abe8:	d0f0      	beq.n	800abcc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800abea:	2300      	movs	r3, #0
}
 800abec:	4618      	mov	r0, r3
 800abee:	3714      	adds	r7, #20
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac00:	2300      	movs	r3, #0
 800ac02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3301      	adds	r3, #1
 800ac08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac10:	d901      	bls.n	800ac16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac12:	2303      	movs	r3, #3
 800ac14:	e018      	b.n	800ac48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	691b      	ldr	r3, [r3, #16]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	daf2      	bge.n	800ac04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	2210      	movs	r2, #16
 800ac26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3301      	adds	r3, #1
 800ac2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800ac34:	d901      	bls.n	800ac3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac36:	2303      	movs	r3, #3
 800ac38:	e006      	b.n	800ac48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	691b      	ldr	r3, [r3, #16]
 800ac3e:	f003 0310 	and.w	r3, r3, #16
 800ac42:	2b10      	cmp	r3, #16
 800ac44:	d0f0      	beq.n	800ac28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac46:	2300      	movs	r3, #0
}
 800ac48:	4618      	mov	r0, r3
 800ac4a:	3714      	adds	r7, #20
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b085      	sub	sp, #20
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac6a:	681a      	ldr	r2, [r3, #0]
 800ac6c:	78fb      	ldrb	r3, [r7, #3]
 800ac6e:	68f9      	ldr	r1, [r7, #12]
 800ac70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac74:	4313      	orrs	r3, r2
 800ac76:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ac78:	2300      	movs	r3, #0
}
 800ac7a:	4618      	mov	r0, r3
 800ac7c:	3714      	adds	r7, #20
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ac86:	b480      	push	{r7}
 800ac88:	b087      	sub	sp, #28
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac98:	689b      	ldr	r3, [r3, #8]
 800ac9a:	f003 0306 	and.w	r3, r3, #6
 800ac9e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d102      	bne.n	800acac <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800aca6:	2300      	movs	r3, #0
 800aca8:	75fb      	strb	r3, [r7, #23]
 800acaa:	e00a      	b.n	800acc2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	2b02      	cmp	r3, #2
 800acb0:	d002      	beq.n	800acb8 <USB_GetDevSpeed+0x32>
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	2b06      	cmp	r3, #6
 800acb6:	d102      	bne.n	800acbe <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800acb8:	2302      	movs	r3, #2
 800acba:	75fb      	strb	r3, [r7, #23]
 800acbc:	e001      	b.n	800acc2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800acbe:	230f      	movs	r3, #15
 800acc0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800acc2:	7dfb      	ldrb	r3, [r7, #23]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	371c      	adds	r7, #28
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
 800acd8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	781b      	ldrb	r3, [r3, #0]
 800ace2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	785b      	ldrb	r3, [r3, #1]
 800ace8:	2b01      	cmp	r3, #1
 800acea:	d13a      	bne.n	800ad62 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acf2:	69da      	ldr	r2, [r3, #28]
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	f003 030f 	and.w	r3, r3, #15
 800acfc:	2101      	movs	r1, #1
 800acfe:	fa01 f303 	lsl.w	r3, r1, r3
 800ad02:	b29b      	uxth	r3, r3
 800ad04:	68f9      	ldr	r1, [r7, #12]
 800ad06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	015a      	lsls	r2, r3, #5
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4413      	add	r3, r2
 800ad16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d155      	bne.n	800add0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	015a      	lsls	r2, r3, #5
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	4413      	add	r3, r2
 800ad2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	689b      	ldr	r3, [r3, #8]
 800ad36:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	791b      	ldrb	r3, [r3, #4]
 800ad3e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad40:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	059b      	lsls	r3, r3, #22
 800ad46:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad48:	4313      	orrs	r3, r2
 800ad4a:	68ba      	ldr	r2, [r7, #8]
 800ad4c:	0151      	lsls	r1, r2, #5
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	440a      	add	r2, r1
 800ad52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ad5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ad5e:	6013      	str	r3, [r2, #0]
 800ad60:	e036      	b.n	800add0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad68:	69da      	ldr	r2, [r3, #28]
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	f003 030f 	and.w	r3, r3, #15
 800ad72:	2101      	movs	r1, #1
 800ad74:	fa01 f303 	lsl.w	r3, r1, r3
 800ad78:	041b      	lsls	r3, r3, #16
 800ad7a:	68f9      	ldr	r1, [r7, #12]
 800ad7c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad80:	4313      	orrs	r3, r2
 800ad82:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	015a      	lsls	r2, r3, #5
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	4413      	add	r3, r2
 800ad8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d11a      	bne.n	800add0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	689b      	ldr	r3, [r3, #8]
 800adac:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	791b      	ldrb	r3, [r3, #4]
 800adb4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adb6:	430b      	orrs	r3, r1
 800adb8:	4313      	orrs	r3, r2
 800adba:	68ba      	ldr	r2, [r7, #8]
 800adbc:	0151      	lsls	r1, r2, #5
 800adbe:	68fa      	ldr	r2, [r7, #12]
 800adc0:	440a      	add	r2, r1
 800adc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800adca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800adce:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800add0:	2300      	movs	r3, #0
}
 800add2:	4618      	mov	r0, r3
 800add4:	3714      	adds	r7, #20
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
	...

0800ade0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b085      	sub	sp, #20
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
 800ade8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800adee:	683b      	ldr	r3, [r7, #0]
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	785b      	ldrb	r3, [r3, #1]
 800adf8:	2b01      	cmp	r3, #1
 800adfa:	d161      	bne.n	800aec0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	015a      	lsls	r2, r3, #5
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ae0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ae12:	d11f      	bne.n	800ae54 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	015a      	lsls	r2, r3, #5
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	4413      	add	r3, r2
 800ae1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	0151      	lsls	r1, r2, #5
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	440a      	add	r2, r1
 800ae2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae2e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ae32:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	68ba      	ldr	r2, [r7, #8]
 800ae44:	0151      	lsls	r1, r2, #5
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	440a      	add	r2, r1
 800ae4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae4e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae52:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	781b      	ldrb	r3, [r3, #0]
 800ae60:	f003 030f 	and.w	r3, r3, #15
 800ae64:	2101      	movs	r1, #1
 800ae66:	fa01 f303 	lsl.w	r3, r1, r3
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	43db      	mvns	r3, r3
 800ae6e:	68f9      	ldr	r1, [r7, #12]
 800ae70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae74:	4013      	ands	r3, r2
 800ae76:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae78:	68fb      	ldr	r3, [r7, #12]
 800ae7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae7e:	69da      	ldr	r2, [r3, #28]
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	f003 030f 	and.w	r3, r3, #15
 800ae88:	2101      	movs	r1, #1
 800ae8a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae8e:	b29b      	uxth	r3, r3
 800ae90:	43db      	mvns	r3, r3
 800ae92:	68f9      	ldr	r1, [r7, #12]
 800ae94:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae98:	4013      	ands	r3, r2
 800ae9a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	015a      	lsls	r2, r3, #5
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	4413      	add	r3, r2
 800aea4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea8:	681a      	ldr	r2, [r3, #0]
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	0159      	lsls	r1, r3, #5
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	440b      	add	r3, r1
 800aeb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeb6:	4619      	mov	r1, r3
 800aeb8:	4b35      	ldr	r3, [pc, #212]	@ (800af90 <USB_DeactivateEndpoint+0x1b0>)
 800aeba:	4013      	ands	r3, r2
 800aebc:	600b      	str	r3, [r1, #0]
 800aebe:	e060      	b.n	800af82 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aec0:	68bb      	ldr	r3, [r7, #8]
 800aec2:	015a      	lsls	r2, r3, #5
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	4413      	add	r3, r2
 800aec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800aed2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800aed6:	d11f      	bne.n	800af18 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	015a      	lsls	r2, r3, #5
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	4413      	add	r3, r2
 800aee0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	68ba      	ldr	r2, [r7, #8]
 800aee8:	0151      	lsls	r1, r2, #5
 800aeea:	68fa      	ldr	r2, [r7, #12]
 800aeec:	440a      	add	r2, r1
 800aeee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800aef2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800aef6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	015a      	lsls	r2, r3, #5
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68ba      	ldr	r2, [r7, #8]
 800af08:	0151      	lsls	r1, r2, #5
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	440a      	add	r2, r1
 800af0e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800af12:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800af16:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af1e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800af20:	683b      	ldr	r3, [r7, #0]
 800af22:	781b      	ldrb	r3, [r3, #0]
 800af24:	f003 030f 	and.w	r3, r3, #15
 800af28:	2101      	movs	r1, #1
 800af2a:	fa01 f303 	lsl.w	r3, r1, r3
 800af2e:	041b      	lsls	r3, r3, #16
 800af30:	43db      	mvns	r3, r3
 800af32:	68f9      	ldr	r1, [r7, #12]
 800af34:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af38:	4013      	ands	r3, r2
 800af3a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af42:	69da      	ldr	r2, [r3, #28]
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	f003 030f 	and.w	r3, r3, #15
 800af4c:	2101      	movs	r1, #1
 800af4e:	fa01 f303 	lsl.w	r3, r1, r3
 800af52:	041b      	lsls	r3, r3, #16
 800af54:	43db      	mvns	r3, r3
 800af56:	68f9      	ldr	r1, [r7, #12]
 800af58:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af5c:	4013      	ands	r3, r2
 800af5e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	015a      	lsls	r2, r3, #5
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	4413      	add	r3, r2
 800af68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af6c:	681a      	ldr	r2, [r3, #0]
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	0159      	lsls	r1, r3, #5
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	440b      	add	r3, r1
 800af76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800af7a:	4619      	mov	r1, r3
 800af7c:	4b05      	ldr	r3, [pc, #20]	@ (800af94 <USB_DeactivateEndpoint+0x1b4>)
 800af7e:	4013      	ands	r3, r2
 800af80:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800af82:	2300      	movs	r3, #0
}
 800af84:	4618      	mov	r0, r3
 800af86:	3714      	adds	r7, #20
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	ec337800 	.word	0xec337800
 800af94:	eff37800 	.word	0xeff37800

0800af98 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b08a      	sub	sp, #40	@ 0x28
 800af9c:	af02      	add	r7, sp, #8
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	4613      	mov	r3, r2
 800afa4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afb0:	68bb      	ldr	r3, [r7, #8]
 800afb2:	785b      	ldrb	r3, [r3, #1]
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	f040 817f 	bne.w	800b2b8 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800afba:	68bb      	ldr	r3, [r7, #8]
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d132      	bne.n	800b028 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800afc2:	69bb      	ldr	r3, [r7, #24]
 800afc4:	015a      	lsls	r2, r3, #5
 800afc6:	69fb      	ldr	r3, [r7, #28]
 800afc8:	4413      	add	r3, r2
 800afca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afce:	691b      	ldr	r3, [r3, #16]
 800afd0:	69ba      	ldr	r2, [r7, #24]
 800afd2:	0151      	lsls	r1, r2, #5
 800afd4:	69fa      	ldr	r2, [r7, #28]
 800afd6:	440a      	add	r2, r1
 800afd8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afdc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800afe0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800afe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800afe6:	69bb      	ldr	r3, [r7, #24]
 800afe8:	015a      	lsls	r2, r3, #5
 800afea:	69fb      	ldr	r3, [r7, #28]
 800afec:	4413      	add	r3, r2
 800afee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aff2:	691b      	ldr	r3, [r3, #16]
 800aff4:	69ba      	ldr	r2, [r7, #24]
 800aff6:	0151      	lsls	r1, r2, #5
 800aff8:	69fa      	ldr	r2, [r7, #28]
 800affa:	440a      	add	r2, r1
 800affc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b000:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b006:	69bb      	ldr	r3, [r7, #24]
 800b008:	015a      	lsls	r2, r3, #5
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	4413      	add	r3, r2
 800b00e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b012:	691b      	ldr	r3, [r3, #16]
 800b014:	69ba      	ldr	r2, [r7, #24]
 800b016:	0151      	lsls	r1, r2, #5
 800b018:	69fa      	ldr	r2, [r7, #28]
 800b01a:	440a      	add	r2, r1
 800b01c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b020:	0cdb      	lsrs	r3, r3, #19
 800b022:	04db      	lsls	r3, r3, #19
 800b024:	6113      	str	r3, [r2, #16]
 800b026:	e097      	b.n	800b158 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b028:	69bb      	ldr	r3, [r7, #24]
 800b02a:	015a      	lsls	r2, r3, #5
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	4413      	add	r3, r2
 800b030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b034:	691b      	ldr	r3, [r3, #16]
 800b036:	69ba      	ldr	r2, [r7, #24]
 800b038:	0151      	lsls	r1, r2, #5
 800b03a:	69fa      	ldr	r2, [r7, #28]
 800b03c:	440a      	add	r2, r1
 800b03e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b042:	0cdb      	lsrs	r3, r3, #19
 800b044:	04db      	lsls	r3, r3, #19
 800b046:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	015a      	lsls	r2, r3, #5
 800b04c:	69fb      	ldr	r3, [r7, #28]
 800b04e:	4413      	add	r3, r2
 800b050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b054:	691b      	ldr	r3, [r3, #16]
 800b056:	69ba      	ldr	r2, [r7, #24]
 800b058:	0151      	lsls	r1, r2, #5
 800b05a:	69fa      	ldr	r2, [r7, #28]
 800b05c:	440a      	add	r2, r1
 800b05e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b062:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b066:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b06a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b06c:	69bb      	ldr	r3, [r7, #24]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d11a      	bne.n	800b0a8 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b072:	68bb      	ldr	r3, [r7, #8]
 800b074:	691a      	ldr	r2, [r3, #16]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d903      	bls.n	800b086 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	689a      	ldr	r2, [r3, #8]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	015a      	lsls	r2, r3, #5
 800b08a:	69fb      	ldr	r3, [r7, #28]
 800b08c:	4413      	add	r3, r2
 800b08e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b092:	691b      	ldr	r3, [r3, #16]
 800b094:	69ba      	ldr	r2, [r7, #24]
 800b096:	0151      	lsls	r1, r2, #5
 800b098:	69fa      	ldr	r2, [r7, #28]
 800b09a:	440a      	add	r2, r1
 800b09c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0a0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b0a4:	6113      	str	r3, [r2, #16]
 800b0a6:	e044      	b.n	800b132 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	691a      	ldr	r2, [r3, #16]
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	4413      	add	r3, r2
 800b0b2:	1e5a      	subs	r2, r3, #1
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0bc:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b0be:	69bb      	ldr	r3, [r7, #24]
 800b0c0:	015a      	lsls	r2, r3, #5
 800b0c2:	69fb      	ldr	r3, [r7, #28]
 800b0c4:	4413      	add	r3, r2
 800b0c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0ca:	691a      	ldr	r2, [r3, #16]
 800b0cc:	8afb      	ldrh	r3, [r7, #22]
 800b0ce:	04d9      	lsls	r1, r3, #19
 800b0d0:	4ba4      	ldr	r3, [pc, #656]	@ (800b364 <USB_EPStartXfer+0x3cc>)
 800b0d2:	400b      	ands	r3, r1
 800b0d4:	69b9      	ldr	r1, [r7, #24]
 800b0d6:	0148      	lsls	r0, r1, #5
 800b0d8:	69f9      	ldr	r1, [r7, #28]
 800b0da:	4401      	add	r1, r0
 800b0dc:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	791b      	ldrb	r3, [r3, #4]
 800b0e8:	2b01      	cmp	r3, #1
 800b0ea:	d122      	bne.n	800b132 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b0ec:	69bb      	ldr	r3, [r7, #24]
 800b0ee:	015a      	lsls	r2, r3, #5
 800b0f0:	69fb      	ldr	r3, [r7, #28]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0f8:	691b      	ldr	r3, [r3, #16]
 800b0fa:	69ba      	ldr	r2, [r7, #24]
 800b0fc:	0151      	lsls	r1, r2, #5
 800b0fe:	69fa      	ldr	r2, [r7, #28]
 800b100:	440a      	add	r2, r1
 800b102:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b106:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b10a:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	015a      	lsls	r2, r3, #5
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	4413      	add	r3, r2
 800b114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b118:	691a      	ldr	r2, [r3, #16]
 800b11a:	8afb      	ldrh	r3, [r7, #22]
 800b11c:	075b      	lsls	r3, r3, #29
 800b11e:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b122:	69b9      	ldr	r1, [r7, #24]
 800b124:	0148      	lsls	r0, r1, #5
 800b126:	69f9      	ldr	r1, [r7, #28]
 800b128:	4401      	add	r1, r0
 800b12a:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b12e:	4313      	orrs	r3, r2
 800b130:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	015a      	lsls	r2, r3, #5
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	4413      	add	r3, r2
 800b13a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b13e:	691a      	ldr	r2, [r3, #16]
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	691b      	ldr	r3, [r3, #16]
 800b144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b148:	69b9      	ldr	r1, [r7, #24]
 800b14a:	0148      	lsls	r0, r1, #5
 800b14c:	69f9      	ldr	r1, [r7, #28]
 800b14e:	4401      	add	r1, r0
 800b150:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b154:	4313      	orrs	r3, r2
 800b156:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b158:	79fb      	ldrb	r3, [r7, #7]
 800b15a:	2b01      	cmp	r3, #1
 800b15c:	d14b      	bne.n	800b1f6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	2b00      	cmp	r3, #0
 800b164:	d009      	beq.n	800b17a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b166:	69bb      	ldr	r3, [r7, #24]
 800b168:	015a      	lsls	r2, r3, #5
 800b16a:	69fb      	ldr	r3, [r7, #28]
 800b16c:	4413      	add	r3, r2
 800b16e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b172:	461a      	mov	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	69db      	ldr	r3, [r3, #28]
 800b178:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	791b      	ldrb	r3, [r3, #4]
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d128      	bne.n	800b1d4 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b182:	69fb      	ldr	r3, [r7, #28]
 800b184:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b188:	689b      	ldr	r3, [r3, #8]
 800b18a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d110      	bne.n	800b1b4 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	015a      	lsls	r2, r3, #5
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	4413      	add	r3, r2
 800b19a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	69ba      	ldr	r2, [r7, #24]
 800b1a2:	0151      	lsls	r1, r2, #5
 800b1a4:	69fa      	ldr	r2, [r7, #28]
 800b1a6:	440a      	add	r2, r1
 800b1a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b1b0:	6013      	str	r3, [r2, #0]
 800b1b2:	e00f      	b.n	800b1d4 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	69ba      	ldr	r2, [r7, #24]
 800b1c4:	0151      	lsls	r1, r2, #5
 800b1c6:	69fa      	ldr	r2, [r7, #28]
 800b1c8:	440a      	add	r2, r1
 800b1ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1d2:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	015a      	lsls	r2, r3, #5
 800b1d8:	69fb      	ldr	r3, [r7, #28]
 800b1da:	4413      	add	r3, r2
 800b1dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	69ba      	ldr	r2, [r7, #24]
 800b1e4:	0151      	lsls	r1, r2, #5
 800b1e6:	69fa      	ldr	r2, [r7, #28]
 800b1e8:	440a      	add	r2, r1
 800b1ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b1ee:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b1f2:	6013      	str	r3, [r2, #0]
 800b1f4:	e166      	b.n	800b4c4 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	015a      	lsls	r2, r3, #5
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	69ba      	ldr	r2, [r7, #24]
 800b206:	0151      	lsls	r1, r2, #5
 800b208:	69fa      	ldr	r2, [r7, #28]
 800b20a:	440a      	add	r2, r1
 800b20c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b210:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b214:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	791b      	ldrb	r3, [r3, #4]
 800b21a:	2b01      	cmp	r3, #1
 800b21c:	d015      	beq.n	800b24a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	691b      	ldr	r3, [r3, #16]
 800b222:	2b00      	cmp	r3, #0
 800b224:	f000 814e 	beq.w	800b4c4 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b228:	69fb      	ldr	r3, [r7, #28]
 800b22a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b22e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	f003 030f 	and.w	r3, r3, #15
 800b238:	2101      	movs	r1, #1
 800b23a:	fa01 f303 	lsl.w	r3, r1, r3
 800b23e:	69f9      	ldr	r1, [r7, #28]
 800b240:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b244:	4313      	orrs	r3, r2
 800b246:	634b      	str	r3, [r1, #52]	@ 0x34
 800b248:	e13c      	b.n	800b4c4 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b250:	689b      	ldr	r3, [r3, #8]
 800b252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b256:	2b00      	cmp	r3, #0
 800b258:	d110      	bne.n	800b27c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b25a:	69bb      	ldr	r3, [r7, #24]
 800b25c:	015a      	lsls	r2, r3, #5
 800b25e:	69fb      	ldr	r3, [r7, #28]
 800b260:	4413      	add	r3, r2
 800b262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	69ba      	ldr	r2, [r7, #24]
 800b26a:	0151      	lsls	r1, r2, #5
 800b26c:	69fa      	ldr	r2, [r7, #28]
 800b26e:	440a      	add	r2, r1
 800b270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b274:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b278:	6013      	str	r3, [r2, #0]
 800b27a:	e00f      	b.n	800b29c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b27c:	69bb      	ldr	r3, [r7, #24]
 800b27e:	015a      	lsls	r2, r3, #5
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	4413      	add	r3, r2
 800b284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	69ba      	ldr	r2, [r7, #24]
 800b28c:	0151      	lsls	r1, r2, #5
 800b28e:	69fa      	ldr	r2, [r7, #28]
 800b290:	440a      	add	r2, r1
 800b292:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b296:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b29a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	68d9      	ldr	r1, [r3, #12]
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	781a      	ldrb	r2, [r3, #0]
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	691b      	ldr	r3, [r3, #16]
 800b2a8:	b298      	uxth	r0, r3
 800b2aa:	79fb      	ldrb	r3, [r7, #7]
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 f9b9 	bl	800b628 <USB_WritePacket>
 800b2b6:	e105      	b.n	800b4c4 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	015a      	lsls	r2, r3, #5
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	4413      	add	r3, r2
 800b2c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2c4:	691b      	ldr	r3, [r3, #16]
 800b2c6:	69ba      	ldr	r2, [r7, #24]
 800b2c8:	0151      	lsls	r1, r2, #5
 800b2ca:	69fa      	ldr	r2, [r7, #28]
 800b2cc:	440a      	add	r2, r1
 800b2ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2d2:	0cdb      	lsrs	r3, r3, #19
 800b2d4:	04db      	lsls	r3, r3, #19
 800b2d6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	69ba      	ldr	r2, [r7, #24]
 800b2e8:	0151      	lsls	r1, r2, #5
 800b2ea:	69fa      	ldr	r2, [r7, #28]
 800b2ec:	440a      	add	r2, r1
 800b2ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b2f2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b2f6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b2fa:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d132      	bne.n	800b368 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d003      	beq.n	800b312 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	689a      	ldr	r2, [r3, #8]
 800b30e:	68bb      	ldr	r3, [r7, #8]
 800b310:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b312:	68bb      	ldr	r3, [r7, #8]
 800b314:	689a      	ldr	r2, [r3, #8]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b31a:	69bb      	ldr	r3, [r7, #24]
 800b31c:	015a      	lsls	r2, r3, #5
 800b31e:	69fb      	ldr	r3, [r7, #28]
 800b320:	4413      	add	r3, r2
 800b322:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b326:	691a      	ldr	r2, [r3, #16]
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	6a1b      	ldr	r3, [r3, #32]
 800b32c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b330:	69b9      	ldr	r1, [r7, #24]
 800b332:	0148      	lsls	r0, r1, #5
 800b334:	69f9      	ldr	r1, [r7, #28]
 800b336:	4401      	add	r1, r0
 800b338:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b33c:	4313      	orrs	r3, r2
 800b33e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b340:	69bb      	ldr	r3, [r7, #24]
 800b342:	015a      	lsls	r2, r3, #5
 800b344:	69fb      	ldr	r3, [r7, #28]
 800b346:	4413      	add	r3, r2
 800b348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b34c:	691b      	ldr	r3, [r3, #16]
 800b34e:	69ba      	ldr	r2, [r7, #24]
 800b350:	0151      	lsls	r1, r2, #5
 800b352:	69fa      	ldr	r2, [r7, #28]
 800b354:	440a      	add	r2, r1
 800b356:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b35a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b35e:	6113      	str	r3, [r2, #16]
 800b360:	e062      	b.n	800b428 <USB_EPStartXfer+0x490>
 800b362:	bf00      	nop
 800b364:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	691b      	ldr	r3, [r3, #16]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d123      	bne.n	800b3b8 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	015a      	lsls	r2, r3, #5
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	4413      	add	r3, r2
 800b378:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b37c:	691a      	ldr	r2, [r3, #16]
 800b37e:	68bb      	ldr	r3, [r7, #8]
 800b380:	689b      	ldr	r3, [r3, #8]
 800b382:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b386:	69b9      	ldr	r1, [r7, #24]
 800b388:	0148      	lsls	r0, r1, #5
 800b38a:	69f9      	ldr	r1, [r7, #28]
 800b38c:	4401      	add	r1, r0
 800b38e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b392:	4313      	orrs	r3, r2
 800b394:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b396:	69bb      	ldr	r3, [r7, #24]
 800b398:	015a      	lsls	r2, r3, #5
 800b39a:	69fb      	ldr	r3, [r7, #28]
 800b39c:	4413      	add	r3, r2
 800b39e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	69ba      	ldr	r2, [r7, #24]
 800b3a6:	0151      	lsls	r1, r2, #5
 800b3a8:	69fa      	ldr	r2, [r7, #28]
 800b3aa:	440a      	add	r2, r1
 800b3ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b3b0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3b4:	6113      	str	r3, [r2, #16]
 800b3b6:	e037      	b.n	800b428 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	691a      	ldr	r2, [r3, #16]
 800b3bc:	68bb      	ldr	r3, [r7, #8]
 800b3be:	689b      	ldr	r3, [r3, #8]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	1e5a      	subs	r2, r3, #1
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	689b      	ldr	r3, [r3, #8]
 800b3c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3cc:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	689b      	ldr	r3, [r3, #8]
 800b3d2:	8afa      	ldrh	r2, [r7, #22]
 800b3d4:	fb03 f202 	mul.w	r2, r3, r2
 800b3d8:	68bb      	ldr	r3, [r7, #8]
 800b3da:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b3dc:	69bb      	ldr	r3, [r7, #24]
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b3e8:	691a      	ldr	r2, [r3, #16]
 800b3ea:	8afb      	ldrh	r3, [r7, #22]
 800b3ec:	04d9      	lsls	r1, r3, #19
 800b3ee:	4b38      	ldr	r3, [pc, #224]	@ (800b4d0 <USB_EPStartXfer+0x538>)
 800b3f0:	400b      	ands	r3, r1
 800b3f2:	69b9      	ldr	r1, [r7, #24]
 800b3f4:	0148      	lsls	r0, r1, #5
 800b3f6:	69f9      	ldr	r1, [r7, #28]
 800b3f8:	4401      	add	r1, r0
 800b3fa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b3fe:	4313      	orrs	r3, r2
 800b400:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b402:	69bb      	ldr	r3, [r7, #24]
 800b404:	015a      	lsls	r2, r3, #5
 800b406:	69fb      	ldr	r3, [r7, #28]
 800b408:	4413      	add	r3, r2
 800b40a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b40e:	691a      	ldr	r2, [r3, #16]
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	6a1b      	ldr	r3, [r3, #32]
 800b414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b418:	69b9      	ldr	r1, [r7, #24]
 800b41a:	0148      	lsls	r0, r1, #5
 800b41c:	69f9      	ldr	r1, [r7, #28]
 800b41e:	4401      	add	r1, r0
 800b420:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b424:	4313      	orrs	r3, r2
 800b426:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b428:	79fb      	ldrb	r3, [r7, #7]
 800b42a:	2b01      	cmp	r3, #1
 800b42c:	d10d      	bne.n	800b44a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b42e:	68bb      	ldr	r3, [r7, #8]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	2b00      	cmp	r3, #0
 800b434:	d009      	beq.n	800b44a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	68d9      	ldr	r1, [r3, #12]
 800b43a:	69bb      	ldr	r3, [r7, #24]
 800b43c:	015a      	lsls	r2, r3, #5
 800b43e:	69fb      	ldr	r3, [r7, #28]
 800b440:	4413      	add	r3, r2
 800b442:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b446:	460a      	mov	r2, r1
 800b448:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	791b      	ldrb	r3, [r3, #4]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d128      	bne.n	800b4a4 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b458:	689b      	ldr	r3, [r3, #8]
 800b45a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d110      	bne.n	800b484 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b462:	69bb      	ldr	r3, [r7, #24]
 800b464:	015a      	lsls	r2, r3, #5
 800b466:	69fb      	ldr	r3, [r7, #28]
 800b468:	4413      	add	r3, r2
 800b46a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	69ba      	ldr	r2, [r7, #24]
 800b472:	0151      	lsls	r1, r2, #5
 800b474:	69fa      	ldr	r2, [r7, #28]
 800b476:	440a      	add	r2, r1
 800b478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b47c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b480:	6013      	str	r3, [r2, #0]
 800b482:	e00f      	b.n	800b4a4 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b484:	69bb      	ldr	r3, [r7, #24]
 800b486:	015a      	lsls	r2, r3, #5
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	4413      	add	r3, r2
 800b48c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	69ba      	ldr	r2, [r7, #24]
 800b494:	0151      	lsls	r1, r2, #5
 800b496:	69fa      	ldr	r2, [r7, #28]
 800b498:	440a      	add	r2, r1
 800b49a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b49e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4a2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4a4:	69bb      	ldr	r3, [r7, #24]
 800b4a6:	015a      	lsls	r2, r3, #5
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	4413      	add	r3, r2
 800b4ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	69ba      	ldr	r2, [r7, #24]
 800b4b4:	0151      	lsls	r1, r2, #5
 800b4b6:	69fa      	ldr	r2, [r7, #28]
 800b4b8:	440a      	add	r2, r1
 800b4ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4be:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b4c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3720      	adds	r7, #32
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	1ff80000 	.word	0x1ff80000

0800b4d4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4d4:	b480      	push	{r7}
 800b4d6:	b087      	sub	sp, #28
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
 800b4dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b4de:	2300      	movs	r3, #0
 800b4e0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	785b      	ldrb	r3, [r3, #1]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	d14a      	bne.n	800b588 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4f2:	683b      	ldr	r3, [r7, #0]
 800b4f4:	781b      	ldrb	r3, [r3, #0]
 800b4f6:	015a      	lsls	r2, r3, #5
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	4413      	add	r3, r2
 800b4fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b506:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b50a:	f040 8086 	bne.w	800b61a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	683a      	ldr	r2, [r7, #0]
 800b520:	7812      	ldrb	r2, [r2, #0]
 800b522:	0151      	lsls	r1, r2, #5
 800b524:	693a      	ldr	r2, [r7, #16]
 800b526:	440a      	add	r2, r1
 800b528:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b52c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b530:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	781b      	ldrb	r3, [r3, #0]
 800b536:	015a      	lsls	r2, r3, #5
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	4413      	add	r3, r2
 800b53c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	683a      	ldr	r2, [r7, #0]
 800b544:	7812      	ldrb	r2, [r2, #0]
 800b546:	0151      	lsls	r1, r2, #5
 800b548:	693a      	ldr	r2, [r7, #16]
 800b54a:	440a      	add	r2, r1
 800b54c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b550:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b554:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	3301      	adds	r3, #1
 800b55a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b562:	4293      	cmp	r3, r2
 800b564:	d902      	bls.n	800b56c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b566:	2301      	movs	r3, #1
 800b568:	75fb      	strb	r3, [r7, #23]
          break;
 800b56a:	e056      	b.n	800b61a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	781b      	ldrb	r3, [r3, #0]
 800b570:	015a      	lsls	r2, r3, #5
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	4413      	add	r3, r2
 800b576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b580:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b584:	d0e7      	beq.n	800b556 <USB_EPStopXfer+0x82>
 800b586:	e048      	b.n	800b61a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	781b      	ldrb	r3, [r3, #0]
 800b58c:	015a      	lsls	r2, r3, #5
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	4413      	add	r3, r2
 800b592:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b59c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b5a0:	d13b      	bne.n	800b61a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b5a2:	683b      	ldr	r3, [r7, #0]
 800b5a4:	781b      	ldrb	r3, [r3, #0]
 800b5a6:	015a      	lsls	r2, r3, #5
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	683a      	ldr	r2, [r7, #0]
 800b5b4:	7812      	ldrb	r2, [r2, #0]
 800b5b6:	0151      	lsls	r1, r2, #5
 800b5b8:	693a      	ldr	r2, [r7, #16]
 800b5ba:	440a      	add	r2, r1
 800b5bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b5c4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	015a      	lsls	r2, r3, #5
 800b5cc:	693b      	ldr	r3, [r7, #16]
 800b5ce:	4413      	add	r3, r2
 800b5d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	683a      	ldr	r2, [r7, #0]
 800b5d8:	7812      	ldrb	r2, [r2, #0]
 800b5da:	0151      	lsls	r1, r2, #5
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	440a      	add	r2, r1
 800b5e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b5e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	3301      	adds	r3, #1
 800b5ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b5f6:	4293      	cmp	r3, r2
 800b5f8:	d902      	bls.n	800b600 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	75fb      	strb	r3, [r7, #23]
          break;
 800b5fe:	e00c      	b.n	800b61a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b600:	683b      	ldr	r3, [r7, #0]
 800b602:	781b      	ldrb	r3, [r3, #0]
 800b604:	015a      	lsls	r2, r3, #5
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	4413      	add	r3, r2
 800b60a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b614:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b618:	d0e7      	beq.n	800b5ea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b61a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b61c:	4618      	mov	r0, r3
 800b61e:	371c      	adds	r7, #28
 800b620:	46bd      	mov	sp, r7
 800b622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b626:	4770      	bx	lr

0800b628 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b628:	b480      	push	{r7}
 800b62a:	b089      	sub	sp, #36	@ 0x24
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	4611      	mov	r1, r2
 800b634:	461a      	mov	r2, r3
 800b636:	460b      	mov	r3, r1
 800b638:	71fb      	strb	r3, [r7, #7]
 800b63a:	4613      	mov	r3, r2
 800b63c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b646:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d123      	bne.n	800b696 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b64e:	88bb      	ldrh	r3, [r7, #4]
 800b650:	3303      	adds	r3, #3
 800b652:	089b      	lsrs	r3, r3, #2
 800b654:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b656:	2300      	movs	r3, #0
 800b658:	61bb      	str	r3, [r7, #24]
 800b65a:	e018      	b.n	800b68e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b65c:	79fb      	ldrb	r3, [r7, #7]
 800b65e:	031a      	lsls	r2, r3, #12
 800b660:	697b      	ldr	r3, [r7, #20]
 800b662:	4413      	add	r3, r2
 800b664:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b668:	461a      	mov	r2, r3
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b670:	69fb      	ldr	r3, [r7, #28]
 800b672:	3301      	adds	r3, #1
 800b674:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b676:	69fb      	ldr	r3, [r7, #28]
 800b678:	3301      	adds	r3, #1
 800b67a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	3301      	adds	r3, #1
 800b680:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b682:	69fb      	ldr	r3, [r7, #28]
 800b684:	3301      	adds	r3, #1
 800b686:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	3301      	adds	r3, #1
 800b68c:	61bb      	str	r3, [r7, #24]
 800b68e:	69ba      	ldr	r2, [r7, #24]
 800b690:	693b      	ldr	r3, [r7, #16]
 800b692:	429a      	cmp	r2, r3
 800b694:	d3e2      	bcc.n	800b65c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3724      	adds	r7, #36	@ 0x24
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b08b      	sub	sp, #44	@ 0x2c
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b6ba:	88fb      	ldrh	r3, [r7, #6]
 800b6bc:	089b      	lsrs	r3, r3, #2
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b6c2:	88fb      	ldrh	r3, [r7, #6]
 800b6c4:	f003 0303 	and.w	r3, r3, #3
 800b6c8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	623b      	str	r3, [r7, #32]
 800b6ce:	e014      	b.n	800b6fa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b6d0:	69bb      	ldr	r3, [r7, #24]
 800b6d2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6d6:	681a      	ldr	r2, [r3, #0]
 800b6d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6da:	601a      	str	r2, [r3, #0]
    pDest++;
 800b6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6de:	3301      	adds	r3, #1
 800b6e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6e4:	3301      	adds	r3, #1
 800b6e6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b6e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6ea:	3301      	adds	r3, #1
 800b6ec:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b6ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b6f4:	6a3b      	ldr	r3, [r7, #32]
 800b6f6:	3301      	adds	r3, #1
 800b6f8:	623b      	str	r3, [r7, #32]
 800b6fa:	6a3a      	ldr	r2, [r7, #32]
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	429a      	cmp	r2, r3
 800b700:	d3e6      	bcc.n	800b6d0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b702:	8bfb      	ldrh	r3, [r7, #30]
 800b704:	2b00      	cmp	r3, #0
 800b706:	d01e      	beq.n	800b746 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b708:	2300      	movs	r3, #0
 800b70a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b712:	461a      	mov	r2, r3
 800b714:	f107 0310 	add.w	r3, r7, #16
 800b718:	6812      	ldr	r2, [r2, #0]
 800b71a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b71c:	693a      	ldr	r2, [r7, #16]
 800b71e:	6a3b      	ldr	r3, [r7, #32]
 800b720:	b2db      	uxtb	r3, r3
 800b722:	00db      	lsls	r3, r3, #3
 800b724:	fa22 f303 	lsr.w	r3, r2, r3
 800b728:	b2da      	uxtb	r2, r3
 800b72a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b72c:	701a      	strb	r2, [r3, #0]
      i++;
 800b72e:	6a3b      	ldr	r3, [r7, #32]
 800b730:	3301      	adds	r3, #1
 800b732:	623b      	str	r3, [r7, #32]
      pDest++;
 800b734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b736:	3301      	adds	r3, #1
 800b738:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b73a:	8bfb      	ldrh	r3, [r7, #30]
 800b73c:	3b01      	subs	r3, #1
 800b73e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b740:	8bfb      	ldrh	r3, [r7, #30]
 800b742:	2b00      	cmp	r3, #0
 800b744:	d1ea      	bne.n	800b71c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b748:	4618      	mov	r0, r3
 800b74a:	372c      	adds	r7, #44	@ 0x2c
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b754:	b480      	push	{r7}
 800b756:	b085      	sub	sp, #20
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b762:	683b      	ldr	r3, [r7, #0]
 800b764:	781b      	ldrb	r3, [r3, #0]
 800b766:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b768:	683b      	ldr	r3, [r7, #0]
 800b76a:	785b      	ldrb	r3, [r3, #1]
 800b76c:	2b01      	cmp	r3, #1
 800b76e:	d12c      	bne.n	800b7ca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	015a      	lsls	r2, r3, #5
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	4413      	add	r3, r2
 800b778:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	db12      	blt.n	800b7a8 <USB_EPSetStall+0x54>
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d00f      	beq.n	800b7a8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	015a      	lsls	r2, r3, #5
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	4413      	add	r3, r2
 800b790:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	68ba      	ldr	r2, [r7, #8]
 800b798:	0151      	lsls	r1, r2, #5
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	440a      	add	r2, r1
 800b79e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b7a6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b7a8:	68bb      	ldr	r3, [r7, #8]
 800b7aa:	015a      	lsls	r2, r3, #5
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	68ba      	ldr	r2, [r7, #8]
 800b7b8:	0151      	lsls	r1, r2, #5
 800b7ba:	68fa      	ldr	r2, [r7, #12]
 800b7bc:	440a      	add	r2, r1
 800b7be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b7c2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b7c6:	6013      	str	r3, [r2, #0]
 800b7c8:	e02b      	b.n	800b822 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	015a      	lsls	r2, r3, #5
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	db12      	blt.n	800b802 <USB_EPSetStall+0xae>
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00f      	beq.n	800b802 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	015a      	lsls	r2, r3, #5
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	68ba      	ldr	r2, [r7, #8]
 800b7f2:	0151      	lsls	r1, r2, #5
 800b7f4:	68fa      	ldr	r2, [r7, #12]
 800b7f6:	440a      	add	r2, r1
 800b7f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7fc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b800:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	015a      	lsls	r2, r3, #5
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	4413      	add	r3, r2
 800b80a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68ba      	ldr	r2, [r7, #8]
 800b812:	0151      	lsls	r1, r2, #5
 800b814:	68fa      	ldr	r2, [r7, #12]
 800b816:	440a      	add	r2, r1
 800b818:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b81c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b820:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b822:	2300      	movs	r3, #0
}
 800b824:	4618      	mov	r0, r3
 800b826:	3714      	adds	r7, #20
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr

0800b830 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b830:	b480      	push	{r7}
 800b832:	b085      	sub	sp, #20
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	781b      	ldrb	r3, [r3, #0]
 800b842:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b844:	683b      	ldr	r3, [r7, #0]
 800b846:	785b      	ldrb	r3, [r3, #1]
 800b848:	2b01      	cmp	r3, #1
 800b84a:	d128      	bne.n	800b89e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	4413      	add	r3, r2
 800b854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	68ba      	ldr	r2, [r7, #8]
 800b85c:	0151      	lsls	r1, r2, #5
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	440a      	add	r2, r1
 800b862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b866:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b86a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	791b      	ldrb	r3, [r3, #4]
 800b870:	2b03      	cmp	r3, #3
 800b872:	d003      	beq.n	800b87c <USB_EPClearStall+0x4c>
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	791b      	ldrb	r3, [r3, #4]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d138      	bne.n	800b8ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	015a      	lsls	r2, r3, #5
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	4413      	add	r3, r2
 800b884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	68ba      	ldr	r2, [r7, #8]
 800b88c:	0151      	lsls	r1, r2, #5
 800b88e:	68fa      	ldr	r2, [r7, #12]
 800b890:	440a      	add	r2, r1
 800b892:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b896:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b89a:	6013      	str	r3, [r2, #0]
 800b89c:	e027      	b.n	800b8ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b89e:	68bb      	ldr	r3, [r7, #8]
 800b8a0:	015a      	lsls	r2, r3, #5
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	0151      	lsls	r1, r2, #5
 800b8b0:	68fa      	ldr	r2, [r7, #12]
 800b8b2:	440a      	add	r2, r1
 800b8b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8b8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b8bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	791b      	ldrb	r3, [r3, #4]
 800b8c2:	2b03      	cmp	r3, #3
 800b8c4:	d003      	beq.n	800b8ce <USB_EPClearStall+0x9e>
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	791b      	ldrb	r3, [r3, #4]
 800b8ca:	2b02      	cmp	r3, #2
 800b8cc:	d10f      	bne.n	800b8ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b8ce:	68bb      	ldr	r3, [r7, #8]
 800b8d0:	015a      	lsls	r2, r3, #5
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	4413      	add	r3, r2
 800b8d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	68ba      	ldr	r2, [r7, #8]
 800b8de:	0151      	lsls	r1, r2, #5
 800b8e0:	68fa      	ldr	r2, [r7, #12]
 800b8e2:	440a      	add	r2, r1
 800b8e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b8ee:	2300      	movs	r3, #0
}
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	3714      	adds	r7, #20
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fa:	4770      	bx	lr

0800b8fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b8fc:	b480      	push	{r7}
 800b8fe:	b085      	sub	sp, #20
 800b900:	af00      	add	r7, sp, #0
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	460b      	mov	r3, r1
 800b906:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b91a:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b91e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	78fb      	ldrb	r3, [r7, #3]
 800b92a:	011b      	lsls	r3, r3, #4
 800b92c:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b930:	68f9      	ldr	r1, [r7, #12]
 800b932:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b936:	4313      	orrs	r3, r2
 800b938:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b93a:	2300      	movs	r3, #0
}
 800b93c:	4618      	mov	r0, r3
 800b93e:	3714      	adds	r7, #20
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b948:	b480      	push	{r7}
 800b94a:	b085      	sub	sp, #20
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68fa      	ldr	r2, [r7, #12]
 800b95e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b962:	f023 0303 	bic.w	r3, r3, #3
 800b966:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	68fa      	ldr	r2, [r7, #12]
 800b972:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b976:	f023 0302 	bic.w	r3, r3, #2
 800b97a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b97c:	2300      	movs	r3, #0
}
 800b97e:	4618      	mov	r0, r3
 800b980:	3714      	adds	r7, #20
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr

0800b98a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b98a:	b480      	push	{r7}
 800b98c:	b085      	sub	sp, #20
 800b98e:	af00      	add	r7, sp, #0
 800b990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b9a4:	f023 0303 	bic.w	r3, r3, #3
 800b9a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b9b8:	f043 0302 	orr.w	r3, r3, #2
 800b9bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b9be:	2300      	movs	r3, #0
}
 800b9c0:	4618      	mov	r0, r3
 800b9c2:	3714      	adds	r7, #20
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ca:	4770      	bx	lr

0800b9cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b9cc:	b480      	push	{r7}
 800b9ce:	b085      	sub	sp, #20
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	695b      	ldr	r3, [r3, #20]
 800b9d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	699b      	ldr	r3, [r3, #24]
 800b9de:	68fa      	ldr	r2, [r7, #12]
 800b9e0:	4013      	ands	r3, r2
 800b9e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b9e4:	68fb      	ldr	r3, [r7, #12]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b085      	sub	sp, #20
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba0e:	69db      	ldr	r3, [r3, #28]
 800ba10:	68ba      	ldr	r2, [r7, #8]
 800ba12:	4013      	ands	r3, r2
 800ba14:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	0c1b      	lsrs	r3, r3, #16
}
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	3714      	adds	r7, #20
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba24:	4770      	bx	lr

0800ba26 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba26:	b480      	push	{r7}
 800ba28:	b085      	sub	sp, #20
 800ba2a:	af00      	add	r7, sp, #0
 800ba2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba38:	699b      	ldr	r3, [r3, #24]
 800ba3a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba42:	69db      	ldr	r3, [r3, #28]
 800ba44:	68ba      	ldr	r2, [r7, #8]
 800ba46:	4013      	ands	r3, r2
 800ba48:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	b29b      	uxth	r3, r3
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3714      	adds	r7, #20
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b085      	sub	sp, #20
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
 800ba62:	460b      	mov	r3, r1
 800ba64:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ba6a:	78fb      	ldrb	r3, [r7, #3]
 800ba6c:	015a      	lsls	r2, r3, #5
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	4413      	add	r3, r2
 800ba72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba76:	689b      	ldr	r3, [r3, #8]
 800ba78:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ba80:	695b      	ldr	r3, [r3, #20]
 800ba82:	68ba      	ldr	r2, [r7, #8]
 800ba84:	4013      	ands	r3, r2
 800ba86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ba88:	68bb      	ldr	r3, [r7, #8]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3714      	adds	r7, #20
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr

0800ba96 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ba96:	b480      	push	{r7}
 800ba98:	b087      	sub	sp, #28
 800ba9a:	af00      	add	r7, sp, #0
 800ba9c:	6078      	str	r0, [r7, #4]
 800ba9e:	460b      	mov	r3, r1
 800baa0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800baa6:	697b      	ldr	r3, [r7, #20]
 800baa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800baac:	691b      	ldr	r3, [r3, #16]
 800baae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bab6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bab8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800baba:	78fb      	ldrb	r3, [r7, #3]
 800babc:	f003 030f 	and.w	r3, r3, #15
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	fa22 f303 	lsr.w	r3, r2, r3
 800bac6:	01db      	lsls	r3, r3, #7
 800bac8:	b2db      	uxtb	r3, r3
 800baca:	693a      	ldr	r2, [r7, #16]
 800bacc:	4313      	orrs	r3, r2
 800bace:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bad0:	78fb      	ldrb	r3, [r7, #3]
 800bad2:	015a      	lsls	r2, r3, #5
 800bad4:	697b      	ldr	r3, [r7, #20]
 800bad6:	4413      	add	r3, r2
 800bad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800badc:	689b      	ldr	r3, [r3, #8]
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	4013      	ands	r3, r2
 800bae2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bae4:	68bb      	ldr	r3, [r7, #8]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	371c      	adds	r7, #28
 800baea:	46bd      	mov	sp, r7
 800baec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf0:	4770      	bx	lr

0800baf2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800baf2:	b480      	push	{r7}
 800baf4:	b083      	sub	sp, #12
 800baf6:	af00      	add	r7, sp, #0
 800baf8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	695b      	ldr	r3, [r3, #20]
 800bafe:	f003 0301 	and.w	r3, r3, #1
}
 800bb02:	4618      	mov	r0, r3
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr

0800bb0e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb0e:	b480      	push	{r7}
 800bb10:	b085      	sub	sp, #20
 800bb12:	af00      	add	r7, sp, #0
 800bb14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68fa      	ldr	r2, [r7, #12]
 800bb24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb28:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800bb2c:	f023 0307 	bic.w	r3, r3, #7
 800bb30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bb38:	685b      	ldr	r3, [r3, #4]
 800bb3a:	68fa      	ldr	r2, [r7, #12]
 800bb3c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bb40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bb44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bb46:	2300      	movs	r3, #0
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b087      	sub	sp, #28
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	607a      	str	r2, [r7, #4]
 800bb60:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	333c      	adds	r3, #60	@ 0x3c
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	4a26      	ldr	r2, [pc, #152]	@ (800bc0c <USB_EP0_OutStart+0xb8>)
 800bb74:	4293      	cmp	r3, r2
 800bb76:	d90a      	bls.n	800bb8e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb78:	697b      	ldr	r3, [r7, #20]
 800bb7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800bb84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800bb88:	d101      	bne.n	800bb8e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	e037      	b.n	800bbfe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb94:	461a      	mov	r2, r3
 800bb96:	2300      	movs	r3, #0
 800bb98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bb9a:	697b      	ldr	r3, [r7, #20]
 800bb9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bba0:	691b      	ldr	r3, [r3, #16]
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bba8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800bbac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bbae:	697b      	ldr	r3, [r7, #20]
 800bbb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbb4:	691b      	ldr	r3, [r3, #16]
 800bbb6:	697a      	ldr	r2, [r7, #20]
 800bbb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbbc:	f043 0318 	orr.w	r3, r3, #24
 800bbc0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bbc2:	697b      	ldr	r3, [r7, #20]
 800bbc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	697a      	ldr	r2, [r7, #20]
 800bbcc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbd0:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bbd4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bbd6:	7afb      	ldrb	r3, [r7, #11]
 800bbd8:	2b01      	cmp	r3, #1
 800bbda:	d10f      	bne.n	800bbfc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	697a      	ldr	r2, [r7, #20]
 800bbf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbf6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800bbfa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	4618      	mov	r0, r3
 800bc00:	371c      	adds	r7, #28
 800bc02:	46bd      	mov	sp, r7
 800bc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc08:	4770      	bx	lr
 800bc0a:	bf00      	nop
 800bc0c:	4f54300a 	.word	0x4f54300a

0800bc10 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bc1c:	68fb      	ldr	r3, [r7, #12]
 800bc1e:	3301      	adds	r3, #1
 800bc20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc28:	d901      	bls.n	800bc2e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bc2a:	2303      	movs	r3, #3
 800bc2c:	e022      	b.n	800bc74 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	691b      	ldr	r3, [r3, #16]
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	daf2      	bge.n	800bc1c <USB_CoreReset+0xc>

  count = 10U;
 800bc36:	230a      	movs	r3, #10
 800bc38:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800bc3a:	e002      	b.n	800bc42 <USB_CoreReset+0x32>
  {
    count--;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	3b01      	subs	r3, #1
 800bc40:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d1f9      	bne.n	800bc3c <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	691b      	ldr	r3, [r3, #16]
 800bc4c:	f043 0201 	orr.w	r2, r3, #1
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	3301      	adds	r3, #1
 800bc58:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bc60:	d901      	bls.n	800bc66 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e006      	b.n	800bc74 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	691b      	ldr	r3, [r3, #16]
 800bc6a:	f003 0301 	and.w	r3, r3, #1
 800bc6e:	2b01      	cmp	r3, #1
 800bc70:	d0f0      	beq.n	800bc54 <USB_CoreReset+0x44>

  return HAL_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc8c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bc90:	f002 fd1e 	bl	800e6d0 <USBD_static_malloc>
 800bc94:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d109      	bne.n	800bcb0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	32b0      	adds	r2, #176	@ 0xb0
 800bca6:	2100      	movs	r1, #0
 800bca8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bcac:	2302      	movs	r3, #2
 800bcae:	e0d4      	b.n	800be5a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bcb0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bcb4:	2100      	movs	r1, #0
 800bcb6:	68f8      	ldr	r0, [r7, #12]
 800bcb8:	f002 fd4e 	bl	800e758 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	32b0      	adds	r2, #176	@ 0xb0
 800bcc6:	68f9      	ldr	r1, [r7, #12]
 800bcc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	32b0      	adds	r2, #176	@ 0xb0
 800bcd6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	7c1b      	ldrb	r3, [r3, #16]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d138      	bne.n	800bd5a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bce8:	4b5e      	ldr	r3, [pc, #376]	@ (800be64 <USBD_CDC_Init+0x1e4>)
 800bcea:	7819      	ldrb	r1, [r3, #0]
 800bcec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bcf0:	2202      	movs	r2, #2
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f002 fbc9 	bl	800e48a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bcf8:	4b5a      	ldr	r3, [pc, #360]	@ (800be64 <USBD_CDC_Init+0x1e4>)
 800bcfa:	781b      	ldrb	r3, [r3, #0]
 800bcfc:	f003 020f 	and.w	r2, r3, #15
 800bd00:	6879      	ldr	r1, [r7, #4]
 800bd02:	4613      	mov	r3, r2
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	4413      	add	r3, r2
 800bd08:	009b      	lsls	r3, r3, #2
 800bd0a:	440b      	add	r3, r1
 800bd0c:	3323      	adds	r3, #35	@ 0x23
 800bd0e:	2201      	movs	r2, #1
 800bd10:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd12:	4b55      	ldr	r3, [pc, #340]	@ (800be68 <USBD_CDC_Init+0x1e8>)
 800bd14:	7819      	ldrb	r1, [r3, #0]
 800bd16:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bd1a:	2202      	movs	r2, #2
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f002 fbb4 	bl	800e48a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd22:	4b51      	ldr	r3, [pc, #324]	@ (800be68 <USBD_CDC_Init+0x1e8>)
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	f003 020f 	and.w	r2, r3, #15
 800bd2a:	6879      	ldr	r1, [r7, #4]
 800bd2c:	4613      	mov	r3, r2
 800bd2e:	009b      	lsls	r3, r3, #2
 800bd30:	4413      	add	r3, r2
 800bd32:	009b      	lsls	r3, r3, #2
 800bd34:	440b      	add	r3, r1
 800bd36:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bd3e:	4b4b      	ldr	r3, [pc, #300]	@ (800be6c <USBD_CDC_Init+0x1ec>)
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	f003 020f 	and.w	r2, r3, #15
 800bd46:	6879      	ldr	r1, [r7, #4]
 800bd48:	4613      	mov	r3, r2
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	009b      	lsls	r3, r3, #2
 800bd50:	440b      	add	r3, r1
 800bd52:	331c      	adds	r3, #28
 800bd54:	2210      	movs	r2, #16
 800bd56:	601a      	str	r2, [r3, #0]
 800bd58:	e035      	b.n	800bdc6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bd5a:	4b42      	ldr	r3, [pc, #264]	@ (800be64 <USBD_CDC_Init+0x1e4>)
 800bd5c:	7819      	ldrb	r1, [r3, #0]
 800bd5e:	2340      	movs	r3, #64	@ 0x40
 800bd60:	2202      	movs	r2, #2
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	f002 fb91 	bl	800e48a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bd68:	4b3e      	ldr	r3, [pc, #248]	@ (800be64 <USBD_CDC_Init+0x1e4>)
 800bd6a:	781b      	ldrb	r3, [r3, #0]
 800bd6c:	f003 020f 	and.w	r2, r3, #15
 800bd70:	6879      	ldr	r1, [r7, #4]
 800bd72:	4613      	mov	r3, r2
 800bd74:	009b      	lsls	r3, r3, #2
 800bd76:	4413      	add	r3, r2
 800bd78:	009b      	lsls	r3, r3, #2
 800bd7a:	440b      	add	r3, r1
 800bd7c:	3323      	adds	r3, #35	@ 0x23
 800bd7e:	2201      	movs	r2, #1
 800bd80:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bd82:	4b39      	ldr	r3, [pc, #228]	@ (800be68 <USBD_CDC_Init+0x1e8>)
 800bd84:	7819      	ldrb	r1, [r3, #0]
 800bd86:	2340      	movs	r3, #64	@ 0x40
 800bd88:	2202      	movs	r2, #2
 800bd8a:	6878      	ldr	r0, [r7, #4]
 800bd8c:	f002 fb7d 	bl	800e48a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bd90:	4b35      	ldr	r3, [pc, #212]	@ (800be68 <USBD_CDC_Init+0x1e8>)
 800bd92:	781b      	ldrb	r3, [r3, #0]
 800bd94:	f003 020f 	and.w	r2, r3, #15
 800bd98:	6879      	ldr	r1, [r7, #4]
 800bd9a:	4613      	mov	r3, r2
 800bd9c:	009b      	lsls	r3, r3, #2
 800bd9e:	4413      	add	r3, r2
 800bda0:	009b      	lsls	r3, r3, #2
 800bda2:	440b      	add	r3, r1
 800bda4:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bda8:	2201      	movs	r2, #1
 800bdaa:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bdac:	4b2f      	ldr	r3, [pc, #188]	@ (800be6c <USBD_CDC_Init+0x1ec>)
 800bdae:	781b      	ldrb	r3, [r3, #0]
 800bdb0:	f003 020f 	and.w	r2, r3, #15
 800bdb4:	6879      	ldr	r1, [r7, #4]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	009b      	lsls	r3, r3, #2
 800bdba:	4413      	add	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	440b      	add	r3, r1
 800bdc0:	331c      	adds	r3, #28
 800bdc2:	2210      	movs	r2, #16
 800bdc4:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bdc6:	4b29      	ldr	r3, [pc, #164]	@ (800be6c <USBD_CDC_Init+0x1ec>)
 800bdc8:	7819      	ldrb	r1, [r3, #0]
 800bdca:	2308      	movs	r3, #8
 800bdcc:	2203      	movs	r2, #3
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f002 fb5b 	bl	800e48a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bdd4:	4b25      	ldr	r3, [pc, #148]	@ (800be6c <USBD_CDC_Init+0x1ec>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	f003 020f 	and.w	r2, r3, #15
 800bddc:	6879      	ldr	r1, [r7, #4]
 800bdde:	4613      	mov	r3, r2
 800bde0:	009b      	lsls	r3, r3, #2
 800bde2:	4413      	add	r3, r2
 800bde4:	009b      	lsls	r3, r3, #2
 800bde6:	440b      	add	r3, r1
 800bde8:	3323      	adds	r3, #35	@ 0x23
 800bdea:	2201      	movs	r2, #1
 800bdec:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bdee:	68fb      	ldr	r3, [r7, #12]
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bdfc:	687a      	ldr	r2, [r7, #4]
 800bdfe:	33b0      	adds	r3, #176	@ 0xb0
 800be00:	009b      	lsls	r3, r3, #2
 800be02:	4413      	add	r3, r2
 800be04:	685b      	ldr	r3, [r3, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2200      	movs	r2, #0
 800be0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2200      	movs	r2, #0
 800be16:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800be1a:	68fb      	ldr	r3, [r7, #12]
 800be1c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800be20:	2b00      	cmp	r3, #0
 800be22:	d101      	bne.n	800be28 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800be24:	2302      	movs	r3, #2
 800be26:	e018      	b.n	800be5a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	7c1b      	ldrb	r3, [r3, #16]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10a      	bne.n	800be46 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be30:	4b0d      	ldr	r3, [pc, #52]	@ (800be68 <USBD_CDC_Init+0x1e8>)
 800be32:	7819      	ldrb	r1, [r3, #0]
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f002 fc12 	bl	800e668 <USBD_LL_PrepareReceive>
 800be44:	e008      	b.n	800be58 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800be46:	4b08      	ldr	r3, [pc, #32]	@ (800be68 <USBD_CDC_Init+0x1e8>)
 800be48:	7819      	ldrb	r1, [r3, #0]
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800be50:	2340      	movs	r3, #64	@ 0x40
 800be52:	6878      	ldr	r0, [r7, #4]
 800be54:	f002 fc08 	bl	800e668 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3710      	adds	r7, #16
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	200000bf 	.word	0x200000bf
 800be68:	200000c0 	.word	0x200000c0
 800be6c:	200000c1 	.word	0x200000c1

0800be70 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800be70:	b580      	push	{r7, lr}
 800be72:	b082      	sub	sp, #8
 800be74:	af00      	add	r7, sp, #0
 800be76:	6078      	str	r0, [r7, #4]
 800be78:	460b      	mov	r3, r1
 800be7a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800be7c:	4b3a      	ldr	r3, [pc, #232]	@ (800bf68 <USBD_CDC_DeInit+0xf8>)
 800be7e:	781b      	ldrb	r3, [r3, #0]
 800be80:	4619      	mov	r1, r3
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f002 fb27 	bl	800e4d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800be88:	4b37      	ldr	r3, [pc, #220]	@ (800bf68 <USBD_CDC_DeInit+0xf8>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	f003 020f 	and.w	r2, r3, #15
 800be90:	6879      	ldr	r1, [r7, #4]
 800be92:	4613      	mov	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	440b      	add	r3, r1
 800be9c:	3323      	adds	r3, #35	@ 0x23
 800be9e:	2200      	movs	r2, #0
 800bea0:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bea2:	4b32      	ldr	r3, [pc, #200]	@ (800bf6c <USBD_CDC_DeInit+0xfc>)
 800bea4:	781b      	ldrb	r3, [r3, #0]
 800bea6:	4619      	mov	r1, r3
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f002 fb14 	bl	800e4d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800beae:	4b2f      	ldr	r3, [pc, #188]	@ (800bf6c <USBD_CDC_DeInit+0xfc>)
 800beb0:	781b      	ldrb	r3, [r3, #0]
 800beb2:	f003 020f 	and.w	r2, r3, #15
 800beb6:	6879      	ldr	r1, [r7, #4]
 800beb8:	4613      	mov	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	4413      	add	r3, r2
 800bebe:	009b      	lsls	r3, r3, #2
 800bec0:	440b      	add	r3, r1
 800bec2:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bec6:	2200      	movs	r2, #0
 800bec8:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800beca:	4b29      	ldr	r3, [pc, #164]	@ (800bf70 <USBD_CDC_DeInit+0x100>)
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f002 fb00 	bl	800e4d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bed6:	4b26      	ldr	r3, [pc, #152]	@ (800bf70 <USBD_CDC_DeInit+0x100>)
 800bed8:	781b      	ldrb	r3, [r3, #0]
 800beda:	f003 020f 	and.w	r2, r3, #15
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	4613      	mov	r3, r2
 800bee2:	009b      	lsls	r3, r3, #2
 800bee4:	4413      	add	r3, r2
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	440b      	add	r3, r1
 800beea:	3323      	adds	r3, #35	@ 0x23
 800beec:	2200      	movs	r2, #0
 800beee:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bef0:	4b1f      	ldr	r3, [pc, #124]	@ (800bf70 <USBD_CDC_DeInit+0x100>)
 800bef2:	781b      	ldrb	r3, [r3, #0]
 800bef4:	f003 020f 	and.w	r2, r3, #15
 800bef8:	6879      	ldr	r1, [r7, #4]
 800befa:	4613      	mov	r3, r2
 800befc:	009b      	lsls	r3, r3, #2
 800befe:	4413      	add	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	440b      	add	r3, r1
 800bf04:	331c      	adds	r3, #28
 800bf06:	2200      	movs	r2, #0
 800bf08:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	32b0      	adds	r2, #176	@ 0xb0
 800bf14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d01f      	beq.n	800bf5c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf22:	687a      	ldr	r2, [r7, #4]
 800bf24:	33b0      	adds	r3, #176	@ 0xb0
 800bf26:	009b      	lsls	r3, r3, #2
 800bf28:	4413      	add	r3, r2
 800bf2a:	685b      	ldr	r3, [r3, #4]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	32b0      	adds	r2, #176	@ 0xb0
 800bf3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf3e:	4618      	mov	r0, r3
 800bf40:	f002 fbd4 	bl	800e6ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	32b0      	adds	r2, #176	@ 0xb0
 800bf4e:	2100      	movs	r1, #0
 800bf50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3708      	adds	r7, #8
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	200000bf 	.word	0x200000bf
 800bf6c:	200000c0 	.word	0x200000c0
 800bf70:	200000c1 	.word	0x200000c1

0800bf74 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b086      	sub	sp, #24
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
 800bf7c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	32b0      	adds	r2, #176	@ 0xb0
 800bf88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bf8e:	2300      	movs	r3, #0
 800bf90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bf92:	2300      	movs	r3, #0
 800bf94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bf96:	2300      	movs	r3, #0
 800bf98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d101      	bne.n	800bfa4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bfa0:	2303      	movs	r3, #3
 800bfa2:	e0bf      	b.n	800c124 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bfa4:	683b      	ldr	r3, [r7, #0]
 800bfa6:	781b      	ldrb	r3, [r3, #0]
 800bfa8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d050      	beq.n	800c052 <USBD_CDC_Setup+0xde>
 800bfb0:	2b20      	cmp	r3, #32
 800bfb2:	f040 80af 	bne.w	800c114 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bfb6:	683b      	ldr	r3, [r7, #0]
 800bfb8:	88db      	ldrh	r3, [r3, #6]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d03a      	beq.n	800c034 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bfbe:	683b      	ldr	r3, [r7, #0]
 800bfc0:	781b      	ldrb	r3, [r3, #0]
 800bfc2:	b25b      	sxtb	r3, r3
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	da1b      	bge.n	800c000 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	33b0      	adds	r3, #176	@ 0xb0
 800bfd2:	009b      	lsls	r3, r3, #2
 800bfd4:	4413      	add	r3, r2
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	689b      	ldr	r3, [r3, #8]
 800bfda:	683a      	ldr	r2, [r7, #0]
 800bfdc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bfde:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bfe0:	683a      	ldr	r2, [r7, #0]
 800bfe2:	88d2      	ldrh	r2, [r2, #6]
 800bfe4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	88db      	ldrh	r3, [r3, #6]
 800bfea:	2b07      	cmp	r3, #7
 800bfec:	bf28      	it	cs
 800bfee:	2307      	movcs	r3, #7
 800bff0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bff2:	693b      	ldr	r3, [r7, #16]
 800bff4:	89fa      	ldrh	r2, [r7, #14]
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f001 fda9 	bl	800db50 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bffe:	e090      	b.n	800c122 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	785a      	ldrb	r2, [r3, #1]
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c00a:	683b      	ldr	r3, [r7, #0]
 800c00c:	88db      	ldrh	r3, [r3, #6]
 800c00e:	2b3f      	cmp	r3, #63	@ 0x3f
 800c010:	d803      	bhi.n	800c01a <USBD_CDC_Setup+0xa6>
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	88db      	ldrh	r3, [r3, #6]
 800c016:	b2da      	uxtb	r2, r3
 800c018:	e000      	b.n	800c01c <USBD_CDC_Setup+0xa8>
 800c01a:	2240      	movs	r2, #64	@ 0x40
 800c01c:	693b      	ldr	r3, [r7, #16]
 800c01e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c022:	6939      	ldr	r1, [r7, #16]
 800c024:	693b      	ldr	r3, [r7, #16]
 800c026:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c02a:	461a      	mov	r2, r3
 800c02c:	6878      	ldr	r0, [r7, #4]
 800c02e:	f001 fdbe 	bl	800dbae <USBD_CtlPrepareRx>
      break;
 800c032:	e076      	b.n	800c122 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c03a:	687a      	ldr	r2, [r7, #4]
 800c03c:	33b0      	adds	r3, #176	@ 0xb0
 800c03e:	009b      	lsls	r3, r3, #2
 800c040:	4413      	add	r3, r2
 800c042:	685b      	ldr	r3, [r3, #4]
 800c044:	689b      	ldr	r3, [r3, #8]
 800c046:	683a      	ldr	r2, [r7, #0]
 800c048:	7850      	ldrb	r0, [r2, #1]
 800c04a:	2200      	movs	r2, #0
 800c04c:	6839      	ldr	r1, [r7, #0]
 800c04e:	4798      	blx	r3
      break;
 800c050:	e067      	b.n	800c122 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	785b      	ldrb	r3, [r3, #1]
 800c056:	2b0b      	cmp	r3, #11
 800c058:	d851      	bhi.n	800c0fe <USBD_CDC_Setup+0x18a>
 800c05a:	a201      	add	r2, pc, #4	@ (adr r2, 800c060 <USBD_CDC_Setup+0xec>)
 800c05c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c060:	0800c091 	.word	0x0800c091
 800c064:	0800c10d 	.word	0x0800c10d
 800c068:	0800c0ff 	.word	0x0800c0ff
 800c06c:	0800c0ff 	.word	0x0800c0ff
 800c070:	0800c0ff 	.word	0x0800c0ff
 800c074:	0800c0ff 	.word	0x0800c0ff
 800c078:	0800c0ff 	.word	0x0800c0ff
 800c07c:	0800c0ff 	.word	0x0800c0ff
 800c080:	0800c0ff 	.word	0x0800c0ff
 800c084:	0800c0ff 	.word	0x0800c0ff
 800c088:	0800c0bb 	.word	0x0800c0bb
 800c08c:	0800c0e5 	.word	0x0800c0e5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c096:	b2db      	uxtb	r3, r3
 800c098:	2b03      	cmp	r3, #3
 800c09a:	d107      	bne.n	800c0ac <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c09c:	f107 030a 	add.w	r3, r7, #10
 800c0a0:	2202      	movs	r2, #2
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f001 fd53 	bl	800db50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0aa:	e032      	b.n	800c112 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c0ac:	6839      	ldr	r1, [r7, #0]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f001 fcd1 	bl	800da56 <USBD_CtlError>
            ret = USBD_FAIL;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	75fb      	strb	r3, [r7, #23]
          break;
 800c0b8:	e02b      	b.n	800c112 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0c0:	b2db      	uxtb	r3, r3
 800c0c2:	2b03      	cmp	r3, #3
 800c0c4:	d107      	bne.n	800c0d6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c0c6:	f107 030d 	add.w	r3, r7, #13
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	4619      	mov	r1, r3
 800c0ce:	6878      	ldr	r0, [r7, #4]
 800c0d0:	f001 fd3e 	bl	800db50 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c0d4:	e01d      	b.n	800c112 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c0d6:	6839      	ldr	r1, [r7, #0]
 800c0d8:	6878      	ldr	r0, [r7, #4]
 800c0da:	f001 fcbc 	bl	800da56 <USBD_CtlError>
            ret = USBD_FAIL;
 800c0de:	2303      	movs	r3, #3
 800c0e0:	75fb      	strb	r3, [r7, #23]
          break;
 800c0e2:	e016      	b.n	800c112 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0ea:	b2db      	uxtb	r3, r3
 800c0ec:	2b03      	cmp	r3, #3
 800c0ee:	d00f      	beq.n	800c110 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c0f0:	6839      	ldr	r1, [r7, #0]
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f001 fcaf 	bl	800da56 <USBD_CtlError>
            ret = USBD_FAIL;
 800c0f8:	2303      	movs	r3, #3
 800c0fa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c0fc:	e008      	b.n	800c110 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c0fe:	6839      	ldr	r1, [r7, #0]
 800c100:	6878      	ldr	r0, [r7, #4]
 800c102:	f001 fca8 	bl	800da56 <USBD_CtlError>
          ret = USBD_FAIL;
 800c106:	2303      	movs	r3, #3
 800c108:	75fb      	strb	r3, [r7, #23]
          break;
 800c10a:	e002      	b.n	800c112 <USBD_CDC_Setup+0x19e>
          break;
 800c10c:	bf00      	nop
 800c10e:	e008      	b.n	800c122 <USBD_CDC_Setup+0x1ae>
          break;
 800c110:	bf00      	nop
      }
      break;
 800c112:	e006      	b.n	800c122 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f001 fc9d 	bl	800da56 <USBD_CtlError>
      ret = USBD_FAIL;
 800c11c:	2303      	movs	r3, #3
 800c11e:	75fb      	strb	r3, [r7, #23]
      break;
 800c120:	bf00      	nop
  }

  return (uint8_t)ret;
 800c122:	7dfb      	ldrb	r3, [r7, #23]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]
 800c134:	460b      	mov	r3, r1
 800c136:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c13e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	32b0      	adds	r2, #176	@ 0xb0
 800c14a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d101      	bne.n	800c156 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c152:	2303      	movs	r3, #3
 800c154:	e065      	b.n	800c222 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	32b0      	adds	r2, #176	@ 0xb0
 800c160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c164:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c166:	78fb      	ldrb	r3, [r7, #3]
 800c168:	f003 020f 	and.w	r2, r3, #15
 800c16c:	6879      	ldr	r1, [r7, #4]
 800c16e:	4613      	mov	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	4413      	add	r3, r2
 800c174:	009b      	lsls	r3, r3, #2
 800c176:	440b      	add	r3, r1
 800c178:	3314      	adds	r3, #20
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d02f      	beq.n	800c1e0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c180:	78fb      	ldrb	r3, [r7, #3]
 800c182:	f003 020f 	and.w	r2, r3, #15
 800c186:	6879      	ldr	r1, [r7, #4]
 800c188:	4613      	mov	r3, r2
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	440b      	add	r3, r1
 800c192:	3314      	adds	r3, #20
 800c194:	681a      	ldr	r2, [r3, #0]
 800c196:	78fb      	ldrb	r3, [r7, #3]
 800c198:	f003 010f 	and.w	r1, r3, #15
 800c19c:	68f8      	ldr	r0, [r7, #12]
 800c19e:	460b      	mov	r3, r1
 800c1a0:	00db      	lsls	r3, r3, #3
 800c1a2:	440b      	add	r3, r1
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4403      	add	r3, r0
 800c1a8:	331c      	adds	r3, #28
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	fbb2 f1f3 	udiv	r1, r2, r3
 800c1b0:	fb01 f303 	mul.w	r3, r1, r3
 800c1b4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d112      	bne.n	800c1e0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c1ba:	78fb      	ldrb	r3, [r7, #3]
 800c1bc:	f003 020f 	and.w	r2, r3, #15
 800c1c0:	6879      	ldr	r1, [r7, #4]
 800c1c2:	4613      	mov	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	4413      	add	r3, r2
 800c1c8:	009b      	lsls	r3, r3, #2
 800c1ca:	440b      	add	r3, r1
 800c1cc:	3314      	adds	r3, #20
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c1d2:	78f9      	ldrb	r1, [r7, #3]
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f002 fa24 	bl	800e626 <USBD_LL_Transmit>
 800c1de:	e01f      	b.n	800c220 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c1e0:	68bb      	ldr	r3, [r7, #8]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1ee:	687a      	ldr	r2, [r7, #4]
 800c1f0:	33b0      	adds	r3, #176	@ 0xb0
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	4413      	add	r3, r2
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	691b      	ldr	r3, [r3, #16]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d010      	beq.n	800c220 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	33b0      	adds	r3, #176	@ 0xb0
 800c208:	009b      	lsls	r3, r3, #2
 800c20a:	4413      	add	r3, r2
 800c20c:	685b      	ldr	r3, [r3, #4]
 800c20e:	691b      	ldr	r3, [r3, #16]
 800c210:	68ba      	ldr	r2, [r7, #8]
 800c212:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c216:	68ba      	ldr	r2, [r7, #8]
 800c218:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c21c:	78fa      	ldrb	r2, [r7, #3]
 800c21e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c220:	2300      	movs	r3, #0
}
 800c222:	4618      	mov	r0, r3
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}

0800c22a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c22a:	b580      	push	{r7, lr}
 800c22c:	b084      	sub	sp, #16
 800c22e:	af00      	add	r7, sp, #0
 800c230:	6078      	str	r0, [r7, #4]
 800c232:	460b      	mov	r3, r1
 800c234:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	32b0      	adds	r2, #176	@ 0xb0
 800c240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c244:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	32b0      	adds	r2, #176	@ 0xb0
 800c250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d101      	bne.n	800c25c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c258:	2303      	movs	r3, #3
 800c25a:	e01a      	b.n	800c292 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c25c:	78fb      	ldrb	r3, [r7, #3]
 800c25e:	4619      	mov	r1, r3
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f002 fa22 	bl	800e6aa <USBD_LL_GetRxDataSize>
 800c266:	4602      	mov	r2, r0
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	33b0      	adds	r3, #176	@ 0xb0
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	4413      	add	r3, r2
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	68fa      	ldr	r2, [r7, #12]
 800c282:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c28c:	4611      	mov	r1, r2
 800c28e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c290:	2300      	movs	r3, #0
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}

0800c29a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c29a:	b580      	push	{r7, lr}
 800c29c:	b084      	sub	sp, #16
 800c29e:	af00      	add	r7, sp, #0
 800c2a0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	32b0      	adds	r2, #176	@ 0xb0
 800c2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d101      	bne.n	800c2bc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c2b8:	2303      	movs	r3, #3
 800c2ba:	e024      	b.n	800c306 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2c2:	687a      	ldr	r2, [r7, #4]
 800c2c4:	33b0      	adds	r3, #176	@ 0xb0
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	4413      	add	r3, r2
 800c2ca:	685b      	ldr	r3, [r3, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d019      	beq.n	800c304 <USBD_CDC_EP0_RxReady+0x6a>
 800c2d0:	68fb      	ldr	r3, [r7, #12]
 800c2d2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c2d6:	2bff      	cmp	r3, #255	@ 0xff
 800c2d8:	d014      	beq.n	800c304 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2e0:	687a      	ldr	r2, [r7, #4]
 800c2e2:	33b0      	adds	r3, #176	@ 0xb0
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4413      	add	r3, r2
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c2f2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c2f4:	68fa      	ldr	r2, [r7, #12]
 800c2f6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c2fa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	22ff      	movs	r2, #255	@ 0xff
 800c300:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c304:	2300      	movs	r3, #0
}
 800c306:	4618      	mov	r0, r3
 800c308:	3710      	adds	r7, #16
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
	...

0800c310 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c310:	b580      	push	{r7, lr}
 800c312:	b086      	sub	sp, #24
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c318:	2182      	movs	r1, #130	@ 0x82
 800c31a:	4818      	ldr	r0, [pc, #96]	@ (800c37c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c31c:	f000 fd62 	bl	800cde4 <USBD_GetEpDesc>
 800c320:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c322:	2101      	movs	r1, #1
 800c324:	4815      	ldr	r0, [pc, #84]	@ (800c37c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c326:	f000 fd5d 	bl	800cde4 <USBD_GetEpDesc>
 800c32a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c32c:	2181      	movs	r1, #129	@ 0x81
 800c32e:	4813      	ldr	r0, [pc, #76]	@ (800c37c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c330:	f000 fd58 	bl	800cde4 <USBD_GetEpDesc>
 800c334:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d002      	beq.n	800c342 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c33c:	697b      	ldr	r3, [r7, #20]
 800c33e:	2210      	movs	r2, #16
 800c340:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d006      	beq.n	800c356 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c348:	693b      	ldr	r3, [r7, #16]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c350:	711a      	strb	r2, [r3, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d006      	beq.n	800c36a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c364:	711a      	strb	r2, [r3, #4]
 800c366:	2200      	movs	r2, #0
 800c368:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	2243      	movs	r2, #67	@ 0x43
 800c36e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c370:	4b02      	ldr	r3, [pc, #8]	@ (800c37c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c372:	4618      	mov	r0, r3
 800c374:	3718      	adds	r7, #24
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	2000007c 	.word	0x2000007c

0800c380 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c380:	b580      	push	{r7, lr}
 800c382:	b086      	sub	sp, #24
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c388:	2182      	movs	r1, #130	@ 0x82
 800c38a:	4818      	ldr	r0, [pc, #96]	@ (800c3ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c38c:	f000 fd2a 	bl	800cde4 <USBD_GetEpDesc>
 800c390:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c392:	2101      	movs	r1, #1
 800c394:	4815      	ldr	r0, [pc, #84]	@ (800c3ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c396:	f000 fd25 	bl	800cde4 <USBD_GetEpDesc>
 800c39a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c39c:	2181      	movs	r1, #129	@ 0x81
 800c39e:	4813      	ldr	r0, [pc, #76]	@ (800c3ec <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c3a0:	f000 fd20 	bl	800cde4 <USBD_GetEpDesc>
 800c3a4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d002      	beq.n	800c3b2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	2210      	movs	r2, #16
 800c3b0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c3b2:	693b      	ldr	r3, [r7, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d006      	beq.n	800c3c6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c3b8:	693b      	ldr	r3, [r7, #16]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	711a      	strb	r2, [r3, #4]
 800c3be:	2200      	movs	r2, #0
 800c3c0:	f042 0202 	orr.w	r2, r2, #2
 800c3c4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d006      	beq.n	800c3da <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	711a      	strb	r2, [r3, #4]
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f042 0202 	orr.w	r2, r2, #2
 800c3d8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	2243      	movs	r2, #67	@ 0x43
 800c3de:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c3e0:	4b02      	ldr	r3, [pc, #8]	@ (800c3ec <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3718      	adds	r7, #24
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
 800c3ea:	bf00      	nop
 800c3ec:	2000007c 	.word	0x2000007c

0800c3f0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b086      	sub	sp, #24
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c3f8:	2182      	movs	r1, #130	@ 0x82
 800c3fa:	4818      	ldr	r0, [pc, #96]	@ (800c45c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c3fc:	f000 fcf2 	bl	800cde4 <USBD_GetEpDesc>
 800c400:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c402:	2101      	movs	r1, #1
 800c404:	4815      	ldr	r0, [pc, #84]	@ (800c45c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c406:	f000 fced 	bl	800cde4 <USBD_GetEpDesc>
 800c40a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c40c:	2181      	movs	r1, #129	@ 0x81
 800c40e:	4813      	ldr	r0, [pc, #76]	@ (800c45c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c410:	f000 fce8 	bl	800cde4 <USBD_GetEpDesc>
 800c414:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d002      	beq.n	800c422 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c41c:	697b      	ldr	r3, [r7, #20]
 800c41e:	2210      	movs	r2, #16
 800c420:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c422:	693b      	ldr	r3, [r7, #16]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d006      	beq.n	800c436 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	2200      	movs	r2, #0
 800c42c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c430:	711a      	strb	r2, [r3, #4]
 800c432:	2200      	movs	r2, #0
 800c434:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d006      	beq.n	800c44a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	2200      	movs	r2, #0
 800c440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c444:	711a      	strb	r2, [r3, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2243      	movs	r2, #67	@ 0x43
 800c44e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c450:	4b02      	ldr	r3, [pc, #8]	@ (800c45c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c452:	4618      	mov	r0, r3
 800c454:	3718      	adds	r7, #24
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}
 800c45a:	bf00      	nop
 800c45c:	2000007c 	.word	0x2000007c

0800c460 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c460:	b480      	push	{r7}
 800c462:	b083      	sub	sp, #12
 800c464:	af00      	add	r7, sp, #0
 800c466:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	220a      	movs	r2, #10
 800c46c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c46e:	4b03      	ldr	r3, [pc, #12]	@ (800c47c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c470:	4618      	mov	r0, r3
 800c472:	370c      	adds	r7, #12
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr
 800c47c:	20000038 	.word	0x20000038

0800c480 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d101      	bne.n	800c494 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c490:	2303      	movs	r3, #3
 800c492:	e009      	b.n	800c4a8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	33b0      	adds	r3, #176	@ 0xb0
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4413      	add	r3, r2
 800c4a2:	683a      	ldr	r2, [r7, #0]
 800c4a4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	370c      	adds	r7, #12
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b087      	sub	sp, #28
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	60f8      	str	r0, [r7, #12]
 800c4bc:	60b9      	str	r1, [r7, #8]
 800c4be:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	32b0      	adds	r2, #176	@ 0xb0
 800c4ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c4ce:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c4d0:	697b      	ldr	r3, [r7, #20]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d101      	bne.n	800c4da <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	e008      	b.n	800c4ec <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	68ba      	ldr	r2, [r7, #8]
 800c4de:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	687a      	ldr	r2, [r7, #4]
 800c4e6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c4ea:	2300      	movs	r3, #0
}
 800c4ec:	4618      	mov	r0, r3
 800c4ee:	371c      	adds	r7, #28
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b085      	sub	sp, #20
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	32b0      	adds	r2, #176	@ 0xb0
 800c50c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c510:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c518:	2303      	movs	r3, #3
 800c51a:	e004      	b.n	800c526 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	683a      	ldr	r2, [r7, #0]
 800c520:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3714      	adds	r7, #20
 800c52a:	46bd      	mov	sp, r7
 800c52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c530:	4770      	bx	lr
	...

0800c534 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b084      	sub	sp, #16
 800c538:	af00      	add	r7, sp, #0
 800c53a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	32b0      	adds	r2, #176	@ 0xb0
 800c546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c54a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c54c:	2301      	movs	r3, #1
 800c54e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d101      	bne.n	800c55a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c556:	2303      	movs	r3, #3
 800c558:	e025      	b.n	800c5a6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c55a:	68bb      	ldr	r3, [r7, #8]
 800c55c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c560:	2b00      	cmp	r3, #0
 800c562:	d11f      	bne.n	800c5a4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	2201      	movs	r2, #1
 800c568:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c56c:	4b10      	ldr	r3, [pc, #64]	@ (800c5b0 <USBD_CDC_TransmitPacket+0x7c>)
 800c56e:	781b      	ldrb	r3, [r3, #0]
 800c570:	f003 020f 	and.w	r2, r3, #15
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	4613      	mov	r3, r2
 800c57e:	009b      	lsls	r3, r3, #2
 800c580:	4413      	add	r3, r2
 800c582:	009b      	lsls	r3, r3, #2
 800c584:	4403      	add	r3, r0
 800c586:	3314      	adds	r3, #20
 800c588:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c58a:	4b09      	ldr	r3, [pc, #36]	@ (800c5b0 <USBD_CDC_TransmitPacket+0x7c>)
 800c58c:	7819      	ldrb	r1, [r3, #0]
 800c58e:	68bb      	ldr	r3, [r7, #8]
 800c590:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c594:	68bb      	ldr	r3, [r7, #8]
 800c596:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c59a:	6878      	ldr	r0, [r7, #4]
 800c59c:	f002 f843 	bl	800e626 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c5a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3710      	adds	r7, #16
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}
 800c5ae:	bf00      	nop
 800c5b0:	200000bf 	.word	0x200000bf

0800c5b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	32b0      	adds	r2, #176	@ 0xb0
 800c5c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	32b0      	adds	r2, #176	@ 0xb0
 800c5d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d101      	bne.n	800c5e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	e018      	b.n	800c614 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	7c1b      	ldrb	r3, [r3, #16]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d10a      	bne.n	800c600 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c5ea:	4b0c      	ldr	r3, [pc, #48]	@ (800c61c <USBD_CDC_ReceivePacket+0x68>)
 800c5ec:	7819      	ldrb	r1, [r3, #0]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c5f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c5f8:	6878      	ldr	r0, [r7, #4]
 800c5fa:	f002 f835 	bl	800e668 <USBD_LL_PrepareReceive>
 800c5fe:	e008      	b.n	800c612 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c600:	4b06      	ldr	r3, [pc, #24]	@ (800c61c <USBD_CDC_ReceivePacket+0x68>)
 800c602:	7819      	ldrb	r1, [r3, #0]
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c60a:	2340      	movs	r3, #64	@ 0x40
 800c60c:	6878      	ldr	r0, [r7, #4]
 800c60e:	f002 f82b 	bl	800e668 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c612:	2300      	movs	r3, #0
}
 800c614:	4618      	mov	r0, r3
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}
 800c61c:	200000c0 	.word	0x200000c0

0800c620 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c620:	b580      	push	{r7, lr}
 800c622:	b086      	sub	sp, #24
 800c624:	af00      	add	r7, sp, #0
 800c626:	60f8      	str	r0, [r7, #12]
 800c628:	60b9      	str	r1, [r7, #8]
 800c62a:	4613      	mov	r3, r2
 800c62c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	2b00      	cmp	r3, #0
 800c632:	d101      	bne.n	800c638 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c634:	2303      	movs	r3, #3
 800c636:	e01f      	b.n	800c678 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	2200      	movs	r2, #0
 800c63c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	2200      	movs	r2, #0
 800c644:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	2200      	movs	r2, #0
 800c64c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d003      	beq.n	800c65e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	68ba      	ldr	r2, [r7, #8]
 800c65a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	2201      	movs	r2, #1
 800c662:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	79fa      	ldrb	r2, [r7, #7]
 800c66a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f001 fea5 	bl	800e3bc <USBD_LL_Init>
 800c672:	4603      	mov	r3, r0
 800c674:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c676:	7dfb      	ldrb	r3, [r7, #23]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3718      	adds	r7, #24
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
 800c688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c68a:	2300      	movs	r3, #0
 800c68c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c68e:	683b      	ldr	r3, [r7, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d101      	bne.n	800c698 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c694:	2303      	movs	r3, #3
 800c696:	e025      	b.n	800c6e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	683a      	ldr	r2, [r7, #0]
 800c69c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	32ae      	adds	r2, #174	@ 0xae
 800c6aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d00f      	beq.n	800c6d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	32ae      	adds	r2, #174	@ 0xae
 800c6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c6c4:	f107 020e 	add.w	r2, r7, #14
 800c6c8:	4610      	mov	r0, r2
 800c6ca:	4798      	blx	r3
 800c6cc:	4602      	mov	r2, r0
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c6da:	1c5a      	adds	r2, r3, #1
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3710      	adds	r7, #16
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b082      	sub	sp, #8
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f001 fead 	bl	800e454 <USBD_LL_Start>
 800c6fa:	4603      	mov	r3, r0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3708      	adds	r7, #8
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}

0800c704 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c704:	b480      	push	{r7}
 800c706:	b083      	sub	sp, #12
 800c708:	af00      	add	r7, sp, #0
 800c70a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c70c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c70e:	4618      	mov	r0, r3
 800c710:	370c      	adds	r7, #12
 800c712:	46bd      	mov	sp, r7
 800c714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c718:	4770      	bx	lr

0800c71a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b084      	sub	sp, #16
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	460b      	mov	r3, r1
 800c724:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c726:	2300      	movs	r3, #0
 800c728:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c730:	2b00      	cmp	r3, #0
 800c732:	d009      	beq.n	800c748 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	78fa      	ldrb	r2, [r7, #3]
 800c73e:	4611      	mov	r1, r2
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	4798      	blx	r3
 800c744:	4603      	mov	r3, r0
 800c746:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c748:	7bfb      	ldrb	r3, [r7, #15]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}

0800c752 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b084      	sub	sp, #16
 800c756:	af00      	add	r7, sp, #0
 800c758:	6078      	str	r0, [r7, #4]
 800c75a:	460b      	mov	r3, r1
 800c75c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c75e:	2300      	movs	r3, #0
 800c760:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c768:	685b      	ldr	r3, [r3, #4]
 800c76a:	78fa      	ldrb	r2, [r7, #3]
 800c76c:	4611      	mov	r1, r2
 800c76e:	6878      	ldr	r0, [r7, #4]
 800c770:	4798      	blx	r3
 800c772:	4603      	mov	r3, r0
 800c774:	2b00      	cmp	r3, #0
 800c776:	d001      	beq.n	800c77c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c778:	2303      	movs	r3, #3
 800c77a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c77e:	4618      	mov	r0, r3
 800c780:	3710      	adds	r7, #16
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c786:	b580      	push	{r7, lr}
 800c788:	b084      	sub	sp, #16
 800c78a:	af00      	add	r7, sp, #0
 800c78c:	6078      	str	r0, [r7, #4]
 800c78e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c796:	6839      	ldr	r1, [r7, #0]
 800c798:	4618      	mov	r0, r3
 800c79a:	f001 f922 	bl	800d9e2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	2201      	movs	r2, #1
 800c7a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c7ac:	461a      	mov	r2, r3
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c7ba:	f003 031f 	and.w	r3, r3, #31
 800c7be:	2b02      	cmp	r3, #2
 800c7c0:	d01a      	beq.n	800c7f8 <USBD_LL_SetupStage+0x72>
 800c7c2:	2b02      	cmp	r3, #2
 800c7c4:	d822      	bhi.n	800c80c <USBD_LL_SetupStage+0x86>
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d002      	beq.n	800c7d0 <USBD_LL_SetupStage+0x4a>
 800c7ca:	2b01      	cmp	r3, #1
 800c7cc:	d00a      	beq.n	800c7e4 <USBD_LL_SetupStage+0x5e>
 800c7ce:	e01d      	b.n	800c80c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 fb77 	bl	800cecc <USBD_StdDevReq>
 800c7de:	4603      	mov	r3, r0
 800c7e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c7e2:	e020      	b.n	800c826 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7ea:	4619      	mov	r1, r3
 800c7ec:	6878      	ldr	r0, [r7, #4]
 800c7ee:	f000 fbdf 	bl	800cfb0 <USBD_StdItfReq>
 800c7f2:	4603      	mov	r3, r0
 800c7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c7f6:	e016      	b.n	800c826 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c7fe:	4619      	mov	r1, r3
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 fc41 	bl	800d088 <USBD_StdEPReq>
 800c806:	4603      	mov	r3, r0
 800c808:	73fb      	strb	r3, [r7, #15]
      break;
 800c80a:	e00c      	b.n	800c826 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c812:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c816:	b2db      	uxtb	r3, r3
 800c818:	4619      	mov	r1, r3
 800c81a:	6878      	ldr	r0, [r7, #4]
 800c81c:	f001 fe7a 	bl	800e514 <USBD_LL_StallEP>
 800c820:	4603      	mov	r3, r0
 800c822:	73fb      	strb	r3, [r7, #15]
      break;
 800c824:	bf00      	nop
  }

  return ret;
 800c826:	7bfb      	ldrb	r3, [r7, #15]
}
 800c828:	4618      	mov	r0, r3
 800c82a:	3710      	adds	r7, #16
 800c82c:	46bd      	mov	sp, r7
 800c82e:	bd80      	pop	{r7, pc}

0800c830 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c830:	b580      	push	{r7, lr}
 800c832:	b086      	sub	sp, #24
 800c834:	af00      	add	r7, sp, #0
 800c836:	60f8      	str	r0, [r7, #12]
 800c838:	460b      	mov	r3, r1
 800c83a:	607a      	str	r2, [r7, #4]
 800c83c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c83e:	2300      	movs	r3, #0
 800c840:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c842:	7afb      	ldrb	r3, [r7, #11]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d177      	bne.n	800c938 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c84e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c856:	2b03      	cmp	r3, #3
 800c858:	f040 80a1 	bne.w	800c99e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800c85c:	693b      	ldr	r3, [r7, #16]
 800c85e:	685b      	ldr	r3, [r3, #4]
 800c860:	693a      	ldr	r2, [r7, #16]
 800c862:	8992      	ldrh	r2, [r2, #12]
 800c864:	4293      	cmp	r3, r2
 800c866:	d91c      	bls.n	800c8a2 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	685b      	ldr	r3, [r3, #4]
 800c86c:	693a      	ldr	r2, [r7, #16]
 800c86e:	8992      	ldrh	r2, [r2, #12]
 800c870:	1a9a      	subs	r2, r3, r2
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c876:	693b      	ldr	r3, [r7, #16]
 800c878:	691b      	ldr	r3, [r3, #16]
 800c87a:	693a      	ldr	r2, [r7, #16]
 800c87c:	8992      	ldrh	r2, [r2, #12]
 800c87e:	441a      	add	r2, r3
 800c880:	693b      	ldr	r3, [r7, #16]
 800c882:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c884:	693b      	ldr	r3, [r7, #16]
 800c886:	6919      	ldr	r1, [r3, #16]
 800c888:	693b      	ldr	r3, [r7, #16]
 800c88a:	899b      	ldrh	r3, [r3, #12]
 800c88c:	461a      	mov	r2, r3
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	685b      	ldr	r3, [r3, #4]
 800c892:	4293      	cmp	r3, r2
 800c894:	bf38      	it	cc
 800c896:	4613      	movcc	r3, r2
 800c898:	461a      	mov	r2, r3
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f001 f9a8 	bl	800dbf0 <USBD_CtlContinueRx>
 800c8a0:	e07d      	b.n	800c99e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c8a8:	f003 031f 	and.w	r3, r3, #31
 800c8ac:	2b02      	cmp	r3, #2
 800c8ae:	d014      	beq.n	800c8da <USBD_LL_DataOutStage+0xaa>
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d81d      	bhi.n	800c8f0 <USBD_LL_DataOutStage+0xc0>
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <USBD_LL_DataOutStage+0x8e>
 800c8b8:	2b01      	cmp	r3, #1
 800c8ba:	d003      	beq.n	800c8c4 <USBD_LL_DataOutStage+0x94>
 800c8bc:	e018      	b.n	800c8f0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	75bb      	strb	r3, [r7, #22]
            break;
 800c8c2:	e018      	b.n	800c8f6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c8ca:	b2db      	uxtb	r3, r3
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	68f8      	ldr	r0, [r7, #12]
 800c8d0:	f000 fa6e 	bl	800cdb0 <USBD_CoreFindIF>
 800c8d4:	4603      	mov	r3, r0
 800c8d6:	75bb      	strb	r3, [r7, #22]
            break;
 800c8d8:	e00d      	b.n	800c8f6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c8e0:	b2db      	uxtb	r3, r3
 800c8e2:	4619      	mov	r1, r3
 800c8e4:	68f8      	ldr	r0, [r7, #12]
 800c8e6:	f000 fa70 	bl	800cdca <USBD_CoreFindEP>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	75bb      	strb	r3, [r7, #22]
            break;
 800c8ee:	e002      	b.n	800c8f6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	75bb      	strb	r3, [r7, #22]
            break;
 800c8f4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c8f6:	7dbb      	ldrb	r3, [r7, #22]
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d119      	bne.n	800c930 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c902:	b2db      	uxtb	r3, r3
 800c904:	2b03      	cmp	r3, #3
 800c906:	d113      	bne.n	800c930 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c908:	7dba      	ldrb	r2, [r7, #22]
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	32ae      	adds	r2, #174	@ 0xae
 800c90e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c912:	691b      	ldr	r3, [r3, #16]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d00b      	beq.n	800c930 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c918:	7dba      	ldrb	r2, [r7, #22]
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c920:	7dba      	ldrb	r2, [r7, #22]
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	32ae      	adds	r2, #174	@ 0xae
 800c926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c92a:	691b      	ldr	r3, [r3, #16]
 800c92c:	68f8      	ldr	r0, [r7, #12]
 800c92e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c930:	68f8      	ldr	r0, [r7, #12]
 800c932:	f001 f96e 	bl	800dc12 <USBD_CtlSendStatus>
 800c936:	e032      	b.n	800c99e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c938:	7afb      	ldrb	r3, [r7, #11]
 800c93a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c93e:	b2db      	uxtb	r3, r3
 800c940:	4619      	mov	r1, r3
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	f000 fa41 	bl	800cdca <USBD_CoreFindEP>
 800c948:	4603      	mov	r3, r0
 800c94a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c94c:	7dbb      	ldrb	r3, [r7, #22]
 800c94e:	2bff      	cmp	r3, #255	@ 0xff
 800c950:	d025      	beq.n	800c99e <USBD_LL_DataOutStage+0x16e>
 800c952:	7dbb      	ldrb	r3, [r7, #22]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d122      	bne.n	800c99e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c95e:	b2db      	uxtb	r3, r3
 800c960:	2b03      	cmp	r3, #3
 800c962:	d117      	bne.n	800c994 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c964:	7dba      	ldrb	r2, [r7, #22]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	32ae      	adds	r2, #174	@ 0xae
 800c96a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c96e:	699b      	ldr	r3, [r3, #24]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00f      	beq.n	800c994 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c974:	7dba      	ldrb	r2, [r7, #22]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c97c:	7dba      	ldrb	r2, [r7, #22]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	32ae      	adds	r2, #174	@ 0xae
 800c982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c986:	699b      	ldr	r3, [r3, #24]
 800c988:	7afa      	ldrb	r2, [r7, #11]
 800c98a:	4611      	mov	r1, r2
 800c98c:	68f8      	ldr	r0, [r7, #12]
 800c98e:	4798      	blx	r3
 800c990:	4603      	mov	r3, r0
 800c992:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c994:	7dfb      	ldrb	r3, [r7, #23]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d001      	beq.n	800c99e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c99a:	7dfb      	ldrb	r3, [r7, #23]
 800c99c:	e000      	b.n	800c9a0 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3718      	adds	r7, #24
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	bd80      	pop	{r7, pc}

0800c9a8 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	460b      	mov	r3, r1
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c9b6:	7afb      	ldrb	r3, [r7, #11]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d178      	bne.n	800caae <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	3314      	adds	r3, #20
 800c9c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c9c8:	2b02      	cmp	r3, #2
 800c9ca:	d163      	bne.n	800ca94 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	685b      	ldr	r3, [r3, #4]
 800c9d0:	693a      	ldr	r2, [r7, #16]
 800c9d2:	8992      	ldrh	r2, [r2, #12]
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d91c      	bls.n	800ca12 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	685b      	ldr	r3, [r3, #4]
 800c9dc:	693a      	ldr	r2, [r7, #16]
 800c9de:	8992      	ldrh	r2, [r2, #12]
 800c9e0:	1a9a      	subs	r2, r3, r2
 800c9e2:	693b      	ldr	r3, [r7, #16]
 800c9e4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c9e6:	693b      	ldr	r3, [r7, #16]
 800c9e8:	691b      	ldr	r3, [r3, #16]
 800c9ea:	693a      	ldr	r2, [r7, #16]
 800c9ec:	8992      	ldrh	r2, [r2, #12]
 800c9ee:	441a      	add	r2, r3
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	6919      	ldr	r1, [r3, #16]
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	685b      	ldr	r3, [r3, #4]
 800c9fc:	461a      	mov	r2, r3
 800c9fe:	68f8      	ldr	r0, [r7, #12]
 800ca00:	f001 f8c4 	bl	800db8c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca04:	2300      	movs	r3, #0
 800ca06:	2200      	movs	r2, #0
 800ca08:	2100      	movs	r1, #0
 800ca0a:	68f8      	ldr	r0, [r7, #12]
 800ca0c:	f001 fe2c 	bl	800e668 <USBD_LL_PrepareReceive>
 800ca10:	e040      	b.n	800ca94 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	899b      	ldrh	r3, [r3, #12]
 800ca16:	461a      	mov	r2, r3
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	685b      	ldr	r3, [r3, #4]
 800ca1c:	429a      	cmp	r2, r3
 800ca1e:	d11c      	bne.n	800ca5a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	693a      	ldr	r2, [r7, #16]
 800ca26:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d316      	bcc.n	800ca5a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	681a      	ldr	r2, [r3, #0]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d20f      	bcs.n	800ca5a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	2100      	movs	r1, #0
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f001 f8a4 	bl	800db8c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2200      	movs	r2, #0
 800ca48:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	2200      	movs	r2, #0
 800ca50:	2100      	movs	r1, #0
 800ca52:	68f8      	ldr	r0, [r7, #12]
 800ca54:	f001 fe08 	bl	800e668 <USBD_LL_PrepareReceive>
 800ca58:	e01c      	b.n	800ca94 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca60:	b2db      	uxtb	r3, r3
 800ca62:	2b03      	cmp	r3, #3
 800ca64:	d10f      	bne.n	800ca86 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca6c:	68db      	ldr	r3, [r3, #12]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d009      	beq.n	800ca86 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2200      	movs	r2, #0
 800ca76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	68f8      	ldr	r0, [r7, #12]
 800ca84:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ca86:	2180      	movs	r1, #128	@ 0x80
 800ca88:	68f8      	ldr	r0, [r7, #12]
 800ca8a:	f001 fd43 	bl	800e514 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ca8e:	68f8      	ldr	r0, [r7, #12]
 800ca90:	f001 f8d2 	bl	800dc38 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d03a      	beq.n	800cb14 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800ca9e:	68f8      	ldr	r0, [r7, #12]
 800caa0:	f7ff fe30 	bl	800c704 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	2200      	movs	r2, #0
 800caa8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800caac:	e032      	b.n	800cb14 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800caae:	7afb      	ldrb	r3, [r7, #11]
 800cab0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cab4:	b2db      	uxtb	r3, r3
 800cab6:	4619      	mov	r1, r3
 800cab8:	68f8      	ldr	r0, [r7, #12]
 800caba:	f000 f986 	bl	800cdca <USBD_CoreFindEP>
 800cabe:	4603      	mov	r3, r0
 800cac0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cac2:	7dfb      	ldrb	r3, [r7, #23]
 800cac4:	2bff      	cmp	r3, #255	@ 0xff
 800cac6:	d025      	beq.n	800cb14 <USBD_LL_DataInStage+0x16c>
 800cac8:	7dfb      	ldrb	r3, [r7, #23]
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d122      	bne.n	800cb14 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cad4:	b2db      	uxtb	r3, r3
 800cad6:	2b03      	cmp	r3, #3
 800cad8:	d11c      	bne.n	800cb14 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cada:	7dfa      	ldrb	r2, [r7, #23]
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	32ae      	adds	r2, #174	@ 0xae
 800cae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cae4:	695b      	ldr	r3, [r3, #20]
 800cae6:	2b00      	cmp	r3, #0
 800cae8:	d014      	beq.n	800cb14 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800caea:	7dfa      	ldrb	r2, [r7, #23]
 800caec:	68fb      	ldr	r3, [r7, #12]
 800caee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800caf2:	7dfa      	ldrb	r2, [r7, #23]
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	32ae      	adds	r2, #174	@ 0xae
 800caf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cafc:	695b      	ldr	r3, [r3, #20]
 800cafe:	7afa      	ldrb	r2, [r7, #11]
 800cb00:	4611      	mov	r1, r2
 800cb02:	68f8      	ldr	r0, [r7, #12]
 800cb04:	4798      	blx	r3
 800cb06:	4603      	mov	r3, r0
 800cb08:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cb0a:	7dbb      	ldrb	r3, [r7, #22]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d001      	beq.n	800cb14 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800cb10:	7dbb      	ldrb	r3, [r7, #22]
 800cb12:	e000      	b.n	800cb16 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800cb14:	2300      	movs	r3, #0
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3718      	adds	r7, #24
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b084      	sub	sp, #16
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb26:	2300      	movs	r3, #0
 800cb28:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2200      	movs	r2, #0
 800cb36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2200      	movs	r2, #0
 800cb3e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d014      	beq.n	800cb84 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00e      	beq.n	800cb84 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	6852      	ldr	r2, [r2, #4]
 800cb72:	b2d2      	uxtb	r2, r2
 800cb74:	4611      	mov	r1, r2
 800cb76:	6878      	ldr	r0, [r7, #4]
 800cb78:	4798      	blx	r3
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d001      	beq.n	800cb84 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cb80:	2303      	movs	r3, #3
 800cb82:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cb84:	2340      	movs	r3, #64	@ 0x40
 800cb86:	2200      	movs	r2, #0
 800cb88:	2100      	movs	r1, #0
 800cb8a:	6878      	ldr	r0, [r7, #4]
 800cb8c:	f001 fc7d 	bl	800e48a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2240      	movs	r2, #64	@ 0x40
 800cb9c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cba0:	2340      	movs	r3, #64	@ 0x40
 800cba2:	2200      	movs	r2, #0
 800cba4:	2180      	movs	r1, #128	@ 0x80
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f001 fc6f 	bl	800e48a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	2201      	movs	r2, #1
 800cbb0:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2240      	movs	r2, #64	@ 0x40
 800cbb8:	841a      	strh	r2, [r3, #32]

  return ret;
 800cbba:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3710      	adds	r7, #16
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cbc4:	b480      	push	{r7}
 800cbc6:	b083      	sub	sp, #12
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	78fa      	ldrb	r2, [r7, #3]
 800cbd4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cbd6:	2300      	movs	r3, #0
}
 800cbd8:	4618      	mov	r0, r3
 800cbda:	370c      	adds	r7, #12
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbe2:	4770      	bx	lr

0800cbe4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b083      	sub	sp, #12
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	2b04      	cmp	r3, #4
 800cbf6:	d006      	beq.n	800cc06 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbfe:	b2da      	uxtb	r2, r3
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	2204      	movs	r2, #4
 800cc0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cc0e:	2300      	movs	r3, #0
}
 800cc10:	4618      	mov	r0, r3
 800cc12:	370c      	adds	r7, #12
 800cc14:	46bd      	mov	sp, r7
 800cc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc1a:	4770      	bx	lr

0800cc1c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cc1c:	b480      	push	{r7}
 800cc1e:	b083      	sub	sp, #12
 800cc20:	af00      	add	r7, sp, #0
 800cc22:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc2a:	b2db      	uxtb	r3, r3
 800cc2c:	2b04      	cmp	r3, #4
 800cc2e:	d106      	bne.n	800cc3e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cc36:	b2da      	uxtb	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cc3e:	2300      	movs	r3, #0
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	370c      	adds	r7, #12
 800cc44:	46bd      	mov	sp, r7
 800cc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc4a:	4770      	bx	lr

0800cc4c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc5a:	b2db      	uxtb	r3, r3
 800cc5c:	2b03      	cmp	r3, #3
 800cc5e:	d110      	bne.n	800cc82 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	d00b      	beq.n	800cc82 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc70:	69db      	ldr	r3, [r3, #28]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d005      	beq.n	800cc82 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc7c:	69db      	ldr	r3, [r3, #28]
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cc82:	2300      	movs	r3, #0
}
 800cc84:	4618      	mov	r0, r3
 800cc86:	3708      	adds	r7, #8
 800cc88:	46bd      	mov	sp, r7
 800cc8a:	bd80      	pop	{r7, pc}

0800cc8c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	460b      	mov	r3, r1
 800cc96:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	32ae      	adds	r2, #174	@ 0xae
 800cca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d101      	bne.n	800ccae <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ccaa:	2303      	movs	r3, #3
 800ccac:	e01c      	b.n	800cce8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ccb4:	b2db      	uxtb	r3, r3
 800ccb6:	2b03      	cmp	r3, #3
 800ccb8:	d115      	bne.n	800cce6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	32ae      	adds	r2, #174	@ 0xae
 800ccc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccc8:	6a1b      	ldr	r3, [r3, #32]
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d00b      	beq.n	800cce6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	32ae      	adds	r2, #174	@ 0xae
 800ccd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccdc:	6a1b      	ldr	r3, [r3, #32]
 800ccde:	78fa      	ldrb	r2, [r7, #3]
 800cce0:	4611      	mov	r1, r2
 800cce2:	6878      	ldr	r0, [r7, #4]
 800cce4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3708      	adds	r7, #8
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b082      	sub	sp, #8
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	32ae      	adds	r2, #174	@ 0xae
 800cd06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d101      	bne.n	800cd12 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cd0e:	2303      	movs	r3, #3
 800cd10:	e01c      	b.n	800cd4c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd18:	b2db      	uxtb	r3, r3
 800cd1a:	2b03      	cmp	r3, #3
 800cd1c:	d115      	bne.n	800cd4a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	32ae      	adds	r2, #174	@ 0xae
 800cd28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d00b      	beq.n	800cd4a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	32ae      	adds	r2, #174	@ 0xae
 800cd3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cd42:	78fa      	ldrb	r2, [r7, #3]
 800cd44:	4611      	mov	r1, r2
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd4a:	2300      	movs	r3, #0
}
 800cd4c:	4618      	mov	r0, r3
 800cd4e:	3708      	adds	r7, #8
 800cd50:	46bd      	mov	sp, r7
 800cd52:	bd80      	pop	{r7, pc}

0800cd54 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cd54:	b480      	push	{r7}
 800cd56:	b083      	sub	sp, #12
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	370c      	adds	r7, #12
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr

0800cd6a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cd6a:	b580      	push	{r7, lr}
 800cd6c:	b084      	sub	sp, #16
 800cd6e:	af00      	add	r7, sp, #0
 800cd70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cd72:	2300      	movs	r3, #0
 800cd74:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2201      	movs	r2, #1
 800cd7a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d00e      	beq.n	800cda6 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd8e:	685b      	ldr	r3, [r3, #4]
 800cd90:	687a      	ldr	r2, [r7, #4]
 800cd92:	6852      	ldr	r2, [r2, #4]
 800cd94:	b2d2      	uxtb	r2, r2
 800cd96:	4611      	mov	r1, r2
 800cd98:	6878      	ldr	r0, [r7, #4]
 800cd9a:	4798      	blx	r3
 800cd9c:	4603      	mov	r3, r0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d001      	beq.n	800cda6 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cda2:	2303      	movs	r3, #3
 800cda4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	460b      	mov	r3, r1
 800cdba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdbc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdbe:	4618      	mov	r0, r3
 800cdc0:	370c      	adds	r7, #12
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr

0800cdca <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cdca:	b480      	push	{r7}
 800cdcc:	b083      	sub	sp, #12
 800cdce:	af00      	add	r7, sp, #0
 800cdd0:	6078      	str	r0, [r7, #4]
 800cdd2:	460b      	mov	r3, r1
 800cdd4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cdd6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr

0800cde4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b086      	sub	sp, #24
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	885b      	ldrh	r3, [r3, #2]
 800ce00:	b29b      	uxth	r3, r3
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	7812      	ldrb	r2, [r2, #0]
 800ce06:	4293      	cmp	r3, r2
 800ce08:	d91f      	bls.n	800ce4a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ce10:	e013      	b.n	800ce3a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ce12:	f107 030a 	add.w	r3, r7, #10
 800ce16:	4619      	mov	r1, r3
 800ce18:	6978      	ldr	r0, [r7, #20]
 800ce1a:	f000 f81b 	bl	800ce54 <USBD_GetNextDesc>
 800ce1e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	785b      	ldrb	r3, [r3, #1]
 800ce24:	2b05      	cmp	r3, #5
 800ce26:	d108      	bne.n	800ce3a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	789b      	ldrb	r3, [r3, #2]
 800ce30:	78fa      	ldrb	r2, [r7, #3]
 800ce32:	429a      	cmp	r2, r3
 800ce34:	d008      	beq.n	800ce48 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ce36:	2300      	movs	r3, #0
 800ce38:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	885b      	ldrh	r3, [r3, #2]
 800ce3e:	b29a      	uxth	r2, r3
 800ce40:	897b      	ldrh	r3, [r7, #10]
 800ce42:	429a      	cmp	r2, r3
 800ce44:	d8e5      	bhi.n	800ce12 <USBD_GetEpDesc+0x2e>
 800ce46:	e000      	b.n	800ce4a <USBD_GetEpDesc+0x66>
          break;
 800ce48:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ce4a:	693b      	ldr	r3, [r7, #16]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ce54:	b480      	push	{r7}
 800ce56:	b085      	sub	sp, #20
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	881b      	ldrh	r3, [r3, #0]
 800ce66:	68fa      	ldr	r2, [r7, #12]
 800ce68:	7812      	ldrb	r2, [r2, #0]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	b29a      	uxth	r2, r3
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	781b      	ldrb	r3, [r3, #0]
 800ce76:	461a      	mov	r2, r3
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	4413      	add	r3, r2
 800ce7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ce7e:	68fb      	ldr	r3, [r7, #12]
}
 800ce80:	4618      	mov	r0, r3
 800ce82:	3714      	adds	r7, #20
 800ce84:	46bd      	mov	sp, r7
 800ce86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce8a:	4770      	bx	lr

0800ce8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ce8c:	b480      	push	{r7}
 800ce8e:	b087      	sub	sp, #28
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ce98:	697b      	ldr	r3, [r7, #20]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ce9e:	697b      	ldr	r3, [r7, #20]
 800cea0:	3301      	adds	r3, #1
 800cea2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cea4:	697b      	ldr	r3, [r7, #20]
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ceaa:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ceae:	021b      	lsls	r3, r3, #8
 800ceb0:	b21a      	sxth	r2, r3
 800ceb2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	b21b      	sxth	r3, r3
 800ceba:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cebc:	89fb      	ldrh	r3, [r7, #14]
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	371c      	adds	r7, #28
 800cec2:	46bd      	mov	sp, r7
 800cec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec8:	4770      	bx	lr
	...

0800cecc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	b084      	sub	sp, #16
 800ced0:	af00      	add	r7, sp, #0
 800ced2:	6078      	str	r0, [r7, #4]
 800ced4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ced6:	2300      	movs	r3, #0
 800ced8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	781b      	ldrb	r3, [r3, #0]
 800cede:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cee2:	2b40      	cmp	r3, #64	@ 0x40
 800cee4:	d005      	beq.n	800cef2 <USBD_StdDevReq+0x26>
 800cee6:	2b40      	cmp	r3, #64	@ 0x40
 800cee8:	d857      	bhi.n	800cf9a <USBD_StdDevReq+0xce>
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00f      	beq.n	800cf0e <USBD_StdDevReq+0x42>
 800ceee:	2b20      	cmp	r3, #32
 800cef0:	d153      	bne.n	800cf9a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	32ae      	adds	r2, #174	@ 0xae
 800cefc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf00:	689b      	ldr	r3, [r3, #8]
 800cf02:	6839      	ldr	r1, [r7, #0]
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	4798      	blx	r3
 800cf08:	4603      	mov	r3, r0
 800cf0a:	73fb      	strb	r3, [r7, #15]
      break;
 800cf0c:	e04a      	b.n	800cfa4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf0e:	683b      	ldr	r3, [r7, #0]
 800cf10:	785b      	ldrb	r3, [r3, #1]
 800cf12:	2b09      	cmp	r3, #9
 800cf14:	d83b      	bhi.n	800cf8e <USBD_StdDevReq+0xc2>
 800cf16:	a201      	add	r2, pc, #4	@ (adr r2, 800cf1c <USBD_StdDevReq+0x50>)
 800cf18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1c:	0800cf71 	.word	0x0800cf71
 800cf20:	0800cf85 	.word	0x0800cf85
 800cf24:	0800cf8f 	.word	0x0800cf8f
 800cf28:	0800cf7b 	.word	0x0800cf7b
 800cf2c:	0800cf8f 	.word	0x0800cf8f
 800cf30:	0800cf4f 	.word	0x0800cf4f
 800cf34:	0800cf45 	.word	0x0800cf45
 800cf38:	0800cf8f 	.word	0x0800cf8f
 800cf3c:	0800cf67 	.word	0x0800cf67
 800cf40:	0800cf59 	.word	0x0800cf59
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cf44:	6839      	ldr	r1, [r7, #0]
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f000 fa3e 	bl	800d3c8 <USBD_GetDescriptor>
          break;
 800cf4c:	e024      	b.n	800cf98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cf4e:	6839      	ldr	r1, [r7, #0]
 800cf50:	6878      	ldr	r0, [r7, #4]
 800cf52:	f000 fba3 	bl	800d69c <USBD_SetAddress>
          break;
 800cf56:	e01f      	b.n	800cf98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cf58:	6839      	ldr	r1, [r7, #0]
 800cf5a:	6878      	ldr	r0, [r7, #4]
 800cf5c:	f000 fbe2 	bl	800d724 <USBD_SetConfig>
 800cf60:	4603      	mov	r3, r0
 800cf62:	73fb      	strb	r3, [r7, #15]
          break;
 800cf64:	e018      	b.n	800cf98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cf66:	6839      	ldr	r1, [r7, #0]
 800cf68:	6878      	ldr	r0, [r7, #4]
 800cf6a:	f000 fc85 	bl	800d878 <USBD_GetConfig>
          break;
 800cf6e:	e013      	b.n	800cf98 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cf70:	6839      	ldr	r1, [r7, #0]
 800cf72:	6878      	ldr	r0, [r7, #4]
 800cf74:	f000 fcb6 	bl	800d8e4 <USBD_GetStatus>
          break;
 800cf78:	e00e      	b.n	800cf98 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 fce5 	bl	800d94c <USBD_SetFeature>
          break;
 800cf82:	e009      	b.n	800cf98 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cf84:	6839      	ldr	r1, [r7, #0]
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f000 fd09 	bl	800d99e <USBD_ClrFeature>
          break;
 800cf8c:	e004      	b.n	800cf98 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cf8e:	6839      	ldr	r1, [r7, #0]
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f000 fd60 	bl	800da56 <USBD_CtlError>
          break;
 800cf96:	bf00      	nop
      }
      break;
 800cf98:	e004      	b.n	800cfa4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cf9a:	6839      	ldr	r1, [r7, #0]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	f000 fd5a 	bl	800da56 <USBD_CtlError>
      break;
 800cfa2:	bf00      	nop
  }

  return ret;
 800cfa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfa6:	4618      	mov	r0, r3
 800cfa8:	3710      	adds	r7, #16
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop

0800cfb0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b084      	sub	sp, #16
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	6078      	str	r0, [r7, #4]
 800cfb8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfbe:	683b      	ldr	r3, [r7, #0]
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cfc6:	2b40      	cmp	r3, #64	@ 0x40
 800cfc8:	d005      	beq.n	800cfd6 <USBD_StdItfReq+0x26>
 800cfca:	2b40      	cmp	r3, #64	@ 0x40
 800cfcc:	d852      	bhi.n	800d074 <USBD_StdItfReq+0xc4>
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d001      	beq.n	800cfd6 <USBD_StdItfReq+0x26>
 800cfd2:	2b20      	cmp	r3, #32
 800cfd4:	d14e      	bne.n	800d074 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	3b01      	subs	r3, #1
 800cfe0:	2b02      	cmp	r3, #2
 800cfe2:	d840      	bhi.n	800d066 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cfe4:	683b      	ldr	r3, [r7, #0]
 800cfe6:	889b      	ldrh	r3, [r3, #4]
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d836      	bhi.n	800d05c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	889b      	ldrh	r3, [r3, #4]
 800cff2:	b2db      	uxtb	r3, r3
 800cff4:	4619      	mov	r1, r3
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f7ff feda 	bl	800cdb0 <USBD_CoreFindIF>
 800cffc:	4603      	mov	r3, r0
 800cffe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	2bff      	cmp	r3, #255	@ 0xff
 800d004:	d01d      	beq.n	800d042 <USBD_StdItfReq+0x92>
 800d006:	7bbb      	ldrb	r3, [r7, #14]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d11a      	bne.n	800d042 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d00c:	7bba      	ldrb	r2, [r7, #14]
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	32ae      	adds	r2, #174	@ 0xae
 800d012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d016:	689b      	ldr	r3, [r3, #8]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d00f      	beq.n	800d03c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d01c:	7bba      	ldrb	r2, [r7, #14]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d024:	7bba      	ldrb	r2, [r7, #14]
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	32ae      	adds	r2, #174	@ 0xae
 800d02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d02e:	689b      	ldr	r3, [r3, #8]
 800d030:	6839      	ldr	r1, [r7, #0]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	4798      	blx	r3
 800d036:	4603      	mov	r3, r0
 800d038:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d03a:	e004      	b.n	800d046 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d03c:	2303      	movs	r3, #3
 800d03e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d040:	e001      	b.n	800d046 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d042:	2303      	movs	r3, #3
 800d044:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	88db      	ldrh	r3, [r3, #6]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d110      	bne.n	800d070 <USBD_StdItfReq+0xc0>
 800d04e:	7bfb      	ldrb	r3, [r7, #15]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d10d      	bne.n	800d070 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fddc 	bl	800dc12 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d05a:	e009      	b.n	800d070 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fcf9 	bl	800da56 <USBD_CtlError>
          break;
 800d064:	e004      	b.n	800d070 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d066:	6839      	ldr	r1, [r7, #0]
 800d068:	6878      	ldr	r0, [r7, #4]
 800d06a:	f000 fcf4 	bl	800da56 <USBD_CtlError>
          break;
 800d06e:	e000      	b.n	800d072 <USBD_StdItfReq+0xc2>
          break;
 800d070:	bf00      	nop
      }
      break;
 800d072:	e004      	b.n	800d07e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d074:	6839      	ldr	r1, [r7, #0]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fced 	bl	800da56 <USBD_CtlError>
      break;
 800d07c:	bf00      	nop
  }

  return ret;
 800d07e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d080:	4618      	mov	r0, r3
 800d082:	3710      	adds	r7, #16
 800d084:	46bd      	mov	sp, r7
 800d086:	bd80      	pop	{r7, pc}

0800d088 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d088:	b580      	push	{r7, lr}
 800d08a:	b084      	sub	sp, #16
 800d08c:	af00      	add	r7, sp, #0
 800d08e:	6078      	str	r0, [r7, #4]
 800d090:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d092:	2300      	movs	r3, #0
 800d094:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d096:	683b      	ldr	r3, [r7, #0]
 800d098:	889b      	ldrh	r3, [r3, #4]
 800d09a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	781b      	ldrb	r3, [r3, #0]
 800d0a0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d0a4:	2b40      	cmp	r3, #64	@ 0x40
 800d0a6:	d007      	beq.n	800d0b8 <USBD_StdEPReq+0x30>
 800d0a8:	2b40      	cmp	r3, #64	@ 0x40
 800d0aa:	f200 8181 	bhi.w	800d3b0 <USBD_StdEPReq+0x328>
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d02a      	beq.n	800d108 <USBD_StdEPReq+0x80>
 800d0b2:	2b20      	cmp	r3, #32
 800d0b4:	f040 817c 	bne.w	800d3b0 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d0b8:	7bbb      	ldrb	r3, [r7, #14]
 800d0ba:	4619      	mov	r1, r3
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f7ff fe84 	bl	800cdca <USBD_CoreFindEP>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0c6:	7b7b      	ldrb	r3, [r7, #13]
 800d0c8:	2bff      	cmp	r3, #255	@ 0xff
 800d0ca:	f000 8176 	beq.w	800d3ba <USBD_StdEPReq+0x332>
 800d0ce:	7b7b      	ldrb	r3, [r7, #13]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	f040 8172 	bne.w	800d3ba <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800d0d6:	7b7a      	ldrb	r2, [r7, #13]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d0de:	7b7a      	ldrb	r2, [r7, #13]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	32ae      	adds	r2, #174	@ 0xae
 800d0e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e8:	689b      	ldr	r3, [r3, #8]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	f000 8165 	beq.w	800d3ba <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d0f0:	7b7a      	ldrb	r2, [r7, #13]
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	32ae      	adds	r2, #174	@ 0xae
 800d0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0fa:	689b      	ldr	r3, [r3, #8]
 800d0fc:	6839      	ldr	r1, [r7, #0]
 800d0fe:	6878      	ldr	r0, [r7, #4]
 800d100:	4798      	blx	r3
 800d102:	4603      	mov	r3, r0
 800d104:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d106:	e158      	b.n	800d3ba <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d108:	683b      	ldr	r3, [r7, #0]
 800d10a:	785b      	ldrb	r3, [r3, #1]
 800d10c:	2b03      	cmp	r3, #3
 800d10e:	d008      	beq.n	800d122 <USBD_StdEPReq+0x9a>
 800d110:	2b03      	cmp	r3, #3
 800d112:	f300 8147 	bgt.w	800d3a4 <USBD_StdEPReq+0x31c>
 800d116:	2b00      	cmp	r3, #0
 800d118:	f000 809b 	beq.w	800d252 <USBD_StdEPReq+0x1ca>
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d03c      	beq.n	800d19a <USBD_StdEPReq+0x112>
 800d120:	e140      	b.n	800d3a4 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	2b02      	cmp	r3, #2
 800d12c:	d002      	beq.n	800d134 <USBD_StdEPReq+0xac>
 800d12e:	2b03      	cmp	r3, #3
 800d130:	d016      	beq.n	800d160 <USBD_StdEPReq+0xd8>
 800d132:	e02c      	b.n	800d18e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d134:	7bbb      	ldrb	r3, [r7, #14]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d00d      	beq.n	800d156 <USBD_StdEPReq+0xce>
 800d13a:	7bbb      	ldrb	r3, [r7, #14]
 800d13c:	2b80      	cmp	r3, #128	@ 0x80
 800d13e:	d00a      	beq.n	800d156 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d140:	7bbb      	ldrb	r3, [r7, #14]
 800d142:	4619      	mov	r1, r3
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f001 f9e5 	bl	800e514 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d14a:	2180      	movs	r1, #128	@ 0x80
 800d14c:	6878      	ldr	r0, [r7, #4]
 800d14e:	f001 f9e1 	bl	800e514 <USBD_LL_StallEP>
 800d152:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d154:	e020      	b.n	800d198 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	6878      	ldr	r0, [r7, #4]
 800d15a:	f000 fc7c 	bl	800da56 <USBD_CtlError>
              break;
 800d15e:	e01b      	b.n	800d198 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d160:	683b      	ldr	r3, [r7, #0]
 800d162:	885b      	ldrh	r3, [r3, #2]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d10e      	bne.n	800d186 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d168:	7bbb      	ldrb	r3, [r7, #14]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00b      	beq.n	800d186 <USBD_StdEPReq+0xfe>
 800d16e:	7bbb      	ldrb	r3, [r7, #14]
 800d170:	2b80      	cmp	r3, #128	@ 0x80
 800d172:	d008      	beq.n	800d186 <USBD_StdEPReq+0xfe>
 800d174:	683b      	ldr	r3, [r7, #0]
 800d176:	88db      	ldrh	r3, [r3, #6]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d104      	bne.n	800d186 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d17c:	7bbb      	ldrb	r3, [r7, #14]
 800d17e:	4619      	mov	r1, r3
 800d180:	6878      	ldr	r0, [r7, #4]
 800d182:	f001 f9c7 	bl	800e514 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	f000 fd43 	bl	800dc12 <USBD_CtlSendStatus>

              break;
 800d18c:	e004      	b.n	800d198 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d18e:	6839      	ldr	r1, [r7, #0]
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f000 fc60 	bl	800da56 <USBD_CtlError>
              break;
 800d196:	bf00      	nop
          }
          break;
 800d198:	e109      	b.n	800d3ae <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d1a0:	b2db      	uxtb	r3, r3
 800d1a2:	2b02      	cmp	r3, #2
 800d1a4:	d002      	beq.n	800d1ac <USBD_StdEPReq+0x124>
 800d1a6:	2b03      	cmp	r3, #3
 800d1a8:	d016      	beq.n	800d1d8 <USBD_StdEPReq+0x150>
 800d1aa:	e04b      	b.n	800d244 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1ac:	7bbb      	ldrb	r3, [r7, #14]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00d      	beq.n	800d1ce <USBD_StdEPReq+0x146>
 800d1b2:	7bbb      	ldrb	r3, [r7, #14]
 800d1b4:	2b80      	cmp	r3, #128	@ 0x80
 800d1b6:	d00a      	beq.n	800d1ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1b8:	7bbb      	ldrb	r3, [r7, #14]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	6878      	ldr	r0, [r7, #4]
 800d1be:	f001 f9a9 	bl	800e514 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1c2:	2180      	movs	r1, #128	@ 0x80
 800d1c4:	6878      	ldr	r0, [r7, #4]
 800d1c6:	f001 f9a5 	bl	800e514 <USBD_LL_StallEP>
 800d1ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1cc:	e040      	b.n	800d250 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d1ce:	6839      	ldr	r1, [r7, #0]
 800d1d0:	6878      	ldr	r0, [r7, #4]
 800d1d2:	f000 fc40 	bl	800da56 <USBD_CtlError>
              break;
 800d1d6:	e03b      	b.n	800d250 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	885b      	ldrh	r3, [r3, #2]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d136      	bne.n	800d24e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d1e0:	7bbb      	ldrb	r3, [r7, #14]
 800d1e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d004      	beq.n	800d1f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d1ea:	7bbb      	ldrb	r3, [r7, #14]
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f001 f9af 	bl	800e552 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fd0c 	bl	800dc12 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d1fa:	7bbb      	ldrb	r3, [r7, #14]
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f7ff fde3 	bl	800cdca <USBD_CoreFindEP>
 800d204:	4603      	mov	r3, r0
 800d206:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d208:	7b7b      	ldrb	r3, [r7, #13]
 800d20a:	2bff      	cmp	r3, #255	@ 0xff
 800d20c:	d01f      	beq.n	800d24e <USBD_StdEPReq+0x1c6>
 800d20e:	7b7b      	ldrb	r3, [r7, #13]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d11c      	bne.n	800d24e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d214:	7b7a      	ldrb	r2, [r7, #13]
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d21c:	7b7a      	ldrb	r2, [r7, #13]
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	32ae      	adds	r2, #174	@ 0xae
 800d222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d226:	689b      	ldr	r3, [r3, #8]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d010      	beq.n	800d24e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d22c:	7b7a      	ldrb	r2, [r7, #13]
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	32ae      	adds	r2, #174	@ 0xae
 800d232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d236:	689b      	ldr	r3, [r3, #8]
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	4798      	blx	r3
 800d23e:	4603      	mov	r3, r0
 800d240:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d242:	e004      	b.n	800d24e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fc05 	bl	800da56 <USBD_CtlError>
              break;
 800d24c:	e000      	b.n	800d250 <USBD_StdEPReq+0x1c8>
              break;
 800d24e:	bf00      	nop
          }
          break;
 800d250:	e0ad      	b.n	800d3ae <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	2b02      	cmp	r3, #2
 800d25c:	d002      	beq.n	800d264 <USBD_StdEPReq+0x1dc>
 800d25e:	2b03      	cmp	r3, #3
 800d260:	d033      	beq.n	800d2ca <USBD_StdEPReq+0x242>
 800d262:	e099      	b.n	800d398 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d264:	7bbb      	ldrb	r3, [r7, #14]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d007      	beq.n	800d27a <USBD_StdEPReq+0x1f2>
 800d26a:	7bbb      	ldrb	r3, [r7, #14]
 800d26c:	2b80      	cmp	r3, #128	@ 0x80
 800d26e:	d004      	beq.n	800d27a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 fbef 	bl	800da56 <USBD_CtlError>
                break;
 800d278:	e093      	b.n	800d3a2 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d27a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d27e:	2b00      	cmp	r3, #0
 800d280:	da0b      	bge.n	800d29a <USBD_StdEPReq+0x212>
 800d282:	7bbb      	ldrb	r3, [r7, #14]
 800d284:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d288:	4613      	mov	r3, r2
 800d28a:	009b      	lsls	r3, r3, #2
 800d28c:	4413      	add	r3, r2
 800d28e:	009b      	lsls	r3, r3, #2
 800d290:	3310      	adds	r3, #16
 800d292:	687a      	ldr	r2, [r7, #4]
 800d294:	4413      	add	r3, r2
 800d296:	3304      	adds	r3, #4
 800d298:	e00b      	b.n	800d2b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d29a:	7bbb      	ldrb	r3, [r7, #14]
 800d29c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4413      	add	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d2ac:	687a      	ldr	r2, [r7, #4]
 800d2ae:	4413      	add	r3, r2
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d2ba:	68bb      	ldr	r3, [r7, #8]
 800d2bc:	330e      	adds	r3, #14
 800d2be:	2202      	movs	r2, #2
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f000 fc44 	bl	800db50 <USBD_CtlSendData>
              break;
 800d2c8:	e06b      	b.n	800d3a2 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d2ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	da11      	bge.n	800d2f6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d2d2:	7bbb      	ldrb	r3, [r7, #14]
 800d2d4:	f003 020f 	and.w	r2, r3, #15
 800d2d8:	6879      	ldr	r1, [r7, #4]
 800d2da:	4613      	mov	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	4413      	add	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	440b      	add	r3, r1
 800d2e4:	3323      	adds	r3, #35	@ 0x23
 800d2e6:	781b      	ldrb	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d117      	bne.n	800d31c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d2ec:	6839      	ldr	r1, [r7, #0]
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f000 fbb1 	bl	800da56 <USBD_CtlError>
                  break;
 800d2f4:	e055      	b.n	800d3a2 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d2f6:	7bbb      	ldrb	r3, [r7, #14]
 800d2f8:	f003 020f 	and.w	r2, r3, #15
 800d2fc:	6879      	ldr	r1, [r7, #4]
 800d2fe:	4613      	mov	r3, r2
 800d300:	009b      	lsls	r3, r3, #2
 800d302:	4413      	add	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	440b      	add	r3, r1
 800d308:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d30c:	781b      	ldrb	r3, [r3, #0]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d104      	bne.n	800d31c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d312:	6839      	ldr	r1, [r7, #0]
 800d314:	6878      	ldr	r0, [r7, #4]
 800d316:	f000 fb9e 	bl	800da56 <USBD_CtlError>
                  break;
 800d31a:	e042      	b.n	800d3a2 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d31c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d320:	2b00      	cmp	r3, #0
 800d322:	da0b      	bge.n	800d33c <USBD_StdEPReq+0x2b4>
 800d324:	7bbb      	ldrb	r3, [r7, #14]
 800d326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d32a:	4613      	mov	r3, r2
 800d32c:	009b      	lsls	r3, r3, #2
 800d32e:	4413      	add	r3, r2
 800d330:	009b      	lsls	r3, r3, #2
 800d332:	3310      	adds	r3, #16
 800d334:	687a      	ldr	r2, [r7, #4]
 800d336:	4413      	add	r3, r2
 800d338:	3304      	adds	r3, #4
 800d33a:	e00b      	b.n	800d354 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d33c:	7bbb      	ldrb	r3, [r7, #14]
 800d33e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d342:	4613      	mov	r3, r2
 800d344:	009b      	lsls	r3, r3, #2
 800d346:	4413      	add	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	4413      	add	r3, r2
 800d352:	3304      	adds	r3, #4
 800d354:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d356:	7bbb      	ldrb	r3, [r7, #14]
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d002      	beq.n	800d362 <USBD_StdEPReq+0x2da>
 800d35c:	7bbb      	ldrb	r3, [r7, #14]
 800d35e:	2b80      	cmp	r3, #128	@ 0x80
 800d360:	d103      	bne.n	800d36a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800d362:	68bb      	ldr	r3, [r7, #8]
 800d364:	2200      	movs	r2, #0
 800d366:	739a      	strb	r2, [r3, #14]
 800d368:	e00e      	b.n	800d388 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d36a:	7bbb      	ldrb	r3, [r7, #14]
 800d36c:	4619      	mov	r1, r3
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f001 f90e 	bl	800e590 <USBD_LL_IsStallEP>
 800d374:	4603      	mov	r3, r0
 800d376:	2b00      	cmp	r3, #0
 800d378:	d003      	beq.n	800d382 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800d37a:	68bb      	ldr	r3, [r7, #8]
 800d37c:	2201      	movs	r2, #1
 800d37e:	739a      	strb	r2, [r3, #14]
 800d380:	e002      	b.n	800d388 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800d382:	68bb      	ldr	r3, [r7, #8]
 800d384:	2200      	movs	r2, #0
 800d386:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d388:	68bb      	ldr	r3, [r7, #8]
 800d38a:	330e      	adds	r3, #14
 800d38c:	2202      	movs	r2, #2
 800d38e:	4619      	mov	r1, r3
 800d390:	6878      	ldr	r0, [r7, #4]
 800d392:	f000 fbdd 	bl	800db50 <USBD_CtlSendData>
              break;
 800d396:	e004      	b.n	800d3a2 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800d398:	6839      	ldr	r1, [r7, #0]
 800d39a:	6878      	ldr	r0, [r7, #4]
 800d39c:	f000 fb5b 	bl	800da56 <USBD_CtlError>
              break;
 800d3a0:	bf00      	nop
          }
          break;
 800d3a2:	e004      	b.n	800d3ae <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 fb55 	bl	800da56 <USBD_CtlError>
          break;
 800d3ac:	bf00      	nop
      }
      break;
 800d3ae:	e005      	b.n	800d3bc <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800d3b0:	6839      	ldr	r1, [r7, #0]
 800d3b2:	6878      	ldr	r0, [r7, #4]
 800d3b4:	f000 fb4f 	bl	800da56 <USBD_CtlError>
      break;
 800d3b8:	e000      	b.n	800d3bc <USBD_StdEPReq+0x334>
      break;
 800d3ba:	bf00      	nop
  }

  return ret;
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3be:	4618      	mov	r0, r3
 800d3c0:	3710      	adds	r7, #16
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}
	...

0800d3c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	b084      	sub	sp, #16
 800d3cc:	af00      	add	r7, sp, #0
 800d3ce:	6078      	str	r0, [r7, #4]
 800d3d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d3da:	2300      	movs	r3, #0
 800d3dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d3de:	683b      	ldr	r3, [r7, #0]
 800d3e0:	885b      	ldrh	r3, [r3, #2]
 800d3e2:	0a1b      	lsrs	r3, r3, #8
 800d3e4:	b29b      	uxth	r3, r3
 800d3e6:	3b01      	subs	r3, #1
 800d3e8:	2b06      	cmp	r3, #6
 800d3ea:	f200 8128 	bhi.w	800d63e <USBD_GetDescriptor+0x276>
 800d3ee:	a201      	add	r2, pc, #4	@ (adr r2, 800d3f4 <USBD_GetDescriptor+0x2c>)
 800d3f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f4:	0800d411 	.word	0x0800d411
 800d3f8:	0800d429 	.word	0x0800d429
 800d3fc:	0800d469 	.word	0x0800d469
 800d400:	0800d63f 	.word	0x0800d63f
 800d404:	0800d63f 	.word	0x0800d63f
 800d408:	0800d5df 	.word	0x0800d5df
 800d40c:	0800d60b 	.word	0x0800d60b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	687a      	ldr	r2, [r7, #4]
 800d41a:	7c12      	ldrb	r2, [r2, #16]
 800d41c:	f107 0108 	add.w	r1, r7, #8
 800d420:	4610      	mov	r0, r2
 800d422:	4798      	blx	r3
 800d424:	60f8      	str	r0, [r7, #12]
      break;
 800d426:	e112      	b.n	800d64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	7c1b      	ldrb	r3, [r3, #16]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d10d      	bne.n	800d44c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d436:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d438:	f107 0208 	add.w	r2, r7, #8
 800d43c:	4610      	mov	r0, r2
 800d43e:	4798      	blx	r3
 800d440:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	3301      	adds	r3, #1
 800d446:	2202      	movs	r2, #2
 800d448:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d44a:	e100      	b.n	800d64e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d452:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d454:	f107 0208 	add.w	r2, r7, #8
 800d458:	4610      	mov	r0, r2
 800d45a:	4798      	blx	r3
 800d45c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	3301      	adds	r3, #1
 800d462:	2202      	movs	r2, #2
 800d464:	701a      	strb	r2, [r3, #0]
      break;
 800d466:	e0f2      	b.n	800d64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d468:	683b      	ldr	r3, [r7, #0]
 800d46a:	885b      	ldrh	r3, [r3, #2]
 800d46c:	b2db      	uxtb	r3, r3
 800d46e:	2b05      	cmp	r3, #5
 800d470:	f200 80ac 	bhi.w	800d5cc <USBD_GetDescriptor+0x204>
 800d474:	a201      	add	r2, pc, #4	@ (adr r2, 800d47c <USBD_GetDescriptor+0xb4>)
 800d476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d47a:	bf00      	nop
 800d47c:	0800d495 	.word	0x0800d495
 800d480:	0800d4c9 	.word	0x0800d4c9
 800d484:	0800d4fd 	.word	0x0800d4fd
 800d488:	0800d531 	.word	0x0800d531
 800d48c:	0800d565 	.word	0x0800d565
 800d490:	0800d599 	.word	0x0800d599
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d49a:	685b      	ldr	r3, [r3, #4]
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d00b      	beq.n	800d4b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4a6:	685b      	ldr	r3, [r3, #4]
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	7c12      	ldrb	r2, [r2, #16]
 800d4ac:	f107 0108 	add.w	r1, r7, #8
 800d4b0:	4610      	mov	r0, r2
 800d4b2:	4798      	blx	r3
 800d4b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4b6:	e091      	b.n	800d5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4b8:	6839      	ldr	r1, [r7, #0]
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f000 facb 	bl	800da56 <USBD_CtlError>
            err++;
 800d4c0:	7afb      	ldrb	r3, [r7, #11]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	72fb      	strb	r3, [r7, #11]
          break;
 800d4c6:	e089      	b.n	800d5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4ce:	689b      	ldr	r3, [r3, #8]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d00b      	beq.n	800d4ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d4da:	689b      	ldr	r3, [r3, #8]
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	7c12      	ldrb	r2, [r2, #16]
 800d4e0:	f107 0108 	add.w	r1, r7, #8
 800d4e4:	4610      	mov	r0, r2
 800d4e6:	4798      	blx	r3
 800d4e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d4ea:	e077      	b.n	800d5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d4ec:	6839      	ldr	r1, [r7, #0]
 800d4ee:	6878      	ldr	r0, [r7, #4]
 800d4f0:	f000 fab1 	bl	800da56 <USBD_CtlError>
            err++;
 800d4f4:	7afb      	ldrb	r3, [r7, #11]
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	72fb      	strb	r3, [r7, #11]
          break;
 800d4fa:	e06f      	b.n	800d5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d502:	68db      	ldr	r3, [r3, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d00b      	beq.n	800d520 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d50e:	68db      	ldr	r3, [r3, #12]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	7c12      	ldrb	r2, [r2, #16]
 800d514:	f107 0108 	add.w	r1, r7, #8
 800d518:	4610      	mov	r0, r2
 800d51a:	4798      	blx	r3
 800d51c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d51e:	e05d      	b.n	800d5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d520:	6839      	ldr	r1, [r7, #0]
 800d522:	6878      	ldr	r0, [r7, #4]
 800d524:	f000 fa97 	bl	800da56 <USBD_CtlError>
            err++;
 800d528:	7afb      	ldrb	r3, [r7, #11]
 800d52a:	3301      	adds	r3, #1
 800d52c:	72fb      	strb	r3, [r7, #11]
          break;
 800d52e:	e055      	b.n	800d5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d536:	691b      	ldr	r3, [r3, #16]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00b      	beq.n	800d554 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	687a      	ldr	r2, [r7, #4]
 800d546:	7c12      	ldrb	r2, [r2, #16]
 800d548:	f107 0108 	add.w	r1, r7, #8
 800d54c:	4610      	mov	r0, r2
 800d54e:	4798      	blx	r3
 800d550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d552:	e043      	b.n	800d5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d554:	6839      	ldr	r1, [r7, #0]
 800d556:	6878      	ldr	r0, [r7, #4]
 800d558:	f000 fa7d 	bl	800da56 <USBD_CtlError>
            err++;
 800d55c:	7afb      	ldrb	r3, [r7, #11]
 800d55e:	3301      	adds	r3, #1
 800d560:	72fb      	strb	r3, [r7, #11]
          break;
 800d562:	e03b      	b.n	800d5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d56a:	695b      	ldr	r3, [r3, #20]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d00b      	beq.n	800d588 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d576:	695b      	ldr	r3, [r3, #20]
 800d578:	687a      	ldr	r2, [r7, #4]
 800d57a:	7c12      	ldrb	r2, [r2, #16]
 800d57c:	f107 0108 	add.w	r1, r7, #8
 800d580:	4610      	mov	r0, r2
 800d582:	4798      	blx	r3
 800d584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d586:	e029      	b.n	800d5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d588:	6839      	ldr	r1, [r7, #0]
 800d58a:	6878      	ldr	r0, [r7, #4]
 800d58c:	f000 fa63 	bl	800da56 <USBD_CtlError>
            err++;
 800d590:	7afb      	ldrb	r3, [r7, #11]
 800d592:	3301      	adds	r3, #1
 800d594:	72fb      	strb	r3, [r7, #11]
          break;
 800d596:	e021      	b.n	800d5dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d59e:	699b      	ldr	r3, [r3, #24]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d00b      	beq.n	800d5bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d5aa:	699b      	ldr	r3, [r3, #24]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	7c12      	ldrb	r2, [r2, #16]
 800d5b0:	f107 0108 	add.w	r1, r7, #8
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	4798      	blx	r3
 800d5b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5ba:	e00f      	b.n	800d5dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5bc:	6839      	ldr	r1, [r7, #0]
 800d5be:	6878      	ldr	r0, [r7, #4]
 800d5c0:	f000 fa49 	bl	800da56 <USBD_CtlError>
            err++;
 800d5c4:	7afb      	ldrb	r3, [r7, #11]
 800d5c6:	3301      	adds	r3, #1
 800d5c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d5ca:	e007      	b.n	800d5dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d5cc:	6839      	ldr	r1, [r7, #0]
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f000 fa41 	bl	800da56 <USBD_CtlError>
          err++;
 800d5d4:	7afb      	ldrb	r3, [r7, #11]
 800d5d6:	3301      	adds	r3, #1
 800d5d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d5da:	bf00      	nop
      }
      break;
 800d5dc:	e037      	b.n	800d64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	7c1b      	ldrb	r3, [r3, #16]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d109      	bne.n	800d5fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d5ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d5ee:	f107 0208 	add.w	r2, r7, #8
 800d5f2:	4610      	mov	r0, r2
 800d5f4:	4798      	blx	r3
 800d5f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d5f8:	e029      	b.n	800d64e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d5fa:	6839      	ldr	r1, [r7, #0]
 800d5fc:	6878      	ldr	r0, [r7, #4]
 800d5fe:	f000 fa2a 	bl	800da56 <USBD_CtlError>
        err++;
 800d602:	7afb      	ldrb	r3, [r7, #11]
 800d604:	3301      	adds	r3, #1
 800d606:	72fb      	strb	r3, [r7, #11]
      break;
 800d608:	e021      	b.n	800d64e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	7c1b      	ldrb	r3, [r3, #16]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d10d      	bne.n	800d62e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d61a:	f107 0208 	add.w	r2, r7, #8
 800d61e:	4610      	mov	r0, r2
 800d620:	4798      	blx	r3
 800d622:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	3301      	adds	r3, #1
 800d628:	2207      	movs	r2, #7
 800d62a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d62c:	e00f      	b.n	800d64e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d62e:	6839      	ldr	r1, [r7, #0]
 800d630:	6878      	ldr	r0, [r7, #4]
 800d632:	f000 fa10 	bl	800da56 <USBD_CtlError>
        err++;
 800d636:	7afb      	ldrb	r3, [r7, #11]
 800d638:	3301      	adds	r3, #1
 800d63a:	72fb      	strb	r3, [r7, #11]
      break;
 800d63c:	e007      	b.n	800d64e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d63e:	6839      	ldr	r1, [r7, #0]
 800d640:	6878      	ldr	r0, [r7, #4]
 800d642:	f000 fa08 	bl	800da56 <USBD_CtlError>
      err++;
 800d646:	7afb      	ldrb	r3, [r7, #11]
 800d648:	3301      	adds	r3, #1
 800d64a:	72fb      	strb	r3, [r7, #11]
      break;
 800d64c:	bf00      	nop
  }

  if (err != 0U)
 800d64e:	7afb      	ldrb	r3, [r7, #11]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d11e      	bne.n	800d692 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d654:	683b      	ldr	r3, [r7, #0]
 800d656:	88db      	ldrh	r3, [r3, #6]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d016      	beq.n	800d68a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d65c:	893b      	ldrh	r3, [r7, #8]
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00e      	beq.n	800d680 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d662:	683b      	ldr	r3, [r7, #0]
 800d664:	88da      	ldrh	r2, [r3, #6]
 800d666:	893b      	ldrh	r3, [r7, #8]
 800d668:	4293      	cmp	r3, r2
 800d66a:	bf28      	it	cs
 800d66c:	4613      	movcs	r3, r2
 800d66e:	b29b      	uxth	r3, r3
 800d670:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d672:	893b      	ldrh	r3, [r7, #8]
 800d674:	461a      	mov	r2, r3
 800d676:	68f9      	ldr	r1, [r7, #12]
 800d678:	6878      	ldr	r0, [r7, #4]
 800d67a:	f000 fa69 	bl	800db50 <USBD_CtlSendData>
 800d67e:	e009      	b.n	800d694 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 f9e7 	bl	800da56 <USBD_CtlError>
 800d688:	e004      	b.n	800d694 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 fac1 	bl	800dc12 <USBD_CtlSendStatus>
 800d690:	e000      	b.n	800d694 <USBD_GetDescriptor+0x2cc>
    return;
 800d692:	bf00      	nop
  }
}
 800d694:	3710      	adds	r7, #16
 800d696:	46bd      	mov	sp, r7
 800d698:	bd80      	pop	{r7, pc}
 800d69a:	bf00      	nop

0800d69c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d69c:	b580      	push	{r7, lr}
 800d69e:	b084      	sub	sp, #16
 800d6a0:	af00      	add	r7, sp, #0
 800d6a2:	6078      	str	r0, [r7, #4]
 800d6a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	889b      	ldrh	r3, [r3, #4]
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d131      	bne.n	800d712 <USBD_SetAddress+0x76>
 800d6ae:	683b      	ldr	r3, [r7, #0]
 800d6b0:	88db      	ldrh	r3, [r3, #6]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d12d      	bne.n	800d712 <USBD_SetAddress+0x76>
 800d6b6:	683b      	ldr	r3, [r7, #0]
 800d6b8:	885b      	ldrh	r3, [r3, #2]
 800d6ba:	2b7f      	cmp	r3, #127	@ 0x7f
 800d6bc:	d829      	bhi.n	800d712 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	885b      	ldrh	r3, [r3, #2]
 800d6c2:	b2db      	uxtb	r3, r3
 800d6c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d6c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d104      	bne.n	800d6e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d6d6:	6839      	ldr	r1, [r7, #0]
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f000 f9bc 	bl	800da56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6de:	e01d      	b.n	800d71c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	7bfa      	ldrb	r2, [r7, #15]
 800d6e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d6e8:	7bfb      	ldrb	r3, [r7, #15]
 800d6ea:	4619      	mov	r1, r3
 800d6ec:	6878      	ldr	r0, [r7, #4]
 800d6ee:	f000 ff7b 	bl	800e5e8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d6f2:	6878      	ldr	r0, [r7, #4]
 800d6f4:	f000 fa8d 	bl	800dc12 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d6f8:	7bfb      	ldrb	r3, [r7, #15]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d004      	beq.n	800d708 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2202      	movs	r2, #2
 800d702:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d706:	e009      	b.n	800d71c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2201      	movs	r2, #1
 800d70c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d710:	e004      	b.n	800d71c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d712:	6839      	ldr	r1, [r7, #0]
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f000 f99e 	bl	800da56 <USBD_CtlError>
  }
}
 800d71a:	bf00      	nop
 800d71c:	bf00      	nop
 800d71e:	3710      	adds	r7, #16
 800d720:	46bd      	mov	sp, r7
 800d722:	bd80      	pop	{r7, pc}

0800d724 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	885b      	ldrh	r3, [r3, #2]
 800d736:	b2da      	uxtb	r2, r3
 800d738:	4b4e      	ldr	r3, [pc, #312]	@ (800d874 <USBD_SetConfig+0x150>)
 800d73a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d73c:	4b4d      	ldr	r3, [pc, #308]	@ (800d874 <USBD_SetConfig+0x150>)
 800d73e:	781b      	ldrb	r3, [r3, #0]
 800d740:	2b01      	cmp	r3, #1
 800d742:	d905      	bls.n	800d750 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d744:	6839      	ldr	r1, [r7, #0]
 800d746:	6878      	ldr	r0, [r7, #4]
 800d748:	f000 f985 	bl	800da56 <USBD_CtlError>
    return USBD_FAIL;
 800d74c:	2303      	movs	r3, #3
 800d74e:	e08c      	b.n	800d86a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d756:	b2db      	uxtb	r3, r3
 800d758:	2b02      	cmp	r3, #2
 800d75a:	d002      	beq.n	800d762 <USBD_SetConfig+0x3e>
 800d75c:	2b03      	cmp	r3, #3
 800d75e:	d029      	beq.n	800d7b4 <USBD_SetConfig+0x90>
 800d760:	e075      	b.n	800d84e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d762:	4b44      	ldr	r3, [pc, #272]	@ (800d874 <USBD_SetConfig+0x150>)
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d020      	beq.n	800d7ac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d76a:	4b42      	ldr	r3, [pc, #264]	@ (800d874 <USBD_SetConfig+0x150>)
 800d76c:	781b      	ldrb	r3, [r3, #0]
 800d76e:	461a      	mov	r2, r3
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d774:	4b3f      	ldr	r3, [pc, #252]	@ (800d874 <USBD_SetConfig+0x150>)
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f7fe ffcd 	bl	800c71a <USBD_SetClassConfig>
 800d780:	4603      	mov	r3, r0
 800d782:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d784:	7bfb      	ldrb	r3, [r7, #15]
 800d786:	2b00      	cmp	r3, #0
 800d788:	d008      	beq.n	800d79c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d78a:	6839      	ldr	r1, [r7, #0]
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	f000 f962 	bl	800da56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2202      	movs	r2, #2
 800d796:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d79a:	e065      	b.n	800d868 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d79c:	6878      	ldr	r0, [r7, #4]
 800d79e:	f000 fa38 	bl	800dc12 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	2203      	movs	r2, #3
 800d7a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d7aa:	e05d      	b.n	800d868 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d7ac:	6878      	ldr	r0, [r7, #4]
 800d7ae:	f000 fa30 	bl	800dc12 <USBD_CtlSendStatus>
      break;
 800d7b2:	e059      	b.n	800d868 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d7b4:	4b2f      	ldr	r3, [pc, #188]	@ (800d874 <USBD_SetConfig+0x150>)
 800d7b6:	781b      	ldrb	r3, [r3, #0]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d112      	bne.n	800d7e2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2202      	movs	r2, #2
 800d7c0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d7c4:	4b2b      	ldr	r3, [pc, #172]	@ (800d874 <USBD_SetConfig+0x150>)
 800d7c6:	781b      	ldrb	r3, [r3, #0]
 800d7c8:	461a      	mov	r2, r3
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d7ce:	4b29      	ldr	r3, [pc, #164]	@ (800d874 <USBD_SetConfig+0x150>)
 800d7d0:	781b      	ldrb	r3, [r3, #0]
 800d7d2:	4619      	mov	r1, r3
 800d7d4:	6878      	ldr	r0, [r7, #4]
 800d7d6:	f7fe ffbc 	bl	800c752 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 fa19 	bl	800dc12 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d7e0:	e042      	b.n	800d868 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d7e2:	4b24      	ldr	r3, [pc, #144]	@ (800d874 <USBD_SetConfig+0x150>)
 800d7e4:	781b      	ldrb	r3, [r3, #0]
 800d7e6:	461a      	mov	r2, r3
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	685b      	ldr	r3, [r3, #4]
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d02a      	beq.n	800d846 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	685b      	ldr	r3, [r3, #4]
 800d7f4:	b2db      	uxtb	r3, r3
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f7fe ffaa 	bl	800c752 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d7fe:	4b1d      	ldr	r3, [pc, #116]	@ (800d874 <USBD_SetConfig+0x150>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	461a      	mov	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d808:	4b1a      	ldr	r3, [pc, #104]	@ (800d874 <USBD_SetConfig+0x150>)
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7fe ff83 	bl	800c71a <USBD_SetClassConfig>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d818:	7bfb      	ldrb	r3, [r7, #15]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d00f      	beq.n	800d83e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d81e:	6839      	ldr	r1, [r7, #0]
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 f918 	bl	800da56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	685b      	ldr	r3, [r3, #4]
 800d82a:	b2db      	uxtb	r3, r3
 800d82c:	4619      	mov	r1, r3
 800d82e:	6878      	ldr	r0, [r7, #4]
 800d830:	f7fe ff8f 	bl	800c752 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2202      	movs	r2, #2
 800d838:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d83c:	e014      	b.n	800d868 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 f9e7 	bl	800dc12 <USBD_CtlSendStatus>
      break;
 800d844:	e010      	b.n	800d868 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 f9e3 	bl	800dc12 <USBD_CtlSendStatus>
      break;
 800d84c:	e00c      	b.n	800d868 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d84e:	6839      	ldr	r1, [r7, #0]
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f000 f900 	bl	800da56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d856:	4b07      	ldr	r3, [pc, #28]	@ (800d874 <USBD_SetConfig+0x150>)
 800d858:	781b      	ldrb	r3, [r3, #0]
 800d85a:	4619      	mov	r1, r3
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7fe ff78 	bl	800c752 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d862:	2303      	movs	r3, #3
 800d864:	73fb      	strb	r3, [r7, #15]
      break;
 800d866:	bf00      	nop
  }

  return ret;
 800d868:	7bfb      	ldrb	r3, [r7, #15]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3710      	adds	r7, #16
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	20000b10 	.word	0x20000b10

0800d878 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
 800d880:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d882:	683b      	ldr	r3, [r7, #0]
 800d884:	88db      	ldrh	r3, [r3, #6]
 800d886:	2b01      	cmp	r3, #1
 800d888:	d004      	beq.n	800d894 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d88a:	6839      	ldr	r1, [r7, #0]
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f000 f8e2 	bl	800da56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d892:	e023      	b.n	800d8dc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d89a:	b2db      	uxtb	r3, r3
 800d89c:	2b02      	cmp	r3, #2
 800d89e:	dc02      	bgt.n	800d8a6 <USBD_GetConfig+0x2e>
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	dc03      	bgt.n	800d8ac <USBD_GetConfig+0x34>
 800d8a4:	e015      	b.n	800d8d2 <USBD_GetConfig+0x5a>
 800d8a6:	2b03      	cmp	r3, #3
 800d8a8:	d00b      	beq.n	800d8c2 <USBD_GetConfig+0x4a>
 800d8aa:	e012      	b.n	800d8d2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	3308      	adds	r3, #8
 800d8b6:	2201      	movs	r2, #1
 800d8b8:	4619      	mov	r1, r3
 800d8ba:	6878      	ldr	r0, [r7, #4]
 800d8bc:	f000 f948 	bl	800db50 <USBD_CtlSendData>
        break;
 800d8c0:	e00c      	b.n	800d8dc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	2201      	movs	r2, #1
 800d8c8:	4619      	mov	r1, r3
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f940 	bl	800db50 <USBD_CtlSendData>
        break;
 800d8d0:	e004      	b.n	800d8dc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d8d2:	6839      	ldr	r1, [r7, #0]
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 f8be 	bl	800da56 <USBD_CtlError>
        break;
 800d8da:	bf00      	nop
}
 800d8dc:	bf00      	nop
 800d8de:	3708      	adds	r7, #8
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	bd80      	pop	{r7, pc}

0800d8e4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b082      	sub	sp, #8
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	3b01      	subs	r3, #1
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d81e      	bhi.n	800d93a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	88db      	ldrh	r3, [r3, #6]
 800d900:	2b02      	cmp	r3, #2
 800d902:	d004      	beq.n	800d90e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d904:	6839      	ldr	r1, [r7, #0]
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f000 f8a5 	bl	800da56 <USBD_CtlError>
        break;
 800d90c:	e01a      	b.n	800d944 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	2201      	movs	r2, #1
 800d912:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d005      	beq.n	800d92a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	68db      	ldr	r3, [r3, #12]
 800d922:	f043 0202 	orr.w	r2, r3, #2
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	330c      	adds	r3, #12
 800d92e:	2202      	movs	r2, #2
 800d930:	4619      	mov	r1, r3
 800d932:	6878      	ldr	r0, [r7, #4]
 800d934:	f000 f90c 	bl	800db50 <USBD_CtlSendData>
      break;
 800d938:	e004      	b.n	800d944 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d93a:	6839      	ldr	r1, [r7, #0]
 800d93c:	6878      	ldr	r0, [r7, #4]
 800d93e:	f000 f88a 	bl	800da56 <USBD_CtlError>
      break;
 800d942:	bf00      	nop
  }
}
 800d944:	bf00      	nop
 800d946:	3708      	adds	r7, #8
 800d948:	46bd      	mov	sp, r7
 800d94a:	bd80      	pop	{r7, pc}

0800d94c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b082      	sub	sp, #8
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
 800d954:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	885b      	ldrh	r3, [r3, #2]
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d107      	bne.n	800d96e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2201      	movs	r2, #1
 800d962:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f953 	bl	800dc12 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d96c:	e013      	b.n	800d996 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d96e:	683b      	ldr	r3, [r7, #0]
 800d970:	885b      	ldrh	r3, [r3, #2]
 800d972:	2b02      	cmp	r3, #2
 800d974:	d10b      	bne.n	800d98e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d976:	683b      	ldr	r3, [r7, #0]
 800d978:	889b      	ldrh	r3, [r3, #4]
 800d97a:	0a1b      	lsrs	r3, r3, #8
 800d97c:	b29b      	uxth	r3, r3
 800d97e:	b2da      	uxtb	r2, r3
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 f943 	bl	800dc12 <USBD_CtlSendStatus>
}
 800d98c:	e003      	b.n	800d996 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d98e:	6839      	ldr	r1, [r7, #0]
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f000 f860 	bl	800da56 <USBD_CtlError>
}
 800d996:	bf00      	nop
 800d998:	3708      	adds	r7, #8
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}

0800d99e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d99e:	b580      	push	{r7, lr}
 800d9a0:	b082      	sub	sp, #8
 800d9a2:	af00      	add	r7, sp, #0
 800d9a4:	6078      	str	r0, [r7, #4]
 800d9a6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	2b02      	cmp	r3, #2
 800d9b4:	d80b      	bhi.n	800d9ce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d9b6:	683b      	ldr	r3, [r7, #0]
 800d9b8:	885b      	ldrh	r3, [r3, #2]
 800d9ba:	2b01      	cmp	r3, #1
 800d9bc:	d10c      	bne.n	800d9d8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f923 	bl	800dc12 <USBD_CtlSendStatus>
      }
      break;
 800d9cc:	e004      	b.n	800d9d8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d9ce:	6839      	ldr	r1, [r7, #0]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f840 	bl	800da56 <USBD_CtlError>
      break;
 800d9d6:	e000      	b.n	800d9da <USBD_ClrFeature+0x3c>
      break;
 800d9d8:	bf00      	nop
  }
}
 800d9da:	bf00      	nop
 800d9dc:	3708      	adds	r7, #8
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	bd80      	pop	{r7, pc}

0800d9e2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d9e2:	b580      	push	{r7, lr}
 800d9e4:	b084      	sub	sp, #16
 800d9e6:	af00      	add	r7, sp, #0
 800d9e8:	6078      	str	r0, [r7, #4]
 800d9ea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d9ec:	683b      	ldr	r3, [r7, #0]
 800d9ee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	781a      	ldrb	r2, [r3, #0]
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	3301      	adds	r3, #1
 800d9fc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d9fe:	68fb      	ldr	r3, [r7, #12]
 800da00:	781a      	ldrb	r2, [r3, #0]
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	3301      	adds	r3, #1
 800da0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800da0c:	68f8      	ldr	r0, [r7, #12]
 800da0e:	f7ff fa3d 	bl	800ce8c <SWAPBYTE>
 800da12:	4603      	mov	r3, r0
 800da14:	461a      	mov	r2, r3
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	3301      	adds	r3, #1
 800da1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	3301      	adds	r3, #1
 800da24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800da26:	68f8      	ldr	r0, [r7, #12]
 800da28:	f7ff fa30 	bl	800ce8c <SWAPBYTE>
 800da2c:	4603      	mov	r3, r0
 800da2e:	461a      	mov	r2, r3
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	3301      	adds	r3, #1
 800da38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	3301      	adds	r3, #1
 800da3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800da40:	68f8      	ldr	r0, [r7, #12]
 800da42:	f7ff fa23 	bl	800ce8c <SWAPBYTE>
 800da46:	4603      	mov	r3, r0
 800da48:	461a      	mov	r2, r3
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	80da      	strh	r2, [r3, #6]
}
 800da4e:	bf00      	nop
 800da50:	3710      	adds	r7, #16
 800da52:	46bd      	mov	sp, r7
 800da54:	bd80      	pop	{r7, pc}

0800da56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da56:	b580      	push	{r7, lr}
 800da58:	b082      	sub	sp, #8
 800da5a:	af00      	add	r7, sp, #0
 800da5c:	6078      	str	r0, [r7, #4]
 800da5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800da60:	2180      	movs	r1, #128	@ 0x80
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f000 fd56 	bl	800e514 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800da68:	2100      	movs	r1, #0
 800da6a:	6878      	ldr	r0, [r7, #4]
 800da6c:	f000 fd52 	bl	800e514 <USBD_LL_StallEP>
}
 800da70:	bf00      	nop
 800da72:	3708      	adds	r7, #8
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b086      	sub	sp, #24
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	60f8      	str	r0, [r7, #12]
 800da80:	60b9      	str	r1, [r7, #8]
 800da82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800da84:	2300      	movs	r3, #0
 800da86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d042      	beq.n	800db14 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800da92:	6938      	ldr	r0, [r7, #16]
 800da94:	f000 f842 	bl	800db1c <USBD_GetLen>
 800da98:	4603      	mov	r3, r0
 800da9a:	3301      	adds	r3, #1
 800da9c:	005b      	lsls	r3, r3, #1
 800da9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800daa2:	d808      	bhi.n	800dab6 <USBD_GetString+0x3e>
 800daa4:	6938      	ldr	r0, [r7, #16]
 800daa6:	f000 f839 	bl	800db1c <USBD_GetLen>
 800daaa:	4603      	mov	r3, r0
 800daac:	3301      	adds	r3, #1
 800daae:	b29b      	uxth	r3, r3
 800dab0:	005b      	lsls	r3, r3, #1
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	e001      	b.n	800daba <USBD_GetString+0x42>
 800dab6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800dabe:	7dfb      	ldrb	r3, [r7, #23]
 800dac0:	68ba      	ldr	r2, [r7, #8]
 800dac2:	4413      	add	r3, r2
 800dac4:	687a      	ldr	r2, [r7, #4]
 800dac6:	7812      	ldrb	r2, [r2, #0]
 800dac8:	701a      	strb	r2, [r3, #0]
  idx++;
 800daca:	7dfb      	ldrb	r3, [r7, #23]
 800dacc:	3301      	adds	r3, #1
 800dace:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dad0:	7dfb      	ldrb	r3, [r7, #23]
 800dad2:	68ba      	ldr	r2, [r7, #8]
 800dad4:	4413      	add	r3, r2
 800dad6:	2203      	movs	r2, #3
 800dad8:	701a      	strb	r2, [r3, #0]
  idx++;
 800dada:	7dfb      	ldrb	r3, [r7, #23]
 800dadc:	3301      	adds	r3, #1
 800dade:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dae0:	e013      	b.n	800db0a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800dae2:	7dfb      	ldrb	r3, [r7, #23]
 800dae4:	68ba      	ldr	r2, [r7, #8]
 800dae6:	4413      	add	r3, r2
 800dae8:	693a      	ldr	r2, [r7, #16]
 800daea:	7812      	ldrb	r2, [r2, #0]
 800daec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800daee:	693b      	ldr	r3, [r7, #16]
 800daf0:	3301      	adds	r3, #1
 800daf2:	613b      	str	r3, [r7, #16]
    idx++;
 800daf4:	7dfb      	ldrb	r3, [r7, #23]
 800daf6:	3301      	adds	r3, #1
 800daf8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dafa:	7dfb      	ldrb	r3, [r7, #23]
 800dafc:	68ba      	ldr	r2, [r7, #8]
 800dafe:	4413      	add	r3, r2
 800db00:	2200      	movs	r2, #0
 800db02:	701a      	strb	r2, [r3, #0]
    idx++;
 800db04:	7dfb      	ldrb	r3, [r7, #23]
 800db06:	3301      	adds	r3, #1
 800db08:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800db0a:	693b      	ldr	r3, [r7, #16]
 800db0c:	781b      	ldrb	r3, [r3, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1e7      	bne.n	800dae2 <USBD_GetString+0x6a>
 800db12:	e000      	b.n	800db16 <USBD_GetString+0x9e>
    return;
 800db14:	bf00      	nop
  }
}
 800db16:	3718      	adds	r7, #24
 800db18:	46bd      	mov	sp, r7
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800db1c:	b480      	push	{r7}
 800db1e:	b085      	sub	sp, #20
 800db20:	af00      	add	r7, sp, #0
 800db22:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800db24:	2300      	movs	r3, #0
 800db26:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800db2c:	e005      	b.n	800db3a <USBD_GetLen+0x1e>
  {
    len++;
 800db2e:	7bfb      	ldrb	r3, [r7, #15]
 800db30:	3301      	adds	r3, #1
 800db32:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800db34:	68bb      	ldr	r3, [r7, #8]
 800db36:	3301      	adds	r3, #1
 800db38:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	2b00      	cmp	r3, #0
 800db40:	d1f5      	bne.n	800db2e <USBD_GetLen+0x12>
  }

  return len;
 800db42:	7bfb      	ldrb	r3, [r7, #15]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3714      	adds	r7, #20
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
 800db56:	60f8      	str	r0, [r7, #12]
 800db58:	60b9      	str	r1, [r7, #8]
 800db5a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	2202      	movs	r2, #2
 800db60:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	687a      	ldr	r2, [r7, #4]
 800db68:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	2100      	movs	r1, #0
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f000 fd52 	bl	800e626 <USBD_LL_Transmit>

  return USBD_OK;
 800db82:	2300      	movs	r3, #0
}
 800db84:	4618      	mov	r0, r3
 800db86:	3710      	adds	r7, #16
 800db88:	46bd      	mov	sp, r7
 800db8a:	bd80      	pop	{r7, pc}

0800db8c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	60b9      	str	r1, [r7, #8]
 800db96:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	68ba      	ldr	r2, [r7, #8]
 800db9c:	2100      	movs	r1, #0
 800db9e:	68f8      	ldr	r0, [r7, #12]
 800dba0:	f000 fd41 	bl	800e626 <USBD_LL_Transmit>

  return USBD_OK;
 800dba4:	2300      	movs	r3, #0
}
 800dba6:	4618      	mov	r0, r3
 800dba8:	3710      	adds	r7, #16
 800dbaa:	46bd      	mov	sp, r7
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b084      	sub	sp, #16
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	60f8      	str	r0, [r7, #12]
 800dbb6:	60b9      	str	r1, [r7, #8]
 800dbb8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	2203      	movs	r2, #3
 800dbbe:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	687a      	ldr	r2, [r7, #4]
 800dbc6:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	68ba      	ldr	r2, [r7, #8]
 800dbce:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	687a      	ldr	r2, [r7, #4]
 800dbd6:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	2100      	movs	r1, #0
 800dbe0:	68f8      	ldr	r0, [r7, #12]
 800dbe2:	f000 fd41 	bl	800e668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	3710      	adds	r7, #16
 800dbec:	46bd      	mov	sp, r7
 800dbee:	bd80      	pop	{r7, pc}

0800dbf0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dbf0:	b580      	push	{r7, lr}
 800dbf2:	b084      	sub	sp, #16
 800dbf4:	af00      	add	r7, sp, #0
 800dbf6:	60f8      	str	r0, [r7, #12]
 800dbf8:	60b9      	str	r1, [r7, #8]
 800dbfa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	68ba      	ldr	r2, [r7, #8]
 800dc00:	2100      	movs	r1, #0
 800dc02:	68f8      	ldr	r0, [r7, #12]
 800dc04:	f000 fd30 	bl	800e668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc08:	2300      	movs	r3, #0
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3710      	adds	r7, #16
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}

0800dc12 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc12:	b580      	push	{r7, lr}
 800dc14:	b082      	sub	sp, #8
 800dc16:	af00      	add	r7, sp, #0
 800dc18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2204      	movs	r2, #4
 800dc1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dc22:	2300      	movs	r3, #0
 800dc24:	2200      	movs	r2, #0
 800dc26:	2100      	movs	r1, #0
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f000 fcfc 	bl	800e626 <USBD_LL_Transmit>

  return USBD_OK;
 800dc2e:	2300      	movs	r3, #0
}
 800dc30:	4618      	mov	r0, r3
 800dc32:	3708      	adds	r7, #8
 800dc34:	46bd      	mov	sp, r7
 800dc36:	bd80      	pop	{r7, pc}

0800dc38 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dc38:	b580      	push	{r7, lr}
 800dc3a:	b082      	sub	sp, #8
 800dc3c:	af00      	add	r7, sp, #0
 800dc3e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2205      	movs	r2, #5
 800dc44:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dc48:	2300      	movs	r3, #0
 800dc4a:	2200      	movs	r2, #0
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	f000 fd0a 	bl	800e668 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3708      	adds	r7, #8
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}
	...

0800dc60 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dc64:	2200      	movs	r2, #0
 800dc66:	4912      	ldr	r1, [pc, #72]	@ (800dcb0 <MX_USB_DEVICE_Init+0x50>)
 800dc68:	4812      	ldr	r0, [pc, #72]	@ (800dcb4 <MX_USB_DEVICE_Init+0x54>)
 800dc6a:	f7fe fcd9 	bl	800c620 <USBD_Init>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d001      	beq.n	800dc78 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dc74:	f7f3 fd00 	bl	8001678 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dc78:	490f      	ldr	r1, [pc, #60]	@ (800dcb8 <MX_USB_DEVICE_Init+0x58>)
 800dc7a:	480e      	ldr	r0, [pc, #56]	@ (800dcb4 <MX_USB_DEVICE_Init+0x54>)
 800dc7c:	f7fe fd00 	bl	800c680 <USBD_RegisterClass>
 800dc80:	4603      	mov	r3, r0
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d001      	beq.n	800dc8a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800dc86:	f7f3 fcf7 	bl	8001678 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800dc8a:	490c      	ldr	r1, [pc, #48]	@ (800dcbc <MX_USB_DEVICE_Init+0x5c>)
 800dc8c:	4809      	ldr	r0, [pc, #36]	@ (800dcb4 <MX_USB_DEVICE_Init+0x54>)
 800dc8e:	f7fe fbf7 	bl	800c480 <USBD_CDC_RegisterInterface>
 800dc92:	4603      	mov	r3, r0
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dc98:	f7f3 fcee 	bl	8001678 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dc9c:	4805      	ldr	r0, [pc, #20]	@ (800dcb4 <MX_USB_DEVICE_Init+0x54>)
 800dc9e:	f7fe fd25 	bl	800c6ec <USBD_Start>
 800dca2:	4603      	mov	r3, r0
 800dca4:	2b00      	cmp	r3, #0
 800dca6:	d001      	beq.n	800dcac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dca8:	f7f3 fce6 	bl	8001678 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dcac:	bf00      	nop
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	200000e0 	.word	0x200000e0
 800dcb4:	20000b14 	.word	0x20000b14
 800dcb8:	20000044 	.word	0x20000044
 800dcbc:	200000cc 	.word	0x200000cc

0800dcc0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	4905      	ldr	r1, [pc, #20]	@ (800dcdc <CDC_Init_FS+0x1c>)
 800dcc8:	4805      	ldr	r0, [pc, #20]	@ (800dce0 <CDC_Init_FS+0x20>)
 800dcca:	f7fe fbf3 	bl	800c4b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dcce:	4905      	ldr	r1, [pc, #20]	@ (800dce4 <CDC_Init_FS+0x24>)
 800dcd0:	4803      	ldr	r0, [pc, #12]	@ (800dce0 <CDC_Init_FS+0x20>)
 800dcd2:	f7fe fc11 	bl	800c4f8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dcd6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dcd8:	4618      	mov	r0, r3
 800dcda:	bd80      	pop	{r7, pc}
 800dcdc:	20000ff0 	.word	0x20000ff0
 800dce0:	20000b14 	.word	0x20000b14
 800dce4:	20000df0 	.word	0x20000df0

0800dce8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dce8:	b480      	push	{r7}
 800dcea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dcec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	46bd      	mov	sp, r7
 800dcf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf6:	4770      	bx	lr

0800dcf8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dcf8:	b480      	push	{r7}
 800dcfa:	b083      	sub	sp, #12
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	4603      	mov	r3, r0
 800dd00:	6039      	str	r1, [r7, #0]
 800dd02:	71fb      	strb	r3, [r7, #7]
 800dd04:	4613      	mov	r3, r2
 800dd06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dd08:	79fb      	ldrb	r3, [r7, #7]
 800dd0a:	2b23      	cmp	r3, #35	@ 0x23
 800dd0c:	f200 8098 	bhi.w	800de40 <CDC_Control_FS+0x148>
 800dd10:	a201      	add	r2, pc, #4	@ (adr r2, 800dd18 <CDC_Control_FS+0x20>)
 800dd12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd16:	bf00      	nop
 800dd18:	0800de41 	.word	0x0800de41
 800dd1c:	0800de41 	.word	0x0800de41
 800dd20:	0800de41 	.word	0x0800de41
 800dd24:	0800de41 	.word	0x0800de41
 800dd28:	0800de41 	.word	0x0800de41
 800dd2c:	0800de41 	.word	0x0800de41
 800dd30:	0800de41 	.word	0x0800de41
 800dd34:	0800de41 	.word	0x0800de41
 800dd38:	0800de41 	.word	0x0800de41
 800dd3c:	0800de41 	.word	0x0800de41
 800dd40:	0800de41 	.word	0x0800de41
 800dd44:	0800de41 	.word	0x0800de41
 800dd48:	0800de41 	.word	0x0800de41
 800dd4c:	0800de41 	.word	0x0800de41
 800dd50:	0800de41 	.word	0x0800de41
 800dd54:	0800de41 	.word	0x0800de41
 800dd58:	0800de41 	.word	0x0800de41
 800dd5c:	0800de41 	.word	0x0800de41
 800dd60:	0800de41 	.word	0x0800de41
 800dd64:	0800de41 	.word	0x0800de41
 800dd68:	0800de41 	.word	0x0800de41
 800dd6c:	0800de41 	.word	0x0800de41
 800dd70:	0800de41 	.word	0x0800de41
 800dd74:	0800de41 	.word	0x0800de41
 800dd78:	0800de41 	.word	0x0800de41
 800dd7c:	0800de41 	.word	0x0800de41
 800dd80:	0800de41 	.word	0x0800de41
 800dd84:	0800de41 	.word	0x0800de41
 800dd88:	0800de41 	.word	0x0800de41
 800dd8c:	0800de41 	.word	0x0800de41
 800dd90:	0800de41 	.word	0x0800de41
 800dd94:	0800de41 	.word	0x0800de41
 800dd98:	0800dda9 	.word	0x0800dda9
 800dd9c:	0800dded 	.word	0x0800dded
 800dda0:	0800de41 	.word	0x0800de41
 800dda4:	0800de41 	.word	0x0800de41
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800dda8:	683b      	ldr	r3, [r7, #0]
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	461a      	mov	r2, r3
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	781b      	ldrb	r3, [r3, #0]
 800ddb4:	021b      	lsls	r3, r3, #8
 800ddb6:	431a      	orrs	r2, r3
 800ddb8:	683b      	ldr	r3, [r7, #0]
 800ddba:	3302      	adds	r3, #2
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	041b      	lsls	r3, r3, #16
 800ddc0:	431a      	orrs	r2, r3
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	3303      	adds	r3, #3
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	061b      	lsls	r3, r3, #24
 800ddca:	4313      	orrs	r3, r2
 800ddcc:	461a      	mov	r2, r3
 800ddce:	4b20      	ldr	r3, [pc, #128]	@ (800de50 <CDC_Control_FS+0x158>)
 800ddd0:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	791a      	ldrb	r2, [r3, #4]
 800ddd6:	4b1e      	ldr	r3, [pc, #120]	@ (800de50 <CDC_Control_FS+0x158>)
 800ddd8:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800ddda:	683b      	ldr	r3, [r7, #0]
 800dddc:	795a      	ldrb	r2, [r3, #5]
 800ddde:	4b1c      	ldr	r3, [pc, #112]	@ (800de50 <CDC_Control_FS+0x158>)
 800dde0:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800dde2:	683b      	ldr	r3, [r7, #0]
 800dde4:	799a      	ldrb	r2, [r3, #6]
 800dde6:	4b1a      	ldr	r3, [pc, #104]	@ (800de50 <CDC_Control_FS+0x158>)
 800dde8:	719a      	strb	r2, [r3, #6]
    break;
 800ddea:	e02a      	b.n	800de42 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800ddec:	4b18      	ldr	r3, [pc, #96]	@ (800de50 <CDC_Control_FS+0x158>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	b2da      	uxtb	r2, r3
 800ddf2:	683b      	ldr	r3, [r7, #0]
 800ddf4:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800ddf6:	4b16      	ldr	r3, [pc, #88]	@ (800de50 <CDC_Control_FS+0x158>)
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	0a1a      	lsrs	r2, r3, #8
 800ddfc:	683b      	ldr	r3, [r7, #0]
 800ddfe:	3301      	adds	r3, #1
 800de00:	b2d2      	uxtb	r2, r2
 800de02:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800de04:	4b12      	ldr	r3, [pc, #72]	@ (800de50 <CDC_Control_FS+0x158>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	0c1a      	lsrs	r2, r3, #16
 800de0a:	683b      	ldr	r3, [r7, #0]
 800de0c:	3302      	adds	r3, #2
 800de0e:	b2d2      	uxtb	r2, r2
 800de10:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800de12:	4b0f      	ldr	r3, [pc, #60]	@ (800de50 <CDC_Control_FS+0x158>)
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	0e1a      	lsrs	r2, r3, #24
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	3303      	adds	r3, #3
 800de1c:	b2d2      	uxtb	r2, r2
 800de1e:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800de20:	683b      	ldr	r3, [r7, #0]
 800de22:	3304      	adds	r3, #4
 800de24:	4a0a      	ldr	r2, [pc, #40]	@ (800de50 <CDC_Control_FS+0x158>)
 800de26:	7912      	ldrb	r2, [r2, #4]
 800de28:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	3305      	adds	r3, #5
 800de2e:	4a08      	ldr	r2, [pc, #32]	@ (800de50 <CDC_Control_FS+0x158>)
 800de30:	7952      	ldrb	r2, [r2, #5]
 800de32:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800de34:	683b      	ldr	r3, [r7, #0]
 800de36:	3306      	adds	r3, #6
 800de38:	4a05      	ldr	r2, [pc, #20]	@ (800de50 <CDC_Control_FS+0x158>)
 800de3a:	7992      	ldrb	r2, [r2, #6]
 800de3c:	701a      	strb	r2, [r3, #0]
    break;
 800de3e:	e000      	b.n	800de42 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800de40:	bf00      	nop
  }

  return (USBD_OK);
 800de42:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800de44:	4618      	mov	r0, r3
 800de46:	370c      	adds	r7, #12
 800de48:	46bd      	mov	sp, r7
 800de4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4e:	4770      	bx	lr
 800de50:	200000c4 	.word	0x200000c4

0800de54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b082      	sub	sp, #8
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800de5e:	4b0b      	ldr	r3, [pc, #44]	@ (800de8c <CDC_Receive_FS+0x38>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	2b00      	cmp	r3, #0
 800de64:	d006      	beq.n	800de74 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800de66:	4b09      	ldr	r3, [pc, #36]	@ (800de8c <CDC_Receive_FS+0x38>)
 800de68:	681b      	ldr	r3, [r3, #0]
 800de6a:	683a      	ldr	r2, [r7, #0]
 800de6c:	6812      	ldr	r2, [r2, #0]
 800de6e:	4611      	mov	r1, r2
 800de70:	6878      	ldr	r0, [r7, #4]
 800de72:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800de74:	6879      	ldr	r1, [r7, #4]
 800de76:	4806      	ldr	r0, [pc, #24]	@ (800de90 <CDC_Receive_FS+0x3c>)
 800de78:	f7fe fb3e 	bl	800c4f8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800de7c:	4804      	ldr	r0, [pc, #16]	@ (800de90 <CDC_Receive_FS+0x3c>)
 800de7e:	f7fe fb99 	bl	800c5b4 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800de82:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800de84:	4618      	mov	r0, r3
 800de86:	3708      	adds	r7, #8
 800de88:	46bd      	mov	sp, r7
 800de8a:	bd80      	pop	{r7, pc}
 800de8c:	200011f0 	.word	0x200011f0
 800de90:	20000b14 	.word	0x20000b14

0800de94 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b084      	sub	sp, #16
 800de98:	af00      	add	r7, sp, #0
 800de9a:	6078      	str	r0, [r7, #4]
 800de9c:	460b      	mov	r3, r1
 800de9e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dea0:	2300      	movs	r3, #0
 800dea2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dea4:	4b0d      	ldr	r3, [pc, #52]	@ (800dedc <CDC_Transmit_FS+0x48>)
 800dea6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800deaa:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d001      	beq.n	800deba <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800deb6:	2301      	movs	r3, #1
 800deb8:	e00b      	b.n	800ded2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800deba:	887b      	ldrh	r3, [r7, #2]
 800debc:	461a      	mov	r2, r3
 800debe:	6879      	ldr	r1, [r7, #4]
 800dec0:	4806      	ldr	r0, [pc, #24]	@ (800dedc <CDC_Transmit_FS+0x48>)
 800dec2:	f7fe faf7 	bl	800c4b4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dec6:	4805      	ldr	r0, [pc, #20]	@ (800dedc <CDC_Transmit_FS+0x48>)
 800dec8:	f7fe fb34 	bl	800c534 <USBD_CDC_TransmitPacket>
 800decc:	4603      	mov	r3, r0
 800dece:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ded0:	7bfb      	ldrb	r3, [r7, #15]
}
 800ded2:	4618      	mov	r0, r3
 800ded4:	3710      	adds	r7, #16
 800ded6:	46bd      	mov	sp, r7
 800ded8:	bd80      	pop	{r7, pc}
 800deda:	bf00      	nop
 800dedc:	20000b14 	.word	0x20000b14

0800dee0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dee0:	b480      	push	{r7}
 800dee2:	b087      	sub	sp, #28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	60f8      	str	r0, [r7, #12]
 800dee8:	60b9      	str	r1, [r7, #8]
 800deea:	4613      	mov	r3, r2
 800deec:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800deee:	2300      	movs	r3, #0
 800def0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800def2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800def6:	4618      	mov	r0, r3
 800def8:	371c      	adds	r7, #28
 800defa:	46bd      	mov	sp, r7
 800defc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df00:	4770      	bx	lr
	...

0800df04 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800df04:	b480      	push	{r7}
 800df06:	b083      	sub	sp, #12
 800df08:	af00      	add	r7, sp, #0
 800df0a:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800df0c:	4a04      	ldr	r2, [pc, #16]	@ (800df20 <CDC_Attach_Rx+0x1c>)
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6013      	str	r3, [r2, #0]
}
 800df12:	bf00      	nop
 800df14:	370c      	adds	r7, #12
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr
 800df1e:	bf00      	nop
 800df20:	200011f0 	.word	0x200011f0

0800df24 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df24:	b480      	push	{r7}
 800df26:	b083      	sub	sp, #12
 800df28:	af00      	add	r7, sp, #0
 800df2a:	4603      	mov	r3, r0
 800df2c:	6039      	str	r1, [r7, #0]
 800df2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800df30:	683b      	ldr	r3, [r7, #0]
 800df32:	2212      	movs	r2, #18
 800df34:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800df36:	4b03      	ldr	r3, [pc, #12]	@ (800df44 <USBD_FS_DeviceDescriptor+0x20>)
}
 800df38:	4618      	mov	r0, r3
 800df3a:	370c      	adds	r7, #12
 800df3c:	46bd      	mov	sp, r7
 800df3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df42:	4770      	bx	lr
 800df44:	200000fc 	.word	0x200000fc

0800df48 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df48:	b480      	push	{r7}
 800df4a:	b083      	sub	sp, #12
 800df4c:	af00      	add	r7, sp, #0
 800df4e:	4603      	mov	r3, r0
 800df50:	6039      	str	r1, [r7, #0]
 800df52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	2204      	movs	r2, #4
 800df58:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800df5a:	4b03      	ldr	r3, [pc, #12]	@ (800df68 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800df5c:	4618      	mov	r0, r3
 800df5e:	370c      	adds	r7, #12
 800df60:	46bd      	mov	sp, r7
 800df62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df66:	4770      	bx	lr
 800df68:	20000110 	.word	0x20000110

0800df6c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df6c:	b580      	push	{r7, lr}
 800df6e:	b082      	sub	sp, #8
 800df70:	af00      	add	r7, sp, #0
 800df72:	4603      	mov	r3, r0
 800df74:	6039      	str	r1, [r7, #0]
 800df76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800df78:	79fb      	ldrb	r3, [r7, #7]
 800df7a:	2b00      	cmp	r3, #0
 800df7c:	d105      	bne.n	800df8a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800df7e:	683a      	ldr	r2, [r7, #0]
 800df80:	4907      	ldr	r1, [pc, #28]	@ (800dfa0 <USBD_FS_ProductStrDescriptor+0x34>)
 800df82:	4808      	ldr	r0, [pc, #32]	@ (800dfa4 <USBD_FS_ProductStrDescriptor+0x38>)
 800df84:	f7ff fd78 	bl	800da78 <USBD_GetString>
 800df88:	e004      	b.n	800df94 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800df8a:	683a      	ldr	r2, [r7, #0]
 800df8c:	4904      	ldr	r1, [pc, #16]	@ (800dfa0 <USBD_FS_ProductStrDescriptor+0x34>)
 800df8e:	4805      	ldr	r0, [pc, #20]	@ (800dfa4 <USBD_FS_ProductStrDescriptor+0x38>)
 800df90:	f7ff fd72 	bl	800da78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df94:	4b02      	ldr	r3, [pc, #8]	@ (800dfa0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800df96:	4618      	mov	r0, r3
 800df98:	3708      	adds	r7, #8
 800df9a:	46bd      	mov	sp, r7
 800df9c:	bd80      	pop	{r7, pc}
 800df9e:	bf00      	nop
 800dfa0:	200011f4 	.word	0x200011f4
 800dfa4:	0800e7c8 	.word	0x0800e7c8

0800dfa8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
 800dfae:	4603      	mov	r3, r0
 800dfb0:	6039      	str	r1, [r7, #0]
 800dfb2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	4904      	ldr	r1, [pc, #16]	@ (800dfc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800dfb8:	4804      	ldr	r0, [pc, #16]	@ (800dfcc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800dfba:	f7ff fd5d 	bl	800da78 <USBD_GetString>
  return USBD_StrDesc;
 800dfbe:	4b02      	ldr	r3, [pc, #8]	@ (800dfc8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3708      	adds	r7, #8
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}
 800dfc8:	200011f4 	.word	0x200011f4
 800dfcc:	0800e7e0 	.word	0x0800e7e0

0800dfd0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	6039      	str	r1, [r7, #0]
 800dfda:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	221a      	movs	r2, #26
 800dfe0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dfe2:	f000 f843 	bl	800e06c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dfe6:	4b02      	ldr	r3, [pc, #8]	@ (800dff0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dfe8:	4618      	mov	r0, r3
 800dfea:	3708      	adds	r7, #8
 800dfec:	46bd      	mov	sp, r7
 800dfee:	bd80      	pop	{r7, pc}
 800dff0:	20000114 	.word	0x20000114

0800dff4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	4603      	mov	r3, r0
 800dffc:	6039      	str	r1, [r7, #0]
 800dffe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e000:	79fb      	ldrb	r3, [r7, #7]
 800e002:	2b00      	cmp	r3, #0
 800e004:	d105      	bne.n	800e012 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e006:	683a      	ldr	r2, [r7, #0]
 800e008:	4907      	ldr	r1, [pc, #28]	@ (800e028 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e00a:	4808      	ldr	r0, [pc, #32]	@ (800e02c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e00c:	f7ff fd34 	bl	800da78 <USBD_GetString>
 800e010:	e004      	b.n	800e01c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e012:	683a      	ldr	r2, [r7, #0]
 800e014:	4904      	ldr	r1, [pc, #16]	@ (800e028 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e016:	4805      	ldr	r0, [pc, #20]	@ (800e02c <USBD_FS_ConfigStrDescriptor+0x38>)
 800e018:	f7ff fd2e 	bl	800da78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e01c:	4b02      	ldr	r3, [pc, #8]	@ (800e028 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e01e:	4618      	mov	r0, r3
 800e020:	3708      	adds	r7, #8
 800e022:	46bd      	mov	sp, r7
 800e024:	bd80      	pop	{r7, pc}
 800e026:	bf00      	nop
 800e028:	200011f4 	.word	0x200011f4
 800e02c:	0800e7f4 	.word	0x0800e7f4

0800e030 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b082      	sub	sp, #8
 800e034:	af00      	add	r7, sp, #0
 800e036:	4603      	mov	r3, r0
 800e038:	6039      	str	r1, [r7, #0]
 800e03a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e03c:	79fb      	ldrb	r3, [r7, #7]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d105      	bne.n	800e04e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e042:	683a      	ldr	r2, [r7, #0]
 800e044:	4907      	ldr	r1, [pc, #28]	@ (800e064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e046:	4808      	ldr	r0, [pc, #32]	@ (800e068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e048:	f7ff fd16 	bl	800da78 <USBD_GetString>
 800e04c:	e004      	b.n	800e058 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e04e:	683a      	ldr	r2, [r7, #0]
 800e050:	4904      	ldr	r1, [pc, #16]	@ (800e064 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e052:	4805      	ldr	r0, [pc, #20]	@ (800e068 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e054:	f7ff fd10 	bl	800da78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e058:	4b02      	ldr	r3, [pc, #8]	@ (800e064 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e05a:	4618      	mov	r0, r3
 800e05c:	3708      	adds	r7, #8
 800e05e:	46bd      	mov	sp, r7
 800e060:	bd80      	pop	{r7, pc}
 800e062:	bf00      	nop
 800e064:	200011f4 	.word	0x200011f4
 800e068:	0800e800 	.word	0x0800e800

0800e06c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b084      	sub	sp, #16
 800e070:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e072:	4b0f      	ldr	r3, [pc, #60]	@ (800e0b0 <Get_SerialNum+0x44>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e078:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b4 <Get_SerialNum+0x48>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e07e:	4b0e      	ldr	r3, [pc, #56]	@ (800e0b8 <Get_SerialNum+0x4c>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e084:	68fa      	ldr	r2, [r7, #12]
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	4413      	add	r3, r2
 800e08a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d009      	beq.n	800e0a6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e092:	2208      	movs	r2, #8
 800e094:	4909      	ldr	r1, [pc, #36]	@ (800e0bc <Get_SerialNum+0x50>)
 800e096:	68f8      	ldr	r0, [r7, #12]
 800e098:	f000 f814 	bl	800e0c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e09c:	2204      	movs	r2, #4
 800e09e:	4908      	ldr	r1, [pc, #32]	@ (800e0c0 <Get_SerialNum+0x54>)
 800e0a0:	68b8      	ldr	r0, [r7, #8]
 800e0a2:	f000 f80f 	bl	800e0c4 <IntToUnicode>
  }
}
 800e0a6:	bf00      	nop
 800e0a8:	3710      	adds	r7, #16
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	1fff7a10 	.word	0x1fff7a10
 800e0b4:	1fff7a14 	.word	0x1fff7a14
 800e0b8:	1fff7a18 	.word	0x1fff7a18
 800e0bc:	20000116 	.word	0x20000116
 800e0c0:	20000126 	.word	0x20000126

0800e0c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e0c4:	b480      	push	{r7}
 800e0c6:	b087      	sub	sp, #28
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	60f8      	str	r0, [r7, #12]
 800e0cc:	60b9      	str	r1, [r7, #8]
 800e0ce:	4613      	mov	r3, r2
 800e0d0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	75fb      	strb	r3, [r7, #23]
 800e0da:	e027      	b.n	800e12c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e0dc:	68fb      	ldr	r3, [r7, #12]
 800e0de:	0f1b      	lsrs	r3, r3, #28
 800e0e0:	2b09      	cmp	r3, #9
 800e0e2:	d80b      	bhi.n	800e0fc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	0f1b      	lsrs	r3, r3, #28
 800e0e8:	b2da      	uxtb	r2, r3
 800e0ea:	7dfb      	ldrb	r3, [r7, #23]
 800e0ec:	005b      	lsls	r3, r3, #1
 800e0ee:	4619      	mov	r1, r3
 800e0f0:	68bb      	ldr	r3, [r7, #8]
 800e0f2:	440b      	add	r3, r1
 800e0f4:	3230      	adds	r2, #48	@ 0x30
 800e0f6:	b2d2      	uxtb	r2, r2
 800e0f8:	701a      	strb	r2, [r3, #0]
 800e0fa:	e00a      	b.n	800e112 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	0f1b      	lsrs	r3, r3, #28
 800e100:	b2da      	uxtb	r2, r3
 800e102:	7dfb      	ldrb	r3, [r7, #23]
 800e104:	005b      	lsls	r3, r3, #1
 800e106:	4619      	mov	r1, r3
 800e108:	68bb      	ldr	r3, [r7, #8]
 800e10a:	440b      	add	r3, r1
 800e10c:	3237      	adds	r2, #55	@ 0x37
 800e10e:	b2d2      	uxtb	r2, r2
 800e110:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	011b      	lsls	r3, r3, #4
 800e116:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e118:	7dfb      	ldrb	r3, [r7, #23]
 800e11a:	005b      	lsls	r3, r3, #1
 800e11c:	3301      	adds	r3, #1
 800e11e:	68ba      	ldr	r2, [r7, #8]
 800e120:	4413      	add	r3, r2
 800e122:	2200      	movs	r2, #0
 800e124:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e126:	7dfb      	ldrb	r3, [r7, #23]
 800e128:	3301      	adds	r3, #1
 800e12a:	75fb      	strb	r3, [r7, #23]
 800e12c:	7dfa      	ldrb	r2, [r7, #23]
 800e12e:	79fb      	ldrb	r3, [r7, #7]
 800e130:	429a      	cmp	r2, r3
 800e132:	d3d3      	bcc.n	800e0dc <IntToUnicode+0x18>
  }
}
 800e134:	bf00      	nop
 800e136:	bf00      	nop
 800e138:	371c      	adds	r7, #28
 800e13a:	46bd      	mov	sp, r7
 800e13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e140:	4770      	bx	lr
	...

0800e144 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e144:	b580      	push	{r7, lr}
 800e146:	b08a      	sub	sp, #40	@ 0x28
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e14c:	f107 0314 	add.w	r3, r7, #20
 800e150:	2200      	movs	r2, #0
 800e152:	601a      	str	r2, [r3, #0]
 800e154:	605a      	str	r2, [r3, #4]
 800e156:	609a      	str	r2, [r3, #8]
 800e158:	60da      	str	r2, [r3, #12]
 800e15a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	681b      	ldr	r3, [r3, #0]
 800e160:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e164:	d13a      	bne.n	800e1dc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e166:	2300      	movs	r3, #0
 800e168:	613b      	str	r3, [r7, #16]
 800e16a:	4b1e      	ldr	r3, [pc, #120]	@ (800e1e4 <HAL_PCD_MspInit+0xa0>)
 800e16c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e16e:	4a1d      	ldr	r2, [pc, #116]	@ (800e1e4 <HAL_PCD_MspInit+0xa0>)
 800e170:	f043 0301 	orr.w	r3, r3, #1
 800e174:	6313      	str	r3, [r2, #48]	@ 0x30
 800e176:	4b1b      	ldr	r3, [pc, #108]	@ (800e1e4 <HAL_PCD_MspInit+0xa0>)
 800e178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e17a:	f003 0301 	and.w	r3, r3, #1
 800e17e:	613b      	str	r3, [r7, #16]
 800e180:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e182:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e186:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e188:	2302      	movs	r3, #2
 800e18a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e18c:	2300      	movs	r3, #0
 800e18e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e190:	2303      	movs	r3, #3
 800e192:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e194:	230a      	movs	r3, #10
 800e196:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e198:	f107 0314 	add.w	r3, r7, #20
 800e19c:	4619      	mov	r1, r3
 800e19e:	4812      	ldr	r0, [pc, #72]	@ (800e1e8 <HAL_PCD_MspInit+0xa4>)
 800e1a0:	f7f5 fc8c 	bl	8003abc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e1a4:	4b0f      	ldr	r3, [pc, #60]	@ (800e1e4 <HAL_PCD_MspInit+0xa0>)
 800e1a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e1a8:	4a0e      	ldr	r2, [pc, #56]	@ (800e1e4 <HAL_PCD_MspInit+0xa0>)
 800e1aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e1ae:	6353      	str	r3, [r2, #52]	@ 0x34
 800e1b0:	2300      	movs	r3, #0
 800e1b2:	60fb      	str	r3, [r7, #12]
 800e1b4:	4b0b      	ldr	r3, [pc, #44]	@ (800e1e4 <HAL_PCD_MspInit+0xa0>)
 800e1b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1b8:	4a0a      	ldr	r2, [pc, #40]	@ (800e1e4 <HAL_PCD_MspInit+0xa0>)
 800e1ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e1be:	6453      	str	r3, [r2, #68]	@ 0x44
 800e1c0:	4b08      	ldr	r3, [pc, #32]	@ (800e1e4 <HAL_PCD_MspInit+0xa0>)
 800e1c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e1c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e1c8:	60fb      	str	r3, [r7, #12]
 800e1ca:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	2100      	movs	r1, #0
 800e1d0:	2043      	movs	r0, #67	@ 0x43
 800e1d2:	f7f5 f890 	bl	80032f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e1d6:	2043      	movs	r0, #67	@ 0x43
 800e1d8:	f7f5 f8a9 	bl	800332e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e1dc:	bf00      	nop
 800e1de:	3728      	adds	r7, #40	@ 0x28
 800e1e0:	46bd      	mov	sp, r7
 800e1e2:	bd80      	pop	{r7, pc}
 800e1e4:	40023800 	.word	0x40023800
 800e1e8:	40020000 	.word	0x40020000

0800e1ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b082      	sub	sp, #8
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e200:	4619      	mov	r1, r3
 800e202:	4610      	mov	r0, r2
 800e204:	f7fe fabf 	bl	800c786 <USBD_LL_SetupStage>
}
 800e208:	bf00      	nop
 800e20a:	3708      	adds	r7, #8
 800e20c:	46bd      	mov	sp, r7
 800e20e:	bd80      	pop	{r7, pc}

0800e210 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	460b      	mov	r3, r1
 800e21a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e222:	78fa      	ldrb	r2, [r7, #3]
 800e224:	6879      	ldr	r1, [r7, #4]
 800e226:	4613      	mov	r3, r2
 800e228:	00db      	lsls	r3, r3, #3
 800e22a:	4413      	add	r3, r2
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	440b      	add	r3, r1
 800e230:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e234:	681a      	ldr	r2, [r3, #0]
 800e236:	78fb      	ldrb	r3, [r7, #3]
 800e238:	4619      	mov	r1, r3
 800e23a:	f7fe faf9 	bl	800c830 <USBD_LL_DataOutStage>
}
 800e23e:	bf00      	nop
 800e240:	3708      	adds	r7, #8
 800e242:	46bd      	mov	sp, r7
 800e244:	bd80      	pop	{r7, pc}

0800e246 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e246:	b580      	push	{r7, lr}
 800e248:	b082      	sub	sp, #8
 800e24a:	af00      	add	r7, sp, #0
 800e24c:	6078      	str	r0, [r7, #4]
 800e24e:	460b      	mov	r3, r1
 800e250:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e258:	78fa      	ldrb	r2, [r7, #3]
 800e25a:	6879      	ldr	r1, [r7, #4]
 800e25c:	4613      	mov	r3, r2
 800e25e:	00db      	lsls	r3, r3, #3
 800e260:	4413      	add	r3, r2
 800e262:	009b      	lsls	r3, r3, #2
 800e264:	440b      	add	r3, r1
 800e266:	3320      	adds	r3, #32
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	78fb      	ldrb	r3, [r7, #3]
 800e26c:	4619      	mov	r1, r3
 800e26e:	f7fe fb9b 	bl	800c9a8 <USBD_LL_DataInStage>
}
 800e272:	bf00      	nop
 800e274:	3708      	adds	r7, #8
 800e276:	46bd      	mov	sp, r7
 800e278:	bd80      	pop	{r7, pc}

0800e27a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e27a:	b580      	push	{r7, lr}
 800e27c:	b082      	sub	sp, #8
 800e27e:	af00      	add	r7, sp, #0
 800e280:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e288:	4618      	mov	r0, r3
 800e28a:	f7fe fcdf 	bl	800cc4c <USBD_LL_SOF>
}
 800e28e:	bf00      	nop
 800e290:	3708      	adds	r7, #8
 800e292:	46bd      	mov	sp, r7
 800e294:	bd80      	pop	{r7, pc}

0800e296 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e296:	b580      	push	{r7, lr}
 800e298:	b084      	sub	sp, #16
 800e29a:	af00      	add	r7, sp, #0
 800e29c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e29e:	2301      	movs	r3, #1
 800e2a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	79db      	ldrb	r3, [r3, #7]
 800e2a6:	2b02      	cmp	r3, #2
 800e2a8:	d001      	beq.n	800e2ae <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e2aa:	f7f3 f9e5 	bl	8001678 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e2b4:	7bfa      	ldrb	r2, [r7, #15]
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fe fc83 	bl	800cbc4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f7fe fc2a 	bl	800cb1e <USBD_LL_Reset>
}
 800e2ca:	bf00      	nop
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
	...

0800e2d4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e2e2:	4618      	mov	r0, r3
 800e2e4:	f7fe fc7e 	bl	800cbe4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	681b      	ldr	r3, [r3, #0]
 800e2ec:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	687a      	ldr	r2, [r7, #4]
 800e2f4:	6812      	ldr	r2, [r2, #0]
 800e2f6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e2fa:	f043 0301 	orr.w	r3, r3, #1
 800e2fe:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	7adb      	ldrb	r3, [r3, #11]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d005      	beq.n	800e314 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e308:	4b04      	ldr	r3, [pc, #16]	@ (800e31c <HAL_PCD_SuspendCallback+0x48>)
 800e30a:	691b      	ldr	r3, [r3, #16]
 800e30c:	4a03      	ldr	r2, [pc, #12]	@ (800e31c <HAL_PCD_SuspendCallback+0x48>)
 800e30e:	f043 0306 	orr.w	r3, r3, #6
 800e312:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e314:	bf00      	nop
 800e316:	3708      	adds	r7, #8
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	e000ed00 	.word	0xe000ed00

0800e320 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b082      	sub	sp, #8
 800e324:	af00      	add	r7, sp, #0
 800e326:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e32e:	4618      	mov	r0, r3
 800e330:	f7fe fc74 	bl	800cc1c <USBD_LL_Resume>
}
 800e334:	bf00      	nop
 800e336:	3708      	adds	r7, #8
 800e338:	46bd      	mov	sp, r7
 800e33a:	bd80      	pop	{r7, pc}

0800e33c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b082      	sub	sp, #8
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	460b      	mov	r3, r1
 800e346:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e34e:	78fa      	ldrb	r2, [r7, #3]
 800e350:	4611      	mov	r1, r2
 800e352:	4618      	mov	r0, r3
 800e354:	f7fe fccc 	bl	800ccf0 <USBD_LL_IsoOUTIncomplete>
}
 800e358:	bf00      	nop
 800e35a:	3708      	adds	r7, #8
 800e35c:	46bd      	mov	sp, r7
 800e35e:	bd80      	pop	{r7, pc}

0800e360 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	460b      	mov	r3, r1
 800e36a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e372:	78fa      	ldrb	r2, [r7, #3]
 800e374:	4611      	mov	r1, r2
 800e376:	4618      	mov	r0, r3
 800e378:	f7fe fc88 	bl	800cc8c <USBD_LL_IsoINIncomplete>
}
 800e37c:	bf00      	nop
 800e37e:	3708      	adds	r7, #8
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e392:	4618      	mov	r0, r3
 800e394:	f7fe fcde 	bl	800cd54 <USBD_LL_DevConnected>
}
 800e398:	bf00      	nop
 800e39a:	3708      	adds	r7, #8
 800e39c:	46bd      	mov	sp, r7
 800e39e:	bd80      	pop	{r7, pc}

0800e3a0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3a0:	b580      	push	{r7, lr}
 800e3a2:	b082      	sub	sp, #8
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e3ae:	4618      	mov	r0, r3
 800e3b0:	f7fe fcdb 	bl	800cd6a <USBD_LL_DevDisconnected>
}
 800e3b4:	bf00      	nop
 800e3b6:	3708      	adds	r7, #8
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	bd80      	pop	{r7, pc}

0800e3bc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b082      	sub	sp, #8
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	781b      	ldrb	r3, [r3, #0]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d13c      	bne.n	800e446 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e3cc:	4a20      	ldr	r2, [pc, #128]	@ (800e450 <USBD_LL_Init+0x94>)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	4a1e      	ldr	r2, [pc, #120]	@ (800e450 <USBD_LL_Init+0x94>)
 800e3d8:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e3dc:	4b1c      	ldr	r3, [pc, #112]	@ (800e450 <USBD_LL_Init+0x94>)
 800e3de:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e3e2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e3e4:	4b1a      	ldr	r3, [pc, #104]	@ (800e450 <USBD_LL_Init+0x94>)
 800e3e6:	2204      	movs	r2, #4
 800e3e8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e3ea:	4b19      	ldr	r3, [pc, #100]	@ (800e450 <USBD_LL_Init+0x94>)
 800e3ec:	2202      	movs	r2, #2
 800e3ee:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e3f0:	4b17      	ldr	r3, [pc, #92]	@ (800e450 <USBD_LL_Init+0x94>)
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e3f6:	4b16      	ldr	r3, [pc, #88]	@ (800e450 <USBD_LL_Init+0x94>)
 800e3f8:	2202      	movs	r2, #2
 800e3fa:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e3fc:	4b14      	ldr	r3, [pc, #80]	@ (800e450 <USBD_LL_Init+0x94>)
 800e3fe:	2200      	movs	r2, #0
 800e400:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e402:	4b13      	ldr	r3, [pc, #76]	@ (800e450 <USBD_LL_Init+0x94>)
 800e404:	2200      	movs	r2, #0
 800e406:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e408:	4b11      	ldr	r3, [pc, #68]	@ (800e450 <USBD_LL_Init+0x94>)
 800e40a:	2200      	movs	r2, #0
 800e40c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e40e:	4b10      	ldr	r3, [pc, #64]	@ (800e450 <USBD_LL_Init+0x94>)
 800e410:	2200      	movs	r2, #0
 800e412:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e414:	4b0e      	ldr	r3, [pc, #56]	@ (800e450 <USBD_LL_Init+0x94>)
 800e416:	2200      	movs	r2, #0
 800e418:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e41a:	480d      	ldr	r0, [pc, #52]	@ (800e450 <USBD_LL_Init+0x94>)
 800e41c:	f7f8 fb9e 	bl	8006b5c <HAL_PCD_Init>
 800e420:	4603      	mov	r3, r0
 800e422:	2b00      	cmp	r3, #0
 800e424:	d001      	beq.n	800e42a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e426:	f7f3 f927 	bl	8001678 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e42a:	2180      	movs	r1, #128	@ 0x80
 800e42c:	4808      	ldr	r0, [pc, #32]	@ (800e450 <USBD_LL_Init+0x94>)
 800e42e:	f7f9 fdca 	bl	8007fc6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e432:	2240      	movs	r2, #64	@ 0x40
 800e434:	2100      	movs	r1, #0
 800e436:	4806      	ldr	r0, [pc, #24]	@ (800e450 <USBD_LL_Init+0x94>)
 800e438:	f7f9 fd7e 	bl	8007f38 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e43c:	2280      	movs	r2, #128	@ 0x80
 800e43e:	2101      	movs	r1, #1
 800e440:	4803      	ldr	r0, [pc, #12]	@ (800e450 <USBD_LL_Init+0x94>)
 800e442:	f7f9 fd79 	bl	8007f38 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e446:	2300      	movs	r3, #0
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3708      	adds	r7, #8
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}
 800e450:	200013f4 	.word	0x200013f4

0800e454 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b084      	sub	sp, #16
 800e458:	af00      	add	r7, sp, #0
 800e45a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e45c:	2300      	movs	r3, #0
 800e45e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e460:	2300      	movs	r3, #0
 800e462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e46a:	4618      	mov	r0, r3
 800e46c:	f7f8 fc85 	bl	8006d7a <HAL_PCD_Start>
 800e470:	4603      	mov	r3, r0
 800e472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e474:	7bfb      	ldrb	r3, [r7, #15]
 800e476:	4618      	mov	r0, r3
 800e478:	f000 f942 	bl	800e700 <USBD_Get_USB_Status>
 800e47c:	4603      	mov	r3, r0
 800e47e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e480:	7bbb      	ldrb	r3, [r7, #14]
}
 800e482:	4618      	mov	r0, r3
 800e484:	3710      	adds	r7, #16
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}

0800e48a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e48a:	b580      	push	{r7, lr}
 800e48c:	b084      	sub	sp, #16
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
 800e492:	4608      	mov	r0, r1
 800e494:	4611      	mov	r1, r2
 800e496:	461a      	mov	r2, r3
 800e498:	4603      	mov	r3, r0
 800e49a:	70fb      	strb	r3, [r7, #3]
 800e49c:	460b      	mov	r3, r1
 800e49e:	70bb      	strb	r3, [r7, #2]
 800e4a0:	4613      	mov	r3, r2
 800e4a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4a8:	2300      	movs	r3, #0
 800e4aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e4b2:	78bb      	ldrb	r3, [r7, #2]
 800e4b4:	883a      	ldrh	r2, [r7, #0]
 800e4b6:	78f9      	ldrb	r1, [r7, #3]
 800e4b8:	f7f9 f959 	bl	800776e <HAL_PCD_EP_Open>
 800e4bc:	4603      	mov	r3, r0
 800e4be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4c0:	7bfb      	ldrb	r3, [r7, #15]
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	f000 f91c 	bl	800e700 <USBD_Get_USB_Status>
 800e4c8:	4603      	mov	r3, r0
 800e4ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4cc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	3710      	adds	r7, #16
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd80      	pop	{r7, pc}

0800e4d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b084      	sub	sp, #16
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	6078      	str	r0, [r7, #4]
 800e4de:	460b      	mov	r3, r1
 800e4e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4e2:	2300      	movs	r3, #0
 800e4e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4f0:	78fa      	ldrb	r2, [r7, #3]
 800e4f2:	4611      	mov	r1, r2
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7f9 f9a4 	bl	8007842 <HAL_PCD_EP_Close>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4fe:	7bfb      	ldrb	r3, [r7, #15]
 800e500:	4618      	mov	r0, r3
 800e502:	f000 f8fd 	bl	800e700 <USBD_Get_USB_Status>
 800e506:	4603      	mov	r3, r0
 800e508:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e50a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3710      	adds	r7, #16
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b084      	sub	sp, #16
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	460b      	mov	r3, r1
 800e51e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e520:	2300      	movs	r3, #0
 800e522:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e524:	2300      	movs	r3, #0
 800e526:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e52e:	78fa      	ldrb	r2, [r7, #3]
 800e530:	4611      	mov	r1, r2
 800e532:	4618      	mov	r0, r3
 800e534:	f7f9 fa5c 	bl	80079f0 <HAL_PCD_EP_SetStall>
 800e538:	4603      	mov	r3, r0
 800e53a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e53c:	7bfb      	ldrb	r3, [r7, #15]
 800e53e:	4618      	mov	r0, r3
 800e540:	f000 f8de 	bl	800e700 <USBD_Get_USB_Status>
 800e544:	4603      	mov	r3, r0
 800e546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e548:	7bbb      	ldrb	r3, [r7, #14]
}
 800e54a:	4618      	mov	r0, r3
 800e54c:	3710      	adds	r7, #16
 800e54e:	46bd      	mov	sp, r7
 800e550:	bd80      	pop	{r7, pc}

0800e552 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e552:	b580      	push	{r7, lr}
 800e554:	b084      	sub	sp, #16
 800e556:	af00      	add	r7, sp, #0
 800e558:	6078      	str	r0, [r7, #4]
 800e55a:	460b      	mov	r3, r1
 800e55c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e55e:	2300      	movs	r3, #0
 800e560:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e562:	2300      	movs	r3, #0
 800e564:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e56c:	78fa      	ldrb	r2, [r7, #3]
 800e56e:	4611      	mov	r1, r2
 800e570:	4618      	mov	r0, r3
 800e572:	f7f9 faa0 	bl	8007ab6 <HAL_PCD_EP_ClrStall>
 800e576:	4603      	mov	r3, r0
 800e578:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e57a:	7bfb      	ldrb	r3, [r7, #15]
 800e57c:	4618      	mov	r0, r3
 800e57e:	f000 f8bf 	bl	800e700 <USBD_Get_USB_Status>
 800e582:	4603      	mov	r3, r0
 800e584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e586:	7bbb      	ldrb	r3, [r7, #14]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3710      	adds	r7, #16
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e590:	b480      	push	{r7}
 800e592:	b085      	sub	sp, #20
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
 800e598:	460b      	mov	r3, r1
 800e59a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5a2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e5a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	da0b      	bge.n	800e5c4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e5ac:	78fb      	ldrb	r3, [r7, #3]
 800e5ae:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e5b2:	68f9      	ldr	r1, [r7, #12]
 800e5b4:	4613      	mov	r3, r2
 800e5b6:	00db      	lsls	r3, r3, #3
 800e5b8:	4413      	add	r3, r2
 800e5ba:	009b      	lsls	r3, r3, #2
 800e5bc:	440b      	add	r3, r1
 800e5be:	3316      	adds	r3, #22
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	e00b      	b.n	800e5dc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e5c4:	78fb      	ldrb	r3, [r7, #3]
 800e5c6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e5ca:	68f9      	ldr	r1, [r7, #12]
 800e5cc:	4613      	mov	r3, r2
 800e5ce:	00db      	lsls	r3, r3, #3
 800e5d0:	4413      	add	r3, r2
 800e5d2:	009b      	lsls	r3, r3, #2
 800e5d4:	440b      	add	r3, r1
 800e5d6:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e5da:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	3714      	adds	r7, #20
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e5e8:	b580      	push	{r7, lr}
 800e5ea:	b084      	sub	sp, #16
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5f4:	2300      	movs	r3, #0
 800e5f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e602:	78fa      	ldrb	r2, [r7, #3]
 800e604:	4611      	mov	r1, r2
 800e606:	4618      	mov	r0, r3
 800e608:	f7f9 f88d 	bl	8007726 <HAL_PCD_SetAddress>
 800e60c:	4603      	mov	r3, r0
 800e60e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e610:	7bfb      	ldrb	r3, [r7, #15]
 800e612:	4618      	mov	r0, r3
 800e614:	f000 f874 	bl	800e700 <USBD_Get_USB_Status>
 800e618:	4603      	mov	r3, r0
 800e61a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e61c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e61e:	4618      	mov	r0, r3
 800e620:	3710      	adds	r7, #16
 800e622:	46bd      	mov	sp, r7
 800e624:	bd80      	pop	{r7, pc}

0800e626 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e626:	b580      	push	{r7, lr}
 800e628:	b086      	sub	sp, #24
 800e62a:	af00      	add	r7, sp, #0
 800e62c:	60f8      	str	r0, [r7, #12]
 800e62e:	607a      	str	r2, [r7, #4]
 800e630:	603b      	str	r3, [r7, #0]
 800e632:	460b      	mov	r3, r1
 800e634:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e636:	2300      	movs	r3, #0
 800e638:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e63a:	2300      	movs	r3, #0
 800e63c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e644:	7af9      	ldrb	r1, [r7, #11]
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	687a      	ldr	r2, [r7, #4]
 800e64a:	f7f9 f997 	bl	800797c <HAL_PCD_EP_Transmit>
 800e64e:	4603      	mov	r3, r0
 800e650:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e652:	7dfb      	ldrb	r3, [r7, #23]
 800e654:	4618      	mov	r0, r3
 800e656:	f000 f853 	bl	800e700 <USBD_Get_USB_Status>
 800e65a:	4603      	mov	r3, r0
 800e65c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e65e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e660:	4618      	mov	r0, r3
 800e662:	3718      	adds	r7, #24
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}

0800e668 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	607a      	str	r2, [r7, #4]
 800e672:	603b      	str	r3, [r7, #0]
 800e674:	460b      	mov	r3, r1
 800e676:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e678:	2300      	movs	r3, #0
 800e67a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e67c:	2300      	movs	r3, #0
 800e67e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e686:	7af9      	ldrb	r1, [r7, #11]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	687a      	ldr	r2, [r7, #4]
 800e68c:	f7f9 f923 	bl	80078d6 <HAL_PCD_EP_Receive>
 800e690:	4603      	mov	r3, r0
 800e692:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e694:	7dfb      	ldrb	r3, [r7, #23]
 800e696:	4618      	mov	r0, r3
 800e698:	f000 f832 	bl	800e700 <USBD_Get_USB_Status>
 800e69c:	4603      	mov	r3, r0
 800e69e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e6a0:	7dbb      	ldrb	r3, [r7, #22]
}
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	3718      	adds	r7, #24
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	bd80      	pop	{r7, pc}

0800e6aa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6aa:	b580      	push	{r7, lr}
 800e6ac:	b082      	sub	sp, #8
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	6078      	str	r0, [r7, #4]
 800e6b2:	460b      	mov	r3, r1
 800e6b4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e6bc:	78fa      	ldrb	r2, [r7, #3]
 800e6be:	4611      	mov	r1, r2
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	f7f9 f943 	bl	800794c <HAL_PCD_EP_GetRxCount>
 800e6c6:	4603      	mov	r3, r0
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3708      	adds	r7, #8
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}

0800e6d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e6d0:	b480      	push	{r7}
 800e6d2:	b083      	sub	sp, #12
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e6d8:	4b03      	ldr	r3, [pc, #12]	@ (800e6e8 <USBD_static_malloc+0x18>)
}
 800e6da:	4618      	mov	r0, r3
 800e6dc:	370c      	adds	r7, #12
 800e6de:	46bd      	mov	sp, r7
 800e6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e4:	4770      	bx	lr
 800e6e6:	bf00      	nop
 800e6e8:	200018d8 	.word	0x200018d8

0800e6ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]

}
 800e6f4:	bf00      	nop
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e700:	b480      	push	{r7}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
 800e706:	4603      	mov	r3, r0
 800e708:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e70a:	2300      	movs	r3, #0
 800e70c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e70e:	79fb      	ldrb	r3, [r7, #7]
 800e710:	2b03      	cmp	r3, #3
 800e712:	d817      	bhi.n	800e744 <USBD_Get_USB_Status+0x44>
 800e714:	a201      	add	r2, pc, #4	@ (adr r2, 800e71c <USBD_Get_USB_Status+0x1c>)
 800e716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71a:	bf00      	nop
 800e71c:	0800e72d 	.word	0x0800e72d
 800e720:	0800e733 	.word	0x0800e733
 800e724:	0800e739 	.word	0x0800e739
 800e728:	0800e73f 	.word	0x0800e73f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e72c:	2300      	movs	r3, #0
 800e72e:	73fb      	strb	r3, [r7, #15]
    break;
 800e730:	e00b      	b.n	800e74a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e732:	2303      	movs	r3, #3
 800e734:	73fb      	strb	r3, [r7, #15]
    break;
 800e736:	e008      	b.n	800e74a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e738:	2301      	movs	r3, #1
 800e73a:	73fb      	strb	r3, [r7, #15]
    break;
 800e73c:	e005      	b.n	800e74a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e73e:	2303      	movs	r3, #3
 800e740:	73fb      	strb	r3, [r7, #15]
    break;
 800e742:	e002      	b.n	800e74a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e744:	2303      	movs	r3, #3
 800e746:	73fb      	strb	r3, [r7, #15]
    break;
 800e748:	bf00      	nop
  }
  return usb_status;
 800e74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3714      	adds	r7, #20
 800e750:	46bd      	mov	sp, r7
 800e752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e756:	4770      	bx	lr

0800e758 <memset>:
 800e758:	4402      	add	r2, r0
 800e75a:	4603      	mov	r3, r0
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d100      	bne.n	800e762 <memset+0xa>
 800e760:	4770      	bx	lr
 800e762:	f803 1b01 	strb.w	r1, [r3], #1
 800e766:	e7f9      	b.n	800e75c <memset+0x4>

0800e768 <__libc_init_array>:
 800e768:	b570      	push	{r4, r5, r6, lr}
 800e76a:	4d0d      	ldr	r5, [pc, #52]	@ (800e7a0 <__libc_init_array+0x38>)
 800e76c:	4c0d      	ldr	r4, [pc, #52]	@ (800e7a4 <__libc_init_array+0x3c>)
 800e76e:	1b64      	subs	r4, r4, r5
 800e770:	10a4      	asrs	r4, r4, #2
 800e772:	2600      	movs	r6, #0
 800e774:	42a6      	cmp	r6, r4
 800e776:	d109      	bne.n	800e78c <__libc_init_array+0x24>
 800e778:	4d0b      	ldr	r5, [pc, #44]	@ (800e7a8 <__libc_init_array+0x40>)
 800e77a:	4c0c      	ldr	r4, [pc, #48]	@ (800e7ac <__libc_init_array+0x44>)
 800e77c:	f000 f818 	bl	800e7b0 <_init>
 800e780:	1b64      	subs	r4, r4, r5
 800e782:	10a4      	asrs	r4, r4, #2
 800e784:	2600      	movs	r6, #0
 800e786:	42a6      	cmp	r6, r4
 800e788:	d105      	bne.n	800e796 <__libc_init_array+0x2e>
 800e78a:	bd70      	pop	{r4, r5, r6, pc}
 800e78c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e790:	4798      	blx	r3
 800e792:	3601      	adds	r6, #1
 800e794:	e7ee      	b.n	800e774 <__libc_init_array+0xc>
 800e796:	f855 3b04 	ldr.w	r3, [r5], #4
 800e79a:	4798      	blx	r3
 800e79c:	3601      	adds	r6, #1
 800e79e:	e7f2      	b.n	800e786 <__libc_init_array+0x1e>
 800e7a0:	0800e848 	.word	0x0800e848
 800e7a4:	0800e848 	.word	0x0800e848
 800e7a8:	0800e848 	.word	0x0800e848
 800e7ac:	0800e84c 	.word	0x0800e84c

0800e7b0 <_init>:
 800e7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7b2:	bf00      	nop
 800e7b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7b6:	bc08      	pop	{r3}
 800e7b8:	469e      	mov	lr, r3
 800e7ba:	4770      	bx	lr

0800e7bc <_fini>:
 800e7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7be:	bf00      	nop
 800e7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e7c2:	bc08      	pop	{r3}
 800e7c4:	469e      	mov	lr, r3
 800e7c6:	4770      	bx	lr
