
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e50c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  0800e6a4  0800e6a4  0000f6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e71c  0800e71c  00010130  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e71c  0800e71c  0000f71c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e724  0800e724  00010130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e724  0800e724  0000f724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e728  0800e728  0000f728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000130  20000000  0800e72c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019f0  20000130  0800e85c  00010130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b20  0800e85c  00010b20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010130  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cef8  00000000  00000000  00010160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000047ab  00000000  00000000  0002d058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ac0  00000000  00000000  00031808  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014af  00000000  00000000  000332c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00007982  00000000  00000000  00034777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021d0b  00000000  00000000  0003c0f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1fbd  00000000  00000000  0005de04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ffdc1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007170  00000000  00000000  000ffe04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00106f74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000130 	.word	0x20000130
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800e68c 	.word	0x0800e68c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000134 	.word	0x20000134
 80001d4:	0800e68c 	.word	0x0800e68c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <ESP01_Init>:

	return ESP01_SEND_BUSY;
}


void ESP01_Init(_sESP01Handle *hESP01){
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

	memcpy(&esp01Handle, hESP01, sizeof(_sESP01Handle));
 800050c:	220c      	movs	r2, #12
 800050e:	6879      	ldr	r1, [r7, #4]
 8000510:	4810      	ldr	r0, [pc, #64]	@ (8000554 <ESP01_Init+0x50>)
 8000512:	f00e f8ad 	bl	800e670 <memcpy>

	esp01ATSate = ESP01ATIDLE;
 8000516:	4b10      	ldr	r3, [pc, #64]	@ (8000558 <ESP01_Init+0x54>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
	esp01HState = 0;
 800051c:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <ESP01_Init+0x58>)
 800051e:	2200      	movs	r2, #0
 8000520:	701a      	strb	r2, [r3, #0]
	esp01irTX = 0;
 8000522:	4b0f      	ldr	r3, [pc, #60]	@ (8000560 <ESP01_Init+0x5c>)
 8000524:	2200      	movs	r2, #0
 8000526:	801a      	strh	r2, [r3, #0]
	esp01iwTX = 0;
 8000528:	4b0e      	ldr	r3, [pc, #56]	@ (8000564 <ESP01_Init+0x60>)
 800052a:	2200      	movs	r2, #0
 800052c:	801a      	strh	r2, [r3, #0]
	esp01irRXAT = 0;
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <ESP01_Init+0x64>)
 8000530:	2200      	movs	r2, #0
 8000532:	801a      	strh	r2, [r3, #0]
	esp01iwRXAT = 0;
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <ESP01_Init+0x68>)
 8000536:	2200      	movs	r2, #0
 8000538:	801a      	strh	r2, [r3, #0]
	esp01Flags.byte = 0;
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <ESP01_Init+0x6c>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
	ESP01ChangeState = NULL;
 8000540:	4b0c      	ldr	r3, [pc, #48]	@ (8000574 <ESP01_Init+0x70>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
	ESP01DbgStr = NULL;
 8000546:	4b0c      	ldr	r3, [pc, #48]	@ (8000578 <ESP01_Init+0x74>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
}
 800054c:	bf00      	nop
 800054e:	3708      	adds	r7, #8
 8000550:	46bd      	mov	sp, r7
 8000552:	bd80      	pop	{r7, pc}
 8000554:	20000174 	.word	0x20000174
 8000558:	2000014c 	.word	0x2000014c
 800055c:	20000168 	.word	0x20000168
 8000560:	2000016e 	.word	0x2000016e
 8000564:	20000170 	.word	0x20000170
 8000568:	2000016c 	.word	0x2000016c
 800056c:	2000016a 	.word	0x2000016a
 8000570:	20000150 	.word	0x20000150
 8000574:	20000160 	.word	0x20000160
 8000578:	20000164 	.word	0x20000164

0800057c <ESP01_Timeout10ms>:


void ESP01_Timeout10ms(){
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
	if(esp01TimeoutTask)
 8000580:	4b13      	ldr	r3, [pc, #76]	@ (80005d0 <ESP01_Timeout10ms+0x54>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d004      	beq.n	8000592 <ESP01_Timeout10ms+0x16>
		esp01TimeoutTask--;
 8000588:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <ESP01_Timeout10ms+0x54>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	4a10      	ldr	r2, [pc, #64]	@ (80005d0 <ESP01_Timeout10ms+0x54>)
 8000590:	6013      	str	r3, [r2, #0]

	if(esp01TimeoutDataRx){
 8000592:	4b10      	ldr	r3, [pc, #64]	@ (80005d4 <ESP01_Timeout10ms+0x58>)
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	2b00      	cmp	r3, #0
 8000598:	d00b      	beq.n	80005b2 <ESP01_Timeout10ms+0x36>
		esp01TimeoutDataRx--;
 800059a:	4b0e      	ldr	r3, [pc, #56]	@ (80005d4 <ESP01_Timeout10ms+0x58>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	3b01      	subs	r3, #1
 80005a0:	4a0c      	ldr	r2, [pc, #48]	@ (80005d4 <ESP01_Timeout10ms+0x58>)
 80005a2:	6013      	str	r3, [r2, #0]
		if(!esp01TimeoutDataRx)
 80005a4:	4b0b      	ldr	r3, [pc, #44]	@ (80005d4 <ESP01_Timeout10ms+0x58>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d102      	bne.n	80005b2 <ESP01_Timeout10ms+0x36>
			esp01HState = 0;
 80005ac:	4b0a      	ldr	r3, [pc, #40]	@ (80005d8 <ESP01_Timeout10ms+0x5c>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]
	}

	if(esp01TimeoutTxSymbol)
 80005b2:	4b0a      	ldr	r3, [pc, #40]	@ (80005dc <ESP01_Timeout10ms+0x60>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d004      	beq.n	80005c4 <ESP01_Timeout10ms+0x48>
		esp01TimeoutTxSymbol--;
 80005ba:	4b08      	ldr	r3, [pc, #32]	@ (80005dc <ESP01_Timeout10ms+0x60>)
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	3b01      	subs	r3, #1
 80005c0:	4a06      	ldr	r2, [pc, #24]	@ (80005dc <ESP01_Timeout10ms+0x60>)
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	20000154 	.word	0x20000154
 80005d4:	20000158 	.word	0x20000158
 80005d8:	20000168 	.word	0x20000168
 80005dc:	2000015c 	.word	0x2000015c

080005e0 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 80005e0:	b480      	push	{r7}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
 80005ec:	e00a      	b.n	8000604 <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 80005ee:	4a0a      	ldr	r2, [pc, #40]	@ (8000618 <HAL_ADC_ConvCpltCallback+0x38>)
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80005f6:	4a09      	ldr	r2, [pc, #36]	@ (800061c <HAL_ADC_ConvCpltCallback+0x3c>)
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	3301      	adds	r3, #1
 8000602:	60fb      	str	r3, [r7, #12]
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	2b07      	cmp	r3, #7
 8000608:	ddf1      	ble.n	80005ee <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	3714      	adds	r7, #20
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	200004a4 	.word	0x200004a4
 800061c:	200004b4 	.word	0x200004b4

08000620 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 8000628:	4b04      	ldr	r3, [pc, #16]	@ (800063c <HAL_I2C_MemTxCpltCallback+0x1c>)
 800062a:	2201      	movs	r2, #1
 800062c:	701a      	strb	r2, [r3, #0]
}
 800062e:	bf00      	nop
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	200006e1 	.word	0x200006e1

08000640 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000648:	4b04      	ldr	r3, [pc, #16]	@ (800065c <HAL_I2C_MemRxCpltCallback+0x1c>)
 800064a:	2201      	movs	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
}
 800064e:	bf00      	nop
 8000650:	370c      	adds	r7, #12
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200006e2 	.word	0x200006e2

08000660 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) { //250us
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a2a      	ldr	r2, [pc, #168]	@ (8000718 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800066e:	4293      	cmp	r3, r2
 8000670:	d116      	bne.n	80006a0 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000672:	4b2a      	ldr	r3, [pc, #168]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	3301      	adds	r3, #1
 8000678:	b2da      	uxtb	r2, r3
 800067a:	4b28      	ldr	r3, [pc, #160]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800067c:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 800067e:	4b27      	ldr	r3, [pc, #156]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	2b28      	cmp	r3, #40	@ 0x28
 8000684:	d107      	bne.n	8000696 <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000686:	4b25      	ldr	r3, [pc, #148]	@ (800071c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000688:	2200      	movs	r2, #0
 800068a:	701a      	strb	r2, [r3, #0]
			IS10MS = TRUE;
 800068c:	4a24      	ldr	r2, [pc, #144]	@ (8000720 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800068e:	7813      	ldrb	r3, [r2, #0]
 8000690:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000694:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000696:	2208      	movs	r2, #8
 8000698:	4922      	ldr	r1, [pc, #136]	@ (8000724 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800069a:	4823      	ldr	r0, [pc, #140]	@ (8000728 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800069c:	f002 f9b8 	bl	8002a10 <HAL_ADC_Start_DMA>
	}

	if (htim->Instance == TIM2) { //20ms
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80006a8:	d132      	bne.n	8000710 <HAL_TIM_PeriodElapsedCallback+0xb0>
		Pila[i2cIndex] = MPU6050;
 80006aa:	4b20      	ldr	r3, [pc, #128]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	461a      	mov	r2, r3
 80006b0:	4b1f      	ldr	r3, [pc, #124]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80006b2:	2101      	movs	r1, #1
 80006b4:	5499      	strb	r1, [r3, r2]
		i2cIndex++;
 80006b6:	4b1d      	ldr	r3, [pc, #116]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	3301      	adds	r3, #1
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006c0:	701a      	strb	r2, [r3, #0]
		i2cIndex&=(I2CSIZE-1);
 80006c2:	4b1a      	ldr	r3, [pc, #104]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	f003 030f 	and.w	r3, r3, #15
 80006ca:	b2da      	uxtb	r2, r3
 80006cc:	4b17      	ldr	r3, [pc, #92]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006ce:	701a      	strb	r2, [r3, #0]
		tmo100--;
 80006d0:	4b18      	ldr	r3, [pc, #96]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	4b16      	ldr	r3, [pc, #88]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006da:	701a      	strb	r2, [r3, #0]
		if(!tmo100){
 80006dc:	4b15      	ldr	r3, [pc, #84]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d115      	bne.n	8000710 <HAL_TIM_PeriodElapsedCallback+0xb0>
			tmo100=5;
 80006e4:	4b13      	ldr	r3, [pc, #76]	@ (8000734 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80006e6:	2205      	movs	r2, #5
 80006e8:	701a      	strb	r2, [r3, #0]
			Pila[i2cIndex] = SSD1306;
 80006ea:	4b10      	ldr	r3, [pc, #64]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	461a      	mov	r2, r3
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80006f2:	2100      	movs	r1, #0
 80006f4:	5499      	strb	r1, [r3, r2]
			i2cIndex++;
 80006f6:	4b0d      	ldr	r3, [pc, #52]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	3301      	adds	r3, #1
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4b0b      	ldr	r3, [pc, #44]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000700:	701a      	strb	r2, [r3, #0]
			i2cIndex&=(I2CSIZE-1);
 8000702:	4b0a      	ldr	r3, [pc, #40]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	b2da      	uxtb	r2, r3
 800070c:	4b07      	ldr	r3, [pc, #28]	@ (800072c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800070e:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM4) { //100ms

	}
}
 8000710:	bf00      	nop
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40010000 	.word	0x40010000
 800071c:	200004a0 	.word	0x200004a0
 8000720:	200006e0 	.word	0x200006e0
 8000724:	200004a4 	.word	0x200004a4
 8000728:	20000180 	.word	0x20000180
 800072c:	20000700 	.word	0x20000700
 8000730:	200006f0 	.word	0x200006f0
 8000734:	2000002a 	.word	0x2000002a

08000738 <USBRxData>:


void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000738:	b490      	push	{r4, r7}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000742:	2300      	movs	r3, #0
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	e018      	b.n	800077a <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	441a      	add	r2, r3
 800074e:	4b10      	ldr	r3, [pc, #64]	@ (8000790 <USBRxData+0x58>)
 8000750:	6819      	ldr	r1, [r3, #0]
 8000752:	4b0f      	ldr	r3, [pc, #60]	@ (8000790 <USBRxData+0x58>)
 8000754:	795b      	ldrb	r3, [r3, #5]
 8000756:	1c58      	adds	r0, r3, #1
 8000758:	b2c4      	uxtb	r4, r0
 800075a:	480d      	ldr	r0, [pc, #52]	@ (8000790 <USBRxData+0x58>)
 800075c:	7144      	strb	r4, [r0, #5]
 800075e:	440b      	add	r3, r1
 8000760:	7812      	ldrb	r2, [r2, #0]
 8000762:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000764:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <USBRxData+0x58>)
 8000766:	795a      	ldrb	r2, [r3, #5]
 8000768:	4b09      	ldr	r3, [pc, #36]	@ (8000790 <USBRxData+0x58>)
 800076a:	799b      	ldrb	r3, [r3, #6]
 800076c:	4013      	ands	r3, r2
 800076e:	b2da      	uxtb	r2, r3
 8000770:	4b07      	ldr	r3, [pc, #28]	@ (8000790 <USBRxData+0x58>)
 8000772:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	3301      	adds	r3, #1
 8000778:	73fb      	strb	r3, [r7, #15]
 800077a:	7bfb      	ldrb	r3, [r7, #15]
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	429a      	cmp	r2, r3
 8000780:	d8e2      	bhi.n	8000748 <USBRxData+0x10>
	}

}
 8000782:	bf00      	nop
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bc90      	pop	{r4, r7}
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	200004d0 	.word	0x200004d0

08000794 <USBTask>:

void USBTask() {
 8000794:	b580      	push	{r7, lr}
 8000796:	b0c2      	sub	sp, #264	@ 0x108
 8000798:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 800079a:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <USBTask+0x90>)
 800079c:	791a      	ldrb	r2, [r3, #4]
 800079e:	4b21      	ldr	r3, [pc, #132]	@ (8000824 <USBTask+0x90>)
 80007a0:	795b      	ldrb	r3, [r3, #5]
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d039      	beq.n	800081a <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 80007a6:	481f      	ldr	r0, [pc, #124]	@ (8000824 <USBTask+0x90>)
 80007a8:	f001 fde8 	bl	800237c <unerPrtcl_DecodeHeader>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d003      	beq.n	80007ba <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 80007b2:	491d      	ldr	r1, [pc, #116]	@ (8000828 <USBTask+0x94>)
 80007b4:	481b      	ldr	r0, [pc, #108]	@ (8000824 <USBTask+0x90>)
 80007b6:	f000 f839 	bl	800082c <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 80007ba:	2300      	movs	r3, #0
 80007bc:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 80007c0:	e01d      	b.n	80007fe <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <USBTask+0x94>)
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	4b18      	ldr	r3, [pc, #96]	@ (8000828 <USBTask+0x94>)
 80007c8:	7a1b      	ldrb	r3, [r3, #8]
 80007ca:	1c59      	adds	r1, r3, #1
 80007cc:	b2c8      	uxtb	r0, r1
 80007ce:	4916      	ldr	r1, [pc, #88]	@ (8000828 <USBTask+0x94>)
 80007d0:	7208      	strb	r0, [r1, #8]
 80007d2:	441a      	add	r2, r3
 80007d4:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80007d8:	7811      	ldrb	r1, [r2, #0]
 80007da:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80007de:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80007e2:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 80007e4:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <USBTask+0x94>)
 80007e6:	7a1a      	ldrb	r2, [r3, #8]
 80007e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000828 <USBTask+0x94>)
 80007ea:	799b      	ldrb	r3, [r3, #6]
 80007ec:	4013      	ands	r3, r2
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000828 <USBTask+0x94>)
 80007f2:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 80007f4:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 80007f8:	3301      	adds	r3, #1
 80007fa:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 80007fe:	4b0a      	ldr	r3, [pc, #40]	@ (8000828 <USBTask+0x94>)
 8000800:	79db      	ldrb	r3, [r3, #7]
 8000802:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000806:	429a      	cmp	r2, r3
 8000808:	d3db      	bcc.n	80007c2 <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <USBTask+0x94>)
 800080c:	79db      	ldrb	r3, [r3, #7]
 800080e:	461a      	mov	r2, r3
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f00d fa9d 	bl	800dd54 <CDC_Transmit_FS>
	}

}
 800081a:	bf00      	nop
 800081c:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	200004d0 	.word	0x200004d0
 8000828:	200004c4 	.word	0x200004c4

0800082c <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	687a      	ldr	r2, [r7, #4]
 800083c:	7a12      	ldrb	r2, [r2, #8]
 800083e:	4413      	add	r3, r2
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	3bf0      	subs	r3, #240	@ 0xf0
 8000844:	2b04      	cmp	r3, #4
 8000846:	f200 819f 	bhi.w	8000b88 <decodeCommand+0x35c>
 800084a:	a201      	add	r2, pc, #4	@ (adr r2, 8000850 <decodeCommand+0x24>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	08000865 	.word	0x08000865
 8000854:	08000885 	.word	0x08000885
 8000858:	080008a5 	.word	0x080008a5
 800085c:	08000989 	.word	0x08000989
 8000860:	08000ac5 	.word	0x08000ac5
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000864:	2202      	movs	r2, #2
 8000866:	21f0      	movs	r1, #240	@ 0xf0
 8000868:	6838      	ldr	r0, [r7, #0]
 800086a:	f001 fc31 	bl	80020d0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 800086e:	210d      	movs	r1, #13
 8000870:	6838      	ldr	r0, [r7, #0]
 8000872:	f001 fcdc 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	7a5b      	ldrb	r3, [r3, #9]
 800087a:	4619      	mov	r1, r3
 800087c:	6838      	ldr	r0, [r7, #0]
 800087e:	f001 fcd6 	bl	800222e <unerPrtcl_PutByteOnTx>
		break;
 8000882:	e197      	b.n	8000bb4 <decodeCommand+0x388>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000884:	220d      	movs	r2, #13
 8000886:	21f1      	movs	r1, #241	@ 0xf1
 8000888:	6838      	ldr	r0, [r7, #0]
 800088a:	f001 fc21 	bl	80020d0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 800088e:	4984      	ldr	r1, [pc, #528]	@ (8000aa0 <decodeCommand+0x274>)
 8000890:	6838      	ldr	r0, [r7, #0]
 8000892:	f001 fcfa 	bl	800228a <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	7a5b      	ldrb	r3, [r3, #9]
 800089a:	4619      	mov	r1, r3
 800089c:	6838      	ldr	r0, [r7, #0]
 800089e:	f001 fcc6 	bl	800222e <unerPrtcl_PutByteOnTx>
		break;
 80008a2:	e187      	b.n	8000bb4 <decodeCommand+0x388>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 80008a4:	220d      	movs	r2, #13
 80008a6:	21f2      	movs	r1, #242	@ 0xf2
 80008a8:	6838      	ldr	r0, [r7, #0]
 80008aa:	f001 fc11 	bl	80020d0 <unerPrtcl_PutHeaderOnTx>
		myWord.i16[0] = ax;
 80008ae:	4b7d      	ldr	r3, [pc, #500]	@ (8000aa4 <decodeCommand+0x278>)
 80008b0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008b4:	4b7c      	ldr	r3, [pc, #496]	@ (8000aa8 <decodeCommand+0x27c>)
 80008b6:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80008b8:	4b7b      	ldr	r3, [pc, #492]	@ (8000aa8 <decodeCommand+0x27c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	6838      	ldr	r0, [r7, #0]
 80008c0:	f001 fcb5 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80008c4:	4b78      	ldr	r3, [pc, #480]	@ (8000aa8 <decodeCommand+0x27c>)
 80008c6:	785b      	ldrb	r3, [r3, #1]
 80008c8:	4619      	mov	r1, r3
 80008ca:	6838      	ldr	r0, [r7, #0]
 80008cc:	f001 fcaf 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = ay;
 80008d0:	4b76      	ldr	r3, [pc, #472]	@ (8000aac <decodeCommand+0x280>)
 80008d2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008d6:	4b74      	ldr	r3, [pc, #464]	@ (8000aa8 <decodeCommand+0x27c>)
 80008d8:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80008da:	4b73      	ldr	r3, [pc, #460]	@ (8000aa8 <decodeCommand+0x27c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	4619      	mov	r1, r3
 80008e0:	6838      	ldr	r0, [r7, #0]
 80008e2:	f001 fca4 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80008e6:	4b70      	ldr	r3, [pc, #448]	@ (8000aa8 <decodeCommand+0x27c>)
 80008e8:	785b      	ldrb	r3, [r3, #1]
 80008ea:	4619      	mov	r1, r3
 80008ec:	6838      	ldr	r0, [r7, #0]
 80008ee:	f001 fc9e 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = az;
 80008f2:	4b6f      	ldr	r3, [pc, #444]	@ (8000ab0 <decodeCommand+0x284>)
 80008f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80008f8:	4b6b      	ldr	r3, [pc, #428]	@ (8000aa8 <decodeCommand+0x27c>)
 80008fa:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80008fc:	4b6a      	ldr	r3, [pc, #424]	@ (8000aa8 <decodeCommand+0x27c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	4619      	mov	r1, r3
 8000902:	6838      	ldr	r0, [r7, #0]
 8000904:	f001 fc93 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000908:	4b67      	ldr	r3, [pc, #412]	@ (8000aa8 <decodeCommand+0x27c>)
 800090a:	785b      	ldrb	r3, [r3, #1]
 800090c:	4619      	mov	r1, r3
 800090e:	6838      	ldr	r0, [r7, #0]
 8000910:	f001 fc8d 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gx;
 8000914:	4b67      	ldr	r3, [pc, #412]	@ (8000ab4 <decodeCommand+0x288>)
 8000916:	f9b3 2000 	ldrsh.w	r2, [r3]
 800091a:	4b63      	ldr	r3, [pc, #396]	@ (8000aa8 <decodeCommand+0x27c>)
 800091c:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800091e:	4b62      	ldr	r3, [pc, #392]	@ (8000aa8 <decodeCommand+0x27c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	4619      	mov	r1, r3
 8000924:	6838      	ldr	r0, [r7, #0]
 8000926:	f001 fc82 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800092a:	4b5f      	ldr	r3, [pc, #380]	@ (8000aa8 <decodeCommand+0x27c>)
 800092c:	785b      	ldrb	r3, [r3, #1]
 800092e:	4619      	mov	r1, r3
 8000930:	6838      	ldr	r0, [r7, #0]
 8000932:	f001 fc7c 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gy;
 8000936:	4b60      	ldr	r3, [pc, #384]	@ (8000ab8 <decodeCommand+0x28c>)
 8000938:	f9b3 2000 	ldrsh.w	r2, [r3]
 800093c:	4b5a      	ldr	r3, [pc, #360]	@ (8000aa8 <decodeCommand+0x27c>)
 800093e:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000940:	4b59      	ldr	r3, [pc, #356]	@ (8000aa8 <decodeCommand+0x27c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	4619      	mov	r1, r3
 8000946:	6838      	ldr	r0, [r7, #0]
 8000948:	f001 fc71 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800094c:	4b56      	ldr	r3, [pc, #344]	@ (8000aa8 <decodeCommand+0x27c>)
 800094e:	785b      	ldrb	r3, [r3, #1]
 8000950:	4619      	mov	r1, r3
 8000952:	6838      	ldr	r0, [r7, #0]
 8000954:	f001 fc6b 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gz;
 8000958:	4b58      	ldr	r3, [pc, #352]	@ (8000abc <decodeCommand+0x290>)
 800095a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800095e:	4b52      	ldr	r3, [pc, #328]	@ (8000aa8 <decodeCommand+0x27c>)
 8000960:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000962:	4b51      	ldr	r3, [pc, #324]	@ (8000aa8 <decodeCommand+0x27c>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4619      	mov	r1, r3
 8000968:	6838      	ldr	r0, [r7, #0]
 800096a:	f001 fc60 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 800096e:	4b4e      	ldr	r3, [pc, #312]	@ (8000aa8 <decodeCommand+0x27c>)
 8000970:	785b      	ldrb	r3, [r3, #1]
 8000972:	4619      	mov	r1, r3
 8000974:	6838      	ldr	r0, [r7, #0]
 8000976:	f001 fc5a 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	7a5b      	ldrb	r3, [r3, #9]
 800097e:	4619      	mov	r1, r3
 8000980:	6838      	ldr	r0, [r7, #0]
 8000982:	f001 fc54 	bl	800222e <unerPrtcl_PutByteOnTx>
		break;
 8000986:	e115      	b.n	8000bb4 <decodeCommand+0x388>
	case GETADC:
		unerPrtcl_PutHeaderOnTx(dataTx, GETADC, 17);
 8000988:	2211      	movs	r2, #17
 800098a:	21f3      	movs	r1, #243	@ 0xf3
 800098c:	6838      	ldr	r0, [r7, #0]
 800098e:	f001 fb9f 	bl	80020d0 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = adcDataTx[0];
 8000992:	4b4b      	ldr	r3, [pc, #300]	@ (8000ac0 <decodeCommand+0x294>)
 8000994:	881a      	ldrh	r2, [r3, #0]
 8000996:	4b44      	ldr	r3, [pc, #272]	@ (8000aa8 <decodeCommand+0x27c>)
 8000998:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 800099a:	4b43      	ldr	r3, [pc, #268]	@ (8000aa8 <decodeCommand+0x27c>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	4619      	mov	r1, r3
 80009a0:	6838      	ldr	r0, [r7, #0]
 80009a2:	f001 fc44 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80009a6:	4b40      	ldr	r3, [pc, #256]	@ (8000aa8 <decodeCommand+0x27c>)
 80009a8:	785b      	ldrb	r3, [r3, #1]
 80009aa:	4619      	mov	r1, r3
 80009ac:	6838      	ldr	r0, [r7, #0]
 80009ae:	f001 fc3e 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[1];
 80009b2:	4b43      	ldr	r3, [pc, #268]	@ (8000ac0 <decodeCommand+0x294>)
 80009b4:	885a      	ldrh	r2, [r3, #2]
 80009b6:	4b3c      	ldr	r3, [pc, #240]	@ (8000aa8 <decodeCommand+0x27c>)
 80009b8:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80009ba:	4b3b      	ldr	r3, [pc, #236]	@ (8000aa8 <decodeCommand+0x27c>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	4619      	mov	r1, r3
 80009c0:	6838      	ldr	r0, [r7, #0]
 80009c2:	f001 fc34 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80009c6:	4b38      	ldr	r3, [pc, #224]	@ (8000aa8 <decodeCommand+0x27c>)
 80009c8:	785b      	ldrb	r3, [r3, #1]
 80009ca:	4619      	mov	r1, r3
 80009cc:	6838      	ldr	r0, [r7, #0]
 80009ce:	f001 fc2e 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[2];
 80009d2:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac0 <decodeCommand+0x294>)
 80009d4:	889a      	ldrh	r2, [r3, #4]
 80009d6:	4b34      	ldr	r3, [pc, #208]	@ (8000aa8 <decodeCommand+0x27c>)
 80009d8:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80009da:	4b33      	ldr	r3, [pc, #204]	@ (8000aa8 <decodeCommand+0x27c>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	4619      	mov	r1, r3
 80009e0:	6838      	ldr	r0, [r7, #0]
 80009e2:	f001 fc24 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 80009e6:	4b30      	ldr	r3, [pc, #192]	@ (8000aa8 <decodeCommand+0x27c>)
 80009e8:	785b      	ldrb	r3, [r3, #1]
 80009ea:	4619      	mov	r1, r3
 80009ec:	6838      	ldr	r0, [r7, #0]
 80009ee:	f001 fc1e 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[3];
 80009f2:	4b33      	ldr	r3, [pc, #204]	@ (8000ac0 <decodeCommand+0x294>)
 80009f4:	88da      	ldrh	r2, [r3, #6]
 80009f6:	4b2c      	ldr	r3, [pc, #176]	@ (8000aa8 <decodeCommand+0x27c>)
 80009f8:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 80009fa:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa8 <decodeCommand+0x27c>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	4619      	mov	r1, r3
 8000a00:	6838      	ldr	r0, [r7, #0]
 8000a02:	f001 fc14 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a06:	4b28      	ldr	r3, [pc, #160]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a08:	785b      	ldrb	r3, [r3, #1]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	6838      	ldr	r0, [r7, #0]
 8000a0e:	f001 fc0e 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[4];
 8000a12:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac0 <decodeCommand+0x294>)
 8000a14:	891a      	ldrh	r2, [r3, #8]
 8000a16:	4b24      	ldr	r3, [pc, #144]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a18:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000a1a:	4b23      	ldr	r3, [pc, #140]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	4619      	mov	r1, r3
 8000a20:	6838      	ldr	r0, [r7, #0]
 8000a22:	f001 fc04 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a26:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a28:	785b      	ldrb	r3, [r3, #1]
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	6838      	ldr	r0, [r7, #0]
 8000a2e:	f001 fbfe 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[5];
 8000a32:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <decodeCommand+0x294>)
 8000a34:	895a      	ldrh	r2, [r3, #10]
 8000a36:	4b1c      	ldr	r3, [pc, #112]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a38:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	4619      	mov	r1, r3
 8000a40:	6838      	ldr	r0, [r7, #0]
 8000a42:	f001 fbf4 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a48:	785b      	ldrb	r3, [r3, #1]
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	6838      	ldr	r0, [r7, #0]
 8000a4e:	f001 fbee 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[6];
 8000a52:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <decodeCommand+0x294>)
 8000a54:	899a      	ldrh	r2, [r3, #12]
 8000a56:	4b14      	ldr	r3, [pc, #80]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a58:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	f001 fbe4 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a66:	4b10      	ldr	r3, [pc, #64]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a68:	785b      	ldrb	r3, [r3, #1]
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	6838      	ldr	r0, [r7, #0]
 8000a6e:	f001 fbde 	bl	800222e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[7];
 8000a72:	4b13      	ldr	r3, [pc, #76]	@ (8000ac0 <decodeCommand+0x294>)
 8000a74:	89da      	ldrh	r2, [r3, #14]
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a78:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	4619      	mov	r1, r3
 8000a80:	6838      	ldr	r0, [r7, #0]
 8000a82:	f001 fbd4 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <decodeCommand+0x27c>)
 8000a88:	785b      	ldrb	r3, [r3, #1]
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	6838      	ldr	r0, [r7, #0]
 8000a8e:	f001 fbce 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000a92:	683b      	ldr	r3, [r7, #0]
 8000a94:	7a5b      	ldrb	r3, [r3, #9]
 8000a96:	4619      	mov	r1, r3
 8000a98:	6838      	ldr	r0, [r7, #0]
 8000a9a:	f001 fbc8 	bl	800222e <unerPrtcl_PutByteOnTx>
		break;
 8000a9e:	e089      	b.n	8000bb4 <decodeCommand+0x388>
 8000aa0:	0800e6ec 	.word	0x0800e6ec
 8000aa4:	200006e4 	.word	0x200006e4
 8000aa8:	200006dc 	.word	0x200006dc
 8000aac:	200006e6 	.word	0x200006e6
 8000ab0:	200006e8 	.word	0x200006e8
 8000ab4:	200006ea 	.word	0x200006ea
 8000ab8:	200006ec 	.word	0x200006ec
 8000abc:	200006ee 	.word	0x200006ee
 8000ac0:	200004b4 	.word	0x200004b4
	case SETPWM:
		unerPrtcl_PutHeaderOnTx(dataTx, SETPWM, 2);
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	21f4      	movs	r1, #244	@ 0xf4
 8000ac8:	6838      	ldr	r0, [r7, #0]
 8000aca:	f001 fb01 	bl	80020d0 <unerPrtcl_PutHeaderOnTx>
        unerPrtcl_PutByteOnTx(dataTx, ACK );
 8000ace:	210d      	movs	r1, #13
 8000ad0:	6838      	ldr	r0, [r7, #0]
 8000ad2:	f001 fbac 	bl	800222e <unerPrtcl_PutByteOnTx>
        unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	7a5b      	ldrb	r3, [r3, #9]
 8000ada:	4619      	mov	r1, r3
 8000adc:	6838      	ldr	r0, [r7, #0]
 8000ade:	f001 fba6 	bl	800222e <unerPrtcl_PutByteOnTx>
        myWord.ui8[0]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f001 fc13 	bl	8002312 <unerPrtcl_GetByteFromRx>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461a      	mov	r2, r3
 8000af0:	4b32      	ldr	r3, [pc, #200]	@ (8000bbc <decodeCommand+0x390>)
 8000af2:	701a      	strb	r2, [r3, #0]
        myWord.ui8[1]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000af4:	2200      	movs	r2, #0
 8000af6:	2101      	movs	r1, #1
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f001 fc0a 	bl	8002312 <unerPrtcl_GetByteFromRx>
 8000afe:	4603      	mov	r3, r0
 8000b00:	461a      	mov	r2, r3
 8000b02:	4b2e      	ldr	r3, [pc, #184]	@ (8000bbc <decodeCommand+0x390>)
 8000b04:	705a      	strb	r2, [r3, #1]
        myWord.ui8[2]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2101      	movs	r1, #1
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f001 fc01 	bl	8002312 <unerPrtcl_GetByteFromRx>
 8000b10:	4603      	mov	r3, r0
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b29      	ldr	r3, [pc, #164]	@ (8000bbc <decodeCommand+0x390>)
 8000b16:	709a      	strb	r2, [r3, #2]
        myWord.ui8[3]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f001 fbf8 	bl	8002312 <unerPrtcl_GetByteFromRx>
 8000b22:	4603      	mov	r3, r0
 8000b24:	461a      	mov	r2, r3
 8000b26:	4b25      	ldr	r3, [pc, #148]	@ (8000bbc <decodeCommand+0x390>)
 8000b28:	70da      	strb	r2, [r3, #3]
        lPwr = myWord.ui32;
 8000b2a:	4b24      	ldr	r3, [pc, #144]	@ (8000bbc <decodeCommand+0x390>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b23      	ldr	r3, [pc, #140]	@ (8000bc0 <decodeCommand+0x394>)
 8000b32:	701a      	strb	r2, [r3, #0]
        myWord.ui8[0]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000b34:	2200      	movs	r2, #0
 8000b36:	2101      	movs	r1, #1
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f001 fbea 	bl	8002312 <unerPrtcl_GetByteFromRx>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b1e      	ldr	r3, [pc, #120]	@ (8000bbc <decodeCommand+0x390>)
 8000b44:	701a      	strb	r2, [r3, #0]
        myWord.ui8[1]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	2101      	movs	r1, #1
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f001 fbe1 	bl	8002312 <unerPrtcl_GetByteFromRx>
 8000b50:	4603      	mov	r3, r0
 8000b52:	461a      	mov	r2, r3
 8000b54:	4b19      	ldr	r3, [pc, #100]	@ (8000bbc <decodeCommand+0x390>)
 8000b56:	705a      	strb	r2, [r3, #1]
        myWord.ui8[2]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	6878      	ldr	r0, [r7, #4]
 8000b5e:	f001 fbd8 	bl	8002312 <unerPrtcl_GetByteFromRx>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b15      	ldr	r3, [pc, #84]	@ (8000bbc <decodeCommand+0x390>)
 8000b68:	709a      	strb	r2, [r3, #2]
        myWord.ui8[3]=unerPrtcl_GetByteFromRx(dataRx,1,0);
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2101      	movs	r1, #1
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f001 fbcf 	bl	8002312 <unerPrtcl_GetByteFromRx>
 8000b74:	4603      	mov	r3, r0
 8000b76:	461a      	mov	r2, r3
 8000b78:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <decodeCommand+0x390>)
 8000b7a:	70da      	strb	r2, [r3, #3]
        rPwr = myWord.ui32;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bbc <decodeCommand+0x390>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	b2da      	uxtb	r2, r3
 8000b82:	4b10      	ldr	r3, [pc, #64]	@ (8000bc4 <decodeCommand+0x398>)
 8000b84:	701a      	strb	r2, [r3, #0]
		break;
 8000b86:	e015      	b.n	8000bb4 <decodeCommand+0x388>
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	687a      	ldr	r2, [r7, #4]
 8000b8e:	7a12      	ldrb	r2, [r2, #8]
 8000b90:	4413      	add	r3, r2
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2202      	movs	r2, #2
 8000b96:	4619      	mov	r1, r3
 8000b98:	6838      	ldr	r0, [r7, #0]
 8000b9a:	f001 fa99 	bl	80020d0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 8000b9e:	21ff      	movs	r1, #255	@ 0xff
 8000ba0:	6838      	ldr	r0, [r7, #0]
 8000ba2:	f001 fb44 	bl	800222e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	7a5b      	ldrb	r3, [r3, #9]
 8000baa:	4619      	mov	r1, r3
 8000bac:	6838      	ldr	r0, [r7, #0]
 8000bae:	f001 fb3e 	bl	800222e <unerPrtcl_PutByteOnTx>
		break;
 8000bb2:	bf00      	nop
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200006dc 	.word	0x200006dc
 8000bc0:	20000701 	.word	0x20000701
 8000bc4:	20000702 	.word	0x20000702

08000bc8 <do10ms>:

void do10ms() {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	if (IS10MS) {
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <do10ms+0x74>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d02e      	beq.n	8000c38 <do10ms+0x70>
		IS10MS = FALSE;
 8000bda:	4a18      	ldr	r2, [pc, #96]	@ (8000c3c <do10ms+0x74>)
 8000bdc:	7813      	ldrb	r3, [r2, #0]
 8000bde:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000be2:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 8000be4:	4b16      	ldr	r3, [pc, #88]	@ (8000c40 <do10ms+0x78>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	b2da      	uxtb	r2, r3
 8000bec:	4b14      	ldr	r3, [pc, #80]	@ (8000c40 <do10ms+0x78>)
 8000bee:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	@ (8000c44 <do10ms+0x7c>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	b2da      	uxtb	r2, r3
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <do10ms+0x7c>)
 8000bfa:	701a      	strb	r2, [r3, #0]
		PWMControl();
 8000bfc:	f000 f8d0 	bl	8000da0 <PWMControl>
		ESP01_Timeout10ms();
 8000c00:	f7ff fcbc 	bl	800057c <ESP01_Timeout10ms>
		if (!tmo20ms) {
 8000c04:	4b0f      	ldr	r3, [pc, #60]	@ (8000c44 <do10ms+0x7c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d107      	bne.n	8000c1c <do10ms+0x54>
			tmo20ms = 2;
 8000c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000c44 <do10ms+0x7c>)
 8000c0e:	2202      	movs	r2, #2
 8000c10:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 8000c12:	4a0a      	ldr	r2, [pc, #40]	@ (8000c3c <do10ms+0x74>)
 8000c14:	7813      	ldrb	r3, [r2, #0]
 8000c16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c1a:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 8000c1c:	4b08      	ldr	r3, [pc, #32]	@ (8000c40 <do10ms+0x78>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d109      	bne.n	8000c38 <do10ms+0x70>
			tmo100ms = 10;
 8000c24:	4b06      	ldr	r3, [pc, #24]	@ (8000c40 <do10ms+0x78>)
 8000c26:	220a      	movs	r2, #10
 8000c28:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 8000c2a:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <do10ms+0x74>)
 8000c2c:	7813      	ldrb	r3, [r2, #0]
 8000c2e:	f043 0320 	orr.w	r3, r3, #32
 8000c32:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 8000c34:	f000 f808 	bl	8000c48 <heartBeatTask>
		}
	}
}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200006e0 	.word	0x200006e0
 8000c40:	20000028 	.word	0x20000028
 8000c44:	20000029 	.word	0x20000029

08000c48 <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <heartBeatTask+0x44>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	43db      	mvns	r3, r3
 8000c52:	4a0f      	ldr	r2, [pc, #60]	@ (8000c90 <heartBeatTask+0x48>)
 8000c54:	7812      	ldrb	r2, [r2, #0]
 8000c56:	4611      	mov	r1, r2
 8000c58:	2201      	movs	r2, #1
 8000c5a:	408a      	lsls	r2, r1
 8000c5c:	4013      	ands	r3, r2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d004      	beq.n	8000c6c <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 8000c62:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c66:	480b      	ldr	r0, [pc, #44]	@ (8000c94 <heartBeatTask+0x4c>)
 8000c68:	f003 f8f9 	bl	8003e5e <HAL_GPIO_TogglePin>

	times++;
 8000c6c:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <heartBeatTask+0x48>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	3301      	adds	r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <heartBeatTask+0x48>)
 8000c76:	701a      	strb	r2, [r3, #0]
	times &= 31;
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <heartBeatTask+0x48>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	f003 031f 	and.w	r3, r3, #31
 8000c80:	b2da      	uxtb	r2, r3
 8000c82:	4b03      	ldr	r3, [pc, #12]	@ (8000c90 <heartBeatTask+0x48>)
 8000c84:	701a      	strb	r2, [r3, #0]
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000000 	.word	0x20000000
 8000c90:	20000710 	.word	0x20000710
 8000c94:	40020800 	.word	0x40020800

08000c98 <displayMemWrite>:

void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af04      	add	r7, sp, #16
 8000c9e:	6039      	str	r1, [r7, #0]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	71fb      	strb	r3, [r7, #7]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	71bb      	strb	r3, [r7, #6]
 8000cac:	4613      	mov	r3, r2
 8000cae:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8000cb0:	79fb      	ldrb	r3, [r7, #7]
 8000cb2:	b299      	uxth	r1, r3
 8000cb4:	797b      	ldrb	r3, [r7, #5]
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	79bb      	ldrb	r3, [r7, #6]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	9002      	str	r0, [sp, #8]
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	9300      	str	r3, [sp, #0]
 8000cc8:	2301      	movs	r3, #1
 8000cca:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <displayMemWrite+0x40>)
 8000ccc:	f003 fa3c 	bl	8004148 <HAL_I2C_Mem_Write>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000228 	.word	0x20000228

08000cdc <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b084      	sub	sp, #16
 8000ce0:	af02      	add	r7, sp, #8
 8000ce2:	6039      	str	r1, [r7, #0]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	4603      	mov	r3, r0
 8000cea:	71fb      	strb	r3, [r7, #7]
 8000cec:	460b      	mov	r3, r1
 8000cee:	71bb      	strb	r3, [r7, #6]
 8000cf0:	4613      	mov	r3, r2
 8000cf2:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 8000cf4:	79fb      	ldrb	r3, [r7, #7]
 8000cf6:	b299      	uxth	r1, r3
 8000cf8:	797b      	ldrb	r3, [r7, #5]
 8000cfa:	b29a      	uxth	r2, r3
 8000cfc:	79bb      	ldrb	r3, [r7, #6]
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	9301      	str	r3, [sp, #4]
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	9300      	str	r3, [sp, #0]
 8000d06:	2301      	movs	r3, #1
 8000d08:	4803      	ldr	r0, [pc, #12]	@ (8000d18 <displayMemWriteDMA+0x3c>)
 8000d0a:	f003 fb17 	bl	800433c <HAL_I2C_Mem_Write_DMA>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	20000228 	.word	0x20000228

08000d1c <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af04      	add	r7, sp, #16
 8000d22:	6039      	str	r1, [r7, #0]
 8000d24:	4611      	mov	r1, r2
 8000d26:	461a      	mov	r2, r3
 8000d28:	4603      	mov	r3, r0
 8000d2a:	71fb      	strb	r3, [r7, #7]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	71bb      	strb	r3, [r7, #6]
 8000d30:	4613      	mov	r3, r2
 8000d32:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	b299      	uxth	r1, r3
 8000d38:	797b      	ldrb	r3, [r7, #5]
 8000d3a:	b29a      	uxth	r2, r3
 8000d3c:	79bb      	ldrb	r3, [r7, #6]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	9002      	str	r0, [sp, #8]
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	4803      	ldr	r0, [pc, #12]	@ (8000d5c <mpuMemWrite+0x40>)
 8000d50:	f003 f9fa 	bl	8004148 <HAL_I2C_Mem_Write>
}
 8000d54:	bf00      	nop
 8000d56:	3708      	adds	r7, #8
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000228 	.word	0x20000228

08000d60 <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af02      	add	r7, sp, #8
 8000d66:	6039      	str	r1, [r7, #0]
 8000d68:	4611      	mov	r1, r2
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	460b      	mov	r3, r1
 8000d72:	71bb      	strb	r3, [r7, #6]
 8000d74:	4613      	mov	r3, r2
 8000d76:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	b299      	uxth	r1, r3
 8000d7c:	797b      	ldrb	r3, [r7, #5]
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	79bb      	ldrb	r3, [r7, #6]
 8000d82:	b29b      	uxth	r3, r3
 8000d84:	9301      	str	r3, [sp, #4]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	9300      	str	r3, [sp, #0]
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	4803      	ldr	r0, [pc, #12]	@ (8000d9c <mpuMemReadDMA+0x3c>)
 8000d8e:	f003 fc33 	bl	80045f8 <HAL_I2C_Mem_Read_DMA>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000228 	.word	0x20000228

08000da0 <PWMControl>:
//	}
//
//}


void PWMControl(){
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0

	  uint32_t period = htim3.Init.Period;
 8000da6:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <PWMControl+0x64>)
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	60fb      	str	r3, [r7, #12]
	  // Calcula CCRx = period * percent / 100
	  uint32_t lPulse = (period + 1UL) * (uint32_t)lPwr / 100UL;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	3301      	adds	r3, #1
 8000db0:	4a15      	ldr	r2, [pc, #84]	@ (8000e08 <PWMControl+0x68>)
 8000db2:	7812      	ldrb	r2, [r2, #0]
 8000db4:	fb02 f303 	mul.w	r3, r2, r3
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <PWMControl+0x6c>)
 8000dba:	fba2 2303 	umull	r2, r3, r2, r3
 8000dbe:	095b      	lsrs	r3, r3, #5
 8000dc0:	60bb      	str	r3, [r7, #8]

	  uint32_t rPulse = (period + 1UL) * (uint32_t)rPwr / 100UL;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	4a12      	ldr	r2, [pc, #72]	@ (8000e10 <PWMControl+0x70>)
 8000dc8:	7812      	ldrb	r2, [r2, #0]
 8000dca:	fb02 f303 	mul.w	r3, r2, r3
 8000dce:	4a0f      	ldr	r2, [pc, #60]	@ (8000e0c <PWMControl+0x6c>)
 8000dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8000dd4:	095b      	lsrs	r3, r3, #5
 8000dd6:	607b      	str	r3, [r7, #4]

	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,lPulse);
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e04 <PWMControl+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	68ba      	ldr	r2, [r7, #8]
 8000dde:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,lPulse);
 8000de0:	4b08      	ldr	r3, [pc, #32]	@ (8000e04 <PWMControl+0x64>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	68ba      	ldr	r2, [r7, #8]
 8000de6:	639a      	str	r2, [r3, #56]	@ 0x38

	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,rPulse);
 8000de8:	4b06      	ldr	r3, [pc, #24]	@ (8000e04 <PWMControl+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	687a      	ldr	r2, [r7, #4]
 8000dee:	63da      	str	r2, [r3, #60]	@ 0x3c
	__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_4,rPulse);
 8000df0:	4b04      	ldr	r3, [pc, #16]	@ (8000e04 <PWMControl+0x64>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	687a      	ldr	r2, [r7, #4]
 8000df6:	641a      	str	r2, [r3, #64]	@ 0x40

}
 8000df8:	bf00      	nop
 8000dfa:	3714      	adds	r7, #20
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	200003cc 	.word	0x200003cc
 8000e08:	20000701 	.word	0x20000701
 8000e0c:	51eb851f 	.word	0x51eb851f
 8000e10:	20000702 	.word	0x20000702

08000e14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e18:	f001 fc10 	bl	800263c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e1c:	f000 f876 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e20:	f000 fbee 	bl	8001600 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e24:	f000 fbae 	bl	8001584 <MX_DMA_Init>
  MX_ADC1_Init();
 8000e28:	f000 f8d8 	bl	8000fdc <MX_ADC1_Init>
  MX_I2C1_Init();
 8000e2c:	f000 f98a 	bl	8001144 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000e30:	f000 f9b6 	bl	80011a0 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 8000e34:	f00c fe74 	bl	800db20 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000e38:	f000 fa18 	bl	800126c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000e3c:	f000 fa7a 	bl	8001334 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e40:	f000 fb26 	bl	8001490 <MX_TIM4_Init>
  MX_USART1_Init();
 8000e44:	f000 fb72 	bl	800152c <MX_USART1_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8000e48:	481e      	ldr	r0, [pc, #120]	@ (8000ec4 <main+0xb0>)
 8000e4a:	f00c ffbb 	bl	800ddc4 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1);
 8000e4e:	481e      	ldr	r0, [pc, #120]	@ (8000ec8 <main+0xb4>)
 8000e50:	f007 fdb2 	bl	80089b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8000e54:	481d      	ldr	r0, [pc, #116]	@ (8000ecc <main+0xb8>)
 8000e56:	f007 fdaf 	bl	80089b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000e5a:	481d      	ldr	r0, [pc, #116]	@ (8000ed0 <main+0xbc>)
 8000e5c:	f007 fdac 	bl	80089b8 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8000e60:	481c      	ldr	r0, [pc, #112]	@ (8000ed4 <main+0xc0>)
 8000e62:	f007 fda9 	bl	80089b8 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8000e66:	2201      	movs	r2, #1
 8000e68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e6c:	481a      	ldr	r0, [pc, #104]	@ (8000ed8 <main+0xc4>)
 8000e6e:	f002 ffdd 	bl	8003e2c <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 8000e72:	481a      	ldr	r0, [pc, #104]	@ (8000edc <main+0xc8>)
 8000e74:	f000 fce4 	bl	8001840 <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 8000e78:	4819      	ldr	r0, [pc, #100]	@ (8000ee0 <main+0xcc>)
 8000e7a:	f000 fcd1 	bl	8001820 <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 8000e7e:	4819      	ldr	r0, [pc, #100]	@ (8000ee4 <main+0xd0>)
 8000e80:	f000 fcbe 	bl	8001800 <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 8000e84:	f000 fcec 	bl	8001860 <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 8000e88:	4817      	ldr	r0, [pc, #92]	@ (8000ee8 <main+0xd4>)
 8000e8a:	f000 fc2f 	bl	80016ec <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 8000e8e:	4817      	ldr	r0, [pc, #92]	@ (8000eec <main+0xd8>)
 8000e90:	f000 fc3c 	bl	800170c <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 8000e94:	4816      	ldr	r0, [pc, #88]	@ (8000ef0 <main+0xdc>)
 8000e96:	f000 fc49 	bl	800172c <mpu6050_Attach_MemReadDMA>
	mpu6050_Init();
 8000e9a:	f000 fc6b 	bl	8001774 <mpu6050_Init>

//	esp01Handler.DoCHPD = CHPD_Control(ON);
//	esp01Handler.WriteByteToBufRX = USART_SendByte();
//	esp01Handler.WriteUSARTByte = FeedRxBuf(byte);

	ESP01_Init(&esp01Handler);
 8000e9e:	4815      	ldr	r0, [pc, #84]	@ (8000ef4 <main+0xe0>)
 8000ea0:	f7ff fb30 	bl	8000504 <ESP01_Init>

	//ESP01_SetWIFI("ARPANET","1969-Apolo_11-2022");
	//ESP01_StartUDP("192.168.0.10", 30010, 30001);

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <main+0xe4>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <main+0xe8>)
 8000ea8:	4915      	ldr	r1, [pc, #84]	@ (8000f00 <main+0xec>)
 8000eaa:	4816      	ldr	r0, [pc, #88]	@ (8000f04 <main+0xf0>)
 8000eac:	f001 fb64 	bl	8002578 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <main+0xf4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	701a      	strb	r2, [r3, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 8000eb6:	f7ff fe87 	bl	8000bc8 <do10ms>
		USBTask();
 8000eba:	f7ff fc6b 	bl	8000794 <USBTask>
		do10ms();
 8000ebe:	bf00      	nop
 8000ec0:	e7f9      	b.n	8000eb6 <main+0xa2>
 8000ec2:	bf00      	nop
 8000ec4:	08000739 	.word	0x08000739
 8000ec8:	2000033c 	.word	0x2000033c
 8000ecc:	20000384 	.word	0x20000384
 8000ed0:	200003cc 	.word	0x200003cc
 8000ed4:	20000414 	.word	0x20000414
 8000ed8:	40020800 	.word	0x40020800
 8000edc:	200006e1 	.word	0x200006e1
 8000ee0:	08000c99 	.word	0x08000c99
 8000ee4:	08000cdd 	.word	0x08000cdd
 8000ee8:	200006e2 	.word	0x200006e2
 8000eec:	08000d1d 	.word	0x08000d1d
 8000ef0:	08000d61 	.word	0x08000d61
 8000ef4:	20000704 	.word	0x20000704
 8000ef8:	200004dc 	.word	0x200004dc
 8000efc:	200005dc 	.word	0x200005dc
 8000f00:	200004c4 	.word	0x200004c4
 8000f04:	200004d0 	.word	0x200004d0
 8000f08:	200006e0 	.word	0x200006e0

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	@ 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	@ 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00d fb7c 	bl	800e618 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b27      	ldr	r3, [pc, #156]	@ (8000fd4 <SystemClock_Config+0xc8>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f38:	4a26      	ldr	r2, [pc, #152]	@ (8000fd4 <SystemClock_Config+0xc8>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f40:	4b24      	ldr	r3, [pc, #144]	@ (8000fd4 <SystemClock_Config+0xc8>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b21      	ldr	r3, [pc, #132]	@ (8000fd8 <SystemClock_Config+0xcc>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a20      	ldr	r2, [pc, #128]	@ (8000fd8 <SystemClock_Config+0xcc>)
 8000f56:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b1e      	ldr	r3, [pc, #120]	@ (8000fd8 <SystemClock_Config+0xcc>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000f7c:	2319      	movs	r3, #25
 8000f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000f80:	23c0      	movs	r3, #192	@ 0xc0
 8000f82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 0320 	add.w	r3, r7, #32
 8000f90:	4618      	mov	r0, r3
 8000f92:	f007 f869 	bl	8008068 <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f9c:	f000 fba0 	bl	80016e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fb6:	f107 030c 	add.w	r3, r7, #12
 8000fba:	2103      	movs	r1, #3
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f007 facb 	bl	8008558 <HAL_RCC_ClockConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fc8:	f000 fb8a 	bl	80016e0 <Error_Handler>
  }
}
 8000fcc:	bf00      	nop
 8000fce:	3750      	adds	r7, #80	@ 0x50
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	40007000 	.word	0x40007000

08000fdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fee:	4b52      	ldr	r3, [pc, #328]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8000ff0:	4a52      	ldr	r2, [pc, #328]	@ (800113c <MX_ADC1_Init+0x160>)
 8000ff2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ff4:	4b50      	ldr	r3, [pc, #320]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8000ff6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ffa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ffc:	4b4e      	ldr	r3, [pc, #312]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001002:	4b4d      	ldr	r3, [pc, #308]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8001004:	2201      	movs	r2, #1
 8001006:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001008:	4b4b      	ldr	r3, [pc, #300]	@ (8001138 <MX_ADC1_Init+0x15c>)
 800100a:	2200      	movs	r2, #0
 800100c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800100e:	4b4a      	ldr	r3, [pc, #296]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8001010:	2200      	movs	r2, #0
 8001012:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001016:	4b48      	ldr	r3, [pc, #288]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8001018:	2200      	movs	r2, #0
 800101a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800101c:	4b46      	ldr	r3, [pc, #280]	@ (8001138 <MX_ADC1_Init+0x15c>)
 800101e:	4a48      	ldr	r2, [pc, #288]	@ (8001140 <MX_ADC1_Init+0x164>)
 8001020:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001022:	4b45      	ldr	r3, [pc, #276]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8001024:	2200      	movs	r2, #0
 8001026:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8001028:	4b43      	ldr	r3, [pc, #268]	@ (8001138 <MX_ADC1_Init+0x15c>)
 800102a:	2208      	movs	r2, #8
 800102c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800102e:	4b42      	ldr	r3, [pc, #264]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8001030:	2201      	movs	r2, #1
 8001032:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001036:	4b40      	ldr	r3, [pc, #256]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8001038:	2201      	movs	r2, #1
 800103a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800103c:	483e      	ldr	r0, [pc, #248]	@ (8001138 <MX_ADC1_Init+0x15c>)
 800103e:	f001 fb93 	bl	8002768 <HAL_ADC_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001048:	f000 fb4a 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800104c:	2300      	movs	r3, #0
 800104e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001050:	2301      	movs	r3, #1
 8001052:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001054:	2300      	movs	r3, #0
 8001056:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001058:	463b      	mov	r3, r7
 800105a:	4619      	mov	r1, r3
 800105c:	4836      	ldr	r0, [pc, #216]	@ (8001138 <MX_ADC1_Init+0x15c>)
 800105e:	f001 fde9 	bl	8002c34 <HAL_ADC_ConfigChannel>
 8001062:	4603      	mov	r3, r0
 8001064:	2b00      	cmp	r3, #0
 8001066:	d001      	beq.n	800106c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001068:	f000 fb3a 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800106c:	2301      	movs	r3, #1
 800106e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001070:	2302      	movs	r3, #2
 8001072:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001074:	463b      	mov	r3, r7
 8001076:	4619      	mov	r1, r3
 8001078:	482f      	ldr	r0, [pc, #188]	@ (8001138 <MX_ADC1_Init+0x15c>)
 800107a:	f001 fddb 	bl	8002c34 <HAL_ADC_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001084:	f000 fb2c 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001088:	2302      	movs	r3, #2
 800108a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800108c:	2303      	movs	r3, #3
 800108e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001090:	463b      	mov	r3, r7
 8001092:	4619      	mov	r1, r3
 8001094:	4828      	ldr	r0, [pc, #160]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8001096:	f001 fdcd 	bl	8002c34 <HAL_ADC_ConfigChannel>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010a0:	f000 fb1e 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80010a4:	2303      	movs	r3, #3
 80010a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010a8:	2304      	movs	r3, #4
 80010aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ac:	463b      	mov	r3, r7
 80010ae:	4619      	mov	r1, r3
 80010b0:	4821      	ldr	r0, [pc, #132]	@ (8001138 <MX_ADC1_Init+0x15c>)
 80010b2:	f001 fdbf 	bl	8002c34 <HAL_ADC_ConfigChannel>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80010bc:	f000 fb10 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80010c0:	2304      	movs	r3, #4
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 80010c4:	2305      	movs	r3, #5
 80010c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c8:	463b      	mov	r3, r7
 80010ca:	4619      	mov	r1, r3
 80010cc:	481a      	ldr	r0, [pc, #104]	@ (8001138 <MX_ADC1_Init+0x15c>)
 80010ce:	f001 fdb1 	bl	8002c34 <HAL_ADC_ConfigChannel>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80010d8:	f000 fb02 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010dc:	2305      	movs	r3, #5
 80010de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80010e0:	2306      	movs	r3, #6
 80010e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e4:	463b      	mov	r3, r7
 80010e6:	4619      	mov	r1, r3
 80010e8:	4813      	ldr	r0, [pc, #76]	@ (8001138 <MX_ADC1_Init+0x15c>)
 80010ea:	f001 fda3 	bl	8002c34 <HAL_ADC_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80010f4:	f000 faf4 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80010f8:	2306      	movs	r3, #6
 80010fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80010fc:	2307      	movs	r3, #7
 80010fe:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001100:	463b      	mov	r3, r7
 8001102:	4619      	mov	r1, r3
 8001104:	480c      	ldr	r0, [pc, #48]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8001106:	f001 fd95 	bl	8002c34 <HAL_ADC_ConfigChannel>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001110:	f000 fae6 	bl	80016e0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001114:	2307      	movs	r3, #7
 8001116:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 8001118:	2308      	movs	r3, #8
 800111a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111c:	463b      	mov	r3, r7
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_ADC1_Init+0x15c>)
 8001122:	f001 fd87 	bl	8002c34 <HAL_ADC_ConfigChannel>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800112c:	f000 fad8 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3710      	adds	r7, #16
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	20000180 	.word	0x20000180
 800113c:	40012000 	.word	0x40012000
 8001140:	0f000001 	.word	0x0f000001

08001144 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <MX_I2C1_Init+0x50>)
 800114a:	4a13      	ldr	r2, [pc, #76]	@ (8001198 <MX_I2C1_Init+0x54>)
 800114c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800114e:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001150:	4a12      	ldr	r2, [pc, #72]	@ (800119c <MX_I2C1_Init+0x58>)
 8001152:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001154:	4b0f      	ldr	r3, [pc, #60]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001156:	2200      	movs	r2, #0
 8001158:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800115a:	4b0e      	ldr	r3, [pc, #56]	@ (8001194 <MX_I2C1_Init+0x50>)
 800115c:	2200      	movs	r2, #0
 800115e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001160:	4b0c      	ldr	r3, [pc, #48]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001162:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001166:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	@ (8001194 <MX_I2C1_Init+0x50>)
 800116a:	2200      	movs	r2, #0
 800116c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800116e:	4b09      	ldr	r3, [pc, #36]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001170:	2200      	movs	r2, #0
 8001172:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001174:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001176:	2200      	movs	r2, #0
 8001178:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	@ (8001194 <MX_I2C1_Init+0x50>)
 800117c:	2200      	movs	r2, #0
 800117e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001180:	4804      	ldr	r0, [pc, #16]	@ (8001194 <MX_I2C1_Init+0x50>)
 8001182:	f002 fe87 	bl	8003e94 <HAL_I2C_Init>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800118c:	f000 faa8 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000228 	.word	0x20000228
 8001198:	40005400 	.word	0x40005400
 800119c:	00061a80 	.word	0x00061a80

080011a0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	@ 0x30
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a6:	f107 0320 	add.w	r3, r7, #32
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011b4:	f107 030c 	add.w	r3, r7, #12
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
 80011c2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011c4:	1d3b      	adds	r3, r7, #4
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011cc:	4b25      	ldr	r3, [pc, #148]	@ (8001264 <MX_TIM1_Init+0xc4>)
 80011ce:	4a26      	ldr	r2, [pc, #152]	@ (8001268 <MX_TIM1_Init+0xc8>)
 80011d0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 80011d2:	4b24      	ldr	r3, [pc, #144]	@ (8001264 <MX_TIM1_Init+0xc4>)
 80011d4:	225f      	movs	r2, #95	@ 0x5f
 80011d6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d8:	4b22      	ldr	r3, [pc, #136]	@ (8001264 <MX_TIM1_Init+0xc4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 80011de:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <MX_TIM1_Init+0xc4>)
 80011e0:	22f9      	movs	r2, #249	@ 0xf9
 80011e2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001264 <MX_TIM1_Init+0xc4>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <MX_TIM1_Init+0xc4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f0:	4b1c      	ldr	r3, [pc, #112]	@ (8001264 <MX_TIM1_Init+0xc4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011f6:	481b      	ldr	r0, [pc, #108]	@ (8001264 <MX_TIM1_Init+0xc4>)
 80011f8:	f007 fb8e 	bl	8008918 <HAL_TIM_Base_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001202:	f000 fa6d 	bl	80016e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001206:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800120a:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800120c:	f107 0320 	add.w	r3, r7, #32
 8001210:	4619      	mov	r1, r3
 8001212:	4814      	ldr	r0, [pc, #80]	@ (8001264 <MX_TIM1_Init+0xc4>)
 8001214:	f007 fe3e 	bl	8008e94 <HAL_TIM_ConfigClockSource>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800121e:	f000 fa5f 	bl	80016e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800122a:	f107 030c 	add.w	r3, r7, #12
 800122e:	4619      	mov	r1, r3
 8001230:	480c      	ldr	r0, [pc, #48]	@ (8001264 <MX_TIM1_Init+0xc4>)
 8001232:	f007 fef6 	bl	8009022 <HAL_TIM_SlaveConfigSynchro>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 800123c:	f000 fa50 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001240:	2300      	movs	r3, #0
 8001242:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001248:	1d3b      	adds	r3, r7, #4
 800124a:	4619      	mov	r1, r3
 800124c:	4805      	ldr	r0, [pc, #20]	@ (8001264 <MX_TIM1_Init+0xc4>)
 800124e:	f008 fa91 	bl	8009774 <HAL_TIMEx_MasterConfigSynchronization>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001258:	f000 fa42 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	3730      	adds	r7, #48	@ 0x30
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	2000033c 	.word	0x2000033c
 8001268:	40010000 	.word	0x40010000

0800126c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08c      	sub	sp, #48	@ 0x30
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001298:	4b25      	ldr	r3, [pc, #148]	@ (8001330 <MX_TIM2_Init+0xc4>)
 800129a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800129e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 80012a0:	4b23      	ldr	r3, [pc, #140]	@ (8001330 <MX_TIM2_Init+0xc4>)
 80012a2:	225f      	movs	r2, #95	@ 0x5f
 80012a4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b22      	ldr	r3, [pc, #136]	@ (8001330 <MX_TIM2_Init+0xc4>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80012ac:	4b20      	ldr	r3, [pc, #128]	@ (8001330 <MX_TIM2_Init+0xc4>)
 80012ae:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80012b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001330 <MX_TIM2_Init+0xc4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ba:	4b1d      	ldr	r3, [pc, #116]	@ (8001330 <MX_TIM2_Init+0xc4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012c0:	481b      	ldr	r0, [pc, #108]	@ (8001330 <MX_TIM2_Init+0xc4>)
 80012c2:	f007 fb29 	bl	8008918 <HAL_TIM_Base_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80012cc:	f000 fa08 	bl	80016e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	4619      	mov	r1, r3
 80012dc:	4814      	ldr	r0, [pc, #80]	@ (8001330 <MX_TIM2_Init+0xc4>)
 80012de:	f007 fdd9 	bl	8008e94 <HAL_TIM_ConfigClockSource>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80012e8:	f000 f9fa 	bl	80016e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	4619      	mov	r1, r3
 80012fa:	480d      	ldr	r0, [pc, #52]	@ (8001330 <MX_TIM2_Init+0xc4>)
 80012fc:	f007 fe91 	bl	8009022 <HAL_TIM_SlaveConfigSynchro>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001306:	f000 f9eb 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001312:	1d3b      	adds	r3, r7, #4
 8001314:	4619      	mov	r1, r3
 8001316:	4806      	ldr	r0, [pc, #24]	@ (8001330 <MX_TIM2_Init+0xc4>)
 8001318:	f008 fa2c 	bl	8009774 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001322:	f000 f9dd 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	3730      	adds	r7, #48	@ 0x30
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000384 	.word	0x20000384

08001334 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b092      	sub	sp, #72	@ 0x48
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001348:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 031c 	add.w	r3, r7, #28
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	463b      	mov	r3, r7
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001374:	4b44      	ldr	r3, [pc, #272]	@ (8001488 <MX_TIM3_Init+0x154>)
 8001376:	4a45      	ldr	r2, [pc, #276]	@ (800148c <MX_TIM3_Init+0x158>)
 8001378:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 800137a:	4b43      	ldr	r3, [pc, #268]	@ (8001488 <MX_TIM3_Init+0x154>)
 800137c:	225f      	movs	r2, #95	@ 0x5f
 800137e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b41      	ldr	r3, [pc, #260]	@ (8001488 <MX_TIM3_Init+0x154>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001386:	4b40      	ldr	r3, [pc, #256]	@ (8001488 <MX_TIM3_Init+0x154>)
 8001388:	f242 720f 	movw	r2, #9999	@ 0x270f
 800138c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138e:	4b3e      	ldr	r3, [pc, #248]	@ (8001488 <MX_TIM3_Init+0x154>)
 8001390:	2200      	movs	r2, #0
 8001392:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001394:	4b3c      	ldr	r3, [pc, #240]	@ (8001488 <MX_TIM3_Init+0x154>)
 8001396:	2200      	movs	r2, #0
 8001398:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800139a:	483b      	ldr	r0, [pc, #236]	@ (8001488 <MX_TIM3_Init+0x154>)
 800139c:	f007 fabc 	bl	8008918 <HAL_TIM_Base_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80013a6:	f000 f99b 	bl	80016e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013aa:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013b0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013b4:	4619      	mov	r1, r3
 80013b6:	4834      	ldr	r0, [pc, #208]	@ (8001488 <MX_TIM3_Init+0x154>)
 80013b8:	f007 fd6c 	bl	8008e94 <HAL_TIM_ConfigClockSource>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80013c2:	f000 f98d 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80013c6:	4830      	ldr	r0, [pc, #192]	@ (8001488 <MX_TIM3_Init+0x154>)
 80013c8:	f007 fb58 	bl	8008a7c <HAL_TIM_PWM_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 80013d2:	f000 f985 	bl	80016e0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e2:	4619      	mov	r1, r3
 80013e4:	4828      	ldr	r0, [pc, #160]	@ (8001488 <MX_TIM3_Init+0x154>)
 80013e6:	f007 fe1c 	bl	8009022 <HAL_TIM_SlaveConfigSynchro>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 80013f0:	f000 f976 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f4:	2300      	movs	r3, #0
 80013f6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f8:	2300      	movs	r3, #0
 80013fa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4821      	ldr	r0, [pc, #132]	@ (8001488 <MX_TIM3_Init+0x154>)
 8001404:	f008 f9b6 	bl	8009774 <HAL_TIMEx_MasterConfigSynchronization>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 800140e:	f000 f967 	bl	80016e0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001412:	2360      	movs	r3, #96	@ 0x60
 8001414:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141a:	2300      	movs	r3, #0
 800141c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001422:	463b      	mov	r3, r7
 8001424:	2200      	movs	r2, #0
 8001426:	4619      	mov	r1, r3
 8001428:	4817      	ldr	r0, [pc, #92]	@ (8001488 <MX_TIM3_Init+0x154>)
 800142a:	f007 fc71 	bl	8008d10 <HAL_TIM_PWM_ConfigChannel>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001434:	f000 f954 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001438:	463b      	mov	r3, r7
 800143a:	2204      	movs	r2, #4
 800143c:	4619      	mov	r1, r3
 800143e:	4812      	ldr	r0, [pc, #72]	@ (8001488 <MX_TIM3_Init+0x154>)
 8001440:	f007 fc66 	bl	8008d10 <HAL_TIM_PWM_ConfigChannel>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 800144a:	f000 f949 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	2208      	movs	r2, #8
 8001452:	4619      	mov	r1, r3
 8001454:	480c      	ldr	r0, [pc, #48]	@ (8001488 <MX_TIM3_Init+0x154>)
 8001456:	f007 fc5b 	bl	8008d10 <HAL_TIM_PWM_ConfigChannel>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001460:	f000 f93e 	bl	80016e0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	220c      	movs	r2, #12
 8001468:	4619      	mov	r1, r3
 800146a:	4807      	ldr	r0, [pc, #28]	@ (8001488 <MX_TIM3_Init+0x154>)
 800146c:	f007 fc50 	bl	8008d10 <HAL_TIM_PWM_ConfigChannel>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001476:	f000 f933 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800147a:	4803      	ldr	r0, [pc, #12]	@ (8001488 <MX_TIM3_Init+0x154>)
 800147c:	f000 fcc6 	bl	8001e0c <HAL_TIM_MspPostInit>

}
 8001480:	bf00      	nop
 8001482:	3748      	adds	r7, #72	@ 0x48
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	200003cc 	.word	0x200003cc
 800148c:	40000400 	.word	0x40000400

08001490 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b086      	sub	sp, #24
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001496:	f107 0308 	add.w	r3, r7, #8
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]
 80014a0:	609a      	str	r2, [r3, #8]
 80014a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014a4:	463b      	mov	r3, r7
 80014a6:	2200      	movs	r2, #0
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001524 <MX_TIM4_Init+0x94>)
 80014ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001528 <MX_TIM4_Init+0x98>)
 80014b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 191;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001524 <MX_TIM4_Init+0x94>)
 80014b4:	22bf      	movs	r2, #191	@ 0xbf
 80014b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <MX_TIM4_Init+0x94>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 80014be:	4b19      	ldr	r3, [pc, #100]	@ (8001524 <MX_TIM4_Init+0x94>)
 80014c0:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80014c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c6:	4b17      	ldr	r3, [pc, #92]	@ (8001524 <MX_TIM4_Init+0x94>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014cc:	4b15      	ldr	r3, [pc, #84]	@ (8001524 <MX_TIM4_Init+0x94>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014d2:	4814      	ldr	r0, [pc, #80]	@ (8001524 <MX_TIM4_Init+0x94>)
 80014d4:	f007 fa20 	bl	8008918 <HAL_TIM_Base_Init>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80014de:	f000 f8ff 	bl	80016e0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014e6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014e8:	f107 0308 	add.w	r3, r7, #8
 80014ec:	4619      	mov	r1, r3
 80014ee:	480d      	ldr	r0, [pc, #52]	@ (8001524 <MX_TIM4_Init+0x94>)
 80014f0:	f007 fcd0 	bl	8008e94 <HAL_TIM_ConfigClockSource>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 80014fa:	f000 f8f1 	bl	80016e0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001506:	463b      	mov	r3, r7
 8001508:	4619      	mov	r1, r3
 800150a:	4806      	ldr	r0, [pc, #24]	@ (8001524 <MX_TIM4_Init+0x94>)
 800150c:	f008 f932 	bl	8009774 <HAL_TIMEx_MasterConfigSynchronization>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001516:	f000 f8e3 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000414 	.word	0x20000414
 8001528:	40000800 	.word	0x40000800

0800152c <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8001530:	4b12      	ldr	r3, [pc, #72]	@ (800157c <MX_USART1_Init+0x50>)
 8001532:	4a13      	ldr	r2, [pc, #76]	@ (8001580 <MX_USART1_Init+0x54>)
 8001534:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <MX_USART1_Init+0x50>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800153e:	4b0f      	ldr	r3, [pc, #60]	@ (800157c <MX_USART1_Init+0x50>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8001544:	4b0d      	ldr	r3, [pc, #52]	@ (800157c <MX_USART1_Init+0x50>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800154a:	4b0c      	ldr	r3, [pc, #48]	@ (800157c <MX_USART1_Init+0x50>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8001550:	4b0a      	ldr	r3, [pc, #40]	@ (800157c <MX_USART1_Init+0x50>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8001556:	4b09      	ldr	r3, [pc, #36]	@ (800157c <MX_USART1_Init+0x50>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800155c:	4b07      	ldr	r3, [pc, #28]	@ (800157c <MX_USART1_Init+0x50>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8001562:	4b06      	ldr	r3, [pc, #24]	@ (800157c <MX_USART1_Init+0x50>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8001568:	4804      	ldr	r0, [pc, #16]	@ (800157c <MX_USART1_Init+0x50>)
 800156a:	f008 f985 	bl	8009878 <HAL_USART_Init>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8001574:	f000 f8b4 	bl	80016e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	2000045c 	.word	0x2000045c
 8001580:	40011000 	.word	0x40011000

08001584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b1b      	ldr	r3, [pc, #108]	@ (80015fc <MX_DMA_Init+0x78>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001592:	4a1a      	ldr	r2, [pc, #104]	@ (80015fc <MX_DMA_Init+0x78>)
 8001594:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001598:	6313      	str	r3, [r2, #48]	@ 0x30
 800159a:	4b18      	ldr	r3, [pc, #96]	@ (80015fc <MX_DMA_Init+0x78>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800159e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <MX_DMA_Init+0x78>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <MX_DMA_Init+0x78>)
 80015b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <MX_DMA_Init+0x78>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015be:	603b      	str	r3, [r7, #0]
 80015c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80015c2:	2200      	movs	r2, #0
 80015c4:	2100      	movs	r1, #0
 80015c6:	200b      	movs	r0, #11
 80015c8:	f001 fec9 	bl	800335e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80015cc:	200b      	movs	r0, #11
 80015ce:	f001 fee2 	bl	8003396 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	200c      	movs	r0, #12
 80015d8:	f001 fec1 	bl	800335e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80015dc:	200c      	movs	r0, #12
 80015de:	f001 feda 	bl	8003396 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	2038      	movs	r0, #56	@ 0x38
 80015e8:	f001 feb9 	bl	800335e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80015ec:	2038      	movs	r0, #56	@ 0x38
 80015ee:	f001 fed2 	bl	8003396 <HAL_NVIC_EnableIRQ>

}
 80015f2:	bf00      	nop
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40023800 	.word	0x40023800

08001600 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b08a      	sub	sp, #40	@ 0x28
 8001604:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	2200      	movs	r2, #0
 800160c:	601a      	str	r2, [r3, #0]
 800160e:	605a      	str	r2, [r3, #4]
 8001610:	609a      	str	r2, [r3, #8]
 8001612:	60da      	str	r2, [r3, #12]
 8001614:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b2e      	ldr	r3, [pc, #184]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	4a2d      	ldr	r2, [pc, #180]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 8001620:	f043 0304 	orr.w	r3, r3, #4
 8001624:	6313      	str	r3, [r2, #48]	@ 0x30
 8001626:	4b2b      	ldr	r3, [pc, #172]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	f003 0304 	and.w	r3, r3, #4
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b27      	ldr	r3, [pc, #156]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a26      	ldr	r2, [pc, #152]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 800163c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b24      	ldr	r3, [pc, #144]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	4b20      	ldr	r3, [pc, #128]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a1f      	ldr	r2, [pc, #124]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	4b1d      	ldr	r3, [pc, #116]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b19      	ldr	r3, [pc, #100]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001672:	4a18      	ldr	r2, [pc, #96]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 8001674:	f043 0302 	orr.w	r3, r3, #2
 8001678:	6313      	str	r3, [r2, #48]	@ 0x30
 800167a:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <MX_GPIO_Init+0xd4>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800168c:	4812      	ldr	r0, [pc, #72]	@ (80016d8 <MX_GPIO_Init+0xd8>)
 800168e:	f002 fbcd 	bl	8003e2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001692:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001696:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001698:	2301      	movs	r3, #1
 800169a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a0:	2300      	movs	r3, #0
 80016a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80016a4:	f107 0314 	add.w	r3, r7, #20
 80016a8:	4619      	mov	r1, r3
 80016aa:	480b      	ldr	r0, [pc, #44]	@ (80016d8 <MX_GPIO_Init+0xd8>)
 80016ac:	f002 fa3a 	bl	8003b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : SW0_Pin */
  GPIO_InitStruct.Pin = SW0_Pin;
 80016b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80016b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ba:	2300      	movs	r3, #0
 80016bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SW0_GPIO_Port, &GPIO_InitStruct);
 80016be:	f107 0314 	add.w	r3, r7, #20
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_GPIO_Init+0xdc>)
 80016c6:	f002 fa2d 	bl	8003b24 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80016ca:	bf00      	nop
 80016cc:	3728      	adds	r7, #40	@ 0x28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023800 	.word	0x40023800
 80016d8:	40020800 	.word	0x40020800
 80016dc:	40020400 	.word	0x40020400

080016e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
}
 80016e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <Error_Handler+0x8>

080016ec <mpu6050_ADC_ConfCpltCallback>:
int16_t gz_real;

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = (uint8_t *)PtrRx;
 80016f4:	4a04      	ldr	r2, [pc, #16]	@ (8001708 <mpu6050_ADC_ConfCpltCallback+0x1c>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6013      	str	r3, [r2, #0]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000714 	.word	0x20000714

0800170c <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001714:	4a04      	ldr	r2, [pc, #16]	@ (8001728 <mpu6050_Attach_MemWrite+0x1c>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	bf00      	nop
 800171c:	370c      	adds	r7, #12
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	20000718 	.word	0x20000718

0800172c <mpu6050_Attach_MemReadDMA>:

void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 8001734:	4a04      	ldr	r2, [pc, #16]	@ (8001748 <mpu6050_Attach_MemReadDMA+0x1c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	370c      	adds	r7, #12
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	2000071c 	.word	0x2000071c

0800174c <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 800174c:	b590      	push	{r4, r7, lr}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	460b      	mov	r3, r1
 8001756:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 8001758:	4b05      	ldr	r3, [pc, #20]	@ (8001770 <mpu6050_WriteData+0x24>)
 800175a:	681c      	ldr	r4, [r3, #0]
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	2201      	movs	r2, #1
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	20d0      	movs	r0, #208	@ 0xd0
 8001764:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bd90      	pop	{r4, r7, pc}
 800176e:	bf00      	nop
 8001770:	20000718 	.word	0x20000718

08001774 <mpu6050_Init>:
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
}


void mpu6050_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 800177a:	2300      	movs	r3, #0
 800177c:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 800177e:	1dfb      	adds	r3, r7, #7
 8001780:	216b      	movs	r1, #107	@ 0x6b
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ffe2 	bl	800174c <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    //data = 0x00;
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 8001788:	1dfb      	adds	r3, r7, #7
 800178a:	211c      	movs	r1, #28
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ffdd 	bl	800174c <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    //data = 0x00;
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 8001792:	1dfb      	adds	r3, r7, #7
 8001794:	211b      	movs	r1, #27
 8001796:	4618      	mov	r0, r3
 8001798:	f7ff ffd8 	bl	800174c <mpu6050_WriteData>

}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80017a8:	bf00      	nop
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
	...

080017b4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	4603      	mov	r3, r0
 80017bc:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 80017be:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <ssd1306_WriteCommand+0x20>)
 80017c0:	681c      	ldr	r4, [r3, #0]
 80017c2:	1df9      	adds	r1, r7, #7
 80017c4:	2300      	movs	r3, #0
 80017c6:	2201      	movs	r2, #1
 80017c8:	2078      	movs	r0, #120	@ 0x78
 80017ca:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	20000724 	.word	0x20000724

080017d8 <ssd1306_WriteData>:
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 80017e2:	4b06      	ldr	r3, [pc, #24]	@ (80017fc <ssd1306_WriteData+0x24>)
 80017e4:	681c      	ldr	r4, [r3, #0]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	b2da      	uxtb	r2, r3
 80017ea:	2340      	movs	r3, #64	@ 0x40
 80017ec:	6879      	ldr	r1, [r7, #4]
 80017ee:	2078      	movs	r0, #120	@ 0x78
 80017f0:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd90      	pop	{r4, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000724 	.word	0x20000724

08001800 <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 8001808:	4a04      	ldr	r2, [pc, #16]	@ (800181c <ssd1306_Attach_MemWriteDMA+0x1c>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6013      	str	r3, [r2, #0]
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000728 	.word	0x20000728

08001820 <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001828:	4a04      	ldr	r2, [pc, #16]	@ (800183c <ssd1306_Attach_MemWrite+0x1c>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	20000724 	.word	0x20000724

08001840 <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <ssd1306_ADC_ConfCpltCallback+0x1c>)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6013      	str	r3, [r2, #0]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	20000720 	.word	0x20000720

08001860 <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001864:	f7ff ff9e 	bl	80017a4 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8001868:	2064      	movs	r0, #100	@ 0x64
 800186a:	f000 ff59 	bl	8002720 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800186e:	2000      	movs	r0, #0
 8001870:	f000 f8b4 	bl	80019dc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001874:	2020      	movs	r0, #32
 8001876:	f7ff ff9d 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff ff9a 	bl	80017b4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001880:	20b0      	movs	r0, #176	@ 0xb0
 8001882:	f7ff ff97 	bl	80017b4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001886:	20c8      	movs	r0, #200	@ 0xc8
 8001888:	f7ff ff94 	bl	80017b4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800188c:	2000      	movs	r0, #0
 800188e:	f7ff ff91 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001892:	2010      	movs	r0, #16
 8001894:	f7ff ff8e 	bl	80017b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001898:	2040      	movs	r0, #64	@ 0x40
 800189a:	f7ff ff8b 	bl	80017b4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800189e:	20ff      	movs	r0, #255	@ 0xff
 80018a0:	f000 f888 	bl	80019b4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80018a4:	20a1      	movs	r0, #161	@ 0xa1
 80018a6:	f7ff ff85 	bl	80017b4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80018aa:	20a6      	movs	r0, #166	@ 0xa6
 80018ac:	f7ff ff82 	bl	80017b4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80018b0:	20a8      	movs	r0, #168	@ 0xa8
 80018b2:	f7ff ff7f 	bl	80017b4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80018b6:	203f      	movs	r0, #63	@ 0x3f
 80018b8:	f7ff ff7c 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80018bc:	20a4      	movs	r0, #164	@ 0xa4
 80018be:	f7ff ff79 	bl	80017b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80018c2:	20d3      	movs	r0, #211	@ 0xd3
 80018c4:	f7ff ff76 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80018c8:	2000      	movs	r0, #0
 80018ca:	f7ff ff73 	bl	80017b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80018ce:	20d5      	movs	r0, #213	@ 0xd5
 80018d0:	f7ff ff70 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80018d4:	20f0      	movs	r0, #240	@ 0xf0
 80018d6:	f7ff ff6d 	bl	80017b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80018da:	20d9      	movs	r0, #217	@ 0xd9
 80018dc:	f7ff ff6a 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80018e0:	2022      	movs	r0, #34	@ 0x22
 80018e2:	f7ff ff67 	bl	80017b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80018e6:	20da      	movs	r0, #218	@ 0xda
 80018e8:	f7ff ff64 	bl	80017b4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80018ec:	2012      	movs	r0, #18
 80018ee:	f7ff ff61 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80018f2:	20db      	movs	r0, #219	@ 0xdb
 80018f4:	f7ff ff5e 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80018f8:	2020      	movs	r0, #32
 80018fa:	f7ff ff5b 	bl	80017b4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80018fe:	208d      	movs	r0, #141	@ 0x8d
 8001900:	f7ff ff58 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001904:	2014      	movs	r0, #20
 8001906:	f7ff ff55 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800190a:	2001      	movs	r0, #1
 800190c:	f000 f866 	bl	80019dc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001910:	2000      	movs	r0, #0
 8001912:	f000 f80f 	bl	8001934 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001916:	f000 f825 	bl	8001964 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800191a:	4b05      	ldr	r3, [pc, #20]	@ (8001930 <ssd1306_Init+0xd0>)
 800191c:	2200      	movs	r2, #0
 800191e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <ssd1306_Init+0xd0>)
 8001922:	2200      	movs	r2, #0
 8001924:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8001926:	4b02      	ldr	r3, [pc, #8]	@ (8001930 <ssd1306_Init+0xd0>)
 8001928:	2201      	movs	r2, #1
 800192a:	711a      	strb	r2, [r3, #4]
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20000b2c 	.word	0x20000b2c

08001934 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	4603      	mov	r3, r0
 800193c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800193e:	79fb      	ldrb	r3, [r7, #7]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d101      	bne.n	8001948 <ssd1306_Fill+0x14>
 8001944:	2300      	movs	r3, #0
 8001946:	e000      	b.n	800194a <ssd1306_Fill+0x16>
 8001948:	23ff      	movs	r3, #255	@ 0xff
 800194a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800194e:	4619      	mov	r1, r3
 8001950:	4803      	ldr	r0, [pc, #12]	@ (8001960 <ssd1306_Fill+0x2c>)
 8001952:	f00c fe61 	bl	800e618 <memset>
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	2000072c 	.word	0x2000072c

08001964 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001964:	b580      	push	{r7, lr}
 8001966:	b082      	sub	sp, #8
 8001968:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800196a:	2300      	movs	r3, #0
 800196c:	71fb      	strb	r3, [r7, #7]
 800196e:	e016      	b.n	800199e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001970:	79fb      	ldrb	r3, [r7, #7]
 8001972:	3b50      	subs	r3, #80	@ 0x50
 8001974:	b2db      	uxtb	r3, r3
 8001976:	4618      	mov	r0, r3
 8001978:	f7ff ff1c 	bl	80017b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800197c:	2000      	movs	r0, #0
 800197e:	f7ff ff19 	bl	80017b4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001982:	2010      	movs	r0, #16
 8001984:	f7ff ff16 	bl	80017b4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	01db      	lsls	r3, r3, #7
 800198c:	4a08      	ldr	r2, [pc, #32]	@ (80019b0 <ssd1306_UpdateScreen+0x4c>)
 800198e:	4413      	add	r3, r2
 8001990:	2180      	movs	r1, #128	@ 0x80
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff ff20 	bl	80017d8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001998:	79fb      	ldrb	r3, [r7, #7]
 800199a:	3301      	adds	r3, #1
 800199c:	71fb      	strb	r3, [r7, #7]
 800199e:	79fb      	ldrb	r3, [r7, #7]
 80019a0:	2b07      	cmp	r3, #7
 80019a2:	d9e5      	bls.n	8001970 <ssd1306_UpdateScreen+0xc>
    }
}
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	3708      	adds	r7, #8
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	2000072c 	.word	0x2000072c

080019b4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80019be:	2381      	movs	r3, #129	@ 0x81
 80019c0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fef5 	bl	80017b4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7ff fef1 	bl	80017b4 <ssd1306_WriteCommand>
}
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	4603      	mov	r3, r0
 80019e4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80019e6:	79fb      	ldrb	r3, [r7, #7]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80019ec:	23af      	movs	r3, #175	@ 0xaf
 80019ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80019f0:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <ssd1306_SetDisplayOn+0x38>)
 80019f2:	2201      	movs	r2, #1
 80019f4:	715a      	strb	r2, [r3, #5]
 80019f6:	e004      	b.n	8001a02 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80019f8:	23ae      	movs	r3, #174	@ 0xae
 80019fa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <ssd1306_SetDisplayOn+0x38>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fed5 	bl	80017b4 <ssd1306_WriteCommand>
}
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	20000b2c 	.word	0x20000b2c

08001a18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b083      	sub	sp, #12
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	607b      	str	r3, [r7, #4]
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a26:	4a0f      	ldr	r2, [pc, #60]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	603b      	str	r3, [r7, #0]
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	4a08      	ldr	r2, [pc, #32]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <HAL_MspInit+0x4c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a52:	603b      	str	r3, [r7, #0]
 8001a54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	40023800 	.word	0x40023800

08001a68 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08a      	sub	sp, #40	@ 0x28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a32      	ldr	r2, [pc, #200]	@ (8001b50 <HAL_ADC_MspInit+0xe8>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d15e      	bne.n	8001b48 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	613b      	str	r3, [r7, #16]
 8001a8e:	4b31      	ldr	r3, [pc, #196]	@ (8001b54 <HAL_ADC_MspInit+0xec>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a92:	4a30      	ldr	r2, [pc, #192]	@ (8001b54 <HAL_ADC_MspInit+0xec>)
 8001a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a98:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a9a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b54 <HAL_ADC_MspInit+0xec>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa2:	613b      	str	r3, [r7, #16]
 8001aa4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60fb      	str	r3, [r7, #12]
 8001aaa:	4b2a      	ldr	r3, [pc, #168]	@ (8001b54 <HAL_ADC_MspInit+0xec>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	4a29      	ldr	r2, [pc, #164]	@ (8001b54 <HAL_ADC_MspInit+0xec>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab6:	4b27      	ldr	r3, [pc, #156]	@ (8001b54 <HAL_ADC_MspInit+0xec>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001ac2:	23ff      	movs	r3, #255	@ 0xff
 8001ac4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ace:	f107 0314 	add.w	r3, r7, #20
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4820      	ldr	r0, [pc, #128]	@ (8001b58 <HAL_ADC_MspInit+0xf0>)
 8001ad6:	f002 f825 	bl	8003b24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001ada:	4b20      	ldr	r3, [pc, #128]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001adc:	4a20      	ldr	r2, [pc, #128]	@ (8001b60 <HAL_ADC_MspInit+0xf8>)
 8001ade:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001ae0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ae6:	4b1d      	ldr	r3, [pc, #116]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aec:	4b1b      	ldr	r3, [pc, #108]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001af2:	4b1a      	ldr	r3, [pc, #104]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001af4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001af8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001afa:	4b18      	ldr	r3, [pc, #96]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001afc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b00:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b02:	4b16      	ldr	r3, [pc, #88]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001b04:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b08:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001b0a:	4b14      	ldr	r3, [pc, #80]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001b10:	4b12      	ldr	r3, [pc, #72]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b16:	4b11      	ldr	r3, [pc, #68]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001b1c:	480f      	ldr	r0, [pc, #60]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001b1e:	f001 fc55 	bl	80033cc <HAL_DMA_Init>
 8001b22:	4603      	mov	r3, r0
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d001      	beq.n	8001b2c <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001b28:	f7ff fdda 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001b30:	639a      	str	r2, [r3, #56]	@ 0x38
 8001b32:	4a0a      	ldr	r2, [pc, #40]	@ (8001b5c <HAL_ADC_MspInit+0xf4>)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001b38:	2200      	movs	r2, #0
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	2012      	movs	r0, #18
 8001b3e:	f001 fc0e 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001b42:	2012      	movs	r0, #18
 8001b44:	f001 fc27 	bl	8003396 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001b48:	bf00      	nop
 8001b4a:	3728      	adds	r7, #40	@ 0x28
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	40012000 	.word	0x40012000
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000
 8001b5c:	200001c8 	.word	0x200001c8
 8001b60:	40026410 	.word	0x40026410

08001b64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	@ 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a4f      	ldr	r2, [pc, #316]	@ (8001cc0 <HAL_I2C_MspInit+0x15c>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	f040 8098 	bne.w	8001cb8 <HAL_I2C_MspInit+0x154>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8001cc4 <HAL_I2C_MspInit+0x160>)
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b90:	4a4c      	ldr	r2, [pc, #304]	@ (8001cc4 <HAL_I2C_MspInit+0x160>)
 8001b92:	f043 0302 	orr.w	r3, r3, #2
 8001b96:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b98:	4b4a      	ldr	r3, [pc, #296]	@ (8001cc4 <HAL_I2C_MspInit+0x160>)
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b9c:	f003 0302 	and.w	r3, r3, #2
 8001ba0:	613b      	str	r3, [r7, #16]
 8001ba2:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ba4:	23c0      	movs	r3, #192	@ 0xc0
 8001ba6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ba8:	2312      	movs	r3, #18
 8001baa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001bb4:	2304      	movs	r3, #4
 8001bb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bb8:	f107 0314 	add.w	r3, r7, #20
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4842      	ldr	r0, [pc, #264]	@ (8001cc8 <HAL_I2C_MspInit+0x164>)
 8001bc0:	f001 ffb0 	bl	8003b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc4 <HAL_I2C_MspInit+0x160>)
 8001bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8001cc4 <HAL_I2C_MspInit+0x160>)
 8001bce:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc4 <HAL_I2C_MspInit+0x160>)
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8001be0:	4b3a      	ldr	r3, [pc, #232]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001be2:	4a3b      	ldr	r2, [pc, #236]	@ (8001cd0 <HAL_I2C_MspInit+0x16c>)
 8001be4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8001be6:	4b39      	ldr	r3, [pc, #228]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001be8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001bec:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bee:	4b37      	ldr	r3, [pc, #220]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bf4:	4b35      	ldr	r3, [pc, #212]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bfa:	4b34      	ldr	r3, [pc, #208]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001bfc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c00:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c02:	4b32      	ldr	r3, [pc, #200]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c08:	4b30      	ldr	r3, [pc, #192]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001c0e:	4b2f      	ldr	r3, [pc, #188]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c14:	4b2d      	ldr	r3, [pc, #180]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001c20:	482a      	ldr	r0, [pc, #168]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001c22:	f001 fbd3 	bl	80033cc <HAL_DMA_Init>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8001c2c:	f7ff fd58 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	4a26      	ldr	r2, [pc, #152]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001c34:	639a      	str	r2, [r3, #56]	@ 0x38
 8001c36:	4a25      	ldr	r2, [pc, #148]	@ (8001ccc <HAL_I2C_MspInit+0x168>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8001c3c:	4b25      	ldr	r3, [pc, #148]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c3e:	4a26      	ldr	r2, [pc, #152]	@ (8001cd8 <HAL_I2C_MspInit+0x174>)
 8001c40:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8001c42:	4b24      	ldr	r3, [pc, #144]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001c48:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c4a:	4b22      	ldr	r3, [pc, #136]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c4c:	2240      	movs	r2, #64	@ 0x40
 8001c4e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c50:	4b20      	ldr	r3, [pc, #128]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c56:	4b1f      	ldr	r3, [pc, #124]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c5c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c5e:	4b1d      	ldr	r3, [pc, #116]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c64:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8001c6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c70:	4b18      	ldr	r3, [pc, #96]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c76:	4b17      	ldr	r3, [pc, #92]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001c7c:	4815      	ldr	r0, [pc, #84]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c7e:	f001 fba5 	bl	80033cc <HAL_DMA_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_I2C_MspInit+0x128>
    {
      Error_Handler();
 8001c88:	f7ff fd2a 	bl	80016e0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	4a11      	ldr	r2, [pc, #68]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c92:	4a10      	ldr	r2, [pc, #64]	@ (8001cd4 <HAL_I2C_MspInit+0x170>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	201f      	movs	r0, #31
 8001c9e:	f001 fb5e 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001ca2:	201f      	movs	r0, #31
 8001ca4:	f001 fb77 	bl	8003396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2020      	movs	r0, #32
 8001cae:	f001 fb56 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001cb2:	2020      	movs	r0, #32
 8001cb4:	f001 fb6f 	bl	8003396 <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001cb8:	bf00      	nop
 8001cba:	3728      	adds	r7, #40	@ 0x28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40005400 	.word	0x40005400
 8001cc4:	40023800 	.word	0x40023800
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	2000027c 	.word	0x2000027c
 8001cd0:	40026010 	.word	0x40026010
 8001cd4:	200002dc 	.word	0x200002dc
 8001cd8:	400260a0 	.word	0x400260a0

08001cdc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a44      	ldr	r2, [pc, #272]	@ (8001dfc <HAL_TIM_Base_MspInit+0x120>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d12e      	bne.n	8001d4c <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001cee:	2300      	movs	r3, #0
 8001cf0:	617b      	str	r3, [r7, #20]
 8001cf2:	4b43      	ldr	r3, [pc, #268]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cf6:	4a42      	ldr	r2, [pc, #264]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cfe:	4b40      	ldr	r3, [pc, #256]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001d00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2018      	movs	r0, #24
 8001d10:	f001 fb25 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001d14:	2018      	movs	r0, #24
 8001d16:	f001 fb3e 	bl	8003396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	2019      	movs	r0, #25
 8001d20:	f001 fb1d 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d24:	2019      	movs	r0, #25
 8001d26:	f001 fb36 	bl	8003396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	201a      	movs	r0, #26
 8001d30:	f001 fb15 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d34:	201a      	movs	r0, #26
 8001d36:	f001 fb2e 	bl	8003396 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	201b      	movs	r0, #27
 8001d40:	f001 fb0d 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001d44:	201b      	movs	r0, #27
 8001d46:	f001 fb26 	bl	8003396 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001d4a:	e052      	b.n	8001df2 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM2)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d54:	d116      	bne.n	8001d84 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d56:	2300      	movs	r3, #0
 8001d58:	613b      	str	r3, [r7, #16]
 8001d5a:	4b29      	ldr	r3, [pc, #164]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	4a28      	ldr	r2, [pc, #160]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001d60:	f043 0301 	orr.w	r3, r3, #1
 8001d64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d66:	4b26      	ldr	r3, [pc, #152]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d72:	2200      	movs	r2, #0
 8001d74:	2100      	movs	r1, #0
 8001d76:	201c      	movs	r0, #28
 8001d78:	f001 faf1 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d7c:	201c      	movs	r0, #28
 8001d7e:	f001 fb0a 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 8001d82:	e036      	b.n	8001df2 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM3)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a1e      	ldr	r2, [pc, #120]	@ (8001e04 <HAL_TIM_Base_MspInit+0x128>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d116      	bne.n	8001dbc <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d8e:	2300      	movs	r3, #0
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	4b1b      	ldr	r3, [pc, #108]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d96:	4a1a      	ldr	r2, [pc, #104]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001d98:	f043 0302 	orr.w	r3, r3, #2
 8001d9c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9e:	4b18      	ldr	r3, [pc, #96]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001daa:	2200      	movs	r2, #0
 8001dac:	2100      	movs	r1, #0
 8001dae:	201d      	movs	r0, #29
 8001db0:	f001 fad5 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001db4:	201d      	movs	r0, #29
 8001db6:	f001 faee 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 8001dba:	e01a      	b.n	8001df2 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM4)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a11      	ldr	r2, [pc, #68]	@ (8001e08 <HAL_TIM_Base_MspInit+0x12c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d115      	bne.n	8001df2 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	4b0d      	ldr	r3, [pc, #52]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dce:	4a0c      	ldr	r2, [pc, #48]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001dd0:	f043 0304 	orr.w	r3, r3, #4
 8001dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001e00 <HAL_TIM_Base_MspInit+0x124>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	f003 0304 	and.w	r3, r3, #4
 8001dde:	60bb      	str	r3, [r7, #8]
 8001de0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2100      	movs	r1, #0
 8001de6:	201e      	movs	r0, #30
 8001de8:	f001 fab9 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001dec:	201e      	movs	r0, #30
 8001dee:	f001 fad2 	bl	8003396 <HAL_NVIC_EnableIRQ>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40000800 	.word	0x40000800

08001e0c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b088      	sub	sp, #32
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a12      	ldr	r2, [pc, #72]	@ (8001e74 <HAL_TIM_MspPostInit+0x68>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d11d      	bne.n	8001e6a <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60bb      	str	r3, [r7, #8]
 8001e32:	4b11      	ldr	r3, [pc, #68]	@ (8001e78 <HAL_TIM_MspPostInit+0x6c>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	4a10      	ldr	r2, [pc, #64]	@ (8001e78 <HAL_TIM_MspPostInit+0x6c>)
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001e78 <HAL_TIM_MspPostInit+0x6c>)
 8001e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	60bb      	str	r3, [r7, #8]
 8001e48:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001e4a:	2333      	movs	r3, #51	@ 0x33
 8001e4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4e:	2302      	movs	r3, #2
 8001e50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e56:	2300      	movs	r3, #0
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e5a:	2302      	movs	r3, #2
 8001e5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e5e:	f107 030c 	add.w	r3, r7, #12
 8001e62:	4619      	mov	r1, r3
 8001e64:	4805      	ldr	r0, [pc, #20]	@ (8001e7c <HAL_TIM_MspPostInit+0x70>)
 8001e66:	f001 fe5d 	bl	8003b24 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e6a:	bf00      	nop
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	40000400 	.word	0x40000400
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40020400 	.word	0x40020400

08001e80 <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b08a      	sub	sp, #40	@ 0x28
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	605a      	str	r2, [r3, #4]
 8001e92:	609a      	str	r2, [r3, #8]
 8001e94:	60da      	str	r2, [r3, #12]
 8001e96:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <HAL_USART_MspInit+0x94>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d134      	bne.n	8001f0c <HAL_USART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	613b      	str	r3, [r7, #16]
 8001ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8001f18 <HAL_USART_MspInit+0x98>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8001f18 <HAL_USART_MspInit+0x98>)
 8001eac:	f043 0310 	orr.w	r3, r3, #16
 8001eb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eb2:	4b19      	ldr	r3, [pc, #100]	@ (8001f18 <HAL_USART_MspInit+0x98>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f003 0310 	and.w	r3, r3, #16
 8001eba:	613b      	str	r3, [r7, #16]
 8001ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	60fb      	str	r3, [r7, #12]
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <HAL_USART_MspInit+0x98>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	4a14      	ldr	r2, [pc, #80]	@ (8001f18 <HAL_USART_MspInit+0x98>)
 8001ec8:	f043 0301 	orr.w	r3, r3, #1
 8001ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ece:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <HAL_USART_MspInit+0x98>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed2:	f003 0301 	and.w	r3, r3, #1
 8001ed6:	60fb      	str	r3, [r7, #12]
 8001ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8001eda:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8001ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ee8:	2303      	movs	r3, #3
 8001eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001eec:	2307      	movs	r3, #7
 8001eee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef0:	f107 0314 	add.w	r3, r7, #20
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4809      	ldr	r0, [pc, #36]	@ (8001f1c <HAL_USART_MspInit+0x9c>)
 8001ef8:	f001 fe14 	bl	8003b24 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001efc:	2200      	movs	r2, #0
 8001efe:	2100      	movs	r1, #0
 8001f00:	2025      	movs	r0, #37	@ 0x25
 8001f02:	f001 fa2c 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001f06:	2025      	movs	r0, #37	@ 0x25
 8001f08:	f001 fa45 	bl	8003396 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	@ 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40011000 	.word	0x40011000
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <NMI_Handler+0x4>

08001f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <MemManage_Handler+0x4>

08001f38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f76:	f000 fbb3 	bl	80026e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
	...

08001f80 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001f84:	4802      	ldr	r0, [pc, #8]	@ (8001f90 <DMA1_Stream0_IRQHandler+0x10>)
 8001f86:	f001 fb49 	bl	800361c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000027c 	.word	0x2000027c

08001f94 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001f98:	4802      	ldr	r0, [pc, #8]	@ (8001fa4 <DMA1_Stream6_IRQHandler+0x10>)
 8001f9a:	f001 fb3f 	bl	800361c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	200002dc 	.word	0x200002dc

08001fa8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001fac:	4802      	ldr	r0, [pc, #8]	@ (8001fb8 <ADC_IRQHandler+0x10>)
 8001fae:	f000 fc1e 	bl	80027ee <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	20000180 	.word	0x20000180

08001fbc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fc0:	4802      	ldr	r0, [pc, #8]	@ (8001fcc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001fc2:	f006 fdb4 	bl	8008b2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	2000033c 	.word	0x2000033c

08001fd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fd4:	4802      	ldr	r0, [pc, #8]	@ (8001fe0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001fd6:	f006 fdaa 	bl	8008b2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	2000033c 	.word	0x2000033c

08001fe4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001fe8:	4802      	ldr	r0, [pc, #8]	@ (8001ff4 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001fea:	f006 fda0 	bl	8008b2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001fee:	bf00      	nop
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000033c 	.word	0x2000033c

08001ff8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ffc:	4802      	ldr	r0, [pc, #8]	@ (8002008 <TIM1_CC_IRQHandler+0x10>)
 8001ffe:	f006 fd96 	bl	8008b2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002002:	bf00      	nop
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	2000033c 	.word	0x2000033c

0800200c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <TIM2_IRQHandler+0x10>)
 8002012:	f006 fd8c 	bl	8008b2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	20000384 	.word	0x20000384

08002020 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <TIM3_IRQHandler+0x10>)
 8002026:	f006 fd82 	bl	8008b2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200003cc 	.word	0x200003cc

08002034 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <TIM4_IRQHandler+0x10>)
 800203a:	f006 fd78 	bl	8008b2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000414 	.word	0x20000414

08002048 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800204c:	4802      	ldr	r0, [pc, #8]	@ (8002058 <I2C1_EV_IRQHandler+0x10>)
 800204e:	f002 fc63 	bl	8004918 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002052:	bf00      	nop
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000228 	.word	0x20000228

0800205c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002060:	4802      	ldr	r0, [pc, #8]	@ (800206c <I2C1_ER_IRQHandler+0x10>)
 8002062:	f002 fdca 	bl	8004bfa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002066:	bf00      	nop
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000228 	.word	0x20000228

08002070 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_USART_IRQHandler(&husart1);
 8002074:	4802      	ldr	r0, [pc, #8]	@ (8002080 <USART1_IRQHandler+0x10>)
 8002076:	f007 fc41 	bl	80098fc <HAL_USART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	2000045c 	.word	0x2000045c

08002084 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002088:	4802      	ldr	r0, [pc, #8]	@ (8002094 <DMA2_Stream0_IRQHandler+0x10>)
 800208a:	f001 fac7 	bl	800361c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800208e:	bf00      	nop
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	200001c8 	.word	0x200001c8

08002098 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800209c:	4802      	ldr	r0, [pc, #8]	@ (80020a8 <OTG_FS_IRQHandler+0x10>)
 800209e:	f004 fed5 	bl	8006e4c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000141c 	.word	0x2000141c

080020ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020b0:	4b06      	ldr	r3, [pc, #24]	@ (80020cc <SystemInit+0x20>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b6:	4a05      	ldr	r2, [pc, #20]	@ (80020cc <SystemInit+0x20>)
 80020b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	460b      	mov	r3, r1
 80020da:	70fb      	strb	r3, [r7, #3]
 80020dc:	4613      	mov	r3, r2
 80020de:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 80020e0:	78bb      	ldrb	r3, [r7, #2]
 80020e2:	3301      	adds	r3, #1
 80020e4:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	795a      	ldrb	r2, [r3, #5]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	795b      	ldrb	r3, [r3, #5]
 80020fc:	1c59      	adds	r1, r3, #1
 80020fe:	b2c8      	uxtb	r0, r1
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	7148      	strb	r0, [r1, #5]
 8002104:	4413      	add	r3, r2
 8002106:	2255      	movs	r2, #85	@ 0x55
 8002108:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	795a      	ldrb	r2, [r3, #5]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	799b      	ldrb	r3, [r3, #6]
 8002112:	4013      	ands	r3, r2
 8002114:	b2da      	uxtb	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	795b      	ldrb	r3, [r3, #5]
 8002122:	1c59      	adds	r1, r3, #1
 8002124:	b2c8      	uxtb	r0, r1
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	7148      	strb	r0, [r1, #5]
 800212a:	4413      	add	r3, r2
 800212c:	224e      	movs	r2, #78	@ 0x4e
 800212e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	795a      	ldrb	r2, [r3, #5]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	799b      	ldrb	r3, [r3, #6]
 8002138:	4013      	ands	r3, r2
 800213a:	b2da      	uxtb	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	795b      	ldrb	r3, [r3, #5]
 8002148:	1c59      	adds	r1, r3, #1
 800214a:	b2c8      	uxtb	r0, r1
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	7148      	strb	r0, [r1, #5]
 8002150:	4413      	add	r3, r2
 8002152:	2245      	movs	r2, #69	@ 0x45
 8002154:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	795a      	ldrb	r2, [r3, #5]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	799b      	ldrb	r3, [r3, #6]
 800215e:	4013      	ands	r3, r2
 8002160:	b2da      	uxtb	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	795b      	ldrb	r3, [r3, #5]
 800216e:	1c59      	adds	r1, r3, #1
 8002170:	b2c8      	uxtb	r0, r1
 8002172:	6879      	ldr	r1, [r7, #4]
 8002174:	7148      	strb	r0, [r1, #5]
 8002176:	4413      	add	r3, r2
 8002178:	2252      	movs	r2, #82	@ 0x52
 800217a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	795a      	ldrb	r2, [r3, #5]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	799b      	ldrb	r3, [r3, #6]
 8002184:	4013      	ands	r3, r2
 8002186:	b2da      	uxtb	r2, r3
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	795b      	ldrb	r3, [r3, #5]
 8002194:	1c59      	adds	r1, r3, #1
 8002196:	b2c8      	uxtb	r0, r1
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	7148      	strb	r0, [r1, #5]
 800219c:	4413      	add	r3, r2
 800219e:	78ba      	ldrb	r2, [r7, #2]
 80021a0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	795a      	ldrb	r2, [r3, #5]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	799b      	ldrb	r3, [r3, #6]
 80021aa:	4013      	ands	r3, r2
 80021ac:	b2da      	uxtb	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	795b      	ldrb	r3, [r3, #5]
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	b2c8      	uxtb	r0, r1
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	7148      	strb	r0, [r1, #5]
 80021c2:	4413      	add	r3, r2
 80021c4:	223a      	movs	r2, #58	@ 0x3a
 80021c6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	795a      	ldrb	r2, [r3, #5]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	799b      	ldrb	r3, [r3, #6]
 80021d0:	4013      	ands	r3, r2
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	795b      	ldrb	r3, [r3, #5]
 80021e0:	1c59      	adds	r1, r3, #1
 80021e2:	b2c8      	uxtb	r0, r1
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	7148      	strb	r0, [r1, #5]
 80021e8:	4413      	add	r3, r2
 80021ea:	78fa      	ldrb	r2, [r7, #3]
 80021ec:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	795a      	ldrb	r2, [r3, #5]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	799b      	ldrb	r3, [r3, #6]
 80021f6:	4013      	ands	r3, r2
 80021f8:	b2da      	uxtb	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2207      	movs	r2, #7
 8002202:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	7a5a      	ldrb	r2, [r3, #9]
 8002208:	78b9      	ldrb	r1, [r7, #2]
 800220a:	78fb      	ldrb	r3, [r7, #3]
 800220c:	404b      	eors	r3, r1
 800220e:	b2db      	uxtb	r3, r3
 8002210:	4053      	eors	r3, r2
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8002218:	b2da      	uxtb	r2, r3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	7a5b      	ldrb	r3, [r3, #9]
}
 8002222:	4618      	mov	r0, r3
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
 8002236:	460b      	mov	r3, r1
 8002238:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	79db      	ldrb	r3, [r3, #7]
 800223e:	3301      	adds	r3, #1
 8002240:	b2da      	uxtb	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	795b      	ldrb	r3, [r3, #5]
 800224e:	1c59      	adds	r1, r3, #1
 8002250:	b2c8      	uxtb	r0, r1
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	7148      	strb	r0, [r1, #5]
 8002256:	4413      	add	r3, r2
 8002258:	78fa      	ldrb	r2, [r7, #3]
 800225a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	795a      	ldrb	r2, [r3, #5]
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	799b      	ldrb	r3, [r3, #6]
 8002264:	4013      	ands	r3, r2
 8002266:	b2da      	uxtb	r2, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	7a5a      	ldrb	r2, [r3, #9]
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	4053      	eors	r3, r2
 8002274:	b2da      	uxtb	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	7a5b      	ldrb	r3, [r3, #9]
}
 800227e:	4618      	mov	r0, r3
 8002280:	370c      	adds	r7, #12
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr

0800228a <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 800228a:	b490      	push	{r4, r7}
 800228c:	b084      	sub	sp, #16
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
 8002292:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8002298:	e02c      	b.n	80022f4 <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	79db      	ldrb	r3, [r3, #7]
 800229e:	3301      	adds	r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	441a      	add	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6819      	ldr	r1, [r3, #0]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	795b      	ldrb	r3, [r3, #5]
 80022b8:	1c58      	adds	r0, r3, #1
 80022ba:	b2c4      	uxtb	r4, r0
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	7144      	strb	r4, [r0, #5]
 80022c0:	440b      	add	r3, r1
 80022c2:	7812      	ldrb	r2, [r2, #0]
 80022c4:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	795a      	ldrb	r2, [r3, #5]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	799b      	ldrb	r3, [r3, #6]
 80022ce:	4013      	ands	r3, r2
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	1c5a      	adds	r2, r3, #1
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	73fa      	strb	r2, [r7, #15]
 80022e0:	461a      	mov	r2, r3
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	4413      	add	r3, r2
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	7a5b      	ldrb	r3, [r3, #9]
 80022ec:	4053      	eors	r3, r2
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 80022f4:	7bfb      	ldrb	r3, [r7, #15]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	4413      	add	r3, r2
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d1ca      	bne.n	800229a <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	7a5b      	ldrb	r3, [r3, #9]
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bc90      	pop	{r4, r7}
 8002310:	4770      	bx	lr

08002312 <unerPrtcl_GetByteFromRx>:

uint8_t unerPrtcl_GetByteFromRx(_sTx *dataRx, uint8_t start, uint8_t end) {
 8002312:	b480      	push	{r7}
 8002314:	b085      	sub	sp, #20
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
 800231a:	460b      	mov	r3, r1
 800231c:	70fb      	strb	r3, [r7, #3]
 800231e:	4613      	mov	r3, r2
 8002320:	70bb      	strb	r3, [r7, #2]
	uint8_t getByte;
	dataRx->indexData += start;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	7a1a      	ldrb	r2, [r3, #8]
 8002326:	78fb      	ldrb	r3, [r7, #3]
 8002328:	4413      	add	r3, r2
 800232a:	b2da      	uxtb	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	721a      	strb	r2, [r3, #8]
	dataRx->indexData &= dataRx->mask;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	7a1a      	ldrb	r2, [r3, #8]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	799b      	ldrb	r3, [r3, #6]
 8002338:	4013      	ands	r3, r2
 800233a:	b2da      	uxtb	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	721a      	strb	r2, [r3, #8]
	getByte = dataRx->buff[dataRx->indexData];
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	7a12      	ldrb	r2, [r2, #8]
 8002348:	4413      	add	r3, r2
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	73fb      	strb	r3, [r7, #15]
	dataRx->indexData += end;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	7a1a      	ldrb	r2, [r3, #8]
 8002352:	78bb      	ldrb	r3, [r7, #2]
 8002354:	4413      	add	r3, r2
 8002356:	b2da      	uxtb	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	721a      	strb	r2, [r3, #8]
	dataRx->indexData &= dataRx->mask;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	7a1a      	ldrb	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	799b      	ldrb	r3, [r3, #6]
 8002364:	4013      	ands	r3, r2
 8002366:	b2da      	uxtb	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	721a      	strb	r2, [r3, #8]
	return getByte;
 800236c:	7bfb      	ldrb	r3, [r7, #15]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <unerPrtcl_DecodeHeader>:


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 8002384:	2300      	movs	r3, #0
 8002386:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	795b      	ldrb	r3, [r3, #5]
 800238c:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 800238e:	e0e4      	b.n	800255a <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 8002390:	4b78      	ldr	r3, [pc, #480]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	2b07      	cmp	r3, #7
 8002396:	f200 80c9 	bhi.w	800252c <unerPrtcl_DecodeHeader+0x1b0>
 800239a:	a201      	add	r2, pc, #4	@ (adr r2, 80023a0 <unerPrtcl_DecodeHeader+0x24>)
 800239c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023a0:	080023c1 	.word	0x080023c1
 80023a4:	080023db 	.word	0x080023db
 80023a8:	08002419 	.word	0x08002419
 80023ac:	08002445 	.word	0x08002445
 80023b0:	08002471 	.word	0x08002471
 80023b4:	08002487 	.word	0x08002487
 80023b8:	0800252d 	.word	0x0800252d
 80023bc:	080024e9 	.word	0x080024e9
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	687a      	ldr	r2, [r7, #4]
 80023c6:	7912      	ldrb	r2, [r2, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b55      	cmp	r3, #85	@ 0x55
 80023ce:	f040 80b1 	bne.w	8002534 <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 80023d2:	4b68      	ldr	r3, [pc, #416]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	701a      	strb	r2, [r3, #0]
                }
            break;
 80023d8:	e0ac      	b.n	8002534 <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	7912      	ldrb	r2, [r2, #4]
 80023e2:	4413      	add	r3, r2
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b4e      	cmp	r3, #78	@ 0x4e
 80023e8:	d103      	bne.n	80023f2 <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 80023ea:	4b62      	ldr	r3, [pc, #392]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 80023ec:	2202      	movs	r2, #2
 80023ee:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 80023f0:	e0a2      	b.n	8002538 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	7912      	ldrb	r2, [r2, #4]
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b55      	cmp	r3, #85	@ 0x55
 8002400:	f000 809a 	beq.w	8002538 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 8002404:	4b5b      	ldr	r3, [pc, #364]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 8002406:	2200      	movs	r2, #0
 8002408:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	791b      	ldrb	r3, [r3, #4]
 800240e:	3b01      	subs	r3, #1
 8002410:	b2da      	uxtb	r2, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	711a      	strb	r2, [r3, #4]
            break;
 8002416:	e08f      	b.n	8002538 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	7912      	ldrb	r2, [r2, #4]
 8002420:	4413      	add	r3, r2
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b45      	cmp	r3, #69	@ 0x45
 8002426:	d103      	bne.n	8002430 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 8002428:	4b52      	ldr	r3, [pc, #328]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 800242a:	2203      	movs	r2, #3
 800242c:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800242e:	e086      	b.n	800253e <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 8002430:	4b50      	ldr	r3, [pc, #320]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 8002432:	2200      	movs	r2, #0
 8002434:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	791b      	ldrb	r3, [r3, #4]
 800243a:	3b01      	subs	r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	711a      	strb	r2, [r3, #4]
            break;
 8002442:	e07c      	b.n	800253e <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	7912      	ldrb	r2, [r2, #4]
 800244c:	4413      	add	r3, r2
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	2b52      	cmp	r3, #82	@ 0x52
 8002452:	d103      	bne.n	800245c <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 8002454:	4b47      	ldr	r3, [pc, #284]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 8002456:	2204      	movs	r2, #4
 8002458:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800245a:	e070      	b.n	800253e <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 800245c:	4b45      	ldr	r3, [pc, #276]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	791b      	ldrb	r3, [r3, #4]
 8002466:	3b01      	subs	r3, #1
 8002468:	b2da      	uxtb	r2, r3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	711a      	strb	r2, [r3, #4]
            break;
 800246e:	e066      	b.n	800253e <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	7912      	ldrb	r2, [r2, #4]
 8002478:	4413      	add	r3, r2
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 800247e:	4b3d      	ldr	r3, [pc, #244]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 8002480:	2205      	movs	r2, #5
 8002482:	701a      	strb	r2, [r3, #0]
            break;
 8002484:	e05b      	b.n	800253e <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	7912      	ldrb	r2, [r2, #4]
 800248e:	4413      	add	r3, r2
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	2b3a      	cmp	r3, #58	@ 0x3a
 8002494:	d11e      	bne.n	80024d4 <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 8002496:	4b37      	ldr	r3, [pc, #220]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 8002498:	2207      	movs	r2, #7
 800249a:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	791b      	ldrb	r3, [r3, #4]
 80024a0:	3301      	adds	r3, #1
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	7a1a      	ldrb	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	799b      	ldrb	r3, [r3, #6]
 80024b0:	4013      	ands	r3, r2
 80024b2:	b2da      	uxtb	r2, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	7a5a      	ldrb	r2, [r3, #9]
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	4053      	eors	r3, r2
 80024c6:	b2db      	uxtb	r3, r3
 80024c8:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 80024cc:	b2da      	uxtb	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80024d2:	e034      	b.n	800253e <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80024d4:	4b27      	ldr	r3, [pc, #156]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	791b      	ldrb	r3, [r3, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	711a      	strb	r2, [r3, #4]
            break;
 80024e6:	e02a      	b.n	800253e <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
 80024ea:	3b01      	subs	r3, #1
 80024ec:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00c      	beq.n	800250e <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	7a5a      	ldrb	r2, [r3, #9]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	7909      	ldrb	r1, [r1, #4]
 8002500:	440b      	add	r3, r1
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4053      	eors	r3, r2
 8002506:	b2da      	uxtb	r2, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 800250c:	e016      	b.n	800253c <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 800250e:	4b19      	ldr	r3, [pc, #100]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	7912      	ldrb	r2, [r2, #4]
 800251c:	4413      	add	r3, r2
 800251e:	781a      	ldrb	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	7a5b      	ldrb	r3, [r3, #9]
 8002524:	429a      	cmp	r2, r3
 8002526:	d109      	bne.n	800253c <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 8002528:	2301      	movs	r3, #1
 800252a:	e01d      	b.n	8002568 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 800252c:	4b11      	ldr	r3, [pc, #68]	@ (8002574 <unerPrtcl_DecodeHeader+0x1f8>)
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]
            break;
 8002532:	e004      	b.n	800253e <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002534:	bf00      	nop
 8002536:	e002      	b.n	800253e <unerPrtcl_DecodeHeader+0x1c2>
            break;
 8002538:	bf00      	nop
 800253a:	e000      	b.n	800253e <unerPrtcl_DecodeHeader+0x1c2>
            break;
 800253c:	bf00      	nop
        }
        dataRx->indexR++;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	791b      	ldrb	r3, [r3, #4]
 8002542:	3301      	adds	r3, #1
 8002544:	b2da      	uxtb	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	791a      	ldrb	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	799b      	ldrb	r3, [r3, #6]
 8002552:	4013      	ands	r3, r2
 8002554:	b2da      	uxtb	r2, r3
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	791b      	ldrb	r3, [r3, #4]
 800255e:	7bba      	ldrb	r2, [r7, #14]
 8002560:	429a      	cmp	r2, r3
 8002562:	f47f af15 	bne.w	8002390 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	20000b32 	.word	0x20000b32

08002578 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2200      	movs	r2, #0
 800259c:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	22ff      	movs	r2, #255	@ 0xff
 80025a8:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2200      	movs	r2, #0
 80025ae:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	683a      	ldr	r2, [r7, #0]
 80025b4:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2200      	movs	r2, #0
 80025ba:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	2200      	movs	r2, #0
 80025c0:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	2200      	movs	r2, #0
 80025c6:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2200      	movs	r2, #0
 80025cc:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	22ff      	movs	r2, #255	@ 0xff
 80025d2:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2200      	movs	r2, #0
 80025d8:	725a      	strb	r2, [r3, #9]

}
 80025da:	bf00      	nop
 80025dc:	3714      	adds	r7, #20
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
	...

080025e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025e8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002620 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025ec:	f7ff fd5e 	bl	80020ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f0:	480c      	ldr	r0, [pc, #48]	@ (8002624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025f2:	490d      	ldr	r1, [pc, #52]	@ (8002628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025f4:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002608:	4c0a      	ldr	r4, [pc, #40]	@ (8002634 <LoopFillZerobss+0x22>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002616:	f00c f807 	bl	800e628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800261a:	f7fe fbfb 	bl	8000e14 <main>
  bx  lr    
 800261e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002628:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 800262c:	0800e72c 	.word	0x0800e72c
  ldr r2, =_sbss
 8002630:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002634:	20001b20 	.word	0x20001b20

08002638 <DMA1_Stream1_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <DMA1_Stream1_IRQHandler>
	...

0800263c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002640:	4b0e      	ldr	r3, [pc, #56]	@ (800267c <HAL_Init+0x40>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a0d      	ldr	r2, [pc, #52]	@ (800267c <HAL_Init+0x40>)
 8002646:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800264a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800264c:	4b0b      	ldr	r3, [pc, #44]	@ (800267c <HAL_Init+0x40>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0a      	ldr	r2, [pc, #40]	@ (800267c <HAL_Init+0x40>)
 8002652:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002656:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002658:	4b08      	ldr	r3, [pc, #32]	@ (800267c <HAL_Init+0x40>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a07      	ldr	r2, [pc, #28]	@ (800267c <HAL_Init+0x40>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002662:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002664:	2003      	movs	r0, #3
 8002666:	f000 fe6f 	bl	8003348 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800266a:	200f      	movs	r0, #15
 800266c:	f000 f808 	bl	8002680 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002670:	f7ff f9d2 	bl	8001a18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002674:	2300      	movs	r3, #0
}
 8002676:	4618      	mov	r0, r3
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023c00 	.word	0x40023c00

08002680 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002688:	4b12      	ldr	r3, [pc, #72]	@ (80026d4 <HAL_InitTick+0x54>)
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <HAL_InitTick+0x58>)
 800268e:	781b      	ldrb	r3, [r3, #0]
 8002690:	4619      	mov	r1, r3
 8002692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002696:	fbb3 f3f1 	udiv	r3, r3, r1
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	4618      	mov	r0, r3
 80026a0:	f000 fe87 	bl	80033b2 <HAL_SYSTICK_Config>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e00e      	b.n	80026cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b0f      	cmp	r3, #15
 80026b2:	d80a      	bhi.n	80026ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b4:	2200      	movs	r2, #0
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	f04f 30ff 	mov.w	r0, #4294967295
 80026bc:	f000 fe4f 	bl	800335e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c0:	4a06      	ldr	r2, [pc, #24]	@ (80026dc <HAL_InitTick+0x5c>)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3708      	adds	r7, #8
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000002c 	.word	0x2000002c
 80026d8:	20000034 	.word	0x20000034
 80026dc:	20000030 	.word	0x20000030

080026e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e4:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_IncTick+0x20>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	4b06      	ldr	r3, [pc, #24]	@ (8002704 <HAL_IncTick+0x24>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
 80026f0:	4a04      	ldr	r2, [pc, #16]	@ (8002704 <HAL_IncTick+0x24>)
 80026f2:	6013      	str	r3, [r2, #0]
}
 80026f4:	bf00      	nop
 80026f6:	46bd      	mov	sp, r7
 80026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fc:	4770      	bx	lr
 80026fe:	bf00      	nop
 8002700:	20000034 	.word	0x20000034
 8002704:	20000b34 	.word	0x20000b34

08002708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
  return uwTick;
 800270c:	4b03      	ldr	r3, [pc, #12]	@ (800271c <HAL_GetTick+0x14>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	20000b34 	.word	0x20000b34

08002720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b084      	sub	sp, #16
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002728:	f7ff ffee 	bl	8002708 <HAL_GetTick>
 800272c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002738:	d005      	beq.n	8002746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800273a:	4b0a      	ldr	r3, [pc, #40]	@ (8002764 <HAL_Delay+0x44>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	461a      	mov	r2, r3
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4413      	add	r3, r2
 8002744:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002746:	bf00      	nop
 8002748:	f7ff ffde 	bl	8002708 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	429a      	cmp	r2, r3
 8002756:	d8f7      	bhi.n	8002748 <HAL_Delay+0x28>
  {
  }
}
 8002758:	bf00      	nop
 800275a:	bf00      	nop
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000034 	.word	0x20000034

08002768 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002770:	2300      	movs	r3, #0
 8002772:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e033      	b.n	80027e6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f7ff f96e 	bl	8001a68 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800279e:	f003 0310 	and.w	r3, r3, #16
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027aa:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80027ae:	f023 0302 	bic.w	r3, r3, #2
 80027b2:	f043 0202 	orr.w	r2, r3, #2
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 fb6c 	bl	8002e98 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027ca:	f023 0303 	bic.w	r3, r3, #3
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	641a      	str	r2, [r3, #64]	@ 0x40
 80027d6:	e001      	b.n	80027dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	f003 0320 	and.w	r3, r3, #32
 800281c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d049      	beq.n	80028b8 <HAL_ADC_IRQHandler+0xca>
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d046      	beq.n	80028b8 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b00      	cmp	r3, #0
 8002834:	d105      	bne.n	8002842 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d12b      	bne.n	80028a8 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002854:	2b00      	cmp	r3, #0
 8002856:	d127      	bne.n	80028a8 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002870:	2b00      	cmp	r3, #0
 8002872:	d119      	bne.n	80028a8 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0220 	bic.w	r2, r2, #32
 8002882:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002888:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002894:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002898:	2b00      	cmp	r3, #0
 800289a:	d105      	bne.n	80028a8 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a0:	f043 0201 	orr.w	r2, r3, #1
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7fd fe99 	bl	80005e0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f06f 0212 	mvn.w	r2, #18
 80028b6:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	f003 0304 	and.w	r3, r3, #4
 80028be:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028c6:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d057      	beq.n	800297e <HAL_ADC_IRQHandler+0x190>
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d054      	beq.n	800297e <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d8:	f003 0310 	and.w	r3, r3, #16
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d105      	bne.n	80028ec <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d139      	bne.n	800296e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002900:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002904:	2b00      	cmp	r3, #0
 8002906:	d006      	beq.n	8002916 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002912:	2b00      	cmp	r3, #0
 8002914:	d12b      	bne.n	800296e <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002920:	2b00      	cmp	r3, #0
 8002922:	d124      	bne.n	800296e <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800292e:	2b00      	cmp	r3, #0
 8002930:	d11d      	bne.n	800296e <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002936:	2b00      	cmp	r3, #0
 8002938:	d119      	bne.n	800296e <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685a      	ldr	r2, [r3, #4]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002948:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d105      	bne.n	800296e <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	f043 0201 	orr.w	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800296e:	6878      	ldr	r0, [r7, #4]
 8002970:	f000 fc10 	bl	8003194 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f06f 020c 	mvn.w	r2, #12
 800297c:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298c:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d017      	beq.n	80029c4 <HAL_ADC_IRQHandler+0x1d6>
 8002994:	693b      	ldr	r3, [r7, #16]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d014      	beq.n	80029c4 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d10d      	bne.n	80029c4 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ac:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f000 f929 	bl	8002c0c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f06f 0201 	mvn.w	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80029d2:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d015      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x218>
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d012      	beq.n	8002a06 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	f043 0202 	orr.w	r2, r3, #2
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0220 	mvn.w	r2, #32
 80029f4:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f000 f912 	bl	8002c20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f06f 0220 	mvn.w	r2, #32
 8002a04:	601a      	str	r2, [r3, #0]
  }
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
	...

08002a10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b088      	sub	sp, #32
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a20:	2300      	movs	r3, #0
 8002a22:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_Start_DMA+0x22>
 8002a2e:	2302      	movs	r3, #2
 8002a30:	e0d0      	b.n	8002bd4 <HAL_ADC_Start_DMA+0x1c4>
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d018      	beq.n	8002a7a <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689a      	ldr	r2, [r3, #8]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0201 	orr.w	r2, r2, #1
 8002a56:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002a58:	4b60      	ldr	r3, [pc, #384]	@ (8002bdc <HAL_ADC_Start_DMA+0x1cc>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a60      	ldr	r2, [pc, #384]	@ (8002be0 <HAL_ADC_Start_DMA+0x1d0>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0c9a      	lsrs	r2, r3, #18
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002a6c:	e002      	b.n	8002a74 <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	3b01      	subs	r3, #1
 8002a72:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f9      	bne.n	8002a6e <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a88:	d107      	bne.n	8002a9a <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a98:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	f040 8088 	bne.w	8002bba <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d007      	beq.n	8002adc <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ad0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002ad4:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ae4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ae8:	d106      	bne.n	8002af8 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	f023 0206 	bic.w	r2, r3, #6
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	645a      	str	r2, [r3, #68]	@ 0x44
 8002af6:	e002      	b.n	8002afe <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b06:	4b37      	ldr	r3, [pc, #220]	@ (8002be4 <HAL_ADC_Start_DMA+0x1d4>)
 8002b08:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b0e:	4a36      	ldr	r2, [pc, #216]	@ (8002be8 <HAL_ADC_Start_DMA+0x1d8>)
 8002b10:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b16:	4a35      	ldr	r2, [pc, #212]	@ (8002bec <HAL_ADC_Start_DMA+0x1dc>)
 8002b18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b1e:	4a34      	ldr	r2, [pc, #208]	@ (8002bf0 <HAL_ADC_Start_DMA+0x1e0>)
 8002b20:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b2a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8002b3a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	689a      	ldr	r2, [r3, #8]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002b4a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	334c      	adds	r3, #76	@ 0x4c
 8002b56:	4619      	mov	r1, r3
 8002b58:	68ba      	ldr	r2, [r7, #8]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f000 fce4 	bl	8003528 <HAL_DMA_Start_IT>
 8002b60:	4603      	mov	r3, r0
 8002b62:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 031f 	and.w	r3, r3, #31
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d10f      	bne.n	8002b90 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d129      	bne.n	8002bd2 <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002b8c:	609a      	str	r2, [r3, #8]
 8002b8e:	e020      	b.n	8002bd2 <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a17      	ldr	r2, [pc, #92]	@ (8002bf4 <HAL_ADC_Start_DMA+0x1e4>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d11b      	bne.n	8002bd2 <HAL_ADC_Start_DMA+0x1c2>
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d114      	bne.n	8002bd2 <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	e00b      	b.n	8002bd2 <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bbe:	f043 0210 	orr.w	r2, r3, #16
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	f043 0201 	orr.w	r2, r3, #1
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8002bd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3720      	adds	r7, #32
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	2000002c 	.word	0x2000002c
 8002be0:	431bde83 	.word	0x431bde83
 8002be4:	40012300 	.word	0x40012300
 8002be8:	08003091 	.word	0x08003091
 8002bec:	0800314b 	.word	0x0800314b
 8002bf0:	08003167 	.word	0x08003167
 8002bf4:	40012000 	.word	0x40012000

08002bf8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002c00:	bf00      	nop
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1e:	4770      	bx	lr

08002c20 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b083      	sub	sp, #12
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002c28:	bf00      	nop
 8002c2a:	370c      	adds	r7, #12
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1c>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e113      	b.n	8002e78 <HAL_ADC_ConfigChannel+0x244>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b09      	cmp	r3, #9
 8002c5e:	d925      	bls.n	8002cac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68d9      	ldr	r1, [r3, #12]
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4613      	mov	r3, r2
 8002c70:	005b      	lsls	r3, r3, #1
 8002c72:	4413      	add	r3, r2
 8002c74:	3b1e      	subs	r3, #30
 8002c76:	2207      	movs	r2, #7
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	43da      	mvns	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	400a      	ands	r2, r1
 8002c84:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	68d9      	ldr	r1, [r3, #12]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	4618      	mov	r0, r3
 8002c98:	4603      	mov	r3, r0
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	4403      	add	r3, r0
 8002c9e:	3b1e      	subs	r3, #30
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	60da      	str	r2, [r3, #12]
 8002caa:	e022      	b.n	8002cf2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	6919      	ldr	r1, [r3, #16]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	4613      	mov	r3, r2
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	4413      	add	r3, r2
 8002cc0:	2207      	movs	r2, #7
 8002cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc6:	43da      	mvns	r2, r3
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	400a      	ands	r2, r1
 8002cce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6919      	ldr	r1, [r3, #16]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	4403      	add	r3, r0
 8002ce8:	409a      	lsls	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	2b06      	cmp	r3, #6
 8002cf8:	d824      	bhi.n	8002d44 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b05      	subs	r3, #5
 8002d0c:	221f      	movs	r2, #31
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	400a      	ands	r2, r1
 8002d1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	3b05      	subs	r3, #5
 8002d36:	fa00 f203 	lsl.w	r2, r0, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d42:	e04c      	b.n	8002dde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b0c      	cmp	r3, #12
 8002d4a:	d824      	bhi.n	8002d96 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	3b23      	subs	r3, #35	@ 0x23
 8002d5e:	221f      	movs	r2, #31
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43da      	mvns	r2, r3
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	400a      	ands	r2, r1
 8002d6c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	4413      	add	r3, r2
 8002d86:	3b23      	subs	r3, #35	@ 0x23
 8002d88:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	430a      	orrs	r2, r1
 8002d92:	631a      	str	r2, [r3, #48]	@ 0x30
 8002d94:	e023      	b.n	8002dde <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	3b41      	subs	r3, #65	@ 0x41
 8002da8:	221f      	movs	r2, #31
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	43da      	mvns	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	400a      	ands	r2, r1
 8002db6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	4413      	add	r3, r2
 8002dd0:	3b41      	subs	r3, #65	@ 0x41
 8002dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002dde:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <HAL_ADC_ConfigChannel+0x250>)
 8002de0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a28      	ldr	r2, [pc, #160]	@ (8002e88 <HAL_ADC_ConfigChannel+0x254>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d10f      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1d8>
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b12      	cmp	r3, #18
 8002df2:	d10b      	bne.n	8002e0c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a1d      	ldr	r2, [pc, #116]	@ (8002e88 <HAL_ADC_ConfigChannel+0x254>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d12b      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x23a>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a1c      	ldr	r2, [pc, #112]	@ (8002e8c <HAL_ADC_ConfigChannel+0x258>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d003      	beq.n	8002e28 <HAL_ADC_ConfigChannel+0x1f4>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b11      	cmp	r3, #17
 8002e26:	d122      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a11      	ldr	r2, [pc, #68]	@ (8002e8c <HAL_ADC_ConfigChannel+0x258>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d111      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4a:	4b11      	ldr	r3, [pc, #68]	@ (8002e90 <HAL_ADC_ConfigChannel+0x25c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a11      	ldr	r2, [pc, #68]	@ (8002e94 <HAL_ADC_ConfigChannel+0x260>)
 8002e50:	fba2 2303 	umull	r2, r3, r2, r3
 8002e54:	0c9a      	lsrs	r2, r3, #18
 8002e56:	4613      	mov	r3, r2
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	4413      	add	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f9      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3714      	adds	r7, #20
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr
 8002e84:	40012300 	.word	0x40012300
 8002e88:	40012000 	.word	0x40012000
 8002e8c:	10000012 	.word	0x10000012
 8002e90:	2000002c 	.word	0x2000002c
 8002e94:	431bde83 	.word	0x431bde83

08002e98 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ea0:	4b79      	ldr	r3, [pc, #484]	@ (8003088 <ADC_Init+0x1f0>)
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	685a      	ldr	r2, [r3, #4]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ecc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6859      	ldr	r1, [r3, #4]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	021a      	lsls	r2, r3, #8
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ef0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6859      	ldr	r1, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	430a      	orrs	r2, r1
 8002f02:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6899      	ldr	r1, [r3, #8]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2a:	4a58      	ldr	r2, [pc, #352]	@ (800308c <ADC_Init+0x1f4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d022      	beq.n	8002f76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6899      	ldr	r1, [r3, #8]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	689a      	ldr	r2, [r3, #8]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6899      	ldr	r1, [r3, #8]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	e00f      	b.n	8002f96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f94:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689a      	ldr	r2, [r3, #8]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0202 	bic.w	r2, r2, #2
 8002fa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	6899      	ldr	r1, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	7e1b      	ldrb	r3, [r3, #24]
 8002fb0:	005a      	lsls	r2, r3, #1
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d01b      	beq.n	8002ffc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fd2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	685a      	ldr	r2, [r3, #4]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002fe2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	035a      	lsls	r2, r3, #13
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	e007      	b.n	800300c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800300a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800301a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	3b01      	subs	r3, #1
 8003028:	051a      	lsls	r2, r3, #20
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003040:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	6899      	ldr	r1, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800304e:	025a      	lsls	r2, r3, #9
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	430a      	orrs	r2, r1
 8003056:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	689a      	ldr	r2, [r3, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	6899      	ldr	r1, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695b      	ldr	r3, [r3, #20]
 8003072:	029a      	lsls	r2, r3, #10
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
}
 800307c:	bf00      	nop
 800307e:	3714      	adds	r7, #20
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	40012300 	.word	0x40012300
 800308c:	0f000001 	.word	0x0f000001

08003090 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800309c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d13c      	bne.n	8003124 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ae:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d12b      	bne.n	800311c <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d127      	bne.n	800311c <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d2:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d006      	beq.n	80030e8 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d119      	bne.n	800311c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0220 	bic.w	r2, r2, #32
 80030f6:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003108:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d105      	bne.n	800311c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	f043 0201 	orr.w	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f7fd fa5f 	bl	80005e0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003122:	e00e      	b.n	8003142 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003128:	f003 0310 	and.w	r3, r3, #16
 800312c:	2b00      	cmp	r3, #0
 800312e:	d003      	beq.n	8003138 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f7ff fd75 	bl	8002c20 <HAL_ADC_ErrorCallback>
}
 8003136:	e004      	b.n	8003142 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800313c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	4798      	blx	r3
}
 8003142:	bf00      	nop
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}

0800314a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800314a:	b580      	push	{r7, lr}
 800314c:	b084      	sub	sp, #16
 800314e:	af00      	add	r7, sp, #0
 8003150:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003156:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003158:	68f8      	ldr	r0, [r7, #12]
 800315a:	f7ff fd4d 	bl	8002bf8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800315e:	bf00      	nop
 8003160:	3710      	adds	r7, #16
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b084      	sub	sp, #16
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2240      	movs	r2, #64	@ 0x40
 8003178:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800317e:	f043 0204 	orr.w	r2, r3, #4
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f7ff fd4a 	bl	8002c20 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800318c:	bf00      	nop
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}

08003194 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031b8:	4b0c      	ldr	r3, [pc, #48]	@ (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031be:	68ba      	ldr	r2, [r7, #8]
 80031c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031c4:	4013      	ands	r3, r2
 80031c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031da:	4a04      	ldr	r2, [pc, #16]	@ (80031ec <__NVIC_SetPriorityGrouping+0x44>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	60d3      	str	r3, [r2, #12]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000ed00 	.word	0xe000ed00

080031f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031f0:	b480      	push	{r7}
 80031f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031f4:	4b04      	ldr	r3, [pc, #16]	@ (8003208 <__NVIC_GetPriorityGrouping+0x18>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	0a1b      	lsrs	r3, r3, #8
 80031fa:	f003 0307 	and.w	r3, r3, #7
}
 80031fe:	4618      	mov	r0, r3
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800320c:	b480      	push	{r7}
 800320e:	b083      	sub	sp, #12
 8003210:	af00      	add	r7, sp, #0
 8003212:	4603      	mov	r3, r0
 8003214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	2b00      	cmp	r3, #0
 800321c:	db0b      	blt.n	8003236 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800321e:	79fb      	ldrb	r3, [r7, #7]
 8003220:	f003 021f 	and.w	r2, r3, #31
 8003224:	4907      	ldr	r1, [pc, #28]	@ (8003244 <__NVIC_EnableIRQ+0x38>)
 8003226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800322a:	095b      	lsrs	r3, r3, #5
 800322c:	2001      	movs	r0, #1
 800322e:	fa00 f202 	lsl.w	r2, r0, r2
 8003232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003236:	bf00      	nop
 8003238:	370c      	adds	r7, #12
 800323a:	46bd      	mov	sp, r7
 800323c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003240:	4770      	bx	lr
 8003242:	bf00      	nop
 8003244:	e000e100 	.word	0xe000e100

08003248 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	6039      	str	r1, [r7, #0]
 8003252:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003254:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003258:	2b00      	cmp	r3, #0
 800325a:	db0a      	blt.n	8003272 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	490c      	ldr	r1, [pc, #48]	@ (8003294 <__NVIC_SetPriority+0x4c>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	0112      	lsls	r2, r2, #4
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	440b      	add	r3, r1
 800326c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003270:	e00a      	b.n	8003288 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	b2da      	uxtb	r2, r3
 8003276:	4908      	ldr	r1, [pc, #32]	@ (8003298 <__NVIC_SetPriority+0x50>)
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	3b04      	subs	r3, #4
 8003280:	0112      	lsls	r2, r2, #4
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	440b      	add	r3, r1
 8003286:	761a      	strb	r2, [r3, #24]
}
 8003288:	bf00      	nop
 800328a:	370c      	adds	r7, #12
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	e000e100 	.word	0xe000e100
 8003298:	e000ed00 	.word	0xe000ed00

0800329c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800329c:	b480      	push	{r7}
 800329e:	b089      	sub	sp, #36	@ 0x24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0307 	and.w	r3, r3, #7
 80032ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032b0:	69fb      	ldr	r3, [r7, #28]
 80032b2:	f1c3 0307 	rsb	r3, r3, #7
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	bf28      	it	cs
 80032ba:	2304      	movcs	r3, #4
 80032bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	3304      	adds	r3, #4
 80032c2:	2b06      	cmp	r3, #6
 80032c4:	d902      	bls.n	80032cc <NVIC_EncodePriority+0x30>
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	3b03      	subs	r3, #3
 80032ca:	e000      	b.n	80032ce <NVIC_EncodePriority+0x32>
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d0:	f04f 32ff 	mov.w	r2, #4294967295
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	43da      	mvns	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	401a      	ands	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e4:	f04f 31ff 	mov.w	r1, #4294967295
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	fa01 f303 	lsl.w	r3, r1, r3
 80032ee:	43d9      	mvns	r1, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f4:	4313      	orrs	r3, r2
         );
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3724      	adds	r7, #36	@ 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
	...

08003304 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b082      	sub	sp, #8
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3b01      	subs	r3, #1
 8003310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003314:	d301      	bcc.n	800331a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003316:	2301      	movs	r3, #1
 8003318:	e00f      	b.n	800333a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800331a:	4a0a      	ldr	r2, [pc, #40]	@ (8003344 <SysTick_Config+0x40>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	3b01      	subs	r3, #1
 8003320:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003322:	210f      	movs	r1, #15
 8003324:	f04f 30ff 	mov.w	r0, #4294967295
 8003328:	f7ff ff8e 	bl	8003248 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800332c:	4b05      	ldr	r3, [pc, #20]	@ (8003344 <SysTick_Config+0x40>)
 800332e:	2200      	movs	r2, #0
 8003330:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003332:	4b04      	ldr	r3, [pc, #16]	@ (8003344 <SysTick_Config+0x40>)
 8003334:	2207      	movs	r2, #7
 8003336:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3708      	adds	r7, #8
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
 8003342:	bf00      	nop
 8003344:	e000e010 	.word	0xe000e010

08003348 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003350:	6878      	ldr	r0, [r7, #4]
 8003352:	f7ff ff29 	bl	80031a8 <__NVIC_SetPriorityGrouping>
}
 8003356:	bf00      	nop
 8003358:	3708      	adds	r7, #8
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}

0800335e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800335e:	b580      	push	{r7, lr}
 8003360:	b086      	sub	sp, #24
 8003362:	af00      	add	r7, sp, #0
 8003364:	4603      	mov	r3, r0
 8003366:	60b9      	str	r1, [r7, #8]
 8003368:	607a      	str	r2, [r7, #4]
 800336a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800336c:	2300      	movs	r3, #0
 800336e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003370:	f7ff ff3e 	bl	80031f0 <__NVIC_GetPriorityGrouping>
 8003374:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	68b9      	ldr	r1, [r7, #8]
 800337a:	6978      	ldr	r0, [r7, #20]
 800337c:	f7ff ff8e 	bl	800329c <NVIC_EncodePriority>
 8003380:	4602      	mov	r2, r0
 8003382:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff5d 	bl	8003248 <__NVIC_SetPriority>
}
 800338e:	bf00      	nop
 8003390:	3718      	adds	r7, #24
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	4603      	mov	r3, r0
 800339e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7ff ff31 	bl	800320c <__NVIC_EnableIRQ>
}
 80033aa:	bf00      	nop
 80033ac:	3708      	adds	r7, #8
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b082      	sub	sp, #8
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7ff ffa2 	bl	8003304 <SysTick_Config>
 80033c0:	4603      	mov	r3, r0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033d4:	2300      	movs	r3, #0
 80033d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033d8:	f7ff f996 	bl	8002708 <HAL_GetTick>
 80033dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e099      	b.n	800351c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2202      	movs	r2, #2
 80033ec:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f022 0201 	bic.w	r2, r2, #1
 8003406:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003408:	e00f      	b.n	800342a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800340a:	f7ff f97d 	bl	8002708 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b05      	cmp	r3, #5
 8003416:	d908      	bls.n	800342a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2220      	movs	r2, #32
 800341c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2203      	movs	r2, #3
 8003422:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e078      	b.n	800351c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1e8      	bne.n	800340a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003440:	697a      	ldr	r2, [r7, #20]
 8003442:	4b38      	ldr	r3, [pc, #224]	@ (8003524 <HAL_DMA_Init+0x158>)
 8003444:	4013      	ands	r3, r2
 8003446:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003456:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003462:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800346e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a1b      	ldr	r3, [r3, #32]
 8003474:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003476:	697a      	ldr	r2, [r7, #20]
 8003478:	4313      	orrs	r3, r2
 800347a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	2b04      	cmp	r3, #4
 8003482:	d107      	bne.n	8003494 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348c:	4313      	orrs	r3, r2
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	697a      	ldr	r2, [r7, #20]
 800349a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	695b      	ldr	r3, [r3, #20]
 80034a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	f023 0307 	bic.w	r3, r3, #7
 80034aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d117      	bne.n	80034ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034c2:	697a      	ldr	r2, [r7, #20]
 80034c4:	4313      	orrs	r3, r2
 80034c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00e      	beq.n	80034ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 faab 	bl	8003a2c <DMA_CheckFifoParam>
 80034d6:	4603      	mov	r3, r0
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d008      	beq.n	80034ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2240      	movs	r2, #64	@ 0x40
 80034e0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80034ea:	2301      	movs	r3, #1
 80034ec:	e016      	b.n	800351c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 fa62 	bl	80039c0 <DMA_CalcBaseAndBitshift>
 80034fc:	4603      	mov	r3, r0
 80034fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003504:	223f      	movs	r2, #63	@ 0x3f
 8003506:	409a      	lsls	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2201      	movs	r2, #1
 8003516:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	f010803f 	.word	0xf010803f

08003528 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b086      	sub	sp, #24
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800353e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003546:	2b01      	cmp	r3, #1
 8003548:	d101      	bne.n	800354e <HAL_DMA_Start_IT+0x26>
 800354a:	2302      	movs	r3, #2
 800354c:	e040      	b.n	80035d0 <HAL_DMA_Start_IT+0xa8>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800355c:	b2db      	uxtb	r3, r3
 800355e:	2b01      	cmp	r3, #1
 8003560:	d12f      	bne.n	80035c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2202      	movs	r2, #2
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 f9f4 	bl	8003964 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003580:	223f      	movs	r2, #63	@ 0x3f
 8003582:	409a      	lsls	r2, r3
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0216 	orr.w	r2, r2, #22
 8003596:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0208 	orr.w	r2, r2, #8
 80035ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f042 0201 	orr.w	r2, r2, #1
 80035be:	601a      	str	r2, [r3, #0]
 80035c0:	e005      	b.n	80035ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035ca:	2302      	movs	r3, #2
 80035cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d004      	beq.n	80035f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2280      	movs	r2, #128	@ 0x80
 80035f0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e00c      	b.n	8003610 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2205      	movs	r2, #5
 80035fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f022 0201 	bic.w	r2, r2, #1
 800360c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003624:	2300      	movs	r3, #0
 8003626:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003628:	4b8e      	ldr	r3, [pc, #568]	@ (8003864 <HAL_DMA_IRQHandler+0x248>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a8e      	ldr	r2, [pc, #568]	@ (8003868 <HAL_DMA_IRQHandler+0x24c>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0a9b      	lsrs	r3, r3, #10
 8003634:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800363a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003646:	2208      	movs	r2, #8
 8003648:	409a      	lsls	r2, r3
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	4013      	ands	r3, r2
 800364e:	2b00      	cmp	r3, #0
 8003650:	d01a      	beq.n	8003688 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d013      	beq.n	8003688 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003674:	2208      	movs	r2, #8
 8003676:	409a      	lsls	r2, r3
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	f043 0201 	orr.w	r2, r3, #1
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368c:	2201      	movs	r2, #1
 800368e:	409a      	lsls	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d012      	beq.n	80036be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036aa:	2201      	movs	r2, #1
 80036ac:	409a      	lsls	r2, r3
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b6:	f043 0202 	orr.w	r2, r3, #2
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036c2:	2204      	movs	r2, #4
 80036c4:	409a      	lsls	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d012      	beq.n	80036f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036e0:	2204      	movs	r2, #4
 80036e2:	409a      	lsls	r2, r3
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ec:	f043 0204 	orr.w	r2, r3, #4
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f8:	2210      	movs	r2, #16
 80036fa:	409a      	lsls	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	4013      	ands	r3, r2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d043      	beq.n	800378c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d03c      	beq.n	800378c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003716:	2210      	movs	r2, #16
 8003718:	409a      	lsls	r2, r3
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d018      	beq.n	800375e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d108      	bne.n	800374c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d024      	beq.n	800378c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	4798      	blx	r3
 800374a:	e01f      	b.n	800378c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01b      	beq.n	800378c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	4798      	blx	r3
 800375c:	e016      	b.n	800378c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d107      	bne.n	800377c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0208 	bic.w	r2, r2, #8
 800377a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003790:	2220      	movs	r2, #32
 8003792:	409a      	lsls	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4013      	ands	r3, r2
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 808f 	beq.w	80038bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	f000 8087 	beq.w	80038bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b2:	2220      	movs	r2, #32
 80037b4:	409a      	lsls	r2, r3
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	2b05      	cmp	r3, #5
 80037c4:	d136      	bne.n	8003834 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681a      	ldr	r2, [r3, #0]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f022 0216 	bic.w	r2, r2, #22
 80037d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695a      	ldr	r2, [r3, #20]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d103      	bne.n	80037f6 <HAL_DMA_IRQHandler+0x1da>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0208 	bic.w	r2, r2, #8
 8003804:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800380a:	223f      	movs	r2, #63	@ 0x3f
 800380c:	409a      	lsls	r2, r3
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2201      	movs	r2, #1
 8003816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003826:	2b00      	cmp	r3, #0
 8003828:	d07e      	beq.n	8003928 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
        }
        return;
 8003832:	e079      	b.n	8003928 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d01d      	beq.n	800387e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800384c:	2b00      	cmp	r3, #0
 800384e:	d10d      	bne.n	800386c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003854:	2b00      	cmp	r3, #0
 8003856:	d031      	beq.n	80038bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800385c:	6878      	ldr	r0, [r7, #4]
 800385e:	4798      	blx	r3
 8003860:	e02c      	b.n	80038bc <HAL_DMA_IRQHandler+0x2a0>
 8003862:	bf00      	nop
 8003864:	2000002c 	.word	0x2000002c
 8003868:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	2b00      	cmp	r3, #0
 8003872:	d023      	beq.n	80038bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	4798      	blx	r3
 800387c:	e01e      	b.n	80038bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003888:	2b00      	cmp	r3, #0
 800388a:	d10f      	bne.n	80038ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0210 	bic.w	r2, r2, #16
 800389a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d003      	beq.n	80038bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d032      	beq.n	800392a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d022      	beq.n	8003916 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2205      	movs	r2, #5
 80038d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f022 0201 	bic.w	r2, r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	3301      	adds	r3, #1
 80038ec:	60bb      	str	r3, [r7, #8]
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d307      	bcc.n	8003904 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1f2      	bne.n	80038e8 <HAL_DMA_IRQHandler+0x2cc>
 8003902:	e000      	b.n	8003906 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003904:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2201      	movs	r2, #1
 800390a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800391a:	2b00      	cmp	r3, #0
 800391c:	d005      	beq.n	800392a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
 8003926:	e000      	b.n	800392a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003928:	bf00      	nop
    }
  }
}
 800392a:	3718      	adds	r7, #24
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800393e:	b2db      	uxtb	r3, r3
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr

0800394c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	60f8      	str	r0, [r7, #12]
 800396c:	60b9      	str	r1, [r7, #8]
 800396e:	607a      	str	r2, [r7, #4]
 8003970:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003980:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	2b40      	cmp	r3, #64	@ 0x40
 8003990:	d108      	bne.n	80039a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68ba      	ldr	r2, [r7, #8]
 80039a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80039a2:	e007      	b.n	80039b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]
}
 80039b4:	bf00      	nop
 80039b6:	3714      	adds	r7, #20
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b085      	sub	sp, #20
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	b2db      	uxtb	r3, r3
 80039ce:	3b10      	subs	r3, #16
 80039d0:	4a14      	ldr	r2, [pc, #80]	@ (8003a24 <DMA_CalcBaseAndBitshift+0x64>)
 80039d2:	fba2 2303 	umull	r2, r3, r2, r3
 80039d6:	091b      	lsrs	r3, r3, #4
 80039d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039da:	4a13      	ldr	r2, [pc, #76]	@ (8003a28 <DMA_CalcBaseAndBitshift+0x68>)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4413      	add	r3, r2
 80039e0:	781b      	ldrb	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2b03      	cmp	r3, #3
 80039ec:	d909      	bls.n	8003a02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	1d1a      	adds	r2, r3, #4
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003a00:	e007      	b.n	8003a12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003a0a:	f023 0303 	bic.w	r3, r3, #3
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3714      	adds	r7, #20
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	aaaaaaab 	.word	0xaaaaaaab
 8003a28:	0800e714 	.word	0x0800e714

08003a2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d11f      	bne.n	8003a86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d856      	bhi.n	8003afa <DMA_CheckFifoParam+0xce>
 8003a4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003a54 <DMA_CheckFifoParam+0x28>)
 8003a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a65 	.word	0x08003a65
 8003a58:	08003a77 	.word	0x08003a77
 8003a5c:	08003a65 	.word	0x08003a65
 8003a60:	08003afb 	.word	0x08003afb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d046      	beq.n	8003afe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a74:	e043      	b.n	8003afe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a7e:	d140      	bne.n	8003b02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a84:	e03d      	b.n	8003b02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	699b      	ldr	r3, [r3, #24]
 8003a8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a8e:	d121      	bne.n	8003ad4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	2b03      	cmp	r3, #3
 8003a94:	d837      	bhi.n	8003b06 <DMA_CheckFifoParam+0xda>
 8003a96:	a201      	add	r2, pc, #4	@ (adr r2, 8003a9c <DMA_CheckFifoParam+0x70>)
 8003a98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9c:	08003aad 	.word	0x08003aad
 8003aa0:	08003ab3 	.word	0x08003ab3
 8003aa4:	08003aad 	.word	0x08003aad
 8003aa8:	08003ac5 	.word	0x08003ac5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	73fb      	strb	r3, [r7, #15]
      break;
 8003ab0:	e030      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ab6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d025      	beq.n	8003b0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ac2:	e022      	b.n	8003b0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ac8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003acc:	d11f      	bne.n	8003b0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003ad2:	e01c      	b.n	8003b0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d903      	bls.n	8003ae2 <DMA_CheckFifoParam+0xb6>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d003      	beq.n	8003ae8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ae0:	e018      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ae6:	e015      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00e      	beq.n	8003b12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	73fb      	strb	r3, [r7, #15]
      break;
 8003af8:	e00b      	b.n	8003b12 <DMA_CheckFifoParam+0xe6>
      break;
 8003afa:	bf00      	nop
 8003afc:	e00a      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003afe:	bf00      	nop
 8003b00:	e008      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b02:	bf00      	nop
 8003b04:	e006      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b06:	bf00      	nop
 8003b08:	e004      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b0a:	bf00      	nop
 8003b0c:	e002      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003b0e:	bf00      	nop
 8003b10:	e000      	b.n	8003b14 <DMA_CheckFifoParam+0xe8>
      break;
 8003b12:	bf00      	nop
    }
  } 
  
  return status; 
 8003b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop

08003b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b089      	sub	sp, #36	@ 0x24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
 8003b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	61fb      	str	r3, [r7, #28]
 8003b3e:	e159      	b.n	8003df4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b40:	2201      	movs	r2, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	4013      	ands	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	f040 8148 	bne.w	8003dee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d005      	beq.n	8003b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d130      	bne.n	8003bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	005b      	lsls	r3, r3, #1
 8003b80:	2203      	movs	r2, #3
 8003b82:	fa02 f303 	lsl.w	r3, r2, r3
 8003b86:	43db      	mvns	r3, r3
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	005b      	lsls	r3, r3, #1
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bac:	2201      	movs	r2, #1
 8003bae:	69fb      	ldr	r3, [r7, #28]
 8003bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb4:	43db      	mvns	r3, r3
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	4013      	ands	r3, r2
 8003bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	091b      	lsrs	r3, r3, #4
 8003bc2:	f003 0201 	and.w	r2, r3, #1
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	f003 0303 	and.w	r3, r3, #3
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d017      	beq.n	8003c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	005b      	lsls	r3, r3, #1
 8003bee:	2203      	movs	r2, #3
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	69ba      	ldr	r2, [r7, #24]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	689a      	ldr	r2, [r3, #8]
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	005b      	lsls	r3, r3, #1
 8003c04:	fa02 f303 	lsl.w	r3, r2, r3
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d123      	bne.n	8003c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0307 	and.w	r3, r3, #7
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	220f      	movs	r2, #15
 8003c38:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3c:	43db      	mvns	r3, r3
 8003c3e:	69ba      	ldr	r2, [r7, #24]
 8003c40:	4013      	ands	r3, r2
 8003c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	691a      	ldr	r2, [r3, #16]
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	fa02 f303 	lsl.w	r3, r2, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	08da      	lsrs	r2, r3, #3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	3208      	adds	r2, #8
 8003c62:	69b9      	ldr	r1, [r7, #24]
 8003c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	2203      	movs	r2, #3
 8003c74:	fa02 f303 	lsl.w	r3, r2, r3
 8003c78:	43db      	mvns	r3, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0203 	and.w	r2, r3, #3
 8003c88:	69fb      	ldr	r3, [r7, #28]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	69ba      	ldr	r2, [r7, #24]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	f000 80a2 	beq.w	8003dee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003caa:	2300      	movs	r3, #0
 8003cac:	60fb      	str	r3, [r7, #12]
 8003cae:	4b57      	ldr	r3, [pc, #348]	@ (8003e0c <HAL_GPIO_Init+0x2e8>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	4a56      	ldr	r2, [pc, #344]	@ (8003e0c <HAL_GPIO_Init+0x2e8>)
 8003cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cba:	4b54      	ldr	r3, [pc, #336]	@ (8003e0c <HAL_GPIO_Init+0x2e8>)
 8003cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003cc2:	60fb      	str	r3, [r7, #12]
 8003cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cc6:	4a52      	ldr	r2, [pc, #328]	@ (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	089b      	lsrs	r3, r3, #2
 8003ccc:	3302      	adds	r3, #2
 8003cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	220f      	movs	r2, #15
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	69ba      	ldr	r2, [r7, #24]
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a49      	ldr	r2, [pc, #292]	@ (8003e14 <HAL_GPIO_Init+0x2f0>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d019      	beq.n	8003d26 <HAL_GPIO_Init+0x202>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a48      	ldr	r2, [pc, #288]	@ (8003e18 <HAL_GPIO_Init+0x2f4>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d013      	beq.n	8003d22 <HAL_GPIO_Init+0x1fe>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a47      	ldr	r2, [pc, #284]	@ (8003e1c <HAL_GPIO_Init+0x2f8>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d00d      	beq.n	8003d1e <HAL_GPIO_Init+0x1fa>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a46      	ldr	r2, [pc, #280]	@ (8003e20 <HAL_GPIO_Init+0x2fc>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d007      	beq.n	8003d1a <HAL_GPIO_Init+0x1f6>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a45      	ldr	r2, [pc, #276]	@ (8003e24 <HAL_GPIO_Init+0x300>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d101      	bne.n	8003d16 <HAL_GPIO_Init+0x1f2>
 8003d12:	2304      	movs	r3, #4
 8003d14:	e008      	b.n	8003d28 <HAL_GPIO_Init+0x204>
 8003d16:	2307      	movs	r3, #7
 8003d18:	e006      	b.n	8003d28 <HAL_GPIO_Init+0x204>
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e004      	b.n	8003d28 <HAL_GPIO_Init+0x204>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e002      	b.n	8003d28 <HAL_GPIO_Init+0x204>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_GPIO_Init+0x204>
 8003d26:	2300      	movs	r3, #0
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	f002 0203 	and.w	r2, r2, #3
 8003d2e:	0092      	lsls	r2, r2, #2
 8003d30:	4093      	lsls	r3, r2
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d38:	4935      	ldr	r1, [pc, #212]	@ (8003e10 <HAL_GPIO_Init+0x2ec>)
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d46:	4b38      	ldr	r3, [pc, #224]	@ (8003e28 <HAL_GPIO_Init+0x304>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	@ (8003e28 <HAL_GPIO_Init+0x304>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d70:	4b2d      	ldr	r3, [pc, #180]	@ (8003e28 <HAL_GPIO_Init+0x304>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d94:	4a24      	ldr	r2, [pc, #144]	@ (8003e28 <HAL_GPIO_Init+0x304>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d9a:	4b23      	ldr	r3, [pc, #140]	@ (8003e28 <HAL_GPIO_Init+0x304>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	4013      	ands	r3, r2
 8003da8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003e28 <HAL_GPIO_Init+0x304>)
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003dc4:	4b18      	ldr	r3, [pc, #96]	@ (8003e28 <HAL_GPIO_Init+0x304>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003de8:	4a0f      	ldr	r2, [pc, #60]	@ (8003e28 <HAL_GPIO_Init+0x304>)
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	3301      	adds	r3, #1
 8003df2:	61fb      	str	r3, [r7, #28]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	2b0f      	cmp	r3, #15
 8003df8:	f67f aea2 	bls.w	8003b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dfc:	bf00      	nop
 8003dfe:	bf00      	nop
 8003e00:	3724      	adds	r7, #36	@ 0x24
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	40013800 	.word	0x40013800
 8003e14:	40020000 	.word	0x40020000
 8003e18:	40020400 	.word	0x40020400
 8003e1c:	40020800 	.word	0x40020800
 8003e20:	40020c00 	.word	0x40020c00
 8003e24:	40021000 	.word	0x40021000
 8003e28:	40013c00 	.word	0x40013c00

08003e2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	460b      	mov	r3, r1
 8003e36:	807b      	strh	r3, [r7, #2]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e3c:	787b      	ldrb	r3, [r7, #1]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e42:	887a      	ldrh	r2, [r7, #2]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e48:	e003      	b.n	8003e52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e4a:	887b      	ldrh	r3, [r7, #2]
 8003e4c:	041a      	lsls	r2, r3, #16
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	619a      	str	r2, [r3, #24]
}
 8003e52:	bf00      	nop
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b085      	sub	sp, #20
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
 8003e66:	460b      	mov	r3, r1
 8003e68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003e70:	887a      	ldrh	r2, [r7, #2]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4013      	ands	r3, r2
 8003e76:	041a      	lsls	r2, r3, #16
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	43d9      	mvns	r1, r3
 8003e7c:	887b      	ldrh	r3, [r7, #2]
 8003e7e:	400b      	ands	r3, r1
 8003e80:	431a      	orrs	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	619a      	str	r2, [r3, #24]
}
 8003e86:	bf00      	nop
 8003e88:	3714      	adds	r7, #20
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
	...

08003e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d101      	bne.n	8003ea6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e12b      	b.n	80040fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d106      	bne.n	8003ec0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7fd fe52 	bl	8001b64 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2224      	movs	r2, #36	@ 0x24
 8003ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ee6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ef6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ef8:	f004 fce6 	bl	80088c8 <HAL_RCC_GetPCLK1Freq>
 8003efc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	4a81      	ldr	r2, [pc, #516]	@ (8004108 <HAL_I2C_Init+0x274>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d807      	bhi.n	8003f18 <HAL_I2C_Init+0x84>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	4a80      	ldr	r2, [pc, #512]	@ (800410c <HAL_I2C_Init+0x278>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	bf94      	ite	ls
 8003f10:	2301      	movls	r3, #1
 8003f12:	2300      	movhi	r3, #0
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	e006      	b.n	8003f26 <HAL_I2C_Init+0x92>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4a7d      	ldr	r2, [pc, #500]	@ (8004110 <HAL_I2C_Init+0x27c>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	bf94      	ite	ls
 8003f20:	2301      	movls	r3, #1
 8003f22:	2300      	movhi	r3, #0
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e0e7      	b.n	80040fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4a78      	ldr	r2, [pc, #480]	@ (8004114 <HAL_I2C_Init+0x280>)
 8003f32:	fba2 2303 	umull	r2, r3, r2, r3
 8003f36:	0c9b      	lsrs	r3, r3, #18
 8003f38:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	6a1b      	ldr	r3, [r3, #32]
 8003f54:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	4a6a      	ldr	r2, [pc, #424]	@ (8004108 <HAL_I2C_Init+0x274>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d802      	bhi.n	8003f68 <HAL_I2C_Init+0xd4>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	3301      	adds	r3, #1
 8003f66:	e009      	b.n	8003f7c <HAL_I2C_Init+0xe8>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f6e:	fb02 f303 	mul.w	r3, r2, r3
 8003f72:	4a69      	ldr	r2, [pc, #420]	@ (8004118 <HAL_I2C_Init+0x284>)
 8003f74:	fba2 2303 	umull	r2, r3, r2, r3
 8003f78:	099b      	lsrs	r3, r3, #6
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	6812      	ldr	r2, [r2, #0]
 8003f80:	430b      	orrs	r3, r1
 8003f82:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f8e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	495c      	ldr	r1, [pc, #368]	@ (8004108 <HAL_I2C_Init+0x274>)
 8003f98:	428b      	cmp	r3, r1
 8003f9a:	d819      	bhi.n	8003fd0 <HAL_I2C_Init+0x13c>
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	1e59      	subs	r1, r3, #1
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003faa:	1c59      	adds	r1, r3, #1
 8003fac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003fb0:	400b      	ands	r3, r1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <HAL_I2C_Init+0x138>
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1e59      	subs	r1, r3, #1
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fc4:	3301      	adds	r3, #1
 8003fc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fca:	e051      	b.n	8004070 <HAL_I2C_Init+0x1dc>
 8003fcc:	2304      	movs	r3, #4
 8003fce:	e04f      	b.n	8004070 <HAL_I2C_Init+0x1dc>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689b      	ldr	r3, [r3, #8]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d111      	bne.n	8003ffc <HAL_I2C_Init+0x168>
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	1e58      	subs	r0, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6859      	ldr	r1, [r3, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	440b      	add	r3, r1
 8003fe6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fea:	3301      	adds	r3, #1
 8003fec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	bf0c      	ite	eq
 8003ff4:	2301      	moveq	r3, #1
 8003ff6:	2300      	movne	r3, #0
 8003ff8:	b2db      	uxtb	r3, r3
 8003ffa:	e012      	b.n	8004022 <HAL_I2C_Init+0x18e>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	1e58      	subs	r0, r3, #1
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6859      	ldr	r1, [r3, #4]
 8004004:	460b      	mov	r3, r1
 8004006:	009b      	lsls	r3, r3, #2
 8004008:	440b      	add	r3, r1
 800400a:	0099      	lsls	r1, r3, #2
 800400c:	440b      	add	r3, r1
 800400e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004012:	3301      	adds	r3, #1
 8004014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf0c      	ite	eq
 800401c:	2301      	moveq	r3, #1
 800401e:	2300      	movne	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d001      	beq.n	800402a <HAL_I2C_Init+0x196>
 8004026:	2301      	movs	r3, #1
 8004028:	e022      	b.n	8004070 <HAL_I2C_Init+0x1dc>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10e      	bne.n	8004050 <HAL_I2C_Init+0x1bc>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	1e58      	subs	r0, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6859      	ldr	r1, [r3, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	440b      	add	r3, r1
 8004040:	fbb0 f3f3 	udiv	r3, r0, r3
 8004044:	3301      	adds	r3, #1
 8004046:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800404a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800404e:	e00f      	b.n	8004070 <HAL_I2C_Init+0x1dc>
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	1e58      	subs	r0, r3, #1
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6859      	ldr	r1, [r3, #4]
 8004058:	460b      	mov	r3, r1
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	0099      	lsls	r1, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	fbb0 f3f3 	udiv	r3, r0, r3
 8004066:	3301      	adds	r3, #1
 8004068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	6809      	ldr	r1, [r1, #0]
 8004074:	4313      	orrs	r3, r2
 8004076:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	69da      	ldr	r2, [r3, #28]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a1b      	ldr	r3, [r3, #32]
 800408a:	431a      	orrs	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800409e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	6911      	ldr	r1, [r2, #16]
 80040a6:	687a      	ldr	r2, [r7, #4]
 80040a8:	68d2      	ldr	r2, [r2, #12]
 80040aa:	4311      	orrs	r1, r2
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	6812      	ldr	r2, [r2, #0]
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	695a      	ldr	r2, [r3, #20]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	699b      	ldr	r3, [r3, #24]
 80040c6:	431a      	orrs	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681a      	ldr	r2, [r3, #0]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f042 0201 	orr.w	r2, r2, #1
 80040de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3710      	adds	r7, #16
 8004102:	46bd      	mov	sp, r7
 8004104:	bd80      	pop	{r7, pc}
 8004106:	bf00      	nop
 8004108:	000186a0 	.word	0x000186a0
 800410c:	001e847f 	.word	0x001e847f
 8004110:	003d08ff 	.word	0x003d08ff
 8004114:	431bde83 	.word	0x431bde83
 8004118:	10624dd3 	.word	0x10624dd3

0800411c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	695b      	ldr	r3, [r3, #20]
 800412a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800412e:	2b80      	cmp	r3, #128	@ 0x80
 8004130:	d103      	bne.n	800413a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
  }
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
	...

08004148 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b088      	sub	sp, #32
 800414c:	af02      	add	r7, sp, #8
 800414e:	60f8      	str	r0, [r7, #12]
 8004150:	4608      	mov	r0, r1
 8004152:	4611      	mov	r1, r2
 8004154:	461a      	mov	r2, r3
 8004156:	4603      	mov	r3, r0
 8004158:	817b      	strh	r3, [r7, #10]
 800415a:	460b      	mov	r3, r1
 800415c:	813b      	strh	r3, [r7, #8]
 800415e:	4613      	mov	r3, r2
 8004160:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004162:	f7fe fad1 	bl	8002708 <HAL_GetTick>
 8004166:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b20      	cmp	r3, #32
 8004172:	f040 80d9 	bne.w	8004328 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	9300      	str	r3, [sp, #0]
 800417a:	2319      	movs	r3, #25
 800417c:	2201      	movs	r2, #1
 800417e:	496d      	ldr	r1, [pc, #436]	@ (8004334 <HAL_I2C_Mem_Write+0x1ec>)
 8004180:	68f8      	ldr	r0, [r7, #12]
 8004182:	f002 faf9 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 8004186:	4603      	mov	r3, r0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d001      	beq.n	8004190 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800418c:	2302      	movs	r3, #2
 800418e:	e0cc      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004196:	2b01      	cmp	r3, #1
 8004198:	d101      	bne.n	800419e <HAL_I2C_Mem_Write+0x56>
 800419a:	2302      	movs	r3, #2
 800419c:	e0c5      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f003 0301 	and.w	r3, r3, #1
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d007      	beq.n	80041c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2221      	movs	r2, #33	@ 0x21
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2240      	movs	r2, #64	@ 0x40
 80041e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2200      	movs	r2, #0
 80041e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6a3a      	ldr	r2, [r7, #32]
 80041ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	4a4d      	ldr	r2, [pc, #308]	@ (8004338 <HAL_I2C_Mem_Write+0x1f0>)
 8004204:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004206:	88f8      	ldrh	r0, [r7, #6]
 8004208:	893a      	ldrh	r2, [r7, #8]
 800420a:	8979      	ldrh	r1, [r7, #10]
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	9301      	str	r3, [sp, #4]
 8004210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	4603      	mov	r3, r0
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f001 ff6c 	bl	80060f4 <I2C_RequestMemoryWrite>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d052      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e081      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004226:	697a      	ldr	r2, [r7, #20]
 8004228:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f002 fbbe 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00d      	beq.n	8004252 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423a:	2b04      	cmp	r3, #4
 800423c:	d107      	bne.n	800424e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800424c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e06b      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004256:	781a      	ldrb	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	f003 0304 	and.w	r3, r3, #4
 800428c:	2b04      	cmp	r3, #4
 800428e:	d11b      	bne.n	80042c8 <HAL_I2C_Mem_Write+0x180>
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004294:	2b00      	cmp	r3, #0
 8004296:	d017      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042b2:	3b01      	subs	r3, #1
 80042b4:	b29a      	uxth	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d1aa      	bne.n	8004226 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042d4:	68f8      	ldr	r0, [r7, #12]
 80042d6:	f002 fbb1 	bl	8006a3c <I2C_WaitOnBTFFlagUntilTimeout>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00d      	beq.n	80042fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	2b04      	cmp	r3, #4
 80042e6:	d107      	bne.n	80042f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e016      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800430a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	3718      	adds	r7, #24
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	00100002 	.word	0x00100002
 8004338:	ffff0000 	.word	0xffff0000

0800433c <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b08a      	sub	sp, #40	@ 0x28
 8004340:	af02      	add	r7, sp, #8
 8004342:	60f8      	str	r0, [r7, #12]
 8004344:	4608      	mov	r0, r1
 8004346:	4611      	mov	r1, r2
 8004348:	461a      	mov	r2, r3
 800434a:	4603      	mov	r3, r0
 800434c:	817b      	strh	r3, [r7, #10]
 800434e:	460b      	mov	r3, r1
 8004350:	813b      	strh	r3, [r7, #8]
 8004352:	4613      	mov	r3, r2
 8004354:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800435a:	f7fe f9d5 	bl	8002708 <HAL_GetTick>
 800435e:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004366:	b2db      	uxtb	r3, r3
 8004368:	2b20      	cmp	r3, #32
 800436a:	f040 8136 	bne.w	80045da <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800436e:	4b9d      	ldr	r3, [pc, #628]	@ (80045e4 <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	08db      	lsrs	r3, r3, #3
 8004374:	4a9c      	ldr	r2, [pc, #624]	@ (80045e8 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 8004376:	fba2 2303 	umull	r2, r3, r2, r3
 800437a:	0a1a      	lsrs	r2, r3, #8
 800437c:	4613      	mov	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	4413      	add	r3, r2
 8004382:	009a      	lsls	r2, r3, #2
 8004384:	4413      	add	r3, r2
 8004386:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3b01      	subs	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d112      	bne.n	80043ba <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ae:	f043 0220 	orr.w	r2, r3, #32
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80043b6:	2302      	movs	r3, #2
 80043b8:	e110      	b.n	80045dc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d0df      	beq.n	8004388 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_I2C_Mem_Write_DMA+0x9a>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e102      	b.n	80045dc <HAL_I2C_Mem_Write_DMA+0x2a0>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d007      	beq.n	80043fc <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f042 0201 	orr.w	r2, r2, #1
 80043fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800440a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2221      	movs	r2, #33	@ 0x21
 8004410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2240      	movs	r2, #64	@ 0x40
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004426:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 800442c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a6c      	ldr	r2, [pc, #432]	@ (80045ec <HAL_I2C_Mem_Write_DMA+0x2b0>)
 800443c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 800443e:	897a      	ldrh	r2, [r7, #10]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004444:	893a      	ldrh	r2, [r7, #8]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800444a:	88fa      	ldrh	r2, [r7, #6]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	2200      	movs	r2, #0
 8004454:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 80a9 	beq.w	80045b2 <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004464:	2b00      	cmp	r3, #0
 8004466:	d02a      	beq.n	80044be <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800446c:	4a60      	ldr	r2, [pc, #384]	@ (80045f0 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 800446e:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004474:	4a5f      	ldr	r2, [pc, #380]	@ (80045f4 <HAL_I2C_Mem_Write_DMA+0x2b8>)
 8004476:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800447c:	2200      	movs	r2, #0
 800447e:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004484:	2200      	movs	r2, #0
 8004486:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800448c:	2200      	movs	r2, #0
 800448e:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004494:	2200      	movs	r2, #0
 8004496:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a0:	4619      	mov	r1, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3310      	adds	r3, #16
 80044a8:	461a      	mov	r2, r3
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ae:	f7ff f83b 	bl	8003528 <HAL_DMA_Start_IT>
 80044b2:	4603      	mov	r3, r0
 80044b4:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80044b6:	7efb      	ldrb	r3, [r7, #27]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d166      	bne.n	800458a <HAL_I2C_Mem_Write_DMA+0x24e>
 80044bc:	e013      	b.n	80044e6 <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2220      	movs	r2, #32
 80044c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e07a      	b.n	80045dc <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80044e6:	88f8      	ldrh	r0, [r7, #6]
 80044e8:	893a      	ldrh	r2, [r7, #8]
 80044ea:	8979      	ldrh	r1, [r7, #10]
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	9301      	str	r3, [sp, #4]
 80044f0:	2323      	movs	r3, #35	@ 0x23
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	4603      	mov	r3, r0
 80044f6:	68f8      	ldr	r0, [r7, #12]
 80044f8:	f001 fdfc 	bl	80060f4 <I2C_RequestMemoryWrite>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d022      	beq.n	8004548 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004506:	4618      	mov	r0, r3
 8004508:	f7ff f866 	bl	80035d8 <HAL_DMA_Abort_IT>
 800450c:	4603      	mov	r3, r0
 800450e:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004514:	2200      	movs	r2, #0
 8004516:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004526:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f022 0201 	bic.w	r2, r2, #1
 8004542:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e049      	b.n	80045dc <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	613b      	str	r3, [r7, #16]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2200      	movs	r2, #0
 8004562:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004574:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685a      	ldr	r2, [r3, #4]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004584:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 8004586:	2300      	movs	r3, #0
 8004588:	e028      	b.n	80045dc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459e:	f043 0210 	orr.w	r2, r3, #16
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e014      	b.n	80045dc <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2220      	movs	r2, #32
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e000      	b.n	80045dc <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 80045da:	2302      	movs	r3, #2
  }
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3720      	adds	r7, #32
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	2000002c 	.word	0x2000002c
 80045e8:	14f8b589 	.word	0x14f8b589
 80045ec:	ffff0000 	.word	0xffff0000
 80045f0:	080063f1 	.word	0x080063f1
 80045f4:	080065af 	.word	0x080065af

080045f8 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08c      	sub	sp, #48	@ 0x30
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	4608      	mov	r0, r1
 8004602:	4611      	mov	r1, r2
 8004604:	461a      	mov	r2, r3
 8004606:	4603      	mov	r3, r0
 8004608:	817b      	strh	r3, [r7, #10]
 800460a:	460b      	mov	r3, r1
 800460c:	813b      	strh	r3, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004612:	f7fe f879 	bl	8002708 <HAL_GetTick>
 8004616:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004622:	b2db      	uxtb	r3, r3
 8004624:	2b20      	cmp	r3, #32
 8004626:	f040 8172 	bne.w	800490e <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800462a:	4b93      	ldr	r3, [pc, #588]	@ (8004878 <HAL_I2C_Mem_Read_DMA+0x280>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	08db      	lsrs	r3, r3, #3
 8004630:	4a92      	ldr	r2, [pc, #584]	@ (800487c <HAL_I2C_Mem_Read_DMA+0x284>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	0a1a      	lsrs	r2, r3, #8
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009a      	lsls	r2, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	3b01      	subs	r3, #1
 8004648:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d112      	bne.n	8004676 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	f043 0220 	orr.w	r2, r3, #32
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 8004672:	2302      	movs	r3, #2
 8004674:	e14c      	b.n	8004910 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	f003 0302 	and.w	r3, r3, #2
 8004680:	2b02      	cmp	r3, #2
 8004682:	d0df      	beq.n	8004644 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_I2C_Mem_Read_DMA+0x9a>
 800468e:	2302      	movs	r3, #2
 8004690:	e13e      	b.n	8004910 <HAL_I2C_Mem_Read_DMA+0x318>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f003 0301 	and.w	r3, r3, #1
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d007      	beq.n	80046b8 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f042 0201 	orr.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2222      	movs	r2, #34	@ 0x22
 80046cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2240      	movs	r2, #64	@ 0x40
 80046d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80046e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	4a62      	ldr	r2, [pc, #392]	@ (8004880 <HAL_I2C_Mem_Read_DMA+0x288>)
 80046f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80046fa:	897a      	ldrh	r2, [r7, #10]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8004700:	893a      	ldrh	r2, [r7, #8]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8004706:	88fa      	ldrh	r2, [r7, #6]
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 80cc 	beq.w	80048b4 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02d      	beq.n	8004780 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004728:	4a56      	ldr	r2, [pc, #344]	@ (8004884 <HAL_I2C_Mem_Read_DMA+0x28c>)
 800472a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004730:	4a55      	ldr	r2, [pc, #340]	@ (8004888 <HAL_I2C_Mem_Read_DMA+0x290>)
 8004732:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004738:	2200      	movs	r2, #0
 800473a:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004740:	2200      	movs	r2, #0
 8004742:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	2200      	movs	r2, #0
 800474a:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004750:	2200      	movs	r2, #0
 8004752:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3310      	adds	r3, #16
 800475e:	4619      	mov	r1, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004764:	461a      	mov	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800476a:	f7fe fedd 	bl	8003528 <HAL_DMA_Start_IT>
 800476e:	4603      	mov	r3, r0
 8004770:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8004774:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004778:	2b00      	cmp	r3, #0
 800477a:	f040 8087 	bne.w	800488c <HAL_I2C_Mem_Read_DMA+0x294>
 800477e:	e013      	b.n	80047a8 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004794:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2200      	movs	r2, #0
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	e0b3      	b.n	8004910 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80047a8:	88f8      	ldrh	r0, [r7, #6]
 80047aa:	893a      	ldrh	r2, [r7, #8]
 80047ac:	8979      	ldrh	r1, [r7, #10]
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	9301      	str	r3, [sp, #4]
 80047b2:	2323      	movs	r3, #35	@ 0x23
 80047b4:	9300      	str	r3, [sp, #0]
 80047b6:	4603      	mov	r3, r0
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f001 fd31 	bl	8006220 <I2C_RequestMemoryRead>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d023      	beq.n	800480c <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047c8:	4618      	mov	r0, r3
 80047ca:	f7fe ff05 	bl	80035d8 <HAL_DMA_Abort_IT>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d8:	2200      	movs	r2, #0
 80047da:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047ea:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0201 	bic.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8004808:	2301      	movs	r3, #1
 800480a:	e081      	b.n	8004910 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004810:	2b01      	cmp	r3, #1
 8004812:	d108      	bne.n	8004826 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	e007      	b.n	8004836 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004834:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004836:	2300      	movs	r3, #0
 8004838:	61bb      	str	r3, [r7, #24]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	695b      	ldr	r3, [r3, #20]
 8004840:	61bb      	str	r3, [r7, #24]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	699b      	ldr	r3, [r3, #24]
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004862:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685a      	ldr	r2, [r3, #4]
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004872:	605a      	str	r2, [r3, #4]
 8004874:	e049      	b.n	800490a <HAL_I2C_Mem_Read_DMA+0x312>
 8004876:	bf00      	nop
 8004878:	2000002c 	.word	0x2000002c
 800487c:	14f8b589 	.word	0x14f8b589
 8004880:	ffff0000 	.word	0xffff0000
 8004884:	080063f1 	.word	0x080063f1
 8004888:	080065af 	.word	0x080065af
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a0:	f043 0210 	orr.w	r2, r3, #16
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2200      	movs	r2, #0
 80048ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e02d      	b.n	8004910 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80048b4:	88f8      	ldrh	r0, [r7, #6]
 80048b6:	893a      	ldrh	r2, [r7, #8]
 80048b8:	8979      	ldrh	r1, [r7, #10]
 80048ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	2323      	movs	r3, #35	@ 0x23
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	4603      	mov	r3, r0
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f001 fcab 	bl	8006220 <I2C_RequestMemoryRead>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d001      	beq.n	80048d4 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 80048d0:	2301      	movs	r3, #1
 80048d2:	e01d      	b.n	8004910 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	617b      	str	r3, [r7, #20]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048f8:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 800490a:	2300      	movs	r3, #0
 800490c:	e000      	b.n	8004910 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800490e:	2302      	movs	r3, #2
  }
}
 8004910:	4618      	mov	r0, r3
 8004912:	3728      	adds	r7, #40	@ 0x28
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004930:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004938:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004940:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004942:	7bfb      	ldrb	r3, [r7, #15]
 8004944:	2b10      	cmp	r3, #16
 8004946:	d003      	beq.n	8004950 <HAL_I2C_EV_IRQHandler+0x38>
 8004948:	7bfb      	ldrb	r3, [r7, #15]
 800494a:	2b40      	cmp	r3, #64	@ 0x40
 800494c:	f040 80c1 	bne.w	8004ad2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f003 0301 	and.w	r3, r3, #1
 8004966:	2b00      	cmp	r3, #0
 8004968:	d10d      	bne.n	8004986 <HAL_I2C_EV_IRQHandler+0x6e>
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8004970:	d003      	beq.n	800497a <HAL_I2C_EV_IRQHandler+0x62>
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8004978:	d101      	bne.n	800497e <HAL_I2C_EV_IRQHandler+0x66>
 800497a:	2301      	movs	r3, #1
 800497c:	e000      	b.n	8004980 <HAL_I2C_EV_IRQHandler+0x68>
 800497e:	2300      	movs	r3, #0
 8004980:	2b01      	cmp	r3, #1
 8004982:	f000 8132 	beq.w	8004bea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00c      	beq.n	80049aa <HAL_I2C_EV_IRQHandler+0x92>
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	0a5b      	lsrs	r3, r3, #9
 8004994:	f003 0301 	and.w	r3, r3, #1
 8004998:	2b00      	cmp	r3, #0
 800499a:	d006      	beq.n	80049aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f002 f8f6 	bl	8006b8e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80049a2:	6878      	ldr	r0, [r7, #4]
 80049a4:	f000 fd87 	bl	80054b6 <I2C_Master_SB>
 80049a8:	e092      	b.n	8004ad0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	08db      	lsrs	r3, r3, #3
 80049ae:	f003 0301 	and.w	r3, r3, #1
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d009      	beq.n	80049ca <HAL_I2C_EV_IRQHandler+0xb2>
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	0a5b      	lsrs	r3, r3, #9
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d003      	beq.n	80049ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fdfd 	bl	80055c2 <I2C_Master_ADD10>
 80049c8:	e082      	b.n	8004ad0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	085b      	lsrs	r3, r3, #1
 80049ce:	f003 0301 	and.w	r3, r3, #1
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d009      	beq.n	80049ea <HAL_I2C_EV_IRQHandler+0xd2>
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	0a5b      	lsrs	r3, r3, #9
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f000 fe17 	bl	8005616 <I2C_Master_ADDR>
 80049e8:	e072      	b.n	8004ad0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80049ea:	69bb      	ldr	r3, [r7, #24]
 80049ec:	089b      	lsrs	r3, r3, #2
 80049ee:	f003 0301 	and.w	r3, r3, #1
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d03b      	beq.n	8004a6e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a00:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a04:	f000 80f3 	beq.w	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a08:	69fb      	ldr	r3, [r7, #28]
 8004a0a:	09db      	lsrs	r3, r3, #7
 8004a0c:	f003 0301 	and.w	r3, r3, #1
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00f      	beq.n	8004a34 <HAL_I2C_EV_IRQHandler+0x11c>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	0a9b      	lsrs	r3, r3, #10
 8004a18:	f003 0301 	and.w	r3, r3, #1
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d009      	beq.n	8004a34 <HAL_I2C_EV_IRQHandler+0x11c>
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	089b      	lsrs	r3, r3, #2
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d103      	bne.n	8004a34 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f9df 	bl	8004df0 <I2C_MasterTransmit_TXE>
 8004a32:	e04d      	b.n	8004ad0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	089b      	lsrs	r3, r3, #2
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80d6 	beq.w	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
 8004a42:	697b      	ldr	r3, [r7, #20]
 8004a44:	0a5b      	lsrs	r3, r3, #9
 8004a46:	f003 0301 	and.w	r3, r3, #1
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f000 80cf 	beq.w	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004a50:	7bbb      	ldrb	r3, [r7, #14]
 8004a52:	2b21      	cmp	r3, #33	@ 0x21
 8004a54:	d103      	bne.n	8004a5e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa66 	bl	8004f28 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a5c:	e0c7      	b.n	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
 8004a60:	2b40      	cmp	r3, #64	@ 0x40
 8004a62:	f040 80c4 	bne.w	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fad4 	bl	8005014 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004a6c:	e0bf      	b.n	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a7c:	f000 80b7 	beq.w	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d00f      	beq.n	8004aac <HAL_I2C_EV_IRQHandler+0x194>
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	0a9b      	lsrs	r3, r3, #10
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d009      	beq.n	8004aac <HAL_I2C_EV_IRQHandler+0x194>
 8004a98:	69fb      	ldr	r3, [r7, #28]
 8004a9a:	089b      	lsrs	r3, r3, #2
 8004a9c:	f003 0301 	and.w	r3, r3, #1
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d103      	bne.n	8004aac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	f000 fb4d 	bl	8005144 <I2C_MasterReceive_RXNE>
 8004aaa:	e011      	b.n	8004ad0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	089b      	lsrs	r3, r3, #2
 8004ab0:	f003 0301 	and.w	r3, r3, #1
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f000 809a 	beq.w	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	0a5b      	lsrs	r3, r3, #9
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	f000 8093 	beq.w	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 fc03 	bl	80052d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ace:	e08e      	b.n	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
 8004ad0:	e08d      	b.n	8004bee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	61fb      	str	r3, [r7, #28]
 8004ae2:	e007      	b.n	8004af4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	695b      	ldr	r3, [r3, #20]
 8004af2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	085b      	lsrs	r3, r3, #1
 8004af8:	f003 0301 	and.w	r3, r3, #1
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0x20e>
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	0a5b      	lsrs	r3, r3, #9
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d00c      	beq.n	8004b26 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d003      	beq.n	8004b1c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004b1c:	69b9      	ldr	r1, [r7, #24]
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 ffc8 	bl	8005ab4 <I2C_Slave_ADDR>
 8004b24:	e066      	b.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b26:	69fb      	ldr	r3, [r7, #28]
 8004b28:	091b      	lsrs	r3, r3, #4
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_I2C_EV_IRQHandler+0x22e>
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	0a5b      	lsrs	r3, r3, #9
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f001 f802 	bl	8005b48 <I2C_Slave_STOPF>
 8004b44:	e056      	b.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b46:	7bbb      	ldrb	r3, [r7, #14]
 8004b48:	2b21      	cmp	r3, #33	@ 0x21
 8004b4a:	d002      	beq.n	8004b52 <HAL_I2C_EV_IRQHandler+0x23a>
 8004b4c:	7bbb      	ldrb	r3, [r7, #14]
 8004b4e:	2b29      	cmp	r3, #41	@ 0x29
 8004b50:	d125      	bne.n	8004b9e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	09db      	lsrs	r3, r3, #7
 8004b56:	f003 0301 	and.w	r3, r3, #1
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00f      	beq.n	8004b7e <HAL_I2C_EV_IRQHandler+0x266>
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	0a9b      	lsrs	r3, r3, #10
 8004b62:	f003 0301 	and.w	r3, r3, #1
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d009      	beq.n	8004b7e <HAL_I2C_EV_IRQHandler+0x266>
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	089b      	lsrs	r3, r3, #2
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fede 	bl	8005938 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b7c:	e039      	b.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	089b      	lsrs	r3, r3, #2
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d033      	beq.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x2da>
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	0a5b      	lsrs	r3, r3, #9
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d02d      	beq.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 ff0b 	bl	80059b2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b9c:	e029      	b.n	8004bf2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	099b      	lsrs	r3, r3, #6
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00f      	beq.n	8004bca <HAL_I2C_EV_IRQHandler+0x2b2>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	0a9b      	lsrs	r3, r3, #10
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_I2C_EV_IRQHandler+0x2b2>
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d103      	bne.n	8004bca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 ff16 	bl	80059f4 <I2C_SlaveReceive_RXNE>
 8004bc8:	e014      	b.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bca:	69fb      	ldr	r3, [r7, #28]
 8004bcc:	089b      	lsrs	r3, r3, #2
 8004bce:	f003 0301 	and.w	r3, r3, #1
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00e      	beq.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x2dc>
 8004bd6:	697b      	ldr	r3, [r7, #20]
 8004bd8:	0a5b      	lsrs	r3, r3, #9
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d008      	beq.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 ff44 	bl	8005a70 <I2C_SlaveReceive_BTF>
 8004be8:	e004      	b.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8004bea:	bf00      	nop
 8004bec:	e002      	b.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004bee:	bf00      	nop
 8004bf0:	e000      	b.n	8004bf4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004bf2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004bf4:	3720      	adds	r7, #32
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}

08004bfa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004bfa:	b580      	push	{r7, lr}
 8004bfc:	b08a      	sub	sp, #40	@ 0x28
 8004bfe:	af00      	add	r7, sp, #0
 8004c00:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	695b      	ldr	r3, [r3, #20]
 8004c08:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004c12:	2300      	movs	r3, #0
 8004c14:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c1c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c1e:	6a3b      	ldr	r3, [r7, #32]
 8004c20:	0a1b      	lsrs	r3, r3, #8
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00e      	beq.n	8004c48 <HAL_I2C_ER_IRQHandler+0x4e>
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	0a1b      	lsrs	r3, r3, #8
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8004c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c38:	f043 0301 	orr.w	r3, r3, #1
 8004c3c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004c46:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	0a5b      	lsrs	r3, r3, #9
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00e      	beq.n	8004c72 <HAL_I2C_ER_IRQHandler+0x78>
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	0a1b      	lsrs	r3, r3, #8
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d008      	beq.n	8004c72 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c62:	f043 0302 	orr.w	r3, r3, #2
 8004c66:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8004c70:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004c72:	6a3b      	ldr	r3, [r7, #32]
 8004c74:	0a9b      	lsrs	r3, r3, #10
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d03f      	beq.n	8004cfe <HAL_I2C_ER_IRQHandler+0x104>
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	0a1b      	lsrs	r3, r3, #8
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d039      	beq.n	8004cfe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8004c8a:	7efb      	ldrb	r3, [r7, #27]
 8004c8c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c9c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ca2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8004ca4:	7ebb      	ldrb	r3, [r7, #26]
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d112      	bne.n	8004cd0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004caa:	697b      	ldr	r3, [r7, #20]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d10f      	bne.n	8004cd0 <HAL_I2C_ER_IRQHandler+0xd6>
 8004cb0:	7cfb      	ldrb	r3, [r7, #19]
 8004cb2:	2b21      	cmp	r3, #33	@ 0x21
 8004cb4:	d008      	beq.n	8004cc8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8004cb6:	7cfb      	ldrb	r3, [r7, #19]
 8004cb8:	2b29      	cmp	r3, #41	@ 0x29
 8004cba:	d005      	beq.n	8004cc8 <HAL_I2C_ER_IRQHandler+0xce>
 8004cbc:	7cfb      	ldrb	r3, [r7, #19]
 8004cbe:	2b28      	cmp	r3, #40	@ 0x28
 8004cc0:	d106      	bne.n	8004cd0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2b21      	cmp	r3, #33	@ 0x21
 8004cc6:	d103      	bne.n	8004cd0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f001 f86d 	bl	8005da8 <I2C_Slave_AF>
 8004cce:	e016      	b.n	8004cfe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004cd8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8004cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cdc:	f043 0304 	orr.w	r3, r3, #4
 8004ce0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004ce2:	7efb      	ldrb	r3, [r7, #27]
 8004ce4:	2b10      	cmp	r3, #16
 8004ce6:	d002      	beq.n	8004cee <HAL_I2C_ER_IRQHandler+0xf4>
 8004ce8:	7efb      	ldrb	r3, [r7, #27]
 8004cea:	2b40      	cmp	r3, #64	@ 0x40
 8004cec:	d107      	bne.n	8004cfe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004cfc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004cfe:	6a3b      	ldr	r3, [r7, #32]
 8004d00:	0adb      	lsrs	r3, r3, #11
 8004d02:	f003 0301 	and.w	r3, r3, #1
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00e      	beq.n	8004d28 <HAL_I2C_ER_IRQHandler+0x12e>
 8004d0a:	69fb      	ldr	r3, [r7, #28]
 8004d0c:	0a1b      	lsrs	r3, r3, #8
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d008      	beq.n	8004d28 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d18:	f043 0308 	orr.w	r3, r3, #8
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8004d26:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d008      	beq.n	8004d40 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	431a      	orrs	r2, r3
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f001 f8a8 	bl	8005e90 <I2C_ITError>
  }
}
 8004d40:	bf00      	nop
 8004d42:	3728      	adds	r7, #40	@ 0x28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004d50:	bf00      	nop
 8004d52:	370c      	adds	r7, #12
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr

08004d5c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004d64:	bf00      	nop
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004d78:	bf00      	nop
 8004d7a:	370c      	adds	r7, #12
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr

08004d84 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004d8c:	bf00      	nop
 8004d8e:	370c      	adds	r7, #12
 8004d90:	46bd      	mov	sp, r7
 8004d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d96:	4770      	bx	lr

08004d98 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	460b      	mov	r3, r1
 8004da2:	70fb      	strb	r3, [r7, #3]
 8004da4:	4613      	mov	r3, r2
 8004da6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	370c      	adds	r7, #12
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b084      	sub	sp, #16
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dfe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d150      	bne.n	8004eb8 <I2C_MasterTransmit_TXE+0xc8>
 8004e16:	7bfb      	ldrb	r3, [r7, #15]
 8004e18:	2b21      	cmp	r3, #33	@ 0x21
 8004e1a:	d14d      	bne.n	8004eb8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d01d      	beq.n	8004e5e <I2C_MasterTransmit_TXE+0x6e>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b20      	cmp	r3, #32
 8004e26:	d01a      	beq.n	8004e5e <I2C_MasterTransmit_TXE+0x6e>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004e2e:	d016      	beq.n	8004e5e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e3e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2211      	movs	r2, #17
 8004e44:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2220      	movs	r2, #32
 8004e52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f7ff ff76 	bl	8004d48 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004e5c:	e060      	b.n	8004f20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004e6c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e7c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b40      	cmp	r3, #64	@ 0x40
 8004e96:	d107      	bne.n	8004ea8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fb fbbd 	bl	8000620 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ea6:	e03b      	b.n	8004f20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7ff ff49 	bl	8004d48 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004eb6:	e033      	b.n	8004f20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004eb8:	7bfb      	ldrb	r3, [r7, #15]
 8004eba:	2b21      	cmp	r3, #33	@ 0x21
 8004ebc:	d005      	beq.n	8004eca <I2C_MasterTransmit_TXE+0xda>
 8004ebe:	7bbb      	ldrb	r3, [r7, #14]
 8004ec0:	2b40      	cmp	r3, #64	@ 0x40
 8004ec2:	d12d      	bne.n	8004f20 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004ec4:	7bfb      	ldrb	r3, [r7, #15]
 8004ec6:	2b22      	cmp	r3, #34	@ 0x22
 8004ec8:	d12a      	bne.n	8004f20 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ece:	b29b      	uxth	r3, r3
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d108      	bne.n	8004ee6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004ee4:	e01c      	b.n	8004f20 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b40      	cmp	r3, #64	@ 0x40
 8004ef0:	d103      	bne.n	8004efa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f88e 	bl	8005014 <I2C_MemoryTransmit_TXE_BTF>
}
 8004ef8:	e012      	b.n	8004f20 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004efe:	781a      	ldrb	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	3b01      	subs	r3, #1
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8004f1e:	e7ff      	b.n	8004f20 <I2C_MasterTransmit_TXE+0x130>
 8004f20:	bf00      	nop
 8004f22:	3710      	adds	r7, #16
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}

08004f28 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f34:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2b21      	cmp	r3, #33	@ 0x21
 8004f40:	d164      	bne.n	800500c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d012      	beq.n	8004f72 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f50:	781a      	ldrb	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f5c:	1c5a      	adds	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004f70:	e04c      	b.n	800500c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2b08      	cmp	r3, #8
 8004f76:	d01d      	beq.n	8004fb4 <I2C_MasterTransmit_BTF+0x8c>
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2b20      	cmp	r3, #32
 8004f7c:	d01a      	beq.n	8004fb4 <I2C_MasterTransmit_BTF+0x8c>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004f84:	d016      	beq.n	8004fb4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004f94:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2211      	movs	r2, #17
 8004f9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2220      	movs	r2, #32
 8004fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f7ff fecb 	bl	8004d48 <HAL_I2C_MasterTxCpltCallback>
}
 8004fb2:	e02b      	b.n	800500c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8004fc2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fd2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fe8:	b2db      	uxtb	r3, r3
 8004fea:	2b40      	cmp	r3, #64	@ 0x40
 8004fec:	d107      	bne.n	8004ffe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7fb fb12 	bl	8000620 <HAL_I2C_MemTxCpltCallback>
}
 8004ffc:	e006      	b.n	800500c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fe9e 	bl	8004d48 <HAL_I2C_MasterTxCpltCallback>
}
 800500c:	bf00      	nop
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005022:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005028:	2b00      	cmp	r3, #0
 800502a:	d11d      	bne.n	8005068 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005030:	2b01      	cmp	r3, #1
 8005032:	d10b      	bne.n	800504c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005038:	b2da      	uxtb	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005044:	1c9a      	adds	r2, r3, #2
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800504a:	e077      	b.n	800513c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005050:	b29b      	uxth	r3, r3
 8005052:	121b      	asrs	r3, r3, #8
 8005054:	b2da      	uxtb	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005060:	1c5a      	adds	r2, r3, #1
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005066:	e069      	b.n	800513c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800506c:	2b01      	cmp	r3, #1
 800506e:	d10b      	bne.n	8005088 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005074:	b2da      	uxtb	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005080:	1c5a      	adds	r2, r3, #1
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005086:	e059      	b.n	800513c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800508c:	2b02      	cmp	r3, #2
 800508e:	d152      	bne.n	8005136 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005090:	7bfb      	ldrb	r3, [r7, #15]
 8005092:	2b22      	cmp	r3, #34	@ 0x22
 8005094:	d10d      	bne.n	80050b2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050a4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050aa:	1c5a      	adds	r2, r3, #1
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80050b0:	e044      	b.n	800513c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d015      	beq.n	80050e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80050bc:	7bfb      	ldrb	r3, [r7, #15]
 80050be:	2b21      	cmp	r3, #33	@ 0x21
 80050c0:	d112      	bne.n	80050e8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c6:	781a      	ldrb	r2, [r3, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050d2:	1c5a      	adds	r2, r3, #1
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050dc:	b29b      	uxth	r3, r3
 80050de:	3b01      	subs	r3, #1
 80050e0:	b29a      	uxth	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80050e6:	e029      	b.n	800513c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d124      	bne.n	800513c <I2C_MemoryTransmit_TXE_BTF+0x128>
 80050f2:	7bfb      	ldrb	r3, [r7, #15]
 80050f4:	2b21      	cmp	r3, #33	@ 0x21
 80050f6:	d121      	bne.n	800513c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685a      	ldr	r2, [r3, #4]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005106:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005116:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f7fb fa76 	bl	8000620 <HAL_I2C_MemTxCpltCallback>
}
 8005134:	e002      	b.n	800513c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f7fe fff0 	bl	800411c <I2C_Flush_DR>
}
 800513c:	bf00      	nop
 800513e:	3710      	adds	r7, #16
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b22      	cmp	r3, #34	@ 0x22
 8005156:	f040 80b9 	bne.w	80052cc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800515e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005164:	b29b      	uxth	r3, r3
 8005166:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2b03      	cmp	r3, #3
 800516c:	d921      	bls.n	80051b2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	691a      	ldr	r2, [r3, #16]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005178:	b2d2      	uxtb	r2, r2
 800517a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005180:	1c5a      	adds	r2, r3, #1
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800518a:	b29b      	uxth	r3, r3
 800518c:	3b01      	subs	r3, #1
 800518e:	b29a      	uxth	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005198:	b29b      	uxth	r3, r3
 800519a:	2b03      	cmp	r3, #3
 800519c:	f040 8096 	bne.w	80052cc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051ae:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80051b0:	e08c      	b.n	80052cc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d07f      	beq.n	80052ba <I2C_MasterReceive_RXNE+0x176>
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d002      	beq.n	80051c6 <I2C_MasterReceive_RXNE+0x82>
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d179      	bne.n	80052ba <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f001 fc80 	bl	8006acc <I2C_WaitOnSTOPRequestThroughIT>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d14c      	bne.n	800526c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051e0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	685a      	ldr	r2, [r3, #4]
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80051f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691a      	ldr	r2, [r3, #16]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800520e:	b29b      	uxth	r3, r3
 8005210:	3b01      	subs	r3, #1
 8005212:	b29a      	uxth	r2, r3
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2220      	movs	r2, #32
 800521c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b40      	cmp	r3, #64	@ 0x40
 800522a:	d10a      	bne.n	8005242 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7fb fa00 	bl	8000640 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005240:	e044      	b.n	80052cc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b08      	cmp	r3, #8
 800524e:	d002      	beq.n	8005256 <I2C_MasterReceive_RXNE+0x112>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b20      	cmp	r3, #32
 8005254:	d103      	bne.n	800525e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	@ 0x30
 800525c:	e002      	b.n	8005264 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2212      	movs	r2, #18
 8005262:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f7ff fd79 	bl	8004d5c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800526a:	e02f      	b.n	80052cc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800527a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005286:	b2d2      	uxtb	r2, r2
 8005288:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528e:	1c5a      	adds	r2, r3, #1
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005298:	b29b      	uxth	r3, r3
 800529a:	3b01      	subs	r3, #1
 800529c:	b29a      	uxth	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2220      	movs	r2, #32
 80052a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	2200      	movs	r2, #0
 80052ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f7ff fd88 	bl	8004dc8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80052b8:	e008      	b.n	80052cc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052c8:	605a      	str	r2, [r3, #4]
}
 80052ca:	e7ff      	b.n	80052cc <I2C_MasterReceive_RXNE+0x188>
 80052cc:	bf00      	nop
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	2b04      	cmp	r3, #4
 80052ea:	d11b      	bne.n	8005324 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	685a      	ldr	r2, [r3, #4]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80052fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691a      	ldr	r2, [r3, #16]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005306:	b2d2      	uxtb	r2, r2
 8005308:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800530e:	1c5a      	adds	r2, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005322:	e0c4      	b.n	80054ae <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005328:	b29b      	uxth	r3, r3
 800532a:	2b03      	cmp	r3, #3
 800532c:	d129      	bne.n	8005382 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685a      	ldr	r2, [r3, #4]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800533c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2b04      	cmp	r3, #4
 8005342:	d00a      	beq.n	800535a <I2C_MasterReceive_BTF+0x86>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d007      	beq.n	800535a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005358:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005380:	e095      	b.n	80054ae <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005386:	b29b      	uxth	r3, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d17d      	bne.n	8005488 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2b01      	cmp	r3, #1
 8005390:	d002      	beq.n	8005398 <I2C_MasterReceive_BTF+0xc4>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2b10      	cmp	r3, #16
 8005396:	d108      	bne.n	80053aa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681a      	ldr	r2, [r3, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	e016      	b.n	80053d8 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b04      	cmp	r3, #4
 80053ae:	d002      	beq.n	80053b6 <I2C_MasterReceive_BTF+0xe2>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d108      	bne.n	80053c8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681a      	ldr	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	e007      	b.n	80053d8 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053d6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691a      	ldr	r2, [r3, #16]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e2:	b2d2      	uxtb	r2, r2
 80053e4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053f4:	b29b      	uxth	r3, r3
 80053f6:	3b01      	subs	r3, #1
 80053f8:	b29a      	uxth	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005408:	b2d2      	uxtb	r2, r2
 800540a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005410:	1c5a      	adds	r2, r3, #1
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b01      	subs	r3, #1
 800541e:	b29a      	uxth	r2, r3
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005432:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b40      	cmp	r3, #64	@ 0x40
 8005446:	d10a      	bne.n	800545e <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2200      	movs	r2, #0
 800544c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7fb f8f2 	bl	8000640 <HAL_I2C_MemRxCpltCallback>
}
 800545c:	e027      	b.n	80054ae <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d002      	beq.n	8005472 <I2C_MasterReceive_BTF+0x19e>
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2b20      	cmp	r3, #32
 8005470:	d103      	bne.n	800547a <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	631a      	str	r2, [r3, #48]	@ 0x30
 8005478:	e002      	b.n	8005480 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2212      	movs	r2, #18
 800547e:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005480:	6878      	ldr	r0, [r7, #4]
 8005482:	f7ff fc6b 	bl	8004d5c <HAL_I2C_MasterRxCpltCallback>
}
 8005486:	e012      	b.n	80054ae <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691a      	ldr	r2, [r3, #16]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800549a:	1c5a      	adds	r2, r3, #1
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	3b01      	subs	r3, #1
 80054a8:	b29a      	uxth	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80054ae:	bf00      	nop
 80054b0:	3710      	adds	r7, #16
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b40      	cmp	r3, #64	@ 0x40
 80054c8:	d117      	bne.n	80054fa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d109      	bne.n	80054e6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	461a      	mov	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80054e2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80054e4:	e067      	b.n	80055b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	f043 0301 	orr.w	r3, r3, #1
 80054f0:	b2da      	uxtb	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	611a      	str	r2, [r3, #16]
}
 80054f8:	e05d      	b.n	80055b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005502:	d133      	bne.n	800556c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b21      	cmp	r3, #33	@ 0x21
 800550e:	d109      	bne.n	8005524 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005514:	b2db      	uxtb	r3, r3
 8005516:	461a      	mov	r2, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005520:	611a      	str	r2, [r3, #16]
 8005522:	e008      	b.n	8005536 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	b2da      	uxtb	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800553a:	2b00      	cmp	r3, #0
 800553c:	d004      	beq.n	8005548 <I2C_Master_SB+0x92>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d108      	bne.n	800555a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800554c:	2b00      	cmp	r3, #0
 800554e:	d032      	beq.n	80055b6 <I2C_Master_SB+0x100>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005554:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005556:	2b00      	cmp	r3, #0
 8005558:	d02d      	beq.n	80055b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	685a      	ldr	r2, [r3, #4]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005568:	605a      	str	r2, [r3, #4]
}
 800556a:	e024      	b.n	80055b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005570:	2b00      	cmp	r3, #0
 8005572:	d10e      	bne.n	8005592 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005578:	b29b      	uxth	r3, r3
 800557a:	11db      	asrs	r3, r3, #7
 800557c:	b2db      	uxtb	r3, r3
 800557e:	f003 0306 	and.w	r3, r3, #6
 8005582:	b2db      	uxtb	r3, r3
 8005584:	f063 030f 	orn	r3, r3, #15
 8005588:	b2da      	uxtb	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	611a      	str	r2, [r3, #16]
}
 8005590:	e011      	b.n	80055b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005596:	2b01      	cmp	r3, #1
 8005598:	d10d      	bne.n	80055b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800559e:	b29b      	uxth	r3, r3
 80055a0:	11db      	asrs	r3, r3, #7
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	f003 0306 	and.w	r3, r3, #6
 80055a8:	b2db      	uxtb	r3, r3
 80055aa:	f063 030e 	orn	r3, r3, #14
 80055ae:	b2da      	uxtb	r2, r3
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	611a      	str	r2, [r3, #16]
}
 80055b6:	bf00      	nop
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr

080055c2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80055c2:	b480      	push	{r7}
 80055c4:	b083      	sub	sp, #12
 80055c6:	af00      	add	r7, sp, #0
 80055c8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ce:	b2da      	uxtb	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d004      	beq.n	80055e8 <I2C_Master_ADD10+0x26>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d108      	bne.n	80055fa <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00c      	beq.n	800560a <I2C_Master_ADD10+0x48>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d007      	beq.n	800560a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005608:	605a      	str	r2, [r3, #4]
  }
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr

08005616 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005616:	b480      	push	{r7}
 8005618:	b091      	sub	sp, #68	@ 0x44
 800561a:	af00      	add	r7, sp, #0
 800561c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005624:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005632:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800563a:	b2db      	uxtb	r3, r3
 800563c:	2b22      	cmp	r3, #34	@ 0x22
 800563e:	f040 8169 	bne.w	8005914 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005646:	2b00      	cmp	r3, #0
 8005648:	d10f      	bne.n	800566a <I2C_Master_ADDR+0x54>
 800564a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800564e:	2b40      	cmp	r3, #64	@ 0x40
 8005650:	d10b      	bne.n	800566a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005652:	2300      	movs	r3, #0
 8005654:	633b      	str	r3, [r7, #48]	@ 0x30
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	695b      	ldr	r3, [r3, #20]
 800565c:	633b      	str	r3, [r7, #48]	@ 0x30
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	699b      	ldr	r3, [r3, #24]
 8005664:	633b      	str	r3, [r7, #48]	@ 0x30
 8005666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005668:	e160      	b.n	800592c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800566e:	2b00      	cmp	r3, #0
 8005670:	d11d      	bne.n	80056ae <I2C_Master_ADDR+0x98>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800567a:	d118      	bne.n	80056ae <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800567c:	2300      	movs	r3, #0
 800567e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699b      	ldr	r3, [r3, #24]
 800568e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80056a0:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	651a      	str	r2, [r3, #80]	@ 0x50
 80056ac:	e13e      	b.n	800592c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d113      	bne.n	80056e0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056b8:	2300      	movs	r3, #0
 80056ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	695b      	ldr	r3, [r3, #20]
 80056c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699b      	ldr	r3, [r3, #24]
 80056ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	681a      	ldr	r2, [r3, #0]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	e115      	b.n	800590c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	f040 808a 	bne.w	8005800 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80056f2:	d137      	bne.n	8005764 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005702:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800570e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005712:	d113      	bne.n	800573c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	681a      	ldr	r2, [r3, #0]
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005722:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005724:	2300      	movs	r3, #0
 8005726:	627b      	str	r3, [r7, #36]	@ 0x24
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	695b      	ldr	r3, [r3, #20]
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	627b      	str	r3, [r7, #36]	@ 0x24
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	e0e7      	b.n	800590c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800573c:	2300      	movs	r3, #0
 800573e:	623b      	str	r3, [r7, #32]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	623b      	str	r3, [r7, #32]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	623b      	str	r3, [r7, #32]
 8005750:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	e0d3      	b.n	800590c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005766:	2b08      	cmp	r3, #8
 8005768:	d02e      	beq.n	80057c8 <I2C_Master_ADDR+0x1b2>
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	2b20      	cmp	r3, #32
 800576e:	d02b      	beq.n	80057c8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005772:	2b12      	cmp	r3, #18
 8005774:	d102      	bne.n	800577c <I2C_Master_ADDR+0x166>
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	2b01      	cmp	r3, #1
 800577a:	d125      	bne.n	80057c8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800577c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800577e:	2b04      	cmp	r3, #4
 8005780:	d00e      	beq.n	80057a0 <I2C_Master_ADDR+0x18a>
 8005782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005784:	2b02      	cmp	r3, #2
 8005786:	d00b      	beq.n	80057a0 <I2C_Master_ADDR+0x18a>
 8005788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578a:	2b10      	cmp	r3, #16
 800578c:	d008      	beq.n	80057a0 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800579c:	601a      	str	r2, [r3, #0]
 800579e:	e007      	b.n	80057b0 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	681a      	ldr	r2, [r3, #0]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057ae:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057b0:	2300      	movs	r3, #0
 80057b2:	61fb      	str	r3, [r7, #28]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	61fb      	str	r3, [r7, #28]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	699b      	ldr	r3, [r3, #24]
 80057c2:	61fb      	str	r3, [r7, #28]
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	e0a1      	b.n	800590c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80057d6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d8:	2300      	movs	r3, #0
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	61bb      	str	r3, [r7, #24]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	699b      	ldr	r3, [r3, #24]
 80057ea:	61bb      	str	r3, [r7, #24]
 80057ec:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e085      	b.n	800590c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005804:	b29b      	uxth	r3, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d14d      	bne.n	80058a6 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800580a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580c:	2b04      	cmp	r3, #4
 800580e:	d016      	beq.n	800583e <I2C_Master_ADDR+0x228>
 8005810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005812:	2b02      	cmp	r3, #2
 8005814:	d013      	beq.n	800583e <I2C_Master_ADDR+0x228>
 8005816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005818:	2b10      	cmp	r3, #16
 800581a:	d010      	beq.n	800583e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800582a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	e007      	b.n	800584e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800584c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005858:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800585c:	d117      	bne.n	800588e <I2C_Master_ADDR+0x278>
 800585e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005860:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005864:	d00b      	beq.n	800587e <I2C_Master_ADDR+0x268>
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	2b01      	cmp	r3, #1
 800586a:	d008      	beq.n	800587e <I2C_Master_ADDR+0x268>
 800586c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586e:	2b08      	cmp	r3, #8
 8005870:	d005      	beq.n	800587e <I2C_Master_ADDR+0x268>
 8005872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005874:	2b10      	cmp	r3, #16
 8005876:	d002      	beq.n	800587e <I2C_Master_ADDR+0x268>
 8005878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587a:	2b20      	cmp	r3, #32
 800587c:	d107      	bne.n	800588e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685a      	ldr	r2, [r3, #4]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800588c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588e:	2300      	movs	r3, #0
 8005890:	617b      	str	r3, [r7, #20]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	695b      	ldr	r3, [r3, #20]
 8005898:	617b      	str	r3, [r7, #20]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	699b      	ldr	r3, [r3, #24]
 80058a0:	617b      	str	r3, [r7, #20]
 80058a2:	697b      	ldr	r3, [r7, #20]
 80058a4:	e032      	b.n	800590c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80058b4:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058c4:	d117      	bne.n	80058f6 <I2C_Master_ADDR+0x2e0>
 80058c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80058cc:	d00b      	beq.n	80058e6 <I2C_Master_ADDR+0x2d0>
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d008      	beq.n	80058e6 <I2C_Master_ADDR+0x2d0>
 80058d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d6:	2b08      	cmp	r3, #8
 80058d8:	d005      	beq.n	80058e6 <I2C_Master_ADDR+0x2d0>
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	2b10      	cmp	r3, #16
 80058de:	d002      	beq.n	80058e6 <I2C_Master_ADDR+0x2d0>
 80058e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e2:	2b20      	cmp	r3, #32
 80058e4:	d107      	bne.n	80058f6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058f4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058f6:	2300      	movs	r3, #0
 80058f8:	613b      	str	r3, [r7, #16]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	613b      	str	r3, [r7, #16]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	699b      	ldr	r3, [r3, #24]
 8005908:	613b      	str	r3, [r7, #16]
 800590a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005912:	e00b      	b.n	800592c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005914:	2300      	movs	r3, #0
 8005916:	60fb      	str	r3, [r7, #12]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	60fb      	str	r3, [r7, #12]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	699b      	ldr	r3, [r3, #24]
 8005926:	60fb      	str	r3, [r7, #12]
 8005928:	68fb      	ldr	r3, [r7, #12]
}
 800592a:	e7ff      	b.n	800592c <I2C_Master_ADDR+0x316>
 800592c:	bf00      	nop
 800592e:	3744      	adds	r7, #68	@ 0x44
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005946:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d02b      	beq.n	80059aa <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005956:	781a      	ldrb	r2, [r3, #0]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005962:	1c5a      	adds	r2, r3, #1
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800596c:	b29b      	uxth	r3, r3
 800596e:	3b01      	subs	r3, #1
 8005970:	b29a      	uxth	r2, r3
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800597a:	b29b      	uxth	r3, r3
 800597c:	2b00      	cmp	r3, #0
 800597e:	d114      	bne.n	80059aa <I2C_SlaveTransmit_TXE+0x72>
 8005980:	7bfb      	ldrb	r3, [r7, #15]
 8005982:	2b29      	cmp	r3, #41	@ 0x29
 8005984:	d111      	bne.n	80059aa <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005994:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2221      	movs	r2, #33	@ 0x21
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2228      	movs	r2, #40	@ 0x28
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f7ff f9e3 	bl	8004d70 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80059aa:	bf00      	nop
 80059ac:	3710      	adds	r7, #16
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d011      	beq.n	80059e8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 80059e8:	bf00      	nop
 80059ea:	370c      	adds	r7, #12
 80059ec:	46bd      	mov	sp, r7
 80059ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f2:	4770      	bx	lr

080059f4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a02:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a08:	b29b      	uxth	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d02c      	beq.n	8005a68 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	b2d2      	uxtb	r2, r2
 8005a1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a2a:	b29b      	uxth	r3, r3
 8005a2c:	3b01      	subs	r3, #1
 8005a2e:	b29a      	uxth	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d114      	bne.n	8005a68 <I2C_SlaveReceive_RXNE+0x74>
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a42:	d111      	bne.n	8005a68 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	685a      	ldr	r2, [r3, #4]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a52:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2222      	movs	r2, #34	@ 0x22
 8005a58:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2228      	movs	r2, #40	@ 0x28
 8005a5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f7ff f98e 	bl	8004d84 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005a68:	bf00      	nop
 8005a6a:	3710      	adds	r7, #16
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b083      	sub	sp, #12
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d012      	beq.n	8005aa8 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	691a      	ldr	r2, [r3, #16]
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8c:	b2d2      	uxtb	r2, r2
 8005a8e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	3b01      	subs	r3, #1
 8005aa2:	b29a      	uxth	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ace:	2b28      	cmp	r3, #40	@ 0x28
 8005ad0:	d127      	bne.n	8005b22 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ae0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005ae2:	683b      	ldr	r3, [r7, #0]
 8005ae4:	089b      	lsrs	r3, r3, #2
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d101      	bne.n	8005af2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005aee:	2301      	movs	r3, #1
 8005af0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	09db      	lsrs	r3, r3, #7
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d103      	bne.n	8005b06 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	81bb      	strh	r3, [r7, #12]
 8005b04:	e002      	b.n	8005b0c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	699b      	ldr	r3, [r3, #24]
 8005b0a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005b14:	89ba      	ldrh	r2, [r7, #12]
 8005b16:	7bfb      	ldrb	r3, [r7, #15]
 8005b18:	4619      	mov	r1, r3
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f7ff f93c 	bl	8004d98 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005b20:	e00e      	b.n	8005b40 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b22:	2300      	movs	r3, #0
 8005b24:	60bb      	str	r3, [r7, #8]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	695b      	ldr	r3, [r3, #20]
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	699b      	ldr	r3, [r3, #24]
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2200      	movs	r2, #0
 8005b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8005b40:	bf00      	nop
 8005b42:	3710      	adds	r7, #16
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b56:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	685a      	ldr	r2, [r3, #4]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b66:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005b68:	2300      	movs	r3, #0
 8005b6a:	60bb      	str	r3, [r7, #8]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	60bb      	str	r3, [r7, #8]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b94:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ba0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ba4:	d172      	bne.n	8005c8c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b22      	cmp	r3, #34	@ 0x22
 8005baa:	d002      	beq.n	8005bb2 <I2C_Slave_STOPF+0x6a>
 8005bac:	7bfb      	ldrb	r3, [r7, #15]
 8005bae:	2b2a      	cmp	r3, #42	@ 0x2a
 8005bb0:	d135      	bne.n	8005c1e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	b29a      	uxth	r2, r3
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d005      	beq.n	8005bd6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bce:	f043 0204 	orr.w	r2, r3, #4
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	685a      	ldr	r2, [r3, #4]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005be4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fd fea0 	bl	8003930 <HAL_DMA_GetState>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d049      	beq.n	8005c8a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bfa:	4a69      	ldr	r2, [pc, #420]	@ (8005da0 <I2C_Slave_STOPF+0x258>)
 8005bfc:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c02:	4618      	mov	r0, r3
 8005c04:	f7fd fce8 	bl	80035d8 <HAL_DMA_Abort_IT>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d03d      	beq.n	8005c8a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c14:	687a      	ldr	r2, [r7, #4]
 8005c16:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c1c:	e035      	b.n	8005c8a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d005      	beq.n	8005c42 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c3a:	f043 0204 	orr.w	r2, r3, #4
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	685a      	ldr	r2, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005c50:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fd fe6a 	bl	8003930 <HAL_DMA_GetState>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d014      	beq.n	8005c8c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c66:	4a4e      	ldr	r2, [pc, #312]	@ (8005da0 <I2C_Slave_STOPF+0x258>)
 8005c68:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fd fcb2 	bl	80035d8 <HAL_DMA_Abort_IT>
 8005c74:	4603      	mov	r3, r0
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c80:	687a      	ldr	r2, [r7, #4]
 8005c82:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005c84:	4610      	mov	r0, r2
 8005c86:	4798      	blx	r3
 8005c88:	e000      	b.n	8005c8c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005c8a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d03e      	beq.n	8005d14 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	695b      	ldr	r3, [r3, #20]
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d112      	bne.n	8005cca <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	691a      	ldr	r2, [r3, #16]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cae:	b2d2      	uxtb	r2, r2
 8005cb0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	695b      	ldr	r3, [r3, #20]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005cd4:	2b40      	cmp	r3, #64	@ 0x40
 8005cd6:	d112      	bne.n	8005cfe <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	3b01      	subs	r3, #1
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d005      	beq.n	8005d14 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0c:	f043 0204 	orr.w	r2, r3, #4
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 f8b7 	bl	8005e90 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8005d22:	e039      	b.n	8005d98 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d28:	d109      	bne.n	8005d3e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2228      	movs	r2, #40	@ 0x28
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7ff f823 	bl	8004d84 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b28      	cmp	r3, #40	@ 0x28
 8005d48:	d111      	bne.n	8005d6e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	4a15      	ldr	r2, [pc, #84]	@ (8005da4 <I2C_Slave_STOPF+0x25c>)
 8005d4e:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2220      	movs	r2, #32
 8005d5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff f824 	bl	8004db4 <HAL_I2C_ListenCpltCallback>
}
 8005d6c:	e014      	b.n	8005d98 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d72:	2b22      	cmp	r3, #34	@ 0x22
 8005d74:	d002      	beq.n	8005d7c <I2C_Slave_STOPF+0x234>
 8005d76:	7bfb      	ldrb	r3, [r7, #15]
 8005d78:	2b22      	cmp	r3, #34	@ 0x22
 8005d7a:	d10d      	bne.n	8005d98 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fe fff6 	bl	8004d84 <HAL_I2C_SlaveRxCpltCallback>
}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	08006629 	.word	0x08006629
 8005da4:	ffff0000 	.word	0xffff0000

08005da8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005da8:	b580      	push	{r7, lr}
 8005daa:	b084      	sub	sp, #16
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005db6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dbc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d002      	beq.n	8005dca <I2C_Slave_AF+0x22>
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2b20      	cmp	r3, #32
 8005dc8:	d129      	bne.n	8005e1e <I2C_Slave_AF+0x76>
 8005dca:	7bfb      	ldrb	r3, [r7, #15]
 8005dcc:	2b28      	cmp	r3, #40	@ 0x28
 8005dce:	d126      	bne.n	8005e1e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4a2e      	ldr	r2, [pc, #184]	@ (8005e8c <I2C_Slave_AF+0xe4>)
 8005dd4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685a      	ldr	r2, [r3, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005de4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005dee:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005dfe:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f7fe ffcc 	bl	8004db4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8005e1c:	e031      	b.n	8005e82 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005e1e:	7bfb      	ldrb	r3, [r7, #15]
 8005e20:	2b21      	cmp	r3, #33	@ 0x21
 8005e22:	d129      	bne.n	8005e78 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	4a19      	ldr	r2, [pc, #100]	@ (8005e8c <I2C_Slave_AF+0xe4>)
 8005e28:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2221      	movs	r2, #33	@ 0x21
 8005e2e:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2220      	movs	r2, #32
 8005e34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e4e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e58:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e68:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f7fe f956 	bl	800411c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f7fe ff7d 	bl	8004d70 <HAL_I2C_SlaveTxCpltCallback>
}
 8005e76:	e004      	b.n	8005e82 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e80:	615a      	str	r2, [r3, #20]
}
 8005e82:	bf00      	nop
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	ffff0000 	.word	0xffff0000

08005e90 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b084      	sub	sp, #16
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e9e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ea6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	2b10      	cmp	r3, #16
 8005eac:	d002      	beq.n	8005eb4 <I2C_ITError+0x24>
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	2b40      	cmp	r3, #64	@ 0x40
 8005eb2:	d10a      	bne.n	8005eca <I2C_ITError+0x3a>
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
 8005eb6:	2b22      	cmp	r3, #34	@ 0x22
 8005eb8:	d107      	bne.n	8005eca <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005ec8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005eca:	7bfb      	ldrb	r3, [r7, #15]
 8005ecc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005ed0:	2b28      	cmp	r3, #40	@ 0x28
 8005ed2:	d107      	bne.n	8005ee4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2228      	movs	r2, #40	@ 0x28
 8005ede:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005ee2:	e015      	b.n	8005f10 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005eee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ef2:	d00a      	beq.n	8005f0a <I2C_ITError+0x7a>
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
 8005ef6:	2b60      	cmp	r3, #96	@ 0x60
 8005ef8:	d007      	beq.n	8005f0a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005f1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f1e:	d162      	bne.n	8005fe6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	685a      	ldr	r2, [r3, #4]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005f2e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b01      	cmp	r3, #1
 8005f3c:	d020      	beq.n	8005f80 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f42:	4a6a      	ldr	r2, [pc, #424]	@ (80060ec <I2C_ITError+0x25c>)
 8005f44:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f7fd fb44 	bl	80035d8 <HAL_DMA_Abort_IT>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8089 	beq.w	800606a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0201 	bic.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2220      	movs	r2, #32
 8005f6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f74:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f7a:	4610      	mov	r0, r2
 8005f7c:	4798      	blx	r3
 8005f7e:	e074      	b.n	800606a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f84:	4a59      	ldr	r2, [pc, #356]	@ (80060ec <I2C_ITError+0x25c>)
 8005f86:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fd fb23 	bl	80035d8 <HAL_DMA_Abort_IT>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d068      	beq.n	800606a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa2:	2b40      	cmp	r3, #64	@ 0x40
 8005fa4:	d10b      	bne.n	8005fbe <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb0:	b2d2      	uxtb	r2, r2
 8005fb2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0201 	bic.w	r2, r2, #1
 8005fcc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005fe0:	4610      	mov	r0, r2
 8005fe2:	4798      	blx	r3
 8005fe4:	e041      	b.n	800606a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b60      	cmp	r3, #96	@ 0x60
 8005ff0:	d125      	bne.n	800603e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2220      	movs	r2, #32
 8005ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695b      	ldr	r3, [r3, #20]
 8006006:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800600a:	2b40      	cmp	r3, #64	@ 0x40
 800600c:	d10b      	bne.n	8006026 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	691a      	ldr	r2, [r3, #16]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006018:	b2d2      	uxtb	r2, r2
 800601a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f022 0201 	bic.w	r2, r2, #1
 8006034:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f7fe fed0 	bl	8004ddc <HAL_I2C_AbortCpltCallback>
 800603c:	e015      	b.n	800606a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	695b      	ldr	r3, [r3, #20]
 8006044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006048:	2b40      	cmp	r3, #64	@ 0x40
 800604a:	d10b      	bne.n	8006064 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	691a      	ldr	r2, [r3, #16]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006056:	b2d2      	uxtb	r2, r2
 8006058:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	1c5a      	adds	r2, r3, #1
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7fe feaf 	bl	8004dc8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	f003 0301 	and.w	r3, r3, #1
 8006076:	2b00      	cmp	r3, #0
 8006078:	d10e      	bne.n	8006098 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006080:	2b00      	cmp	r3, #0
 8006082:	d109      	bne.n	8006098 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800608a:	2b00      	cmp	r3, #0
 800608c:	d104      	bne.n	8006098 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006094:	2b00      	cmp	r3, #0
 8006096:	d007      	beq.n	80060a8 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80060a6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ae:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b4:	f003 0304 	and.w	r3, r3, #4
 80060b8:	2b04      	cmp	r3, #4
 80060ba:	d113      	bne.n	80060e4 <I2C_ITError+0x254>
 80060bc:	7bfb      	ldrb	r3, [r7, #15]
 80060be:	2b28      	cmp	r3, #40	@ 0x28
 80060c0:	d110      	bne.n	80060e4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	4a0a      	ldr	r2, [pc, #40]	@ (80060f0 <I2C_ITError+0x260>)
 80060c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2220      	movs	r2, #32
 80060d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	2200      	movs	r2, #0
 80060da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f7fe fe68 	bl	8004db4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060e4:	bf00      	nop
 80060e6:	3710      	adds	r7, #16
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	08006629 	.word	0x08006629
 80060f0:	ffff0000 	.word	0xffff0000

080060f4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b088      	sub	sp, #32
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	4608      	mov	r0, r1
 80060fe:	4611      	mov	r1, r2
 8006100:	461a      	mov	r2, r3
 8006102:	4603      	mov	r3, r0
 8006104:	817b      	strh	r3, [r7, #10]
 8006106:	460b      	mov	r3, r1
 8006108:	813b      	strh	r3, [r7, #8]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800611c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	9300      	str	r3, [sp, #0]
 8006122:	6a3b      	ldr	r3, [r7, #32]
 8006124:	2200      	movs	r2, #0
 8006126:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800612a:	68f8      	ldr	r0, [r7, #12]
 800612c:	f000 fb24 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00d      	beq.n	8006152 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006140:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006144:	d103      	bne.n	800614e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800614c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	e05f      	b.n	8006212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006152:	897b      	ldrh	r3, [r7, #10]
 8006154:	b2db      	uxtb	r3, r3
 8006156:	461a      	mov	r2, r3
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006160:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006164:	6a3a      	ldr	r2, [r7, #32]
 8006166:	492d      	ldr	r1, [pc, #180]	@ (800621c <I2C_RequestMemoryWrite+0x128>)
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 fb7f 	bl	800686c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800616e:	4603      	mov	r3, r0
 8006170:	2b00      	cmp	r3, #0
 8006172:	d001      	beq.n	8006178 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e04c      	b.n	8006212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006178:	2300      	movs	r3, #0
 800617a:	617b      	str	r3, [r7, #20]
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	617b      	str	r3, [r7, #20]
 800618c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800618e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006190:	6a39      	ldr	r1, [r7, #32]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 fc0a 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d107      	bne.n	80061b6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e02b      	b.n	8006212 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80061ba:	88fb      	ldrh	r3, [r7, #6]
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d105      	bne.n	80061cc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061c0:	893b      	ldrh	r3, [r7, #8]
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	611a      	str	r2, [r3, #16]
 80061ca:	e021      	b.n	8006210 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80061cc:	893b      	ldrh	r3, [r7, #8]
 80061ce:	0a1b      	lsrs	r3, r3, #8
 80061d0:	b29b      	uxth	r3, r3
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80061da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061dc:	6a39      	ldr	r1, [r7, #32]
 80061de:	68f8      	ldr	r0, [r7, #12]
 80061e0:	f000 fbe4 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d00d      	beq.n	8006206 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	d107      	bne.n	8006202 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006200:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e005      	b.n	8006212 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006206:	893b      	ldrh	r3, [r7, #8]
 8006208:	b2da      	uxtb	r2, r3
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	00010002 	.word	0x00010002

08006220 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b088      	sub	sp, #32
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	4608      	mov	r0, r1
 800622a:	4611      	mov	r1, r2
 800622c:	461a      	mov	r2, r3
 800622e:	4603      	mov	r3, r0
 8006230:	817b      	strh	r3, [r7, #10]
 8006232:	460b      	mov	r3, r1
 8006234:	813b      	strh	r3, [r7, #8]
 8006236:	4613      	mov	r3, r2
 8006238:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006248:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006258:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800625a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800625c:	9300      	str	r3, [sp, #0]
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	2200      	movs	r2, #0
 8006262:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006266:	68f8      	ldr	r0, [r7, #12]
 8006268:	f000 fa86 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00d      	beq.n	800628e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800627c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006280:	d103      	bne.n	800628a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006288:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800628a:	2303      	movs	r3, #3
 800628c:	e0aa      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800628e:	897b      	ldrh	r3, [r7, #10]
 8006290:	b2db      	uxtb	r3, r3
 8006292:	461a      	mov	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800629c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800629e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062a0:	6a3a      	ldr	r2, [r7, #32]
 80062a2:	4952      	ldr	r1, [pc, #328]	@ (80063ec <I2C_RequestMemoryRead+0x1cc>)
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 fae1 	bl	800686c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80062aa:	4603      	mov	r3, r0
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d001      	beq.n	80062b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80062b0:	2301      	movs	r3, #1
 80062b2:	e097      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80062b4:	2300      	movs	r3, #0
 80062b6:	617b      	str	r3, [r7, #20]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	617b      	str	r3, [r7, #20]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062cc:	6a39      	ldr	r1, [r7, #32]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 fb6c 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00d      	beq.n	80062f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d107      	bne.n	80062f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e076      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062f6:	88fb      	ldrh	r3, [r7, #6]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d105      	bne.n	8006308 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062fc:	893b      	ldrh	r3, [r7, #8]
 80062fe:	b2da      	uxtb	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	611a      	str	r2, [r3, #16]
 8006306:	e021      	b.n	800634c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006308:	893b      	ldrh	r3, [r7, #8]
 800630a:	0a1b      	lsrs	r3, r3, #8
 800630c:	b29b      	uxth	r3, r3
 800630e:	b2da      	uxtb	r2, r3
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006316:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006318:	6a39      	ldr	r1, [r7, #32]
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f000 fb46 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800632a:	2b04      	cmp	r3, #4
 800632c:	d107      	bne.n	800633e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800633c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e050      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006342:	893b      	ldrh	r3, [r7, #8]
 8006344:	b2da      	uxtb	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800634c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800634e:	6a39      	ldr	r1, [r7, #32]
 8006350:	68f8      	ldr	r0, [r7, #12]
 8006352:	f000 fb2b 	bl	80069ac <I2C_WaitOnTXEFlagUntilTimeout>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006360:	2b04      	cmp	r3, #4
 8006362:	d107      	bne.n	8006374 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006372:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e035      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006386:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800638a:	9300      	str	r3, [sp, #0]
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	2200      	movs	r2, #0
 8006390:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006394:	68f8      	ldr	r0, [r7, #12]
 8006396:	f000 f9ef 	bl	8006778 <I2C_WaitOnFlagUntilTimeout>
 800639a:	4603      	mov	r3, r0
 800639c:	2b00      	cmp	r3, #0
 800639e:	d00d      	beq.n	80063bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80063aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ae:	d103      	bne.n	80063b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80063b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e013      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80063bc:	897b      	ldrh	r3, [r7, #10]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	f043 0301 	orr.w	r3, r3, #1
 80063c4:	b2da      	uxtb	r2, r3
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	6a3a      	ldr	r2, [r7, #32]
 80063d0:	4906      	ldr	r1, [pc, #24]	@ (80063ec <I2C_RequestMemoryRead+0x1cc>)
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 fa4a 	bl	800686c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e000      	b.n	80063e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3718      	adds	r7, #24
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}
 80063ec:	00010002 	.word	0x00010002

080063f0 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063fc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006404:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800640c:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685a      	ldr	r2, [r3, #4]
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006422:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800642c:	697b      	ldr	r3, [r7, #20]
 800642e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006430:	2200      	movs	r2, #0
 8006432:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006438:	2b00      	cmp	r3, #0
 800643a:	d003      	beq.n	8006444 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006440:	2200      	movs	r2, #0
 8006442:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8006444:	7cfb      	ldrb	r3, [r7, #19]
 8006446:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800644a:	2b21      	cmp	r3, #33	@ 0x21
 800644c:	d007      	beq.n	800645e <I2C_DMAXferCplt+0x6e>
 800644e:	7cfb      	ldrb	r3, [r7, #19]
 8006450:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 8006454:	2b22      	cmp	r3, #34	@ 0x22
 8006456:	d131      	bne.n	80064bc <I2C_DMAXferCplt+0xcc>
 8006458:	7cbb      	ldrb	r3, [r7, #18]
 800645a:	2b20      	cmp	r3, #32
 800645c:	d12e      	bne.n	80064bc <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800646c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800646e:	697b      	ldr	r3, [r7, #20]
 8006470:	2200      	movs	r2, #0
 8006472:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006474:	7cfb      	ldrb	r3, [r7, #19]
 8006476:	2b29      	cmp	r3, #41	@ 0x29
 8006478:	d10a      	bne.n	8006490 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	2221      	movs	r2, #33	@ 0x21
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2228      	movs	r2, #40	@ 0x28
 8006484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006488:	6978      	ldr	r0, [r7, #20]
 800648a:	f7fe fc71 	bl	8004d70 <HAL_I2C_SlaveTxCpltCallback>
 800648e:	e00c      	b.n	80064aa <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006490:	7cfb      	ldrb	r3, [r7, #19]
 8006492:	2b2a      	cmp	r3, #42	@ 0x2a
 8006494:	d109      	bne.n	80064aa <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	2222      	movs	r2, #34	@ 0x22
 800649a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2228      	movs	r2, #40	@ 0x28
 80064a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80064a4:	6978      	ldr	r0, [r7, #20]
 80064a6:	f7fe fc6d 	bl	8004d84 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80064b8:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80064ba:	e074      	b.n	80065a6 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d06e      	beq.n	80065a6 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064cc:	b29b      	uxth	r3, r3
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d107      	bne.n	80064e2 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064e0:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064f0:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80064f8:	d009      	beq.n	800650e <I2C_DMAXferCplt+0x11e>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b08      	cmp	r3, #8
 80064fe:	d006      	beq.n	800650e <I2C_DMAXferCplt+0x11e>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006506:	d002      	beq.n	800650e <I2C_DMAXferCplt+0x11e>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	2b20      	cmp	r3, #32
 800650c:	d107      	bne.n	800651e <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800651c:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	685a      	ldr	r2, [r3, #4]
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800652c:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800653c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2200      	movs	r2, #0
 8006542:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006548:	2b00      	cmp	r3, #0
 800654a:	d003      	beq.n	8006554 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 800654c:	6978      	ldr	r0, [r7, #20]
 800654e:	f7fe fc3b 	bl	8004dc8 <HAL_I2C_ErrorCallback>
}
 8006552:	e028      	b.n	80065a6 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	2220      	movs	r2, #32
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006562:	b2db      	uxtb	r3, r3
 8006564:	2b40      	cmp	r3, #64	@ 0x40
 8006566:	d10a      	bne.n	800657e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	2200      	movs	r2, #0
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	2200      	movs	r2, #0
 8006574:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8006576:	6978      	ldr	r0, [r7, #20]
 8006578:	f7fa f862 	bl	8000640 <HAL_I2C_MemRxCpltCallback>
}
 800657c:	e013      	b.n	80065a6 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2b08      	cmp	r3, #8
 800658a:	d002      	beq.n	8006592 <I2C_DMAXferCplt+0x1a2>
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2b20      	cmp	r3, #32
 8006590:	d103      	bne.n	800659a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	2200      	movs	r2, #0
 8006596:	631a      	str	r2, [r3, #48]	@ 0x30
 8006598:	e002      	b.n	80065a0 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2212      	movs	r2, #18
 800659e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80065a0:	6978      	ldr	r0, [r7, #20]
 80065a2:	f7fe fbdb 	bl	8004d5c <HAL_I2C_MasterRxCpltCallback>
}
 80065a6:	bf00      	nop
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b084      	sub	sp, #16
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d003      	beq.n	80065cc <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065c8:	2200      	movs	r2, #0
 80065ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d003      	beq.n	80065dc <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065d8:	2200      	movs	r2, #0
 80065da:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f7fd f9b5 	bl	800394c <HAL_DMA_GetError>
 80065e2:	4603      	mov	r3, r0
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d01b      	beq.n	8006620 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065f6:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2220      	movs	r2, #32
 8006602:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006612:	f043 0210 	orr.w	r2, r3, #16
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800661a:	68f8      	ldr	r0, [r7, #12]
 800661c:	f7fe fbd4 	bl	8004dc8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006620:	bf00      	nop
 8006622:	3710      	adds	r7, #16
 8006624:	46bd      	mov	sp, r7
 8006626:	bd80      	pop	{r7, pc}

08006628 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b086      	sub	sp, #24
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006630:	2300      	movs	r3, #0
 8006632:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006638:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006640:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8006642:	4b4b      	ldr	r3, [pc, #300]	@ (8006770 <I2C_DMAAbort+0x148>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	08db      	lsrs	r3, r3, #3
 8006648:	4a4a      	ldr	r2, [pc, #296]	@ (8006774 <I2C_DMAAbort+0x14c>)
 800664a:	fba2 2303 	umull	r2, r3, r2, r3
 800664e:	0a1a      	lsrs	r2, r3, #8
 8006650:	4613      	mov	r3, r2
 8006652:	009b      	lsls	r3, r3, #2
 8006654:	4413      	add	r3, r2
 8006656:	00da      	lsls	r2, r3, #3
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d106      	bne.n	8006670 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006666:	f043 0220 	orr.w	r2, r3, #32
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800666e:	e00a      	b.n	8006686 <I2C_DMAAbort+0x5e>
    }
    count--;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	3b01      	subs	r3, #1
 8006674:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006684:	d0ea      	beq.n	800665c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800668a:	2b00      	cmp	r3, #0
 800668c:	d003      	beq.n	8006696 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006692:	2200      	movs	r2, #0
 8006694:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a2:	2200      	movs	r2, #0
 80066a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066b4:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	2200      	movs	r2, #0
 80066ba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d003      	beq.n	80066cc <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80066c8:	2200      	movs	r2, #0
 80066ca:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d8:	2200      	movs	r2, #0
 80066da:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066f2:	b2db      	uxtb	r3, r3
 80066f4:	2b60      	cmp	r3, #96	@ 0x60
 80066f6:	d10e      	bne.n	8006716 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2220      	movs	r2, #32
 80066fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	2200      	movs	r2, #0
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	2200      	movs	r2, #0
 800670c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800670e:	6978      	ldr	r0, [r7, #20]
 8006710:	f7fe fb64 	bl	8004ddc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006714:	e027      	b.n	8006766 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006716:	7cfb      	ldrb	r3, [r7, #19]
 8006718:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800671c:	2b28      	cmp	r3, #40	@ 0x28
 800671e:	d117      	bne.n	8006750 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	697b      	ldr	r3, [r7, #20]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f042 0201 	orr.w	r2, r2, #1
 800672e:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681a      	ldr	r2, [r3, #0]
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800673e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	2200      	movs	r2, #0
 8006744:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	2228      	movs	r2, #40	@ 0x28
 800674a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800674e:	e007      	b.n	8006760 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2200      	movs	r2, #0
 800675c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006760:	6978      	ldr	r0, [r7, #20]
 8006762:	f7fe fb31 	bl	8004dc8 <HAL_I2C_ErrorCallback>
}
 8006766:	bf00      	nop
 8006768:	3718      	adds	r7, #24
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	2000002c 	.word	0x2000002c
 8006774:	14f8b589 	.word	0x14f8b589

08006778 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	603b      	str	r3, [r7, #0]
 8006784:	4613      	mov	r3, r2
 8006786:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006788:	e048      	b.n	800681c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006790:	d044      	beq.n	800681c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006792:	f7fb ffb9 	bl	8002708 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	683a      	ldr	r2, [r7, #0]
 800679e:	429a      	cmp	r2, r3
 80067a0:	d302      	bcc.n	80067a8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d139      	bne.n	800681c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	0c1b      	lsrs	r3, r3, #16
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d10d      	bne.n	80067ce <I2C_WaitOnFlagUntilTimeout+0x56>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	43da      	mvns	r2, r3
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	4013      	ands	r3, r2
 80067be:	b29b      	uxth	r3, r3
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	bf0c      	ite	eq
 80067c4:	2301      	moveq	r3, #1
 80067c6:	2300      	movne	r3, #0
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	461a      	mov	r2, r3
 80067cc:	e00c      	b.n	80067e8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	43da      	mvns	r2, r3
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	4013      	ands	r3, r2
 80067da:	b29b      	uxth	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	bf0c      	ite	eq
 80067e0:	2301      	moveq	r3, #1
 80067e2:	2300      	movne	r3, #0
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	461a      	mov	r2, r3
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	429a      	cmp	r2, r3
 80067ec:	d116      	bne.n	800681c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2200      	movs	r2, #0
 80067f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006808:	f043 0220 	orr.w	r2, r3, #32
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2200      	movs	r2, #0
 8006814:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e023      	b.n	8006864 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	0c1b      	lsrs	r3, r3, #16
 8006820:	b2db      	uxtb	r3, r3
 8006822:	2b01      	cmp	r3, #1
 8006824:	d10d      	bne.n	8006842 <I2C_WaitOnFlagUntilTimeout+0xca>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	43da      	mvns	r2, r3
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	4013      	ands	r3, r2
 8006832:	b29b      	uxth	r3, r3
 8006834:	2b00      	cmp	r3, #0
 8006836:	bf0c      	ite	eq
 8006838:	2301      	moveq	r3, #1
 800683a:	2300      	movne	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	461a      	mov	r2, r3
 8006840:	e00c      	b.n	800685c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	43da      	mvns	r2, r3
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	4013      	ands	r3, r2
 800684e:	b29b      	uxth	r3, r3
 8006850:	2b00      	cmp	r3, #0
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	461a      	mov	r2, r3
 800685c:	79fb      	ldrb	r3, [r7, #7]
 800685e:	429a      	cmp	r2, r3
 8006860:	d093      	beq.n	800678a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b084      	sub	sp, #16
 8006870:	af00      	add	r7, sp, #0
 8006872:	60f8      	str	r0, [r7, #12]
 8006874:	60b9      	str	r1, [r7, #8]
 8006876:	607a      	str	r2, [r7, #4]
 8006878:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800687a:	e071      	b.n	8006960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006886:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800688a:	d123      	bne.n	80068d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800689a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80068a4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2200      	movs	r2, #0
 80068aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2220      	movs	r2, #32
 80068b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2200      	movs	r2, #0
 80068b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068c0:	f043 0204 	orr.w	r2, r3, #4
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	2200      	movs	r2, #0
 80068cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80068d0:	2301      	movs	r3, #1
 80068d2:	e067      	b.n	80069a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068da:	d041      	beq.n	8006960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068dc:	f7fb ff14 	bl	8002708 <HAL_GetTick>
 80068e0:	4602      	mov	r2, r0
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	1ad3      	subs	r3, r2, r3
 80068e6:	687a      	ldr	r2, [r7, #4]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d302      	bcc.n	80068f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d136      	bne.n	8006960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	0c1b      	lsrs	r3, r3, #16
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d10c      	bne.n	8006916 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	43da      	mvns	r2, r3
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	4013      	ands	r3, r2
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	bf14      	ite	ne
 800690e:	2301      	movne	r3, #1
 8006910:	2300      	moveq	r3, #0
 8006912:	b2db      	uxtb	r3, r3
 8006914:	e00b      	b.n	800692e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	43da      	mvns	r2, r3
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4013      	ands	r3, r2
 8006922:	b29b      	uxth	r3, r3
 8006924:	2b00      	cmp	r3, #0
 8006926:	bf14      	ite	ne
 8006928:	2301      	movne	r3, #1
 800692a:	2300      	moveq	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d016      	beq.n	8006960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2220      	movs	r2, #32
 800693c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	2200      	movs	r2, #0
 8006944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800694c:	f043 0220 	orr.w	r2, r3, #32
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	2200      	movs	r2, #0
 8006958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e021      	b.n	80069a4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	0c1b      	lsrs	r3, r3, #16
 8006964:	b2db      	uxtb	r3, r3
 8006966:	2b01      	cmp	r3, #1
 8006968:	d10c      	bne.n	8006984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	695b      	ldr	r3, [r3, #20]
 8006970:	43da      	mvns	r2, r3
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	4013      	ands	r3, r2
 8006976:	b29b      	uxth	r3, r3
 8006978:	2b00      	cmp	r3, #0
 800697a:	bf14      	ite	ne
 800697c:	2301      	movne	r3, #1
 800697e:	2300      	moveq	r3, #0
 8006980:	b2db      	uxtb	r3, r3
 8006982:	e00b      	b.n	800699c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	43da      	mvns	r2, r3
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	4013      	ands	r3, r2
 8006990:	b29b      	uxth	r3, r3
 8006992:	2b00      	cmp	r3, #0
 8006994:	bf14      	ite	ne
 8006996:	2301      	movne	r3, #1
 8006998:	2300      	moveq	r3, #0
 800699a:	b2db      	uxtb	r3, r3
 800699c:	2b00      	cmp	r3, #0
 800699e:	f47f af6d 	bne.w	800687c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3710      	adds	r7, #16
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b084      	sub	sp, #16
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069b8:	e034      	b.n	8006a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069ba:	68f8      	ldr	r0, [r7, #12]
 80069bc:	f000 f8b8 	bl	8006b30 <I2C_IsAcknowledgeFailed>
 80069c0:	4603      	mov	r3, r0
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d001      	beq.n	80069ca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e034      	b.n	8006a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d0:	d028      	beq.n	8006a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069d2:	f7fb fe99 	bl	8002708 <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	68ba      	ldr	r2, [r7, #8]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d302      	bcc.n	80069e8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d11d      	bne.n	8006a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f2:	2b80      	cmp	r3, #128	@ 0x80
 80069f4:	d016      	beq.n	8006a24 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2220      	movs	r2, #32
 8006a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a10:	f043 0220 	orr.w	r2, r3, #32
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006a20:	2301      	movs	r3, #1
 8006a22:	e007      	b.n	8006a34 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a2e:	2b80      	cmp	r3, #128	@ 0x80
 8006a30:	d1c3      	bne.n	80069ba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a48:	e034      	b.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f000 f870 	bl	8006b30 <I2C_IsAcknowledgeFailed>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d001      	beq.n	8006a5a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a56:	2301      	movs	r3, #1
 8006a58:	e034      	b.n	8006ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a60:	d028      	beq.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a62:	f7fb fe51 	bl	8002708 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	d302      	bcc.n	8006a78 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d11d      	bne.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	695b      	ldr	r3, [r3, #20]
 8006a7e:	f003 0304 	and.w	r3, r3, #4
 8006a82:	2b04      	cmp	r3, #4
 8006a84:	d016      	beq.n	8006ab4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2220      	movs	r2, #32
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa0:	f043 0220 	orr.w	r2, r3, #32
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e007      	b.n	8006ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	695b      	ldr	r3, [r3, #20]
 8006aba:	f003 0304 	and.w	r3, r3, #4
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d1c3      	bne.n	8006a4a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3710      	adds	r7, #16
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b085      	sub	sp, #20
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006ad8:	4b13      	ldr	r3, [pc, #76]	@ (8006b28 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	08db      	lsrs	r3, r3, #3
 8006ade:	4a13      	ldr	r2, [pc, #76]	@ (8006b2c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006ae0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae4:	0a1a      	lsrs	r2, r3, #8
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d107      	bne.n	8006b0a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afe:	f043 0220 	orr.w	r2, r3, #32
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	e008      	b.n	8006b1c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006b14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b18:	d0e9      	beq.n	8006aee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006b1a:	2300      	movs	r3, #0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3714      	adds	r7, #20
 8006b20:	46bd      	mov	sp, r7
 8006b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b26:	4770      	bx	lr
 8006b28:	2000002c 	.word	0x2000002c
 8006b2c:	14f8b589 	.word	0x14f8b589

08006b30 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	695b      	ldr	r3, [r3, #20]
 8006b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b46:	d11b      	bne.n	8006b80 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b50:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2200      	movs	r2, #0
 8006b56:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b6c:	f043 0204 	orr.w	r2, r3, #4
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	e000      	b.n	8006b82 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	370c      	adds	r7, #12
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr

08006b8e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006b8e:	b480      	push	{r7}
 8006b90:	b083      	sub	sp, #12
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9a:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8006b9e:	d103      	bne.n	8006ba8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8006ba6:	e007      	b.n	8006bb8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bac:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8006bb0:	d102      	bne.n	8006bb8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2208      	movs	r2, #8
 8006bb6:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8006bb8:	bf00      	nop
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr

08006bc4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b086      	sub	sp, #24
 8006bc8:	af02      	add	r7, sp, #8
 8006bca:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d101      	bne.n	8006bd6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e101      	b.n	8006dda <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d106      	bne.n	8006bf6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f007 fa07 	bl	800e004 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2203      	movs	r2, #3
 8006bfa:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006c04:	d102      	bne.n	8006c0c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4618      	mov	r0, r3
 8006c12:	f003 fd5e 	bl	800a6d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6818      	ldr	r0, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	7c1a      	ldrb	r2, [r3, #16]
 8006c1e:	f88d 2000 	strb.w	r2, [sp]
 8006c22:	3304      	adds	r3, #4
 8006c24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c26:	f003 fc3d 	bl	800a4a4 <USB_CoreInit>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d005      	beq.n	8006c3c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2202      	movs	r2, #2
 8006c34:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0ce      	b.n	8006dda <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	2100      	movs	r1, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f003 fd56 	bl	800a6f4 <USB_SetCurrentMode>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d005      	beq.n	8006c5a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2202      	movs	r2, #2
 8006c52:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e0bf      	b.n	8006dda <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	73fb      	strb	r3, [r7, #15]
 8006c5e:	e04a      	b.n	8006cf6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	3315      	adds	r3, #21
 8006c70:	2201      	movs	r2, #1
 8006c72:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c74:	7bfa      	ldrb	r2, [r7, #15]
 8006c76:	6879      	ldr	r1, [r7, #4]
 8006c78:	4613      	mov	r3, r2
 8006c7a:	00db      	lsls	r3, r3, #3
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	440b      	add	r3, r1
 8006c82:	3314      	adds	r3, #20
 8006c84:	7bfa      	ldrb	r2, [r7, #15]
 8006c86:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006c88:	7bfa      	ldrb	r2, [r7, #15]
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
 8006c8c:	b298      	uxth	r0, r3
 8006c8e:	6879      	ldr	r1, [r7, #4]
 8006c90:	4613      	mov	r3, r2
 8006c92:	00db      	lsls	r3, r3, #3
 8006c94:	4413      	add	r3, r2
 8006c96:	009b      	lsls	r3, r3, #2
 8006c98:	440b      	add	r3, r1
 8006c9a:	332e      	adds	r3, #46	@ 0x2e
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006ca0:	7bfa      	ldrb	r2, [r7, #15]
 8006ca2:	6879      	ldr	r1, [r7, #4]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	440b      	add	r3, r1
 8006cae:	3318      	adds	r3, #24
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006cb4:	7bfa      	ldrb	r2, [r7, #15]
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	4413      	add	r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	331c      	adds	r3, #28
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006cc8:	7bfa      	ldrb	r2, [r7, #15]
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	4413      	add	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	3320      	adds	r3, #32
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006cdc:	7bfa      	ldrb	r2, [r7, #15]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	4413      	add	r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	3324      	adds	r3, #36	@ 0x24
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006cf0:	7bfb      	ldrb	r3, [r7, #15]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	73fb      	strb	r3, [r7, #15]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	791b      	ldrb	r3, [r3, #4]
 8006cfa:	7bfa      	ldrb	r2, [r7, #15]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d3af      	bcc.n	8006c60 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d00:	2300      	movs	r3, #0
 8006d02:	73fb      	strb	r3, [r7, #15]
 8006d04:	e044      	b.n	8006d90 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d06:	7bfa      	ldrb	r2, [r7, #15]
 8006d08:	6879      	ldr	r1, [r7, #4]
 8006d0a:	4613      	mov	r3, r2
 8006d0c:	00db      	lsls	r3, r3, #3
 8006d0e:	4413      	add	r3, r2
 8006d10:	009b      	lsls	r3, r3, #2
 8006d12:	440b      	add	r3, r1
 8006d14:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d1c:	7bfa      	ldrb	r2, [r7, #15]
 8006d1e:	6879      	ldr	r1, [r7, #4]
 8006d20:	4613      	mov	r3, r2
 8006d22:	00db      	lsls	r3, r3, #3
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	440b      	add	r3, r1
 8006d2a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006d2e:	7bfa      	ldrb	r2, [r7, #15]
 8006d30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d32:	7bfa      	ldrb	r2, [r7, #15]
 8006d34:	6879      	ldr	r1, [r7, #4]
 8006d36:	4613      	mov	r3, r2
 8006d38:	00db      	lsls	r3, r3, #3
 8006d3a:	4413      	add	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	440b      	add	r3, r1
 8006d40:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006d44:	2200      	movs	r2, #0
 8006d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d48:	7bfa      	ldrb	r2, [r7, #15]
 8006d4a:	6879      	ldr	r1, [r7, #4]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	00db      	lsls	r3, r3, #3
 8006d50:	4413      	add	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	440b      	add	r3, r1
 8006d56:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d5e:	7bfa      	ldrb	r2, [r7, #15]
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	4613      	mov	r3, r2
 8006d64:	00db      	lsls	r3, r3, #3
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	440b      	add	r3, r1
 8006d6c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006d70:	2200      	movs	r2, #0
 8006d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d74:	7bfa      	ldrb	r2, [r7, #15]
 8006d76:	6879      	ldr	r1, [r7, #4]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	00db      	lsls	r3, r3, #3
 8006d7c:	4413      	add	r3, r2
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	440b      	add	r3, r1
 8006d82:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006d86:	2200      	movs	r2, #0
 8006d88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d8a:	7bfb      	ldrb	r3, [r7, #15]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	73fb      	strb	r3, [r7, #15]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	791b      	ldrb	r3, [r3, #4]
 8006d94:	7bfa      	ldrb	r2, [r7, #15]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d3b5      	bcc.n	8006d06 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6818      	ldr	r0, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	7c1a      	ldrb	r2, [r3, #16]
 8006da2:	f88d 2000 	strb.w	r2, [sp]
 8006da6:	3304      	adds	r3, #4
 8006da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006daa:	f003 fcef 	bl	800a78c <USB_DevInit>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d005      	beq.n	8006dc0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2202      	movs	r2, #2
 8006db8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	e00c      	b.n	8006dda <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f004 fd39 	bl	800b84a <USB_DevDisconnect>

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d101      	bne.n	8006dfe <HAL_PCD_Start+0x1c>
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	e022      	b.n	8006e44 <HAL_PCD_Start+0x62>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2201      	movs	r2, #1
 8006e02:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d105      	bne.n	8006e26 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e1e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f003 fc40 	bl	800a6b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4618      	mov	r0, r3
 8006e36:	f004 fce7 	bl	800b808 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e4c:	b590      	push	{r4, r7, lr}
 8006e4e:	b08d      	sub	sp, #52	@ 0x34
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e5a:	6a3b      	ldr	r3, [r7, #32]
 8006e5c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4618      	mov	r0, r3
 8006e64:	f004 fda5 	bl	800b9b2 <USB_GetMode>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f040 848c 	bne.w	8007788 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4618      	mov	r0, r3
 8006e76:	f004 fd09 	bl	800b88c <USB_ReadInterrupts>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	f000 8482 	beq.w	8007786 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	0a1b      	lsrs	r3, r3, #8
 8006e8c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4618      	mov	r0, r3
 8006e9c:	f004 fcf6 	bl	800b88c <USB_ReadInterrupts>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d107      	bne.n	8006eba <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	695a      	ldr	r2, [r3, #20]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f002 0202 	and.w	r2, r2, #2
 8006eb8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f004 fce4 	bl	800b88c <USB_ReadInterrupts>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	f003 0310 	and.w	r3, r3, #16
 8006eca:	2b10      	cmp	r3, #16
 8006ecc:	d161      	bne.n	8006f92 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	699a      	ldr	r2, [r3, #24]
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f022 0210 	bic.w	r2, r2, #16
 8006edc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006ede:	6a3b      	ldr	r3, [r7, #32]
 8006ee0:	6a1b      	ldr	r3, [r3, #32]
 8006ee2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	f003 020f 	and.w	r2, r3, #15
 8006eea:	4613      	mov	r3, r2
 8006eec:	00db      	lsls	r3, r3, #3
 8006eee:	4413      	add	r3, r2
 8006ef0:	009b      	lsls	r3, r3, #2
 8006ef2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ef6:	687a      	ldr	r2, [r7, #4]
 8006ef8:	4413      	add	r3, r2
 8006efa:	3304      	adds	r3, #4
 8006efc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006efe:	69bb      	ldr	r3, [r7, #24]
 8006f00:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006f04:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006f08:	d124      	bne.n	8006f54 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8006f10:	4013      	ands	r3, r2
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d035      	beq.n	8006f82 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	091b      	lsrs	r3, r3, #4
 8006f1e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	461a      	mov	r2, r3
 8006f28:	6a38      	ldr	r0, [r7, #32]
 8006f2a:	f004 fb1b 	bl	800b564 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	68da      	ldr	r2, [r3, #12]
 8006f32:	69bb      	ldr	r3, [r7, #24]
 8006f34:	091b      	lsrs	r3, r3, #4
 8006f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f3a:	441a      	add	r2, r3
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	695a      	ldr	r2, [r3, #20]
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	091b      	lsrs	r3, r3, #4
 8006f48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f4c:	441a      	add	r2, r3
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	615a      	str	r2, [r3, #20]
 8006f52:	e016      	b.n	8006f82 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006f54:	69bb      	ldr	r3, [r7, #24]
 8006f56:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8006f5a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8006f5e:	d110      	bne.n	8006f82 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006f66:	2208      	movs	r2, #8
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6a38      	ldr	r0, [r7, #32]
 8006f6c:	f004 fafa 	bl	800b564 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f70:	697b      	ldr	r3, [r7, #20]
 8006f72:	695a      	ldr	r2, [r3, #20]
 8006f74:	69bb      	ldr	r3, [r7, #24]
 8006f76:	091b      	lsrs	r3, r3, #4
 8006f78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f7c:	441a      	add	r2, r3
 8006f7e:	697b      	ldr	r3, [r7, #20]
 8006f80:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699a      	ldr	r2, [r3, #24]
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f042 0210 	orr.w	r2, r2, #16
 8006f90:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f004 fc78 	bl	800b88c <USB_ReadInterrupts>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006fa2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006fa6:	f040 80a7 	bne.w	80070f8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8006faa:	2300      	movs	r3, #0
 8006fac:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f004 fc7d 	bl	800b8b2 <USB_ReadDevAllOutEpInterrupt>
 8006fb8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8006fba:	e099      	b.n	80070f0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	f000 808e 	beq.w	80070e4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fce:	b2d2      	uxtb	r2, r2
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f004 fca1 	bl	800b91a <USB_ReadDevOutEPInterrupt>
 8006fd8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d00c      	beq.n	8006ffe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006fe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe6:	015a      	lsls	r2, r3, #5
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	4413      	add	r3, r2
 8006fec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006ff6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f000 fea3 	bl	8007d44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	f003 0308 	and.w	r3, r3, #8
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00c      	beq.n	8007022 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700a:	015a      	lsls	r2, r3, #5
 800700c:	69fb      	ldr	r3, [r7, #28]
 800700e:	4413      	add	r3, r2
 8007010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007014:	461a      	mov	r2, r3
 8007016:	2308      	movs	r3, #8
 8007018:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800701a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800701c:	6878      	ldr	r0, [r7, #4]
 800701e:	f000 ff79 	bl	8007f14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007022:	693b      	ldr	r3, [r7, #16]
 8007024:	f003 0310 	and.w	r3, r3, #16
 8007028:	2b00      	cmp	r3, #0
 800702a:	d008      	beq.n	800703e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800702c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800702e:	015a      	lsls	r2, r3, #5
 8007030:	69fb      	ldr	r3, [r7, #28]
 8007032:	4413      	add	r3, r2
 8007034:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007038:	461a      	mov	r2, r3
 800703a:	2310      	movs	r3, #16
 800703c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800703e:	693b      	ldr	r3, [r7, #16]
 8007040:	f003 0302 	and.w	r3, r3, #2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d030      	beq.n	80070aa <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	695b      	ldr	r3, [r3, #20]
 800704c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007050:	2b80      	cmp	r3, #128	@ 0x80
 8007052:	d109      	bne.n	8007068 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007062:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007066:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8007068:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800706a:	4613      	mov	r3, r2
 800706c:	00db      	lsls	r3, r3, #3
 800706e:	4413      	add	r3, r2
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007076:	687a      	ldr	r2, [r7, #4]
 8007078:	4413      	add	r3, r2
 800707a:	3304      	adds	r3, #4
 800707c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	78db      	ldrb	r3, [r3, #3]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d108      	bne.n	8007098 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	2200      	movs	r2, #0
 800708a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800708c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708e:	b2db      	uxtb	r3, r3
 8007090:	4619      	mov	r1, r3
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f007 f8b2 	bl	800e1fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8007098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070a4:	461a      	mov	r2, r3
 80070a6:	2302      	movs	r3, #2
 80070a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	f003 0320 	and.w	r3, r3, #32
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d008      	beq.n	80070c6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80070b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070c0:	461a      	mov	r2, r3
 80070c2:	2320      	movs	r3, #32
 80070c4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d009      	beq.n	80070e4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80070d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070dc:	461a      	mov	r2, r3
 80070de:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80070e2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	3301      	adds	r3, #1
 80070e8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80070ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ec:	085b      	lsrs	r3, r3, #1
 80070ee:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80070f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	f47f af62 	bne.w	8006fbc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	4618      	mov	r0, r3
 80070fe:	f004 fbc5 	bl	800b88c <USB_ReadInterrupts>
 8007102:	4603      	mov	r3, r0
 8007104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007108:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800710c:	f040 80db 	bne.w	80072c6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4618      	mov	r0, r3
 8007116:	f004 fbe6 	bl	800b8e6 <USB_ReadDevAllInEpInterrupt>
 800711a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8007120:	e0cd      	b.n	80072be <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007124:	f003 0301 	and.w	r3, r3, #1
 8007128:	2b00      	cmp	r3, #0
 800712a:	f000 80c2 	beq.w	80072b2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007134:	b2d2      	uxtb	r2, r2
 8007136:	4611      	mov	r1, r2
 8007138:	4618      	mov	r0, r3
 800713a:	f004 fc0c 	bl	800b956 <USB_ReadDevInEPInterrupt>
 800713e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d057      	beq.n	80071fa <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800714a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	2201      	movs	r2, #1
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007158:	69fb      	ldr	r3, [r7, #28]
 800715a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800715e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	43db      	mvns	r3, r3
 8007164:	69f9      	ldr	r1, [r7, #28]
 8007166:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800716a:	4013      	ands	r3, r2
 800716c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800716e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007170:	015a      	lsls	r2, r3, #5
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	4413      	add	r3, r2
 8007176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800717a:	461a      	mov	r2, r3
 800717c:	2301      	movs	r3, #1
 800717e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	799b      	ldrb	r3, [r3, #6]
 8007184:	2b01      	cmp	r3, #1
 8007186:	d132      	bne.n	80071ee <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007188:	6879      	ldr	r1, [r7, #4]
 800718a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800718c:	4613      	mov	r3, r2
 800718e:	00db      	lsls	r3, r3, #3
 8007190:	4413      	add	r3, r2
 8007192:	009b      	lsls	r3, r3, #2
 8007194:	440b      	add	r3, r1
 8007196:	3320      	adds	r3, #32
 8007198:	6819      	ldr	r1, [r3, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800719e:	4613      	mov	r3, r2
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	4413      	add	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4403      	add	r3, r0
 80071a8:	331c      	adds	r3, #28
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4419      	add	r1, r3
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b2:	4613      	mov	r3, r2
 80071b4:	00db      	lsls	r3, r3, #3
 80071b6:	4413      	add	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4403      	add	r3, r0
 80071bc:	3320      	adds	r3, #32
 80071be:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d113      	bne.n	80071ee <HAL_PCD_IRQHandler+0x3a2>
 80071c6:	6879      	ldr	r1, [r7, #4]
 80071c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ca:	4613      	mov	r3, r2
 80071cc:	00db      	lsls	r3, r3, #3
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	440b      	add	r3, r1
 80071d4:	3324      	adds	r3, #36	@ 0x24
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d108      	bne.n	80071ee <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80071e6:	461a      	mov	r2, r3
 80071e8:	2101      	movs	r1, #1
 80071ea:	f004 fc13 	bl	800ba14 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f006 ff86 	bl	800e106 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f003 0308 	and.w	r3, r3, #8
 8007200:	2b00      	cmp	r3, #0
 8007202:	d008      	beq.n	8007216 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007206:	015a      	lsls	r2, r3, #5
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	4413      	add	r3, r2
 800720c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007210:	461a      	mov	r2, r3
 8007212:	2308      	movs	r3, #8
 8007214:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f003 0310 	and.w	r3, r3, #16
 800721c:	2b00      	cmp	r3, #0
 800721e:	d008      	beq.n	8007232 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	69fb      	ldr	r3, [r7, #28]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800722c:	461a      	mov	r2, r3
 800722e:	2310      	movs	r3, #16
 8007230:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007238:	2b00      	cmp	r3, #0
 800723a:	d008      	beq.n	800724e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800723c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007248:	461a      	mov	r2, r3
 800724a:	2340      	movs	r3, #64	@ 0x40
 800724c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b00      	cmp	r3, #0
 8007256:	d023      	beq.n	80072a0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8007258:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800725a:	6a38      	ldr	r0, [r7, #32]
 800725c:	f003 fbfa 	bl	800aa54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8007260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007262:	4613      	mov	r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	4413      	add	r3, r2
 8007268:	009b      	lsls	r3, r3, #2
 800726a:	3310      	adds	r3, #16
 800726c:	687a      	ldr	r2, [r7, #4]
 800726e:	4413      	add	r3, r2
 8007270:	3304      	adds	r3, #4
 8007272:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	78db      	ldrb	r3, [r3, #3]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d108      	bne.n	800728e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800727c:	697b      	ldr	r3, [r7, #20]
 800727e:	2200      	movs	r2, #0
 8007280:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	b2db      	uxtb	r3, r3
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f006 ffc9 	bl	800e220 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800728e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007290:	015a      	lsls	r2, r3, #5
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	4413      	add	r3, r2
 8007296:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800729a:	461a      	mov	r2, r3
 800729c:	2302      	movs	r3, #2
 800729e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80072aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 fcbd 	bl	8007c2c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80072b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b4:	3301      	adds	r3, #1
 80072b6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80072b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072ba:	085b      	lsrs	r3, r3, #1
 80072bc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80072be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f47f af2e 	bne.w	8007122 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4618      	mov	r0, r3
 80072cc:	f004 fade 	bl	800b88c <USB_ReadInterrupts>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80072d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80072da:	d122      	bne.n	8007322 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80072ea:	f023 0301 	bic.w	r3, r3, #1
 80072ee:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80072f6:	2b01      	cmp	r3, #1
 80072f8:	d108      	bne.n	800730c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007302:	2100      	movs	r1, #0
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fea3 	bl	8008050 <HAL_PCDEx_LPM_Callback>
 800730a:	e002      	b.n	8007312 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f006 ff67 	bl	800e1e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	695a      	ldr	r2, [r3, #20]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8007320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4618      	mov	r0, r3
 8007328:	f004 fab0 	bl	800b88c <USB_ReadInterrupts>
 800732c:	4603      	mov	r3, r0
 800732e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007332:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007336:	d112      	bne.n	800735e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b01      	cmp	r3, #1
 8007346:	d102      	bne.n	800734e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f006 ff23 	bl	800e194 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	695a      	ldr	r2, [r3, #20]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800735c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f004 fa92 	bl	800b88c <USB_ReadInterrupts>
 8007368:	4603      	mov	r3, r0
 800736a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800736e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007372:	f040 80b7 	bne.w	80074e4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	69fa      	ldr	r2, [r7, #28]
 8007380:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007384:	f023 0301 	bic.w	r3, r3, #1
 8007388:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	2110      	movs	r1, #16
 8007390:	4618      	mov	r0, r3
 8007392:	f003 fb5f 	bl	800aa54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007396:	2300      	movs	r3, #0
 8007398:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800739a:	e046      	b.n	800742a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800739c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800739e:	015a      	lsls	r2, r3, #5
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	4413      	add	r3, r2
 80073a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073a8:	461a      	mov	r2, r3
 80073aa:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073ae:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80073b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073b2:	015a      	lsls	r2, r3, #5
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	4413      	add	r3, r2
 80073b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073c0:	0151      	lsls	r1, r2, #5
 80073c2:	69fa      	ldr	r2, [r7, #28]
 80073c4:	440a      	add	r2, r1
 80073c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80073ce:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80073d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073d2:	015a      	lsls	r2, r3, #5
 80073d4:	69fb      	ldr	r3, [r7, #28]
 80073d6:	4413      	add	r3, r2
 80073d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073dc:	461a      	mov	r2, r3
 80073de:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80073e2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80073e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e6:	015a      	lsls	r2, r3, #5
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	4413      	add	r3, r2
 80073ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f4:	0151      	lsls	r1, r2, #5
 80073f6:	69fa      	ldr	r2, [r7, #28]
 80073f8:	440a      	add	r2, r1
 80073fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80073fe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007402:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007404:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	4413      	add	r3, r2
 800740c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007414:	0151      	lsls	r1, r2, #5
 8007416:	69fa      	ldr	r2, [r7, #28]
 8007418:	440a      	add	r2, r1
 800741a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800741e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007422:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007426:	3301      	adds	r3, #1
 8007428:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	791b      	ldrb	r3, [r3, #4]
 800742e:	461a      	mov	r2, r3
 8007430:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007432:	4293      	cmp	r3, r2
 8007434:	d3b2      	bcc.n	800739c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8007436:	69fb      	ldr	r3, [r7, #28]
 8007438:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	69fa      	ldr	r2, [r7, #28]
 8007440:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007444:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8007448:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	7bdb      	ldrb	r3, [r3, #15]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d016      	beq.n	8007480 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007458:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007462:	f043 030b 	orr.w	r3, r3, #11
 8007466:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007478:	f043 030b 	orr.w	r3, r3, #11
 800747c:	6453      	str	r3, [r2, #68]	@ 0x44
 800747e:	e015      	b.n	80074ac <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007486:	695b      	ldr	r3, [r3, #20]
 8007488:	69fa      	ldr	r2, [r7, #28]
 800748a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800748e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8007492:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8007496:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007498:	69fb      	ldr	r3, [r7, #28]
 800749a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800749e:	691b      	ldr	r3, [r3, #16]
 80074a0:	69fa      	ldr	r2, [r7, #28]
 80074a2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074a6:	f043 030b 	orr.w	r3, r3, #11
 80074aa:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	69fa      	ldr	r2, [r7, #28]
 80074b6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80074ba:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80074be:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6818      	ldr	r0, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80074ce:	461a      	mov	r2, r3
 80074d0:	f004 faa0 	bl	800ba14 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	695a      	ldr	r2, [r3, #20]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80074e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	4618      	mov	r0, r3
 80074ea:	f004 f9cf 	bl	800b88c <USB_ReadInterrupts>
 80074ee:	4603      	mov	r3, r0
 80074f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80074f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80074f8:	d123      	bne.n	8007542 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f004 fa65 	bl	800b9ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4618      	mov	r0, r3
 800750a:	f003 fb1c 	bl	800ab46 <USB_GetDevSpeed>
 800750e:	4603      	mov	r3, r0
 8007510:	461a      	mov	r2, r3
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681c      	ldr	r4, [r3, #0]
 800751a:	f001 f9c9 	bl	80088b0 <HAL_RCC_GetHCLKFreq>
 800751e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8007524:	461a      	mov	r2, r3
 8007526:	4620      	mov	r0, r4
 8007528:	f003 f820 	bl	800a56c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f006 fe12 	bl	800e156 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695a      	ldr	r2, [r3, #20]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8007540:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f004 f9a0 	bl	800b88c <USB_ReadInterrupts>
 800754c:	4603      	mov	r3, r0
 800754e:	f003 0308 	and.w	r3, r3, #8
 8007552:	2b08      	cmp	r3, #8
 8007554:	d10a      	bne.n	800756c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f006 fdef 	bl	800e13a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695a      	ldr	r2, [r3, #20]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f002 0208 	and.w	r2, r2, #8
 800756a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4618      	mov	r0, r3
 8007572:	f004 f98b 	bl	800b88c <USB_ReadInterrupts>
 8007576:	4603      	mov	r3, r0
 8007578:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800757c:	2b80      	cmp	r3, #128	@ 0x80
 800757e:	d123      	bne.n	80075c8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8007580:	6a3b      	ldr	r3, [r7, #32]
 8007582:	699b      	ldr	r3, [r3, #24]
 8007584:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007588:	6a3b      	ldr	r3, [r7, #32]
 800758a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800758c:	2301      	movs	r3, #1
 800758e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007590:	e014      	b.n	80075bc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8007592:	6879      	ldr	r1, [r7, #4]
 8007594:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007596:	4613      	mov	r3, r2
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	4413      	add	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	440b      	add	r3, r1
 80075a0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80075a4:	781b      	ldrb	r3, [r3, #0]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d105      	bne.n	80075b6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	4619      	mov	r1, r3
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 fb0a 	bl	8007bca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b8:	3301      	adds	r3, #1
 80075ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	791b      	ldrb	r3, [r3, #4]
 80075c0:	461a      	mov	r2, r3
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d3e4      	bcc.n	8007592 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4618      	mov	r0, r3
 80075ce:	f004 f95d 	bl	800b88c <USB_ReadInterrupts>
 80075d2:	4603      	mov	r3, r0
 80075d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80075dc:	d13c      	bne.n	8007658 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80075de:	2301      	movs	r3, #1
 80075e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80075e2:	e02b      	b.n	800763c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80075e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80075f4:	6879      	ldr	r1, [r7, #4]
 80075f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075f8:	4613      	mov	r3, r2
 80075fa:	00db      	lsls	r3, r3, #3
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	440b      	add	r3, r1
 8007602:	3318      	adds	r3, #24
 8007604:	781b      	ldrb	r3, [r3, #0]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d115      	bne.n	8007636 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800760a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800760c:	2b00      	cmp	r3, #0
 800760e:	da12      	bge.n	8007636 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8007610:	6879      	ldr	r1, [r7, #4]
 8007612:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007614:	4613      	mov	r3, r2
 8007616:	00db      	lsls	r3, r3, #3
 8007618:	4413      	add	r3, r2
 800761a:	009b      	lsls	r3, r3, #2
 800761c:	440b      	add	r3, r1
 800761e:	3317      	adds	r3, #23
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8007624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007626:	b2db      	uxtb	r3, r3
 8007628:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800762c:	b2db      	uxtb	r3, r3
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f000 faca 	bl	8007bca <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007638:	3301      	adds	r3, #1
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	791b      	ldrb	r3, [r3, #4]
 8007640:	461a      	mov	r2, r3
 8007642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007644:	4293      	cmp	r3, r2
 8007646:	d3cd      	bcc.n	80075e4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	695a      	ldr	r2, [r3, #20]
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8007656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4618      	mov	r0, r3
 800765e:	f004 f915 	bl	800b88c <USB_ReadInterrupts>
 8007662:	4603      	mov	r3, r0
 8007664:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007668:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800766c:	d156      	bne.n	800771c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800766e:	2301      	movs	r3, #1
 8007670:	627b      	str	r3, [r7, #36]	@ 0x24
 8007672:	e045      	b.n	8007700 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007684:	6879      	ldr	r1, [r7, #4]
 8007686:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007688:	4613      	mov	r3, r2
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	4413      	add	r3, r2
 800768e:	009b      	lsls	r3, r3, #2
 8007690:	440b      	add	r3, r1
 8007692:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b01      	cmp	r3, #1
 800769a:	d12e      	bne.n	80076fa <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800769c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800769e:	2b00      	cmp	r3, #0
 80076a0:	da2b      	bge.n	80076fa <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	0c1a      	lsrs	r2, r3, #16
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80076ac:	4053      	eors	r3, r2
 80076ae:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d121      	bne.n	80076fa <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80076b6:	6879      	ldr	r1, [r7, #4]
 80076b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076ba:	4613      	mov	r3, r2
 80076bc:	00db      	lsls	r3, r3, #3
 80076be:	4413      	add	r3, r2
 80076c0:	009b      	lsls	r3, r3, #2
 80076c2:	440b      	add	r3, r1
 80076c4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80076c8:	2201      	movs	r2, #1
 80076ca:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80076cc:	6a3b      	ldr	r3, [r7, #32]
 80076ce:	699b      	ldr	r3, [r3, #24]
 80076d0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80076d4:	6a3b      	ldr	r3, [r7, #32]
 80076d6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	695b      	ldr	r3, [r3, #20]
 80076dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d10a      	bne.n	80076fa <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076ea:	685b      	ldr	r3, [r3, #4]
 80076ec:	69fa      	ldr	r2, [r7, #28]
 80076ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80076f6:	6053      	str	r3, [r2, #4]
            break;
 80076f8:	e008      	b.n	800770c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	3301      	adds	r3, #1
 80076fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	791b      	ldrb	r3, [r3, #4]
 8007704:	461a      	mov	r2, r3
 8007706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007708:	4293      	cmp	r3, r2
 800770a:	d3b3      	bcc.n	8007674 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	695a      	ldr	r2, [r3, #20]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800771a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4618      	mov	r0, r3
 8007722:	f004 f8b3 	bl	800b88c <USB_ReadInterrupts>
 8007726:	4603      	mov	r3, r0
 8007728:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800772c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007730:	d10a      	bne.n	8007748 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f006 fd86 	bl	800e244 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	695a      	ldr	r2, [r3, #20]
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8007746:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4618      	mov	r0, r3
 800774e:	f004 f89d 	bl	800b88c <USB_ReadInterrupts>
 8007752:	4603      	mov	r3, r0
 8007754:	f003 0304 	and.w	r3, r3, #4
 8007758:	2b04      	cmp	r3, #4
 800775a:	d115      	bne.n	8007788 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	f003 0304 	and.w	r3, r3, #4
 800776a:	2b00      	cmp	r3, #0
 800776c:	d002      	beq.n	8007774 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f006 fd76 	bl	800e260 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	6859      	ldr	r1, [r3, #4]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	69ba      	ldr	r2, [r7, #24]
 8007780:	430a      	orrs	r2, r1
 8007782:	605a      	str	r2, [r3, #4]
 8007784:	e000      	b.n	8007788 <HAL_PCD_IRQHandler+0x93c>
      return;
 8007786:	bf00      	nop
    }
  }
}
 8007788:	3734      	adds	r7, #52	@ 0x34
 800778a:	46bd      	mov	sp, r7
 800778c:	bd90      	pop	{r4, r7, pc}

0800778e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b082      	sub	sp, #8
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
 8007796:	460b      	mov	r3, r1
 8007798:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80077a0:	2b01      	cmp	r3, #1
 80077a2:	d101      	bne.n	80077a8 <HAL_PCD_SetAddress+0x1a>
 80077a4:	2302      	movs	r3, #2
 80077a6:	e012      	b.n	80077ce <HAL_PCD_SetAddress+0x40>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	78fa      	ldrb	r2, [r7, #3]
 80077b4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	78fa      	ldrb	r2, [r7, #3]
 80077bc:	4611      	mov	r1, r2
 80077be:	4618      	mov	r0, r3
 80077c0:	f003 fffc 	bl	800b7bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	6078      	str	r0, [r7, #4]
 80077de:	4608      	mov	r0, r1
 80077e0:	4611      	mov	r1, r2
 80077e2:	461a      	mov	r2, r3
 80077e4:	4603      	mov	r3, r0
 80077e6:	70fb      	strb	r3, [r7, #3]
 80077e8:	460b      	mov	r3, r1
 80077ea:	803b      	strh	r3, [r7, #0]
 80077ec:	4613      	mov	r3, r2
 80077ee:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80077f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	da0f      	bge.n	800781c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80077fc:	78fb      	ldrb	r3, [r7, #3]
 80077fe:	f003 020f 	and.w	r2, r3, #15
 8007802:	4613      	mov	r3, r2
 8007804:	00db      	lsls	r3, r3, #3
 8007806:	4413      	add	r3, r2
 8007808:	009b      	lsls	r3, r3, #2
 800780a:	3310      	adds	r3, #16
 800780c:	687a      	ldr	r2, [r7, #4]
 800780e:	4413      	add	r3, r2
 8007810:	3304      	adds	r3, #4
 8007812:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2201      	movs	r2, #1
 8007818:	705a      	strb	r2, [r3, #1]
 800781a:	e00f      	b.n	800783c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800781c:	78fb      	ldrb	r3, [r7, #3]
 800781e:	f003 020f 	and.w	r2, r3, #15
 8007822:	4613      	mov	r3, r2
 8007824:	00db      	lsls	r3, r3, #3
 8007826:	4413      	add	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800782e:	687a      	ldr	r2, [r7, #4]
 8007830:	4413      	add	r3, r2
 8007832:	3304      	adds	r3, #4
 8007834:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	f003 030f 	and.w	r3, r3, #15
 8007842:	b2da      	uxtb	r2, r3
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8007848:	883b      	ldrh	r3, [r7, #0]
 800784a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	78ba      	ldrb	r2, [r7, #2]
 8007856:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d004      	beq.n	800786a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800786a:	78bb      	ldrb	r3, [r7, #2]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d102      	bne.n	8007876 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2200      	movs	r2, #0
 8007874:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800787c:	2b01      	cmp	r3, #1
 800787e:	d101      	bne.n	8007884 <HAL_PCD_EP_Open+0xae>
 8007880:	2302      	movs	r3, #2
 8007882:	e00e      	b.n	80078a2 <HAL_PCD_EP_Open+0xcc>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2201      	movs	r2, #1
 8007888:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	68f9      	ldr	r1, [r7, #12]
 8007892:	4618      	mov	r0, r3
 8007894:	f003 f97c 	bl	800ab90 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80078a0:	7afb      	ldrb	r3, [r7, #11]
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3710      	adds	r7, #16
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}

080078aa <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
 80078b2:	460b      	mov	r3, r1
 80078b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80078b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	da0f      	bge.n	80078de <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	f003 020f 	and.w	r2, r3, #15
 80078c4:	4613      	mov	r3, r2
 80078c6:	00db      	lsls	r3, r3, #3
 80078c8:	4413      	add	r3, r2
 80078ca:	009b      	lsls	r3, r3, #2
 80078cc:	3310      	adds	r3, #16
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	4413      	add	r3, r2
 80078d2:	3304      	adds	r3, #4
 80078d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	2201      	movs	r2, #1
 80078da:	705a      	strb	r2, [r3, #1]
 80078dc:	e00f      	b.n	80078fe <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80078de:	78fb      	ldrb	r3, [r7, #3]
 80078e0:	f003 020f 	and.w	r2, r3, #15
 80078e4:	4613      	mov	r3, r2
 80078e6:	00db      	lsls	r3, r3, #3
 80078e8:	4413      	add	r3, r2
 80078ea:	009b      	lsls	r3, r3, #2
 80078ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	4413      	add	r3, r2
 80078f4:	3304      	adds	r3, #4
 80078f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	f003 030f 	and.w	r3, r3, #15
 8007904:	b2da      	uxtb	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007910:	2b01      	cmp	r3, #1
 8007912:	d101      	bne.n	8007918 <HAL_PCD_EP_Close+0x6e>
 8007914:	2302      	movs	r3, #2
 8007916:	e00e      	b.n	8007936 <HAL_PCD_EP_Close+0x8c>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	68f9      	ldr	r1, [r7, #12]
 8007926:	4618      	mov	r0, r3
 8007928:	f003 f9ba 	bl	800aca0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8007934:	2300      	movs	r3, #0
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b086      	sub	sp, #24
 8007942:	af00      	add	r7, sp, #0
 8007944:	60f8      	str	r0, [r7, #12]
 8007946:	607a      	str	r2, [r7, #4]
 8007948:	603b      	str	r3, [r7, #0]
 800794a:	460b      	mov	r3, r1
 800794c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800794e:	7afb      	ldrb	r3, [r7, #11]
 8007950:	f003 020f 	and.w	r2, r3, #15
 8007954:	4613      	mov	r3, r2
 8007956:	00db      	lsls	r3, r3, #3
 8007958:	4413      	add	r3, r2
 800795a:	009b      	lsls	r3, r3, #2
 800795c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007960:	68fa      	ldr	r2, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	3304      	adds	r3, #4
 8007966:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	687a      	ldr	r2, [r7, #4]
 800796c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	683a      	ldr	r2, [r7, #0]
 8007972:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	2200      	movs	r2, #0
 8007978:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2200      	movs	r2, #0
 800797e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007980:	7afb      	ldrb	r3, [r7, #11]
 8007982:	f003 030f 	and.w	r3, r3, #15
 8007986:	b2da      	uxtb	r2, r3
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	799b      	ldrb	r3, [r3, #6]
 8007990:	2b01      	cmp	r3, #1
 8007992:	d102      	bne.n	800799a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007994:	687a      	ldr	r2, [r7, #4]
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	6818      	ldr	r0, [r3, #0]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	799b      	ldrb	r3, [r3, #6]
 80079a2:	461a      	mov	r2, r3
 80079a4:	6979      	ldr	r1, [r7, #20]
 80079a6:	f003 fa57 	bl	800ae58 <USB_EPStartXfer>

  return HAL_OK;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3718      	adds	r7, #24
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80079b4:	b480      	push	{r7}
 80079b6:	b083      	sub	sp, #12
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	460b      	mov	r3, r1
 80079be:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	f003 020f 	and.w	r2, r3, #15
 80079c6:	6879      	ldr	r1, [r7, #4]
 80079c8:	4613      	mov	r3, r2
 80079ca:	00db      	lsls	r3, r3, #3
 80079cc:	4413      	add	r3, r2
 80079ce:	009b      	lsls	r3, r3, #2
 80079d0:	440b      	add	r3, r1
 80079d2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80079d6:	681b      	ldr	r3, [r3, #0]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	370c      	adds	r7, #12
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b086      	sub	sp, #24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	607a      	str	r2, [r7, #4]
 80079ee:	603b      	str	r3, [r7, #0]
 80079f0:	460b      	mov	r3, r1
 80079f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079f4:	7afb      	ldrb	r3, [r7, #11]
 80079f6:	f003 020f 	and.w	r2, r3, #15
 80079fa:	4613      	mov	r3, r2
 80079fc:	00db      	lsls	r3, r3, #3
 80079fe:	4413      	add	r3, r2
 8007a00:	009b      	lsls	r3, r3, #2
 8007a02:	3310      	adds	r3, #16
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4413      	add	r3, r2
 8007a08:	3304      	adds	r3, #4
 8007a0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	687a      	ldr	r2, [r7, #4]
 8007a10:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	2201      	movs	r2, #1
 8007a22:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a24:	7afb      	ldrb	r3, [r7, #11]
 8007a26:	f003 030f 	and.w	r3, r3, #15
 8007a2a:	b2da      	uxtb	r2, r3
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	799b      	ldrb	r3, [r3, #6]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d102      	bne.n	8007a3e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	6818      	ldr	r0, [r3, #0]
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	799b      	ldrb	r3, [r3, #6]
 8007a46:	461a      	mov	r2, r3
 8007a48:	6979      	ldr	r1, [r7, #20]
 8007a4a:	f003 fa05 	bl	800ae58 <USB_EPStartXfer>

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	460b      	mov	r3, r1
 8007a62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007a64:	78fb      	ldrb	r3, [r7, #3]
 8007a66:	f003 030f 	and.w	r3, r3, #15
 8007a6a:	687a      	ldr	r2, [r7, #4]
 8007a6c:	7912      	ldrb	r2, [r2, #4]
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d901      	bls.n	8007a76 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e04f      	b.n	8007b16 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007a76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	da0f      	bge.n	8007a9e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007a7e:	78fb      	ldrb	r3, [r7, #3]
 8007a80:	f003 020f 	and.w	r2, r3, #15
 8007a84:	4613      	mov	r3, r2
 8007a86:	00db      	lsls	r3, r3, #3
 8007a88:	4413      	add	r3, r2
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	3310      	adds	r3, #16
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	4413      	add	r3, r2
 8007a92:	3304      	adds	r3, #4
 8007a94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	705a      	strb	r2, [r3, #1]
 8007a9c:	e00d      	b.n	8007aba <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	4613      	mov	r3, r2
 8007aa2:	00db      	lsls	r3, r3, #3
 8007aa4:	4413      	add	r3, r2
 8007aa6:	009b      	lsls	r3, r3, #2
 8007aa8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007aac:	687a      	ldr	r2, [r7, #4]
 8007aae:	4413      	add	r3, r2
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	2201      	movs	r2, #1
 8007abe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007ac0:	78fb      	ldrb	r3, [r7, #3]
 8007ac2:	f003 030f 	and.w	r3, r3, #15
 8007ac6:	b2da      	uxtb	r2, r3
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d101      	bne.n	8007ada <HAL_PCD_EP_SetStall+0x82>
 8007ad6:	2302      	movs	r3, #2
 8007ad8:	e01d      	b.n	8007b16 <HAL_PCD_EP_SetStall+0xbe>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	68f9      	ldr	r1, [r7, #12]
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f003 fd93 	bl	800b614 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	f003 030f 	and.w	r3, r3, #15
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d109      	bne.n	8007b0c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	7999      	ldrb	r1, [r3, #6]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007b06:	461a      	mov	r2, r3
 8007b08:	f003 ff84 	bl	800ba14 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3710      	adds	r7, #16
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}

08007b1e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007b1e:	b580      	push	{r7, lr}
 8007b20:	b084      	sub	sp, #16
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
 8007b26:	460b      	mov	r3, r1
 8007b28:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007b2a:	78fb      	ldrb	r3, [r7, #3]
 8007b2c:	f003 030f 	and.w	r3, r3, #15
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	7912      	ldrb	r2, [r2, #4]
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d901      	bls.n	8007b3c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e042      	b.n	8007bc2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007b3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	da0f      	bge.n	8007b64 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	f003 020f 	and.w	r2, r3, #15
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	4413      	add	r3, r2
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	3310      	adds	r3, #16
 8007b54:	687a      	ldr	r2, [r7, #4]
 8007b56:	4413      	add	r3, r2
 8007b58:	3304      	adds	r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	705a      	strb	r2, [r3, #1]
 8007b62:	e00f      	b.n	8007b84 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007b64:	78fb      	ldrb	r3, [r7, #3]
 8007b66:	f003 020f 	and.w	r2, r3, #15
 8007b6a:	4613      	mov	r3, r2
 8007b6c:	00db      	lsls	r3, r3, #3
 8007b6e:	4413      	add	r3, r2
 8007b70:	009b      	lsls	r3, r3, #2
 8007b72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	4413      	add	r3, r2
 8007b7a:	3304      	adds	r3, #4
 8007b7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	2200      	movs	r2, #0
 8007b82:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	2200      	movs	r2, #0
 8007b88:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007b8a:	78fb      	ldrb	r3, [r7, #3]
 8007b8c:	f003 030f 	and.w	r3, r3, #15
 8007b90:	b2da      	uxtb	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d101      	bne.n	8007ba4 <HAL_PCD_EP_ClrStall+0x86>
 8007ba0:	2302      	movs	r3, #2
 8007ba2:	e00e      	b.n	8007bc2 <HAL_PCD_EP_ClrStall+0xa4>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	68f9      	ldr	r1, [r7, #12]
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f003 fd9c 	bl	800b6f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007bc0:	2300      	movs	r3, #0
}
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	3710      	adds	r7, #16
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}

08007bca <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007bca:	b580      	push	{r7, lr}
 8007bcc:	b084      	sub	sp, #16
 8007bce:	af00      	add	r7, sp, #0
 8007bd0:	6078      	str	r0, [r7, #4]
 8007bd2:	460b      	mov	r3, r1
 8007bd4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007bd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	da0c      	bge.n	8007bf8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007bde:	78fb      	ldrb	r3, [r7, #3]
 8007be0:	f003 020f 	and.w	r2, r3, #15
 8007be4:	4613      	mov	r3, r2
 8007be6:	00db      	lsls	r3, r3, #3
 8007be8:	4413      	add	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	3310      	adds	r3, #16
 8007bee:	687a      	ldr	r2, [r7, #4]
 8007bf0:	4413      	add	r3, r2
 8007bf2:	3304      	adds	r3, #4
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	e00c      	b.n	8007c12 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007bf8:	78fb      	ldrb	r3, [r7, #3]
 8007bfa:	f003 020f 	and.w	r2, r3, #15
 8007bfe:	4613      	mov	r3, r2
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	4413      	add	r3, r2
 8007c04:	009b      	lsls	r3, r3, #2
 8007c06:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	3304      	adds	r3, #4
 8007c10:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68f9      	ldr	r1, [r7, #12]
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f003 fbbb 	bl	800b394 <USB_EPStopXfer>
 8007c1e:	4603      	mov	r3, r0
 8007c20:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007c22:	7afb      	ldrb	r3, [r7, #11]
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3710      	adds	r7, #16
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08a      	sub	sp, #40	@ 0x28
 8007c30:	af02      	add	r7, sp, #8
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007c40:	683a      	ldr	r2, [r7, #0]
 8007c42:	4613      	mov	r3, r2
 8007c44:	00db      	lsls	r3, r3, #3
 8007c46:	4413      	add	r3, r2
 8007c48:	009b      	lsls	r3, r3, #2
 8007c4a:	3310      	adds	r3, #16
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	4413      	add	r3, r2
 8007c50:	3304      	adds	r3, #4
 8007c52:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	695a      	ldr	r2, [r3, #20]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	691b      	ldr	r3, [r3, #16]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d901      	bls.n	8007c64 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e06b      	b.n	8007d3c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	1ad3      	subs	r3, r2, r3
 8007c6e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	689b      	ldr	r3, [r3, #8]
 8007c74:	69fa      	ldr	r2, [r7, #28]
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d902      	bls.n	8007c80 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007c80:	69fb      	ldr	r3, [r7, #28]
 8007c82:	3303      	adds	r3, #3
 8007c84:	089b      	lsrs	r3, r3, #2
 8007c86:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007c88:	e02a      	b.n	8007ce0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	691a      	ldr	r2, [r3, #16]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	69fa      	ldr	r2, [r7, #28]
 8007c9c:	429a      	cmp	r2, r3
 8007c9e:	d902      	bls.n	8007ca6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007ca6:	69fb      	ldr	r3, [r7, #28]
 8007ca8:	3303      	adds	r3, #3
 8007caa:	089b      	lsrs	r3, r3, #2
 8007cac:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	68d9      	ldr	r1, [r3, #12]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	b2da      	uxtb	r2, r3
 8007cb6:	69fb      	ldr	r3, [r7, #28]
 8007cb8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007cbe:	9300      	str	r3, [sp, #0]
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	6978      	ldr	r0, [r7, #20]
 8007cc4:	f003 fc10 	bl	800b4e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	68da      	ldr	r2, [r3, #12]
 8007ccc:	69fb      	ldr	r3, [r7, #28]
 8007cce:	441a      	add	r2, r3
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	695a      	ldr	r2, [r3, #20]
 8007cd8:	69fb      	ldr	r3, [r7, #28]
 8007cda:	441a      	add	r2, r3
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ce0:	683b      	ldr	r3, [r7, #0]
 8007ce2:	015a      	lsls	r2, r3, #5
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	4413      	add	r3, r2
 8007ce8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d809      	bhi.n	8007d0a <PCD_WriteEmptyTxFifo+0xde>
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	695a      	ldr	r2, [r3, #20]
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d203      	bcs.n	8007d0a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	691b      	ldr	r3, [r3, #16]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d1bf      	bne.n	8007c8a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	691a      	ldr	r2, [r3, #16]
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	429a      	cmp	r2, r3
 8007d14:	d811      	bhi.n	8007d3a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	f003 030f 	and.w	r3, r3, #15
 8007d1c:	2201      	movs	r2, #1
 8007d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d22:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007d24:	693b      	ldr	r3, [r7, #16]
 8007d26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	43db      	mvns	r3, r3
 8007d30:	6939      	ldr	r1, [r7, #16]
 8007d32:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d36:	4013      	ands	r3, r2
 8007d38:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3720      	adds	r7, #32
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d54:	69fb      	ldr	r3, [r7, #28]
 8007d56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007d58:	69fb      	ldr	r3, [r7, #28]
 8007d5a:	333c      	adds	r3, #60	@ 0x3c
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	799b      	ldrb	r3, [r3, #6]
 8007d76:	2b01      	cmp	r3, #1
 8007d78:	d17b      	bne.n	8007e72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007d7a:	693b      	ldr	r3, [r7, #16]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d015      	beq.n	8007db0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	4a61      	ldr	r2, [pc, #388]	@ (8007f0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	f240 80b9 	bls.w	8007f00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 80b3 	beq.w	8007f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	015a      	lsls	r2, r3, #5
 8007d9e:	69bb      	ldr	r3, [r7, #24]
 8007da0:	4413      	add	r3, r2
 8007da2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007da6:	461a      	mov	r2, r3
 8007da8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dac:	6093      	str	r3, [r2, #8]
 8007dae:	e0a7      	b.n	8007f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	f003 0320 	and.w	r3, r3, #32
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d009      	beq.n	8007dce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	015a      	lsls	r2, r3, #5
 8007dbe:	69bb      	ldr	r3, [r7, #24]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007dc6:	461a      	mov	r2, r3
 8007dc8:	2320      	movs	r3, #32
 8007dca:	6093      	str	r3, [r2, #8]
 8007dcc:	e098      	b.n	8007f00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f040 8093 	bne.w	8007f00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	4a4b      	ldr	r2, [pc, #300]	@ (8007f0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d90f      	bls.n	8007e02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007de2:	693b      	ldr	r3, [r7, #16]
 8007de4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d00a      	beq.n	8007e02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	015a      	lsls	r2, r3, #5
 8007df0:	69bb      	ldr	r3, [r7, #24]
 8007df2:	4413      	add	r3, r2
 8007df4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007df8:	461a      	mov	r2, r3
 8007dfa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dfe:	6093      	str	r3, [r2, #8]
 8007e00:	e07e      	b.n	8007f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007e02:	683a      	ldr	r2, [r7, #0]
 8007e04:	4613      	mov	r3, r2
 8007e06:	00db      	lsls	r3, r3, #3
 8007e08:	4413      	add	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007e10:	687a      	ldr	r2, [r7, #4]
 8007e12:	4413      	add	r3, r2
 8007e14:	3304      	adds	r3, #4
 8007e16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	6a1a      	ldr	r2, [r3, #32]
 8007e1c:	683b      	ldr	r3, [r7, #0]
 8007e1e:	0159      	lsls	r1, r3, #5
 8007e20:	69bb      	ldr	r3, [r7, #24]
 8007e22:	440b      	add	r3, r1
 8007e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d114      	bne.n	8007e64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6818      	ldr	r0, [r3, #0]
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	2101      	movs	r1, #1
 8007e50:	f003 fde0 	bl	800ba14 <USB_EP0_OutStart>
 8007e54:	e006      	b.n	8007e64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	695b      	ldr	r3, [r3, #20]
 8007e5e:	441a      	add	r2, r3
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	b2db      	uxtb	r3, r3
 8007e68:	4619      	mov	r1, r3
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f006 f930 	bl	800e0d0 <HAL_PCD_DataOutStageCallback>
 8007e70:	e046      	b.n	8007f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007e72:	697b      	ldr	r3, [r7, #20]
 8007e74:	4a26      	ldr	r2, [pc, #152]	@ (8007f10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d124      	bne.n	8007ec4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d00a      	beq.n	8007e9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	015a      	lsls	r2, r3, #5
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	4413      	add	r3, r2
 8007e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e90:	461a      	mov	r2, r3
 8007e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e96:	6093      	str	r3, [r2, #8]
 8007e98:	e032      	b.n	8007f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e9a:	693b      	ldr	r3, [r7, #16]
 8007e9c:	f003 0320 	and.w	r3, r3, #32
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d008      	beq.n	8007eb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	015a      	lsls	r2, r3, #5
 8007ea8:	69bb      	ldr	r3, [r7, #24]
 8007eaa:	4413      	add	r3, r2
 8007eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	2320      	movs	r3, #32
 8007eb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	b2db      	uxtb	r3, r3
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f006 f907 	bl	800e0d0 <HAL_PCD_DataOutStageCallback>
 8007ec2:	e01d      	b.n	8007f00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d114      	bne.n	8007ef4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	683a      	ldr	r2, [r7, #0]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	00db      	lsls	r3, r3, #3
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	440b      	add	r3, r1
 8007ed8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d108      	bne.n	8007ef4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6818      	ldr	r0, [r3, #0]
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007eec:	461a      	mov	r2, r3
 8007eee:	2100      	movs	r1, #0
 8007ef0:	f003 fd90 	bl	800ba14 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	b2db      	uxtb	r3, r3
 8007ef8:	4619      	mov	r1, r3
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f006 f8e8 	bl	800e0d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007f00:	2300      	movs	r3, #0
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3720      	adds	r7, #32
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	4f54300a 	.word	0x4f54300a
 8007f10:	4f54310a 	.word	0x4f54310a

08007f14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b086      	sub	sp, #24
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	333c      	adds	r3, #60	@ 0x3c
 8007f2c:	3304      	adds	r3, #4
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	693b      	ldr	r3, [r7, #16]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	4a15      	ldr	r2, [pc, #84]	@ (8007f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d90e      	bls.n	8007f68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d009      	beq.n	8007f68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	015a      	lsls	r2, r3, #5
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f60:	461a      	mov	r2, r3
 8007f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007f66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f006 f89f 	bl	800e0ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	4a0a      	ldr	r2, [pc, #40]	@ (8007f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d90c      	bls.n	8007f90 <PCD_EP_OutSetupPacket_int+0x7c>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	799b      	ldrb	r3, [r3, #6]
 8007f7a:	2b01      	cmp	r3, #1
 8007f7c:	d108      	bne.n	8007f90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6818      	ldr	r0, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f88:	461a      	mov	r2, r3
 8007f8a:	2101      	movs	r1, #1
 8007f8c:	f003 fd42 	bl	800ba14 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3718      	adds	r7, #24
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	4f54300a 	.word	0x4f54300a

08007fa0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b085      	sub	sp, #20
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	460b      	mov	r3, r1
 8007faa:	70fb      	strb	r3, [r7, #3]
 8007fac:	4613      	mov	r3, r2
 8007fae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007fb8:	78fb      	ldrb	r3, [r7, #3]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d107      	bne.n	8007fce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007fbe:	883b      	ldrh	r3, [r7, #0]
 8007fc0:	0419      	lsls	r1, r3, #16
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	430a      	orrs	r2, r1
 8007fca:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fcc:	e028      	b.n	8008020 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fd4:	0c1b      	lsrs	r3, r3, #16
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	4413      	add	r3, r2
 8007fda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007fdc:	2300      	movs	r3, #0
 8007fde:	73fb      	strb	r3, [r7, #15]
 8007fe0:	e00d      	b.n	8007ffe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	7bfb      	ldrb	r3, [r7, #15]
 8007fe8:	3340      	adds	r3, #64	@ 0x40
 8007fea:	009b      	lsls	r3, r3, #2
 8007fec:	4413      	add	r3, r2
 8007fee:	685b      	ldr	r3, [r3, #4]
 8007ff0:	0c1b      	lsrs	r3, r3, #16
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	4413      	add	r3, r2
 8007ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
 8007ffa:	3301      	adds	r3, #1
 8007ffc:	73fb      	strb	r3, [r7, #15]
 8007ffe:	7bfa      	ldrb	r2, [r7, #15]
 8008000:	78fb      	ldrb	r3, [r7, #3]
 8008002:	3b01      	subs	r3, #1
 8008004:	429a      	cmp	r2, r3
 8008006:	d3ec      	bcc.n	8007fe2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008008:	883b      	ldrh	r3, [r7, #0]
 800800a:	0418      	lsls	r0, r3, #16
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6819      	ldr	r1, [r3, #0]
 8008010:	78fb      	ldrb	r3, [r7, #3]
 8008012:	3b01      	subs	r3, #1
 8008014:	68ba      	ldr	r2, [r7, #8]
 8008016:	4302      	orrs	r2, r0
 8008018:	3340      	adds	r3, #64	@ 0x40
 800801a:	009b      	lsls	r3, r3, #2
 800801c:	440b      	add	r3, r1
 800801e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr

0800802e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800802e:	b480      	push	{r7}
 8008030:	b083      	sub	sp, #12
 8008032:	af00      	add	r7, sp, #0
 8008034:	6078      	str	r0, [r7, #4]
 8008036:	460b      	mov	r3, r1
 8008038:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	887a      	ldrh	r2, [r7, #2]
 8008040:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8008042:	2300      	movs	r3, #0
}
 8008044:	4618      	mov	r0, r3
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr

08008050 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	460b      	mov	r3, r1
 800805a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800805c:	bf00      	nop
 800805e:	370c      	adds	r7, #12
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr

08008068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b086      	sub	sp, #24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d101      	bne.n	800807a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008076:	2301      	movs	r3, #1
 8008078:	e267      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f003 0301 	and.w	r3, r3, #1
 8008082:	2b00      	cmp	r3, #0
 8008084:	d075      	beq.n	8008172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8008086:	4b88      	ldr	r3, [pc, #544]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 8008088:	689b      	ldr	r3, [r3, #8]
 800808a:	f003 030c 	and.w	r3, r3, #12
 800808e:	2b04      	cmp	r3, #4
 8008090:	d00c      	beq.n	80080ac <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008092:	4b85      	ldr	r3, [pc, #532]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800809a:	2b08      	cmp	r3, #8
 800809c:	d112      	bne.n	80080c4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800809e:	4b82      	ldr	r3, [pc, #520]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80080a0:	685b      	ldr	r3, [r3, #4]
 80080a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80080aa:	d10b      	bne.n	80080c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80080ac:	4b7e      	ldr	r3, [pc, #504]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d05b      	beq.n	8008170 <HAL_RCC_OscConfig+0x108>
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	685b      	ldr	r3, [r3, #4]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d157      	bne.n	8008170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e242      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	685b      	ldr	r3, [r3, #4]
 80080c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080cc:	d106      	bne.n	80080dc <HAL_RCC_OscConfig+0x74>
 80080ce:	4b76      	ldr	r3, [pc, #472]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4a75      	ldr	r2, [pc, #468]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80080d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080d8:	6013      	str	r3, [r2, #0]
 80080da:	e01d      	b.n	8008118 <HAL_RCC_OscConfig+0xb0>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80080e4:	d10c      	bne.n	8008100 <HAL_RCC_OscConfig+0x98>
 80080e6:	4b70      	ldr	r3, [pc, #448]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a6f      	ldr	r2, [pc, #444]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80080ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80080f0:	6013      	str	r3, [r2, #0]
 80080f2:	4b6d      	ldr	r3, [pc, #436]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a6c      	ldr	r2, [pc, #432]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80080f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	e00b      	b.n	8008118 <HAL_RCC_OscConfig+0xb0>
 8008100:	4b69      	ldr	r3, [pc, #420]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a68      	ldr	r2, [pc, #416]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 8008106:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800810a:	6013      	str	r3, [r2, #0]
 800810c:	4b66      	ldr	r3, [pc, #408]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a65      	ldr	r2, [pc, #404]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 8008112:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d013      	beq.n	8008148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008120:	f7fa faf2 	bl	8002708 <HAL_GetTick>
 8008124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008126:	e008      	b.n	800813a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008128:	f7fa faee 	bl	8002708 <HAL_GetTick>
 800812c:	4602      	mov	r2, r0
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	2b64      	cmp	r3, #100	@ 0x64
 8008134:	d901      	bls.n	800813a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e207      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800813a:	4b5b      	ldr	r3, [pc, #364]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0f0      	beq.n	8008128 <HAL_RCC_OscConfig+0xc0>
 8008146:	e014      	b.n	8008172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008148:	f7fa fade 	bl	8002708 <HAL_GetTick>
 800814c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800814e:	e008      	b.n	8008162 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008150:	f7fa fada 	bl	8002708 <HAL_GetTick>
 8008154:	4602      	mov	r2, r0
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	2b64      	cmp	r3, #100	@ 0x64
 800815c:	d901      	bls.n	8008162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800815e:	2303      	movs	r3, #3
 8008160:	e1f3      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008162:	4b51      	ldr	r3, [pc, #324]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800816a:	2b00      	cmp	r3, #0
 800816c:	d1f0      	bne.n	8008150 <HAL_RCC_OscConfig+0xe8>
 800816e:	e000      	b.n	8008172 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f003 0302 	and.w	r3, r3, #2
 800817a:	2b00      	cmp	r3, #0
 800817c:	d063      	beq.n	8008246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800817e:	4b4a      	ldr	r3, [pc, #296]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	f003 030c 	and.w	r3, r3, #12
 8008186:	2b00      	cmp	r3, #0
 8008188:	d00b      	beq.n	80081a2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800818a:	4b47      	ldr	r3, [pc, #284]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 800818c:	689b      	ldr	r3, [r3, #8]
 800818e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008192:	2b08      	cmp	r3, #8
 8008194:	d11c      	bne.n	80081d0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008196:	4b44      	ldr	r3, [pc, #272]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d116      	bne.n	80081d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081a2:	4b41      	ldr	r3, [pc, #260]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f003 0302 	and.w	r3, r3, #2
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d005      	beq.n	80081ba <HAL_RCC_OscConfig+0x152>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d001      	beq.n	80081ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	e1c7      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80081ba:	4b3b      	ldr	r3, [pc, #236]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	691b      	ldr	r3, [r3, #16]
 80081c6:	00db      	lsls	r3, r3, #3
 80081c8:	4937      	ldr	r1, [pc, #220]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80081ca:	4313      	orrs	r3, r2
 80081cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80081ce:	e03a      	b.n	8008246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	68db      	ldr	r3, [r3, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d020      	beq.n	800821a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80081d8:	4b34      	ldr	r3, [pc, #208]	@ (80082ac <HAL_RCC_OscConfig+0x244>)
 80081da:	2201      	movs	r2, #1
 80081dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081de:	f7fa fa93 	bl	8002708 <HAL_GetTick>
 80081e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081e4:	e008      	b.n	80081f8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80081e6:	f7fa fa8f 	bl	8002708 <HAL_GetTick>
 80081ea:	4602      	mov	r2, r0
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	1ad3      	subs	r3, r2, r3
 80081f0:	2b02      	cmp	r3, #2
 80081f2:	d901      	bls.n	80081f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80081f4:	2303      	movs	r3, #3
 80081f6:	e1a8      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80081f8:	4b2b      	ldr	r3, [pc, #172]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d0f0      	beq.n	80081e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008204:	4b28      	ldr	r3, [pc, #160]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	691b      	ldr	r3, [r3, #16]
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	4925      	ldr	r1, [pc, #148]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 8008214:	4313      	orrs	r3, r2
 8008216:	600b      	str	r3, [r1, #0]
 8008218:	e015      	b.n	8008246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800821a:	4b24      	ldr	r3, [pc, #144]	@ (80082ac <HAL_RCC_OscConfig+0x244>)
 800821c:	2200      	movs	r2, #0
 800821e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008220:	f7fa fa72 	bl	8002708 <HAL_GetTick>
 8008224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008226:	e008      	b.n	800823a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008228:	f7fa fa6e 	bl	8002708 <HAL_GetTick>
 800822c:	4602      	mov	r2, r0
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	1ad3      	subs	r3, r2, r3
 8008232:	2b02      	cmp	r3, #2
 8008234:	d901      	bls.n	800823a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008236:	2303      	movs	r3, #3
 8008238:	e187      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800823a:	4b1b      	ldr	r3, [pc, #108]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0302 	and.w	r3, r3, #2
 8008242:	2b00      	cmp	r3, #0
 8008244:	d1f0      	bne.n	8008228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f003 0308 	and.w	r3, r3, #8
 800824e:	2b00      	cmp	r3, #0
 8008250:	d036      	beq.n	80082c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	695b      	ldr	r3, [r3, #20]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d016      	beq.n	8008288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800825a:	4b15      	ldr	r3, [pc, #84]	@ (80082b0 <HAL_RCC_OscConfig+0x248>)
 800825c:	2201      	movs	r2, #1
 800825e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008260:	f7fa fa52 	bl	8002708 <HAL_GetTick>
 8008264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008266:	e008      	b.n	800827a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008268:	f7fa fa4e 	bl	8002708 <HAL_GetTick>
 800826c:	4602      	mov	r2, r0
 800826e:	693b      	ldr	r3, [r7, #16]
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	2b02      	cmp	r3, #2
 8008274:	d901      	bls.n	800827a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008276:	2303      	movs	r3, #3
 8008278:	e167      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800827a:	4b0b      	ldr	r3, [pc, #44]	@ (80082a8 <HAL_RCC_OscConfig+0x240>)
 800827c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800827e:	f003 0302 	and.w	r3, r3, #2
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f0      	beq.n	8008268 <HAL_RCC_OscConfig+0x200>
 8008286:	e01b      	b.n	80082c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008288:	4b09      	ldr	r3, [pc, #36]	@ (80082b0 <HAL_RCC_OscConfig+0x248>)
 800828a:	2200      	movs	r2, #0
 800828c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800828e:	f7fa fa3b 	bl	8002708 <HAL_GetTick>
 8008292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008294:	e00e      	b.n	80082b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008296:	f7fa fa37 	bl	8002708 <HAL_GetTick>
 800829a:	4602      	mov	r2, r0
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	1ad3      	subs	r3, r2, r3
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d907      	bls.n	80082b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80082a4:	2303      	movs	r3, #3
 80082a6:	e150      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
 80082a8:	40023800 	.word	0x40023800
 80082ac:	42470000 	.word	0x42470000
 80082b0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80082b4:	4b88      	ldr	r3, [pc, #544]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 80082b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80082b8:	f003 0302 	and.w	r3, r3, #2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d1ea      	bne.n	8008296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	f003 0304 	and.w	r3, r3, #4
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 8097 	beq.w	80083fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80082ce:	2300      	movs	r3, #0
 80082d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80082d2:	4b81      	ldr	r3, [pc, #516]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 80082d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d10f      	bne.n	80082fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80082de:	2300      	movs	r3, #0
 80082e0:	60bb      	str	r3, [r7, #8]
 80082e2:	4b7d      	ldr	r3, [pc, #500]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 80082e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082e6:	4a7c      	ldr	r2, [pc, #496]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 80082e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80082ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80082ee:	4b7a      	ldr	r3, [pc, #488]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 80082f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80082f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80082f6:	60bb      	str	r3, [r7, #8]
 80082f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80082fa:	2301      	movs	r3, #1
 80082fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80082fe:	4b77      	ldr	r3, [pc, #476]	@ (80084dc <HAL_RCC_OscConfig+0x474>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008306:	2b00      	cmp	r3, #0
 8008308:	d118      	bne.n	800833c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800830a:	4b74      	ldr	r3, [pc, #464]	@ (80084dc <HAL_RCC_OscConfig+0x474>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a73      	ldr	r2, [pc, #460]	@ (80084dc <HAL_RCC_OscConfig+0x474>)
 8008310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008316:	f7fa f9f7 	bl	8002708 <HAL_GetTick>
 800831a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800831c:	e008      	b.n	8008330 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800831e:	f7fa f9f3 	bl	8002708 <HAL_GetTick>
 8008322:	4602      	mov	r2, r0
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	1ad3      	subs	r3, r2, r3
 8008328:	2b02      	cmp	r3, #2
 800832a:	d901      	bls.n	8008330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800832c:	2303      	movs	r3, #3
 800832e:	e10c      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008330:	4b6a      	ldr	r3, [pc, #424]	@ (80084dc <HAL_RCC_OscConfig+0x474>)
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008338:	2b00      	cmp	r3, #0
 800833a:	d0f0      	beq.n	800831e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d106      	bne.n	8008352 <HAL_RCC_OscConfig+0x2ea>
 8008344:	4b64      	ldr	r3, [pc, #400]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 8008346:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008348:	4a63      	ldr	r2, [pc, #396]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 800834a:	f043 0301 	orr.w	r3, r3, #1
 800834e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008350:	e01c      	b.n	800838c <HAL_RCC_OscConfig+0x324>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	689b      	ldr	r3, [r3, #8]
 8008356:	2b05      	cmp	r3, #5
 8008358:	d10c      	bne.n	8008374 <HAL_RCC_OscConfig+0x30c>
 800835a:	4b5f      	ldr	r3, [pc, #380]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 800835c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800835e:	4a5e      	ldr	r2, [pc, #376]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 8008360:	f043 0304 	orr.w	r3, r3, #4
 8008364:	6713      	str	r3, [r2, #112]	@ 0x70
 8008366:	4b5c      	ldr	r3, [pc, #368]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 8008368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800836a:	4a5b      	ldr	r2, [pc, #364]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 800836c:	f043 0301 	orr.w	r3, r3, #1
 8008370:	6713      	str	r3, [r2, #112]	@ 0x70
 8008372:	e00b      	b.n	800838c <HAL_RCC_OscConfig+0x324>
 8008374:	4b58      	ldr	r3, [pc, #352]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 8008376:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008378:	4a57      	ldr	r2, [pc, #348]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 800837a:	f023 0301 	bic.w	r3, r3, #1
 800837e:	6713      	str	r3, [r2, #112]	@ 0x70
 8008380:	4b55      	ldr	r3, [pc, #340]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 8008382:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008384:	4a54      	ldr	r2, [pc, #336]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 8008386:	f023 0304 	bic.w	r3, r3, #4
 800838a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	689b      	ldr	r3, [r3, #8]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d015      	beq.n	80083c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008394:	f7fa f9b8 	bl	8002708 <HAL_GetTick>
 8008398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800839a:	e00a      	b.n	80083b2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800839c:	f7fa f9b4 	bl	8002708 <HAL_GetTick>
 80083a0:	4602      	mov	r2, r0
 80083a2:	693b      	ldr	r3, [r7, #16]
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083aa:	4293      	cmp	r3, r2
 80083ac:	d901      	bls.n	80083b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80083ae:	2303      	movs	r3, #3
 80083b0:	e0cb      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80083b2:	4b49      	ldr	r3, [pc, #292]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 80083b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083b6:	f003 0302 	and.w	r3, r3, #2
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d0ee      	beq.n	800839c <HAL_RCC_OscConfig+0x334>
 80083be:	e014      	b.n	80083ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80083c0:	f7fa f9a2 	bl	8002708 <HAL_GetTick>
 80083c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083c6:	e00a      	b.n	80083de <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083c8:	f7fa f99e 	bl	8002708 <HAL_GetTick>
 80083cc:	4602      	mov	r2, r0
 80083ce:	693b      	ldr	r3, [r7, #16]
 80083d0:	1ad3      	subs	r3, r2, r3
 80083d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d901      	bls.n	80083de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80083da:	2303      	movs	r3, #3
 80083dc:	e0b5      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80083de:	4b3e      	ldr	r3, [pc, #248]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 80083e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80083e2:	f003 0302 	and.w	r3, r3, #2
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d1ee      	bne.n	80083c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80083ea:	7dfb      	ldrb	r3, [r7, #23]
 80083ec:	2b01      	cmp	r3, #1
 80083ee:	d105      	bne.n	80083fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083f0:	4b39      	ldr	r3, [pc, #228]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 80083f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083f4:	4a38      	ldr	r2, [pc, #224]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 80083f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80083fa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	699b      	ldr	r3, [r3, #24]
 8008400:	2b00      	cmp	r3, #0
 8008402:	f000 80a1 	beq.w	8008548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008406:	4b34      	ldr	r3, [pc, #208]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f003 030c 	and.w	r3, r3, #12
 800840e:	2b08      	cmp	r3, #8
 8008410:	d05c      	beq.n	80084cc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d141      	bne.n	800849e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800841a:	4b31      	ldr	r3, [pc, #196]	@ (80084e0 <HAL_RCC_OscConfig+0x478>)
 800841c:	2200      	movs	r2, #0
 800841e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008420:	f7fa f972 	bl	8002708 <HAL_GetTick>
 8008424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008426:	e008      	b.n	800843a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008428:	f7fa f96e 	bl	8002708 <HAL_GetTick>
 800842c:	4602      	mov	r2, r0
 800842e:	693b      	ldr	r3, [r7, #16]
 8008430:	1ad3      	subs	r3, r2, r3
 8008432:	2b02      	cmp	r3, #2
 8008434:	d901      	bls.n	800843a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008436:	2303      	movs	r3, #3
 8008438:	e087      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800843a:	4b27      	ldr	r3, [pc, #156]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008442:	2b00      	cmp	r3, #0
 8008444:	d1f0      	bne.n	8008428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	69da      	ldr	r2, [r3, #28]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	431a      	orrs	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008454:	019b      	lsls	r3, r3, #6
 8008456:	431a      	orrs	r2, r3
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800845c:	085b      	lsrs	r3, r3, #1
 800845e:	3b01      	subs	r3, #1
 8008460:	041b      	lsls	r3, r3, #16
 8008462:	431a      	orrs	r2, r3
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008468:	061b      	lsls	r3, r3, #24
 800846a:	491b      	ldr	r1, [pc, #108]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 800846c:	4313      	orrs	r3, r2
 800846e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008470:	4b1b      	ldr	r3, [pc, #108]	@ (80084e0 <HAL_RCC_OscConfig+0x478>)
 8008472:	2201      	movs	r2, #1
 8008474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008476:	f7fa f947 	bl	8002708 <HAL_GetTick>
 800847a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800847c:	e008      	b.n	8008490 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800847e:	f7fa f943 	bl	8002708 <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	693b      	ldr	r3, [r7, #16]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	2b02      	cmp	r3, #2
 800848a:	d901      	bls.n	8008490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e05c      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008490:	4b11      	ldr	r3, [pc, #68]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d0f0      	beq.n	800847e <HAL_RCC_OscConfig+0x416>
 800849c:	e054      	b.n	8008548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800849e:	4b10      	ldr	r3, [pc, #64]	@ (80084e0 <HAL_RCC_OscConfig+0x478>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80084a4:	f7fa f930 	bl	8002708 <HAL_GetTick>
 80084a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084aa:	e008      	b.n	80084be <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80084ac:	f7fa f92c 	bl	8002708 <HAL_GetTick>
 80084b0:	4602      	mov	r2, r0
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	1ad3      	subs	r3, r2, r3
 80084b6:	2b02      	cmp	r3, #2
 80084b8:	d901      	bls.n	80084be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e045      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80084be:	4b06      	ldr	r3, [pc, #24]	@ (80084d8 <HAL_RCC_OscConfig+0x470>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d1f0      	bne.n	80084ac <HAL_RCC_OscConfig+0x444>
 80084ca:	e03d      	b.n	8008548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	699b      	ldr	r3, [r3, #24]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d107      	bne.n	80084e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80084d4:	2301      	movs	r3, #1
 80084d6:	e038      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
 80084d8:	40023800 	.word	0x40023800
 80084dc:	40007000 	.word	0x40007000
 80084e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80084e4:	4b1b      	ldr	r3, [pc, #108]	@ (8008554 <HAL_RCC_OscConfig+0x4ec>)
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	699b      	ldr	r3, [r3, #24]
 80084ee:	2b01      	cmp	r3, #1
 80084f0:	d028      	beq.n	8008544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d121      	bne.n	8008544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800850a:	429a      	cmp	r2, r3
 800850c:	d11a      	bne.n	8008544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800850e:	68fa      	ldr	r2, [r7, #12]
 8008510:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008514:	4013      	ands	r3, r2
 8008516:	687a      	ldr	r2, [r7, #4]
 8008518:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800851a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800851c:	4293      	cmp	r3, r2
 800851e:	d111      	bne.n	8008544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852a:	085b      	lsrs	r3, r3, #1
 800852c:	3b01      	subs	r3, #1
 800852e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008530:	429a      	cmp	r2, r3
 8008532:	d107      	bne.n	8008544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800853e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008540:	429a      	cmp	r2, r3
 8008542:	d001      	beq.n	8008548 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008544:	2301      	movs	r3, #1
 8008546:	e000      	b.n	800854a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008548:	2300      	movs	r3, #0
}
 800854a:	4618      	mov	r0, r3
 800854c:	3718      	adds	r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop
 8008554:	40023800 	.word	0x40023800

08008558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	e0cc      	b.n	8008706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800856c:	4b68      	ldr	r3, [pc, #416]	@ (8008710 <HAL_RCC_ClockConfig+0x1b8>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0307 	and.w	r3, r3, #7
 8008574:	683a      	ldr	r2, [r7, #0]
 8008576:	429a      	cmp	r2, r3
 8008578:	d90c      	bls.n	8008594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800857a:	4b65      	ldr	r3, [pc, #404]	@ (8008710 <HAL_RCC_ClockConfig+0x1b8>)
 800857c:	683a      	ldr	r2, [r7, #0]
 800857e:	b2d2      	uxtb	r2, r2
 8008580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008582:	4b63      	ldr	r3, [pc, #396]	@ (8008710 <HAL_RCC_ClockConfig+0x1b8>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	683a      	ldr	r2, [r7, #0]
 800858c:	429a      	cmp	r2, r3
 800858e:	d001      	beq.n	8008594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e0b8      	b.n	8008706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f003 0302 	and.w	r3, r3, #2
 800859c:	2b00      	cmp	r3, #0
 800859e:	d020      	beq.n	80085e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	f003 0304 	and.w	r3, r3, #4
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d005      	beq.n	80085b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80085ac:	4b59      	ldr	r3, [pc, #356]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80085ae:	689b      	ldr	r3, [r3, #8]
 80085b0:	4a58      	ldr	r2, [pc, #352]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80085b2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80085b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f003 0308 	and.w	r3, r3, #8
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d005      	beq.n	80085d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80085c4:	4b53      	ldr	r3, [pc, #332]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80085c6:	689b      	ldr	r3, [r3, #8]
 80085c8:	4a52      	ldr	r2, [pc, #328]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80085ca:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80085ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80085d0:	4b50      	ldr	r3, [pc, #320]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	494d      	ldr	r1, [pc, #308]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80085de:	4313      	orrs	r3, r2
 80085e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f003 0301 	and.w	r3, r3, #1
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d044      	beq.n	8008678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	685b      	ldr	r3, [r3, #4]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d107      	bne.n	8008606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085f6:	4b47      	ldr	r3, [pc, #284]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d119      	bne.n	8008636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008602:	2301      	movs	r3, #1
 8008604:	e07f      	b.n	8008706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	2b02      	cmp	r3, #2
 800860c:	d003      	beq.n	8008616 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008612:	2b03      	cmp	r3, #3
 8008614:	d107      	bne.n	8008626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008616:	4b3f      	ldr	r3, [pc, #252]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d109      	bne.n	8008636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008622:	2301      	movs	r3, #1
 8008624:	e06f      	b.n	8008706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008626:	4b3b      	ldr	r3, [pc, #236]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f003 0302 	and.w	r3, r3, #2
 800862e:	2b00      	cmp	r3, #0
 8008630:	d101      	bne.n	8008636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008632:	2301      	movs	r3, #1
 8008634:	e067      	b.n	8008706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008636:	4b37      	ldr	r3, [pc, #220]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 8008638:	689b      	ldr	r3, [r3, #8]
 800863a:	f023 0203 	bic.w	r2, r3, #3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	4934      	ldr	r1, [pc, #208]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 8008644:	4313      	orrs	r3, r2
 8008646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008648:	f7fa f85e 	bl	8002708 <HAL_GetTick>
 800864c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800864e:	e00a      	b.n	8008666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008650:	f7fa f85a 	bl	8002708 <HAL_GetTick>
 8008654:	4602      	mov	r2, r0
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	1ad3      	subs	r3, r2, r3
 800865a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800865e:	4293      	cmp	r3, r2
 8008660:	d901      	bls.n	8008666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008662:	2303      	movs	r3, #3
 8008664:	e04f      	b.n	8008706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008666:	4b2b      	ldr	r3, [pc, #172]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f003 020c 	and.w	r2, r3, #12
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	009b      	lsls	r3, r3, #2
 8008674:	429a      	cmp	r2, r3
 8008676:	d1eb      	bne.n	8008650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008678:	4b25      	ldr	r3, [pc, #148]	@ (8008710 <HAL_RCC_ClockConfig+0x1b8>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	683a      	ldr	r2, [r7, #0]
 8008682:	429a      	cmp	r2, r3
 8008684:	d20c      	bcs.n	80086a0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008686:	4b22      	ldr	r3, [pc, #136]	@ (8008710 <HAL_RCC_ClockConfig+0x1b8>)
 8008688:	683a      	ldr	r2, [r7, #0]
 800868a:	b2d2      	uxtb	r2, r2
 800868c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800868e:	4b20      	ldr	r3, [pc, #128]	@ (8008710 <HAL_RCC_ClockConfig+0x1b8>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0307 	and.w	r3, r3, #7
 8008696:	683a      	ldr	r2, [r7, #0]
 8008698:	429a      	cmp	r2, r3
 800869a:	d001      	beq.n	80086a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800869c:	2301      	movs	r3, #1
 800869e:	e032      	b.n	8008706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80086ac:	4b19      	ldr	r3, [pc, #100]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	68db      	ldr	r3, [r3, #12]
 80086b8:	4916      	ldr	r1, [pc, #88]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80086ba:	4313      	orrs	r3, r2
 80086bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f003 0308 	and.w	r3, r3, #8
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d009      	beq.n	80086de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80086ca:	4b12      	ldr	r3, [pc, #72]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	00db      	lsls	r3, r3, #3
 80086d8:	490e      	ldr	r1, [pc, #56]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80086da:	4313      	orrs	r3, r2
 80086dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80086de:	f000 f821 	bl	8008724 <HAL_RCC_GetSysClockFreq>
 80086e2:	4602      	mov	r2, r0
 80086e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008714 <HAL_RCC_ClockConfig+0x1bc>)
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	091b      	lsrs	r3, r3, #4
 80086ea:	f003 030f 	and.w	r3, r3, #15
 80086ee:	490a      	ldr	r1, [pc, #40]	@ (8008718 <HAL_RCC_ClockConfig+0x1c0>)
 80086f0:	5ccb      	ldrb	r3, [r1, r3]
 80086f2:	fa22 f303 	lsr.w	r3, r2, r3
 80086f6:	4a09      	ldr	r2, [pc, #36]	@ (800871c <HAL_RCC_ClockConfig+0x1c4>)
 80086f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80086fa:	4b09      	ldr	r3, [pc, #36]	@ (8008720 <HAL_RCC_ClockConfig+0x1c8>)
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4618      	mov	r0, r3
 8008700:	f7f9 ffbe 	bl	8002680 <HAL_InitTick>

  return HAL_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3710      	adds	r7, #16
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	40023c00 	.word	0x40023c00
 8008714:	40023800 	.word	0x40023800
 8008718:	0800e6fc 	.word	0x0800e6fc
 800871c:	2000002c 	.word	0x2000002c
 8008720:	20000030 	.word	0x20000030

08008724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008728:	b090      	sub	sp, #64	@ 0x40
 800872a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800872c:	2300      	movs	r3, #0
 800872e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8008730:	2300      	movs	r3, #0
 8008732:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8008738:	2300      	movs	r3, #0
 800873a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800873c:	4b59      	ldr	r3, [pc, #356]	@ (80088a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800873e:	689b      	ldr	r3, [r3, #8]
 8008740:	f003 030c 	and.w	r3, r3, #12
 8008744:	2b08      	cmp	r3, #8
 8008746:	d00d      	beq.n	8008764 <HAL_RCC_GetSysClockFreq+0x40>
 8008748:	2b08      	cmp	r3, #8
 800874a:	f200 80a1 	bhi.w	8008890 <HAL_RCC_GetSysClockFreq+0x16c>
 800874e:	2b00      	cmp	r3, #0
 8008750:	d002      	beq.n	8008758 <HAL_RCC_GetSysClockFreq+0x34>
 8008752:	2b04      	cmp	r3, #4
 8008754:	d003      	beq.n	800875e <HAL_RCC_GetSysClockFreq+0x3a>
 8008756:	e09b      	b.n	8008890 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008758:	4b53      	ldr	r3, [pc, #332]	@ (80088a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800875a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800875c:	e09b      	b.n	8008896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800875e:	4b53      	ldr	r3, [pc, #332]	@ (80088ac <HAL_RCC_GetSysClockFreq+0x188>)
 8008760:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008762:	e098      	b.n	8008896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008764:	4b4f      	ldr	r3, [pc, #316]	@ (80088a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800876c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800876e:	4b4d      	ldr	r3, [pc, #308]	@ (80088a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008770:	685b      	ldr	r3, [r3, #4]
 8008772:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008776:	2b00      	cmp	r3, #0
 8008778:	d028      	beq.n	80087cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800877a:	4b4a      	ldr	r3, [pc, #296]	@ (80088a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	099b      	lsrs	r3, r3, #6
 8008780:	2200      	movs	r2, #0
 8008782:	623b      	str	r3, [r7, #32]
 8008784:	627a      	str	r2, [r7, #36]	@ 0x24
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800878c:	2100      	movs	r1, #0
 800878e:	4b47      	ldr	r3, [pc, #284]	@ (80088ac <HAL_RCC_GetSysClockFreq+0x188>)
 8008790:	fb03 f201 	mul.w	r2, r3, r1
 8008794:	2300      	movs	r3, #0
 8008796:	fb00 f303 	mul.w	r3, r0, r3
 800879a:	4413      	add	r3, r2
 800879c:	4a43      	ldr	r2, [pc, #268]	@ (80088ac <HAL_RCC_GetSysClockFreq+0x188>)
 800879e:	fba0 1202 	umull	r1, r2, r0, r2
 80087a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80087a4:	460a      	mov	r2, r1
 80087a6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80087a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087aa:	4413      	add	r3, r2
 80087ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087b0:	2200      	movs	r2, #0
 80087b2:	61bb      	str	r3, [r7, #24]
 80087b4:	61fa      	str	r2, [r7, #28]
 80087b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80087ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80087be:	f7f7 fd0b 	bl	80001d8 <__aeabi_uldivmod>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4613      	mov	r3, r2
 80087c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087ca:	e053      	b.n	8008874 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087cc:	4b35      	ldr	r3, [pc, #212]	@ (80088a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	099b      	lsrs	r3, r3, #6
 80087d2:	2200      	movs	r2, #0
 80087d4:	613b      	str	r3, [r7, #16]
 80087d6:	617a      	str	r2, [r7, #20]
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80087de:	f04f 0b00 	mov.w	fp, #0
 80087e2:	4652      	mov	r2, sl
 80087e4:	465b      	mov	r3, fp
 80087e6:	f04f 0000 	mov.w	r0, #0
 80087ea:	f04f 0100 	mov.w	r1, #0
 80087ee:	0159      	lsls	r1, r3, #5
 80087f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80087f4:	0150      	lsls	r0, r2, #5
 80087f6:	4602      	mov	r2, r0
 80087f8:	460b      	mov	r3, r1
 80087fa:	ebb2 080a 	subs.w	r8, r2, sl
 80087fe:	eb63 090b 	sbc.w	r9, r3, fp
 8008802:	f04f 0200 	mov.w	r2, #0
 8008806:	f04f 0300 	mov.w	r3, #0
 800880a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800880e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008812:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008816:	ebb2 0408 	subs.w	r4, r2, r8
 800881a:	eb63 0509 	sbc.w	r5, r3, r9
 800881e:	f04f 0200 	mov.w	r2, #0
 8008822:	f04f 0300 	mov.w	r3, #0
 8008826:	00eb      	lsls	r3, r5, #3
 8008828:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800882c:	00e2      	lsls	r2, r4, #3
 800882e:	4614      	mov	r4, r2
 8008830:	461d      	mov	r5, r3
 8008832:	eb14 030a 	adds.w	r3, r4, sl
 8008836:	603b      	str	r3, [r7, #0]
 8008838:	eb45 030b 	adc.w	r3, r5, fp
 800883c:	607b      	str	r3, [r7, #4]
 800883e:	f04f 0200 	mov.w	r2, #0
 8008842:	f04f 0300 	mov.w	r3, #0
 8008846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800884a:	4629      	mov	r1, r5
 800884c:	028b      	lsls	r3, r1, #10
 800884e:	4621      	mov	r1, r4
 8008850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008854:	4621      	mov	r1, r4
 8008856:	028a      	lsls	r2, r1, #10
 8008858:	4610      	mov	r0, r2
 800885a:	4619      	mov	r1, r3
 800885c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800885e:	2200      	movs	r2, #0
 8008860:	60bb      	str	r3, [r7, #8]
 8008862:	60fa      	str	r2, [r7, #12]
 8008864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008868:	f7f7 fcb6 	bl	80001d8 <__aeabi_uldivmod>
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4613      	mov	r3, r2
 8008872:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008874:	4b0b      	ldr	r3, [pc, #44]	@ (80088a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	0c1b      	lsrs	r3, r3, #16
 800887a:	f003 0303 	and.w	r3, r3, #3
 800887e:	3301      	adds	r3, #1
 8008880:	005b      	lsls	r3, r3, #1
 8008882:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8008884:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008888:	fbb2 f3f3 	udiv	r3, r2, r3
 800888c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800888e:	e002      	b.n	8008896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008890:	4b05      	ldr	r3, [pc, #20]	@ (80088a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8008892:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8008894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008896:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8008898:	4618      	mov	r0, r3
 800889a:	3740      	adds	r7, #64	@ 0x40
 800889c:	46bd      	mov	sp, r7
 800889e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80088a2:	bf00      	nop
 80088a4:	40023800 	.word	0x40023800
 80088a8:	00f42400 	.word	0x00f42400
 80088ac:	017d7840 	.word	0x017d7840

080088b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80088b0:	b480      	push	{r7}
 80088b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80088b4:	4b03      	ldr	r3, [pc, #12]	@ (80088c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80088b6:	681b      	ldr	r3, [r3, #0]
}
 80088b8:	4618      	mov	r0, r3
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	2000002c 	.word	0x2000002c

080088c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80088cc:	f7ff fff0 	bl	80088b0 <HAL_RCC_GetHCLKFreq>
 80088d0:	4602      	mov	r2, r0
 80088d2:	4b05      	ldr	r3, [pc, #20]	@ (80088e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	0a9b      	lsrs	r3, r3, #10
 80088d8:	f003 0307 	and.w	r3, r3, #7
 80088dc:	4903      	ldr	r1, [pc, #12]	@ (80088ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80088de:	5ccb      	ldrb	r3, [r1, r3]
 80088e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80088e4:	4618      	mov	r0, r3
 80088e6:	bd80      	pop	{r7, pc}
 80088e8:	40023800 	.word	0x40023800
 80088ec:	0800e70c 	.word	0x0800e70c

080088f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80088f4:	f7ff ffdc 	bl	80088b0 <HAL_RCC_GetHCLKFreq>
 80088f8:	4602      	mov	r2, r0
 80088fa:	4b05      	ldr	r3, [pc, #20]	@ (8008910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80088fc:	689b      	ldr	r3, [r3, #8]
 80088fe:	0b5b      	lsrs	r3, r3, #13
 8008900:	f003 0307 	and.w	r3, r3, #7
 8008904:	4903      	ldr	r1, [pc, #12]	@ (8008914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008906:	5ccb      	ldrb	r3, [r1, r3]
 8008908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800890c:	4618      	mov	r0, r3
 800890e:	bd80      	pop	{r7, pc}
 8008910:	40023800 	.word	0x40023800
 8008914:	0800e70c 	.word	0x0800e70c

08008918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d101      	bne.n	800892a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008926:	2301      	movs	r3, #1
 8008928:	e041      	b.n	80089ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b00      	cmp	r3, #0
 8008934:	d106      	bne.n	8008944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f7f9 f9cc 	bl	8001cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	2202      	movs	r2, #2
 8008948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	3304      	adds	r3, #4
 8008954:	4619      	mov	r1, r3
 8008956:	4610      	mov	r0, r2
 8008958:	f000 fbce 	bl	80090f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2201      	movs	r2, #1
 8008978:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2201      	movs	r2, #1
 8008980:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2201      	movs	r2, #1
 8008990:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2201      	movs	r2, #1
 8008998:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2201      	movs	r2, #1
 80089a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80089ac:	2300      	movs	r3, #0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d001      	beq.n	80089d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e044      	b.n	8008a5a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	2202      	movs	r2, #2
 80089d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	68da      	ldr	r2, [r3, #12]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f042 0201 	orr.w	r2, r2, #1
 80089e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	4a1e      	ldr	r2, [pc, #120]	@ (8008a68 <HAL_TIM_Base_Start_IT+0xb0>)
 80089ee:	4293      	cmp	r3, r2
 80089f0:	d018      	beq.n	8008a24 <HAL_TIM_Base_Start_IT+0x6c>
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089fa:	d013      	beq.n	8008a24 <HAL_TIM_Base_Start_IT+0x6c>
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a1a      	ldr	r2, [pc, #104]	@ (8008a6c <HAL_TIM_Base_Start_IT+0xb4>)
 8008a02:	4293      	cmp	r3, r2
 8008a04:	d00e      	beq.n	8008a24 <HAL_TIM_Base_Start_IT+0x6c>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	4a19      	ldr	r2, [pc, #100]	@ (8008a70 <HAL_TIM_Base_Start_IT+0xb8>)
 8008a0c:	4293      	cmp	r3, r2
 8008a0e:	d009      	beq.n	8008a24 <HAL_TIM_Base_Start_IT+0x6c>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a17      	ldr	r2, [pc, #92]	@ (8008a74 <HAL_TIM_Base_Start_IT+0xbc>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d004      	beq.n	8008a24 <HAL_TIM_Base_Start_IT+0x6c>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a16      	ldr	r2, [pc, #88]	@ (8008a78 <HAL_TIM_Base_Start_IT+0xc0>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d111      	bne.n	8008a48 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	689b      	ldr	r3, [r3, #8]
 8008a2a:	f003 0307 	and.w	r3, r3, #7
 8008a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2b06      	cmp	r3, #6
 8008a34:	d010      	beq.n	8008a58 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	f042 0201 	orr.w	r2, r2, #1
 8008a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008a46:	e007      	b.n	8008a58 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f042 0201 	orr.w	r2, r2, #1
 8008a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008a58:	2300      	movs	r3, #0
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3714      	adds	r7, #20
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a64:	4770      	bx	lr
 8008a66:	bf00      	nop
 8008a68:	40010000 	.word	0x40010000
 8008a6c:	40000400 	.word	0x40000400
 8008a70:	40000800 	.word	0x40000800
 8008a74:	40000c00 	.word	0x40000c00
 8008a78:	40014000 	.word	0x40014000

08008a7c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b082      	sub	sp, #8
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d101      	bne.n	8008a8e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e041      	b.n	8008b12 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d106      	bne.n	8008aa8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 f839 	bl	8008b1a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	4619      	mov	r1, r3
 8008aba:	4610      	mov	r0, r2
 8008abc:	f000 fb1c 	bl	80090f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2201      	movs	r2, #1
 8008acc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2201      	movs	r2, #1
 8008ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2201      	movs	r2, #1
 8008aec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2201      	movs	r2, #1
 8008af4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2201      	movs	r2, #1
 8008afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008b10:	2300      	movs	r3, #0
}
 8008b12:	4618      	mov	r0, r3
 8008b14:	3708      	adds	r7, #8
 8008b16:	46bd      	mov	sp, r7
 8008b18:	bd80      	pop	{r7, pc}

08008b1a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008b1a:	b480      	push	{r7}
 8008b1c:	b083      	sub	sp, #12
 8008b1e:	af00      	add	r7, sp, #0
 8008b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008b2e:	b580      	push	{r7, lr}
 8008b30:	b084      	sub	sp, #16
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	68db      	ldr	r3, [r3, #12]
 8008b3c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	691b      	ldr	r3, [r3, #16]
 8008b44:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f003 0302 	and.w	r3, r3, #2
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d020      	beq.n	8008b92 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	f003 0302 	and.w	r3, r3, #2
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d01b      	beq.n	8008b92 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	f06f 0202 	mvn.w	r2, #2
 8008b62:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	699b      	ldr	r3, [r3, #24]
 8008b70:	f003 0303 	and.w	r3, r3, #3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d003      	beq.n	8008b80 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f000 fa9e 	bl	80090ba <HAL_TIM_IC_CaptureCallback>
 8008b7e:	e005      	b.n	8008b8c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f000 fa90 	bl	80090a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f000 faa1 	bl	80090ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	f003 0304 	and.w	r3, r3, #4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d020      	beq.n	8008bde <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	f003 0304 	and.w	r3, r3, #4
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d01b      	beq.n	8008bde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	f06f 0204 	mvn.w	r2, #4
 8008bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2202      	movs	r2, #2
 8008bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d003      	beq.n	8008bcc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 fa78 	bl	80090ba <HAL_TIM_IC_CaptureCallback>
 8008bca:	e005      	b.n	8008bd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008bcc:	6878      	ldr	r0, [r7, #4]
 8008bce:	f000 fa6a 	bl	80090a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f000 fa7b 	bl	80090ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2200      	movs	r2, #0
 8008bdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f003 0308 	and.w	r3, r3, #8
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d020      	beq.n	8008c2a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f003 0308 	and.w	r3, r3, #8
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d01b      	beq.n	8008c2a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f06f 0208 	mvn.w	r2, #8
 8008bfa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2204      	movs	r2, #4
 8008c00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	69db      	ldr	r3, [r3, #28]
 8008c08:	f003 0303 	and.w	r3, r3, #3
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d003      	beq.n	8008c18 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 fa52 	bl	80090ba <HAL_TIM_IC_CaptureCallback>
 8008c16:	e005      	b.n	8008c24 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 fa44 	bl	80090a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c1e:	6878      	ldr	r0, [r7, #4]
 8008c20:	f000 fa55 	bl	80090ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	f003 0310 	and.w	r3, r3, #16
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d020      	beq.n	8008c76 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f003 0310 	and.w	r3, r3, #16
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d01b      	beq.n	8008c76 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	f06f 0210 	mvn.w	r2, #16
 8008c46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	2208      	movs	r2, #8
 8008c4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	69db      	ldr	r3, [r3, #28]
 8008c54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d003      	beq.n	8008c64 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fa2c 	bl	80090ba <HAL_TIM_IC_CaptureCallback>
 8008c62:	e005      	b.n	8008c70 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fa1e 	bl	80090a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 fa2f 	bl	80090ce <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2200      	movs	r2, #0
 8008c74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	f003 0301 	and.w	r3, r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d00c      	beq.n	8008c9a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d007      	beq.n	8008c9a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f06f 0201 	mvn.w	r2, #1
 8008c92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7f7 fce3 	bl	8000660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008c9a:	68bb      	ldr	r3, [r7, #8]
 8008c9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00c      	beq.n	8008cbe <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d007      	beq.n	8008cbe <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fdd3 	bl	8009864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d00c      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d007      	beq.n	8008ce2 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008cda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008cdc:	6878      	ldr	r0, [r7, #4]
 8008cde:	f000 fa00 	bl	80090e2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f003 0320 	and.w	r3, r3, #32
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d00c      	beq.n	8008d06 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f003 0320 	and.w	r3, r3, #32
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d007      	beq.n	8008d06 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	f06f 0220 	mvn.w	r2, #32
 8008cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fda5 	bl	8009850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008d06:	bf00      	nop
 8008d08:	3710      	adds	r7, #16
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}
	...

08008d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b086      	sub	sp, #24
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d26:	2b01      	cmp	r3, #1
 8008d28:	d101      	bne.n	8008d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008d2a:	2302      	movs	r3, #2
 8008d2c:	e0ae      	b.n	8008e8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	2201      	movs	r2, #1
 8008d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b0c      	cmp	r3, #12
 8008d3a:	f200 809f 	bhi.w	8008e7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008d3e:	a201      	add	r2, pc, #4	@ (adr r2, 8008d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d44:	08008d79 	.word	0x08008d79
 8008d48:	08008e7d 	.word	0x08008e7d
 8008d4c:	08008e7d 	.word	0x08008e7d
 8008d50:	08008e7d 	.word	0x08008e7d
 8008d54:	08008db9 	.word	0x08008db9
 8008d58:	08008e7d 	.word	0x08008e7d
 8008d5c:	08008e7d 	.word	0x08008e7d
 8008d60:	08008e7d 	.word	0x08008e7d
 8008d64:	08008dfb 	.word	0x08008dfb
 8008d68:	08008e7d 	.word	0x08008e7d
 8008d6c:	08008e7d 	.word	0x08008e7d
 8008d70:	08008e7d 	.word	0x08008e7d
 8008d74:	08008e3b 	.word	0x08008e3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68b9      	ldr	r1, [r7, #8]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fa40 	bl	8009204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	699a      	ldr	r2, [r3, #24]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f042 0208 	orr.w	r2, r2, #8
 8008d92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	699a      	ldr	r2, [r3, #24]
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f022 0204 	bic.w	r2, r2, #4
 8008da2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	6999      	ldr	r1, [r3, #24]
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	691a      	ldr	r2, [r3, #16]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	430a      	orrs	r2, r1
 8008db4:	619a      	str	r2, [r3, #24]
      break;
 8008db6:	e064      	b.n	8008e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68b9      	ldr	r1, [r7, #8]
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	f000 fa86 	bl	80092d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	699a      	ldr	r2, [r3, #24]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008dd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	699a      	ldr	r2, [r3, #24]
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008de2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	6999      	ldr	r1, [r3, #24]
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	021a      	lsls	r2, r3, #8
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	619a      	str	r2, [r3, #24]
      break;
 8008df8:	e043      	b.n	8008e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	68b9      	ldr	r1, [r7, #8]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fad1 	bl	80093a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69da      	ldr	r2, [r3, #28]
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f042 0208 	orr.w	r2, r2, #8
 8008e14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	69da      	ldr	r2, [r3, #28]
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f022 0204 	bic.w	r2, r2, #4
 8008e24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681b      	ldr	r3, [r3, #0]
 8008e2a:	69d9      	ldr	r1, [r3, #28]
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	691a      	ldr	r2, [r3, #16]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	430a      	orrs	r2, r1
 8008e36:	61da      	str	r2, [r3, #28]
      break;
 8008e38:	e023      	b.n	8008e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	68b9      	ldr	r1, [r7, #8]
 8008e40:	4618      	mov	r0, r3
 8008e42:	f000 fb1b 	bl	800947c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	69da      	ldr	r2, [r3, #28]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	69da      	ldr	r2, [r3, #28]
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69d9      	ldr	r1, [r3, #28]
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	691b      	ldr	r3, [r3, #16]
 8008e70:	021a      	lsls	r2, r3, #8
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	430a      	orrs	r2, r1
 8008e78:	61da      	str	r2, [r3, #28]
      break;
 8008e7a:	e002      	b.n	8008e82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	75fb      	strb	r3, [r7, #23]
      break;
 8008e80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3718      	adds	r7, #24
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b084      	sub	sp, #16
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	d101      	bne.n	8008eb0 <HAL_TIM_ConfigClockSource+0x1c>
 8008eac:	2302      	movs	r3, #2
 8008eae:	e0b4      	b.n	800901a <HAL_TIM_ConfigClockSource+0x186>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2201      	movs	r2, #1
 8008eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2202      	movs	r2, #2
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008ece:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008ed6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	68ba      	ldr	r2, [r7, #8]
 8008ede:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008ee8:	d03e      	beq.n	8008f68 <HAL_TIM_ConfigClockSource+0xd4>
 8008eea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008eee:	f200 8087 	bhi.w	8009000 <HAL_TIM_ConfigClockSource+0x16c>
 8008ef2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008ef6:	f000 8086 	beq.w	8009006 <HAL_TIM_ConfigClockSource+0x172>
 8008efa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008efe:	d87f      	bhi.n	8009000 <HAL_TIM_ConfigClockSource+0x16c>
 8008f00:	2b70      	cmp	r3, #112	@ 0x70
 8008f02:	d01a      	beq.n	8008f3a <HAL_TIM_ConfigClockSource+0xa6>
 8008f04:	2b70      	cmp	r3, #112	@ 0x70
 8008f06:	d87b      	bhi.n	8009000 <HAL_TIM_ConfigClockSource+0x16c>
 8008f08:	2b60      	cmp	r3, #96	@ 0x60
 8008f0a:	d050      	beq.n	8008fae <HAL_TIM_ConfigClockSource+0x11a>
 8008f0c:	2b60      	cmp	r3, #96	@ 0x60
 8008f0e:	d877      	bhi.n	8009000 <HAL_TIM_ConfigClockSource+0x16c>
 8008f10:	2b50      	cmp	r3, #80	@ 0x50
 8008f12:	d03c      	beq.n	8008f8e <HAL_TIM_ConfigClockSource+0xfa>
 8008f14:	2b50      	cmp	r3, #80	@ 0x50
 8008f16:	d873      	bhi.n	8009000 <HAL_TIM_ConfigClockSource+0x16c>
 8008f18:	2b40      	cmp	r3, #64	@ 0x40
 8008f1a:	d058      	beq.n	8008fce <HAL_TIM_ConfigClockSource+0x13a>
 8008f1c:	2b40      	cmp	r3, #64	@ 0x40
 8008f1e:	d86f      	bhi.n	8009000 <HAL_TIM_ConfigClockSource+0x16c>
 8008f20:	2b30      	cmp	r3, #48	@ 0x30
 8008f22:	d064      	beq.n	8008fee <HAL_TIM_ConfigClockSource+0x15a>
 8008f24:	2b30      	cmp	r3, #48	@ 0x30
 8008f26:	d86b      	bhi.n	8009000 <HAL_TIM_ConfigClockSource+0x16c>
 8008f28:	2b20      	cmp	r3, #32
 8008f2a:	d060      	beq.n	8008fee <HAL_TIM_ConfigClockSource+0x15a>
 8008f2c:	2b20      	cmp	r3, #32
 8008f2e:	d867      	bhi.n	8009000 <HAL_TIM_ConfigClockSource+0x16c>
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d05c      	beq.n	8008fee <HAL_TIM_ConfigClockSource+0x15a>
 8008f34:	2b10      	cmp	r3, #16
 8008f36:	d05a      	beq.n	8008fee <HAL_TIM_ConfigClockSource+0x15a>
 8008f38:	e062      	b.n	8009000 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f46:	683b      	ldr	r3, [r7, #0]
 8008f48:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f4a:	f000 fbf2 	bl	8009732 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008f5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68ba      	ldr	r2, [r7, #8]
 8008f64:	609a      	str	r2, [r3, #8]
      break;
 8008f66:	e04f      	b.n	8009008 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008f78:	f000 fbdb 	bl	8009732 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008f8a:	609a      	str	r2, [r3, #8]
      break;
 8008f8c:	e03c      	b.n	8009008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f9a:	461a      	mov	r2, r3
 8008f9c:	f000 fb4f 	bl	800963e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2150      	movs	r1, #80	@ 0x50
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	f000 fba8 	bl	80096fc <TIM_ITRx_SetConfig>
      break;
 8008fac:	e02c      	b.n	8009008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fb2:	683b      	ldr	r3, [r7, #0]
 8008fb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fba:	461a      	mov	r2, r3
 8008fbc:	f000 fb6e 	bl	800969c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2160      	movs	r1, #96	@ 0x60
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	f000 fb98 	bl	80096fc <TIM_ITRx_SetConfig>
      break;
 8008fcc:	e01c      	b.n	8009008 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fda:	461a      	mov	r2, r3
 8008fdc:	f000 fb2f 	bl	800963e <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	2140      	movs	r1, #64	@ 0x40
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	f000 fb88 	bl	80096fc <TIM_ITRx_SetConfig>
      break;
 8008fec:	e00c      	b.n	8009008 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681a      	ldr	r2, [r3, #0]
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	4610      	mov	r0, r2
 8008ffa:	f000 fb7f 	bl	80096fc <TIM_ITRx_SetConfig>
      break;
 8008ffe:	e003      	b.n	8009008 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009000:	2301      	movs	r3, #1
 8009002:	73fb      	strb	r3, [r7, #15]
      break;
 8009004:	e000      	b.n	8009008 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009006:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009018:	7bfb      	ldrb	r3, [r7, #15]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009022:	b580      	push	{r7, lr}
 8009024:	b082      	sub	sp, #8
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009032:	2b01      	cmp	r3, #1
 8009034:	d101      	bne.n	800903a <HAL_TIM_SlaveConfigSynchro+0x18>
 8009036:	2302      	movs	r3, #2
 8009038:	e031      	b.n	800909e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2202      	movs	r2, #2
 8009046:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800904a:	6839      	ldr	r1, [r7, #0]
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	f000 fa65 	bl	800951c <TIM_SlaveTimer_SetConfig>
 8009052:	4603      	mov	r3, r0
 8009054:	2b00      	cmp	r3, #0
 8009056:	d009      	beq.n	800906c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2201      	movs	r2, #1
 800905c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e018      	b.n	800909e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68da      	ldr	r2, [r3, #12]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800907a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68da      	ldr	r2, [r3, #12]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800908a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800909c:	2300      	movs	r3, #0
}
 800909e:	4618      	mov	r0, r3
 80090a0:	3708      	adds	r7, #8
 80090a2:	46bd      	mov	sp, r7
 80090a4:	bd80      	pop	{r7, pc}

080090a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80090a6:	b480      	push	{r7}
 80090a8:	b083      	sub	sp, #12
 80090aa:	af00      	add	r7, sp, #0
 80090ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80090ae:	bf00      	nop
 80090b0:	370c      	adds	r7, #12
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b083      	sub	sp, #12
 80090be:	af00      	add	r7, sp, #0
 80090c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80090c2:	bf00      	nop
 80090c4:	370c      	adds	r7, #12
 80090c6:	46bd      	mov	sp, r7
 80090c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090cc:	4770      	bx	lr

080090ce <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80090ce:	b480      	push	{r7}
 80090d0:	b083      	sub	sp, #12
 80090d2:	af00      	add	r7, sp, #0
 80090d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80090d6:	bf00      	nop
 80090d8:	370c      	adds	r7, #12
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
	...

080090f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
 8009100:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	4a37      	ldr	r2, [pc, #220]	@ (80091e8 <TIM_Base_SetConfig+0xf0>)
 800910c:	4293      	cmp	r3, r2
 800910e:	d00f      	beq.n	8009130 <TIM_Base_SetConfig+0x38>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009116:	d00b      	beq.n	8009130 <TIM_Base_SetConfig+0x38>
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	4a34      	ldr	r2, [pc, #208]	@ (80091ec <TIM_Base_SetConfig+0xf4>)
 800911c:	4293      	cmp	r3, r2
 800911e:	d007      	beq.n	8009130 <TIM_Base_SetConfig+0x38>
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	4a33      	ldr	r2, [pc, #204]	@ (80091f0 <TIM_Base_SetConfig+0xf8>)
 8009124:	4293      	cmp	r3, r2
 8009126:	d003      	beq.n	8009130 <TIM_Base_SetConfig+0x38>
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	4a32      	ldr	r2, [pc, #200]	@ (80091f4 <TIM_Base_SetConfig+0xfc>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d108      	bne.n	8009142 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a28      	ldr	r2, [pc, #160]	@ (80091e8 <TIM_Base_SetConfig+0xf0>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d01b      	beq.n	8009182 <TIM_Base_SetConfig+0x8a>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009150:	d017      	beq.n	8009182 <TIM_Base_SetConfig+0x8a>
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	4a25      	ldr	r2, [pc, #148]	@ (80091ec <TIM_Base_SetConfig+0xf4>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d013      	beq.n	8009182 <TIM_Base_SetConfig+0x8a>
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	4a24      	ldr	r2, [pc, #144]	@ (80091f0 <TIM_Base_SetConfig+0xf8>)
 800915e:	4293      	cmp	r3, r2
 8009160:	d00f      	beq.n	8009182 <TIM_Base_SetConfig+0x8a>
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	4a23      	ldr	r2, [pc, #140]	@ (80091f4 <TIM_Base_SetConfig+0xfc>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d00b      	beq.n	8009182 <TIM_Base_SetConfig+0x8a>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	4a22      	ldr	r2, [pc, #136]	@ (80091f8 <TIM_Base_SetConfig+0x100>)
 800916e:	4293      	cmp	r3, r2
 8009170:	d007      	beq.n	8009182 <TIM_Base_SetConfig+0x8a>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	4a21      	ldr	r2, [pc, #132]	@ (80091fc <TIM_Base_SetConfig+0x104>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d003      	beq.n	8009182 <TIM_Base_SetConfig+0x8a>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	4a20      	ldr	r2, [pc, #128]	@ (8009200 <TIM_Base_SetConfig+0x108>)
 800917e:	4293      	cmp	r3, r2
 8009180:	d108      	bne.n	8009194 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	68db      	ldr	r3, [r3, #12]
 800918e:	68fa      	ldr	r2, [r7, #12]
 8009190:	4313      	orrs	r3, r2
 8009192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	695b      	ldr	r3, [r3, #20]
 800919e:	4313      	orrs	r3, r2
 80091a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	689a      	ldr	r2, [r3, #8]
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a0c      	ldr	r2, [pc, #48]	@ (80091e8 <TIM_Base_SetConfig+0xf0>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d103      	bne.n	80091c2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	691a      	ldr	r2, [r3, #16]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f043 0204 	orr.w	r2, r3, #4
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2201      	movs	r2, #1
 80091d2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	601a      	str	r2, [r3, #0]
}
 80091da:	bf00      	nop
 80091dc:	3714      	adds	r7, #20
 80091de:	46bd      	mov	sp, r7
 80091e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e4:	4770      	bx	lr
 80091e6:	bf00      	nop
 80091e8:	40010000 	.word	0x40010000
 80091ec:	40000400 	.word	0x40000400
 80091f0:	40000800 	.word	0x40000800
 80091f4:	40000c00 	.word	0x40000c00
 80091f8:	40014000 	.word	0x40014000
 80091fc:	40014400 	.word	0x40014400
 8009200:	40014800 	.word	0x40014800

08009204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009204:	b480      	push	{r7}
 8009206:	b087      	sub	sp, #28
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6a1b      	ldr	r3, [r3, #32]
 8009212:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6a1b      	ldr	r3, [r3, #32]
 8009218:	f023 0201 	bic.w	r2, r3, #1
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	685b      	ldr	r3, [r3, #4]
 8009224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	699b      	ldr	r3, [r3, #24]
 800922a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f023 0303 	bic.w	r3, r3, #3
 800923a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	68fa      	ldr	r2, [r7, #12]
 8009242:	4313      	orrs	r3, r2
 8009244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009246:	697b      	ldr	r3, [r7, #20]
 8009248:	f023 0302 	bic.w	r3, r3, #2
 800924c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	697a      	ldr	r2, [r7, #20]
 8009254:	4313      	orrs	r3, r2
 8009256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4a1c      	ldr	r2, [pc, #112]	@ (80092cc <TIM_OC1_SetConfig+0xc8>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d10c      	bne.n	800927a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009260:	697b      	ldr	r3, [r7, #20]
 8009262:	f023 0308 	bic.w	r3, r3, #8
 8009266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	697a      	ldr	r2, [r7, #20]
 800926e:	4313      	orrs	r3, r2
 8009270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	f023 0304 	bic.w	r3, r3, #4
 8009278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a13      	ldr	r2, [pc, #76]	@ (80092cc <TIM_OC1_SetConfig+0xc8>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d111      	bne.n	80092a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	695b      	ldr	r3, [r3, #20]
 8009296:	693a      	ldr	r2, [r7, #16]
 8009298:	4313      	orrs	r3, r2
 800929a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	699b      	ldr	r3, [r3, #24]
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	693a      	ldr	r2, [r7, #16]
 80092aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80092b2:	683b      	ldr	r3, [r7, #0]
 80092b4:	685a      	ldr	r2, [r3, #4]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	697a      	ldr	r2, [r7, #20]
 80092be:	621a      	str	r2, [r3, #32]
}
 80092c0:	bf00      	nop
 80092c2:	371c      	adds	r7, #28
 80092c4:	46bd      	mov	sp, r7
 80092c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ca:	4770      	bx	lr
 80092cc:	40010000 	.word	0x40010000

080092d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80092d0:	b480      	push	{r7}
 80092d2:	b087      	sub	sp, #28
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
 80092d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	f023 0210 	bic.w	r2, r3, #16
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	685b      	ldr	r3, [r3, #4]
 80092f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	699b      	ldr	r3, [r3, #24]
 80092f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80092fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	68fa      	ldr	r2, [r7, #12]
 8009310:	4313      	orrs	r3, r2
 8009312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	f023 0320 	bic.w	r3, r3, #32
 800931a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800931c:	683b      	ldr	r3, [r7, #0]
 800931e:	689b      	ldr	r3, [r3, #8]
 8009320:	011b      	lsls	r3, r3, #4
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	4313      	orrs	r3, r2
 8009326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	4a1e      	ldr	r2, [pc, #120]	@ (80093a4 <TIM_OC2_SetConfig+0xd4>)
 800932c:	4293      	cmp	r3, r2
 800932e:	d10d      	bne.n	800934c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009330:	697b      	ldr	r3, [r7, #20]
 8009332:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	011b      	lsls	r3, r3, #4
 800933e:	697a      	ldr	r2, [r7, #20]
 8009340:	4313      	orrs	r3, r2
 8009342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009344:	697b      	ldr	r3, [r7, #20]
 8009346:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800934a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	4a15      	ldr	r2, [pc, #84]	@ (80093a4 <TIM_OC2_SetConfig+0xd4>)
 8009350:	4293      	cmp	r3, r2
 8009352:	d113      	bne.n	800937c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009354:	693b      	ldr	r3, [r7, #16]
 8009356:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800935a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009364:	683b      	ldr	r3, [r7, #0]
 8009366:	695b      	ldr	r3, [r3, #20]
 8009368:	009b      	lsls	r3, r3, #2
 800936a:	693a      	ldr	r2, [r7, #16]
 800936c:	4313      	orrs	r3, r2
 800936e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	4313      	orrs	r3, r2
 800937a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	693a      	ldr	r2, [r7, #16]
 8009380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	68fa      	ldr	r2, [r7, #12]
 8009386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	697a      	ldr	r2, [r7, #20]
 8009394:	621a      	str	r2, [r3, #32]
}
 8009396:	bf00      	nop
 8009398:	371c      	adds	r7, #28
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	40010000 	.word	0x40010000

080093a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80093a8:	b480      	push	{r7}
 80093aa:	b087      	sub	sp, #28
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
 80093b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	6a1b      	ldr	r3, [r3, #32]
 80093b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a1b      	ldr	r3, [r3, #32]
 80093bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	685b      	ldr	r3, [r3, #4]
 80093c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	69db      	ldr	r3, [r3, #28]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80093d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	f023 0303 	bic.w	r3, r3, #3
 80093de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093e0:	683b      	ldr	r3, [r7, #0]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	68fa      	ldr	r2, [r7, #12]
 80093e6:	4313      	orrs	r3, r2
 80093e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80093f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	689b      	ldr	r3, [r3, #8]
 80093f6:	021b      	lsls	r3, r3, #8
 80093f8:	697a      	ldr	r2, [r7, #20]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	4a1d      	ldr	r2, [pc, #116]	@ (8009478 <TIM_OC3_SetConfig+0xd0>)
 8009402:	4293      	cmp	r3, r2
 8009404:	d10d      	bne.n	8009422 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800940c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	021b      	lsls	r3, r3, #8
 8009414:	697a      	ldr	r2, [r7, #20]
 8009416:	4313      	orrs	r3, r2
 8009418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800941a:	697b      	ldr	r3, [r7, #20]
 800941c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009420:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	4a14      	ldr	r2, [pc, #80]	@ (8009478 <TIM_OC3_SetConfig+0xd0>)
 8009426:	4293      	cmp	r3, r2
 8009428:	d113      	bne.n	8009452 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009430:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009438:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	695b      	ldr	r3, [r3, #20]
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	4313      	orrs	r3, r2
 8009444:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	699b      	ldr	r3, [r3, #24]
 800944a:	011b      	lsls	r3, r3, #4
 800944c:	693a      	ldr	r2, [r7, #16]
 800944e:	4313      	orrs	r3, r2
 8009450:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	693a      	ldr	r2, [r7, #16]
 8009456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	685a      	ldr	r2, [r3, #4]
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	697a      	ldr	r2, [r7, #20]
 800946a:	621a      	str	r2, [r3, #32]
}
 800946c:	bf00      	nop
 800946e:	371c      	adds	r7, #28
 8009470:	46bd      	mov	sp, r7
 8009472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009476:	4770      	bx	lr
 8009478:	40010000 	.word	0x40010000

0800947c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800947c:	b480      	push	{r7}
 800947e:	b087      	sub	sp, #28
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a1b      	ldr	r3, [r3, #32]
 800948a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6a1b      	ldr	r3, [r3, #32]
 8009490:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	69db      	ldr	r3, [r3, #28]
 80094a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80094aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80094b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	021b      	lsls	r3, r3, #8
 80094ba:	68fa      	ldr	r2, [r7, #12]
 80094bc:	4313      	orrs	r3, r2
 80094be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80094c0:	693b      	ldr	r3, [r7, #16]
 80094c2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80094c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	031b      	lsls	r3, r3, #12
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	4313      	orrs	r3, r2
 80094d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a10      	ldr	r2, [pc, #64]	@ (8009518 <TIM_OC4_SetConfig+0x9c>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d109      	bne.n	80094f0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094dc:	697b      	ldr	r3, [r7, #20]
 80094de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80094e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	019b      	lsls	r3, r3, #6
 80094ea:	697a      	ldr	r2, [r7, #20]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	697a      	ldr	r2, [r7, #20]
 80094f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	68fa      	ldr	r2, [r7, #12]
 80094fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	685a      	ldr	r2, [r3, #4]
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	621a      	str	r2, [r3, #32]
}
 800950a:	bf00      	nop
 800950c:	371c      	adds	r7, #28
 800950e:	46bd      	mov	sp, r7
 8009510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop
 8009518:	40010000 	.word	0x40010000

0800951c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800951c:	b580      	push	{r7, lr}
 800951e:	b086      	sub	sp, #24
 8009520:	af00      	add	r7, sp, #0
 8009522:	6078      	str	r0, [r7, #4]
 8009524:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009526:	2300      	movs	r3, #0
 8009528:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009532:	693b      	ldr	r3, [r7, #16]
 8009534:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009538:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	685b      	ldr	r3, [r3, #4]
 800953e:	693a      	ldr	r2, [r7, #16]
 8009540:	4313      	orrs	r3, r2
 8009542:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009544:	693b      	ldr	r3, [r7, #16]
 8009546:	f023 0307 	bic.w	r3, r3, #7
 800954a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800954c:	683b      	ldr	r3, [r7, #0]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	693a      	ldr	r2, [r7, #16]
 8009552:	4313      	orrs	r3, r2
 8009554:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	2b70      	cmp	r3, #112	@ 0x70
 8009564:	d01a      	beq.n	800959c <TIM_SlaveTimer_SetConfig+0x80>
 8009566:	2b70      	cmp	r3, #112	@ 0x70
 8009568:	d860      	bhi.n	800962c <TIM_SlaveTimer_SetConfig+0x110>
 800956a:	2b60      	cmp	r3, #96	@ 0x60
 800956c:	d054      	beq.n	8009618 <TIM_SlaveTimer_SetConfig+0xfc>
 800956e:	2b60      	cmp	r3, #96	@ 0x60
 8009570:	d85c      	bhi.n	800962c <TIM_SlaveTimer_SetConfig+0x110>
 8009572:	2b50      	cmp	r3, #80	@ 0x50
 8009574:	d046      	beq.n	8009604 <TIM_SlaveTimer_SetConfig+0xe8>
 8009576:	2b50      	cmp	r3, #80	@ 0x50
 8009578:	d858      	bhi.n	800962c <TIM_SlaveTimer_SetConfig+0x110>
 800957a:	2b40      	cmp	r3, #64	@ 0x40
 800957c:	d019      	beq.n	80095b2 <TIM_SlaveTimer_SetConfig+0x96>
 800957e:	2b40      	cmp	r3, #64	@ 0x40
 8009580:	d854      	bhi.n	800962c <TIM_SlaveTimer_SetConfig+0x110>
 8009582:	2b30      	cmp	r3, #48	@ 0x30
 8009584:	d055      	beq.n	8009632 <TIM_SlaveTimer_SetConfig+0x116>
 8009586:	2b30      	cmp	r3, #48	@ 0x30
 8009588:	d850      	bhi.n	800962c <TIM_SlaveTimer_SetConfig+0x110>
 800958a:	2b20      	cmp	r3, #32
 800958c:	d051      	beq.n	8009632 <TIM_SlaveTimer_SetConfig+0x116>
 800958e:	2b20      	cmp	r3, #32
 8009590:	d84c      	bhi.n	800962c <TIM_SlaveTimer_SetConfig+0x110>
 8009592:	2b00      	cmp	r3, #0
 8009594:	d04d      	beq.n	8009632 <TIM_SlaveTimer_SetConfig+0x116>
 8009596:	2b10      	cmp	r3, #16
 8009598:	d04b      	beq.n	8009632 <TIM_SlaveTimer_SetConfig+0x116>
 800959a:	e047      	b.n	800962c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80095ac:	f000 f8c1 	bl	8009732 <TIM_ETR_SetConfig>
      break;
 80095b0:	e040      	b.n	8009634 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b05      	cmp	r3, #5
 80095b8:	d101      	bne.n	80095be <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 80095ba:	2301      	movs	r3, #1
 80095bc:	e03b      	b.n	8009636 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	6a1b      	ldr	r3, [r3, #32]
 80095c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	6a1a      	ldr	r2, [r3, #32]
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f022 0201 	bic.w	r2, r2, #1
 80095d4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	699b      	ldr	r3, [r3, #24]
 80095dc:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80095de:	68bb      	ldr	r3, [r7, #8]
 80095e0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80095e4:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	691b      	ldr	r3, [r3, #16]
 80095ea:	011b      	lsls	r3, r3, #4
 80095ec:	68ba      	ldr	r2, [r7, #8]
 80095ee:	4313      	orrs	r3, r2
 80095f0:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	68ba      	ldr	r2, [r7, #8]
 80095f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	68fa      	ldr	r2, [r7, #12]
 8009600:	621a      	str	r2, [r3, #32]
      break;
 8009602:	e017      	b.n	8009634 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800960c:	683b      	ldr	r3, [r7, #0]
 800960e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009610:	461a      	mov	r2, r3
 8009612:	f000 f814 	bl	800963e <TIM_TI1_ConfigInputStage>
      break;
 8009616:	e00d      	b.n	8009634 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009624:	461a      	mov	r2, r3
 8009626:	f000 f839 	bl	800969c <TIM_TI2_ConfigInputStage>
      break;
 800962a:	e003      	b.n	8009634 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	75fb      	strb	r3, [r7, #23]
      break;
 8009630:	e000      	b.n	8009634 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8009632:	bf00      	nop
  }

  return status;
 8009634:	7dfb      	ldrb	r3, [r7, #23]
}
 8009636:	4618      	mov	r0, r3
 8009638:	3718      	adds	r7, #24
 800963a:	46bd      	mov	sp, r7
 800963c:	bd80      	pop	{r7, pc}

0800963e <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800963e:	b480      	push	{r7}
 8009640:	b087      	sub	sp, #28
 8009642:	af00      	add	r7, sp, #0
 8009644:	60f8      	str	r0, [r7, #12]
 8009646:	60b9      	str	r1, [r7, #8]
 8009648:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	6a1b      	ldr	r3, [r3, #32]
 8009654:	f023 0201 	bic.w	r2, r3, #1
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	699b      	ldr	r3, [r3, #24]
 8009660:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009662:	693b      	ldr	r3, [r7, #16]
 8009664:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009668:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	011b      	lsls	r3, r3, #4
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	4313      	orrs	r3, r2
 8009672:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f023 030a 	bic.w	r3, r3, #10
 800967a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800967c:	697a      	ldr	r2, [r7, #20]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	4313      	orrs	r3, r2
 8009682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	693a      	ldr	r2, [r7, #16]
 8009688:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	697a      	ldr	r2, [r7, #20]
 800968e:	621a      	str	r2, [r3, #32]
}
 8009690:	bf00      	nop
 8009692:	371c      	adds	r7, #28
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800969c:	b480      	push	{r7}
 800969e:	b087      	sub	sp, #28
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	60f8      	str	r0, [r7, #12]
 80096a4:	60b9      	str	r1, [r7, #8]
 80096a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	6a1b      	ldr	r3, [r3, #32]
 80096b2:	f023 0210 	bic.w	r2, r3, #16
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	699b      	ldr	r3, [r3, #24]
 80096be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80096c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	031b      	lsls	r3, r3, #12
 80096cc:	693a      	ldr	r2, [r7, #16]
 80096ce:	4313      	orrs	r3, r2
 80096d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096d2:	697b      	ldr	r3, [r7, #20]
 80096d4:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80096d8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096da:	68bb      	ldr	r3, [r7, #8]
 80096dc:	011b      	lsls	r3, r3, #4
 80096de:	697a      	ldr	r2, [r7, #20]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	697a      	ldr	r2, [r7, #20]
 80096ee:	621a      	str	r2, [r3, #32]
}
 80096f0:	bf00      	nop
 80096f2:	371c      	adds	r7, #28
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b085      	sub	sp, #20
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009712:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009714:	683a      	ldr	r2, [r7, #0]
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4313      	orrs	r3, r2
 800971a:	f043 0307 	orr.w	r3, r3, #7
 800971e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	609a      	str	r2, [r3, #8]
}
 8009726:	bf00      	nop
 8009728:	3714      	adds	r7, #20
 800972a:	46bd      	mov	sp, r7
 800972c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009730:	4770      	bx	lr

08009732 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009732:	b480      	push	{r7}
 8009734:	b087      	sub	sp, #28
 8009736:	af00      	add	r7, sp, #0
 8009738:	60f8      	str	r0, [r7, #12]
 800973a:	60b9      	str	r1, [r7, #8]
 800973c:	607a      	str	r2, [r7, #4]
 800973e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	689b      	ldr	r3, [r3, #8]
 8009744:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800974c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	021a      	lsls	r2, r3, #8
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	431a      	orrs	r2, r3
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	4313      	orrs	r3, r2
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	4313      	orrs	r3, r2
 800975e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	697a      	ldr	r2, [r7, #20]
 8009764:	609a      	str	r2, [r3, #8]
}
 8009766:	bf00      	nop
 8009768:	371c      	adds	r7, #28
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
	...

08009774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
 800977c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009784:	2b01      	cmp	r3, #1
 8009786:	d101      	bne.n	800978c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009788:	2302      	movs	r3, #2
 800978a:	e050      	b.n	800982e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2201      	movs	r2, #1
 8009790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	68fa      	ldr	r2, [r7, #12]
 80097ba:	4313      	orrs	r3, r2
 80097bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68fa      	ldr	r2, [r7, #12]
 80097c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a1c      	ldr	r2, [pc, #112]	@ (800983c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d018      	beq.n	8009802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80097d8:	d013      	beq.n	8009802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a18      	ldr	r2, [pc, #96]	@ (8009840 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d00e      	beq.n	8009802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a16      	ldr	r2, [pc, #88]	@ (8009844 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d009      	beq.n	8009802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a15      	ldr	r2, [pc, #84]	@ (8009848 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d004      	beq.n	8009802 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a13      	ldr	r2, [pc, #76]	@ (800984c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d10c      	bne.n	800981c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009808:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	685b      	ldr	r3, [r3, #4]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	4313      	orrs	r3, r2
 8009812:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2201      	movs	r2, #1
 8009820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2200      	movs	r2, #0
 8009828:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800982c:	2300      	movs	r3, #0
}
 800982e:	4618      	mov	r0, r3
 8009830:	3714      	adds	r7, #20
 8009832:	46bd      	mov	sp, r7
 8009834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009838:	4770      	bx	lr
 800983a:	bf00      	nop
 800983c:	40010000 	.word	0x40010000
 8009840:	40000400 	.word	0x40000400
 8009844:	40000800 	.word	0x40000800
 8009848:	40000c00 	.word	0x40000c00
 800984c:	40014000 	.word	0x40014000

08009850 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009864:	b480      	push	{r7}
 8009866:	b083      	sub	sp, #12
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800986c:	bf00      	nop
 800986e:	370c      	adds	r7, #12
 8009870:	46bd      	mov	sp, r7
 8009872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009876:	4770      	bx	lr

08009878 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b082      	sub	sp, #8
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d101      	bne.n	800988a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8009886:	2301      	movs	r3, #1
 8009888:	e033      	b.n	80098f2 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009890:	b2db      	uxtb	r3, r3
 8009892:	2b00      	cmp	r3, #0
 8009894:	d106      	bne.n	80098a4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2200      	movs	r2, #0
 800989a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7f8 faee 	bl	8001e80 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2202      	movs	r2, #2
 80098a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fb61 	bl	8009f74 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	691a      	ldr	r2, [r3, #16]
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80098c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	695a      	ldr	r2, [r3, #20]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80098d0:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	68da      	ldr	r2, [r3, #12]
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80098e0:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3708      	adds	r7, #8
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
	...

080098fc <HAL_USART_IRQHandler>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
void HAL_USART_IRQHandler(USART_HandleTypeDef *husart)
{
 80098fc:	b580      	push	{r7, lr}
 80098fe:	b088      	sub	sp, #32
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(husart->Instance->SR);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its   = READ_REG(husart->Instance->CR1);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	68db      	ldr	r3, [r3, #12]
 8009912:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its   = READ_REG(husart->Instance->CR3);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	695b      	ldr	r3, [r3, #20]
 800991a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800991c:	2300      	movs	r3, #0
 800991e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8009920:	2300      	movs	r3, #0
 8009922:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009924:	69fb      	ldr	r3, [r7, #28]
 8009926:	f003 030f 	and.w	r3, r3, #15
 800992a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d117      	bne.n	8009962 <HAL_USART_IRQHandler+0x66>
  {
    /* USART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	f003 0320 	and.w	r3, r3, #32
 8009938:	2b00      	cmp	r3, #0
 800993a:	d012      	beq.n	8009962 <HAL_USART_IRQHandler+0x66>
 800993c:	69bb      	ldr	r3, [r7, #24]
 800993e:	f003 0320 	and.w	r3, r3, #32
 8009942:	2b00      	cmp	r3, #0
 8009944:	d00d      	beq.n	8009962 <HAL_USART_IRQHandler+0x66>
    {
      if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800994c:	b2db      	uxtb	r3, r3
 800994e:	2b22      	cmp	r3, #34	@ 0x22
 8009950:	d103      	bne.n	800995a <HAL_USART_IRQHandler+0x5e>
      {
        USART_Receive_IT(husart);
 8009952:	6878      	ldr	r0, [r7, #4]
 8009954:	f000 f9ba 	bl	8009ccc <USART_Receive_IT>
      }
      else
      {
        USART_TransmitReceive_IT(husart);
      }
      return;
 8009958:	e0e9      	b.n	8009b2e <HAL_USART_IRQHandler+0x232>
        USART_TransmitReceive_IT(husart);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa3c 	bl	8009dd8 <USART_TransmitReceive_IT>
      return;
 8009960:	e0e5      	b.n	8009b2e <HAL_USART_IRQHandler+0x232>
    }
  }
  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009962:	693b      	ldr	r3, [r7, #16]
 8009964:	2b00      	cmp	r3, #0
 8009966:	f000 80bb 	beq.w	8009ae0 <HAL_USART_IRQHandler+0x1e4>
 800996a:	697b      	ldr	r3, [r7, #20]
 800996c:	f003 0301 	and.w	r3, r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	d105      	bne.n	8009980 <HAL_USART_IRQHandler+0x84>
 8009974:	69bb      	ldr	r3, [r7, #24]
 8009976:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800997a:	2b00      	cmp	r3, #0
 800997c:	f000 80b0 	beq.w	8009ae0 <HAL_USART_IRQHandler+0x1e4>
  {
    /* USART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	d00a      	beq.n	80099a0 <HAL_USART_IRQHandler+0xa4>
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009990:	2b00      	cmp	r3, #0
 8009992:	d005      	beq.n	80099a0 <HAL_USART_IRQHandler+0xa4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_PE;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009998:	f043 0201 	orr.w	r2, r3, #1
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART noise error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099a0:	69fb      	ldr	r3, [r7, #28]
 80099a2:	f003 0304 	and.w	r3, r3, #4
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d00a      	beq.n	80099c0 <HAL_USART_IRQHandler+0xc4>
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	f003 0301 	and.w	r3, r3, #1
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <HAL_USART_IRQHandler+0xc4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_NE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099b8:	f043 0202 	orr.w	r2, r3, #2
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART frame error interrupt occurred --------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099c0:	69fb      	ldr	r3, [r7, #28]
 80099c2:	f003 0302 	and.w	r3, r3, #2
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d00a      	beq.n	80099e0 <HAL_USART_IRQHandler+0xe4>
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	f003 0301 	and.w	r3, r3, #1
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d005      	beq.n	80099e0 <HAL_USART_IRQHandler+0xe4>
    {
      husart->ErrorCode |= HAL_USART_ERROR_FE;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80099d8:	f043 0204 	orr.w	r2, r3, #4
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* USART Over-Run interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80099e0:	69fb      	ldr	r3, [r7, #28]
 80099e2:	f003 0308 	and.w	r3, r3, #8
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00f      	beq.n	8009a0a <HAL_USART_IRQHandler+0x10e>
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	f003 0320 	and.w	r3, r3, #32
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d104      	bne.n	80099fe <HAL_USART_IRQHandler+0x102>
 80099f4:	697b      	ldr	r3, [r7, #20]
 80099f6:	f003 0301 	and.w	r3, r3, #1
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d005      	beq.n	8009a0a <HAL_USART_IRQHandler+0x10e>
    {
      husart->ErrorCode |= HAL_USART_ERROR_ORE;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a02:	f043 0208 	orr.w	r2, r3, #8
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    if (husart->ErrorCode != HAL_USART_ERROR_NONE)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 808c 	beq.w	8009b2c <HAL_USART_IRQHandler+0x230>
    {
      /* USART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	f003 0320 	and.w	r3, r3, #32
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d011      	beq.n	8009a42 <HAL_USART_IRQHandler+0x146>
 8009a1e:	69bb      	ldr	r3, [r7, #24]
 8009a20:	f003 0320 	and.w	r3, r3, #32
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00c      	beq.n	8009a42 <HAL_USART_IRQHandler+0x146>
      {
        if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	2b22      	cmp	r3, #34	@ 0x22
 8009a32:	d103      	bne.n	8009a3c <HAL_USART_IRQHandler+0x140>
        {
          USART_Receive_IT(husart);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f000 f949 	bl	8009ccc <USART_Receive_IT>
 8009a3a:	e002      	b.n	8009a42 <HAL_USART_IRQHandler+0x146>
        }
        else
        {
          USART_TransmitReceive_IT(husart);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f9cb 	bl	8009dd8 <USART_TransmitReceive_IT>
        }
      }
      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
      consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR);
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a4c:	2b40      	cmp	r3, #64	@ 0x40
 8009a4e:	bf0c      	ite	eq
 8009a50:	2301      	moveq	r3, #1
 8009a52:	2300      	movne	r3, #0
 8009a54:	b2db      	uxtb	r3, r3
 8009a56:	60fb      	str	r3, [r7, #12]
      if (((husart->ErrorCode & HAL_USART_ERROR_ORE) != RESET) || dmarequest)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009a5c:	f003 0308 	and.w	r3, r3, #8
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d102      	bne.n	8009a6a <HAL_USART_IRQHandler+0x16e>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d031      	beq.n	8009ace <HAL_USART_IRQHandler+0x1d2>
      {
        /* Set the USART state ready to be able to start again the process,
        Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        USART_EndRxTransfer(husart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f000 f88c 	bl	8009b88 <USART_EndRxTransfer>

        /* Disable the USART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	695b      	ldr	r3, [r3, #20]
 8009a76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a7a:	2b40      	cmp	r3, #64	@ 0x40
 8009a7c:	d123      	bne.n	8009ac6 <HAL_USART_IRQHandler+0x1ca>
        {
          CLEAR_BIT(husart->Instance->CR3, USART_CR3_DMAR);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	695a      	ldr	r2, [r3, #20]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009a8c:	615a      	str	r2, [r3, #20]

          /* Abort the USART DMA Rx channel */
          if (husart->hdmarx != NULL)
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d013      	beq.n	8009abe <HAL_USART_IRQHandler+0x1c2>
          {
            /* Set the USART DMA Abort callback :
            will lead to call HAL_USART_ErrorCallback() at end of DMA abort procedure */
            husart->hdmarx->XferAbortCallback = USART_DMAAbortOnError;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a9a:	4a26      	ldr	r2, [pc, #152]	@ (8009b34 <HAL_USART_IRQHandler+0x238>)
 8009a9c:	651a      	str	r2, [r3, #80]	@ 0x50

            if (HAL_DMA_Abort_IT(husart->hdmarx) != HAL_OK)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f7f9 fd98 	bl	80035d8 <HAL_DMA_Abort_IT>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d016      	beq.n	8009adc <HAL_USART_IRQHandler+0x1e0>
            {
              /* Call Directly XferAbortCallback function in case of error */
              husart->hdmarx->XferAbortCallback(husart->hdmarx);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ab4:	687a      	ldr	r2, [r7, #4]
 8009ab6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8009ab8:	4610      	mov	r0, r2
 8009aba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009abc:	e00e      	b.n	8009adc <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
            /* Call registered Error Callback */
            husart->ErrorCallback(husart);
#else
            /* Call legacy weak Error Callback */
            HAL_USART_ErrorCallback(husart);
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f858 	bl	8009b74 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009ac4:	e00a      	b.n	8009adc <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
          /* Call registered Error Callback */
          husart->ErrorCallback(husart);
#else
          /* Call legacy weak Error Callback */
          HAL_USART_ErrorCallback(husart);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f854 	bl	8009b74 <HAL_USART_ErrorCallback>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009acc:	e006      	b.n	8009adc <HAL_USART_IRQHandler+0x1e0>
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
        /* Call registered Error Callback */
        husart->ErrorCallback(husart);
#else
        /* Call legacy weak Error Callback */
        HAL_USART_ErrorCallback(husart);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f850 	bl	8009b74 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
        husart->ErrorCode = HAL_USART_ERROR_NONE;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8009ada:	e027      	b.n	8009b2c <HAL_USART_IRQHandler+0x230>
        if (HAL_IS_BIT_SET(husart->Instance->CR3, USART_CR3_DMAR))
 8009adc:	bf00      	nop
    return;
 8009ade:	e025      	b.n	8009b2c <HAL_USART_IRQHandler+0x230>
  }

  /* USART in mode Transmitter -----------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d012      	beq.n	8009b10 <HAL_USART_IRQHandler+0x214>
 8009aea:	69bb      	ldr	r3, [r7, #24]
 8009aec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00d      	beq.n	8009b10 <HAL_USART_IRQHandler+0x214>
  {
    if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009afa:	b2db      	uxtb	r3, r3
 8009afc:	2b12      	cmp	r3, #18
 8009afe:	d103      	bne.n	8009b08 <HAL_USART_IRQHandler+0x20c>
    {
      USART_Transmit_IT(husart);
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f000 f873 	bl	8009bec <USART_Transmit_IT>
    }
    else
    {
      USART_TransmitReceive_IT(husart);
    }
    return;
 8009b06:	e012      	b.n	8009b2e <HAL_USART_IRQHandler+0x232>
      USART_TransmitReceive_IT(husart);
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f965 	bl	8009dd8 <USART_TransmitReceive_IT>
    return;
 8009b0e:	e00e      	b.n	8009b2e <HAL_USART_IRQHandler+0x232>
  }

  /* USART in mode Transmitter (transmission end) ----------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d009      	beq.n	8009b2e <HAL_USART_IRQHandler+0x232>
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d004      	beq.n	8009b2e <HAL_USART_IRQHandler+0x232>
  {
    USART_EndTransmit_IT(husart);
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f000 f8b1 	bl	8009c8c <USART_EndTransmit_IT>
    return;
 8009b2a:	e000      	b.n	8009b2e <HAL_USART_IRQHandler+0x232>
    return;
 8009b2c:	bf00      	nop
  }
}
 8009b2e:	3720      	adds	r7, #32
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	08009bc5 	.word	0x08009bc5

08009b38 <HAL_USART_TxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxCpltCallback(USART_HandleTypeDef *husart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxCpltCallback could be implemented in the user file
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_USART_RxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_RxCpltCallback(USART_HandleTypeDef *husart)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_RxCpltCallback could be implemented in the user file
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_USART_TxRxCpltCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_TxRxCpltCallback(USART_HandleTypeDef *husart)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_TxRxCpltCallback could be implemented in the user file
   */
}
 8009b68:	bf00      	nop
 8009b6a:	370c      	adds	r7, #12
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b72:	4770      	bx	lr

08009b74 <HAL_USART_ErrorCallback>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
__weak void HAL_USART_ErrorCallback(USART_HandleTypeDef *husart)
{
 8009b74:	b480      	push	{r7}
 8009b76:	b083      	sub	sp, #12
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(husart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_USART_ErrorCallback could be implemented in the user file
   */
}
 8009b7c:	bf00      	nop
 8009b7e:	370c      	adds	r7, #12
 8009b80:	46bd      	mov	sp, r7
 8009b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b86:	4770      	bx	lr

08009b88 <USART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on USART peripheral (following error detection or Reception completion).
  * @param  husart USART handle.
  * @retval None
  */
static void USART_EndRxTransfer(USART_HandleTypeDef *husart)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b083      	sub	sp, #12
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR interrupts */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	68da      	ldr	r2, [r3, #12]
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
 8009b9e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	695a      	ldr	r2, [r3, #20]
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	f022 0201 	bic.w	r2, r2, #1
 8009bae:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore husart->State to Ready */
  husart->State = HAL_USART_STATE_READY;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 8009bb8:	bf00      	nop
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <USART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void USART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  USART_HandleTypeDef *husart = (USART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bd0:	60fb      	str	r3, [r7, #12]
  husart->RxXferCount = 0x00U;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	865a      	strh	r2, [r3, #50]	@ 0x32
  husart->TxXferCount = 0x00U;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2200      	movs	r2, #0
 8009bdc:	855a      	strh	r2, [r3, #42]	@ 0x2a
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Error Callback */
  husart->ErrorCallback(husart);
#else
  /* Call legacy weak Error Callback */
  HAL_USART_ErrorCallback(husart);
 8009bde:	68f8      	ldr	r0, [r7, #12]
 8009be0:	f7ff ffc8 	bl	8009b74 <HAL_USART_ErrorCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
}
 8009be4:	bf00      	nop
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <USART_Transmit_IT>:
  *                the configuration information for the specified USART module.
  * @retval HAL status
  * @note   The USART errors are not managed to avoid the overrun error.
  */
static HAL_StatusTypeDef USART_Transmit_IT(USART_HandleTypeDef *husart)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  if (husart->State == HAL_USART_STATE_BUSY_TX)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009bfa:	b2db      	uxtb	r3, r3
 8009bfc:	2b12      	cmp	r3, #18
 8009bfe:	d13e      	bne.n	8009c7e <USART_Transmit_IT+0x92>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	689b      	ldr	r3, [r3, #8]
 8009c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c08:	d114      	bne.n	8009c34 <USART_Transmit_IT+0x48>
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d110      	bne.n	8009c34 <USART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) husart->pTxBuffPtr;
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c16:	60fb      	str	r3, [r7, #12]
      husart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	881b      	ldrh	r3, [r3, #0]
 8009c1c:	461a      	mov	r2, r3
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c26:	605a      	str	r2, [r3, #4]
      husart->pTxBuffPtr += 2U;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c2c:	1c9a      	adds	r2, r3, #2
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	625a      	str	r2, [r3, #36]	@ 0x24
 8009c32:	e008      	b.n	8009c46 <USART_Transmit_IT+0x5a>
    }
    else
    {
      husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009c38:	1c59      	adds	r1, r3, #1
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	6251      	str	r1, [r2, #36]	@ 0x24
 8009c3e:	781a      	ldrb	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	605a      	str	r2, [r3, #4]
    }

    if (--husart->TxXferCount == 0U)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c4a:	b29b      	uxth	r3, r3
 8009c4c:	3b01      	subs	r3, #1
 8009c4e:	b29b      	uxth	r3, r3
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	4619      	mov	r1, r3
 8009c54:	8551      	strh	r1, [r2, #42]	@ 0x2a
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d10f      	bne.n	8009c7a <USART_Transmit_IT+0x8e>
    {
      /* Disable the USART Transmit data register empty Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68da      	ldr	r2, [r3, #12]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009c68:	60da      	str	r2, [r3, #12]

      /* Enable the USART Transmit Complete Interrupt */
      SET_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	68da      	ldr	r2, [r3, #12]
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009c78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	e000      	b.n	8009c80 <USART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c7e:	2302      	movs	r3, #2
  }
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <USART_EndTransmit_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_EndTransmit_IT(USART_HandleTypeDef *husart)
{
 8009c8c:	b580      	push	{r7, lr}
 8009c8e:	b082      	sub	sp, #8
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  /* Disable the USART Transmit Complete Interrupt */
  CLEAR_BIT(husart->Instance->CR1, USART_CR1_TCIE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ca2:	60da      	str	r2, [r3, #12]

  /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
  CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	695a      	ldr	r2, [r3, #20]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 0201 	bic.w	r2, r2, #1
 8009cb2:	615a      	str	r2, [r3, #20]

  husart->State = HAL_USART_STATE_READY;
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2201      	movs	r2, #1
 8009cb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
  /* Call registered Tx Complete Callback */
  husart->TxCpltCallback(husart);
#else
  /* Call legacy weak Tx Complete Callback */
  HAL_USART_TxCpltCallback(husart);
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f7ff ff3b 	bl	8009b38 <HAL_USART_TxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cc2:	2300      	movs	r3, #0
}
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	3708      	adds	r7, #8
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USART_Receive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_Receive_IT(USART_HandleTypeDef *husart)
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b084      	sub	sp, #16
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	60fb      	str	r3, [r7, #12]
  uint16_t *pdata16bits = NULL;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60bb      	str	r3, [r7, #8]

  if (husart->State == HAL_USART_STATE_BUSY_RX)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ce2:	b2db      	uxtb	r3, r3
 8009ce4:	2b22      	cmp	r3, #34	@ 0x22
 8009ce6:	d172      	bne.n	8009dce <USART_Receive_IT+0x102>
  {
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cf0:	d115      	bne.n	8009d1e <USART_Receive_IT+0x52>
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	691b      	ldr	r3, [r3, #16]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d111      	bne.n	8009d1e <USART_Receive_IT+0x52>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) husart->pRxBuffPtr;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009cfe:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	685b      	ldr	r3, [r3, #4]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d0c:	b29a      	uxth	r2, r3
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	801a      	strh	r2, [r3, #0]
      husart->pRxBuffPtr += 2U;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d16:	1c9a      	adds	r2, r3, #2
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009d1c:	e024      	b.n	8009d68 <USART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) husart->pRxBuffPtr;
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d22:	60fb      	str	r3, [r7, #12]
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	689b      	ldr	r3, [r3, #8]
 8009d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d2c:	d007      	beq.n	8009d3e <USART_Receive_IT+0x72>
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	689b      	ldr	r3, [r3, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d10a      	bne.n	8009d4c <USART_Receive_IT+0x80>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	691b      	ldr	r3, [r3, #16]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d106      	bne.n	8009d4c <USART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	685b      	ldr	r3, [r3, #4]
 8009d44:	b2da      	uxtb	r2, r3
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	701a      	strb	r2, [r3, #0]
 8009d4a:	e008      	b.n	8009d5e <USART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	685b      	ldr	r3, [r3, #4]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d58:	b2da      	uxtb	r2, r3
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	701a      	strb	r2, [r3, #0]
      }

      husart->pRxBuffPtr += 1U;
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d62:	1c5a      	adds	r2, r3, #1
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    husart->RxXferCount--;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d6c:	b29b      	uxth	r3, r3
 8009d6e:	3b01      	subs	r3, #1
 8009d70:	b29a      	uxth	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	865a      	strh	r2, [r3, #50]	@ 0x32

    if (husart->RxXferCount == 0U)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009d7a:	b29b      	uxth	r3, r3
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d120      	bne.n	8009dc2 <USART_Receive_IT+0xf6>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	68da      	ldr	r2, [r3, #12]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	f022 0220 	bic.w	r2, r2, #32
 8009d8e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	68da      	ldr	r2, [r3, #12]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009d9e:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	695a      	ldr	r2, [r3, #20]
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f022 0201 	bic.w	r2, r2, #1
 8009dae:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2201      	movs	r2, #1
 8009db4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Rx Complete Callback */
      husart->RxCpltCallback(husart);
#else
      /* Call legacy weak Rx Complete Callback */
      HAL_USART_RxCpltCallback(husart);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f7ff fec7 	bl	8009b4c <HAL_USART_RxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e006      	b.n	8009dd0 <USART_Receive_IT+0x104>
    else
    {
      /* Send dummy byte in order to generate the clock for the slave to send the next data.
      * Whatever the frame length (7, 8 or 9-bit long), the same dummy value
      * can be written for all the cases. */
      husart->Instance->DR = (DUMMY_DATA & (uint16_t)0x0FF);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	22ff      	movs	r2, #255	@ 0xff
 8009dc8:	605a      	str	r2, [r3, #4]
    }
    return HAL_OK;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	e000      	b.n	8009dd0 <USART_Receive_IT+0x104>
  }
  else
  {
    return HAL_BUSY;
 8009dce:	2302      	movs	r3, #2
  }
}
 8009dd0:	4618      	mov	r0, r3
 8009dd2:	3710      	adds	r7, #16
 8009dd4:	46bd      	mov	sp, r7
 8009dd6:	bd80      	pop	{r7, pc}

08009dd8 <USART_TransmitReceive_IT>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_TransmitReceive_IT(USART_HandleTypeDef *husart)
{
 8009dd8:	b580      	push	{r7, lr}
 8009dda:	b084      	sub	sp, #16
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
  const uint16_t *pdatatx16bits;
  uint16_t *pdatarx16bits;

  if (husart->State == HAL_USART_STATE_BUSY_TX_RX)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009de6:	b2db      	uxtb	r3, r3
 8009de8:	2b32      	cmp	r3, #50	@ 0x32
 8009dea:	f040 80bd 	bne.w	8009f68 <USART_TransmitReceive_IT+0x190>
  {
    if (husart->TxXferCount != 0x00U)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d03d      	beq.n	8009e74 <USART_TransmitReceive_IT+0x9c>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_TXE) != RESET)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009e02:	2b80      	cmp	r3, #128	@ 0x80
 8009e04:	d136      	bne.n	8009e74 <USART_TransmitReceive_IT+0x9c>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	689b      	ldr	r3, [r3, #8]
 8009e0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e0e:	d114      	bne.n	8009e3a <USART_TransmitReceive_IT+0x62>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d110      	bne.n	8009e3a <USART_TransmitReceive_IT+0x62>
        {
          pdatatx16bits = (const uint16_t *) husart->pTxBuffPtr;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e1c:	60fb      	str	r3, [r7, #12]
          husart->Instance->DR = (uint16_t)(*pdatatx16bits & (uint16_t)0x01FF);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	881b      	ldrh	r3, [r3, #0]
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e2c:	605a      	str	r2, [r3, #4]
          husart->pTxBuffPtr += 2U;
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e32:	1c9a      	adds	r2, r3, #2
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	625a      	str	r2, [r3, #36]	@ 0x24
 8009e38:	e008      	b.n	8009e4c <USART_TransmitReceive_IT+0x74>
        }
        else
        {
          husart->Instance->DR = (uint8_t)(*husart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e3e:	1c59      	adds	r1, r3, #1
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	6251      	str	r1, [r2, #36]	@ 0x24
 8009e44:	781a      	ldrb	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	605a      	str	r2, [r3, #4]
        }

        husart->TxXferCount--;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	3b01      	subs	r3, #1
 8009e54:	b29a      	uxth	r2, r3
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Check the latest data transmitted */
        if (husart->TxXferCount == 0U)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e5e:	b29b      	uxth	r3, r3
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d107      	bne.n	8009e74 <USART_TransmitReceive_IT+0x9c>
        {
          CLEAR_BIT(husart->Instance->CR1, USART_CR1_TXEIE);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68da      	ldr	r2, [r3, #12]
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009e72:	60da      	str	r2, [r3, #12]
        }
      }
    }

    if (husart->RxXferCount != 0x00U)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d04c      	beq.n	8009f18 <USART_TransmitReceive_IT+0x140>
    {
      if (__HAL_USART_GET_FLAG(husart, USART_FLAG_RXNE) != RESET)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f003 0320 	and.w	r3, r3, #32
 8009e88:	2b20      	cmp	r3, #32
 8009e8a:	d145      	bne.n	8009f18 <USART_TransmitReceive_IT+0x140>
      {
        if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009e94:	d115      	bne.n	8009ec2 <USART_TransmitReceive_IT+0xea>
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d111      	bne.n	8009ec2 <USART_TransmitReceive_IT+0xea>
        {
          pdatarx16bits = (uint16_t *) husart->pRxBuffPtr;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ea2:	60bb      	str	r3, [r7, #8]
          *pdatarx16bits = (uint16_t)(husart->Instance->DR & (uint16_t)0x01FF);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	b29b      	uxth	r3, r3
 8009eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009eb0:	b29a      	uxth	r2, r3
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	801a      	strh	r2, [r3, #0]
          husart->pRxBuffPtr += 2U;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eba:	1c9a      	adds	r2, r3, #2
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8009ec0:	e023      	b.n	8009f0a <USART_TransmitReceive_IT+0x132>
        }
        else
        {
          if ((husart->Init.WordLength == USART_WORDLENGTH_9B) || ((husart->Init.WordLength == USART_WORDLENGTH_8B) && (husart->Init.Parity == USART_PARITY_NONE)))
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	689b      	ldr	r3, [r3, #8]
 8009ec6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009eca:	d007      	beq.n	8009edc <USART_TransmitReceive_IT+0x104>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689b      	ldr	r3, [r3, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d10b      	bne.n	8009eec <USART_TransmitReceive_IT+0x114>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	691b      	ldr	r3, [r3, #16]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d107      	bne.n	8009eec <USART_TransmitReceive_IT+0x114>
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x00FF);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ee6:	b2d2      	uxtb	r2, r2
 8009ee8:	701a      	strb	r2, [r3, #0]
 8009eea:	e009      	b.n	8009f00 <USART_TransmitReceive_IT+0x128>
          }
          else
          {
            *husart->pRxBuffPtr = (uint8_t)(husart->Instance->DR & (uint8_t)0x007F);
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	685b      	ldr	r3, [r3, #4]
 8009ef2:	b2da      	uxtb	r2, r3
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ef8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8009efc:	b2d2      	uxtb	r2, r2
 8009efe:	701a      	strb	r2, [r3, #0]
          }
          husart->pRxBuffPtr += 1U;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f04:	1c5a      	adds	r2, r3, #1
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	62da      	str	r2, [r3, #44]	@ 0x2c
        }

        husart->RxXferCount--;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f0e:	b29b      	uxth	r3, r3
 8009f10:	3b01      	subs	r3, #1
 8009f12:	b29a      	uxth	r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	865a      	strh	r2, [r3, #50]	@ 0x32
      }
    }

    /* Check the latest data received */
    if (husart->RxXferCount == 0U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8009f1c:	b29b      	uxth	r3, r3
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d120      	bne.n	8009f64 <USART_TransmitReceive_IT+0x18c>
    {
      /* Disable the USART RXNE Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_RXNEIE);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68da      	ldr	r2, [r3, #12]
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f022 0220 	bic.w	r2, r2, #32
 8009f30:	60da      	str	r2, [r3, #12]

      /* Disable the USART Parity Error Interrupt */
      CLEAR_BIT(husart->Instance->CR1, USART_CR1_PEIE);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	68da      	ldr	r2, [r3, #12]
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009f40:	60da      	str	r2, [r3, #12]

      /* Disable the USART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(husart->Instance->CR3, USART_CR3_EIE);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	695a      	ldr	r2, [r3, #20]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 0201 	bic.w	r2, r2, #1
 8009f50:	615a      	str	r2, [r3, #20]

      husart->State = HAL_USART_STATE_READY;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2201      	movs	r2, #1
 8009f56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_USART_REGISTER_CALLBACKS == 1)
      /* Call registered Tx Rx Complete Callback */
      husart->TxRxCpltCallback(husart);
#else
      /* Call legacy weak Tx Rx Complete Callback */
      HAL_USART_TxRxCpltCallback(husart);
 8009f5a:	6878      	ldr	r0, [r7, #4]
 8009f5c:	f7ff fe00 	bl	8009b60 <HAL_USART_TxRxCpltCallback>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */

      return HAL_OK;
 8009f60:	2300      	movs	r3, #0
 8009f62:	e002      	b.n	8009f6a <USART_TransmitReceive_IT+0x192>
    }

    return HAL_OK;
 8009f64:	2300      	movs	r3, #0
 8009f66:	e000      	b.n	8009f6a <USART_TransmitReceive_IT+0x192>
  }
  else
  {
    return HAL_BUSY;
 8009f68:	2302      	movs	r3, #2
  }
}
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	3710      	adds	r7, #16
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	bd80      	pop	{r7, pc}
	...

08009f74 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8009f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f78:	b0c6      	sub	sp, #280	@ 0x118
 8009f7a:	af00      	add	r7, sp, #0
 8009f7c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8009f80:	2300      	movs	r3, #0
 8009f82:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8009f86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	68d9      	ldr	r1, [r3, #12]
 8009f8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f92:	681a      	ldr	r2, [r3, #0]
 8009f94:	f021 030c 	bic.w	r3, r1, #12
 8009f98:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8009f9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8009fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009faa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8009fae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8009fb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fb6:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8009fb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fbc:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8009fbe:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8009fc0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fc4:	6a1b      	ldr	r3, [r3, #32]
 8009fc6:	431a      	orrs	r2, r3
 8009fc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fcc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fd4:	4313      	orrs	r3, r2
 8009fd6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009fda:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8009fde:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009fe8:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8009fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8009ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ffa:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8009ffe:	f023 030c 	bic.w	r3, r3, #12
 800a002:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800a006:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a00a:	689a      	ldr	r2, [r3, #8]
 800a00c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	431a      	orrs	r2, r3
 800a014:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a018:	695b      	ldr	r3, [r3, #20]
 800a01a:	431a      	orrs	r2, r3
 800a01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a020:	4313      	orrs	r3, r2
 800a022:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a026:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 800a02a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800a034:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800a036:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	6959      	ldr	r1, [r3, #20]
 800a03e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 800a048:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 800a04a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	4b8b      	ldr	r3, [pc, #556]	@ (800a280 <USART_SetConfig+0x30c>)
 800a052:	429a      	cmp	r2, r3
 800a054:	d006      	beq.n	800a064 <USART_SetConfig+0xf0>
 800a056:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	4b89      	ldr	r3, [pc, #548]	@ (800a284 <USART_SetConfig+0x310>)
 800a05e:	429a      	cmp	r2, r3
 800a060:	f040 8114 	bne.w	800a28c <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800a064:	f7fe fc44 	bl	80088f0 <HAL_RCC_GetPCLK2Freq>
 800a068:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800a06c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a070:	2200      	movs	r2, #0
 800a072:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800a076:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 800a07a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800a07e:	4622      	mov	r2, r4
 800a080:	462b      	mov	r3, r5
 800a082:	1891      	adds	r1, r2, r2
 800a084:	6739      	str	r1, [r7, #112]	@ 0x70
 800a086:	415b      	adcs	r3, r3
 800a088:	677b      	str	r3, [r7, #116]	@ 0x74
 800a08a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800a08e:	4621      	mov	r1, r4
 800a090:	eb12 0801 	adds.w	r8, r2, r1
 800a094:	4629      	mov	r1, r5
 800a096:	eb43 0901 	adc.w	r9, r3, r1
 800a09a:	f04f 0200 	mov.w	r2, #0
 800a09e:	f04f 0300 	mov.w	r3, #0
 800a0a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a0a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a0aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a0ae:	4690      	mov	r8, r2
 800a0b0:	4699      	mov	r9, r3
 800a0b2:	4623      	mov	r3, r4
 800a0b4:	eb18 0303 	adds.w	r3, r8, r3
 800a0b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800a0bc:	462b      	mov	r3, r5
 800a0be:	eb49 0303 	adc.w	r3, r9, r3
 800a0c2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800a0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a0ca:	685b      	ldr	r3, [r3, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800a0d2:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800a0d6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800a0da:	460b      	mov	r3, r1
 800a0dc:	18db      	adds	r3, r3, r3
 800a0de:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	eb42 0303 	adc.w	r3, r2, r3
 800a0e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a0e8:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800a0ec:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 800a0f0:	f7f6 f872 	bl	80001d8 <__aeabi_uldivmod>
 800a0f4:	4602      	mov	r2, r0
 800a0f6:	460b      	mov	r3, r1
 800a0f8:	4b63      	ldr	r3, [pc, #396]	@ (800a288 <USART_SetConfig+0x314>)
 800a0fa:	fba3 2302 	umull	r2, r3, r3, r2
 800a0fe:	095b      	lsrs	r3, r3, #5
 800a100:	011c      	lsls	r4, r3, #4
 800a102:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a106:	2200      	movs	r2, #0
 800a108:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a10c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a110:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800a114:	4642      	mov	r2, r8
 800a116:	464b      	mov	r3, r9
 800a118:	1891      	adds	r1, r2, r2
 800a11a:	6639      	str	r1, [r7, #96]	@ 0x60
 800a11c:	415b      	adcs	r3, r3
 800a11e:	667b      	str	r3, [r7, #100]	@ 0x64
 800a120:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800a124:	4641      	mov	r1, r8
 800a126:	1851      	adds	r1, r2, r1
 800a128:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a12a:	4649      	mov	r1, r9
 800a12c:	414b      	adcs	r3, r1
 800a12e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a130:	f04f 0200 	mov.w	r2, #0
 800a134:	f04f 0300 	mov.w	r3, #0
 800a138:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 800a13c:	4659      	mov	r1, fp
 800a13e:	00cb      	lsls	r3, r1, #3
 800a140:	4651      	mov	r1, sl
 800a142:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a146:	4651      	mov	r1, sl
 800a148:	00ca      	lsls	r2, r1, #3
 800a14a:	4610      	mov	r0, r2
 800a14c:	4619      	mov	r1, r3
 800a14e:	4603      	mov	r3, r0
 800a150:	4642      	mov	r2, r8
 800a152:	189b      	adds	r3, r3, r2
 800a154:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a158:	464b      	mov	r3, r9
 800a15a:	460a      	mov	r2, r1
 800a15c:	eb42 0303 	adc.w	r3, r2, r3
 800a160:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a164:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a168:	685b      	ldr	r3, [r3, #4]
 800a16a:	2200      	movs	r2, #0
 800a16c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a170:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a174:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a178:	460b      	mov	r3, r1
 800a17a:	18db      	adds	r3, r3, r3
 800a17c:	653b      	str	r3, [r7, #80]	@ 0x50
 800a17e:	4613      	mov	r3, r2
 800a180:	eb42 0303 	adc.w	r3, r2, r3
 800a184:	657b      	str	r3, [r7, #84]	@ 0x54
 800a186:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a18a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a18e:	f7f6 f823 	bl	80001d8 <__aeabi_uldivmod>
 800a192:	4602      	mov	r2, r0
 800a194:	460b      	mov	r3, r1
 800a196:	4611      	mov	r1, r2
 800a198:	4b3b      	ldr	r3, [pc, #236]	@ (800a288 <USART_SetConfig+0x314>)
 800a19a:	fba3 2301 	umull	r2, r3, r3, r1
 800a19e:	095b      	lsrs	r3, r3, #5
 800a1a0:	2264      	movs	r2, #100	@ 0x64
 800a1a2:	fb02 f303 	mul.w	r3, r2, r3
 800a1a6:	1acb      	subs	r3, r1, r3
 800a1a8:	00db      	lsls	r3, r3, #3
 800a1aa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a1ae:	4b36      	ldr	r3, [pc, #216]	@ (800a288 <USART_SetConfig+0x314>)
 800a1b0:	fba3 2302 	umull	r2, r3, r3, r2
 800a1b4:	095b      	lsrs	r3, r3, #5
 800a1b6:	005b      	lsls	r3, r3, #1
 800a1b8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a1bc:	441c      	add	r4, r3
 800a1be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a1c2:	2200      	movs	r2, #0
 800a1c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a1c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a1cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a1d0:	4642      	mov	r2, r8
 800a1d2:	464b      	mov	r3, r9
 800a1d4:	1891      	adds	r1, r2, r2
 800a1d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a1d8:	415b      	adcs	r3, r3
 800a1da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a1dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a1e0:	4641      	mov	r1, r8
 800a1e2:	1851      	adds	r1, r2, r1
 800a1e4:	6439      	str	r1, [r7, #64]	@ 0x40
 800a1e6:	4649      	mov	r1, r9
 800a1e8:	414b      	adcs	r3, r1
 800a1ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800a1ec:	f04f 0200 	mov.w	r2, #0
 800a1f0:	f04f 0300 	mov.w	r3, #0
 800a1f4:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 800a1f8:	4659      	mov	r1, fp
 800a1fa:	00cb      	lsls	r3, r1, #3
 800a1fc:	4651      	mov	r1, sl
 800a1fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a202:	4651      	mov	r1, sl
 800a204:	00ca      	lsls	r2, r1, #3
 800a206:	4610      	mov	r0, r2
 800a208:	4619      	mov	r1, r3
 800a20a:	4603      	mov	r3, r0
 800a20c:	4642      	mov	r2, r8
 800a20e:	189b      	adds	r3, r3, r2
 800a210:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a214:	464b      	mov	r3, r9
 800a216:	460a      	mov	r2, r1
 800a218:	eb42 0303 	adc.w	r3, r2, r3
 800a21c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a220:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a22c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a230:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a234:	460b      	mov	r3, r1
 800a236:	18db      	adds	r3, r3, r3
 800a238:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a23a:	4613      	mov	r3, r2
 800a23c:	eb42 0303 	adc.w	r3, r2, r3
 800a240:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a242:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a246:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a24a:	f7f5 ffc5 	bl	80001d8 <__aeabi_uldivmod>
 800a24e:	4602      	mov	r2, r0
 800a250:	460b      	mov	r3, r1
 800a252:	4b0d      	ldr	r3, [pc, #52]	@ (800a288 <USART_SetConfig+0x314>)
 800a254:	fba3 1302 	umull	r1, r3, r3, r2
 800a258:	095b      	lsrs	r3, r3, #5
 800a25a:	2164      	movs	r1, #100	@ 0x64
 800a25c:	fb01 f303 	mul.w	r3, r1, r3
 800a260:	1ad3      	subs	r3, r2, r3
 800a262:	00db      	lsls	r3, r3, #3
 800a264:	3332      	adds	r3, #50	@ 0x32
 800a266:	4a08      	ldr	r2, [pc, #32]	@ (800a288 <USART_SetConfig+0x314>)
 800a268:	fba2 2303 	umull	r2, r3, r2, r3
 800a26c:	095b      	lsrs	r3, r3, #5
 800a26e:	f003 0207 	and.w	r2, r3, #7
 800a272:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	4422      	add	r2, r4
 800a27a:	609a      	str	r2, [r3, #8]
 800a27c:	e109      	b.n	800a492 <USART_SetConfig+0x51e>
 800a27e:	bf00      	nop
 800a280:	40011000 	.word	0x40011000
 800a284:	40011400 	.word	0x40011400
 800a288:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800a28c:	f7fe fb1c 	bl	80088c8 <HAL_RCC_GetPCLK1Freq>
 800a290:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 800a294:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a298:	2200      	movs	r2, #0
 800a29a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a29e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a2a2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a2a6:	4642      	mov	r2, r8
 800a2a8:	464b      	mov	r3, r9
 800a2aa:	1891      	adds	r1, r2, r2
 800a2ac:	6339      	str	r1, [r7, #48]	@ 0x30
 800a2ae:	415b      	adcs	r3, r3
 800a2b0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a2b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800a2b6:	4641      	mov	r1, r8
 800a2b8:	1854      	adds	r4, r2, r1
 800a2ba:	4649      	mov	r1, r9
 800a2bc:	eb43 0501 	adc.w	r5, r3, r1
 800a2c0:	f04f 0200 	mov.w	r2, #0
 800a2c4:	f04f 0300 	mov.w	r3, #0
 800a2c8:	00eb      	lsls	r3, r5, #3
 800a2ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a2ce:	00e2      	lsls	r2, r4, #3
 800a2d0:	4614      	mov	r4, r2
 800a2d2:	461d      	mov	r5, r3
 800a2d4:	4643      	mov	r3, r8
 800a2d6:	18e3      	adds	r3, r4, r3
 800a2d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a2dc:	464b      	mov	r3, r9
 800a2de:	eb45 0303 	adc.w	r3, r5, r3
 800a2e2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a2e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a2f2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a2f6:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a2fa:	460b      	mov	r3, r1
 800a2fc:	18db      	adds	r3, r3, r3
 800a2fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a300:	4613      	mov	r3, r2
 800a302:	eb42 0303 	adc.w	r3, r2, r3
 800a306:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a308:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a30c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a310:	f7f5 ff62 	bl	80001d8 <__aeabi_uldivmod>
 800a314:	4602      	mov	r2, r0
 800a316:	460b      	mov	r3, r1
 800a318:	4b61      	ldr	r3, [pc, #388]	@ (800a4a0 <USART_SetConfig+0x52c>)
 800a31a:	fba3 2302 	umull	r2, r3, r3, r2
 800a31e:	095b      	lsrs	r3, r3, #5
 800a320:	011c      	lsls	r4, r3, #4
 800a322:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a326:	2200      	movs	r2, #0
 800a328:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a32c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a330:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a334:	4642      	mov	r2, r8
 800a336:	464b      	mov	r3, r9
 800a338:	1891      	adds	r1, r2, r2
 800a33a:	6239      	str	r1, [r7, #32]
 800a33c:	415b      	adcs	r3, r3
 800a33e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a340:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a344:	4641      	mov	r1, r8
 800a346:	eb12 0a01 	adds.w	sl, r2, r1
 800a34a:	4649      	mov	r1, r9
 800a34c:	eb43 0b01 	adc.w	fp, r3, r1
 800a350:	f04f 0200 	mov.w	r2, #0
 800a354:	f04f 0300 	mov.w	r3, #0
 800a358:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a35c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a364:	4692      	mov	sl, r2
 800a366:	469b      	mov	fp, r3
 800a368:	4643      	mov	r3, r8
 800a36a:	eb1a 0303 	adds.w	r3, sl, r3
 800a36e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a372:	464b      	mov	r3, r9
 800a374:	eb4b 0303 	adc.w	r3, fp, r3
 800a378:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a37c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a388:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a38c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800a390:	460b      	mov	r3, r1
 800a392:	18db      	adds	r3, r3, r3
 800a394:	61bb      	str	r3, [r7, #24]
 800a396:	4613      	mov	r3, r2
 800a398:	eb42 0303 	adc.w	r3, r2, r3
 800a39c:	61fb      	str	r3, [r7, #28]
 800a39e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a3a2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a3a6:	f7f5 ff17 	bl	80001d8 <__aeabi_uldivmod>
 800a3aa:	4602      	mov	r2, r0
 800a3ac:	460b      	mov	r3, r1
 800a3ae:	4611      	mov	r1, r2
 800a3b0:	4b3b      	ldr	r3, [pc, #236]	@ (800a4a0 <USART_SetConfig+0x52c>)
 800a3b2:	fba3 2301 	umull	r2, r3, r3, r1
 800a3b6:	095b      	lsrs	r3, r3, #5
 800a3b8:	2264      	movs	r2, #100	@ 0x64
 800a3ba:	fb02 f303 	mul.w	r3, r2, r3
 800a3be:	1acb      	subs	r3, r1, r3
 800a3c0:	00db      	lsls	r3, r3, #3
 800a3c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a3c6:	4b36      	ldr	r3, [pc, #216]	@ (800a4a0 <USART_SetConfig+0x52c>)
 800a3c8:	fba3 2302 	umull	r2, r3, r3, r2
 800a3cc:	095b      	lsrs	r3, r3, #5
 800a3ce:	005b      	lsls	r3, r3, #1
 800a3d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a3d4:	441c      	add	r4, r3
 800a3d6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800a3da:	2200      	movs	r2, #0
 800a3dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a3e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a3e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a3e8:	4642      	mov	r2, r8
 800a3ea:	464b      	mov	r3, r9
 800a3ec:	1891      	adds	r1, r2, r2
 800a3ee:	6139      	str	r1, [r7, #16]
 800a3f0:	415b      	adcs	r3, r3
 800a3f2:	617b      	str	r3, [r7, #20]
 800a3f4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800a3f8:	4641      	mov	r1, r8
 800a3fa:	1851      	adds	r1, r2, r1
 800a3fc:	60b9      	str	r1, [r7, #8]
 800a3fe:	4649      	mov	r1, r9
 800a400:	414b      	adcs	r3, r1
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	f04f 0200 	mov.w	r2, #0
 800a408:	f04f 0300 	mov.w	r3, #0
 800a40c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800a410:	4659      	mov	r1, fp
 800a412:	00cb      	lsls	r3, r1, #3
 800a414:	4651      	mov	r1, sl
 800a416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a41a:	4651      	mov	r1, sl
 800a41c:	00ca      	lsls	r2, r1, #3
 800a41e:	4610      	mov	r0, r2
 800a420:	4619      	mov	r1, r3
 800a422:	4603      	mov	r3, r0
 800a424:	4642      	mov	r2, r8
 800a426:	189b      	adds	r3, r3, r2
 800a428:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a42c:	464b      	mov	r3, r9
 800a42e:	460a      	mov	r2, r1
 800a430:	eb42 0303 	adc.w	r3, r2, r3
 800a434:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a438:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	2200      	movs	r2, #0
 800a440:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a442:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a444:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800a448:	460b      	mov	r3, r1
 800a44a:	18db      	adds	r3, r3, r3
 800a44c:	603b      	str	r3, [r7, #0]
 800a44e:	4613      	mov	r3, r2
 800a450:	eb42 0303 	adc.w	r3, r2, r3
 800a454:	607b      	str	r3, [r7, #4]
 800a456:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a45a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a45e:	f7f5 febb 	bl	80001d8 <__aeabi_uldivmod>
 800a462:	4602      	mov	r2, r0
 800a464:	460b      	mov	r3, r1
 800a466:	4b0e      	ldr	r3, [pc, #56]	@ (800a4a0 <USART_SetConfig+0x52c>)
 800a468:	fba3 1302 	umull	r1, r3, r3, r2
 800a46c:	095b      	lsrs	r3, r3, #5
 800a46e:	2164      	movs	r1, #100	@ 0x64
 800a470:	fb01 f303 	mul.w	r3, r1, r3
 800a474:	1ad3      	subs	r3, r2, r3
 800a476:	00db      	lsls	r3, r3, #3
 800a478:	3332      	adds	r3, #50	@ 0x32
 800a47a:	4a09      	ldr	r2, [pc, #36]	@ (800a4a0 <USART_SetConfig+0x52c>)
 800a47c:	fba2 2303 	umull	r2, r3, r2, r3
 800a480:	095b      	lsrs	r3, r3, #5
 800a482:	f003 0207 	and.w	r2, r3, #7
 800a486:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4422      	add	r2, r4
 800a48e:	609a      	str	r2, [r3, #8]
  }
}
 800a490:	bf00      	nop
 800a492:	bf00      	nop
 800a494:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 800a498:	46bd      	mov	sp, r7
 800a49a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a49e:	bf00      	nop
 800a4a0:	51eb851f 	.word	0x51eb851f

0800a4a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a4a4:	b084      	sub	sp, #16
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b084      	sub	sp, #16
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	f107 001c 	add.w	r0, r7, #28
 800a4b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a4b6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a4ba:	2b01      	cmp	r3, #1
 800a4bc:	d123      	bne.n	800a506 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a4c2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a4d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a4d6:	687a      	ldr	r2, [r7, #4]
 800a4d8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a4e6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a4ea:	2b01      	cmp	r3, #1
 800a4ec:	d105      	bne.n	800a4fa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	68db      	ldr	r3, [r3, #12]
 800a4f2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 fae8 	bl	800bad0 <USB_CoreReset>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]
 800a504:	e01b      	b.n	800a53e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	68db      	ldr	r3, [r3, #12]
 800a50a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f001 fadc 	bl	800bad0 <USB_CoreReset>
 800a518:	4603      	mov	r3, r0
 800a51a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a51c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a520:	2b00      	cmp	r3, #0
 800a522:	d106      	bne.n	800a532 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a528:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	639a      	str	r2, [r3, #56]	@ 0x38
 800a530:	e005      	b.n	800a53e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a536:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a53e:	7fbb      	ldrb	r3, [r7, #30]
 800a540:	2b01      	cmp	r3, #1
 800a542:	d10b      	bne.n	800a55c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	689b      	ldr	r3, [r3, #8]
 800a548:	f043 0206 	orr.w	r2, r3, #6
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	f043 0220 	orr.w	r2, r3, #32
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a55c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a568:	b004      	add	sp, #16
 800a56a:	4770      	bx	lr

0800a56c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b087      	sub	sp, #28
 800a570:	af00      	add	r7, sp, #0
 800a572:	60f8      	str	r0, [r7, #12]
 800a574:	60b9      	str	r1, [r7, #8]
 800a576:	4613      	mov	r3, r2
 800a578:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a57a:	79fb      	ldrb	r3, [r7, #7]
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d165      	bne.n	800a64c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	4a41      	ldr	r2, [pc, #260]	@ (800a688 <USB_SetTurnaroundTime+0x11c>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d906      	bls.n	800a596 <USB_SetTurnaroundTime+0x2a>
 800a588:	68bb      	ldr	r3, [r7, #8]
 800a58a:	4a40      	ldr	r2, [pc, #256]	@ (800a68c <USB_SetTurnaroundTime+0x120>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d202      	bcs.n	800a596 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a590:	230f      	movs	r3, #15
 800a592:	617b      	str	r3, [r7, #20]
 800a594:	e062      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	4a3c      	ldr	r2, [pc, #240]	@ (800a68c <USB_SetTurnaroundTime+0x120>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d306      	bcc.n	800a5ac <USB_SetTurnaroundTime+0x40>
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	4a3b      	ldr	r2, [pc, #236]	@ (800a690 <USB_SetTurnaroundTime+0x124>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d202      	bcs.n	800a5ac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a5a6:	230e      	movs	r3, #14
 800a5a8:	617b      	str	r3, [r7, #20]
 800a5aa:	e057      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4a38      	ldr	r2, [pc, #224]	@ (800a690 <USB_SetTurnaroundTime+0x124>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d306      	bcc.n	800a5c2 <USB_SetTurnaroundTime+0x56>
 800a5b4:	68bb      	ldr	r3, [r7, #8]
 800a5b6:	4a37      	ldr	r2, [pc, #220]	@ (800a694 <USB_SetTurnaroundTime+0x128>)
 800a5b8:	4293      	cmp	r3, r2
 800a5ba:	d202      	bcs.n	800a5c2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a5bc:	230d      	movs	r3, #13
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	e04c      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	4a33      	ldr	r2, [pc, #204]	@ (800a694 <USB_SetTurnaroundTime+0x128>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d306      	bcc.n	800a5d8 <USB_SetTurnaroundTime+0x6c>
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	4a32      	ldr	r2, [pc, #200]	@ (800a698 <USB_SetTurnaroundTime+0x12c>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d802      	bhi.n	800a5d8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a5d2:	230c      	movs	r3, #12
 800a5d4:	617b      	str	r3, [r7, #20]
 800a5d6:	e041      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	4a2f      	ldr	r2, [pc, #188]	@ (800a698 <USB_SetTurnaroundTime+0x12c>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d906      	bls.n	800a5ee <USB_SetTurnaroundTime+0x82>
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	4a2e      	ldr	r2, [pc, #184]	@ (800a69c <USB_SetTurnaroundTime+0x130>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d802      	bhi.n	800a5ee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a5e8:	230b      	movs	r3, #11
 800a5ea:	617b      	str	r3, [r7, #20]
 800a5ec:	e036      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	4a2a      	ldr	r2, [pc, #168]	@ (800a69c <USB_SetTurnaroundTime+0x130>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d906      	bls.n	800a604 <USB_SetTurnaroundTime+0x98>
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	4a29      	ldr	r2, [pc, #164]	@ (800a6a0 <USB_SetTurnaroundTime+0x134>)
 800a5fa:	4293      	cmp	r3, r2
 800a5fc:	d802      	bhi.n	800a604 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a5fe:	230a      	movs	r3, #10
 800a600:	617b      	str	r3, [r7, #20]
 800a602:	e02b      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a604:	68bb      	ldr	r3, [r7, #8]
 800a606:	4a26      	ldr	r2, [pc, #152]	@ (800a6a0 <USB_SetTurnaroundTime+0x134>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d906      	bls.n	800a61a <USB_SetTurnaroundTime+0xae>
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	4a25      	ldr	r2, [pc, #148]	@ (800a6a4 <USB_SetTurnaroundTime+0x138>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d202      	bcs.n	800a61a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a614:	2309      	movs	r3, #9
 800a616:	617b      	str	r3, [r7, #20]
 800a618:	e020      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	4a21      	ldr	r2, [pc, #132]	@ (800a6a4 <USB_SetTurnaroundTime+0x138>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d306      	bcc.n	800a630 <USB_SetTurnaroundTime+0xc4>
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	4a20      	ldr	r2, [pc, #128]	@ (800a6a8 <USB_SetTurnaroundTime+0x13c>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d802      	bhi.n	800a630 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a62a:	2308      	movs	r3, #8
 800a62c:	617b      	str	r3, [r7, #20]
 800a62e:	e015      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a630:	68bb      	ldr	r3, [r7, #8]
 800a632:	4a1d      	ldr	r2, [pc, #116]	@ (800a6a8 <USB_SetTurnaroundTime+0x13c>)
 800a634:	4293      	cmp	r3, r2
 800a636:	d906      	bls.n	800a646 <USB_SetTurnaroundTime+0xda>
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	4a1c      	ldr	r2, [pc, #112]	@ (800a6ac <USB_SetTurnaroundTime+0x140>)
 800a63c:	4293      	cmp	r3, r2
 800a63e:	d202      	bcs.n	800a646 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a640:	2307      	movs	r3, #7
 800a642:	617b      	str	r3, [r7, #20]
 800a644:	e00a      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a646:	2306      	movs	r3, #6
 800a648:	617b      	str	r3, [r7, #20]
 800a64a:	e007      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a64c:	79fb      	ldrb	r3, [r7, #7]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d102      	bne.n	800a658 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a652:	2309      	movs	r3, #9
 800a654:	617b      	str	r3, [r7, #20]
 800a656:	e001      	b.n	800a65c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a658:	2309      	movs	r3, #9
 800a65a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	68db      	ldr	r3, [r3, #12]
 800a660:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	029b      	lsls	r3, r3, #10
 800a670:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a674:	431a      	orrs	r2, r3
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a67a:	2300      	movs	r3, #0
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	371c      	adds	r7, #28
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr
 800a688:	00d8acbf 	.word	0x00d8acbf
 800a68c:	00e4e1c0 	.word	0x00e4e1c0
 800a690:	00f42400 	.word	0x00f42400
 800a694:	01067380 	.word	0x01067380
 800a698:	011a499f 	.word	0x011a499f
 800a69c:	01312cff 	.word	0x01312cff
 800a6a0:	014ca43f 	.word	0x014ca43f
 800a6a4:	016e3600 	.word	0x016e3600
 800a6a8:	01a6ab1f 	.word	0x01a6ab1f
 800a6ac:	01e84800 	.word	0x01e84800

0800a6b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	f043 0201 	orr.w	r2, r3, #1
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr

0800a6d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6d2:	b480      	push	{r7}
 800a6d4:	b083      	sub	sp, #12
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	689b      	ldr	r3, [r3, #8]
 800a6de:	f023 0201 	bic.w	r2, r3, #1
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a6e6:	2300      	movs	r3, #0
}
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b084      	sub	sp, #16
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
 800a6fc:	460b      	mov	r3, r1
 800a6fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a700:	2300      	movs	r3, #0
 800a702:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68db      	ldr	r3, [r3, #12]
 800a708:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a710:	78fb      	ldrb	r3, [r7, #3]
 800a712:	2b01      	cmp	r3, #1
 800a714:	d115      	bne.n	800a742 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	68db      	ldr	r3, [r3, #12]
 800a71a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a722:	200a      	movs	r0, #10
 800a724:	f7f7 fffc 	bl	8002720 <HAL_Delay>
      ms += 10U;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	330a      	adds	r3, #10
 800a72c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a72e:	6878      	ldr	r0, [r7, #4]
 800a730:	f001 f93f 	bl	800b9b2 <USB_GetMode>
 800a734:	4603      	mov	r3, r0
 800a736:	2b01      	cmp	r3, #1
 800a738:	d01e      	beq.n	800a778 <USB_SetCurrentMode+0x84>
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2bc7      	cmp	r3, #199	@ 0xc7
 800a73e:	d9f0      	bls.n	800a722 <USB_SetCurrentMode+0x2e>
 800a740:	e01a      	b.n	800a778 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a742:	78fb      	ldrb	r3, [r7, #3]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d115      	bne.n	800a774 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68db      	ldr	r3, [r3, #12]
 800a74c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a754:	200a      	movs	r0, #10
 800a756:	f7f7 ffe3 	bl	8002720 <HAL_Delay>
      ms += 10U;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	330a      	adds	r3, #10
 800a75e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f001 f926 	bl	800b9b2 <USB_GetMode>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d005      	beq.n	800a778 <USB_SetCurrentMode+0x84>
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2bc7      	cmp	r3, #199	@ 0xc7
 800a770:	d9f0      	bls.n	800a754 <USB_SetCurrentMode+0x60>
 800a772:	e001      	b.n	800a778 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a774:	2301      	movs	r3, #1
 800a776:	e005      	b.n	800a784 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2bc8      	cmp	r3, #200	@ 0xc8
 800a77c:	d101      	bne.n	800a782 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e000      	b.n	800a784 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a782:	2300      	movs	r3, #0
}
 800a784:	4618      	mov	r0, r3
 800a786:	3710      	adds	r7, #16
 800a788:	46bd      	mov	sp, r7
 800a78a:	bd80      	pop	{r7, pc}

0800a78c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a78c:	b084      	sub	sp, #16
 800a78e:	b580      	push	{r7, lr}
 800a790:	b086      	sub	sp, #24
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
 800a796:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a79a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a79e:	2300      	movs	r3, #0
 800a7a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a7a6:	2300      	movs	r3, #0
 800a7a8:	613b      	str	r3, [r7, #16]
 800a7aa:	e009      	b.n	800a7c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	3340      	adds	r3, #64	@ 0x40
 800a7b2:	009b      	lsls	r3, r3, #2
 800a7b4:	4413      	add	r3, r2
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	3301      	adds	r3, #1
 800a7be:	613b      	str	r3, [r7, #16]
 800a7c0:	693b      	ldr	r3, [r7, #16]
 800a7c2:	2b0e      	cmp	r3, #14
 800a7c4:	d9f2      	bls.n	800a7ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a7c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d11c      	bne.n	800a808 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	68fa      	ldr	r2, [r7, #12]
 800a7d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7dc:	f043 0302 	orr.w	r3, r3, #2
 800a7e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	639a      	str	r2, [r3, #56]	@ 0x38
 800a806:	e00b      	b.n	800a820 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a80c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a818:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a826:	461a      	mov	r2, r3
 800a828:	2300      	movs	r3, #0
 800a82a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a82c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a830:	2b01      	cmp	r3, #1
 800a832:	d10d      	bne.n	800a850 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d104      	bne.n	800a846 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a83c:	2100      	movs	r1, #0
 800a83e:	6878      	ldr	r0, [r7, #4]
 800a840:	f000 f968 	bl	800ab14 <USB_SetDevSpeed>
 800a844:	e008      	b.n	800a858 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a846:	2101      	movs	r1, #1
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f963 	bl	800ab14 <USB_SetDevSpeed>
 800a84e:	e003      	b.n	800a858 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a850:	2103      	movs	r1, #3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 f95e 	bl	800ab14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a858:	2110      	movs	r1, #16
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 f8fa 	bl	800aa54 <USB_FlushTxFifo>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	f000 f924 	bl	800aab8 <USB_FlushRxFifo>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a880:	461a      	mov	r2, r3
 800a882:	2300      	movs	r3, #0
 800a884:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a88c:	461a      	mov	r2, r3
 800a88e:	2300      	movs	r3, #0
 800a890:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a898:	461a      	mov	r2, r3
 800a89a:	2300      	movs	r3, #0
 800a89c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a89e:	2300      	movs	r3, #0
 800a8a0:	613b      	str	r3, [r7, #16]
 800a8a2:	e043      	b.n	800a92c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8a4:	693b      	ldr	r3, [r7, #16]
 800a8a6:	015a      	lsls	r2, r3, #5
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	4413      	add	r3, r2
 800a8ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a8b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a8ba:	d118      	bne.n	800a8ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	d10a      	bne.n	800a8d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	015a      	lsls	r2, r3, #5
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	4413      	add	r3, r2
 800a8ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8ce:	461a      	mov	r2, r3
 800a8d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a8d4:	6013      	str	r3, [r2, #0]
 800a8d6:	e013      	b.n	800a900 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a8d8:	693b      	ldr	r3, [r7, #16]
 800a8da:	015a      	lsls	r2, r3, #5
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	4413      	add	r3, r2
 800a8e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a8ea:	6013      	str	r3, [r2, #0]
 800a8ec:	e008      	b.n	800a900 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8fa:	461a      	mov	r2, r3
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	015a      	lsls	r2, r3, #5
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	4413      	add	r3, r2
 800a908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a90c:	461a      	mov	r2, r3
 800a90e:	2300      	movs	r3, #0
 800a910:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a91e:	461a      	mov	r2, r3
 800a920:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a924:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a926:	693b      	ldr	r3, [r7, #16]
 800a928:	3301      	adds	r3, #1
 800a92a:	613b      	str	r3, [r7, #16]
 800a92c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a930:	461a      	mov	r2, r3
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	4293      	cmp	r3, r2
 800a936:	d3b5      	bcc.n	800a8a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a938:	2300      	movs	r3, #0
 800a93a:	613b      	str	r3, [r7, #16]
 800a93c:	e043      	b.n	800a9c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a93e:	693b      	ldr	r3, [r7, #16]
 800a940:	015a      	lsls	r2, r3, #5
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	4413      	add	r3, r2
 800a946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a950:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a954:	d118      	bne.n	800a988 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d10a      	bne.n	800a972 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a968:	461a      	mov	r2, r3
 800a96a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a96e:	6013      	str	r3, [r2, #0]
 800a970:	e013      	b.n	800a99a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	015a      	lsls	r2, r3, #5
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	4413      	add	r3, r2
 800a97a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a97e:	461a      	mov	r2, r3
 800a980:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a984:	6013      	str	r3, [r2, #0]
 800a986:	e008      	b.n	800a99a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a988:	693b      	ldr	r3, [r7, #16]
 800a98a:	015a      	lsls	r2, r3, #5
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	4413      	add	r3, r2
 800a990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a994:	461a      	mov	r2, r3
 800a996:	2300      	movs	r3, #0
 800a998:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a99a:	693b      	ldr	r3, [r7, #16]
 800a99c:	015a      	lsls	r2, r3, #5
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	4413      	add	r3, r2
 800a9a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a9ac:	693b      	ldr	r3, [r7, #16]
 800a9ae:	015a      	lsls	r2, r3, #5
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	4413      	add	r3, r2
 800a9b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9b8:	461a      	mov	r2, r3
 800a9ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a9be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a9c0:	693b      	ldr	r3, [r7, #16]
 800a9c2:	3301      	adds	r3, #1
 800a9c4:	613b      	str	r3, [r7, #16]
 800a9c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	d3b5      	bcc.n	800a93e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	68fa      	ldr	r2, [r7, #12]
 800a9dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a9e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a9f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a9f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d105      	bne.n	800aa08 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	f043 0210 	orr.w	r2, r3, #16
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	699a      	ldr	r2, [r3, #24]
 800aa0c:	4b10      	ldr	r3, [pc, #64]	@ (800aa50 <USB_DevInit+0x2c4>)
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	687a      	ldr	r2, [r7, #4]
 800aa12:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa14:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d005      	beq.n	800aa28 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	f043 0208 	orr.w	r2, r3, #8
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa28:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800aa2c:	2b01      	cmp	r3, #1
 800aa2e:	d107      	bne.n	800aa40 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	699b      	ldr	r3, [r3, #24]
 800aa34:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800aa38:	f043 0304 	orr.w	r3, r3, #4
 800aa3c:	687a      	ldr	r2, [r7, #4]
 800aa3e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa40:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa4c:	b004      	add	sp, #16
 800aa4e:	4770      	bx	lr
 800aa50:	803c3800 	.word	0x803c3800

0800aa54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b085      	sub	sp, #20
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	3301      	adds	r3, #1
 800aa66:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa6e:	d901      	bls.n	800aa74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aa70:	2303      	movs	r3, #3
 800aa72:	e01b      	b.n	800aaac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	691b      	ldr	r3, [r3, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	daf2      	bge.n	800aa62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aa7c:	2300      	movs	r3, #0
 800aa7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	019b      	lsls	r3, r3, #6
 800aa84:	f043 0220 	orr.w	r2, r3, #32
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	3301      	adds	r3, #1
 800aa90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa98:	d901      	bls.n	800aa9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	e006      	b.n	800aaac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	691b      	ldr	r3, [r3, #16]
 800aaa2:	f003 0320 	and.w	r3, r3, #32
 800aaa6:	2b20      	cmp	r3, #32
 800aaa8:	d0f0      	beq.n	800aa8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aaaa:	2300      	movs	r3, #0
}
 800aaac:	4618      	mov	r0, r3
 800aaae:	3714      	adds	r7, #20
 800aab0:	46bd      	mov	sp, r7
 800aab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab6:	4770      	bx	lr

0800aab8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aac0:	2300      	movs	r3, #0
 800aac2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	3301      	adds	r3, #1
 800aac8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aad0:	d901      	bls.n	800aad6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800aad2:	2303      	movs	r3, #3
 800aad4:	e018      	b.n	800ab08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	daf2      	bge.n	800aac4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aade:	2300      	movs	r3, #0
 800aae0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	2210      	movs	r2, #16
 800aae6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	3301      	adds	r3, #1
 800aaec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aaf4:	d901      	bls.n	800aafa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800aaf6:	2303      	movs	r3, #3
 800aaf8:	e006      	b.n	800ab08 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	691b      	ldr	r3, [r3, #16]
 800aafe:	f003 0310 	and.w	r3, r3, #16
 800ab02:	2b10      	cmp	r3, #16
 800ab04:	d0f0      	beq.n	800aae8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab06:	2300      	movs	r3, #0
}
 800ab08:	4618      	mov	r0, r3
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr

0800ab14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab14:	b480      	push	{r7}
 800ab16:	b085      	sub	sp, #20
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	6078      	str	r0, [r7, #4]
 800ab1c:	460b      	mov	r3, r1
 800ab1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	78fb      	ldrb	r3, [r7, #3]
 800ab2e:	68f9      	ldr	r1, [r7, #12]
 800ab30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ab34:	4313      	orrs	r3, r2
 800ab36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800ab46:	b480      	push	{r7}
 800ab48:	b087      	sub	sp, #28
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ab52:	693b      	ldr	r3, [r7, #16]
 800ab54:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ab58:	689b      	ldr	r3, [r3, #8]
 800ab5a:	f003 0306 	and.w	r3, r3, #6
 800ab5e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ab66:	2300      	movs	r3, #0
 800ab68:	75fb      	strb	r3, [r7, #23]
 800ab6a:	e00a      	b.n	800ab82 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	2b02      	cmp	r3, #2
 800ab70:	d002      	beq.n	800ab78 <USB_GetDevSpeed+0x32>
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	2b06      	cmp	r3, #6
 800ab76:	d102      	bne.n	800ab7e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ab78:	2302      	movs	r3, #2
 800ab7a:	75fb      	strb	r3, [r7, #23]
 800ab7c:	e001      	b.n	800ab82 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ab7e:	230f      	movs	r3, #15
 800ab80:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ab82:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab84:	4618      	mov	r0, r3
 800ab86:	371c      	adds	r7, #28
 800ab88:	46bd      	mov	sp, r7
 800ab8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8e:	4770      	bx	lr

0800ab90 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ab90:	b480      	push	{r7}
 800ab92:	b085      	sub	sp, #20
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
 800ab98:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab9e:	683b      	ldr	r3, [r7, #0]
 800aba0:	781b      	ldrb	r3, [r3, #0]
 800aba2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	785b      	ldrb	r3, [r3, #1]
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d13a      	bne.n	800ac22 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abb2:	69da      	ldr	r2, [r3, #28]
 800abb4:	683b      	ldr	r3, [r7, #0]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	f003 030f 	and.w	r3, r3, #15
 800abbc:	2101      	movs	r1, #1
 800abbe:	fa01 f303 	lsl.w	r3, r1, r3
 800abc2:	b29b      	uxth	r3, r3
 800abc4:	68f9      	ldr	r1, [r7, #12]
 800abc6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abca:	4313      	orrs	r3, r2
 800abcc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	015a      	lsls	r2, r3, #5
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	4413      	add	r3, r2
 800abd6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d155      	bne.n	800ac90 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	015a      	lsls	r2, r3, #5
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	4413      	add	r3, r2
 800abec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	689b      	ldr	r3, [r3, #8]
 800abf6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	791b      	ldrb	r3, [r3, #4]
 800abfe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac00:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	059b      	lsls	r3, r3, #22
 800ac06:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac08:	4313      	orrs	r3, r2
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	0151      	lsls	r1, r2, #5
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	440a      	add	r2, r1
 800ac12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ac16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac1a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac1e:	6013      	str	r3, [r2, #0]
 800ac20:	e036      	b.n	800ac90 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac28:	69da      	ldr	r2, [r3, #28]
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	781b      	ldrb	r3, [r3, #0]
 800ac2e:	f003 030f 	and.w	r3, r3, #15
 800ac32:	2101      	movs	r1, #1
 800ac34:	fa01 f303 	lsl.w	r3, r1, r3
 800ac38:	041b      	lsls	r3, r3, #16
 800ac3a:	68f9      	ldr	r1, [r7, #12]
 800ac3c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac40:	4313      	orrs	r3, r2
 800ac42:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	015a      	lsls	r2, r3, #5
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	4413      	add	r3, r2
 800ac4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d11a      	bne.n	800ac90 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac5a:	68bb      	ldr	r3, [r7, #8]
 800ac5c:	015a      	lsls	r2, r3, #5
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	4413      	add	r3, r2
 800ac62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac66:	681a      	ldr	r2, [r3, #0]
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	791b      	ldrb	r3, [r3, #4]
 800ac74:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac76:	430b      	orrs	r3, r1
 800ac78:	4313      	orrs	r3, r2
 800ac7a:	68ba      	ldr	r2, [r7, #8]
 800ac7c:	0151      	lsls	r1, r2, #5
 800ac7e:	68fa      	ldr	r2, [r7, #12]
 800ac80:	440a      	add	r2, r1
 800ac82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac86:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ac8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ac8e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ac90:	2300      	movs	r3, #0
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3714      	adds	r7, #20
 800ac96:	46bd      	mov	sp, r7
 800ac98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9c:	4770      	bx	lr
	...

0800aca0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aca0:	b480      	push	{r7}
 800aca2:	b085      	sub	sp, #20
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	6078      	str	r0, [r7, #4]
 800aca8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	785b      	ldrb	r3, [r3, #1]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d161      	bne.n	800ad80 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	015a      	lsls	r2, r3, #5
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	4413      	add	r3, r2
 800acc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800acce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acd2:	d11f      	bne.n	800ad14 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	015a      	lsls	r2, r3, #5
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4413      	add	r3, r2
 800acdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68ba      	ldr	r2, [r7, #8]
 800ace4:	0151      	lsls	r1, r2, #5
 800ace6:	68fa      	ldr	r2, [r7, #12]
 800ace8:	440a      	add	r2, r1
 800acea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800acee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800acf2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	015a      	lsls	r2, r3, #5
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	4413      	add	r3, r2
 800acfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	68ba      	ldr	r2, [r7, #8]
 800ad04:	0151      	lsls	r1, r2, #5
 800ad06:	68fa      	ldr	r2, [r7, #12]
 800ad08:	440a      	add	r2, r1
 800ad0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ad12:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad1a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	781b      	ldrb	r3, [r3, #0]
 800ad20:	f003 030f 	and.w	r3, r3, #15
 800ad24:	2101      	movs	r1, #1
 800ad26:	fa01 f303 	lsl.w	r3, r1, r3
 800ad2a:	b29b      	uxth	r3, r3
 800ad2c:	43db      	mvns	r3, r3
 800ad2e:	68f9      	ldr	r1, [r7, #12]
 800ad30:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad34:	4013      	ands	r3, r2
 800ad36:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ad3e:	69da      	ldr	r2, [r3, #28]
 800ad40:	683b      	ldr	r3, [r7, #0]
 800ad42:	781b      	ldrb	r3, [r3, #0]
 800ad44:	f003 030f 	and.w	r3, r3, #15
 800ad48:	2101      	movs	r1, #1
 800ad4a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad4e:	b29b      	uxth	r3, r3
 800ad50:	43db      	mvns	r3, r3
 800ad52:	68f9      	ldr	r1, [r7, #12]
 800ad54:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ad58:	4013      	ands	r3, r2
 800ad5a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	015a      	lsls	r2, r3, #5
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	4413      	add	r3, r2
 800ad64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad68:	681a      	ldr	r2, [r3, #0]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	0159      	lsls	r1, r3, #5
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	440b      	add	r3, r1
 800ad72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad76:	4619      	mov	r1, r3
 800ad78:	4b35      	ldr	r3, [pc, #212]	@ (800ae50 <USB_DeactivateEndpoint+0x1b0>)
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	600b      	str	r3, [r1, #0]
 800ad7e:	e060      	b.n	800ae42 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	015a      	lsls	r2, r3, #5
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	4413      	add	r3, r2
 800ad88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad92:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad96:	d11f      	bne.n	800add8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	015a      	lsls	r2, r3, #5
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	4413      	add	r3, r2
 800ada0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	68ba      	ldr	r2, [r7, #8]
 800ada8:	0151      	lsls	r1, r2, #5
 800adaa:	68fa      	ldr	r2, [r7, #12]
 800adac:	440a      	add	r2, r1
 800adae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800adb2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800adb6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	015a      	lsls	r2, r3, #5
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	4413      	add	r3, r2
 800adc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	68ba      	ldr	r2, [r7, #8]
 800adc8:	0151      	lsls	r1, r2, #5
 800adca:	68fa      	ldr	r2, [r7, #12]
 800adcc:	440a      	add	r2, r1
 800adce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800add2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800add6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800adde:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	781b      	ldrb	r3, [r3, #0]
 800ade4:	f003 030f 	and.w	r3, r3, #15
 800ade8:	2101      	movs	r1, #1
 800adea:	fa01 f303 	lsl.w	r3, r1, r3
 800adee:	041b      	lsls	r3, r3, #16
 800adf0:	43db      	mvns	r3, r3
 800adf2:	68f9      	ldr	r1, [r7, #12]
 800adf4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800adf8:	4013      	ands	r3, r2
 800adfa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae02:	69da      	ldr	r2, [r3, #28]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	781b      	ldrb	r3, [r3, #0]
 800ae08:	f003 030f 	and.w	r3, r3, #15
 800ae0c:	2101      	movs	r1, #1
 800ae0e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae12:	041b      	lsls	r3, r3, #16
 800ae14:	43db      	mvns	r3, r3
 800ae16:	68f9      	ldr	r1, [r7, #12]
 800ae18:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ae1c:	4013      	ands	r3, r2
 800ae1e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ae20:	68bb      	ldr	r3, [r7, #8]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	68bb      	ldr	r3, [r7, #8]
 800ae30:	0159      	lsls	r1, r3, #5
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	440b      	add	r3, r1
 800ae36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ae3a:	4619      	mov	r1, r3
 800ae3c:	4b05      	ldr	r3, [pc, #20]	@ (800ae54 <USB_DeactivateEndpoint+0x1b4>)
 800ae3e:	4013      	ands	r3, r2
 800ae40:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ae42:	2300      	movs	r3, #0
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr
 800ae50:	ec337800 	.word	0xec337800
 800ae54:	eff37800 	.word	0xeff37800

0800ae58 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b08a      	sub	sp, #40	@ 0x28
 800ae5c:	af02      	add	r7, sp, #8
 800ae5e:	60f8      	str	r0, [r7, #12]
 800ae60:	60b9      	str	r1, [r7, #8]
 800ae62:	4613      	mov	r3, r2
 800ae64:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ae6a:	68bb      	ldr	r3, [r7, #8]
 800ae6c:	781b      	ldrb	r3, [r3, #0]
 800ae6e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	785b      	ldrb	r3, [r3, #1]
 800ae74:	2b01      	cmp	r3, #1
 800ae76:	f040 817f 	bne.w	800b178 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d132      	bne.n	800aee8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	69ba      	ldr	r2, [r7, #24]
 800ae92:	0151      	lsls	r1, r2, #5
 800ae94:	69fa      	ldr	r2, [r7, #28]
 800ae96:	440a      	add	r2, r1
 800ae98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae9c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800aea0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800aea4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aea6:	69bb      	ldr	r3, [r7, #24]
 800aea8:	015a      	lsls	r2, r3, #5
 800aeaa:	69fb      	ldr	r3, [r7, #28]
 800aeac:	4413      	add	r3, r2
 800aeae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aeb2:	691b      	ldr	r3, [r3, #16]
 800aeb4:	69ba      	ldr	r2, [r7, #24]
 800aeb6:	0151      	lsls	r1, r2, #5
 800aeb8:	69fa      	ldr	r2, [r7, #28]
 800aeba:	440a      	add	r2, r1
 800aebc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aec0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800aec4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	015a      	lsls	r2, r3, #5
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	4413      	add	r3, r2
 800aece:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aed2:	691b      	ldr	r3, [r3, #16]
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	0151      	lsls	r1, r2, #5
 800aed8:	69fa      	ldr	r2, [r7, #28]
 800aeda:	440a      	add	r2, r1
 800aedc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aee0:	0cdb      	lsrs	r3, r3, #19
 800aee2:	04db      	lsls	r3, r3, #19
 800aee4:	6113      	str	r3, [r2, #16]
 800aee6:	e097      	b.n	800b018 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	69ba      	ldr	r2, [r7, #24]
 800aef8:	0151      	lsls	r1, r2, #5
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	440a      	add	r2, r1
 800aefe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af02:	0cdb      	lsrs	r3, r3, #19
 800af04:	04db      	lsls	r3, r3, #19
 800af06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	015a      	lsls	r2, r3, #5
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	4413      	add	r3, r2
 800af10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af14:	691b      	ldr	r3, [r3, #16]
 800af16:	69ba      	ldr	r2, [r7, #24]
 800af18:	0151      	lsls	r1, r2, #5
 800af1a:	69fa      	ldr	r2, [r7, #28]
 800af1c:	440a      	add	r2, r1
 800af1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af22:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800af26:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800af2a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d11a      	bne.n	800af68 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800af32:	68bb      	ldr	r3, [r7, #8]
 800af34:	691a      	ldr	r2, [r3, #16]
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	689b      	ldr	r3, [r3, #8]
 800af3a:	429a      	cmp	r2, r3
 800af3c:	d903      	bls.n	800af46 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	689a      	ldr	r2, [r3, #8]
 800af42:	68bb      	ldr	r3, [r7, #8]
 800af44:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	015a      	lsls	r2, r3, #5
 800af4a:	69fb      	ldr	r3, [r7, #28]
 800af4c:	4413      	add	r3, r2
 800af4e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af52:	691b      	ldr	r3, [r3, #16]
 800af54:	69ba      	ldr	r2, [r7, #24]
 800af56:	0151      	lsls	r1, r2, #5
 800af58:	69fa      	ldr	r2, [r7, #28]
 800af5a:	440a      	add	r2, r1
 800af5c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af60:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800af64:	6113      	str	r3, [r2, #16]
 800af66:	e044      	b.n	800aff2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	691a      	ldr	r2, [r3, #16]
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	4413      	add	r3, r2
 800af72:	1e5a      	subs	r2, r3, #1
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	689b      	ldr	r3, [r3, #8]
 800af78:	fbb2 f3f3 	udiv	r3, r2, r3
 800af7c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800af7e:	69bb      	ldr	r3, [r7, #24]
 800af80:	015a      	lsls	r2, r3, #5
 800af82:	69fb      	ldr	r3, [r7, #28]
 800af84:	4413      	add	r3, r2
 800af86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af8a:	691a      	ldr	r2, [r3, #16]
 800af8c:	8afb      	ldrh	r3, [r7, #22]
 800af8e:	04d9      	lsls	r1, r3, #19
 800af90:	4ba4      	ldr	r3, [pc, #656]	@ (800b224 <USB_EPStartXfer+0x3cc>)
 800af92:	400b      	ands	r3, r1
 800af94:	69b9      	ldr	r1, [r7, #24]
 800af96:	0148      	lsls	r0, r1, #5
 800af98:	69f9      	ldr	r1, [r7, #28]
 800af9a:	4401      	add	r1, r0
 800af9c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800afa0:	4313      	orrs	r3, r2
 800afa2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800afa4:	68bb      	ldr	r3, [r7, #8]
 800afa6:	791b      	ldrb	r3, [r3, #4]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	d122      	bne.n	800aff2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800afac:	69bb      	ldr	r3, [r7, #24]
 800afae:	015a      	lsls	r2, r3, #5
 800afb0:	69fb      	ldr	r3, [r7, #28]
 800afb2:	4413      	add	r3, r2
 800afb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	69ba      	ldr	r2, [r7, #24]
 800afbc:	0151      	lsls	r1, r2, #5
 800afbe:	69fa      	ldr	r2, [r7, #28]
 800afc0:	440a      	add	r2, r1
 800afc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afc6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800afca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800afcc:	69bb      	ldr	r3, [r7, #24]
 800afce:	015a      	lsls	r2, r3, #5
 800afd0:	69fb      	ldr	r3, [r7, #28]
 800afd2:	4413      	add	r3, r2
 800afd4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afd8:	691a      	ldr	r2, [r3, #16]
 800afda:	8afb      	ldrh	r3, [r7, #22]
 800afdc:	075b      	lsls	r3, r3, #29
 800afde:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800afe2:	69b9      	ldr	r1, [r7, #24]
 800afe4:	0148      	lsls	r0, r1, #5
 800afe6:	69f9      	ldr	r1, [r7, #28]
 800afe8:	4401      	add	r1, r0
 800afea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800afee:	4313      	orrs	r3, r2
 800aff0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	015a      	lsls	r2, r3, #5
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	4413      	add	r3, r2
 800affa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800affe:	691a      	ldr	r2, [r3, #16]
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b008:	69b9      	ldr	r1, [r7, #24]
 800b00a:	0148      	lsls	r0, r1, #5
 800b00c:	69f9      	ldr	r1, [r7, #28]
 800b00e:	4401      	add	r1, r0
 800b010:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b014:	4313      	orrs	r3, r2
 800b016:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b018:	79fb      	ldrb	r3, [r7, #7]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d14b      	bne.n	800b0b6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	69db      	ldr	r3, [r3, #28]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d009      	beq.n	800b03a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	015a      	lsls	r2, r3, #5
 800b02a:	69fb      	ldr	r3, [r7, #28]
 800b02c:	4413      	add	r3, r2
 800b02e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b032:	461a      	mov	r2, r3
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	69db      	ldr	r3, [r3, #28]
 800b038:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	791b      	ldrb	r3, [r3, #4]
 800b03e:	2b01      	cmp	r3, #1
 800b040:	d128      	bne.n	800b094 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b042:	69fb      	ldr	r3, [r7, #28]
 800b044:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d110      	bne.n	800b074 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b052:	69bb      	ldr	r3, [r7, #24]
 800b054:	015a      	lsls	r2, r3, #5
 800b056:	69fb      	ldr	r3, [r7, #28]
 800b058:	4413      	add	r3, r2
 800b05a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	69ba      	ldr	r2, [r7, #24]
 800b062:	0151      	lsls	r1, r2, #5
 800b064:	69fa      	ldr	r2, [r7, #28]
 800b066:	440a      	add	r2, r1
 800b068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b06c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b070:	6013      	str	r3, [r2, #0]
 800b072:	e00f      	b.n	800b094 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b074:	69bb      	ldr	r3, [r7, #24]
 800b076:	015a      	lsls	r2, r3, #5
 800b078:	69fb      	ldr	r3, [r7, #28]
 800b07a:	4413      	add	r3, r2
 800b07c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	69ba      	ldr	r2, [r7, #24]
 800b084:	0151      	lsls	r1, r2, #5
 800b086:	69fa      	ldr	r2, [r7, #28]
 800b088:	440a      	add	r2, r1
 800b08a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b08e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b092:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b094:	69bb      	ldr	r3, [r7, #24]
 800b096:	015a      	lsls	r2, r3, #5
 800b098:	69fb      	ldr	r3, [r7, #28]
 800b09a:	4413      	add	r3, r2
 800b09c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	69ba      	ldr	r2, [r7, #24]
 800b0a4:	0151      	lsls	r1, r2, #5
 800b0a6:	69fa      	ldr	r2, [r7, #28]
 800b0a8:	440a      	add	r2, r1
 800b0aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0ae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b0b2:	6013      	str	r3, [r2, #0]
 800b0b4:	e166      	b.n	800b384 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	69fb      	ldr	r3, [r7, #28]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	69ba      	ldr	r2, [r7, #24]
 800b0c6:	0151      	lsls	r1, r2, #5
 800b0c8:	69fa      	ldr	r2, [r7, #28]
 800b0ca:	440a      	add	r2, r1
 800b0cc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b0d0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b0d4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	791b      	ldrb	r3, [r3, #4]
 800b0da:	2b01      	cmp	r3, #1
 800b0dc:	d015      	beq.n	800b10a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	691b      	ldr	r3, [r3, #16]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	f000 814e 	beq.w	800b384 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0e8:	69fb      	ldr	r3, [r7, #28]
 800b0ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b0ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b0f0:	68bb      	ldr	r3, [r7, #8]
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	f003 030f 	and.w	r3, r3, #15
 800b0f8:	2101      	movs	r1, #1
 800b0fa:	fa01 f303 	lsl.w	r3, r1, r3
 800b0fe:	69f9      	ldr	r1, [r7, #28]
 800b100:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b104:	4313      	orrs	r3, r2
 800b106:	634b      	str	r3, [r1, #52]	@ 0x34
 800b108:	e13c      	b.n	800b384 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b10a:	69fb      	ldr	r3, [r7, #28]
 800b10c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b116:	2b00      	cmp	r3, #0
 800b118:	d110      	bne.n	800b13c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b11a:	69bb      	ldr	r3, [r7, #24]
 800b11c:	015a      	lsls	r2, r3, #5
 800b11e:	69fb      	ldr	r3, [r7, #28]
 800b120:	4413      	add	r3, r2
 800b122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	69ba      	ldr	r2, [r7, #24]
 800b12a:	0151      	lsls	r1, r2, #5
 800b12c:	69fa      	ldr	r2, [r7, #28]
 800b12e:	440a      	add	r2, r1
 800b130:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b134:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b138:	6013      	str	r3, [r2, #0]
 800b13a:	e00f      	b.n	800b15c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b13c:	69bb      	ldr	r3, [r7, #24]
 800b13e:	015a      	lsls	r2, r3, #5
 800b140:	69fb      	ldr	r3, [r7, #28]
 800b142:	4413      	add	r3, r2
 800b144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	69ba      	ldr	r2, [r7, #24]
 800b14c:	0151      	lsls	r1, r2, #5
 800b14e:	69fa      	ldr	r2, [r7, #28]
 800b150:	440a      	add	r2, r1
 800b152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b15a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b15c:	68bb      	ldr	r3, [r7, #8]
 800b15e:	68d9      	ldr	r1, [r3, #12]
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	781a      	ldrb	r2, [r3, #0]
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	691b      	ldr	r3, [r3, #16]
 800b168:	b298      	uxth	r0, r3
 800b16a:	79fb      	ldrb	r3, [r7, #7]
 800b16c:	9300      	str	r3, [sp, #0]
 800b16e:	4603      	mov	r3, r0
 800b170:	68f8      	ldr	r0, [r7, #12]
 800b172:	f000 f9b9 	bl	800b4e8 <USB_WritePacket>
 800b176:	e105      	b.n	800b384 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b178:	69bb      	ldr	r3, [r7, #24]
 800b17a:	015a      	lsls	r2, r3, #5
 800b17c:	69fb      	ldr	r3, [r7, #28]
 800b17e:	4413      	add	r3, r2
 800b180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b184:	691b      	ldr	r3, [r3, #16]
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	0151      	lsls	r1, r2, #5
 800b18a:	69fa      	ldr	r2, [r7, #28]
 800b18c:	440a      	add	r2, r1
 800b18e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b192:	0cdb      	lsrs	r3, r3, #19
 800b194:	04db      	lsls	r3, r3, #19
 800b196:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	015a      	lsls	r2, r3, #5
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	4413      	add	r3, r2
 800b1a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1a4:	691b      	ldr	r3, [r3, #16]
 800b1a6:	69ba      	ldr	r2, [r7, #24]
 800b1a8:	0151      	lsls	r1, r2, #5
 800b1aa:	69fa      	ldr	r2, [r7, #28]
 800b1ac:	440a      	add	r2, r1
 800b1ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1b2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b1b6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b1ba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b1bc:	69bb      	ldr	r3, [r7, #24]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d132      	bne.n	800b228 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d003      	beq.n	800b1d2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b1ca:	68bb      	ldr	r3, [r7, #8]
 800b1cc:	689a      	ldr	r2, [r3, #8]
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	689a      	ldr	r2, [r3, #8]
 800b1d6:	68bb      	ldr	r3, [r7, #8]
 800b1d8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	015a      	lsls	r2, r3, #5
 800b1de:	69fb      	ldr	r3, [r7, #28]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e6:	691a      	ldr	r2, [r3, #16]
 800b1e8:	68bb      	ldr	r3, [r7, #8]
 800b1ea:	6a1b      	ldr	r3, [r3, #32]
 800b1ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1f0:	69b9      	ldr	r1, [r7, #24]
 800b1f2:	0148      	lsls	r0, r1, #5
 800b1f4:	69f9      	ldr	r1, [r7, #28]
 800b1f6:	4401      	add	r1, r0
 800b1f8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b1fc:	4313      	orrs	r3, r2
 800b1fe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b20c:	691b      	ldr	r3, [r3, #16]
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	0151      	lsls	r1, r2, #5
 800b212:	69fa      	ldr	r2, [r7, #28]
 800b214:	440a      	add	r2, r1
 800b216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b21a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b21e:	6113      	str	r3, [r2, #16]
 800b220:	e062      	b.n	800b2e8 <USB_EPStartXfer+0x490>
 800b222:	bf00      	nop
 800b224:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b228:	68bb      	ldr	r3, [r7, #8]
 800b22a:	691b      	ldr	r3, [r3, #16]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d123      	bne.n	800b278 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	015a      	lsls	r2, r3, #5
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	4413      	add	r3, r2
 800b238:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b23c:	691a      	ldr	r2, [r3, #16]
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b246:	69b9      	ldr	r1, [r7, #24]
 800b248:	0148      	lsls	r0, r1, #5
 800b24a:	69f9      	ldr	r1, [r7, #28]
 800b24c:	4401      	add	r1, r0
 800b24e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b252:	4313      	orrs	r3, r2
 800b254:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	015a      	lsls	r2, r3, #5
 800b25a:	69fb      	ldr	r3, [r7, #28]
 800b25c:	4413      	add	r3, r2
 800b25e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b262:	691b      	ldr	r3, [r3, #16]
 800b264:	69ba      	ldr	r2, [r7, #24]
 800b266:	0151      	lsls	r1, r2, #5
 800b268:	69fa      	ldr	r2, [r7, #28]
 800b26a:	440a      	add	r2, r1
 800b26c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b270:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b274:	6113      	str	r3, [r2, #16]
 800b276:	e037      	b.n	800b2e8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	691a      	ldr	r2, [r3, #16]
 800b27c:	68bb      	ldr	r3, [r7, #8]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	4413      	add	r3, r2
 800b282:	1e5a      	subs	r2, r3, #1
 800b284:	68bb      	ldr	r3, [r7, #8]
 800b286:	689b      	ldr	r3, [r3, #8]
 800b288:	fbb2 f3f3 	udiv	r3, r2, r3
 800b28c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	689b      	ldr	r3, [r3, #8]
 800b292:	8afa      	ldrh	r2, [r7, #22]
 800b294:	fb03 f202 	mul.w	r2, r3, r2
 800b298:	68bb      	ldr	r3, [r7, #8]
 800b29a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	015a      	lsls	r2, r3, #5
 800b2a0:	69fb      	ldr	r3, [r7, #28]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2a8:	691a      	ldr	r2, [r3, #16]
 800b2aa:	8afb      	ldrh	r3, [r7, #22]
 800b2ac:	04d9      	lsls	r1, r3, #19
 800b2ae:	4b38      	ldr	r3, [pc, #224]	@ (800b390 <USB_EPStartXfer+0x538>)
 800b2b0:	400b      	ands	r3, r1
 800b2b2:	69b9      	ldr	r1, [r7, #24]
 800b2b4:	0148      	lsls	r0, r1, #5
 800b2b6:	69f9      	ldr	r1, [r7, #28]
 800b2b8:	4401      	add	r1, r0
 800b2ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b2be:	4313      	orrs	r3, r2
 800b2c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2ce:	691a      	ldr	r2, [r3, #16]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	6a1b      	ldr	r3, [r3, #32]
 800b2d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b2d8:	69b9      	ldr	r1, [r7, #24]
 800b2da:	0148      	lsls	r0, r1, #5
 800b2dc:	69f9      	ldr	r1, [r7, #28]
 800b2de:	4401      	add	r1, r0
 800b2e0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b2e8:	79fb      	ldrb	r3, [r7, #7]
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d10d      	bne.n	800b30a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	68db      	ldr	r3, [r3, #12]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d009      	beq.n	800b30a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	68d9      	ldr	r1, [r3, #12]
 800b2fa:	69bb      	ldr	r3, [r7, #24]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	69fb      	ldr	r3, [r7, #28]
 800b300:	4413      	add	r3, r2
 800b302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b306:	460a      	mov	r2, r1
 800b308:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	791b      	ldrb	r3, [r3, #4]
 800b30e:	2b01      	cmp	r3, #1
 800b310:	d128      	bne.n	800b364 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b312:	69fb      	ldr	r3, [r7, #28]
 800b314:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b318:	689b      	ldr	r3, [r3, #8]
 800b31a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d110      	bne.n	800b344 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	69ba      	ldr	r2, [r7, #24]
 800b332:	0151      	lsls	r1, r2, #5
 800b334:	69fa      	ldr	r2, [r7, #28]
 800b336:	440a      	add	r2, r1
 800b338:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b33c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b340:	6013      	str	r3, [r2, #0]
 800b342:	e00f      	b.n	800b364 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b344:	69bb      	ldr	r3, [r7, #24]
 800b346:	015a      	lsls	r2, r3, #5
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	4413      	add	r3, r2
 800b34c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	69ba      	ldr	r2, [r7, #24]
 800b354:	0151      	lsls	r1, r2, #5
 800b356:	69fa      	ldr	r2, [r7, #28]
 800b358:	440a      	add	r2, r1
 800b35a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b35e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b362:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b364:	69bb      	ldr	r3, [r7, #24]
 800b366:	015a      	lsls	r2, r3, #5
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	4413      	add	r3, r2
 800b36c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	69ba      	ldr	r2, [r7, #24]
 800b374:	0151      	lsls	r1, r2, #5
 800b376:	69fa      	ldr	r2, [r7, #28]
 800b378:	440a      	add	r2, r1
 800b37a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b37e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b382:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b384:	2300      	movs	r3, #0
}
 800b386:	4618      	mov	r0, r3
 800b388:	3720      	adds	r7, #32
 800b38a:	46bd      	mov	sp, r7
 800b38c:	bd80      	pop	{r7, pc}
 800b38e:	bf00      	nop
 800b390:	1ff80000 	.word	0x1ff80000

0800b394 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b394:	b480      	push	{r7}
 800b396:	b087      	sub	sp, #28
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
 800b39c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b3aa:	683b      	ldr	r3, [r7, #0]
 800b3ac:	785b      	ldrb	r3, [r3, #1]
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d14a      	bne.n	800b448 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b3b2:	683b      	ldr	r3, [r7, #0]
 800b3b4:	781b      	ldrb	r3, [r3, #0]
 800b3b6:	015a      	lsls	r2, r3, #5
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	4413      	add	r3, r2
 800b3bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b3c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b3ca:	f040 8086 	bne.w	800b4da <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b3ce:	683b      	ldr	r3, [r7, #0]
 800b3d0:	781b      	ldrb	r3, [r3, #0]
 800b3d2:	015a      	lsls	r2, r3, #5
 800b3d4:	693b      	ldr	r3, [r7, #16]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	683a      	ldr	r2, [r7, #0]
 800b3e0:	7812      	ldrb	r2, [r2, #0]
 800b3e2:	0151      	lsls	r1, r2, #5
 800b3e4:	693a      	ldr	r2, [r7, #16]
 800b3e6:	440a      	add	r2, r1
 800b3e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b3f0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	015a      	lsls	r2, r3, #5
 800b3f8:	693b      	ldr	r3, [r7, #16]
 800b3fa:	4413      	add	r3, r2
 800b3fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	683a      	ldr	r2, [r7, #0]
 800b404:	7812      	ldrb	r2, [r2, #0]
 800b406:	0151      	lsls	r1, r2, #5
 800b408:	693a      	ldr	r2, [r7, #16]
 800b40a:	440a      	add	r2, r1
 800b40c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b410:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b414:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	3301      	adds	r3, #1
 800b41a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b422:	4293      	cmp	r3, r2
 800b424:	d902      	bls.n	800b42c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b426:	2301      	movs	r3, #1
 800b428:	75fb      	strb	r3, [r7, #23]
          break;
 800b42a:	e056      	b.n	800b4da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	781b      	ldrb	r3, [r3, #0]
 800b430:	015a      	lsls	r2, r3, #5
 800b432:	693b      	ldr	r3, [r7, #16]
 800b434:	4413      	add	r3, r2
 800b436:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b440:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b444:	d0e7      	beq.n	800b416 <USB_EPStopXfer+0x82>
 800b446:	e048      	b.n	800b4da <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	015a      	lsls	r2, r3, #5
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	4413      	add	r3, r2
 800b452:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b45c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b460:	d13b      	bne.n	800b4da <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	015a      	lsls	r2, r3, #5
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	4413      	add	r3, r2
 800b46c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	683a      	ldr	r2, [r7, #0]
 800b474:	7812      	ldrb	r2, [r2, #0]
 800b476:	0151      	lsls	r1, r2, #5
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	440a      	add	r2, r1
 800b47c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b480:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b484:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b486:	683b      	ldr	r3, [r7, #0]
 800b488:	781b      	ldrb	r3, [r3, #0]
 800b48a:	015a      	lsls	r2, r3, #5
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	4413      	add	r3, r2
 800b490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	683a      	ldr	r2, [r7, #0]
 800b498:	7812      	ldrb	r2, [r2, #0]
 800b49a:	0151      	lsls	r1, r2, #5
 800b49c:	693a      	ldr	r2, [r7, #16]
 800b49e:	440a      	add	r2, r1
 800b4a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b4a4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b4a8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	3301      	adds	r3, #1
 800b4ae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d902      	bls.n	800b4c0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b4ba:	2301      	movs	r3, #1
 800b4bc:	75fb      	strb	r3, [r7, #23]
          break;
 800b4be:	e00c      	b.n	800b4da <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	781b      	ldrb	r3, [r3, #0]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	693b      	ldr	r3, [r7, #16]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b4d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b4d8:	d0e7      	beq.n	800b4aa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b4da:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	371c      	adds	r7, #28
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e6:	4770      	bx	lr

0800b4e8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b4e8:	b480      	push	{r7}
 800b4ea:	b089      	sub	sp, #36	@ 0x24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	4611      	mov	r1, r2
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	71fb      	strb	r3, [r7, #7]
 800b4fa:	4613      	mov	r3, r2
 800b4fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b506:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d123      	bne.n	800b556 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b50e:	88bb      	ldrh	r3, [r7, #4]
 800b510:	3303      	adds	r3, #3
 800b512:	089b      	lsrs	r3, r3, #2
 800b514:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b516:	2300      	movs	r3, #0
 800b518:	61bb      	str	r3, [r7, #24]
 800b51a:	e018      	b.n	800b54e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b51c:	79fb      	ldrb	r3, [r7, #7]
 800b51e:	031a      	lsls	r2, r3, #12
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	4413      	add	r3, r2
 800b524:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b528:	461a      	mov	r2, r3
 800b52a:	69fb      	ldr	r3, [r7, #28]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	3301      	adds	r3, #1
 800b534:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	3301      	adds	r3, #1
 800b53a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	3301      	adds	r3, #1
 800b540:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	3301      	adds	r3, #1
 800b546:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b548:	69bb      	ldr	r3, [r7, #24]
 800b54a:	3301      	adds	r3, #1
 800b54c:	61bb      	str	r3, [r7, #24]
 800b54e:	69ba      	ldr	r2, [r7, #24]
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	429a      	cmp	r2, r3
 800b554:	d3e2      	bcc.n	800b51c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b556:	2300      	movs	r3, #0
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3724      	adds	r7, #36	@ 0x24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b562:	4770      	bx	lr

0800b564 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b564:	b480      	push	{r7}
 800b566:	b08b      	sub	sp, #44	@ 0x2c
 800b568:	af00      	add	r7, sp, #0
 800b56a:	60f8      	str	r0, [r7, #12]
 800b56c:	60b9      	str	r1, [r7, #8]
 800b56e:	4613      	mov	r3, r2
 800b570:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b57a:	88fb      	ldrh	r3, [r7, #6]
 800b57c:	089b      	lsrs	r3, r3, #2
 800b57e:	b29b      	uxth	r3, r3
 800b580:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b582:	88fb      	ldrh	r3, [r7, #6]
 800b584:	f003 0303 	and.w	r3, r3, #3
 800b588:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b58a:	2300      	movs	r3, #0
 800b58c:	623b      	str	r3, [r7, #32]
 800b58e:	e014      	b.n	800b5ba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b590:	69bb      	ldr	r3, [r7, #24]
 800b592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59a:	601a      	str	r2, [r3, #0]
    pDest++;
 800b59c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b59e:	3301      	adds	r3, #1
 800b5a0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	623b      	str	r3, [r7, #32]
 800b5ba:	6a3a      	ldr	r2, [r7, #32]
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	429a      	cmp	r2, r3
 800b5c0:	d3e6      	bcc.n	800b590 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b5c2:	8bfb      	ldrh	r3, [r7, #30]
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d01e      	beq.n	800b606 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b5cc:	69bb      	ldr	r3, [r7, #24]
 800b5ce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5d2:	461a      	mov	r2, r3
 800b5d4:	f107 0310 	add.w	r3, r7, #16
 800b5d8:	6812      	ldr	r2, [r2, #0]
 800b5da:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b5dc:	693a      	ldr	r2, [r7, #16]
 800b5de:	6a3b      	ldr	r3, [r7, #32]
 800b5e0:	b2db      	uxtb	r3, r3
 800b5e2:	00db      	lsls	r3, r3, #3
 800b5e4:	fa22 f303 	lsr.w	r3, r2, r3
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ec:	701a      	strb	r2, [r3, #0]
      i++;
 800b5ee:	6a3b      	ldr	r3, [r7, #32]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	623b      	str	r3, [r7, #32]
      pDest++;
 800b5f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b5fa:	8bfb      	ldrh	r3, [r7, #30]
 800b5fc:	3b01      	subs	r3, #1
 800b5fe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b600:	8bfb      	ldrh	r3, [r7, #30]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d1ea      	bne.n	800b5dc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b608:	4618      	mov	r0, r3
 800b60a:	372c      	adds	r7, #44	@ 0x2c
 800b60c:	46bd      	mov	sp, r7
 800b60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b612:	4770      	bx	lr

0800b614 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b614:	b480      	push	{r7}
 800b616:	b085      	sub	sp, #20
 800b618:	af00      	add	r7, sp, #0
 800b61a:	6078      	str	r0, [r7, #4]
 800b61c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	781b      	ldrb	r3, [r3, #0]
 800b626:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	785b      	ldrb	r3, [r3, #1]
 800b62c:	2b01      	cmp	r3, #1
 800b62e:	d12c      	bne.n	800b68a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b630:	68bb      	ldr	r3, [r7, #8]
 800b632:	015a      	lsls	r2, r3, #5
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	4413      	add	r3, r2
 800b638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	db12      	blt.n	800b668 <USB_EPSetStall+0x54>
 800b642:	68bb      	ldr	r3, [r7, #8]
 800b644:	2b00      	cmp	r3, #0
 800b646:	d00f      	beq.n	800b668 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	015a      	lsls	r2, r3, #5
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	68ba      	ldr	r2, [r7, #8]
 800b658:	0151      	lsls	r1, r2, #5
 800b65a:	68fa      	ldr	r2, [r7, #12]
 800b65c:	440a      	add	r2, r1
 800b65e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b662:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b666:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	015a      	lsls	r2, r3, #5
 800b66c:	68fb      	ldr	r3, [r7, #12]
 800b66e:	4413      	add	r3, r2
 800b670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	68ba      	ldr	r2, [r7, #8]
 800b678:	0151      	lsls	r1, r2, #5
 800b67a:	68fa      	ldr	r2, [r7, #12]
 800b67c:	440a      	add	r2, r1
 800b67e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b682:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	e02b      	b.n	800b6e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b68a:	68bb      	ldr	r3, [r7, #8]
 800b68c:	015a      	lsls	r2, r3, #5
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	4413      	add	r3, r2
 800b692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	2b00      	cmp	r3, #0
 800b69a:	db12      	blt.n	800b6c2 <USB_EPSetStall+0xae>
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d00f      	beq.n	800b6c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	015a      	lsls	r2, r3, #5
 800b6a6:	68fb      	ldr	r3, [r7, #12]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	68ba      	ldr	r2, [r7, #8]
 800b6b2:	0151      	lsls	r1, r2, #5
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	440a      	add	r2, r1
 800b6b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b6c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	015a      	lsls	r2, r3, #5
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	68ba      	ldr	r2, [r7, #8]
 800b6d2:	0151      	lsls	r1, r2, #5
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	440a      	add	r2, r1
 800b6d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b6e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6e2:	2300      	movs	r3, #0
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	3714      	adds	r7, #20
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ee:	4770      	bx	lr

0800b6f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b085      	sub	sp, #20
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
 800b6f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b6fe:	683b      	ldr	r3, [r7, #0]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	785b      	ldrb	r3, [r3, #1]
 800b708:	2b01      	cmp	r3, #1
 800b70a:	d128      	bne.n	800b75e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b70c:	68bb      	ldr	r3, [r7, #8]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68ba      	ldr	r2, [r7, #8]
 800b71c:	0151      	lsls	r1, r2, #5
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	440a      	add	r2, r1
 800b722:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b726:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b72a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	791b      	ldrb	r3, [r3, #4]
 800b730:	2b03      	cmp	r3, #3
 800b732:	d003      	beq.n	800b73c <USB_EPClearStall+0x4c>
 800b734:	683b      	ldr	r3, [r7, #0]
 800b736:	791b      	ldrb	r3, [r3, #4]
 800b738:	2b02      	cmp	r3, #2
 800b73a:	d138      	bne.n	800b7ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	015a      	lsls	r2, r3, #5
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	4413      	add	r3, r2
 800b744:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	68ba      	ldr	r2, [r7, #8]
 800b74c:	0151      	lsls	r1, r2, #5
 800b74e:	68fa      	ldr	r2, [r7, #12]
 800b750:	440a      	add	r2, r1
 800b752:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b756:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b75a:	6013      	str	r3, [r2, #0]
 800b75c:	e027      	b.n	800b7ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	015a      	lsls	r2, r3, #5
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	4413      	add	r3, r2
 800b766:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	0151      	lsls	r1, r2, #5
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	440a      	add	r2, r1
 800b774:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b778:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b77c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	791b      	ldrb	r3, [r3, #4]
 800b782:	2b03      	cmp	r3, #3
 800b784:	d003      	beq.n	800b78e <USB_EPClearStall+0x9e>
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	791b      	ldrb	r3, [r3, #4]
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d10f      	bne.n	800b7ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	015a      	lsls	r2, r3, #5
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	4413      	add	r3, r2
 800b796:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	68ba      	ldr	r2, [r7, #8]
 800b79e:	0151      	lsls	r1, r2, #5
 800b7a0:	68fa      	ldr	r2, [r7, #12]
 800b7a2:	440a      	add	r2, r1
 800b7a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7ae:	2300      	movs	r3, #0
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3714      	adds	r7, #20
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ba:	4770      	bx	lr

0800b7bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b7bc:	b480      	push	{r7}
 800b7be:	b085      	sub	sp, #20
 800b7c0:	af00      	add	r7, sp, #0
 800b7c2:	6078      	str	r0, [r7, #4]
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b7da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b7de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7e6:	681a      	ldr	r2, [r3, #0]
 800b7e8:	78fb      	ldrb	r3, [r7, #3]
 800b7ea:	011b      	lsls	r3, r3, #4
 800b7ec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b7f0:	68f9      	ldr	r1, [r7, #12]
 800b7f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b7f6:	4313      	orrs	r3, r2
 800b7f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b7fa:	2300      	movs	r3, #0
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3714      	adds	r7, #20
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b822:	f023 0303 	bic.w	r3, r3, #3
 800b826:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b82e:	685b      	ldr	r3, [r3, #4]
 800b830:	68fa      	ldr	r2, [r7, #12]
 800b832:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b836:	f023 0302 	bic.w	r3, r3, #2
 800b83a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b83c:	2300      	movs	r3, #0
}
 800b83e:	4618      	mov	r0, r3
 800b840:	3714      	adds	r7, #20
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr

0800b84a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b84a:	b480      	push	{r7}
 800b84c:	b085      	sub	sp, #20
 800b84e:	af00      	add	r7, sp, #0
 800b850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	68fa      	ldr	r2, [r7, #12]
 800b860:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b864:	f023 0303 	bic.w	r3, r3, #3
 800b868:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b870:	685b      	ldr	r3, [r3, #4]
 800b872:	68fa      	ldr	r2, [r7, #12]
 800b874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b878:	f043 0302 	orr.w	r3, r3, #2
 800b87c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b87e:	2300      	movs	r3, #0
}
 800b880:	4618      	mov	r0, r3
 800b882:	3714      	adds	r7, #20
 800b884:	46bd      	mov	sp, r7
 800b886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b88a:	4770      	bx	lr

0800b88c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b88c:	b480      	push	{r7}
 800b88e:	b085      	sub	sp, #20
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	695b      	ldr	r3, [r3, #20]
 800b898:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	699b      	ldr	r3, [r3, #24]
 800b89e:	68fa      	ldr	r2, [r7, #12]
 800b8a0:	4013      	ands	r3, r2
 800b8a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
}
 800b8a6:	4618      	mov	r0, r3
 800b8a8:	3714      	adds	r7, #20
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b0:	4770      	bx	lr

0800b8b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8b2:	b480      	push	{r7}
 800b8b4:	b085      	sub	sp, #20
 800b8b6:	af00      	add	r7, sp, #0
 800b8b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8c4:	699b      	ldr	r3, [r3, #24]
 800b8c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8ce:	69db      	ldr	r3, [r3, #28]
 800b8d0:	68ba      	ldr	r2, [r7, #8]
 800b8d2:	4013      	ands	r3, r2
 800b8d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	0c1b      	lsrs	r3, r3, #16
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3714      	adds	r7, #20
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e4:	4770      	bx	lr

0800b8e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b8e6:	b480      	push	{r7}
 800b8e8:	b085      	sub	sp, #20
 800b8ea:	af00      	add	r7, sp, #0
 800b8ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b8f8:	699b      	ldr	r3, [r3, #24]
 800b8fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b902:	69db      	ldr	r3, [r3, #28]
 800b904:	68ba      	ldr	r2, [r7, #8]
 800b906:	4013      	ands	r3, r2
 800b908:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	b29b      	uxth	r3, r3
}
 800b90e:	4618      	mov	r0, r3
 800b910:	3714      	adds	r7, #20
 800b912:	46bd      	mov	sp, r7
 800b914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b918:	4770      	bx	lr

0800b91a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b91a:	b480      	push	{r7}
 800b91c:	b085      	sub	sp, #20
 800b91e:	af00      	add	r7, sp, #0
 800b920:	6078      	str	r0, [r7, #4]
 800b922:	460b      	mov	r3, r1
 800b924:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b92a:	78fb      	ldrb	r3, [r7, #3]
 800b92c:	015a      	lsls	r2, r3, #5
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	4413      	add	r3, r2
 800b932:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b93a:	68fb      	ldr	r3, [r7, #12]
 800b93c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b940:	695b      	ldr	r3, [r3, #20]
 800b942:	68ba      	ldr	r2, [r7, #8]
 800b944:	4013      	ands	r3, r2
 800b946:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b948:	68bb      	ldr	r3, [r7, #8]
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b954:	4770      	bx	lr

0800b956 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b956:	b480      	push	{r7}
 800b958:	b087      	sub	sp, #28
 800b95a:	af00      	add	r7, sp, #0
 800b95c:	6078      	str	r0, [r7, #4]
 800b95e:	460b      	mov	r3, r1
 800b960:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b966:	697b      	ldr	r3, [r7, #20]
 800b968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b96c:	691b      	ldr	r3, [r3, #16]
 800b96e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b970:	697b      	ldr	r3, [r7, #20]
 800b972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b978:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b97a:	78fb      	ldrb	r3, [r7, #3]
 800b97c:	f003 030f 	and.w	r3, r3, #15
 800b980:	68fa      	ldr	r2, [r7, #12]
 800b982:	fa22 f303 	lsr.w	r3, r2, r3
 800b986:	01db      	lsls	r3, r3, #7
 800b988:	b2db      	uxtb	r3, r3
 800b98a:	693a      	ldr	r2, [r7, #16]
 800b98c:	4313      	orrs	r3, r2
 800b98e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b990:	78fb      	ldrb	r3, [r7, #3]
 800b992:	015a      	lsls	r2, r3, #5
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	4413      	add	r3, r2
 800b998:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b99c:	689b      	ldr	r3, [r3, #8]
 800b99e:	693a      	ldr	r2, [r7, #16]
 800b9a0:	4013      	ands	r3, r2
 800b9a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9a4:	68bb      	ldr	r3, [r7, #8]
}
 800b9a6:	4618      	mov	r0, r3
 800b9a8:	371c      	adds	r7, #28
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b083      	sub	sp, #12
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	695b      	ldr	r3, [r3, #20]
 800b9be:	f003 0301 	and.w	r3, r3, #1
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b9ce:	b480      	push	{r7}
 800b9d0:	b085      	sub	sp, #20
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68fa      	ldr	r2, [r7, #12]
 800b9e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b9e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b9ec:	f023 0307 	bic.w	r3, r3, #7
 800b9f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	68fa      	ldr	r2, [r7, #12]
 800b9fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ba00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba06:	2300      	movs	r3, #0
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3714      	adds	r7, #20
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b087      	sub	sp, #28
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	60f8      	str	r0, [r7, #12]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	607a      	str	r2, [r7, #4]
 800ba20:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	333c      	adds	r3, #60	@ 0x3c
 800ba2a:	3304      	adds	r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba30:	693b      	ldr	r3, [r7, #16]
 800ba32:	4a26      	ldr	r2, [pc, #152]	@ (800bacc <USB_EP0_OutStart+0xb8>)
 800ba34:	4293      	cmp	r3, r2
 800ba36:	d90a      	bls.n	800ba4e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba38:	697b      	ldr	r3, [r7, #20]
 800ba3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ba44:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ba48:	d101      	bne.n	800ba4e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	e037      	b.n	800babe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba54:	461a      	mov	r2, r3
 800ba56:	2300      	movs	r3, #0
 800ba58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba5a:	697b      	ldr	r3, [r7, #20]
 800ba5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	697a      	ldr	r2, [r7, #20]
 800ba64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ba6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba74:	691b      	ldr	r3, [r3, #16]
 800ba76:	697a      	ldr	r2, [r7, #20]
 800ba78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba7c:	f043 0318 	orr.w	r3, r3, #24
 800ba80:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ba82:	697b      	ldr	r3, [r7, #20]
 800ba84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ba88:	691b      	ldr	r3, [r3, #16]
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ba90:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800ba94:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ba96:	7afb      	ldrb	r3, [r7, #11]
 800ba98:	2b01      	cmp	r3, #1
 800ba9a:	d10f      	bne.n	800babc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ba9c:	697b      	ldr	r3, [r7, #20]
 800ba9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baa2:	461a      	mov	r2, r3
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800baa8:	697b      	ldr	r3, [r7, #20]
 800baaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	697a      	ldr	r2, [r7, #20]
 800bab2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bab6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800baba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800babc:	2300      	movs	r3, #0
}
 800babe:	4618      	mov	r0, r3
 800bac0:	371c      	adds	r7, #28
 800bac2:	46bd      	mov	sp, r7
 800bac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac8:	4770      	bx	lr
 800baca:	bf00      	nop
 800bacc:	4f54300a 	.word	0x4f54300a

0800bad0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b085      	sub	sp, #20
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bad8:	2300      	movs	r3, #0
 800bada:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	3301      	adds	r3, #1
 800bae0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bae8:	d901      	bls.n	800baee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800baea:	2303      	movs	r3, #3
 800baec:	e022      	b.n	800bb34 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	daf2      	bge.n	800badc <USB_CoreReset+0xc>

  count = 10U;
 800baf6:	230a      	movs	r3, #10
 800baf8:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800bafa:	e002      	b.n	800bb02 <USB_CoreReset+0x32>
  {
    count--;
 800bafc:	68fb      	ldr	r3, [r7, #12]
 800bafe:	3b01      	subs	r3, #1
 800bb00:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1f9      	bne.n	800bafc <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	f043 0201 	orr.w	r2, r3, #1
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	3301      	adds	r3, #1
 800bb18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb20:	d901      	bls.n	800bb26 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800bb22:	2303      	movs	r3, #3
 800bb24:	e006      	b.n	800bb34 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	691b      	ldr	r3, [r3, #16]
 800bb2a:	f003 0301 	and.w	r3, r3, #1
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d0f0      	beq.n	800bb14 <USB_CoreReset+0x44>

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	4618      	mov	r0, r3
 800bb36:	3714      	adds	r7, #20
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr

0800bb40 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	6078      	str	r0, [r7, #4]
 800bb48:	460b      	mov	r3, r1
 800bb4a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bb4c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bb50:	f002 fd1e 	bl	800e590 <USBD_static_malloc>
 800bb54:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d109      	bne.n	800bb70 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	32b0      	adds	r2, #176	@ 0xb0
 800bb66:	2100      	movs	r1, #0
 800bb68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bb6c:	2302      	movs	r3, #2
 800bb6e:	e0d4      	b.n	800bd1a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bb70:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bb74:	2100      	movs	r1, #0
 800bb76:	68f8      	ldr	r0, [r7, #12]
 800bb78:	f002 fd4e 	bl	800e618 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	32b0      	adds	r2, #176	@ 0xb0
 800bb86:	68f9      	ldr	r1, [r7, #12]
 800bb88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	32b0      	adds	r2, #176	@ 0xb0
 800bb96:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	7c1b      	ldrb	r3, [r3, #16]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d138      	bne.n	800bc1a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bba8:	4b5e      	ldr	r3, [pc, #376]	@ (800bd24 <USBD_CDC_Init+0x1e4>)
 800bbaa:	7819      	ldrb	r1, [r3, #0]
 800bbac:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbb0:	2202      	movs	r2, #2
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f002 fbc9 	bl	800e34a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bbb8:	4b5a      	ldr	r3, [pc, #360]	@ (800bd24 <USBD_CDC_Init+0x1e4>)
 800bbba:	781b      	ldrb	r3, [r3, #0]
 800bbbc:	f003 020f 	and.w	r2, r3, #15
 800bbc0:	6879      	ldr	r1, [r7, #4]
 800bbc2:	4613      	mov	r3, r2
 800bbc4:	009b      	lsls	r3, r3, #2
 800bbc6:	4413      	add	r3, r2
 800bbc8:	009b      	lsls	r3, r3, #2
 800bbca:	440b      	add	r3, r1
 800bbcc:	3323      	adds	r3, #35	@ 0x23
 800bbce:	2201      	movs	r2, #1
 800bbd0:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bbd2:	4b55      	ldr	r3, [pc, #340]	@ (800bd28 <USBD_CDC_Init+0x1e8>)
 800bbd4:	7819      	ldrb	r1, [r3, #0]
 800bbd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bbda:	2202      	movs	r2, #2
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f002 fbb4 	bl	800e34a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bbe2:	4b51      	ldr	r3, [pc, #324]	@ (800bd28 <USBD_CDC_Init+0x1e8>)
 800bbe4:	781b      	ldrb	r3, [r3, #0]
 800bbe6:	f003 020f 	and.w	r2, r3, #15
 800bbea:	6879      	ldr	r1, [r7, #4]
 800bbec:	4613      	mov	r3, r2
 800bbee:	009b      	lsls	r3, r3, #2
 800bbf0:	4413      	add	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	440b      	add	r3, r1
 800bbf6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bbfa:	2201      	movs	r2, #1
 800bbfc:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bbfe:	4b4b      	ldr	r3, [pc, #300]	@ (800bd2c <USBD_CDC_Init+0x1ec>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	f003 020f 	and.w	r2, r3, #15
 800bc06:	6879      	ldr	r1, [r7, #4]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	440b      	add	r3, r1
 800bc12:	331c      	adds	r3, #28
 800bc14:	2210      	movs	r2, #16
 800bc16:	601a      	str	r2, [r3, #0]
 800bc18:	e035      	b.n	800bc86 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bc1a:	4b42      	ldr	r3, [pc, #264]	@ (800bd24 <USBD_CDC_Init+0x1e4>)
 800bc1c:	7819      	ldrb	r1, [r3, #0]
 800bc1e:	2340      	movs	r3, #64	@ 0x40
 800bc20:	2202      	movs	r2, #2
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f002 fb91 	bl	800e34a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bc28:	4b3e      	ldr	r3, [pc, #248]	@ (800bd24 <USBD_CDC_Init+0x1e4>)
 800bc2a:	781b      	ldrb	r3, [r3, #0]
 800bc2c:	f003 020f 	and.w	r2, r3, #15
 800bc30:	6879      	ldr	r1, [r7, #4]
 800bc32:	4613      	mov	r3, r2
 800bc34:	009b      	lsls	r3, r3, #2
 800bc36:	4413      	add	r3, r2
 800bc38:	009b      	lsls	r3, r3, #2
 800bc3a:	440b      	add	r3, r1
 800bc3c:	3323      	adds	r3, #35	@ 0x23
 800bc3e:	2201      	movs	r2, #1
 800bc40:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bc42:	4b39      	ldr	r3, [pc, #228]	@ (800bd28 <USBD_CDC_Init+0x1e8>)
 800bc44:	7819      	ldrb	r1, [r3, #0]
 800bc46:	2340      	movs	r3, #64	@ 0x40
 800bc48:	2202      	movs	r2, #2
 800bc4a:	6878      	ldr	r0, [r7, #4]
 800bc4c:	f002 fb7d 	bl	800e34a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bc50:	4b35      	ldr	r3, [pc, #212]	@ (800bd28 <USBD_CDC_Init+0x1e8>)
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	f003 020f 	and.w	r2, r3, #15
 800bc58:	6879      	ldr	r1, [r7, #4]
 800bc5a:	4613      	mov	r3, r2
 800bc5c:	009b      	lsls	r3, r3, #2
 800bc5e:	4413      	add	r3, r2
 800bc60:	009b      	lsls	r3, r3, #2
 800bc62:	440b      	add	r3, r1
 800bc64:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bc68:	2201      	movs	r2, #1
 800bc6a:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bc6c:	4b2f      	ldr	r3, [pc, #188]	@ (800bd2c <USBD_CDC_Init+0x1ec>)
 800bc6e:	781b      	ldrb	r3, [r3, #0]
 800bc70:	f003 020f 	and.w	r2, r3, #15
 800bc74:	6879      	ldr	r1, [r7, #4]
 800bc76:	4613      	mov	r3, r2
 800bc78:	009b      	lsls	r3, r3, #2
 800bc7a:	4413      	add	r3, r2
 800bc7c:	009b      	lsls	r3, r3, #2
 800bc7e:	440b      	add	r3, r1
 800bc80:	331c      	adds	r3, #28
 800bc82:	2210      	movs	r2, #16
 800bc84:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bc86:	4b29      	ldr	r3, [pc, #164]	@ (800bd2c <USBD_CDC_Init+0x1ec>)
 800bc88:	7819      	ldrb	r1, [r3, #0]
 800bc8a:	2308      	movs	r3, #8
 800bc8c:	2203      	movs	r2, #3
 800bc8e:	6878      	ldr	r0, [r7, #4]
 800bc90:	f002 fb5b 	bl	800e34a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bc94:	4b25      	ldr	r3, [pc, #148]	@ (800bd2c <USBD_CDC_Init+0x1ec>)
 800bc96:	781b      	ldrb	r3, [r3, #0]
 800bc98:	f003 020f 	and.w	r2, r3, #15
 800bc9c:	6879      	ldr	r1, [r7, #4]
 800bc9e:	4613      	mov	r3, r2
 800bca0:	009b      	lsls	r3, r3, #2
 800bca2:	4413      	add	r3, r2
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	440b      	add	r3, r1
 800bca8:	3323      	adds	r3, #35	@ 0x23
 800bcaa:	2201      	movs	r2, #1
 800bcac:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2200      	movs	r2, #0
 800bcb2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bcbc:	687a      	ldr	r2, [r7, #4]
 800bcbe:	33b0      	adds	r3, #176	@ 0xb0
 800bcc0:	009b      	lsls	r3, r3, #2
 800bcc2:	4413      	add	r3, r2
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	2200      	movs	r2, #0
 800bcce:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bce4:	2302      	movs	r3, #2
 800bce6:	e018      	b.n	800bd1a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	7c1b      	ldrb	r3, [r3, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d10a      	bne.n	800bd06 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bcf0:	4b0d      	ldr	r3, [pc, #52]	@ (800bd28 <USBD_CDC_Init+0x1e8>)
 800bcf2:	7819      	ldrb	r1, [r3, #0]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bcfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f002 fc12 	bl	800e528 <USBD_LL_PrepareReceive>
 800bd04:	e008      	b.n	800bd18 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bd06:	4b08      	ldr	r3, [pc, #32]	@ (800bd28 <USBD_CDC_Init+0x1e8>)
 800bd08:	7819      	ldrb	r1, [r3, #0]
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bd10:	2340      	movs	r3, #64	@ 0x40
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f002 fc08 	bl	800e528 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	200000bf 	.word	0x200000bf
 800bd28:	200000c0 	.word	0x200000c0
 800bd2c:	200000c1 	.word	0x200000c1

0800bd30 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	460b      	mov	r3, r1
 800bd3a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bd3c:	4b3a      	ldr	r3, [pc, #232]	@ (800be28 <USBD_CDC_DeInit+0xf8>)
 800bd3e:	781b      	ldrb	r3, [r3, #0]
 800bd40:	4619      	mov	r1, r3
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f002 fb27 	bl	800e396 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bd48:	4b37      	ldr	r3, [pc, #220]	@ (800be28 <USBD_CDC_DeInit+0xf8>)
 800bd4a:	781b      	ldrb	r3, [r3, #0]
 800bd4c:	f003 020f 	and.w	r2, r3, #15
 800bd50:	6879      	ldr	r1, [r7, #4]
 800bd52:	4613      	mov	r3, r2
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	4413      	add	r3, r2
 800bd58:	009b      	lsls	r3, r3, #2
 800bd5a:	440b      	add	r3, r1
 800bd5c:	3323      	adds	r3, #35	@ 0x23
 800bd5e:	2200      	movs	r2, #0
 800bd60:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bd62:	4b32      	ldr	r3, [pc, #200]	@ (800be2c <USBD_CDC_DeInit+0xfc>)
 800bd64:	781b      	ldrb	r3, [r3, #0]
 800bd66:	4619      	mov	r1, r3
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f002 fb14 	bl	800e396 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bd6e:	4b2f      	ldr	r3, [pc, #188]	@ (800be2c <USBD_CDC_DeInit+0xfc>)
 800bd70:	781b      	ldrb	r3, [r3, #0]
 800bd72:	f003 020f 	and.w	r2, r3, #15
 800bd76:	6879      	ldr	r1, [r7, #4]
 800bd78:	4613      	mov	r3, r2
 800bd7a:	009b      	lsls	r3, r3, #2
 800bd7c:	4413      	add	r3, r2
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	440b      	add	r3, r1
 800bd82:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800bd86:	2200      	movs	r2, #0
 800bd88:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bd8a:	4b29      	ldr	r3, [pc, #164]	@ (800be30 <USBD_CDC_DeInit+0x100>)
 800bd8c:	781b      	ldrb	r3, [r3, #0]
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f002 fb00 	bl	800e396 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bd96:	4b26      	ldr	r3, [pc, #152]	@ (800be30 <USBD_CDC_DeInit+0x100>)
 800bd98:	781b      	ldrb	r3, [r3, #0]
 800bd9a:	f003 020f 	and.w	r2, r3, #15
 800bd9e:	6879      	ldr	r1, [r7, #4]
 800bda0:	4613      	mov	r3, r2
 800bda2:	009b      	lsls	r3, r3, #2
 800bda4:	4413      	add	r3, r2
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	440b      	add	r3, r1
 800bdaa:	3323      	adds	r3, #35	@ 0x23
 800bdac:	2200      	movs	r2, #0
 800bdae:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bdb0:	4b1f      	ldr	r3, [pc, #124]	@ (800be30 <USBD_CDC_DeInit+0x100>)
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	f003 020f 	and.w	r2, r3, #15
 800bdb8:	6879      	ldr	r1, [r7, #4]
 800bdba:	4613      	mov	r3, r2
 800bdbc:	009b      	lsls	r3, r3, #2
 800bdbe:	4413      	add	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	440b      	add	r3, r1
 800bdc4:	331c      	adds	r3, #28
 800bdc6:	2200      	movs	r2, #0
 800bdc8:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	32b0      	adds	r2, #176	@ 0xb0
 800bdd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d01f      	beq.n	800be1c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bde2:	687a      	ldr	r2, [r7, #4]
 800bde4:	33b0      	adds	r3, #176	@ 0xb0
 800bde6:	009b      	lsls	r3, r3, #2
 800bde8:	4413      	add	r3, r2
 800bdea:	685b      	ldr	r3, [r3, #4]
 800bdec:	685b      	ldr	r3, [r3, #4]
 800bdee:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	32b0      	adds	r2, #176	@ 0xb0
 800bdfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdfe:	4618      	mov	r0, r3
 800be00:	f002 fbd4 	bl	800e5ac <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	32b0      	adds	r2, #176	@ 0xb0
 800be0e:	2100      	movs	r1, #0
 800be10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2200      	movs	r2, #0
 800be18:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800be1c:	2300      	movs	r3, #0
}
 800be1e:	4618      	mov	r0, r3
 800be20:	3708      	adds	r7, #8
 800be22:	46bd      	mov	sp, r7
 800be24:	bd80      	pop	{r7, pc}
 800be26:	bf00      	nop
 800be28:	200000bf 	.word	0x200000bf
 800be2c:	200000c0 	.word	0x200000c0
 800be30:	200000c1 	.word	0x200000c1

0800be34 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b086      	sub	sp, #24
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	32b0      	adds	r2, #176	@ 0xb0
 800be48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be4c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800be4e:	2300      	movs	r3, #0
 800be50:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800be52:	2300      	movs	r3, #0
 800be54:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800be56:	2300      	movs	r3, #0
 800be58:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d101      	bne.n	800be64 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800be60:	2303      	movs	r3, #3
 800be62:	e0bf      	b.n	800bfe4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	781b      	ldrb	r3, [r3, #0]
 800be68:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d050      	beq.n	800bf12 <USBD_CDC_Setup+0xde>
 800be70:	2b20      	cmp	r3, #32
 800be72:	f040 80af 	bne.w	800bfd4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	88db      	ldrh	r3, [r3, #6]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d03a      	beq.n	800bef4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	b25b      	sxtb	r3, r3
 800be84:	2b00      	cmp	r3, #0
 800be86:	da1b      	bge.n	800bec0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	33b0      	adds	r3, #176	@ 0xb0
 800be92:	009b      	lsls	r3, r3, #2
 800be94:	4413      	add	r3, r2
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	689b      	ldr	r3, [r3, #8]
 800be9a:	683a      	ldr	r2, [r7, #0]
 800be9c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800be9e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bea0:	683a      	ldr	r2, [r7, #0]
 800bea2:	88d2      	ldrh	r2, [r2, #6]
 800bea4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	88db      	ldrh	r3, [r3, #6]
 800beaa:	2b07      	cmp	r3, #7
 800beac:	bf28      	it	cs
 800beae:	2307      	movcs	r3, #7
 800beb0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	89fa      	ldrh	r2, [r7, #14]
 800beb6:	4619      	mov	r1, r3
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f001 fda9 	bl	800da10 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bebe:	e090      	b.n	800bfe2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	785a      	ldrb	r2, [r3, #1]
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	88db      	ldrh	r3, [r3, #6]
 800bece:	2b3f      	cmp	r3, #63	@ 0x3f
 800bed0:	d803      	bhi.n	800beda <USBD_CDC_Setup+0xa6>
 800bed2:	683b      	ldr	r3, [r7, #0]
 800bed4:	88db      	ldrh	r3, [r3, #6]
 800bed6:	b2da      	uxtb	r2, r3
 800bed8:	e000      	b.n	800bedc <USBD_CDC_Setup+0xa8>
 800beda:	2240      	movs	r2, #64	@ 0x40
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bee2:	6939      	ldr	r1, [r7, #16]
 800bee4:	693b      	ldr	r3, [r7, #16]
 800bee6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800beea:	461a      	mov	r2, r3
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f001 fdbe 	bl	800da6e <USBD_CtlPrepareRx>
      break;
 800bef2:	e076      	b.n	800bfe2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800befa:	687a      	ldr	r2, [r7, #4]
 800befc:	33b0      	adds	r3, #176	@ 0xb0
 800befe:	009b      	lsls	r3, r3, #2
 800bf00:	4413      	add	r3, r2
 800bf02:	685b      	ldr	r3, [r3, #4]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	683a      	ldr	r2, [r7, #0]
 800bf08:	7850      	ldrb	r0, [r2, #1]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	4798      	blx	r3
      break;
 800bf10:	e067      	b.n	800bfe2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bf12:	683b      	ldr	r3, [r7, #0]
 800bf14:	785b      	ldrb	r3, [r3, #1]
 800bf16:	2b0b      	cmp	r3, #11
 800bf18:	d851      	bhi.n	800bfbe <USBD_CDC_Setup+0x18a>
 800bf1a:	a201      	add	r2, pc, #4	@ (adr r2, 800bf20 <USBD_CDC_Setup+0xec>)
 800bf1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf20:	0800bf51 	.word	0x0800bf51
 800bf24:	0800bfcd 	.word	0x0800bfcd
 800bf28:	0800bfbf 	.word	0x0800bfbf
 800bf2c:	0800bfbf 	.word	0x0800bfbf
 800bf30:	0800bfbf 	.word	0x0800bfbf
 800bf34:	0800bfbf 	.word	0x0800bfbf
 800bf38:	0800bfbf 	.word	0x0800bfbf
 800bf3c:	0800bfbf 	.word	0x0800bfbf
 800bf40:	0800bfbf 	.word	0x0800bfbf
 800bf44:	0800bfbf 	.word	0x0800bfbf
 800bf48:	0800bf7b 	.word	0x0800bf7b
 800bf4c:	0800bfa5 	.word	0x0800bfa5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf56:	b2db      	uxtb	r3, r3
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d107      	bne.n	800bf6c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bf5c:	f107 030a 	add.w	r3, r7, #10
 800bf60:	2202      	movs	r2, #2
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f001 fd53 	bl	800da10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf6a:	e032      	b.n	800bfd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bf6c:	6839      	ldr	r1, [r7, #0]
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f001 fcd1 	bl	800d916 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf74:	2303      	movs	r3, #3
 800bf76:	75fb      	strb	r3, [r7, #23]
          break;
 800bf78:	e02b      	b.n	800bfd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf80:	b2db      	uxtb	r3, r3
 800bf82:	2b03      	cmp	r3, #3
 800bf84:	d107      	bne.n	800bf96 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bf86:	f107 030d 	add.w	r3, r7, #13
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	4619      	mov	r1, r3
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f001 fd3e 	bl	800da10 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bf94:	e01d      	b.n	800bfd2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f001 fcbc 	bl	800d916 <USBD_CtlError>
            ret = USBD_FAIL;
 800bf9e:	2303      	movs	r3, #3
 800bfa0:	75fb      	strb	r3, [r7, #23]
          break;
 800bfa2:	e016      	b.n	800bfd2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfaa:	b2db      	uxtb	r3, r3
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d00f      	beq.n	800bfd0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bfb0:	6839      	ldr	r1, [r7, #0]
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f001 fcaf 	bl	800d916 <USBD_CtlError>
            ret = USBD_FAIL;
 800bfb8:	2303      	movs	r3, #3
 800bfba:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bfbc:	e008      	b.n	800bfd0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f001 fca8 	bl	800d916 <USBD_CtlError>
          ret = USBD_FAIL;
 800bfc6:	2303      	movs	r3, #3
 800bfc8:	75fb      	strb	r3, [r7, #23]
          break;
 800bfca:	e002      	b.n	800bfd2 <USBD_CDC_Setup+0x19e>
          break;
 800bfcc:	bf00      	nop
 800bfce:	e008      	b.n	800bfe2 <USBD_CDC_Setup+0x1ae>
          break;
 800bfd0:	bf00      	nop
      }
      break;
 800bfd2:	e006      	b.n	800bfe2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bfd4:	6839      	ldr	r1, [r7, #0]
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f001 fc9d 	bl	800d916 <USBD_CtlError>
      ret = USBD_FAIL;
 800bfdc:	2303      	movs	r3, #3
 800bfde:	75fb      	strb	r3, [r7, #23]
      break;
 800bfe0:	bf00      	nop
  }

  return (uint8_t)ret;
 800bfe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}

0800bfec <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b084      	sub	sp, #16
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bffe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	32b0      	adds	r2, #176	@ 0xb0
 800c00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d101      	bne.n	800c016 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c012:	2303      	movs	r3, #3
 800c014:	e065      	b.n	800c0e2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	32b0      	adds	r2, #176	@ 0xb0
 800c020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c024:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c026:	78fb      	ldrb	r3, [r7, #3]
 800c028:	f003 020f 	and.w	r2, r3, #15
 800c02c:	6879      	ldr	r1, [r7, #4]
 800c02e:	4613      	mov	r3, r2
 800c030:	009b      	lsls	r3, r3, #2
 800c032:	4413      	add	r3, r2
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	440b      	add	r3, r1
 800c038:	3314      	adds	r3, #20
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d02f      	beq.n	800c0a0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c040:	78fb      	ldrb	r3, [r7, #3]
 800c042:	f003 020f 	and.w	r2, r3, #15
 800c046:	6879      	ldr	r1, [r7, #4]
 800c048:	4613      	mov	r3, r2
 800c04a:	009b      	lsls	r3, r3, #2
 800c04c:	4413      	add	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	440b      	add	r3, r1
 800c052:	3314      	adds	r3, #20
 800c054:	681a      	ldr	r2, [r3, #0]
 800c056:	78fb      	ldrb	r3, [r7, #3]
 800c058:	f003 010f 	and.w	r1, r3, #15
 800c05c:	68f8      	ldr	r0, [r7, #12]
 800c05e:	460b      	mov	r3, r1
 800c060:	00db      	lsls	r3, r3, #3
 800c062:	440b      	add	r3, r1
 800c064:	009b      	lsls	r3, r3, #2
 800c066:	4403      	add	r3, r0
 800c068:	331c      	adds	r3, #28
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	fbb2 f1f3 	udiv	r1, r2, r3
 800c070:	fb01 f303 	mul.w	r3, r1, r3
 800c074:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c076:	2b00      	cmp	r3, #0
 800c078:	d112      	bne.n	800c0a0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c07a:	78fb      	ldrb	r3, [r7, #3]
 800c07c:	f003 020f 	and.w	r2, r3, #15
 800c080:	6879      	ldr	r1, [r7, #4]
 800c082:	4613      	mov	r3, r2
 800c084:	009b      	lsls	r3, r3, #2
 800c086:	4413      	add	r3, r2
 800c088:	009b      	lsls	r3, r3, #2
 800c08a:	440b      	add	r3, r1
 800c08c:	3314      	adds	r3, #20
 800c08e:	2200      	movs	r2, #0
 800c090:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c092:	78f9      	ldrb	r1, [r7, #3]
 800c094:	2300      	movs	r3, #0
 800c096:	2200      	movs	r2, #0
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f002 fa24 	bl	800e4e6 <USBD_LL_Transmit>
 800c09e:	e01f      	b.n	800c0e0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c0a0:	68bb      	ldr	r3, [r7, #8]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0ae:	687a      	ldr	r2, [r7, #4]
 800c0b0:	33b0      	adds	r3, #176	@ 0xb0
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	4413      	add	r3, r2
 800c0b6:	685b      	ldr	r3, [r3, #4]
 800c0b8:	691b      	ldr	r3, [r3, #16]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d010      	beq.n	800c0e0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	33b0      	adds	r3, #176	@ 0xb0
 800c0c8:	009b      	lsls	r3, r3, #2
 800c0ca:	4413      	add	r3, r2
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	691b      	ldr	r3, [r3, #16]
 800c0d0:	68ba      	ldr	r2, [r7, #8]
 800c0d2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c0d6:	68ba      	ldr	r2, [r7, #8]
 800c0d8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c0dc:	78fa      	ldrb	r2, [r7, #3]
 800c0de:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c0e0:	2300      	movs	r3, #0
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	3710      	adds	r7, #16
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	bd80      	pop	{r7, pc}

0800c0ea <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c0ea:	b580      	push	{r7, lr}
 800c0ec:	b084      	sub	sp, #16
 800c0ee:	af00      	add	r7, sp, #0
 800c0f0:	6078      	str	r0, [r7, #4]
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	32b0      	adds	r2, #176	@ 0xb0
 800c100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c104:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	32b0      	adds	r2, #176	@ 0xb0
 800c110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c118:	2303      	movs	r3, #3
 800c11a:	e01a      	b.n	800c152 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c11c:	78fb      	ldrb	r3, [r7, #3]
 800c11e:	4619      	mov	r1, r3
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f002 fa22 	bl	800e56a <USBD_LL_GetRxDataSize>
 800c126:	4602      	mov	r2, r0
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c134:	687a      	ldr	r2, [r7, #4]
 800c136:	33b0      	adds	r3, #176	@ 0xb0
 800c138:	009b      	lsls	r3, r3, #2
 800c13a:	4413      	add	r3, r2
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	68fa      	ldr	r2, [r7, #12]
 800c142:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c146:	68fa      	ldr	r2, [r7, #12]
 800c148:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c14c:	4611      	mov	r1, r2
 800c14e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c150:	2300      	movs	r3, #0
}
 800c152:	4618      	mov	r0, r3
 800c154:	3710      	adds	r7, #16
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b084      	sub	sp, #16
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	32b0      	adds	r2, #176	@ 0xb0
 800c16c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c170:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d101      	bne.n	800c17c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c178:	2303      	movs	r3, #3
 800c17a:	e024      	b.n	800c1c6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	33b0      	adds	r3, #176	@ 0xb0
 800c186:	009b      	lsls	r3, r3, #2
 800c188:	4413      	add	r3, r2
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d019      	beq.n	800c1c4 <USBD_CDC_EP0_RxReady+0x6a>
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c196:	2bff      	cmp	r3, #255	@ 0xff
 800c198:	d014      	beq.n	800c1c4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1a0:	687a      	ldr	r2, [r7, #4]
 800c1a2:	33b0      	adds	r3, #176	@ 0xb0
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	4413      	add	r3, r2
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	689b      	ldr	r3, [r3, #8]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c1b2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c1b4:	68fa      	ldr	r2, [r7, #12]
 800c1b6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c1ba:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	22ff      	movs	r2, #255	@ 0xff
 800c1c0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	3710      	adds	r7, #16
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	bd80      	pop	{r7, pc}
	...

0800c1d0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b086      	sub	sp, #24
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c1d8:	2182      	movs	r1, #130	@ 0x82
 800c1da:	4818      	ldr	r0, [pc, #96]	@ (800c23c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c1dc:	f000 fd62 	bl	800cca4 <USBD_GetEpDesc>
 800c1e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c1e2:	2101      	movs	r1, #1
 800c1e4:	4815      	ldr	r0, [pc, #84]	@ (800c23c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c1e6:	f000 fd5d 	bl	800cca4 <USBD_GetEpDesc>
 800c1ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c1ec:	2181      	movs	r1, #129	@ 0x81
 800c1ee:	4813      	ldr	r0, [pc, #76]	@ (800c23c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c1f0:	f000 fd58 	bl	800cca4 <USBD_GetEpDesc>
 800c1f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c1f6:	697b      	ldr	r3, [r7, #20]
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d002      	beq.n	800c202 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	2210      	movs	r2, #16
 800c200:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	2b00      	cmp	r3, #0
 800c206:	d006      	beq.n	800c216 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	2200      	movs	r2, #0
 800c20c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c210:	711a      	strb	r2, [r3, #4]
 800c212:	2200      	movs	r2, #0
 800c214:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d006      	beq.n	800c22a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2200      	movs	r2, #0
 800c220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c224:	711a      	strb	r2, [r3, #4]
 800c226:	2200      	movs	r2, #0
 800c228:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	2243      	movs	r2, #67	@ 0x43
 800c22e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c230:	4b02      	ldr	r3, [pc, #8]	@ (800c23c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c232:	4618      	mov	r0, r3
 800c234:	3718      	adds	r7, #24
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	2000007c 	.word	0x2000007c

0800c240 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b086      	sub	sp, #24
 800c244:	af00      	add	r7, sp, #0
 800c246:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c248:	2182      	movs	r1, #130	@ 0x82
 800c24a:	4818      	ldr	r0, [pc, #96]	@ (800c2ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c24c:	f000 fd2a 	bl	800cca4 <USBD_GetEpDesc>
 800c250:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c252:	2101      	movs	r1, #1
 800c254:	4815      	ldr	r0, [pc, #84]	@ (800c2ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c256:	f000 fd25 	bl	800cca4 <USBD_GetEpDesc>
 800c25a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c25c:	2181      	movs	r1, #129	@ 0x81
 800c25e:	4813      	ldr	r0, [pc, #76]	@ (800c2ac <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c260:	f000 fd20 	bl	800cca4 <USBD_GetEpDesc>
 800c264:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c266:	697b      	ldr	r3, [r7, #20]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d002      	beq.n	800c272 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	2210      	movs	r2, #16
 800c270:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	2b00      	cmp	r3, #0
 800c276:	d006      	beq.n	800c286 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	2200      	movs	r2, #0
 800c27c:	711a      	strb	r2, [r3, #4]
 800c27e:	2200      	movs	r2, #0
 800c280:	f042 0202 	orr.w	r2, r2, #2
 800c284:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d006      	beq.n	800c29a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2200      	movs	r2, #0
 800c290:	711a      	strb	r2, [r3, #4]
 800c292:	2200      	movs	r2, #0
 800c294:	f042 0202 	orr.w	r2, r2, #2
 800c298:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	2243      	movs	r2, #67	@ 0x43
 800c29e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c2a0:	4b02      	ldr	r3, [pc, #8]	@ (800c2ac <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c2a2:	4618      	mov	r0, r3
 800c2a4:	3718      	adds	r7, #24
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	2000007c 	.word	0x2000007c

0800c2b0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c2b8:	2182      	movs	r1, #130	@ 0x82
 800c2ba:	4818      	ldr	r0, [pc, #96]	@ (800c31c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c2bc:	f000 fcf2 	bl	800cca4 <USBD_GetEpDesc>
 800c2c0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c2c2:	2101      	movs	r1, #1
 800c2c4:	4815      	ldr	r0, [pc, #84]	@ (800c31c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c2c6:	f000 fced 	bl	800cca4 <USBD_GetEpDesc>
 800c2ca:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c2cc:	2181      	movs	r1, #129	@ 0x81
 800c2ce:	4813      	ldr	r0, [pc, #76]	@ (800c31c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c2d0:	f000 fce8 	bl	800cca4 <USBD_GetEpDesc>
 800c2d4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c2d6:	697b      	ldr	r3, [r7, #20]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d002      	beq.n	800c2e2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	2210      	movs	r2, #16
 800c2e0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d006      	beq.n	800c2f6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c2f0:	711a      	strb	r2, [r3, #4]
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d006      	beq.n	800c30a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c2fc:	68fb      	ldr	r3, [r7, #12]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c304:	711a      	strb	r2, [r3, #4]
 800c306:	2200      	movs	r2, #0
 800c308:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	2243      	movs	r2, #67	@ 0x43
 800c30e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c310:	4b02      	ldr	r3, [pc, #8]	@ (800c31c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c312:	4618      	mov	r0, r3
 800c314:	3718      	adds	r7, #24
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	2000007c 	.word	0x2000007c

0800c320 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c320:	b480      	push	{r7}
 800c322:	b083      	sub	sp, #12
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	220a      	movs	r2, #10
 800c32c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c32e:	4b03      	ldr	r3, [pc, #12]	@ (800c33c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c330:	4618      	mov	r0, r3
 800c332:	370c      	adds	r7, #12
 800c334:	46bd      	mov	sp, r7
 800c336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c33a:	4770      	bx	lr
 800c33c:	20000038 	.word	0x20000038

0800c340 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c340:	b480      	push	{r7}
 800c342:	b083      	sub	sp, #12
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d101      	bne.n	800c354 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c350:	2303      	movs	r3, #3
 800c352:	e009      	b.n	800c368 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c35a:	687a      	ldr	r2, [r7, #4]
 800c35c:	33b0      	adds	r3, #176	@ 0xb0
 800c35e:	009b      	lsls	r3, r3, #2
 800c360:	4413      	add	r3, r2
 800c362:	683a      	ldr	r2, [r7, #0]
 800c364:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c366:	2300      	movs	r3, #0
}
 800c368:	4618      	mov	r0, r3
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c372:	4770      	bx	lr

0800c374 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c374:	b480      	push	{r7}
 800c376:	b087      	sub	sp, #28
 800c378:	af00      	add	r7, sp, #0
 800c37a:	60f8      	str	r0, [r7, #12]
 800c37c:	60b9      	str	r1, [r7, #8]
 800c37e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	32b0      	adds	r2, #176	@ 0xb0
 800c38a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c38e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d101      	bne.n	800c39a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c396:	2303      	movs	r3, #3
 800c398:	e008      	b.n	800c3ac <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c39a:	697b      	ldr	r3, [r7, #20]
 800c39c:	68ba      	ldr	r2, [r7, #8]
 800c39e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c3aa:	2300      	movs	r3, #0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	371c      	adds	r7, #28
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr

0800c3b8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	b085      	sub	sp, #20
 800c3bc:	af00      	add	r7, sp, #0
 800c3be:	6078      	str	r0, [r7, #4]
 800c3c0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	32b0      	adds	r2, #176	@ 0xb0
 800c3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d101      	bne.n	800c3dc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e004      	b.n	800c3e6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	683a      	ldr	r2, [r7, #0]
 800c3e0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c3e4:	2300      	movs	r3, #0
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr
	...

0800c3f4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	32b0      	adds	r2, #176	@ 0xb0
 800c406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c40a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c40c:	2301      	movs	r3, #1
 800c40e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c410:	68bb      	ldr	r3, [r7, #8]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d101      	bne.n	800c41a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c416:	2303      	movs	r3, #3
 800c418:	e025      	b.n	800c466 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c41a:	68bb      	ldr	r3, [r7, #8]
 800c41c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c420:	2b00      	cmp	r3, #0
 800c422:	d11f      	bne.n	800c464 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	2201      	movs	r2, #1
 800c428:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c42c:	4b10      	ldr	r3, [pc, #64]	@ (800c470 <USBD_CDC_TransmitPacket+0x7c>)
 800c42e:	781b      	ldrb	r3, [r3, #0]
 800c430:	f003 020f 	and.w	r2, r3, #15
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c43a:	6878      	ldr	r0, [r7, #4]
 800c43c:	4613      	mov	r3, r2
 800c43e:	009b      	lsls	r3, r3, #2
 800c440:	4413      	add	r3, r2
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	4403      	add	r3, r0
 800c446:	3314      	adds	r3, #20
 800c448:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c44a:	4b09      	ldr	r3, [pc, #36]	@ (800c470 <USBD_CDC_TransmitPacket+0x7c>)
 800c44c:	7819      	ldrb	r1, [r3, #0]
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f002 f843 	bl	800e4e6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c460:	2300      	movs	r3, #0
 800c462:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c464:	7bfb      	ldrb	r3, [r7, #15]
}
 800c466:	4618      	mov	r0, r3
 800c468:	3710      	adds	r7, #16
 800c46a:	46bd      	mov	sp, r7
 800c46c:	bd80      	pop	{r7, pc}
 800c46e:	bf00      	nop
 800c470:	200000bf 	.word	0x200000bf

0800c474 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b084      	sub	sp, #16
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	32b0      	adds	r2, #176	@ 0xb0
 800c486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c48a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	32b0      	adds	r2, #176	@ 0xb0
 800c496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d101      	bne.n	800c4a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c49e:	2303      	movs	r3, #3
 800c4a0:	e018      	b.n	800c4d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	7c1b      	ldrb	r3, [r3, #16]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d10a      	bne.n	800c4c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4aa:	4b0c      	ldr	r3, [pc, #48]	@ (800c4dc <USBD_CDC_ReceivePacket+0x68>)
 800c4ac:	7819      	ldrb	r1, [r3, #0]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c4b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f002 f835 	bl	800e528 <USBD_LL_PrepareReceive>
 800c4be:	e008      	b.n	800c4d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c4c0:	4b06      	ldr	r3, [pc, #24]	@ (800c4dc <USBD_CDC_ReceivePacket+0x68>)
 800c4c2:	7819      	ldrb	r1, [r3, #0]
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c4ca:	2340      	movs	r3, #64	@ 0x40
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f002 f82b 	bl	800e528 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c4d2:	2300      	movs	r3, #0
}
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	3710      	adds	r7, #16
 800c4d8:	46bd      	mov	sp, r7
 800c4da:	bd80      	pop	{r7, pc}
 800c4dc:	200000c0 	.word	0x200000c0

0800c4e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b086      	sub	sp, #24
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	60f8      	str	r0, [r7, #12]
 800c4e8:	60b9      	str	r1, [r7, #8]
 800c4ea:	4613      	mov	r3, r2
 800c4ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2b00      	cmp	r3, #0
 800c4f2:	d101      	bne.n	800c4f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	e01f      	b.n	800c538 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	2200      	movs	r2, #0
 800c504:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d003      	beq.n	800c51e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	2201      	movs	r2, #1
 800c522:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	79fa      	ldrb	r2, [r7, #7]
 800c52a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f001 fea5 	bl	800e27c <USBD_LL_Init>
 800c532:	4603      	mov	r3, r0
 800c534:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c536:	7dfb      	ldrb	r3, [r7, #23]
}
 800c538:	4618      	mov	r0, r3
 800c53a:	3718      	adds	r7, #24
 800c53c:	46bd      	mov	sp, r7
 800c53e:	bd80      	pop	{r7, pc}

0800c540 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b084      	sub	sp, #16
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c54a:	2300      	movs	r3, #0
 800c54c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d101      	bne.n	800c558 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c554:	2303      	movs	r3, #3
 800c556:	e025      	b.n	800c5a4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	683a      	ldr	r2, [r7, #0]
 800c55c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	32ae      	adds	r2, #174	@ 0xae
 800c56a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c56e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c570:	2b00      	cmp	r3, #0
 800c572:	d00f      	beq.n	800c594 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	32ae      	adds	r2, #174	@ 0xae
 800c57e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c584:	f107 020e 	add.w	r2, r7, #14
 800c588:	4610      	mov	r0, r2
 800c58a:	4798      	blx	r3
 800c58c:	4602      	mov	r2, r0
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c59a:	1c5a      	adds	r2, r3, #1
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c5a2:	2300      	movs	r3, #0
}
 800c5a4:	4618      	mov	r0, r3
 800c5a6:	3710      	adds	r7, #16
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	bd80      	pop	{r7, pc}

0800c5ac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c5ac:	b580      	push	{r7, lr}
 800c5ae:	b082      	sub	sp, #8
 800c5b0:	af00      	add	r7, sp, #0
 800c5b2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c5b4:	6878      	ldr	r0, [r7, #4]
 800c5b6:	f001 fead 	bl	800e314 <USBD_LL_Start>
 800c5ba:	4603      	mov	r3, r0
}
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3708      	adds	r7, #8
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	bd80      	pop	{r7, pc}

0800c5c4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c5c4:	b480      	push	{r7}
 800c5c6:	b083      	sub	sp, #12
 800c5c8:	af00      	add	r7, sp, #0
 800c5ca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c5cc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	370c      	adds	r7, #12
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c5da:	b580      	push	{r7, lr}
 800c5dc:	b084      	sub	sp, #16
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	460b      	mov	r3, r1
 800c5e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5e6:	2300      	movs	r3, #0
 800c5e8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d009      	beq.n	800c608 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	78fa      	ldrb	r2, [r7, #3]
 800c5fe:	4611      	mov	r1, r2
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	4798      	blx	r3
 800c604:	4603      	mov	r3, r0
 800c606:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}

0800c612 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b084      	sub	sp, #16
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
 800c61a:	460b      	mov	r3, r1
 800c61c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c61e:	2300      	movs	r3, #0
 800c620:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	78fa      	ldrb	r2, [r7, #3]
 800c62c:	4611      	mov	r1, r2
 800c62e:	6878      	ldr	r0, [r7, #4]
 800c630:	4798      	blx	r3
 800c632:	4603      	mov	r3, r0
 800c634:	2b00      	cmp	r3, #0
 800c636:	d001      	beq.n	800c63c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c638:	2303      	movs	r3, #3
 800c63a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c63e:	4618      	mov	r0, r3
 800c640:	3710      	adds	r7, #16
 800c642:	46bd      	mov	sp, r7
 800c644:	bd80      	pop	{r7, pc}

0800c646 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c646:	b580      	push	{r7, lr}
 800c648:	b084      	sub	sp, #16
 800c64a:	af00      	add	r7, sp, #0
 800c64c:	6078      	str	r0, [r7, #4]
 800c64e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c656:	6839      	ldr	r1, [r7, #0]
 800c658:	4618      	mov	r0, r3
 800c65a:	f001 f922 	bl	800d8a2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2201      	movs	r2, #1
 800c662:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c66c:	461a      	mov	r2, r3
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c67a:	f003 031f 	and.w	r3, r3, #31
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d01a      	beq.n	800c6b8 <USBD_LL_SetupStage+0x72>
 800c682:	2b02      	cmp	r3, #2
 800c684:	d822      	bhi.n	800c6cc <USBD_LL_SetupStage+0x86>
 800c686:	2b00      	cmp	r3, #0
 800c688:	d002      	beq.n	800c690 <USBD_LL_SetupStage+0x4a>
 800c68a:	2b01      	cmp	r3, #1
 800c68c:	d00a      	beq.n	800c6a4 <USBD_LL_SetupStage+0x5e>
 800c68e:	e01d      	b.n	800c6cc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c696:	4619      	mov	r1, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f000 fb77 	bl	800cd8c <USBD_StdDevReq>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	73fb      	strb	r3, [r7, #15]
      break;
 800c6a2:	e020      	b.n	800c6e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fbdf 	bl	800ce70 <USBD_StdItfReq>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	73fb      	strb	r3, [r7, #15]
      break;
 800c6b6:	e016      	b.n	800c6e6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c6be:	4619      	mov	r1, r3
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f000 fc41 	bl	800cf48 <USBD_StdEPReq>
 800c6c6:	4603      	mov	r3, r0
 800c6c8:	73fb      	strb	r3, [r7, #15]
      break;
 800c6ca:	e00c      	b.n	800c6e6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c6d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c6d6:	b2db      	uxtb	r3, r3
 800c6d8:	4619      	mov	r1, r3
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f001 fe7a 	bl	800e3d4 <USBD_LL_StallEP>
 800c6e0:	4603      	mov	r3, r0
 800c6e2:	73fb      	strb	r3, [r7, #15]
      break;
 800c6e4:	bf00      	nop
  }

  return ret;
 800c6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3710      	adds	r7, #16
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b086      	sub	sp, #24
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	60f8      	str	r0, [r7, #12]
 800c6f8:	460b      	mov	r3, r1
 800c6fa:	607a      	str	r2, [r7, #4]
 800c6fc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c6fe:	2300      	movs	r3, #0
 800c700:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c702:	7afb      	ldrb	r3, [r7, #11]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d177      	bne.n	800c7f8 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c70e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c716:	2b03      	cmp	r3, #3
 800c718:	f040 80a1 	bne.w	800c85e <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800c71c:	693b      	ldr	r3, [r7, #16]
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	693a      	ldr	r2, [r7, #16]
 800c722:	8992      	ldrh	r2, [r2, #12]
 800c724:	4293      	cmp	r3, r2
 800c726:	d91c      	bls.n	800c762 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800c728:	693b      	ldr	r3, [r7, #16]
 800c72a:	685b      	ldr	r3, [r3, #4]
 800c72c:	693a      	ldr	r2, [r7, #16]
 800c72e:	8992      	ldrh	r2, [r2, #12]
 800c730:	1a9a      	subs	r2, r3, r2
 800c732:	693b      	ldr	r3, [r7, #16]
 800c734:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	691b      	ldr	r3, [r3, #16]
 800c73a:	693a      	ldr	r2, [r7, #16]
 800c73c:	8992      	ldrh	r2, [r2, #12]
 800c73e:	441a      	add	r2, r3
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	6919      	ldr	r1, [r3, #16]
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	899b      	ldrh	r3, [r3, #12]
 800c74c:	461a      	mov	r2, r3
 800c74e:	693b      	ldr	r3, [r7, #16]
 800c750:	685b      	ldr	r3, [r3, #4]
 800c752:	4293      	cmp	r3, r2
 800c754:	bf38      	it	cc
 800c756:	4613      	movcc	r3, r2
 800c758:	461a      	mov	r2, r3
 800c75a:	68f8      	ldr	r0, [r7, #12]
 800c75c:	f001 f9a8 	bl	800dab0 <USBD_CtlContinueRx>
 800c760:	e07d      	b.n	800c85e <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c768:	f003 031f 	and.w	r3, r3, #31
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d014      	beq.n	800c79a <USBD_LL_DataOutStage+0xaa>
 800c770:	2b02      	cmp	r3, #2
 800c772:	d81d      	bhi.n	800c7b0 <USBD_LL_DataOutStage+0xc0>
 800c774:	2b00      	cmp	r3, #0
 800c776:	d002      	beq.n	800c77e <USBD_LL_DataOutStage+0x8e>
 800c778:	2b01      	cmp	r3, #1
 800c77a:	d003      	beq.n	800c784 <USBD_LL_DataOutStage+0x94>
 800c77c:	e018      	b.n	800c7b0 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c77e:	2300      	movs	r3, #0
 800c780:	75bb      	strb	r3, [r7, #22]
            break;
 800c782:	e018      	b.n	800c7b6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c78a:	b2db      	uxtb	r3, r3
 800c78c:	4619      	mov	r1, r3
 800c78e:	68f8      	ldr	r0, [r7, #12]
 800c790:	f000 fa6e 	bl	800cc70 <USBD_CoreFindIF>
 800c794:	4603      	mov	r3, r0
 800c796:	75bb      	strb	r3, [r7, #22]
            break;
 800c798:	e00d      	b.n	800c7b6 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c7a0:	b2db      	uxtb	r3, r3
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	68f8      	ldr	r0, [r7, #12]
 800c7a6:	f000 fa70 	bl	800cc8a <USBD_CoreFindEP>
 800c7aa:	4603      	mov	r3, r0
 800c7ac:	75bb      	strb	r3, [r7, #22]
            break;
 800c7ae:	e002      	b.n	800c7b6 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	75bb      	strb	r3, [r7, #22]
            break;
 800c7b4:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c7b6:	7dbb      	ldrb	r3, [r7, #22]
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d119      	bne.n	800c7f0 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	2b03      	cmp	r3, #3
 800c7c6:	d113      	bne.n	800c7f0 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c7c8:	7dba      	ldrb	r2, [r7, #22]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	32ae      	adds	r2, #174	@ 0xae
 800c7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d2:	691b      	ldr	r3, [r3, #16]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d00b      	beq.n	800c7f0 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800c7d8:	7dba      	ldrb	r2, [r7, #22]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c7e0:	7dba      	ldrb	r2, [r7, #22]
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	32ae      	adds	r2, #174	@ 0xae
 800c7e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ea:	691b      	ldr	r3, [r3, #16]
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c7f0:	68f8      	ldr	r0, [r7, #12]
 800c7f2:	f001 f96e 	bl	800dad2 <USBD_CtlSendStatus>
 800c7f6:	e032      	b.n	800c85e <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c7f8:	7afb      	ldrb	r3, [r7, #11]
 800c7fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c7fe:	b2db      	uxtb	r3, r3
 800c800:	4619      	mov	r1, r3
 800c802:	68f8      	ldr	r0, [r7, #12]
 800c804:	f000 fa41 	bl	800cc8a <USBD_CoreFindEP>
 800c808:	4603      	mov	r3, r0
 800c80a:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c80c:	7dbb      	ldrb	r3, [r7, #22]
 800c80e:	2bff      	cmp	r3, #255	@ 0xff
 800c810:	d025      	beq.n	800c85e <USBD_LL_DataOutStage+0x16e>
 800c812:	7dbb      	ldrb	r3, [r7, #22]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d122      	bne.n	800c85e <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	2b03      	cmp	r3, #3
 800c822:	d117      	bne.n	800c854 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c824:	7dba      	ldrb	r2, [r7, #22]
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	32ae      	adds	r2, #174	@ 0xae
 800c82a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c82e:	699b      	ldr	r3, [r3, #24]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00f      	beq.n	800c854 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800c834:	7dba      	ldrb	r2, [r7, #22]
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c83c:	7dba      	ldrb	r2, [r7, #22]
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	32ae      	adds	r2, #174	@ 0xae
 800c842:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c846:	699b      	ldr	r3, [r3, #24]
 800c848:	7afa      	ldrb	r2, [r7, #11]
 800c84a:	4611      	mov	r1, r2
 800c84c:	68f8      	ldr	r0, [r7, #12]
 800c84e:	4798      	blx	r3
 800c850:	4603      	mov	r3, r0
 800c852:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c854:	7dfb      	ldrb	r3, [r7, #23]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d001      	beq.n	800c85e <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800c85a:	7dfb      	ldrb	r3, [r7, #23]
 800c85c:	e000      	b.n	800c860 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800c85e:	2300      	movs	r3, #0
}
 800c860:	4618      	mov	r0, r3
 800c862:	3718      	adds	r7, #24
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b086      	sub	sp, #24
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	60f8      	str	r0, [r7, #12]
 800c870:	460b      	mov	r3, r1
 800c872:	607a      	str	r2, [r7, #4]
 800c874:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800c876:	7afb      	ldrb	r3, [r7, #11]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d178      	bne.n	800c96e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800c87c:	68fb      	ldr	r3, [r7, #12]
 800c87e:	3314      	adds	r3, #20
 800c880:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c888:	2b02      	cmp	r3, #2
 800c88a:	d163      	bne.n	800c954 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800c88c:	693b      	ldr	r3, [r7, #16]
 800c88e:	685b      	ldr	r3, [r3, #4]
 800c890:	693a      	ldr	r2, [r7, #16]
 800c892:	8992      	ldrh	r2, [r2, #12]
 800c894:	4293      	cmp	r3, r2
 800c896:	d91c      	bls.n	800c8d2 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800c898:	693b      	ldr	r3, [r7, #16]
 800c89a:	685b      	ldr	r3, [r3, #4]
 800c89c:	693a      	ldr	r2, [r7, #16]
 800c89e:	8992      	ldrh	r2, [r2, #12]
 800c8a0:	1a9a      	subs	r2, r3, r2
 800c8a2:	693b      	ldr	r3, [r7, #16]
 800c8a4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	693a      	ldr	r2, [r7, #16]
 800c8ac:	8992      	ldrh	r2, [r2, #12]
 800c8ae:	441a      	add	r2, r3
 800c8b0:	693b      	ldr	r3, [r7, #16]
 800c8b2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800c8b4:	693b      	ldr	r3, [r7, #16]
 800c8b6:	6919      	ldr	r1, [r3, #16]
 800c8b8:	693b      	ldr	r3, [r7, #16]
 800c8ba:	685b      	ldr	r3, [r3, #4]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f001 f8c4 	bl	800da4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c8c4:	2300      	movs	r3, #0
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	2100      	movs	r1, #0
 800c8ca:	68f8      	ldr	r0, [r7, #12]
 800c8cc:	f001 fe2c 	bl	800e528 <USBD_LL_PrepareReceive>
 800c8d0:	e040      	b.n	800c954 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	899b      	ldrh	r3, [r3, #12]
 800c8d6:	461a      	mov	r2, r3
 800c8d8:	693b      	ldr	r3, [r7, #16]
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	429a      	cmp	r2, r3
 800c8de:	d11c      	bne.n	800c91a <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	693a      	ldr	r2, [r7, #16]
 800c8e6:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d316      	bcc.n	800c91a <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	681a      	ldr	r2, [r3, #0]
 800c8f0:	68fb      	ldr	r3, [r7, #12]
 800c8f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c8f6:	429a      	cmp	r2, r3
 800c8f8:	d20f      	bcs.n	800c91a <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c8fa:	2200      	movs	r2, #0
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	68f8      	ldr	r0, [r7, #12]
 800c900:	f001 f8a4 	bl	800da4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2200      	movs	r2, #0
 800c908:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c90c:	2300      	movs	r3, #0
 800c90e:	2200      	movs	r2, #0
 800c910:	2100      	movs	r1, #0
 800c912:	68f8      	ldr	r0, [r7, #12]
 800c914:	f001 fe08 	bl	800e528 <USBD_LL_PrepareReceive>
 800c918:	e01c      	b.n	800c954 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c920:	b2db      	uxtb	r3, r3
 800c922:	2b03      	cmp	r3, #3
 800c924:	d10f      	bne.n	800c946 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d009      	beq.n	800c946 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2200      	movs	r2, #0
 800c936:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c940:	68db      	ldr	r3, [r3, #12]
 800c942:	68f8      	ldr	r0, [r7, #12]
 800c944:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c946:	2180      	movs	r1, #128	@ 0x80
 800c948:	68f8      	ldr	r0, [r7, #12]
 800c94a:	f001 fd43 	bl	800e3d4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c94e:	68f8      	ldr	r0, [r7, #12]
 800c950:	f001 f8d2 	bl	800daf8 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d03a      	beq.n	800c9d4 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800c95e:	68f8      	ldr	r0, [r7, #12]
 800c960:	f7ff fe30 	bl	800c5c4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c964:	68fb      	ldr	r3, [r7, #12]
 800c966:	2200      	movs	r2, #0
 800c968:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c96c:	e032      	b.n	800c9d4 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c96e:	7afb      	ldrb	r3, [r7, #11]
 800c970:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c974:	b2db      	uxtb	r3, r3
 800c976:	4619      	mov	r1, r3
 800c978:	68f8      	ldr	r0, [r7, #12]
 800c97a:	f000 f986 	bl	800cc8a <USBD_CoreFindEP>
 800c97e:	4603      	mov	r3, r0
 800c980:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c982:	7dfb      	ldrb	r3, [r7, #23]
 800c984:	2bff      	cmp	r3, #255	@ 0xff
 800c986:	d025      	beq.n	800c9d4 <USBD_LL_DataInStage+0x16c>
 800c988:	7dfb      	ldrb	r3, [r7, #23]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d122      	bne.n	800c9d4 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c994:	b2db      	uxtb	r3, r3
 800c996:	2b03      	cmp	r3, #3
 800c998:	d11c      	bne.n	800c9d4 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c99a:	7dfa      	ldrb	r2, [r7, #23]
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	32ae      	adds	r2, #174	@ 0xae
 800c9a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9a4:	695b      	ldr	r3, [r3, #20]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d014      	beq.n	800c9d4 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800c9aa:	7dfa      	ldrb	r2, [r7, #23]
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c9b2:	7dfa      	ldrb	r2, [r7, #23]
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	32ae      	adds	r2, #174	@ 0xae
 800c9b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	7afa      	ldrb	r2, [r7, #11]
 800c9c0:	4611      	mov	r1, r2
 800c9c2:	68f8      	ldr	r0, [r7, #12]
 800c9c4:	4798      	blx	r3
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c9ca:	7dbb      	ldrb	r3, [r7, #22]
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d001      	beq.n	800c9d4 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800c9d0:	7dbb      	ldrb	r3, [r7, #22]
 800c9d2:	e000      	b.n	800c9d6 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3718      	adds	r7, #24
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}

0800c9de <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c9de:	b580      	push	{r7, lr}
 800c9e0:	b084      	sub	sp, #16
 800c9e2:	af00      	add	r7, sp, #0
 800c9e4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2201      	movs	r2, #1
 800c9ee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	2200      	movs	r2, #0
 800c9f6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca16:	2b00      	cmp	r3, #0
 800ca18:	d014      	beq.n	800ca44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00e      	beq.n	800ca44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	687a      	ldr	r2, [r7, #4]
 800ca30:	6852      	ldr	r2, [r2, #4]
 800ca32:	b2d2      	uxtb	r2, r2
 800ca34:	4611      	mov	r1, r2
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	4798      	blx	r3
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ca40:	2303      	movs	r3, #3
 800ca42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca44:	2340      	movs	r3, #64	@ 0x40
 800ca46:	2200      	movs	r2, #0
 800ca48:	2100      	movs	r1, #0
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f001 fc7d 	bl	800e34a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	2201      	movs	r2, #1
 800ca54:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2240      	movs	r2, #64	@ 0x40
 800ca5c:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ca60:	2340      	movs	r3, #64	@ 0x40
 800ca62:	2200      	movs	r2, #0
 800ca64:	2180      	movs	r1, #128	@ 0x80
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f001 fc6f 	bl	800e34a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	2201      	movs	r2, #1
 800ca70:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	2240      	movs	r2, #64	@ 0x40
 800ca78:	841a      	strh	r2, [r3, #32]

  return ret;
 800ca7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	3710      	adds	r7, #16
 800ca80:	46bd      	mov	sp, r7
 800ca82:	bd80      	pop	{r7, pc}

0800ca84 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ca84:	b480      	push	{r7}
 800ca86:	b083      	sub	sp, #12
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	78fa      	ldrb	r2, [r7, #3]
 800ca94:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ca96:	2300      	movs	r3, #0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	370c      	adds	r7, #12
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa2:	4770      	bx	lr

0800caa4 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800caa4:	b480      	push	{r7}
 800caa6:	b083      	sub	sp, #12
 800caa8:	af00      	add	r7, sp, #0
 800caaa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cab2:	b2db      	uxtb	r3, r3
 800cab4:	2b04      	cmp	r3, #4
 800cab6:	d006      	beq.n	800cac6 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cabe:	b2da      	uxtb	r2, r3
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	2204      	movs	r2, #4
 800caca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cace:	2300      	movs	r3, #0
}
 800cad0:	4618      	mov	r0, r3
 800cad2:	370c      	adds	r7, #12
 800cad4:	46bd      	mov	sp, r7
 800cad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cada:	4770      	bx	lr

0800cadc <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cadc:	b480      	push	{r7}
 800cade:	b083      	sub	sp, #12
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800caea:	b2db      	uxtb	r3, r3
 800caec:	2b04      	cmp	r3, #4
 800caee:	d106      	bne.n	800cafe <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800caf6:	b2da      	uxtb	r2, r3
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	370c      	adds	r7, #12
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b082      	sub	sp, #8
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	2b03      	cmp	r3, #3
 800cb1e:	d110      	bne.n	800cb42 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00b      	beq.n	800cb42 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb30:	69db      	ldr	r3, [r3, #28]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d005      	beq.n	800cb42 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cb3c:	69db      	ldr	r3, [r3, #28]
 800cb3e:	6878      	ldr	r0, [r7, #4]
 800cb40:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cb42:	2300      	movs	r3, #0
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3708      	adds	r7, #8
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	bd80      	pop	{r7, pc}

0800cb4c <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b082      	sub	sp, #8
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
 800cb54:	460b      	mov	r3, r1
 800cb56:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	32ae      	adds	r2, #174	@ 0xae
 800cb62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d101      	bne.n	800cb6e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cb6a:	2303      	movs	r3, #3
 800cb6c:	e01c      	b.n	800cba8 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	2b03      	cmp	r3, #3
 800cb78:	d115      	bne.n	800cba6 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	32ae      	adds	r2, #174	@ 0xae
 800cb84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb88:	6a1b      	ldr	r3, [r3, #32]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00b      	beq.n	800cba6 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	32ae      	adds	r2, #174	@ 0xae
 800cb98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	78fa      	ldrb	r2, [r7, #3]
 800cba0:	4611      	mov	r1, r2
 800cba2:	6878      	ldr	r0, [r7, #4]
 800cba4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cba6:	2300      	movs	r3, #0
}
 800cba8:	4618      	mov	r0, r3
 800cbaa:	3708      	adds	r7, #8
 800cbac:	46bd      	mov	sp, r7
 800cbae:	bd80      	pop	{r7, pc}

0800cbb0 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cbb0:	b580      	push	{r7, lr}
 800cbb2:	b082      	sub	sp, #8
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	6078      	str	r0, [r7, #4]
 800cbb8:	460b      	mov	r3, r1
 800cbba:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	32ae      	adds	r2, #174	@ 0xae
 800cbc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d101      	bne.n	800cbd2 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cbce:	2303      	movs	r3, #3
 800cbd0:	e01c      	b.n	800cc0c <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cbd8:	b2db      	uxtb	r3, r3
 800cbda:	2b03      	cmp	r3, #3
 800cbdc:	d115      	bne.n	800cc0a <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	32ae      	adds	r2, #174	@ 0xae
 800cbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d00b      	beq.n	800cc0a <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	32ae      	adds	r2, #174	@ 0xae
 800cbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cc02:	78fa      	ldrb	r2, [r7, #3]
 800cc04:	4611      	mov	r1, r2
 800cc06:	6878      	ldr	r0, [r7, #4]
 800cc08:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cc0a:	2300      	movs	r3, #0
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3708      	adds	r7, #8
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b083      	sub	sp, #12
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	370c      	adds	r7, #12
 800cc22:	46bd      	mov	sp, r7
 800cc24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc28:	4770      	bx	lr

0800cc2a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800cc2a:	b580      	push	{r7, lr}
 800cc2c:	b084      	sub	sp, #16
 800cc2e:	af00      	add	r7, sp, #0
 800cc30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800cc32:	2300      	movs	r3, #0
 800cc34:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2201      	movs	r2, #1
 800cc3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d00e      	beq.n	800cc66 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	6852      	ldr	r2, [r2, #4]
 800cc54:	b2d2      	uxtb	r2, r2
 800cc56:	4611      	mov	r1, r2
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	4798      	blx	r3
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d001      	beq.n	800cc66 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cc62:	2303      	movs	r3, #3
 800cc64:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cc66:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3710      	adds	r7, #16
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}

0800cc70 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc7c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	370c      	adds	r7, #12
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cc8a:	b480      	push	{r7}
 800cc8c:	b083      	sub	sp, #12
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	6078      	str	r0, [r7, #4]
 800cc92:	460b      	mov	r3, r1
 800cc94:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cc96:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	370c      	adds	r7, #12
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cca4:	b580      	push	{r7, lr}
 800cca6:	b086      	sub	sp, #24
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	885b      	ldrh	r3, [r3, #2]
 800ccc0:	b29b      	uxth	r3, r3
 800ccc2:	68fa      	ldr	r2, [r7, #12]
 800ccc4:	7812      	ldrb	r2, [r2, #0]
 800ccc6:	4293      	cmp	r3, r2
 800ccc8:	d91f      	bls.n	800cd0a <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ccd0:	e013      	b.n	800ccfa <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ccd2:	f107 030a 	add.w	r3, r7, #10
 800ccd6:	4619      	mov	r1, r3
 800ccd8:	6978      	ldr	r0, [r7, #20]
 800ccda:	f000 f81b 	bl	800cd14 <USBD_GetNextDesc>
 800ccde:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	785b      	ldrb	r3, [r3, #1]
 800cce4:	2b05      	cmp	r3, #5
 800cce6:	d108      	bne.n	800ccfa <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cce8:	697b      	ldr	r3, [r7, #20]
 800ccea:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800ccec:	693b      	ldr	r3, [r7, #16]
 800ccee:	789b      	ldrb	r3, [r3, #2]
 800ccf0:	78fa      	ldrb	r2, [r7, #3]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d008      	beq.n	800cd08 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	885b      	ldrh	r3, [r3, #2]
 800ccfe:	b29a      	uxth	r2, r3
 800cd00:	897b      	ldrh	r3, [r7, #10]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d8e5      	bhi.n	800ccd2 <USBD_GetEpDesc+0x2e>
 800cd06:	e000      	b.n	800cd0a <USBD_GetEpDesc+0x66>
          break;
 800cd08:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cd0a:	693b      	ldr	r3, [r7, #16]
}
 800cd0c:	4618      	mov	r0, r3
 800cd0e:	3718      	adds	r7, #24
 800cd10:	46bd      	mov	sp, r7
 800cd12:	bd80      	pop	{r7, pc}

0800cd14 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cd14:	b480      	push	{r7}
 800cd16:	b085      	sub	sp, #20
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cd22:	683b      	ldr	r3, [r7, #0]
 800cd24:	881b      	ldrh	r3, [r3, #0]
 800cd26:	68fa      	ldr	r2, [r7, #12]
 800cd28:	7812      	ldrb	r2, [r2, #0]
 800cd2a:	4413      	add	r3, r2
 800cd2c:	b29a      	uxth	r2, r3
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	781b      	ldrb	r3, [r3, #0]
 800cd36:	461a      	mov	r2, r3
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3714      	adds	r7, #20
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b087      	sub	sp, #28
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	781b      	ldrb	r3, [r3, #0]
 800cd5c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	3301      	adds	r3, #1
 800cd62:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cd64:	697b      	ldr	r3, [r7, #20]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cd6a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800cd6e:	021b      	lsls	r3, r3, #8
 800cd70:	b21a      	sxth	r2, r3
 800cd72:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cd76:	4313      	orrs	r3, r2
 800cd78:	b21b      	sxth	r3, r3
 800cd7a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cd7c:	89fb      	ldrh	r3, [r7, #14]
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	371c      	adds	r7, #28
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr
	...

0800cd8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b084      	sub	sp, #16
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cd96:	2300      	movs	r3, #0
 800cd98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	781b      	ldrb	r3, [r3, #0]
 800cd9e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cda2:	2b40      	cmp	r3, #64	@ 0x40
 800cda4:	d005      	beq.n	800cdb2 <USBD_StdDevReq+0x26>
 800cda6:	2b40      	cmp	r3, #64	@ 0x40
 800cda8:	d857      	bhi.n	800ce5a <USBD_StdDevReq+0xce>
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d00f      	beq.n	800cdce <USBD_StdDevReq+0x42>
 800cdae:	2b20      	cmp	r3, #32
 800cdb0:	d153      	bne.n	800ce5a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	32ae      	adds	r2, #174	@ 0xae
 800cdbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc0:	689b      	ldr	r3, [r3, #8]
 800cdc2:	6839      	ldr	r1, [r7, #0]
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	4798      	blx	r3
 800cdc8:	4603      	mov	r3, r0
 800cdca:	73fb      	strb	r3, [r7, #15]
      break;
 800cdcc:	e04a      	b.n	800ce64 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	785b      	ldrb	r3, [r3, #1]
 800cdd2:	2b09      	cmp	r3, #9
 800cdd4:	d83b      	bhi.n	800ce4e <USBD_StdDevReq+0xc2>
 800cdd6:	a201      	add	r2, pc, #4	@ (adr r2, 800cddc <USBD_StdDevReq+0x50>)
 800cdd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cddc:	0800ce31 	.word	0x0800ce31
 800cde0:	0800ce45 	.word	0x0800ce45
 800cde4:	0800ce4f 	.word	0x0800ce4f
 800cde8:	0800ce3b 	.word	0x0800ce3b
 800cdec:	0800ce4f 	.word	0x0800ce4f
 800cdf0:	0800ce0f 	.word	0x0800ce0f
 800cdf4:	0800ce05 	.word	0x0800ce05
 800cdf8:	0800ce4f 	.word	0x0800ce4f
 800cdfc:	0800ce27 	.word	0x0800ce27
 800ce00:	0800ce19 	.word	0x0800ce19
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800ce04:	6839      	ldr	r1, [r7, #0]
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f000 fa3e 	bl	800d288 <USBD_GetDescriptor>
          break;
 800ce0c:	e024      	b.n	800ce58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800ce0e:	6839      	ldr	r1, [r7, #0]
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f000 fba3 	bl	800d55c <USBD_SetAddress>
          break;
 800ce16:	e01f      	b.n	800ce58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800ce18:	6839      	ldr	r1, [r7, #0]
 800ce1a:	6878      	ldr	r0, [r7, #4]
 800ce1c:	f000 fbe2 	bl	800d5e4 <USBD_SetConfig>
 800ce20:	4603      	mov	r3, r0
 800ce22:	73fb      	strb	r3, [r7, #15]
          break;
 800ce24:	e018      	b.n	800ce58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800ce26:	6839      	ldr	r1, [r7, #0]
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f000 fc85 	bl	800d738 <USBD_GetConfig>
          break;
 800ce2e:	e013      	b.n	800ce58 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ce30:	6839      	ldr	r1, [r7, #0]
 800ce32:	6878      	ldr	r0, [r7, #4]
 800ce34:	f000 fcb6 	bl	800d7a4 <USBD_GetStatus>
          break;
 800ce38:	e00e      	b.n	800ce58 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ce3a:	6839      	ldr	r1, [r7, #0]
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f000 fce5 	bl	800d80c <USBD_SetFeature>
          break;
 800ce42:	e009      	b.n	800ce58 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ce44:	6839      	ldr	r1, [r7, #0]
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f000 fd09 	bl	800d85e <USBD_ClrFeature>
          break;
 800ce4c:	e004      	b.n	800ce58 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ce4e:	6839      	ldr	r1, [r7, #0]
 800ce50:	6878      	ldr	r0, [r7, #4]
 800ce52:	f000 fd60 	bl	800d916 <USBD_CtlError>
          break;
 800ce56:	bf00      	nop
      }
      break;
 800ce58:	e004      	b.n	800ce64 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ce5a:	6839      	ldr	r1, [r7, #0]
 800ce5c:	6878      	ldr	r0, [r7, #4]
 800ce5e:	f000 fd5a 	bl	800d916 <USBD_CtlError>
      break;
 800ce62:	bf00      	nop
  }

  return ret;
 800ce64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce66:	4618      	mov	r0, r3
 800ce68:	3710      	adds	r7, #16
 800ce6a:	46bd      	mov	sp, r7
 800ce6c:	bd80      	pop	{r7, pc}
 800ce6e:	bf00      	nop

0800ce70 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b084      	sub	sp, #16
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	6078      	str	r0, [r7, #4]
 800ce78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	781b      	ldrb	r3, [r3, #0]
 800ce82:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ce86:	2b40      	cmp	r3, #64	@ 0x40
 800ce88:	d005      	beq.n	800ce96 <USBD_StdItfReq+0x26>
 800ce8a:	2b40      	cmp	r3, #64	@ 0x40
 800ce8c:	d852      	bhi.n	800cf34 <USBD_StdItfReq+0xc4>
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d001      	beq.n	800ce96 <USBD_StdItfReq+0x26>
 800ce92:	2b20      	cmp	r3, #32
 800ce94:	d14e      	bne.n	800cf34 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce9c:	b2db      	uxtb	r3, r3
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	2b02      	cmp	r3, #2
 800cea2:	d840      	bhi.n	800cf26 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cea4:	683b      	ldr	r3, [r7, #0]
 800cea6:	889b      	ldrh	r3, [r3, #4]
 800cea8:	b2db      	uxtb	r3, r3
 800ceaa:	2b01      	cmp	r3, #1
 800ceac:	d836      	bhi.n	800cf1c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ceae:	683b      	ldr	r3, [r7, #0]
 800ceb0:	889b      	ldrh	r3, [r3, #4]
 800ceb2:	b2db      	uxtb	r3, r3
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f7ff feda 	bl	800cc70 <USBD_CoreFindIF>
 800cebc:	4603      	mov	r3, r0
 800cebe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	2bff      	cmp	r3, #255	@ 0xff
 800cec4:	d01d      	beq.n	800cf02 <USBD_StdItfReq+0x92>
 800cec6:	7bbb      	ldrb	r3, [r7, #14]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d11a      	bne.n	800cf02 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cecc:	7bba      	ldrb	r2, [r7, #14]
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	32ae      	adds	r2, #174	@ 0xae
 800ced2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ced6:	689b      	ldr	r3, [r3, #8]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d00f      	beq.n	800cefc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cedc:	7bba      	ldrb	r2, [r7, #14]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cee4:	7bba      	ldrb	r2, [r7, #14]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	32ae      	adds	r2, #174	@ 0xae
 800ceea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	6839      	ldr	r1, [r7, #0]
 800cef2:	6878      	ldr	r0, [r7, #4]
 800cef4:	4798      	blx	r3
 800cef6:	4603      	mov	r3, r0
 800cef8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cefa:	e004      	b.n	800cf06 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cefc:	2303      	movs	r3, #3
 800cefe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cf00:	e001      	b.n	800cf06 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cf02:	2303      	movs	r3, #3
 800cf04:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cf06:	683b      	ldr	r3, [r7, #0]
 800cf08:	88db      	ldrh	r3, [r3, #6]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d110      	bne.n	800cf30 <USBD_StdItfReq+0xc0>
 800cf0e:	7bfb      	ldrb	r3, [r7, #15]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	d10d      	bne.n	800cf30 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cf14:	6878      	ldr	r0, [r7, #4]
 800cf16:	f000 fddc 	bl	800dad2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cf1a:	e009      	b.n	800cf30 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cf1c:	6839      	ldr	r1, [r7, #0]
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f000 fcf9 	bl	800d916 <USBD_CtlError>
          break;
 800cf24:	e004      	b.n	800cf30 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cf26:	6839      	ldr	r1, [r7, #0]
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 fcf4 	bl	800d916 <USBD_CtlError>
          break;
 800cf2e:	e000      	b.n	800cf32 <USBD_StdItfReq+0xc2>
          break;
 800cf30:	bf00      	nop
      }
      break;
 800cf32:	e004      	b.n	800cf3e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cf34:	6839      	ldr	r1, [r7, #0]
 800cf36:	6878      	ldr	r0, [r7, #4]
 800cf38:	f000 fced 	bl	800d916 <USBD_CtlError>
      break;
 800cf3c:	bf00      	nop
  }

  return ret;
 800cf3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf40:	4618      	mov	r0, r3
 800cf42:	3710      	adds	r7, #16
 800cf44:	46bd      	mov	sp, r7
 800cf46:	bd80      	pop	{r7, pc}

0800cf48 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf52:	2300      	movs	r3, #0
 800cf54:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cf56:	683b      	ldr	r3, [r7, #0]
 800cf58:	889b      	ldrh	r3, [r3, #4]
 800cf5a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	781b      	ldrb	r3, [r3, #0]
 800cf60:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cf64:	2b40      	cmp	r3, #64	@ 0x40
 800cf66:	d007      	beq.n	800cf78 <USBD_StdEPReq+0x30>
 800cf68:	2b40      	cmp	r3, #64	@ 0x40
 800cf6a:	f200 8181 	bhi.w	800d270 <USBD_StdEPReq+0x328>
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d02a      	beq.n	800cfc8 <USBD_StdEPReq+0x80>
 800cf72:	2b20      	cmp	r3, #32
 800cf74:	f040 817c 	bne.w	800d270 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cf78:	7bbb      	ldrb	r3, [r7, #14]
 800cf7a:	4619      	mov	r1, r3
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f7ff fe84 	bl	800cc8a <USBD_CoreFindEP>
 800cf82:	4603      	mov	r3, r0
 800cf84:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf86:	7b7b      	ldrb	r3, [r7, #13]
 800cf88:	2bff      	cmp	r3, #255	@ 0xff
 800cf8a:	f000 8176 	beq.w	800d27a <USBD_StdEPReq+0x332>
 800cf8e:	7b7b      	ldrb	r3, [r7, #13]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	f040 8172 	bne.w	800d27a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800cf96:	7b7a      	ldrb	r2, [r7, #13]
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cf9e:	7b7a      	ldrb	r2, [r7, #13]
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	32ae      	adds	r2, #174	@ 0xae
 800cfa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfa8:	689b      	ldr	r3, [r3, #8]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	f000 8165 	beq.w	800d27a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cfb0:	7b7a      	ldrb	r2, [r7, #13]
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	32ae      	adds	r2, #174	@ 0xae
 800cfb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfba:	689b      	ldr	r3, [r3, #8]
 800cfbc:	6839      	ldr	r1, [r7, #0]
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	4798      	blx	r3
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cfc6:	e158      	b.n	800d27a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	785b      	ldrb	r3, [r3, #1]
 800cfcc:	2b03      	cmp	r3, #3
 800cfce:	d008      	beq.n	800cfe2 <USBD_StdEPReq+0x9a>
 800cfd0:	2b03      	cmp	r3, #3
 800cfd2:	f300 8147 	bgt.w	800d264 <USBD_StdEPReq+0x31c>
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	f000 809b 	beq.w	800d112 <USBD_StdEPReq+0x1ca>
 800cfdc:	2b01      	cmp	r3, #1
 800cfde:	d03c      	beq.n	800d05a <USBD_StdEPReq+0x112>
 800cfe0:	e140      	b.n	800d264 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	2b02      	cmp	r3, #2
 800cfec:	d002      	beq.n	800cff4 <USBD_StdEPReq+0xac>
 800cfee:	2b03      	cmp	r3, #3
 800cff0:	d016      	beq.n	800d020 <USBD_StdEPReq+0xd8>
 800cff2:	e02c      	b.n	800d04e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cff4:	7bbb      	ldrb	r3, [r7, #14]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	d00d      	beq.n	800d016 <USBD_StdEPReq+0xce>
 800cffa:	7bbb      	ldrb	r3, [r7, #14]
 800cffc:	2b80      	cmp	r3, #128	@ 0x80
 800cffe:	d00a      	beq.n	800d016 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d000:	7bbb      	ldrb	r3, [r7, #14]
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f001 f9e5 	bl	800e3d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d00a:	2180      	movs	r1, #128	@ 0x80
 800d00c:	6878      	ldr	r0, [r7, #4]
 800d00e:	f001 f9e1 	bl	800e3d4 <USBD_LL_StallEP>
 800d012:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d014:	e020      	b.n	800d058 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d016:	6839      	ldr	r1, [r7, #0]
 800d018:	6878      	ldr	r0, [r7, #4]
 800d01a:	f000 fc7c 	bl	800d916 <USBD_CtlError>
              break;
 800d01e:	e01b      	b.n	800d058 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d020:	683b      	ldr	r3, [r7, #0]
 800d022:	885b      	ldrh	r3, [r3, #2]
 800d024:	2b00      	cmp	r3, #0
 800d026:	d10e      	bne.n	800d046 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d028:	7bbb      	ldrb	r3, [r7, #14]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d00b      	beq.n	800d046 <USBD_StdEPReq+0xfe>
 800d02e:	7bbb      	ldrb	r3, [r7, #14]
 800d030:	2b80      	cmp	r3, #128	@ 0x80
 800d032:	d008      	beq.n	800d046 <USBD_StdEPReq+0xfe>
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	88db      	ldrh	r3, [r3, #6]
 800d038:	2b00      	cmp	r3, #0
 800d03a:	d104      	bne.n	800d046 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d03c:	7bbb      	ldrb	r3, [r7, #14]
 800d03e:	4619      	mov	r1, r3
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f001 f9c7 	bl	800e3d4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	f000 fd43 	bl	800dad2 <USBD_CtlSendStatus>

              break;
 800d04c:	e004      	b.n	800d058 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 fc60 	bl	800d916 <USBD_CtlError>
              break;
 800d056:	bf00      	nop
          }
          break;
 800d058:	e109      	b.n	800d26e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d060:	b2db      	uxtb	r3, r3
 800d062:	2b02      	cmp	r3, #2
 800d064:	d002      	beq.n	800d06c <USBD_StdEPReq+0x124>
 800d066:	2b03      	cmp	r3, #3
 800d068:	d016      	beq.n	800d098 <USBD_StdEPReq+0x150>
 800d06a:	e04b      	b.n	800d104 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d06c:	7bbb      	ldrb	r3, [r7, #14]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d00d      	beq.n	800d08e <USBD_StdEPReq+0x146>
 800d072:	7bbb      	ldrb	r3, [r7, #14]
 800d074:	2b80      	cmp	r3, #128	@ 0x80
 800d076:	d00a      	beq.n	800d08e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d078:	7bbb      	ldrb	r3, [r7, #14]
 800d07a:	4619      	mov	r1, r3
 800d07c:	6878      	ldr	r0, [r7, #4]
 800d07e:	f001 f9a9 	bl	800e3d4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d082:	2180      	movs	r1, #128	@ 0x80
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f001 f9a5 	bl	800e3d4 <USBD_LL_StallEP>
 800d08a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d08c:	e040      	b.n	800d110 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d08e:	6839      	ldr	r1, [r7, #0]
 800d090:	6878      	ldr	r0, [r7, #4]
 800d092:	f000 fc40 	bl	800d916 <USBD_CtlError>
              break;
 800d096:	e03b      	b.n	800d110 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	885b      	ldrh	r3, [r3, #2]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d136      	bne.n	800d10e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d0a0:	7bbb      	ldrb	r3, [r7, #14]
 800d0a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d004      	beq.n	800d0b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d0aa:	7bbb      	ldrb	r3, [r7, #14]
 800d0ac:	4619      	mov	r1, r3
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f001 f9af 	bl	800e412 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fd0c 	bl	800dad2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d0ba:	7bbb      	ldrb	r3, [r7, #14]
 800d0bc:	4619      	mov	r1, r3
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f7ff fde3 	bl	800cc8a <USBD_CoreFindEP>
 800d0c4:	4603      	mov	r3, r0
 800d0c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0c8:	7b7b      	ldrb	r3, [r7, #13]
 800d0ca:	2bff      	cmp	r3, #255	@ 0xff
 800d0cc:	d01f      	beq.n	800d10e <USBD_StdEPReq+0x1c6>
 800d0ce:	7b7b      	ldrb	r3, [r7, #13]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d11c      	bne.n	800d10e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d0d4:	7b7a      	ldrb	r2, [r7, #13]
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d0dc:	7b7a      	ldrb	r2, [r7, #13]
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	32ae      	adds	r2, #174	@ 0xae
 800d0e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0e6:	689b      	ldr	r3, [r3, #8]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d010      	beq.n	800d10e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d0ec:	7b7a      	ldrb	r2, [r7, #13]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	32ae      	adds	r2, #174	@ 0xae
 800d0f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0f6:	689b      	ldr	r3, [r3, #8]
 800d0f8:	6839      	ldr	r1, [r7, #0]
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	4798      	blx	r3
 800d0fe:	4603      	mov	r3, r0
 800d100:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d102:	e004      	b.n	800d10e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d104:	6839      	ldr	r1, [r7, #0]
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 fc05 	bl	800d916 <USBD_CtlError>
              break;
 800d10c:	e000      	b.n	800d110 <USBD_StdEPReq+0x1c8>
              break;
 800d10e:	bf00      	nop
          }
          break;
 800d110:	e0ad      	b.n	800d26e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b02      	cmp	r3, #2
 800d11c:	d002      	beq.n	800d124 <USBD_StdEPReq+0x1dc>
 800d11e:	2b03      	cmp	r3, #3
 800d120:	d033      	beq.n	800d18a <USBD_StdEPReq+0x242>
 800d122:	e099      	b.n	800d258 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d124:	7bbb      	ldrb	r3, [r7, #14]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d007      	beq.n	800d13a <USBD_StdEPReq+0x1f2>
 800d12a:	7bbb      	ldrb	r3, [r7, #14]
 800d12c:	2b80      	cmp	r3, #128	@ 0x80
 800d12e:	d004      	beq.n	800d13a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d130:	6839      	ldr	r1, [r7, #0]
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f000 fbef 	bl	800d916 <USBD_CtlError>
                break;
 800d138:	e093      	b.n	800d262 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d13a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	da0b      	bge.n	800d15a <USBD_StdEPReq+0x212>
 800d142:	7bbb      	ldrb	r3, [r7, #14]
 800d144:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d148:	4613      	mov	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	3310      	adds	r3, #16
 800d152:	687a      	ldr	r2, [r7, #4]
 800d154:	4413      	add	r3, r2
 800d156:	3304      	adds	r3, #4
 800d158:	e00b      	b.n	800d172 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d15a:	7bbb      	ldrb	r3, [r7, #14]
 800d15c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d160:	4613      	mov	r3, r2
 800d162:	009b      	lsls	r3, r3, #2
 800d164:	4413      	add	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	4413      	add	r3, r2
 800d170:	3304      	adds	r3, #4
 800d172:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2200      	movs	r2, #0
 800d178:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	330e      	adds	r3, #14
 800d17e:	2202      	movs	r2, #2
 800d180:	4619      	mov	r1, r3
 800d182:	6878      	ldr	r0, [r7, #4]
 800d184:	f000 fc44 	bl	800da10 <USBD_CtlSendData>
              break;
 800d188:	e06b      	b.n	800d262 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d18a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	da11      	bge.n	800d1b6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d192:	7bbb      	ldrb	r3, [r7, #14]
 800d194:	f003 020f 	and.w	r2, r3, #15
 800d198:	6879      	ldr	r1, [r7, #4]
 800d19a:	4613      	mov	r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	4413      	add	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	440b      	add	r3, r1
 800d1a4:	3323      	adds	r3, #35	@ 0x23
 800d1a6:	781b      	ldrb	r3, [r3, #0]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d117      	bne.n	800d1dc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d1ac:	6839      	ldr	r1, [r7, #0]
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fbb1 	bl	800d916 <USBD_CtlError>
                  break;
 800d1b4:	e055      	b.n	800d262 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d1b6:	7bbb      	ldrb	r3, [r7, #14]
 800d1b8:	f003 020f 	and.w	r2, r3, #15
 800d1bc:	6879      	ldr	r1, [r7, #4]
 800d1be:	4613      	mov	r3, r2
 800d1c0:	009b      	lsls	r3, r3, #2
 800d1c2:	4413      	add	r3, r2
 800d1c4:	009b      	lsls	r3, r3, #2
 800d1c6:	440b      	add	r3, r1
 800d1c8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d1cc:	781b      	ldrb	r3, [r3, #0]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d104      	bne.n	800d1dc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d1d2:	6839      	ldr	r1, [r7, #0]
 800d1d4:	6878      	ldr	r0, [r7, #4]
 800d1d6:	f000 fb9e 	bl	800d916 <USBD_CtlError>
                  break;
 800d1da:	e042      	b.n	800d262 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d1dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	da0b      	bge.n	800d1fc <USBD_StdEPReq+0x2b4>
 800d1e4:	7bbb      	ldrb	r3, [r7, #14]
 800d1e6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d1ea:	4613      	mov	r3, r2
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	4413      	add	r3, r2
 800d1f0:	009b      	lsls	r3, r3, #2
 800d1f2:	3310      	adds	r3, #16
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	4413      	add	r3, r2
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	e00b      	b.n	800d214 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d1fc:	7bbb      	ldrb	r3, [r7, #14]
 800d1fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d202:	4613      	mov	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	4413      	add	r3, r2
 800d208:	009b      	lsls	r3, r3, #2
 800d20a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d20e:	687a      	ldr	r2, [r7, #4]
 800d210:	4413      	add	r3, r2
 800d212:	3304      	adds	r3, #4
 800d214:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d216:	7bbb      	ldrb	r3, [r7, #14]
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d002      	beq.n	800d222 <USBD_StdEPReq+0x2da>
 800d21c:	7bbb      	ldrb	r3, [r7, #14]
 800d21e:	2b80      	cmp	r3, #128	@ 0x80
 800d220:	d103      	bne.n	800d22a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800d222:	68bb      	ldr	r3, [r7, #8]
 800d224:	2200      	movs	r2, #0
 800d226:	739a      	strb	r2, [r3, #14]
 800d228:	e00e      	b.n	800d248 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d22a:	7bbb      	ldrb	r3, [r7, #14]
 800d22c:	4619      	mov	r1, r3
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	f001 f90e 	bl	800e450 <USBD_LL_IsStallEP>
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d003      	beq.n	800d242 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800d23a:	68bb      	ldr	r3, [r7, #8]
 800d23c:	2201      	movs	r2, #1
 800d23e:	739a      	strb	r2, [r3, #14]
 800d240:	e002      	b.n	800d248 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800d242:	68bb      	ldr	r3, [r7, #8]
 800d244:	2200      	movs	r2, #0
 800d246:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	330e      	adds	r3, #14
 800d24c:	2202      	movs	r2, #2
 800d24e:	4619      	mov	r1, r3
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fbdd 	bl	800da10 <USBD_CtlSendData>
              break;
 800d256:	e004      	b.n	800d262 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800d258:	6839      	ldr	r1, [r7, #0]
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 fb5b 	bl	800d916 <USBD_CtlError>
              break;
 800d260:	bf00      	nop
          }
          break;
 800d262:	e004      	b.n	800d26e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800d264:	6839      	ldr	r1, [r7, #0]
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 fb55 	bl	800d916 <USBD_CtlError>
          break;
 800d26c:	bf00      	nop
      }
      break;
 800d26e:	e005      	b.n	800d27c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800d270:	6839      	ldr	r1, [r7, #0]
 800d272:	6878      	ldr	r0, [r7, #4]
 800d274:	f000 fb4f 	bl	800d916 <USBD_CtlError>
      break;
 800d278:	e000      	b.n	800d27c <USBD_StdEPReq+0x334>
      break;
 800d27a:	bf00      	nop
  }

  return ret;
 800d27c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d27e:	4618      	mov	r0, r3
 800d280:	3710      	adds	r7, #16
 800d282:	46bd      	mov	sp, r7
 800d284:	bd80      	pop	{r7, pc}
	...

0800d288 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b084      	sub	sp, #16
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d292:	2300      	movs	r3, #0
 800d294:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d296:	2300      	movs	r3, #0
 800d298:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d29a:	2300      	movs	r3, #0
 800d29c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d29e:	683b      	ldr	r3, [r7, #0]
 800d2a0:	885b      	ldrh	r3, [r3, #2]
 800d2a2:	0a1b      	lsrs	r3, r3, #8
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	3b01      	subs	r3, #1
 800d2a8:	2b06      	cmp	r3, #6
 800d2aa:	f200 8128 	bhi.w	800d4fe <USBD_GetDescriptor+0x276>
 800d2ae:	a201      	add	r2, pc, #4	@ (adr r2, 800d2b4 <USBD_GetDescriptor+0x2c>)
 800d2b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b4:	0800d2d1 	.word	0x0800d2d1
 800d2b8:	0800d2e9 	.word	0x0800d2e9
 800d2bc:	0800d329 	.word	0x0800d329
 800d2c0:	0800d4ff 	.word	0x0800d4ff
 800d2c4:	0800d4ff 	.word	0x0800d4ff
 800d2c8:	0800d49f 	.word	0x0800d49f
 800d2cc:	0800d4cb 	.word	0x0800d4cb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	687a      	ldr	r2, [r7, #4]
 800d2da:	7c12      	ldrb	r2, [r2, #16]
 800d2dc:	f107 0108 	add.w	r1, r7, #8
 800d2e0:	4610      	mov	r0, r2
 800d2e2:	4798      	blx	r3
 800d2e4:	60f8      	str	r0, [r7, #12]
      break;
 800d2e6:	e112      	b.n	800d50e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	7c1b      	ldrb	r3, [r3, #16]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d10d      	bne.n	800d30c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d2f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d2f8:	f107 0208 	add.w	r2, r7, #8
 800d2fc:	4610      	mov	r0, r2
 800d2fe:	4798      	blx	r3
 800d300:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	3301      	adds	r3, #1
 800d306:	2202      	movs	r2, #2
 800d308:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d30a:	e100      	b.n	800d50e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d312:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d314:	f107 0208 	add.w	r2, r7, #8
 800d318:	4610      	mov	r0, r2
 800d31a:	4798      	blx	r3
 800d31c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d31e:	68fb      	ldr	r3, [r7, #12]
 800d320:	3301      	adds	r3, #1
 800d322:	2202      	movs	r2, #2
 800d324:	701a      	strb	r2, [r3, #0]
      break;
 800d326:	e0f2      	b.n	800d50e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d328:	683b      	ldr	r3, [r7, #0]
 800d32a:	885b      	ldrh	r3, [r3, #2]
 800d32c:	b2db      	uxtb	r3, r3
 800d32e:	2b05      	cmp	r3, #5
 800d330:	f200 80ac 	bhi.w	800d48c <USBD_GetDescriptor+0x204>
 800d334:	a201      	add	r2, pc, #4	@ (adr r2, 800d33c <USBD_GetDescriptor+0xb4>)
 800d336:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d33a:	bf00      	nop
 800d33c:	0800d355 	.word	0x0800d355
 800d340:	0800d389 	.word	0x0800d389
 800d344:	0800d3bd 	.word	0x0800d3bd
 800d348:	0800d3f1 	.word	0x0800d3f1
 800d34c:	0800d425 	.word	0x0800d425
 800d350:	0800d459 	.word	0x0800d459
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d35a:	685b      	ldr	r3, [r3, #4]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d00b      	beq.n	800d378 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	687a      	ldr	r2, [r7, #4]
 800d36a:	7c12      	ldrb	r2, [r2, #16]
 800d36c:	f107 0108 	add.w	r1, r7, #8
 800d370:	4610      	mov	r0, r2
 800d372:	4798      	blx	r3
 800d374:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d376:	e091      	b.n	800d49c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 facb 	bl	800d916 <USBD_CtlError>
            err++;
 800d380:	7afb      	ldrb	r3, [r7, #11]
 800d382:	3301      	adds	r3, #1
 800d384:	72fb      	strb	r3, [r7, #11]
          break;
 800d386:	e089      	b.n	800d49c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d38e:	689b      	ldr	r3, [r3, #8]
 800d390:	2b00      	cmp	r3, #0
 800d392:	d00b      	beq.n	800d3ac <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d39a:	689b      	ldr	r3, [r3, #8]
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	7c12      	ldrb	r2, [r2, #16]
 800d3a0:	f107 0108 	add.w	r1, r7, #8
 800d3a4:	4610      	mov	r0, r2
 800d3a6:	4798      	blx	r3
 800d3a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3aa:	e077      	b.n	800d49c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3ac:	6839      	ldr	r1, [r7, #0]
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 fab1 	bl	800d916 <USBD_CtlError>
            err++;
 800d3b4:	7afb      	ldrb	r3, [r7, #11]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d3ba:	e06f      	b.n	800d49c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3c2:	68db      	ldr	r3, [r3, #12]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d00b      	beq.n	800d3e0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3ce:	68db      	ldr	r3, [r3, #12]
 800d3d0:	687a      	ldr	r2, [r7, #4]
 800d3d2:	7c12      	ldrb	r2, [r2, #16]
 800d3d4:	f107 0108 	add.w	r1, r7, #8
 800d3d8:	4610      	mov	r0, r2
 800d3da:	4798      	blx	r3
 800d3dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d3de:	e05d      	b.n	800d49c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d3e0:	6839      	ldr	r1, [r7, #0]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fa97 	bl	800d916 <USBD_CtlError>
            err++;
 800d3e8:	7afb      	ldrb	r3, [r7, #11]
 800d3ea:	3301      	adds	r3, #1
 800d3ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d3ee:	e055      	b.n	800d49c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d00b      	beq.n	800d414 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d402:	691b      	ldr	r3, [r3, #16]
 800d404:	687a      	ldr	r2, [r7, #4]
 800d406:	7c12      	ldrb	r2, [r2, #16]
 800d408:	f107 0108 	add.w	r1, r7, #8
 800d40c:	4610      	mov	r0, r2
 800d40e:	4798      	blx	r3
 800d410:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d412:	e043      	b.n	800d49c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d414:	6839      	ldr	r1, [r7, #0]
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 fa7d 	bl	800d916 <USBD_CtlError>
            err++;
 800d41c:	7afb      	ldrb	r3, [r7, #11]
 800d41e:	3301      	adds	r3, #1
 800d420:	72fb      	strb	r3, [r7, #11]
          break;
 800d422:	e03b      	b.n	800d49c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d42a:	695b      	ldr	r3, [r3, #20]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d00b      	beq.n	800d448 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d436:	695b      	ldr	r3, [r3, #20]
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	7c12      	ldrb	r2, [r2, #16]
 800d43c:	f107 0108 	add.w	r1, r7, #8
 800d440:	4610      	mov	r0, r2
 800d442:	4798      	blx	r3
 800d444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d446:	e029      	b.n	800d49c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d448:	6839      	ldr	r1, [r7, #0]
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 fa63 	bl	800d916 <USBD_CtlError>
            err++;
 800d450:	7afb      	ldrb	r3, [r7, #11]
 800d452:	3301      	adds	r3, #1
 800d454:	72fb      	strb	r3, [r7, #11]
          break;
 800d456:	e021      	b.n	800d49c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d45e:	699b      	ldr	r3, [r3, #24]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d00b      	beq.n	800d47c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d46a:	699b      	ldr	r3, [r3, #24]
 800d46c:	687a      	ldr	r2, [r7, #4]
 800d46e:	7c12      	ldrb	r2, [r2, #16]
 800d470:	f107 0108 	add.w	r1, r7, #8
 800d474:	4610      	mov	r0, r2
 800d476:	4798      	blx	r3
 800d478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d47a:	e00f      	b.n	800d49c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d47c:	6839      	ldr	r1, [r7, #0]
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f000 fa49 	bl	800d916 <USBD_CtlError>
            err++;
 800d484:	7afb      	ldrb	r3, [r7, #11]
 800d486:	3301      	adds	r3, #1
 800d488:	72fb      	strb	r3, [r7, #11]
          break;
 800d48a:	e007      	b.n	800d49c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d48c:	6839      	ldr	r1, [r7, #0]
 800d48e:	6878      	ldr	r0, [r7, #4]
 800d490:	f000 fa41 	bl	800d916 <USBD_CtlError>
          err++;
 800d494:	7afb      	ldrb	r3, [r7, #11]
 800d496:	3301      	adds	r3, #1
 800d498:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d49a:	bf00      	nop
      }
      break;
 800d49c:	e037      	b.n	800d50e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	7c1b      	ldrb	r3, [r3, #16]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d109      	bne.n	800d4ba <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d4ae:	f107 0208 	add.w	r2, r7, #8
 800d4b2:	4610      	mov	r0, r2
 800d4b4:	4798      	blx	r3
 800d4b6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4b8:	e029      	b.n	800d50e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d4ba:	6839      	ldr	r1, [r7, #0]
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f000 fa2a 	bl	800d916 <USBD_CtlError>
        err++;
 800d4c2:	7afb      	ldrb	r3, [r7, #11]
 800d4c4:	3301      	adds	r3, #1
 800d4c6:	72fb      	strb	r3, [r7, #11]
      break;
 800d4c8:	e021      	b.n	800d50e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	7c1b      	ldrb	r3, [r3, #16]
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	d10d      	bne.n	800d4ee <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d4da:	f107 0208 	add.w	r2, r7, #8
 800d4de:	4610      	mov	r0, r2
 800d4e0:	4798      	blx	r3
 800d4e2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	2207      	movs	r2, #7
 800d4ea:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d4ec:	e00f      	b.n	800d50e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d4ee:	6839      	ldr	r1, [r7, #0]
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 fa10 	bl	800d916 <USBD_CtlError>
        err++;
 800d4f6:	7afb      	ldrb	r3, [r7, #11]
 800d4f8:	3301      	adds	r3, #1
 800d4fa:	72fb      	strb	r3, [r7, #11]
      break;
 800d4fc:	e007      	b.n	800d50e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d4fe:	6839      	ldr	r1, [r7, #0]
 800d500:	6878      	ldr	r0, [r7, #4]
 800d502:	f000 fa08 	bl	800d916 <USBD_CtlError>
      err++;
 800d506:	7afb      	ldrb	r3, [r7, #11]
 800d508:	3301      	adds	r3, #1
 800d50a:	72fb      	strb	r3, [r7, #11]
      break;
 800d50c:	bf00      	nop
  }

  if (err != 0U)
 800d50e:	7afb      	ldrb	r3, [r7, #11]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d11e      	bne.n	800d552 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	88db      	ldrh	r3, [r3, #6]
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d016      	beq.n	800d54a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d51c:	893b      	ldrh	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d00e      	beq.n	800d540 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d522:	683b      	ldr	r3, [r7, #0]
 800d524:	88da      	ldrh	r2, [r3, #6]
 800d526:	893b      	ldrh	r3, [r7, #8]
 800d528:	4293      	cmp	r3, r2
 800d52a:	bf28      	it	cs
 800d52c:	4613      	movcs	r3, r2
 800d52e:	b29b      	uxth	r3, r3
 800d530:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d532:	893b      	ldrh	r3, [r7, #8]
 800d534:	461a      	mov	r2, r3
 800d536:	68f9      	ldr	r1, [r7, #12]
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 fa69 	bl	800da10 <USBD_CtlSendData>
 800d53e:	e009      	b.n	800d554 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d540:	6839      	ldr	r1, [r7, #0]
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 f9e7 	bl	800d916 <USBD_CtlError>
 800d548:	e004      	b.n	800d554 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fac1 	bl	800dad2 <USBD_CtlSendStatus>
 800d550:	e000      	b.n	800d554 <USBD_GetDescriptor+0x2cc>
    return;
 800d552:	bf00      	nop
  }
}
 800d554:	3710      	adds	r7, #16
 800d556:	46bd      	mov	sp, r7
 800d558:	bd80      	pop	{r7, pc}
 800d55a:	bf00      	nop

0800d55c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d55c:	b580      	push	{r7, lr}
 800d55e:	b084      	sub	sp, #16
 800d560:	af00      	add	r7, sp, #0
 800d562:	6078      	str	r0, [r7, #4]
 800d564:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d566:	683b      	ldr	r3, [r7, #0]
 800d568:	889b      	ldrh	r3, [r3, #4]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d131      	bne.n	800d5d2 <USBD_SetAddress+0x76>
 800d56e:	683b      	ldr	r3, [r7, #0]
 800d570:	88db      	ldrh	r3, [r3, #6]
 800d572:	2b00      	cmp	r3, #0
 800d574:	d12d      	bne.n	800d5d2 <USBD_SetAddress+0x76>
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	885b      	ldrh	r3, [r3, #2]
 800d57a:	2b7f      	cmp	r3, #127	@ 0x7f
 800d57c:	d829      	bhi.n	800d5d2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	885b      	ldrh	r3, [r3, #2]
 800d582:	b2db      	uxtb	r3, r3
 800d584:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d588:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d590:	b2db      	uxtb	r3, r3
 800d592:	2b03      	cmp	r3, #3
 800d594:	d104      	bne.n	800d5a0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f9bc 	bl	800d916 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d59e:	e01d      	b.n	800d5dc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	7bfa      	ldrb	r2, [r7, #15]
 800d5a4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d5a8:	7bfb      	ldrb	r3, [r7, #15]
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	6878      	ldr	r0, [r7, #4]
 800d5ae:	f000 ff7b 	bl	800e4a8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 fa8d 	bl	800dad2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d5b8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d004      	beq.n	800d5c8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2202      	movs	r2, #2
 800d5c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5c6:	e009      	b.n	800d5dc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2201      	movs	r2, #1
 800d5cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d5d0:	e004      	b.n	800d5dc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d5d2:	6839      	ldr	r1, [r7, #0]
 800d5d4:	6878      	ldr	r0, [r7, #4]
 800d5d6:	f000 f99e 	bl	800d916 <USBD_CtlError>
  }
}
 800d5da:	bf00      	nop
 800d5dc:	bf00      	nop
 800d5de:	3710      	adds	r7, #16
 800d5e0:	46bd      	mov	sp, r7
 800d5e2:	bd80      	pop	{r7, pc}

0800d5e4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	885b      	ldrh	r3, [r3, #2]
 800d5f6:	b2da      	uxtb	r2, r3
 800d5f8:	4b4e      	ldr	r3, [pc, #312]	@ (800d734 <USBD_SetConfig+0x150>)
 800d5fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d5fc:	4b4d      	ldr	r3, [pc, #308]	@ (800d734 <USBD_SetConfig+0x150>)
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	2b01      	cmp	r3, #1
 800d602:	d905      	bls.n	800d610 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d604:	6839      	ldr	r1, [r7, #0]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f000 f985 	bl	800d916 <USBD_CtlError>
    return USBD_FAIL;
 800d60c:	2303      	movs	r3, #3
 800d60e:	e08c      	b.n	800d72a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d616:	b2db      	uxtb	r3, r3
 800d618:	2b02      	cmp	r3, #2
 800d61a:	d002      	beq.n	800d622 <USBD_SetConfig+0x3e>
 800d61c:	2b03      	cmp	r3, #3
 800d61e:	d029      	beq.n	800d674 <USBD_SetConfig+0x90>
 800d620:	e075      	b.n	800d70e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d622:	4b44      	ldr	r3, [pc, #272]	@ (800d734 <USBD_SetConfig+0x150>)
 800d624:	781b      	ldrb	r3, [r3, #0]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d020      	beq.n	800d66c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d62a:	4b42      	ldr	r3, [pc, #264]	@ (800d734 <USBD_SetConfig+0x150>)
 800d62c:	781b      	ldrb	r3, [r3, #0]
 800d62e:	461a      	mov	r2, r3
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d634:	4b3f      	ldr	r3, [pc, #252]	@ (800d734 <USBD_SetConfig+0x150>)
 800d636:	781b      	ldrb	r3, [r3, #0]
 800d638:	4619      	mov	r1, r3
 800d63a:	6878      	ldr	r0, [r7, #4]
 800d63c:	f7fe ffcd 	bl	800c5da <USBD_SetClassConfig>
 800d640:	4603      	mov	r3, r0
 800d642:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d644:	7bfb      	ldrb	r3, [r7, #15]
 800d646:	2b00      	cmp	r3, #0
 800d648:	d008      	beq.n	800d65c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d64a:	6839      	ldr	r1, [r7, #0]
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	f000 f962 	bl	800d916 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	2202      	movs	r2, #2
 800d656:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d65a:	e065      	b.n	800d728 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f000 fa38 	bl	800dad2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2203      	movs	r2, #3
 800d666:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d66a:	e05d      	b.n	800d728 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d66c:	6878      	ldr	r0, [r7, #4]
 800d66e:	f000 fa30 	bl	800dad2 <USBD_CtlSendStatus>
      break;
 800d672:	e059      	b.n	800d728 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d674:	4b2f      	ldr	r3, [pc, #188]	@ (800d734 <USBD_SetConfig+0x150>)
 800d676:	781b      	ldrb	r3, [r3, #0]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d112      	bne.n	800d6a2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2202      	movs	r2, #2
 800d680:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d684:	4b2b      	ldr	r3, [pc, #172]	@ (800d734 <USBD_SetConfig+0x150>)
 800d686:	781b      	ldrb	r3, [r3, #0]
 800d688:	461a      	mov	r2, r3
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d68e:	4b29      	ldr	r3, [pc, #164]	@ (800d734 <USBD_SetConfig+0x150>)
 800d690:	781b      	ldrb	r3, [r3, #0]
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f7fe ffbc 	bl	800c612 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d69a:	6878      	ldr	r0, [r7, #4]
 800d69c:	f000 fa19 	bl	800dad2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d6a0:	e042      	b.n	800d728 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d6a2:	4b24      	ldr	r3, [pc, #144]	@ (800d734 <USBD_SetConfig+0x150>)
 800d6a4:	781b      	ldrb	r3, [r3, #0]
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	429a      	cmp	r2, r3
 800d6ae:	d02a      	beq.n	800d706 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	b2db      	uxtb	r3, r3
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	6878      	ldr	r0, [r7, #4]
 800d6ba:	f7fe ffaa 	bl	800c612 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d6be:	4b1d      	ldr	r3, [pc, #116]	@ (800d734 <USBD_SetConfig+0x150>)
 800d6c0:	781b      	ldrb	r3, [r3, #0]
 800d6c2:	461a      	mov	r2, r3
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d6c8:	4b1a      	ldr	r3, [pc, #104]	@ (800d734 <USBD_SetConfig+0x150>)
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	4619      	mov	r1, r3
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f7fe ff83 	bl	800c5da <USBD_SetClassConfig>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d6d8:	7bfb      	ldrb	r3, [r7, #15]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00f      	beq.n	800d6fe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d6de:	6839      	ldr	r1, [r7, #0]
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f000 f918 	bl	800d916 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	685b      	ldr	r3, [r3, #4]
 800d6ea:	b2db      	uxtb	r3, r3
 800d6ec:	4619      	mov	r1, r3
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7fe ff8f 	bl	800c612 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	2202      	movs	r2, #2
 800d6f8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d6fc:	e014      	b.n	800d728 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d6fe:	6878      	ldr	r0, [r7, #4]
 800d700:	f000 f9e7 	bl	800dad2 <USBD_CtlSendStatus>
      break;
 800d704:	e010      	b.n	800d728 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d706:	6878      	ldr	r0, [r7, #4]
 800d708:	f000 f9e3 	bl	800dad2 <USBD_CtlSendStatus>
      break;
 800d70c:	e00c      	b.n	800d728 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 f900 	bl	800d916 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d716:	4b07      	ldr	r3, [pc, #28]	@ (800d734 <USBD_SetConfig+0x150>)
 800d718:	781b      	ldrb	r3, [r3, #0]
 800d71a:	4619      	mov	r1, r3
 800d71c:	6878      	ldr	r0, [r7, #4]
 800d71e:	f7fe ff78 	bl	800c612 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d722:	2303      	movs	r3, #3
 800d724:	73fb      	strb	r3, [r7, #15]
      break;
 800d726:	bf00      	nop
  }

  return ret;
 800d728:	7bfb      	ldrb	r3, [r7, #15]
}
 800d72a:	4618      	mov	r0, r3
 800d72c:	3710      	adds	r7, #16
 800d72e:	46bd      	mov	sp, r7
 800d730:	bd80      	pop	{r7, pc}
 800d732:	bf00      	nop
 800d734:	20000b38 	.word	0x20000b38

0800d738 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d738:	b580      	push	{r7, lr}
 800d73a:	b082      	sub	sp, #8
 800d73c:	af00      	add	r7, sp, #0
 800d73e:	6078      	str	r0, [r7, #4]
 800d740:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	88db      	ldrh	r3, [r3, #6]
 800d746:	2b01      	cmp	r3, #1
 800d748:	d004      	beq.n	800d754 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d74a:	6839      	ldr	r1, [r7, #0]
 800d74c:	6878      	ldr	r0, [r7, #4]
 800d74e:	f000 f8e2 	bl	800d916 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d752:	e023      	b.n	800d79c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	2b02      	cmp	r3, #2
 800d75e:	dc02      	bgt.n	800d766 <USBD_GetConfig+0x2e>
 800d760:	2b00      	cmp	r3, #0
 800d762:	dc03      	bgt.n	800d76c <USBD_GetConfig+0x34>
 800d764:	e015      	b.n	800d792 <USBD_GetConfig+0x5a>
 800d766:	2b03      	cmp	r3, #3
 800d768:	d00b      	beq.n	800d782 <USBD_GetConfig+0x4a>
 800d76a:	e012      	b.n	800d792 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2200      	movs	r2, #0
 800d770:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	3308      	adds	r3, #8
 800d776:	2201      	movs	r2, #1
 800d778:	4619      	mov	r1, r3
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f948 	bl	800da10 <USBD_CtlSendData>
        break;
 800d780:	e00c      	b.n	800d79c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	3304      	adds	r3, #4
 800d786:	2201      	movs	r2, #1
 800d788:	4619      	mov	r1, r3
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 f940 	bl	800da10 <USBD_CtlSendData>
        break;
 800d790:	e004      	b.n	800d79c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d792:	6839      	ldr	r1, [r7, #0]
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 f8be 	bl	800d916 <USBD_CtlError>
        break;
 800d79a:	bf00      	nop
}
 800d79c:	bf00      	nop
 800d79e:	3708      	adds	r7, #8
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d7b4:	b2db      	uxtb	r3, r3
 800d7b6:	3b01      	subs	r3, #1
 800d7b8:	2b02      	cmp	r3, #2
 800d7ba:	d81e      	bhi.n	800d7fa <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	88db      	ldrh	r3, [r3, #6]
 800d7c0:	2b02      	cmp	r3, #2
 800d7c2:	d004      	beq.n	800d7ce <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d7c4:	6839      	ldr	r1, [r7, #0]
 800d7c6:	6878      	ldr	r0, [r7, #4]
 800d7c8:	f000 f8a5 	bl	800d916 <USBD_CtlError>
        break;
 800d7cc:	e01a      	b.n	800d804 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d005      	beq.n	800d7ea <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	68db      	ldr	r3, [r3, #12]
 800d7e2:	f043 0202 	orr.w	r2, r3, #2
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	330c      	adds	r3, #12
 800d7ee:	2202      	movs	r2, #2
 800d7f0:	4619      	mov	r1, r3
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 f90c 	bl	800da10 <USBD_CtlSendData>
      break;
 800d7f8:	e004      	b.n	800d804 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d7fa:	6839      	ldr	r1, [r7, #0]
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f000 f88a 	bl	800d916 <USBD_CtlError>
      break;
 800d802:	bf00      	nop
  }
}
 800d804:	bf00      	nop
 800d806:	3708      	adds	r7, #8
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b082      	sub	sp, #8
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	885b      	ldrh	r3, [r3, #2]
 800d81a:	2b01      	cmp	r3, #1
 800d81c:	d107      	bne.n	800d82e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f953 	bl	800dad2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d82c:	e013      	b.n	800d856 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d82e:	683b      	ldr	r3, [r7, #0]
 800d830:	885b      	ldrh	r3, [r3, #2]
 800d832:	2b02      	cmp	r3, #2
 800d834:	d10b      	bne.n	800d84e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	889b      	ldrh	r3, [r3, #4]
 800d83a:	0a1b      	lsrs	r3, r3, #8
 800d83c:	b29b      	uxth	r3, r3
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d846:	6878      	ldr	r0, [r7, #4]
 800d848:	f000 f943 	bl	800dad2 <USBD_CtlSendStatus>
}
 800d84c:	e003      	b.n	800d856 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d84e:	6839      	ldr	r1, [r7, #0]
 800d850:	6878      	ldr	r0, [r7, #4]
 800d852:	f000 f860 	bl	800d916 <USBD_CtlError>
}
 800d856:	bf00      	nop
 800d858:	3708      	adds	r7, #8
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}

0800d85e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d85e:	b580      	push	{r7, lr}
 800d860:	b082      	sub	sp, #8
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d86e:	b2db      	uxtb	r3, r3
 800d870:	3b01      	subs	r3, #1
 800d872:	2b02      	cmp	r3, #2
 800d874:	d80b      	bhi.n	800d88e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	885b      	ldrh	r3, [r3, #2]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d10c      	bne.n	800d898 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	2200      	movs	r2, #0
 800d882:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d886:	6878      	ldr	r0, [r7, #4]
 800d888:	f000 f923 	bl	800dad2 <USBD_CtlSendStatus>
      }
      break;
 800d88c:	e004      	b.n	800d898 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d88e:	6839      	ldr	r1, [r7, #0]
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f000 f840 	bl	800d916 <USBD_CtlError>
      break;
 800d896:	e000      	b.n	800d89a <USBD_ClrFeature+0x3c>
      break;
 800d898:	bf00      	nop
  }
}
 800d89a:	bf00      	nop
 800d89c:	3708      	adds	r7, #8
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d8a2:	b580      	push	{r7, lr}
 800d8a4:	b084      	sub	sp, #16
 800d8a6:	af00      	add	r7, sp, #0
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	781a      	ldrb	r2, [r3, #0]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	781a      	ldrb	r2, [r3, #0]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d8cc:	68f8      	ldr	r0, [r7, #12]
 800d8ce:	f7ff fa3d 	bl	800cd4c <SWAPBYTE>
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	461a      	mov	r2, r3
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	3301      	adds	r3, #1
 800d8de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	3301      	adds	r3, #1
 800d8e4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d8e6:	68f8      	ldr	r0, [r7, #12]
 800d8e8:	f7ff fa30 	bl	800cd4c <SWAPBYTE>
 800d8ec:	4603      	mov	r3, r0
 800d8ee:	461a      	mov	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	3301      	adds	r3, #1
 800d8fe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f7ff fa23 	bl	800cd4c <SWAPBYTE>
 800d906:	4603      	mov	r3, r0
 800d908:	461a      	mov	r2, r3
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	80da      	strh	r2, [r3, #6]
}
 800d90e:	bf00      	nop
 800d910:	3710      	adds	r7, #16
 800d912:	46bd      	mov	sp, r7
 800d914:	bd80      	pop	{r7, pc}

0800d916 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d916:	b580      	push	{r7, lr}
 800d918:	b082      	sub	sp, #8
 800d91a:	af00      	add	r7, sp, #0
 800d91c:	6078      	str	r0, [r7, #4]
 800d91e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d920:	2180      	movs	r1, #128	@ 0x80
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f000 fd56 	bl	800e3d4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d928:	2100      	movs	r1, #0
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 fd52 	bl	800e3d4 <USBD_LL_StallEP>
}
 800d930:	bf00      	nop
 800d932:	3708      	adds	r7, #8
 800d934:	46bd      	mov	sp, r7
 800d936:	bd80      	pop	{r7, pc}

0800d938 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d938:	b580      	push	{r7, lr}
 800d93a:	b086      	sub	sp, #24
 800d93c:	af00      	add	r7, sp, #0
 800d93e:	60f8      	str	r0, [r7, #12]
 800d940:	60b9      	str	r1, [r7, #8]
 800d942:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d944:	2300      	movs	r3, #0
 800d946:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d042      	beq.n	800d9d4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800d952:	6938      	ldr	r0, [r7, #16]
 800d954:	f000 f842 	bl	800d9dc <USBD_GetLen>
 800d958:	4603      	mov	r3, r0
 800d95a:	3301      	adds	r3, #1
 800d95c:	005b      	lsls	r3, r3, #1
 800d95e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d962:	d808      	bhi.n	800d976 <USBD_GetString+0x3e>
 800d964:	6938      	ldr	r0, [r7, #16]
 800d966:	f000 f839 	bl	800d9dc <USBD_GetLen>
 800d96a:	4603      	mov	r3, r0
 800d96c:	3301      	adds	r3, #1
 800d96e:	b29b      	uxth	r3, r3
 800d970:	005b      	lsls	r3, r3, #1
 800d972:	b29a      	uxth	r2, r3
 800d974:	e001      	b.n	800d97a <USBD_GetString+0x42>
 800d976:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d97e:	7dfb      	ldrb	r3, [r7, #23]
 800d980:	68ba      	ldr	r2, [r7, #8]
 800d982:	4413      	add	r3, r2
 800d984:	687a      	ldr	r2, [r7, #4]
 800d986:	7812      	ldrb	r2, [r2, #0]
 800d988:	701a      	strb	r2, [r3, #0]
  idx++;
 800d98a:	7dfb      	ldrb	r3, [r7, #23]
 800d98c:	3301      	adds	r3, #1
 800d98e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d990:	7dfb      	ldrb	r3, [r7, #23]
 800d992:	68ba      	ldr	r2, [r7, #8]
 800d994:	4413      	add	r3, r2
 800d996:	2203      	movs	r2, #3
 800d998:	701a      	strb	r2, [r3, #0]
  idx++;
 800d99a:	7dfb      	ldrb	r3, [r7, #23]
 800d99c:	3301      	adds	r3, #1
 800d99e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d9a0:	e013      	b.n	800d9ca <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800d9a2:	7dfb      	ldrb	r3, [r7, #23]
 800d9a4:	68ba      	ldr	r2, [r7, #8]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	693a      	ldr	r2, [r7, #16]
 800d9aa:	7812      	ldrb	r2, [r2, #0]
 800d9ac:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d9ae:	693b      	ldr	r3, [r7, #16]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	613b      	str	r3, [r7, #16]
    idx++;
 800d9b4:	7dfb      	ldrb	r3, [r7, #23]
 800d9b6:	3301      	adds	r3, #1
 800d9b8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d9ba:	7dfb      	ldrb	r3, [r7, #23]
 800d9bc:	68ba      	ldr	r2, [r7, #8]
 800d9be:	4413      	add	r3, r2
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	701a      	strb	r2, [r3, #0]
    idx++;
 800d9c4:	7dfb      	ldrb	r3, [r7, #23]
 800d9c6:	3301      	adds	r3, #1
 800d9c8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	781b      	ldrb	r3, [r3, #0]
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	d1e7      	bne.n	800d9a2 <USBD_GetString+0x6a>
 800d9d2:	e000      	b.n	800d9d6 <USBD_GetString+0x9e>
    return;
 800d9d4:	bf00      	nop
  }
}
 800d9d6:	3718      	adds	r7, #24
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d9dc:	b480      	push	{r7}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d9ec:	e005      	b.n	800d9fa <USBD_GetLen+0x1e>
  {
    len++;
 800d9ee:	7bfb      	ldrb	r3, [r7, #15]
 800d9f0:	3301      	adds	r3, #1
 800d9f2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d9f4:	68bb      	ldr	r3, [r7, #8]
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d1f5      	bne.n	800d9ee <USBD_GetLen+0x12>
  }

  return len;
 800da02:	7bfb      	ldrb	r3, [r7, #15]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3714      	adds	r7, #20
 800da08:	46bd      	mov	sp, r7
 800da0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da0e:	4770      	bx	lr

0800da10 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b084      	sub	sp, #16
 800da14:	af00      	add	r7, sp, #0
 800da16:	60f8      	str	r0, [r7, #12]
 800da18:	60b9      	str	r1, [r7, #8]
 800da1a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2202      	movs	r2, #2
 800da20:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	68ba      	ldr	r2, [r7, #8]
 800da2e:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	687a      	ldr	r2, [r7, #4]
 800da34:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	68ba      	ldr	r2, [r7, #8]
 800da3a:	2100      	movs	r1, #0
 800da3c:	68f8      	ldr	r0, [r7, #12]
 800da3e:	f000 fd52 	bl	800e4e6 <USBD_LL_Transmit>

  return USBD_OK;
 800da42:	2300      	movs	r3, #0
}
 800da44:	4618      	mov	r0, r3
 800da46:	3710      	adds	r7, #16
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b084      	sub	sp, #16
 800da50:	af00      	add	r7, sp, #0
 800da52:	60f8      	str	r0, [r7, #12]
 800da54:	60b9      	str	r1, [r7, #8]
 800da56:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800da58:	687b      	ldr	r3, [r7, #4]
 800da5a:	68ba      	ldr	r2, [r7, #8]
 800da5c:	2100      	movs	r1, #0
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f000 fd41 	bl	800e4e6 <USBD_LL_Transmit>

  return USBD_OK;
 800da64:	2300      	movs	r3, #0
}
 800da66:	4618      	mov	r0, r3
 800da68:	3710      	adds	r7, #16
 800da6a:	46bd      	mov	sp, r7
 800da6c:	bd80      	pop	{r7, pc}

0800da6e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800da6e:	b580      	push	{r7, lr}
 800da70:	b084      	sub	sp, #16
 800da72:	af00      	add	r7, sp, #0
 800da74:	60f8      	str	r0, [r7, #12]
 800da76:	60b9      	str	r1, [r7, #8]
 800da78:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	2203      	movs	r2, #3
 800da7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	687a      	ldr	r2, [r7, #4]
 800da86:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	68ba      	ldr	r2, [r7, #8]
 800da8e:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	687a      	ldr	r2, [r7, #4]
 800da96:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	68ba      	ldr	r2, [r7, #8]
 800da9e:	2100      	movs	r1, #0
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f000 fd41 	bl	800e528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800daa6:	2300      	movs	r3, #0
}
 800daa8:	4618      	mov	r0, r3
 800daaa:	3710      	adds	r7, #16
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dab0:	b580      	push	{r7, lr}
 800dab2:	b084      	sub	sp, #16
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	60f8      	str	r0, [r7, #12]
 800dab8:	60b9      	str	r1, [r7, #8]
 800daba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	68ba      	ldr	r2, [r7, #8]
 800dac0:	2100      	movs	r1, #0
 800dac2:	68f8      	ldr	r0, [r7, #12]
 800dac4:	f000 fd30 	bl	800e528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dac8:	2300      	movs	r3, #0
}
 800daca:	4618      	mov	r0, r3
 800dacc:	3710      	adds	r7, #16
 800dace:	46bd      	mov	sp, r7
 800dad0:	bd80      	pop	{r7, pc}

0800dad2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dad2:	b580      	push	{r7, lr}
 800dad4:	b082      	sub	sp, #8
 800dad6:	af00      	add	r7, sp, #0
 800dad8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	2204      	movs	r2, #4
 800dade:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dae2:	2300      	movs	r3, #0
 800dae4:	2200      	movs	r2, #0
 800dae6:	2100      	movs	r1, #0
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f000 fcfc 	bl	800e4e6 <USBD_LL_Transmit>

  return USBD_OK;
 800daee:	2300      	movs	r3, #0
}
 800daf0:	4618      	mov	r0, r3
 800daf2:	3708      	adds	r7, #8
 800daf4:	46bd      	mov	sp, r7
 800daf6:	bd80      	pop	{r7, pc}

0800daf8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800daf8:	b580      	push	{r7, lr}
 800dafa:	b082      	sub	sp, #8
 800dafc:	af00      	add	r7, sp, #0
 800dafe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2205      	movs	r2, #5
 800db04:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800db08:	2300      	movs	r3, #0
 800db0a:	2200      	movs	r2, #0
 800db0c:	2100      	movs	r1, #0
 800db0e:	6878      	ldr	r0, [r7, #4]
 800db10:	f000 fd0a 	bl	800e528 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800db14:	2300      	movs	r3, #0
}
 800db16:	4618      	mov	r0, r3
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
	...

0800db20 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800db24:	2200      	movs	r2, #0
 800db26:	4912      	ldr	r1, [pc, #72]	@ (800db70 <MX_USB_DEVICE_Init+0x50>)
 800db28:	4812      	ldr	r0, [pc, #72]	@ (800db74 <MX_USB_DEVICE_Init+0x54>)
 800db2a:	f7fe fcd9 	bl	800c4e0 <USBD_Init>
 800db2e:	4603      	mov	r3, r0
 800db30:	2b00      	cmp	r3, #0
 800db32:	d001      	beq.n	800db38 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800db34:	f7f3 fdd4 	bl	80016e0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800db38:	490f      	ldr	r1, [pc, #60]	@ (800db78 <MX_USB_DEVICE_Init+0x58>)
 800db3a:	480e      	ldr	r0, [pc, #56]	@ (800db74 <MX_USB_DEVICE_Init+0x54>)
 800db3c:	f7fe fd00 	bl	800c540 <USBD_RegisterClass>
 800db40:	4603      	mov	r3, r0
 800db42:	2b00      	cmp	r3, #0
 800db44:	d001      	beq.n	800db4a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800db46:	f7f3 fdcb 	bl	80016e0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800db4a:	490c      	ldr	r1, [pc, #48]	@ (800db7c <MX_USB_DEVICE_Init+0x5c>)
 800db4c:	4809      	ldr	r0, [pc, #36]	@ (800db74 <MX_USB_DEVICE_Init+0x54>)
 800db4e:	f7fe fbf7 	bl	800c340 <USBD_CDC_RegisterInterface>
 800db52:	4603      	mov	r3, r0
 800db54:	2b00      	cmp	r3, #0
 800db56:	d001      	beq.n	800db5c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800db58:	f7f3 fdc2 	bl	80016e0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800db5c:	4805      	ldr	r0, [pc, #20]	@ (800db74 <MX_USB_DEVICE_Init+0x54>)
 800db5e:	f7fe fd25 	bl	800c5ac <USBD_Start>
 800db62:	4603      	mov	r3, r0
 800db64:	2b00      	cmp	r3, #0
 800db66:	d001      	beq.n	800db6c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800db68:	f7f3 fdba 	bl	80016e0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800db6c:	bf00      	nop
 800db6e:	bd80      	pop	{r7, pc}
 800db70:	200000e0 	.word	0x200000e0
 800db74:	20000b3c 	.word	0x20000b3c
 800db78:	20000044 	.word	0x20000044
 800db7c:	200000cc 	.word	0x200000cc

0800db80 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800db84:	2200      	movs	r2, #0
 800db86:	4905      	ldr	r1, [pc, #20]	@ (800db9c <CDC_Init_FS+0x1c>)
 800db88:	4805      	ldr	r0, [pc, #20]	@ (800dba0 <CDC_Init_FS+0x20>)
 800db8a:	f7fe fbf3 	bl	800c374 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800db8e:	4905      	ldr	r1, [pc, #20]	@ (800dba4 <CDC_Init_FS+0x24>)
 800db90:	4803      	ldr	r0, [pc, #12]	@ (800dba0 <CDC_Init_FS+0x20>)
 800db92:	f7fe fc11 	bl	800c3b8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800db96:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800db98:	4618      	mov	r0, r3
 800db9a:	bd80      	pop	{r7, pc}
 800db9c:	20001018 	.word	0x20001018
 800dba0:	20000b3c 	.word	0x20000b3c
 800dba4:	20000e18 	.word	0x20000e18

0800dba8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dba8:	b480      	push	{r7}
 800dbaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dbac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr

0800dbb8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	6039      	str	r1, [r7, #0]
 800dbc2:	71fb      	strb	r3, [r7, #7]
 800dbc4:	4613      	mov	r3, r2
 800dbc6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800dbc8:	79fb      	ldrb	r3, [r7, #7]
 800dbca:	2b23      	cmp	r3, #35	@ 0x23
 800dbcc:	f200 8098 	bhi.w	800dd00 <CDC_Control_FS+0x148>
 800dbd0:	a201      	add	r2, pc, #4	@ (adr r2, 800dbd8 <CDC_Control_FS+0x20>)
 800dbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbd6:	bf00      	nop
 800dbd8:	0800dd01 	.word	0x0800dd01
 800dbdc:	0800dd01 	.word	0x0800dd01
 800dbe0:	0800dd01 	.word	0x0800dd01
 800dbe4:	0800dd01 	.word	0x0800dd01
 800dbe8:	0800dd01 	.word	0x0800dd01
 800dbec:	0800dd01 	.word	0x0800dd01
 800dbf0:	0800dd01 	.word	0x0800dd01
 800dbf4:	0800dd01 	.word	0x0800dd01
 800dbf8:	0800dd01 	.word	0x0800dd01
 800dbfc:	0800dd01 	.word	0x0800dd01
 800dc00:	0800dd01 	.word	0x0800dd01
 800dc04:	0800dd01 	.word	0x0800dd01
 800dc08:	0800dd01 	.word	0x0800dd01
 800dc0c:	0800dd01 	.word	0x0800dd01
 800dc10:	0800dd01 	.word	0x0800dd01
 800dc14:	0800dd01 	.word	0x0800dd01
 800dc18:	0800dd01 	.word	0x0800dd01
 800dc1c:	0800dd01 	.word	0x0800dd01
 800dc20:	0800dd01 	.word	0x0800dd01
 800dc24:	0800dd01 	.word	0x0800dd01
 800dc28:	0800dd01 	.word	0x0800dd01
 800dc2c:	0800dd01 	.word	0x0800dd01
 800dc30:	0800dd01 	.word	0x0800dd01
 800dc34:	0800dd01 	.word	0x0800dd01
 800dc38:	0800dd01 	.word	0x0800dd01
 800dc3c:	0800dd01 	.word	0x0800dd01
 800dc40:	0800dd01 	.word	0x0800dd01
 800dc44:	0800dd01 	.word	0x0800dd01
 800dc48:	0800dd01 	.word	0x0800dd01
 800dc4c:	0800dd01 	.word	0x0800dd01
 800dc50:	0800dd01 	.word	0x0800dd01
 800dc54:	0800dd01 	.word	0x0800dd01
 800dc58:	0800dc69 	.word	0x0800dc69
 800dc5c:	0800dcad 	.word	0x0800dcad
 800dc60:	0800dd01 	.word	0x0800dd01
 800dc64:	0800dd01 	.word	0x0800dd01
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800dc68:	683b      	ldr	r3, [r7, #0]
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	461a      	mov	r2, r3
 800dc6e:	683b      	ldr	r3, [r7, #0]
 800dc70:	3301      	adds	r3, #1
 800dc72:	781b      	ldrb	r3, [r3, #0]
 800dc74:	021b      	lsls	r3, r3, #8
 800dc76:	431a      	orrs	r2, r3
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	3302      	adds	r3, #2
 800dc7c:	781b      	ldrb	r3, [r3, #0]
 800dc7e:	041b      	lsls	r3, r3, #16
 800dc80:	431a      	orrs	r2, r3
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	3303      	adds	r3, #3
 800dc86:	781b      	ldrb	r3, [r3, #0]
 800dc88:	061b      	lsls	r3, r3, #24
 800dc8a:	4313      	orrs	r3, r2
 800dc8c:	461a      	mov	r2, r3
 800dc8e:	4b20      	ldr	r3, [pc, #128]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dc90:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800dc92:	683b      	ldr	r3, [r7, #0]
 800dc94:	791a      	ldrb	r2, [r3, #4]
 800dc96:	4b1e      	ldr	r3, [pc, #120]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dc98:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	795a      	ldrb	r2, [r3, #5]
 800dc9e:	4b1c      	ldr	r3, [pc, #112]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dca0:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800dca2:	683b      	ldr	r3, [r7, #0]
 800dca4:	799a      	ldrb	r2, [r3, #6]
 800dca6:	4b1a      	ldr	r3, [pc, #104]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dca8:	719a      	strb	r2, [r3, #6]
    break;
 800dcaa:	e02a      	b.n	800dd02 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800dcac:	4b18      	ldr	r3, [pc, #96]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	b2da      	uxtb	r2, r3
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800dcb6:	4b16      	ldr	r3, [pc, #88]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	0a1a      	lsrs	r2, r3, #8
 800dcbc:	683b      	ldr	r3, [r7, #0]
 800dcbe:	3301      	adds	r3, #1
 800dcc0:	b2d2      	uxtb	r2, r2
 800dcc2:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800dcc4:	4b12      	ldr	r3, [pc, #72]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	0c1a      	lsrs	r2, r3, #16
 800dcca:	683b      	ldr	r3, [r7, #0]
 800dccc:	3302      	adds	r3, #2
 800dcce:	b2d2      	uxtb	r2, r2
 800dcd0:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800dcd2:	4b0f      	ldr	r3, [pc, #60]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	0e1a      	lsrs	r2, r3, #24
 800dcd8:	683b      	ldr	r3, [r7, #0]
 800dcda:	3303      	adds	r3, #3
 800dcdc:	b2d2      	uxtb	r2, r2
 800dcde:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	3304      	adds	r3, #4
 800dce4:	4a0a      	ldr	r2, [pc, #40]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dce6:	7912      	ldrb	r2, [r2, #4]
 800dce8:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	3305      	adds	r3, #5
 800dcee:	4a08      	ldr	r2, [pc, #32]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dcf0:	7952      	ldrb	r2, [r2, #5]
 800dcf2:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	3306      	adds	r3, #6
 800dcf8:	4a05      	ldr	r2, [pc, #20]	@ (800dd10 <CDC_Control_FS+0x158>)
 800dcfa:	7992      	ldrb	r2, [r2, #6]
 800dcfc:	701a      	strb	r2, [r3, #0]
    break;
 800dcfe:	e000      	b.n	800dd02 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dd00:	bf00      	nop
  }

  return (USBD_OK);
 800dd02:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800dd04:	4618      	mov	r0, r3
 800dd06:	370c      	adds	r7, #12
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	200000c4 	.word	0x200000c4

0800dd14 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b082      	sub	sp, #8
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	6078      	str	r0, [r7, #4]
 800dd1c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800dd1e:	4b0b      	ldr	r3, [pc, #44]	@ (800dd4c <CDC_Receive_FS+0x38>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2b00      	cmp	r3, #0
 800dd24:	d006      	beq.n	800dd34 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800dd26:	4b09      	ldr	r3, [pc, #36]	@ (800dd4c <CDC_Receive_FS+0x38>)
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	683a      	ldr	r2, [r7, #0]
 800dd2c:	6812      	ldr	r2, [r2, #0]
 800dd2e:	4611      	mov	r1, r2
 800dd30:	6878      	ldr	r0, [r7, #4]
 800dd32:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dd34:	6879      	ldr	r1, [r7, #4]
 800dd36:	4806      	ldr	r0, [pc, #24]	@ (800dd50 <CDC_Receive_FS+0x3c>)
 800dd38:	f7fe fb3e 	bl	800c3b8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800dd3c:	4804      	ldr	r0, [pc, #16]	@ (800dd50 <CDC_Receive_FS+0x3c>)
 800dd3e:	f7fe fb99 	bl	800c474 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800dd42:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	20001218 	.word	0x20001218
 800dd50:	20000b3c 	.word	0x20000b3c

0800dd54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800dd54:	b580      	push	{r7, lr}
 800dd56:	b084      	sub	sp, #16
 800dd58:	af00      	add	r7, sp, #0
 800dd5a:	6078      	str	r0, [r7, #4]
 800dd5c:	460b      	mov	r3, r1
 800dd5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800dd60:	2300      	movs	r3, #0
 800dd62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800dd64:	4b0d      	ldr	r3, [pc, #52]	@ (800dd9c <CDC_Transmit_FS+0x48>)
 800dd66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800dd6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d001      	beq.n	800dd7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800dd76:	2301      	movs	r3, #1
 800dd78:	e00b      	b.n	800dd92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800dd7a:	887b      	ldrh	r3, [r7, #2]
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	6879      	ldr	r1, [r7, #4]
 800dd80:	4806      	ldr	r0, [pc, #24]	@ (800dd9c <CDC_Transmit_FS+0x48>)
 800dd82:	f7fe faf7 	bl	800c374 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800dd86:	4805      	ldr	r0, [pc, #20]	@ (800dd9c <CDC_Transmit_FS+0x48>)
 800dd88:	f7fe fb34 	bl	800c3f4 <USBD_CDC_TransmitPacket>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800dd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3710      	adds	r7, #16
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}
 800dd9a:	bf00      	nop
 800dd9c:	20000b3c 	.word	0x20000b3c

0800dda0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800dda0:	b480      	push	{r7}
 800dda2:	b087      	sub	sp, #28
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	60f8      	str	r0, [r7, #12]
 800dda8:	60b9      	str	r1, [r7, #8]
 800ddaa:	4613      	mov	r3, r2
 800ddac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ddb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	371c      	adds	r7, #28
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddc0:	4770      	bx	lr
	...

0800ddc4 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800ddc4:	b480      	push	{r7}
 800ddc6:	b083      	sub	sp, #12
 800ddc8:	af00      	add	r7, sp, #0
 800ddca:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800ddcc:	4a04      	ldr	r2, [pc, #16]	@ (800dde0 <CDC_Attach_Rx+0x1c>)
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6013      	str	r3, [r2, #0]
}
 800ddd2:	bf00      	nop
 800ddd4:	370c      	adds	r7, #12
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	20001218 	.word	0x20001218

0800dde4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dde4:	b480      	push	{r7}
 800dde6:	b083      	sub	sp, #12
 800dde8:	af00      	add	r7, sp, #0
 800ddea:	4603      	mov	r3, r0
 800ddec:	6039      	str	r1, [r7, #0]
 800ddee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	2212      	movs	r2, #18
 800ddf4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ddf6:	4b03      	ldr	r3, [pc, #12]	@ (800de04 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ddf8:	4618      	mov	r0, r3
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr
 800de04:	200000fc 	.word	0x200000fc

0800de08 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de08:	b480      	push	{r7}
 800de0a:	b083      	sub	sp, #12
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	4603      	mov	r3, r0
 800de10:	6039      	str	r1, [r7, #0]
 800de12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800de14:	683b      	ldr	r3, [r7, #0]
 800de16:	2204      	movs	r2, #4
 800de18:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800de1a:	4b03      	ldr	r3, [pc, #12]	@ (800de28 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800de1c:	4618      	mov	r0, r3
 800de1e:	370c      	adds	r7, #12
 800de20:	46bd      	mov	sp, r7
 800de22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de26:	4770      	bx	lr
 800de28:	20000110 	.word	0x20000110

0800de2c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b082      	sub	sp, #8
 800de30:	af00      	add	r7, sp, #0
 800de32:	4603      	mov	r3, r0
 800de34:	6039      	str	r1, [r7, #0]
 800de36:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800de38:	79fb      	ldrb	r3, [r7, #7]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d105      	bne.n	800de4a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de3e:	683a      	ldr	r2, [r7, #0]
 800de40:	4907      	ldr	r1, [pc, #28]	@ (800de60 <USBD_FS_ProductStrDescriptor+0x34>)
 800de42:	4808      	ldr	r0, [pc, #32]	@ (800de64 <USBD_FS_ProductStrDescriptor+0x38>)
 800de44:	f7ff fd78 	bl	800d938 <USBD_GetString>
 800de48:	e004      	b.n	800de54 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800de4a:	683a      	ldr	r2, [r7, #0]
 800de4c:	4904      	ldr	r1, [pc, #16]	@ (800de60 <USBD_FS_ProductStrDescriptor+0x34>)
 800de4e:	4805      	ldr	r0, [pc, #20]	@ (800de64 <USBD_FS_ProductStrDescriptor+0x38>)
 800de50:	f7ff fd72 	bl	800d938 <USBD_GetString>
  }
  return USBD_StrDesc;
 800de54:	4b02      	ldr	r3, [pc, #8]	@ (800de60 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800de56:	4618      	mov	r0, r3
 800de58:	3708      	adds	r7, #8
 800de5a:	46bd      	mov	sp, r7
 800de5c:	bd80      	pop	{r7, pc}
 800de5e:	bf00      	nop
 800de60:	2000121c 	.word	0x2000121c
 800de64:	0800e6a4 	.word	0x0800e6a4

0800de68 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b082      	sub	sp, #8
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	4603      	mov	r3, r0
 800de70:	6039      	str	r1, [r7, #0]
 800de72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800de74:	683a      	ldr	r2, [r7, #0]
 800de76:	4904      	ldr	r1, [pc, #16]	@ (800de88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800de78:	4804      	ldr	r0, [pc, #16]	@ (800de8c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800de7a:	f7ff fd5d 	bl	800d938 <USBD_GetString>
  return USBD_StrDesc;
 800de7e:	4b02      	ldr	r3, [pc, #8]	@ (800de88 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800de80:	4618      	mov	r0, r3
 800de82:	3708      	adds	r7, #8
 800de84:	46bd      	mov	sp, r7
 800de86:	bd80      	pop	{r7, pc}
 800de88:	2000121c 	.word	0x2000121c
 800de8c:	0800e6bc 	.word	0x0800e6bc

0800de90 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b082      	sub	sp, #8
 800de94:	af00      	add	r7, sp, #0
 800de96:	4603      	mov	r3, r0
 800de98:	6039      	str	r1, [r7, #0]
 800de9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800de9c:	683b      	ldr	r3, [r7, #0]
 800de9e:	221a      	movs	r2, #26
 800dea0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800dea2:	f000 f843 	bl	800df2c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800dea6:	4b02      	ldr	r3, [pc, #8]	@ (800deb0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800dea8:	4618      	mov	r0, r3
 800deaa:	3708      	adds	r7, #8
 800deac:	46bd      	mov	sp, r7
 800deae:	bd80      	pop	{r7, pc}
 800deb0:	20000114 	.word	0x20000114

0800deb4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	4603      	mov	r3, r0
 800debc:	6039      	str	r1, [r7, #0]
 800debe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800dec0:	79fb      	ldrb	r3, [r7, #7]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d105      	bne.n	800ded2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dec6:	683a      	ldr	r2, [r7, #0]
 800dec8:	4907      	ldr	r1, [pc, #28]	@ (800dee8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800deca:	4808      	ldr	r0, [pc, #32]	@ (800deec <USBD_FS_ConfigStrDescriptor+0x38>)
 800decc:	f7ff fd34 	bl	800d938 <USBD_GetString>
 800ded0:	e004      	b.n	800dedc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ded2:	683a      	ldr	r2, [r7, #0]
 800ded4:	4904      	ldr	r1, [pc, #16]	@ (800dee8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ded6:	4805      	ldr	r0, [pc, #20]	@ (800deec <USBD_FS_ConfigStrDescriptor+0x38>)
 800ded8:	f7ff fd2e 	bl	800d938 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dedc:	4b02      	ldr	r3, [pc, #8]	@ (800dee8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800dede:	4618      	mov	r0, r3
 800dee0:	3708      	adds	r7, #8
 800dee2:	46bd      	mov	sp, r7
 800dee4:	bd80      	pop	{r7, pc}
 800dee6:	bf00      	nop
 800dee8:	2000121c 	.word	0x2000121c
 800deec:	0800e6d0 	.word	0x0800e6d0

0800def0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	4603      	mov	r3, r0
 800def8:	6039      	str	r1, [r7, #0]
 800defa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800defc:	79fb      	ldrb	r3, [r7, #7]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d105      	bne.n	800df0e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800df02:	683a      	ldr	r2, [r7, #0]
 800df04:	4907      	ldr	r1, [pc, #28]	@ (800df24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800df06:	4808      	ldr	r0, [pc, #32]	@ (800df28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800df08:	f7ff fd16 	bl	800d938 <USBD_GetString>
 800df0c:	e004      	b.n	800df18 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800df0e:	683a      	ldr	r2, [r7, #0]
 800df10:	4904      	ldr	r1, [pc, #16]	@ (800df24 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800df12:	4805      	ldr	r0, [pc, #20]	@ (800df28 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800df14:	f7ff fd10 	bl	800d938 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df18:	4b02      	ldr	r3, [pc, #8]	@ (800df24 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	2000121c 	.word	0x2000121c
 800df28:	0800e6dc 	.word	0x0800e6dc

0800df2c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800df32:	4b0f      	ldr	r3, [pc, #60]	@ (800df70 <Get_SerialNum+0x44>)
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800df38:	4b0e      	ldr	r3, [pc, #56]	@ (800df74 <Get_SerialNum+0x48>)
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800df3e:	4b0e      	ldr	r3, [pc, #56]	@ (800df78 <Get_SerialNum+0x4c>)
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800df44:	68fa      	ldr	r2, [r7, #12]
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	4413      	add	r3, r2
 800df4a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d009      	beq.n	800df66 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800df52:	2208      	movs	r2, #8
 800df54:	4909      	ldr	r1, [pc, #36]	@ (800df7c <Get_SerialNum+0x50>)
 800df56:	68f8      	ldr	r0, [r7, #12]
 800df58:	f000 f814 	bl	800df84 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800df5c:	2204      	movs	r2, #4
 800df5e:	4908      	ldr	r1, [pc, #32]	@ (800df80 <Get_SerialNum+0x54>)
 800df60:	68b8      	ldr	r0, [r7, #8]
 800df62:	f000 f80f 	bl	800df84 <IntToUnicode>
  }
}
 800df66:	bf00      	nop
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	1fff7a10 	.word	0x1fff7a10
 800df74:	1fff7a14 	.word	0x1fff7a14
 800df78:	1fff7a18 	.word	0x1fff7a18
 800df7c:	20000116 	.word	0x20000116
 800df80:	20000126 	.word	0x20000126

0800df84 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800df84:	b480      	push	{r7}
 800df86:	b087      	sub	sp, #28
 800df88:	af00      	add	r7, sp, #0
 800df8a:	60f8      	str	r0, [r7, #12]
 800df8c:	60b9      	str	r1, [r7, #8]
 800df8e:	4613      	mov	r3, r2
 800df90:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800df92:	2300      	movs	r3, #0
 800df94:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800df96:	2300      	movs	r3, #0
 800df98:	75fb      	strb	r3, [r7, #23]
 800df9a:	e027      	b.n	800dfec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	0f1b      	lsrs	r3, r3, #28
 800dfa0:	2b09      	cmp	r3, #9
 800dfa2:	d80b      	bhi.n	800dfbc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800dfa4:	68fb      	ldr	r3, [r7, #12]
 800dfa6:	0f1b      	lsrs	r3, r3, #28
 800dfa8:	b2da      	uxtb	r2, r3
 800dfaa:	7dfb      	ldrb	r3, [r7, #23]
 800dfac:	005b      	lsls	r3, r3, #1
 800dfae:	4619      	mov	r1, r3
 800dfb0:	68bb      	ldr	r3, [r7, #8]
 800dfb2:	440b      	add	r3, r1
 800dfb4:	3230      	adds	r2, #48	@ 0x30
 800dfb6:	b2d2      	uxtb	r2, r2
 800dfb8:	701a      	strb	r2, [r3, #0]
 800dfba:	e00a      	b.n	800dfd2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	0f1b      	lsrs	r3, r3, #28
 800dfc0:	b2da      	uxtb	r2, r3
 800dfc2:	7dfb      	ldrb	r3, [r7, #23]
 800dfc4:	005b      	lsls	r3, r3, #1
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	68bb      	ldr	r3, [r7, #8]
 800dfca:	440b      	add	r3, r1
 800dfcc:	3237      	adds	r2, #55	@ 0x37
 800dfce:	b2d2      	uxtb	r2, r2
 800dfd0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	011b      	lsls	r3, r3, #4
 800dfd6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800dfd8:	7dfb      	ldrb	r3, [r7, #23]
 800dfda:	005b      	lsls	r3, r3, #1
 800dfdc:	3301      	adds	r3, #1
 800dfde:	68ba      	ldr	r2, [r7, #8]
 800dfe0:	4413      	add	r3, r2
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800dfe6:	7dfb      	ldrb	r3, [r7, #23]
 800dfe8:	3301      	adds	r3, #1
 800dfea:	75fb      	strb	r3, [r7, #23]
 800dfec:	7dfa      	ldrb	r2, [r7, #23]
 800dfee:	79fb      	ldrb	r3, [r7, #7]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d3d3      	bcc.n	800df9c <IntToUnicode+0x18>
  }
}
 800dff4:	bf00      	nop
 800dff6:	bf00      	nop
 800dff8:	371c      	adds	r7, #28
 800dffa:	46bd      	mov	sp, r7
 800dffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e000:	4770      	bx	lr
	...

0800e004 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b08a      	sub	sp, #40	@ 0x28
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e00c:	f107 0314 	add.w	r3, r7, #20
 800e010:	2200      	movs	r2, #0
 800e012:	601a      	str	r2, [r3, #0]
 800e014:	605a      	str	r2, [r3, #4]
 800e016:	609a      	str	r2, [r3, #8]
 800e018:	60da      	str	r2, [r3, #12]
 800e01a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e024:	d13a      	bne.n	800e09c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e026:	2300      	movs	r3, #0
 800e028:	613b      	str	r3, [r7, #16]
 800e02a:	4b1e      	ldr	r3, [pc, #120]	@ (800e0a4 <HAL_PCD_MspInit+0xa0>)
 800e02c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e02e:	4a1d      	ldr	r2, [pc, #116]	@ (800e0a4 <HAL_PCD_MspInit+0xa0>)
 800e030:	f043 0301 	orr.w	r3, r3, #1
 800e034:	6313      	str	r3, [r2, #48]	@ 0x30
 800e036:	4b1b      	ldr	r3, [pc, #108]	@ (800e0a4 <HAL_PCD_MspInit+0xa0>)
 800e038:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e03a:	f003 0301 	and.w	r3, r3, #1
 800e03e:	613b      	str	r3, [r7, #16]
 800e040:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e042:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e048:	2302      	movs	r3, #2
 800e04a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e04c:	2300      	movs	r3, #0
 800e04e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e050:	2303      	movs	r3, #3
 800e052:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e054:	230a      	movs	r3, #10
 800e056:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e058:	f107 0314 	add.w	r3, r7, #20
 800e05c:	4619      	mov	r1, r3
 800e05e:	4812      	ldr	r0, [pc, #72]	@ (800e0a8 <HAL_PCD_MspInit+0xa4>)
 800e060:	f7f5 fd60 	bl	8003b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e064:	4b0f      	ldr	r3, [pc, #60]	@ (800e0a4 <HAL_PCD_MspInit+0xa0>)
 800e066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e068:	4a0e      	ldr	r2, [pc, #56]	@ (800e0a4 <HAL_PCD_MspInit+0xa0>)
 800e06a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e06e:	6353      	str	r3, [r2, #52]	@ 0x34
 800e070:	2300      	movs	r3, #0
 800e072:	60fb      	str	r3, [r7, #12]
 800e074:	4b0b      	ldr	r3, [pc, #44]	@ (800e0a4 <HAL_PCD_MspInit+0xa0>)
 800e076:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e078:	4a0a      	ldr	r2, [pc, #40]	@ (800e0a4 <HAL_PCD_MspInit+0xa0>)
 800e07a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e07e:	6453      	str	r3, [r2, #68]	@ 0x44
 800e080:	4b08      	ldr	r3, [pc, #32]	@ (800e0a4 <HAL_PCD_MspInit+0xa0>)
 800e082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e084:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e088:	60fb      	str	r3, [r7, #12]
 800e08a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e08c:	2200      	movs	r2, #0
 800e08e:	2100      	movs	r1, #0
 800e090:	2043      	movs	r0, #67	@ 0x43
 800e092:	f7f5 f964 	bl	800335e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e096:	2043      	movs	r0, #67	@ 0x43
 800e098:	f7f5 f97d 	bl	8003396 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e09c:	bf00      	nop
 800e09e:	3728      	adds	r7, #40	@ 0x28
 800e0a0:	46bd      	mov	sp, r7
 800e0a2:	bd80      	pop	{r7, pc}
 800e0a4:	40023800 	.word	0x40023800
 800e0a8:	40020000 	.word	0x40020000

0800e0ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0ac:	b580      	push	{r7, lr}
 800e0ae:	b082      	sub	sp, #8
 800e0b0:	af00      	add	r7, sp, #0
 800e0b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	4610      	mov	r0, r2
 800e0c4:	f7fe fabf 	bl	800c646 <USBD_LL_SetupStage>
}
 800e0c8:	bf00      	nop
 800e0ca:	3708      	adds	r7, #8
 800e0cc:	46bd      	mov	sp, r7
 800e0ce:	bd80      	pop	{r7, pc}

0800e0d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e0d0:	b580      	push	{r7, lr}
 800e0d2:	b082      	sub	sp, #8
 800e0d4:	af00      	add	r7, sp, #0
 800e0d6:	6078      	str	r0, [r7, #4]
 800e0d8:	460b      	mov	r3, r1
 800e0da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e0e2:	78fa      	ldrb	r2, [r7, #3]
 800e0e4:	6879      	ldr	r1, [r7, #4]
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	4413      	add	r3, r2
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	440b      	add	r3, r1
 800e0f0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e0f4:	681a      	ldr	r2, [r3, #0]
 800e0f6:	78fb      	ldrb	r3, [r7, #3]
 800e0f8:	4619      	mov	r1, r3
 800e0fa:	f7fe faf9 	bl	800c6f0 <USBD_LL_DataOutStage>
}
 800e0fe:	bf00      	nop
 800e100:	3708      	adds	r7, #8
 800e102:	46bd      	mov	sp, r7
 800e104:	bd80      	pop	{r7, pc}

0800e106 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e106:	b580      	push	{r7, lr}
 800e108:	b082      	sub	sp, #8
 800e10a:	af00      	add	r7, sp, #0
 800e10c:	6078      	str	r0, [r7, #4]
 800e10e:	460b      	mov	r3, r1
 800e110:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e118:	78fa      	ldrb	r2, [r7, #3]
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	4613      	mov	r3, r2
 800e11e:	00db      	lsls	r3, r3, #3
 800e120:	4413      	add	r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	440b      	add	r3, r1
 800e126:	3320      	adds	r3, #32
 800e128:	681a      	ldr	r2, [r3, #0]
 800e12a:	78fb      	ldrb	r3, [r7, #3]
 800e12c:	4619      	mov	r1, r3
 800e12e:	f7fe fb9b 	bl	800c868 <USBD_LL_DataInStage>
}
 800e132:	bf00      	nop
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e13a:	b580      	push	{r7, lr}
 800e13c:	b082      	sub	sp, #8
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e148:	4618      	mov	r0, r3
 800e14a:	f7fe fcdf 	bl	800cb0c <USBD_LL_SOF>
}
 800e14e:	bf00      	nop
 800e150:	3708      	adds	r7, #8
 800e152:	46bd      	mov	sp, r7
 800e154:	bd80      	pop	{r7, pc}

0800e156 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e156:	b580      	push	{r7, lr}
 800e158:	b084      	sub	sp, #16
 800e15a:	af00      	add	r7, sp, #0
 800e15c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e15e:	2301      	movs	r3, #1
 800e160:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	79db      	ldrb	r3, [r3, #7]
 800e166:	2b02      	cmp	r3, #2
 800e168:	d001      	beq.n	800e16e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e16a:	f7f3 fab9 	bl	80016e0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e174:	7bfa      	ldrb	r2, [r7, #15]
 800e176:	4611      	mov	r1, r2
 800e178:	4618      	mov	r0, r3
 800e17a:	f7fe fc83 	bl	800ca84 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e184:	4618      	mov	r0, r3
 800e186:	f7fe fc2a 	bl	800c9de <USBD_LL_Reset>
}
 800e18a:	bf00      	nop
 800e18c:	3710      	adds	r7, #16
 800e18e:	46bd      	mov	sp, r7
 800e190:	bd80      	pop	{r7, pc}
	...

0800e194 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e194:	b580      	push	{r7, lr}
 800e196:	b082      	sub	sp, #8
 800e198:	af00      	add	r7, sp, #0
 800e19a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f7fe fc7e 	bl	800caa4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	6812      	ldr	r2, [r2, #0]
 800e1b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e1ba:	f043 0301 	orr.w	r3, r3, #1
 800e1be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	7adb      	ldrb	r3, [r3, #11]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d005      	beq.n	800e1d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e1c8:	4b04      	ldr	r3, [pc, #16]	@ (800e1dc <HAL_PCD_SuspendCallback+0x48>)
 800e1ca:	691b      	ldr	r3, [r3, #16]
 800e1cc:	4a03      	ldr	r2, [pc, #12]	@ (800e1dc <HAL_PCD_SuspendCallback+0x48>)
 800e1ce:	f043 0306 	orr.w	r3, r3, #6
 800e1d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e1d4:	bf00      	nop
 800e1d6:	3708      	adds	r7, #8
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}
 800e1dc:	e000ed00 	.word	0xe000ed00

0800e1e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1e0:	b580      	push	{r7, lr}
 800e1e2:	b082      	sub	sp, #8
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	f7fe fc74 	bl	800cadc <USBD_LL_Resume>
}
 800e1f4:	bf00      	nop
 800e1f6:	3708      	adds	r7, #8
 800e1f8:	46bd      	mov	sp, r7
 800e1fa:	bd80      	pop	{r7, pc}

0800e1fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b082      	sub	sp, #8
 800e200:	af00      	add	r7, sp, #0
 800e202:	6078      	str	r0, [r7, #4]
 800e204:	460b      	mov	r3, r1
 800e206:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e20e:	78fa      	ldrb	r2, [r7, #3]
 800e210:	4611      	mov	r1, r2
 800e212:	4618      	mov	r0, r3
 800e214:	f7fe fccc 	bl	800cbb0 <USBD_LL_IsoOUTIncomplete>
}
 800e218:	bf00      	nop
 800e21a:	3708      	adds	r7, #8
 800e21c:	46bd      	mov	sp, r7
 800e21e:	bd80      	pop	{r7, pc}

0800e220 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e220:	b580      	push	{r7, lr}
 800e222:	b082      	sub	sp, #8
 800e224:	af00      	add	r7, sp, #0
 800e226:	6078      	str	r0, [r7, #4]
 800e228:	460b      	mov	r3, r1
 800e22a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e232:	78fa      	ldrb	r2, [r7, #3]
 800e234:	4611      	mov	r1, r2
 800e236:	4618      	mov	r0, r3
 800e238:	f7fe fc88 	bl	800cb4c <USBD_LL_IsoINIncomplete>
}
 800e23c:	bf00      	nop
 800e23e:	3708      	adds	r7, #8
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e252:	4618      	mov	r0, r3
 800e254:	f7fe fcde 	bl	800cc14 <USBD_LL_DevConnected>
}
 800e258:	bf00      	nop
 800e25a:	3708      	adds	r7, #8
 800e25c:	46bd      	mov	sp, r7
 800e25e:	bd80      	pop	{r7, pc}

0800e260 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e26e:	4618      	mov	r0, r3
 800e270:	f7fe fcdb 	bl	800cc2a <USBD_LL_DevDisconnected>
}
 800e274:	bf00      	nop
 800e276:	3708      	adds	r7, #8
 800e278:	46bd      	mov	sp, r7
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d13c      	bne.n	800e306 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e28c:	4a20      	ldr	r2, [pc, #128]	@ (800e310 <USBD_LL_Init+0x94>)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	4a1e      	ldr	r2, [pc, #120]	@ (800e310 <USBD_LL_Init+0x94>)
 800e298:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e29c:	4b1c      	ldr	r3, [pc, #112]	@ (800e310 <USBD_LL_Init+0x94>)
 800e29e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e2a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e2a4:	4b1a      	ldr	r3, [pc, #104]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2a6:	2204      	movs	r2, #4
 800e2a8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e2aa:	4b19      	ldr	r3, [pc, #100]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2ac:	2202      	movs	r2, #2
 800e2ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e2b0:	4b17      	ldr	r3, [pc, #92]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2b2:	2200      	movs	r2, #0
 800e2b4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e2b6:	4b16      	ldr	r3, [pc, #88]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2b8:	2202      	movs	r2, #2
 800e2ba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e2bc:	4b14      	ldr	r3, [pc, #80]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2be:	2200      	movs	r2, #0
 800e2c0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e2c2:	4b13      	ldr	r3, [pc, #76]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2c4:	2200      	movs	r2, #0
 800e2c6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e2c8:	4b11      	ldr	r3, [pc, #68]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e2ce:	4b10      	ldr	r3, [pc, #64]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e2d4:	4b0e      	ldr	r3, [pc, #56]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e2da:	480d      	ldr	r0, [pc, #52]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2dc:	f7f8 fc72 	bl	8006bc4 <HAL_PCD_Init>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d001      	beq.n	800e2ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e2e6:	f7f3 f9fb 	bl	80016e0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e2ea:	2180      	movs	r1, #128	@ 0x80
 800e2ec:	4808      	ldr	r0, [pc, #32]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2ee:	f7f9 fe9e 	bl	800802e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e2f2:	2240      	movs	r2, #64	@ 0x40
 800e2f4:	2100      	movs	r1, #0
 800e2f6:	4806      	ldr	r0, [pc, #24]	@ (800e310 <USBD_LL_Init+0x94>)
 800e2f8:	f7f9 fe52 	bl	8007fa0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e2fc:	2280      	movs	r2, #128	@ 0x80
 800e2fe:	2101      	movs	r1, #1
 800e300:	4803      	ldr	r0, [pc, #12]	@ (800e310 <USBD_LL_Init+0x94>)
 800e302:	f7f9 fe4d 	bl	8007fa0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e306:	2300      	movs	r3, #0
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3708      	adds	r7, #8
 800e30c:	46bd      	mov	sp, r7
 800e30e:	bd80      	pop	{r7, pc}
 800e310:	2000141c 	.word	0x2000141c

0800e314 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e314:	b580      	push	{r7, lr}
 800e316:	b084      	sub	sp, #16
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e31c:	2300      	movs	r3, #0
 800e31e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e320:	2300      	movs	r3, #0
 800e322:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e32a:	4618      	mov	r0, r3
 800e32c:	f7f8 fd59 	bl	8006de2 <HAL_PCD_Start>
 800e330:	4603      	mov	r3, r0
 800e332:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e334:	7bfb      	ldrb	r3, [r7, #15]
 800e336:	4618      	mov	r0, r3
 800e338:	f000 f942 	bl	800e5c0 <USBD_Get_USB_Status>
 800e33c:	4603      	mov	r3, r0
 800e33e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e340:	7bbb      	ldrb	r3, [r7, #14]
}
 800e342:	4618      	mov	r0, r3
 800e344:	3710      	adds	r7, #16
 800e346:	46bd      	mov	sp, r7
 800e348:	bd80      	pop	{r7, pc}

0800e34a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e34a:	b580      	push	{r7, lr}
 800e34c:	b084      	sub	sp, #16
 800e34e:	af00      	add	r7, sp, #0
 800e350:	6078      	str	r0, [r7, #4]
 800e352:	4608      	mov	r0, r1
 800e354:	4611      	mov	r1, r2
 800e356:	461a      	mov	r2, r3
 800e358:	4603      	mov	r3, r0
 800e35a:	70fb      	strb	r3, [r7, #3]
 800e35c:	460b      	mov	r3, r1
 800e35e:	70bb      	strb	r3, [r7, #2]
 800e360:	4613      	mov	r3, r2
 800e362:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e364:	2300      	movs	r3, #0
 800e366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e368:	2300      	movs	r3, #0
 800e36a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e372:	78bb      	ldrb	r3, [r7, #2]
 800e374:	883a      	ldrh	r2, [r7, #0]
 800e376:	78f9      	ldrb	r1, [r7, #3]
 800e378:	f7f9 fa2d 	bl	80077d6 <HAL_PCD_EP_Open>
 800e37c:	4603      	mov	r3, r0
 800e37e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e380:	7bfb      	ldrb	r3, [r7, #15]
 800e382:	4618      	mov	r0, r3
 800e384:	f000 f91c 	bl	800e5c0 <USBD_Get_USB_Status>
 800e388:	4603      	mov	r3, r0
 800e38a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e38c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3710      	adds	r7, #16
 800e392:	46bd      	mov	sp, r7
 800e394:	bd80      	pop	{r7, pc}

0800e396 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e396:	b580      	push	{r7, lr}
 800e398:	b084      	sub	sp, #16
 800e39a:	af00      	add	r7, sp, #0
 800e39c:	6078      	str	r0, [r7, #4]
 800e39e:	460b      	mov	r3, r1
 800e3a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3b0:	78fa      	ldrb	r2, [r7, #3]
 800e3b2:	4611      	mov	r1, r2
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	f7f9 fa78 	bl	80078aa <HAL_PCD_EP_Close>
 800e3ba:	4603      	mov	r3, r0
 800e3bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3be:	7bfb      	ldrb	r3, [r7, #15]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	f000 f8fd 	bl	800e5c0 <USBD_Get_USB_Status>
 800e3c6:	4603      	mov	r3, r0
 800e3c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e3ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800e3cc:	4618      	mov	r0, r3
 800e3ce:	3710      	adds	r7, #16
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b084      	sub	sp, #16
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3e0:	2300      	movs	r3, #0
 800e3e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e3ee:	78fa      	ldrb	r2, [r7, #3]
 800e3f0:	4611      	mov	r1, r2
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7f9 fb30 	bl	8007a58 <HAL_PCD_EP_SetStall>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3fc:	7bfb      	ldrb	r3, [r7, #15]
 800e3fe:	4618      	mov	r0, r3
 800e400:	f000 f8de 	bl	800e5c0 <USBD_Get_USB_Status>
 800e404:	4603      	mov	r3, r0
 800e406:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e408:	7bbb      	ldrb	r3, [r7, #14]
}
 800e40a:	4618      	mov	r0, r3
 800e40c:	3710      	adds	r7, #16
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e412:	b580      	push	{r7, lr}
 800e414:	b084      	sub	sp, #16
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	460b      	mov	r3, r1
 800e41c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e41e:	2300      	movs	r3, #0
 800e420:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e422:	2300      	movs	r3, #0
 800e424:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e42c:	78fa      	ldrb	r2, [r7, #3]
 800e42e:	4611      	mov	r1, r2
 800e430:	4618      	mov	r0, r3
 800e432:	f7f9 fb74 	bl	8007b1e <HAL_PCD_EP_ClrStall>
 800e436:	4603      	mov	r3, r0
 800e438:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e43a:	7bfb      	ldrb	r3, [r7, #15]
 800e43c:	4618      	mov	r0, r3
 800e43e:	f000 f8bf 	bl	800e5c0 <USBD_Get_USB_Status>
 800e442:	4603      	mov	r3, r0
 800e444:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e446:	7bbb      	ldrb	r3, [r7, #14]
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3710      	adds	r7, #16
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e450:	b480      	push	{r7}
 800e452:	b085      	sub	sp, #20
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	460b      	mov	r3, r1
 800e45a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e462:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e464:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	da0b      	bge.n	800e484 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e46c:	78fb      	ldrb	r3, [r7, #3]
 800e46e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e472:	68f9      	ldr	r1, [r7, #12]
 800e474:	4613      	mov	r3, r2
 800e476:	00db      	lsls	r3, r3, #3
 800e478:	4413      	add	r3, r2
 800e47a:	009b      	lsls	r3, r3, #2
 800e47c:	440b      	add	r3, r1
 800e47e:	3316      	adds	r3, #22
 800e480:	781b      	ldrb	r3, [r3, #0]
 800e482:	e00b      	b.n	800e49c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e484:	78fb      	ldrb	r3, [r7, #3]
 800e486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e48a:	68f9      	ldr	r1, [r7, #12]
 800e48c:	4613      	mov	r3, r2
 800e48e:	00db      	lsls	r3, r3, #3
 800e490:	4413      	add	r3, r2
 800e492:	009b      	lsls	r3, r3, #2
 800e494:	440b      	add	r3, r1
 800e496:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e49a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e49c:	4618      	mov	r0, r3
 800e49e:	3714      	adds	r7, #20
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr

0800e4a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4c2:	78fa      	ldrb	r2, [r7, #3]
 800e4c4:	4611      	mov	r1, r2
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f7f9 f961 	bl	800778e <HAL_PCD_SetAddress>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4d0:	7bfb      	ldrb	r3, [r7, #15]
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	f000 f874 	bl	800e5c0 <USBD_Get_USB_Status>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}

0800e4e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e4e6:	b580      	push	{r7, lr}
 800e4e8:	b086      	sub	sp, #24
 800e4ea:	af00      	add	r7, sp, #0
 800e4ec:	60f8      	str	r0, [r7, #12]
 800e4ee:	607a      	str	r2, [r7, #4]
 800e4f0:	603b      	str	r3, [r7, #0]
 800e4f2:	460b      	mov	r3, r1
 800e4f4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e504:	7af9      	ldrb	r1, [r7, #11]
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	f7f9 fa6b 	bl	80079e4 <HAL_PCD_EP_Transmit>
 800e50e:	4603      	mov	r3, r0
 800e510:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e512:	7dfb      	ldrb	r3, [r7, #23]
 800e514:	4618      	mov	r0, r3
 800e516:	f000 f853 	bl	800e5c0 <USBD_Get_USB_Status>
 800e51a:	4603      	mov	r3, r0
 800e51c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e51e:	7dbb      	ldrb	r3, [r7, #22]
}
 800e520:	4618      	mov	r0, r3
 800e522:	3718      	adds	r7, #24
 800e524:	46bd      	mov	sp, r7
 800e526:	bd80      	pop	{r7, pc}

0800e528 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	60f8      	str	r0, [r7, #12]
 800e530:	607a      	str	r2, [r7, #4]
 800e532:	603b      	str	r3, [r7, #0]
 800e534:	460b      	mov	r3, r1
 800e536:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e538:	2300      	movs	r3, #0
 800e53a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e53c:	2300      	movs	r3, #0
 800e53e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e546:	7af9      	ldrb	r1, [r7, #11]
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	687a      	ldr	r2, [r7, #4]
 800e54c:	f7f9 f9f7 	bl	800793e <HAL_PCD_EP_Receive>
 800e550:	4603      	mov	r3, r0
 800e552:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e554:	7dfb      	ldrb	r3, [r7, #23]
 800e556:	4618      	mov	r0, r3
 800e558:	f000 f832 	bl	800e5c0 <USBD_Get_USB_Status>
 800e55c:	4603      	mov	r3, r0
 800e55e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e560:	7dbb      	ldrb	r3, [r7, #22]
}
 800e562:	4618      	mov	r0, r3
 800e564:	3718      	adds	r7, #24
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e56a:	b580      	push	{r7, lr}
 800e56c:	b082      	sub	sp, #8
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
 800e572:	460b      	mov	r3, r1
 800e574:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e57c:	78fa      	ldrb	r2, [r7, #3]
 800e57e:	4611      	mov	r1, r2
 800e580:	4618      	mov	r0, r3
 800e582:	f7f9 fa17 	bl	80079b4 <HAL_PCD_EP_GetRxCount>
 800e586:	4603      	mov	r3, r0
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3708      	adds	r7, #8
 800e58c:	46bd      	mov	sp, r7
 800e58e:	bd80      	pop	{r7, pc}

0800e590 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e590:	b480      	push	{r7}
 800e592:	b083      	sub	sp, #12
 800e594:	af00      	add	r7, sp, #0
 800e596:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e598:	4b03      	ldr	r3, [pc, #12]	@ (800e5a8 <USBD_static_malloc+0x18>)
}
 800e59a:	4618      	mov	r0, r3
 800e59c:	370c      	adds	r7, #12
 800e59e:	46bd      	mov	sp, r7
 800e5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	20001900 	.word	0x20001900

0800e5ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	b083      	sub	sp, #12
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]

}
 800e5b4:	bf00      	nop
 800e5b6:	370c      	adds	r7, #12
 800e5b8:	46bd      	mov	sp, r7
 800e5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5be:	4770      	bx	lr

0800e5c0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e5ce:	79fb      	ldrb	r3, [r7, #7]
 800e5d0:	2b03      	cmp	r3, #3
 800e5d2:	d817      	bhi.n	800e604 <USBD_Get_USB_Status+0x44>
 800e5d4:	a201      	add	r2, pc, #4	@ (adr r2, 800e5dc <USBD_Get_USB_Status+0x1c>)
 800e5d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5da:	bf00      	nop
 800e5dc:	0800e5ed 	.word	0x0800e5ed
 800e5e0:	0800e5f3 	.word	0x0800e5f3
 800e5e4:	0800e5f9 	.word	0x0800e5f9
 800e5e8:	0800e5ff 	.word	0x0800e5ff
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	73fb      	strb	r3, [r7, #15]
    break;
 800e5f0:	e00b      	b.n	800e60a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e5f2:	2303      	movs	r3, #3
 800e5f4:	73fb      	strb	r3, [r7, #15]
    break;
 800e5f6:	e008      	b.n	800e60a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e5f8:	2301      	movs	r3, #1
 800e5fa:	73fb      	strb	r3, [r7, #15]
    break;
 800e5fc:	e005      	b.n	800e60a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e5fe:	2303      	movs	r3, #3
 800e600:	73fb      	strb	r3, [r7, #15]
    break;
 800e602:	e002      	b.n	800e60a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e604:	2303      	movs	r3, #3
 800e606:	73fb      	strb	r3, [r7, #15]
    break;
 800e608:	bf00      	nop
  }
  return usb_status;
 800e60a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	3714      	adds	r7, #20
 800e610:	46bd      	mov	sp, r7
 800e612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e616:	4770      	bx	lr

0800e618 <memset>:
 800e618:	4402      	add	r2, r0
 800e61a:	4603      	mov	r3, r0
 800e61c:	4293      	cmp	r3, r2
 800e61e:	d100      	bne.n	800e622 <memset+0xa>
 800e620:	4770      	bx	lr
 800e622:	f803 1b01 	strb.w	r1, [r3], #1
 800e626:	e7f9      	b.n	800e61c <memset+0x4>

0800e628 <__libc_init_array>:
 800e628:	b570      	push	{r4, r5, r6, lr}
 800e62a:	4d0d      	ldr	r5, [pc, #52]	@ (800e660 <__libc_init_array+0x38>)
 800e62c:	4c0d      	ldr	r4, [pc, #52]	@ (800e664 <__libc_init_array+0x3c>)
 800e62e:	1b64      	subs	r4, r4, r5
 800e630:	10a4      	asrs	r4, r4, #2
 800e632:	2600      	movs	r6, #0
 800e634:	42a6      	cmp	r6, r4
 800e636:	d109      	bne.n	800e64c <__libc_init_array+0x24>
 800e638:	4d0b      	ldr	r5, [pc, #44]	@ (800e668 <__libc_init_array+0x40>)
 800e63a:	4c0c      	ldr	r4, [pc, #48]	@ (800e66c <__libc_init_array+0x44>)
 800e63c:	f000 f826 	bl	800e68c <_init>
 800e640:	1b64      	subs	r4, r4, r5
 800e642:	10a4      	asrs	r4, r4, #2
 800e644:	2600      	movs	r6, #0
 800e646:	42a6      	cmp	r6, r4
 800e648:	d105      	bne.n	800e656 <__libc_init_array+0x2e>
 800e64a:	bd70      	pop	{r4, r5, r6, pc}
 800e64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800e650:	4798      	blx	r3
 800e652:	3601      	adds	r6, #1
 800e654:	e7ee      	b.n	800e634 <__libc_init_array+0xc>
 800e656:	f855 3b04 	ldr.w	r3, [r5], #4
 800e65a:	4798      	blx	r3
 800e65c:	3601      	adds	r6, #1
 800e65e:	e7f2      	b.n	800e646 <__libc_init_array+0x1e>
 800e660:	0800e724 	.word	0x0800e724
 800e664:	0800e724 	.word	0x0800e724
 800e668:	0800e724 	.word	0x0800e724
 800e66c:	0800e728 	.word	0x0800e728

0800e670 <memcpy>:
 800e670:	440a      	add	r2, r1
 800e672:	4291      	cmp	r1, r2
 800e674:	f100 33ff 	add.w	r3, r0, #4294967295
 800e678:	d100      	bne.n	800e67c <memcpy+0xc>
 800e67a:	4770      	bx	lr
 800e67c:	b510      	push	{r4, lr}
 800e67e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e682:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e686:	4291      	cmp	r1, r2
 800e688:	d1f9      	bne.n	800e67e <memcpy+0xe>
 800e68a:	bd10      	pop	{r4, pc}

0800e68c <_init>:
 800e68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e68e:	bf00      	nop
 800e690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e692:	bc08      	pop	{r3}
 800e694:	469e      	mov	lr, r3
 800e696:	4770      	bx	lr

0800e698 <_fini>:
 800e698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e69a:	bf00      	nop
 800e69c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e69e:	bc08      	pop	{r3}
 800e6a0:	469e      	mov	lr, r3
 800e6a2:	4770      	bx	lr
