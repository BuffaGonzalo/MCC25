
firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f23c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001598  0800f3dc  0800f3dc  000103dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010974  08010974  00012184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08010974  08010974  00011974  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801097c  0801097c  00012184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801097c  0801097c  0001197c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010980  08010980  00011980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08010984  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001adc  20000184  08010b08  00012184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001c60  08010b08  00012c60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00012184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ac87  00000000  00000000  000121b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000434b  00000000  00000000  0002ce3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001880  00000000  00000000  00031188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0001be8f  00000000  00000000  00032a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00020083  00000000  00000000  0004e897  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000a00f9  00000000  00000000  0006e91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0010ea13  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 000012d4  00000000  00000000  0010ea56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d18  00000000  00000000  0010fd2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00116a44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f3c4 	.word	0x0800f3c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800f3c4 	.word	0x0800f3c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2iz>:
 800084c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d215      	bcs.n	8000882 <__aeabi_d2iz+0x36>
 8000856:	d511      	bpl.n	800087c <__aeabi_d2iz+0x30>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d912      	bls.n	8000888 <__aeabi_d2iz+0x3c>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000872:	fa23 f002 	lsr.w	r0, r3, r2
 8000876:	bf18      	it	ne
 8000878:	4240      	negne	r0, r0
 800087a:	4770      	bx	lr
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	4770      	bx	lr
 8000882:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000886:	d105      	bne.n	8000894 <__aeabi_d2iz+0x48>
 8000888:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800088c:	bf08      	it	eq
 800088e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000892:	4770      	bx	lr
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop

0800089c <__aeabi_uldivmod>:
 800089c:	b953      	cbnz	r3, 80008b4 <__aeabi_uldivmod+0x18>
 800089e:	b94a      	cbnz	r2, 80008b4 <__aeabi_uldivmod+0x18>
 80008a0:	2900      	cmp	r1, #0
 80008a2:	bf08      	it	eq
 80008a4:	2800      	cmpeq	r0, #0
 80008a6:	bf1c      	itt	ne
 80008a8:	f04f 31ff 	movne.w	r1, #4294967295
 80008ac:	f04f 30ff 	movne.w	r0, #4294967295
 80008b0:	f000 b988 	b.w	8000bc4 <__aeabi_idiv0>
 80008b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008bc:	f000 f806 	bl	80008cc <__udivmoddi4>
 80008c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008c8:	b004      	add	sp, #16
 80008ca:	4770      	bx	lr

080008cc <__udivmoddi4>:
 80008cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008d0:	9d08      	ldr	r5, [sp, #32]
 80008d2:	468e      	mov	lr, r1
 80008d4:	4604      	mov	r4, r0
 80008d6:	4688      	mov	r8, r1
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d14a      	bne.n	8000972 <__udivmoddi4+0xa6>
 80008dc:	428a      	cmp	r2, r1
 80008de:	4617      	mov	r7, r2
 80008e0:	d962      	bls.n	80009a8 <__udivmoddi4+0xdc>
 80008e2:	fab2 f682 	clz	r6, r2
 80008e6:	b14e      	cbz	r6, 80008fc <__udivmoddi4+0x30>
 80008e8:	f1c6 0320 	rsb	r3, r6, #32
 80008ec:	fa01 f806 	lsl.w	r8, r1, r6
 80008f0:	fa20 f303 	lsr.w	r3, r0, r3
 80008f4:	40b7      	lsls	r7, r6
 80008f6:	ea43 0808 	orr.w	r8, r3, r8
 80008fa:	40b4      	lsls	r4, r6
 80008fc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000900:	fa1f fc87 	uxth.w	ip, r7
 8000904:	fbb8 f1fe 	udiv	r1, r8, lr
 8000908:	0c23      	lsrs	r3, r4, #16
 800090a:	fb0e 8811 	mls	r8, lr, r1, r8
 800090e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000912:	fb01 f20c 	mul.w	r2, r1, ip
 8000916:	429a      	cmp	r2, r3
 8000918:	d909      	bls.n	800092e <__udivmoddi4+0x62>
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000920:	f080 80ea 	bcs.w	8000af8 <__udivmoddi4+0x22c>
 8000924:	429a      	cmp	r2, r3
 8000926:	f240 80e7 	bls.w	8000af8 <__udivmoddi4+0x22c>
 800092a:	3902      	subs	r1, #2
 800092c:	443b      	add	r3, r7
 800092e:	1a9a      	subs	r2, r3, r2
 8000930:	b2a3      	uxth	r3, r4
 8000932:	fbb2 f0fe 	udiv	r0, r2, lr
 8000936:	fb0e 2210 	mls	r2, lr, r0, r2
 800093a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800093e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000942:	459c      	cmp	ip, r3
 8000944:	d909      	bls.n	800095a <__udivmoddi4+0x8e>
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	f100 32ff 	add.w	r2, r0, #4294967295
 800094c:	f080 80d6 	bcs.w	8000afc <__udivmoddi4+0x230>
 8000950:	459c      	cmp	ip, r3
 8000952:	f240 80d3 	bls.w	8000afc <__udivmoddi4+0x230>
 8000956:	443b      	add	r3, r7
 8000958:	3802      	subs	r0, #2
 800095a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800095e:	eba3 030c 	sub.w	r3, r3, ip
 8000962:	2100      	movs	r1, #0
 8000964:	b11d      	cbz	r5, 800096e <__udivmoddi4+0xa2>
 8000966:	40f3      	lsrs	r3, r6
 8000968:	2200      	movs	r2, #0
 800096a:	e9c5 3200 	strd	r3, r2, [r5]
 800096e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000972:	428b      	cmp	r3, r1
 8000974:	d905      	bls.n	8000982 <__udivmoddi4+0xb6>
 8000976:	b10d      	cbz	r5, 800097c <__udivmoddi4+0xb0>
 8000978:	e9c5 0100 	strd	r0, r1, [r5]
 800097c:	2100      	movs	r1, #0
 800097e:	4608      	mov	r0, r1
 8000980:	e7f5      	b.n	800096e <__udivmoddi4+0xa2>
 8000982:	fab3 f183 	clz	r1, r3
 8000986:	2900      	cmp	r1, #0
 8000988:	d146      	bne.n	8000a18 <__udivmoddi4+0x14c>
 800098a:	4573      	cmp	r3, lr
 800098c:	d302      	bcc.n	8000994 <__udivmoddi4+0xc8>
 800098e:	4282      	cmp	r2, r0
 8000990:	f200 8105 	bhi.w	8000b9e <__udivmoddi4+0x2d2>
 8000994:	1a84      	subs	r4, r0, r2
 8000996:	eb6e 0203 	sbc.w	r2, lr, r3
 800099a:	2001      	movs	r0, #1
 800099c:	4690      	mov	r8, r2
 800099e:	2d00      	cmp	r5, #0
 80009a0:	d0e5      	beq.n	800096e <__udivmoddi4+0xa2>
 80009a2:	e9c5 4800 	strd	r4, r8, [r5]
 80009a6:	e7e2      	b.n	800096e <__udivmoddi4+0xa2>
 80009a8:	2a00      	cmp	r2, #0
 80009aa:	f000 8090 	beq.w	8000ace <__udivmoddi4+0x202>
 80009ae:	fab2 f682 	clz	r6, r2
 80009b2:	2e00      	cmp	r6, #0
 80009b4:	f040 80a4 	bne.w	8000b00 <__udivmoddi4+0x234>
 80009b8:	1a8a      	subs	r2, r1, r2
 80009ba:	0c03      	lsrs	r3, r0, #16
 80009bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c0:	b280      	uxth	r0, r0
 80009c2:	b2bc      	uxth	r4, r7
 80009c4:	2101      	movs	r1, #1
 80009c6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ca:	fb0e 221c 	mls	r2, lr, ip, r2
 80009ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009d2:	fb04 f20c 	mul.w	r2, r4, ip
 80009d6:	429a      	cmp	r2, r3
 80009d8:	d907      	bls.n	80009ea <__udivmoddi4+0x11e>
 80009da:	18fb      	adds	r3, r7, r3
 80009dc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009e0:	d202      	bcs.n	80009e8 <__udivmoddi4+0x11c>
 80009e2:	429a      	cmp	r2, r3
 80009e4:	f200 80e0 	bhi.w	8000ba8 <__udivmoddi4+0x2dc>
 80009e8:	46c4      	mov	ip, r8
 80009ea:	1a9b      	subs	r3, r3, r2
 80009ec:	fbb3 f2fe 	udiv	r2, r3, lr
 80009f0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009f4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009f8:	fb02 f404 	mul.w	r4, r2, r4
 80009fc:	429c      	cmp	r4, r3
 80009fe:	d907      	bls.n	8000a10 <__udivmoddi4+0x144>
 8000a00:	18fb      	adds	r3, r7, r3
 8000a02:	f102 30ff 	add.w	r0, r2, #4294967295
 8000a06:	d202      	bcs.n	8000a0e <__udivmoddi4+0x142>
 8000a08:	429c      	cmp	r4, r3
 8000a0a:	f200 80ca 	bhi.w	8000ba2 <__udivmoddi4+0x2d6>
 8000a0e:	4602      	mov	r2, r0
 8000a10:	1b1b      	subs	r3, r3, r4
 8000a12:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a16:	e7a5      	b.n	8000964 <__udivmoddi4+0x98>
 8000a18:	f1c1 0620 	rsb	r6, r1, #32
 8000a1c:	408b      	lsls	r3, r1
 8000a1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a22:	431f      	orrs	r7, r3
 8000a24:	fa0e f401 	lsl.w	r4, lr, r1
 8000a28:	fa20 f306 	lsr.w	r3, r0, r6
 8000a2c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a30:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a34:	4323      	orrs	r3, r4
 8000a36:	fa00 f801 	lsl.w	r8, r0, r1
 8000a3a:	fa1f fc87 	uxth.w	ip, r7
 8000a3e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a42:	0c1c      	lsrs	r4, r3, #16
 8000a44:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a48:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a4c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a50:	45a6      	cmp	lr, r4
 8000a52:	fa02 f201 	lsl.w	r2, r2, r1
 8000a56:	d909      	bls.n	8000a6c <__udivmoddi4+0x1a0>
 8000a58:	193c      	adds	r4, r7, r4
 8000a5a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a5e:	f080 809c 	bcs.w	8000b9a <__udivmoddi4+0x2ce>
 8000a62:	45a6      	cmp	lr, r4
 8000a64:	f240 8099 	bls.w	8000b9a <__udivmoddi4+0x2ce>
 8000a68:	3802      	subs	r0, #2
 8000a6a:	443c      	add	r4, r7
 8000a6c:	eba4 040e 	sub.w	r4, r4, lr
 8000a70:	fa1f fe83 	uxth.w	lr, r3
 8000a74:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a78:	fb09 4413 	mls	r4, r9, r3, r4
 8000a7c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a80:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a84:	45a4      	cmp	ip, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x1ce>
 8000a88:	193c      	adds	r4, r7, r4
 8000a8a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a8e:	f080 8082 	bcs.w	8000b96 <__udivmoddi4+0x2ca>
 8000a92:	45a4      	cmp	ip, r4
 8000a94:	d97f      	bls.n	8000b96 <__udivmoddi4+0x2ca>
 8000a96:	3b02      	subs	r3, #2
 8000a98:	443c      	add	r4, r7
 8000a9a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a9e:	eba4 040c 	sub.w	r4, r4, ip
 8000aa2:	fba0 ec02 	umull	lr, ip, r0, r2
 8000aa6:	4564      	cmp	r4, ip
 8000aa8:	4673      	mov	r3, lr
 8000aaa:	46e1      	mov	r9, ip
 8000aac:	d362      	bcc.n	8000b74 <__udivmoddi4+0x2a8>
 8000aae:	d05f      	beq.n	8000b70 <__udivmoddi4+0x2a4>
 8000ab0:	b15d      	cbz	r5, 8000aca <__udivmoddi4+0x1fe>
 8000ab2:	ebb8 0203 	subs.w	r2, r8, r3
 8000ab6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aba:	fa04 f606 	lsl.w	r6, r4, r6
 8000abe:	fa22 f301 	lsr.w	r3, r2, r1
 8000ac2:	431e      	orrs	r6, r3
 8000ac4:	40cc      	lsrs	r4, r1
 8000ac6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aca:	2100      	movs	r1, #0
 8000acc:	e74f      	b.n	800096e <__udivmoddi4+0xa2>
 8000ace:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ad2:	0c01      	lsrs	r1, r0, #16
 8000ad4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ad8:	b280      	uxth	r0, r0
 8000ada:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ade:	463b      	mov	r3, r7
 8000ae0:	4638      	mov	r0, r7
 8000ae2:	463c      	mov	r4, r7
 8000ae4:	46b8      	mov	r8, r7
 8000ae6:	46be      	mov	lr, r7
 8000ae8:	2620      	movs	r6, #32
 8000aea:	fbb1 f1f7 	udiv	r1, r1, r7
 8000aee:	eba2 0208 	sub.w	r2, r2, r8
 8000af2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000af6:	e766      	b.n	80009c6 <__udivmoddi4+0xfa>
 8000af8:	4601      	mov	r1, r0
 8000afa:	e718      	b.n	800092e <__udivmoddi4+0x62>
 8000afc:	4610      	mov	r0, r2
 8000afe:	e72c      	b.n	800095a <__udivmoddi4+0x8e>
 8000b00:	f1c6 0220 	rsb	r2, r6, #32
 8000b04:	fa2e f302 	lsr.w	r3, lr, r2
 8000b08:	40b7      	lsls	r7, r6
 8000b0a:	40b1      	lsls	r1, r6
 8000b0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000b10:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b14:	430a      	orrs	r2, r1
 8000b16:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b1a:	b2bc      	uxth	r4, r7
 8000b1c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b20:	0c11      	lsrs	r1, r2, #16
 8000b22:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b26:	fb08 f904 	mul.w	r9, r8, r4
 8000b2a:	40b0      	lsls	r0, r6
 8000b2c:	4589      	cmp	r9, r1
 8000b2e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b32:	b280      	uxth	r0, r0
 8000b34:	d93e      	bls.n	8000bb4 <__udivmoddi4+0x2e8>
 8000b36:	1879      	adds	r1, r7, r1
 8000b38:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b3c:	d201      	bcs.n	8000b42 <__udivmoddi4+0x276>
 8000b3e:	4589      	cmp	r9, r1
 8000b40:	d81f      	bhi.n	8000b82 <__udivmoddi4+0x2b6>
 8000b42:	eba1 0109 	sub.w	r1, r1, r9
 8000b46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b4a:	fb09 f804 	mul.w	r8, r9, r4
 8000b4e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b52:	b292      	uxth	r2, r2
 8000b54:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b58:	4542      	cmp	r2, r8
 8000b5a:	d229      	bcs.n	8000bb0 <__udivmoddi4+0x2e4>
 8000b5c:	18ba      	adds	r2, r7, r2
 8000b5e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b62:	d2c4      	bcs.n	8000aee <__udivmoddi4+0x222>
 8000b64:	4542      	cmp	r2, r8
 8000b66:	d2c2      	bcs.n	8000aee <__udivmoddi4+0x222>
 8000b68:	f1a9 0102 	sub.w	r1, r9, #2
 8000b6c:	443a      	add	r2, r7
 8000b6e:	e7be      	b.n	8000aee <__udivmoddi4+0x222>
 8000b70:	45f0      	cmp	r8, lr
 8000b72:	d29d      	bcs.n	8000ab0 <__udivmoddi4+0x1e4>
 8000b74:	ebbe 0302 	subs.w	r3, lr, r2
 8000b78:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b7c:	3801      	subs	r0, #1
 8000b7e:	46e1      	mov	r9, ip
 8000b80:	e796      	b.n	8000ab0 <__udivmoddi4+0x1e4>
 8000b82:	eba7 0909 	sub.w	r9, r7, r9
 8000b86:	4449      	add	r1, r9
 8000b88:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b8c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b90:	fb09 f804 	mul.w	r8, r9, r4
 8000b94:	e7db      	b.n	8000b4e <__udivmoddi4+0x282>
 8000b96:	4673      	mov	r3, lr
 8000b98:	e77f      	b.n	8000a9a <__udivmoddi4+0x1ce>
 8000b9a:	4650      	mov	r0, sl
 8000b9c:	e766      	b.n	8000a6c <__udivmoddi4+0x1a0>
 8000b9e:	4608      	mov	r0, r1
 8000ba0:	e6fd      	b.n	800099e <__udivmoddi4+0xd2>
 8000ba2:	443b      	add	r3, r7
 8000ba4:	3a02      	subs	r2, #2
 8000ba6:	e733      	b.n	8000a10 <__udivmoddi4+0x144>
 8000ba8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000bac:	443b      	add	r3, r7
 8000bae:	e71c      	b.n	80009ea <__udivmoddi4+0x11e>
 8000bb0:	4649      	mov	r1, r9
 8000bb2:	e79c      	b.n	8000aee <__udivmoddi4+0x222>
 8000bb4:	eba1 0109 	sub.w	r1, r1, r9
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bbe:	fb09 f804 	mul.w	r8, r9, r4
 8000bc2:	e7c4      	b.n	8000b4e <__udivmoddi4+0x282>

08000bc4 <__aeabi_idiv0>:
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	//Revisar tiempos de ejecución de esta sección con respecto a la mpu
	for (int i = 0; i < 8; i++) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	e00a      	b.n	8000bec <HAL_ADC_ConvCpltCallback+0x24>
		adcDataTx[i] = adcData[i];
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c00 <HAL_ADC_ConvCpltCallback+0x38>)
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000bde:	4a09      	ldr	r2, [pc, #36]	@ (8000c04 <HAL_ADC_ConvCpltCallback+0x3c>)
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < 8; i++) {
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	3301      	adds	r3, #1
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b07      	cmp	r3, #7
 8000bf0:	ddf1      	ble.n	8000bd6 <HAL_ADC_ConvCpltCallback+0xe>
	}
}
 8000bf2:	bf00      	nop
 8000bf4:	bf00      	nop
 8000bf6:	3714      	adds	r7, #20
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	20000480 	.word	0x20000480
 8000c04:	20000490 	.word	0x20000490

08000c08 <HAL_I2C_MemTxCpltCallback>:

void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c){ //Pantalla
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	ssd1306_TxCplt = 1;
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <HAL_I2C_MemTxCpltCallback+0x1c>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	701a      	strb	r2, [r3, #0]
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	200006bd 	.word	0x200006bd

08000c28 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c){ //MPU
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = 1;
 8000c30:	4b04      	ldr	r3, [pc, #16]	@ (8000c44 <HAL_I2C_MemRxCpltCallback+0x1c>)
 8000c32:	2201      	movs	r2, #1
 8000c34:	701a      	strb	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	200006be 	.word	0x200006be

08000c48 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) { //250us
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000c56:	4293      	cmp	r3, r2
 8000c58:	d116      	bne.n	8000c88 <HAL_TIM_PeriodElapsedCallback+0x40>
		time10ms++;
 8000c5a:	4b0e      	ldr	r3, [pc, #56]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	b2da      	uxtb	r2, r3
 8000c62:	4b0c      	ldr	r3, [pc, #48]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c64:	701a      	strb	r2, [r3, #0]
		if (time10ms == TO10MS) {
 8000c66:	4b0b      	ldr	r3, [pc, #44]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b28      	cmp	r3, #40	@ 0x28
 8000c6c:	d107      	bne.n	8000c7e <HAL_TIM_PeriodElapsedCallback+0x36>
			time10ms = 0;
 8000c6e:	4b09      	ldr	r3, [pc, #36]	@ (8000c94 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	701a      	strb	r2, [r3, #0]
			IS10MS=TRUE;
 8000c74:	4a08      	ldr	r2, [pc, #32]	@ (8000c98 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000c76:	7813      	ldrb	r3, [r2, #0]
 8000c78:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c7c:	7013      	strb	r3, [r2, #0]
		}
		HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 8);
 8000c7e:	2208      	movs	r2, #8
 8000c80:	4906      	ldr	r1, [pc, #24]	@ (8000c9c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000c82:	4807      	ldr	r0, [pc, #28]	@ (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000c84:	f002 ff10 	bl	8003aa8 <HAL_ADC_Start_DMA>
	}

	if(htim->Instance ==TIM4){ //100ms
		//ONDISPLAY=TRUE;
	}
}
 8000c88:	bf00      	nop
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	40010000 	.word	0x40010000
 8000c94:	2000047c 	.word	0x2000047c
 8000c98:	200006bc 	.word	0x200006bc
 8000c9c:	20000480 	.word	0x20000480
 8000ca0:	200001a0 	.word	0x200001a0

08000ca4 <USBRxData>:


void USBRxData(uint8_t *buf, uint32_t len) { //Recibimos datos -> Enviamos datos
 8000ca4:	b490      	push	{r4, r7}
 8000ca6:	b084      	sub	sp, #16
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
 8000cac:	6039      	str	r1, [r7, #0]

	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000cae:	2300      	movs	r3, #0
 8000cb0:	73fb      	strb	r3, [r7, #15]
 8000cb2:	e018      	b.n	8000ce6 <USBRxData+0x42>
		USBRx.buff[USBRx.indexW++] = buf[nBytesRx];
 8000cb4:	7bfb      	ldrb	r3, [r7, #15]
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	441a      	add	r2, r3
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <USBRxData+0x58>)
 8000cbc:	6819      	ldr	r1, [r3, #0]
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <USBRxData+0x58>)
 8000cc0:	795b      	ldrb	r3, [r3, #5]
 8000cc2:	1c58      	adds	r0, r3, #1
 8000cc4:	b2c4      	uxtb	r4, r0
 8000cc6:	480d      	ldr	r0, [pc, #52]	@ (8000cfc <USBRxData+0x58>)
 8000cc8:	7144      	strb	r4, [r0, #5]
 8000cca:	440b      	add	r3, r1
 8000ccc:	7812      	ldrb	r2, [r2, #0]
 8000cce:	701a      	strb	r2, [r3, #0]
		USBRx.indexW &= USBRx.mask;
 8000cd0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <USBRxData+0x58>)
 8000cd2:	795a      	ldrb	r2, [r3, #5]
 8000cd4:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <USBRxData+0x58>)
 8000cd6:	799b      	ldrb	r3, [r3, #6]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	b2da      	uxtb	r2, r3
 8000cdc:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <USBRxData+0x58>)
 8000cde:	715a      	strb	r2, [r3, #5]
	for (uint8_t nBytesRx = 0; nBytesRx < len; nBytesRx++) { //Guardamos los datos en el buffer de recepcion
 8000ce0:	7bfb      	ldrb	r3, [r7, #15]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	73fb      	strb	r3, [r7, #15]
 8000ce6:	7bfb      	ldrb	r3, [r7, #15]
 8000ce8:	683a      	ldr	r2, [r7, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d8e2      	bhi.n	8000cb4 <USBRxData+0x10>
	}

}
 8000cee:	bf00      	nop
 8000cf0:	bf00      	nop
 8000cf2:	3710      	adds	r7, #16
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc90      	pop	{r4, r7}
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	200004ac 	.word	0x200004ac

08000d00 <USBTask>:

void USBTask() {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b0c2      	sub	sp, #264	@ 0x108
 8000d04:	af00      	add	r7, sp, #0

	if(USBRx.indexR != USBRx.indexW){
 8000d06:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <USBTask+0x90>)
 8000d08:	791a      	ldrb	r2, [r3, #4]
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <USBTask+0x90>)
 8000d0c:	795b      	ldrb	r3, [r3, #5]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	d039      	beq.n	8000d86 <USBTask+0x86>
		uint8_t sendBuffer[TXBUFSIZE];

		if (unerPrtcl_DecodeHeader(&USBRx))
 8000d12:	481f      	ldr	r0, [pc, #124]	@ (8000d90 <USBTask+0x90>)
 8000d14:	f002 fb7e 	bl	8003414 <unerPrtcl_DecodeHeader>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <USBTask+0x26>
			decodeCommand(&USBRx, &USBTx);
 8000d1e:	491d      	ldr	r1, [pc, #116]	@ (8000d94 <USBTask+0x94>)
 8000d20:	481b      	ldr	r0, [pc, #108]	@ (8000d90 <USBTask+0x90>)
 8000d22:	f000 f839 	bl	8000d98 <decodeCommand>

		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000d26:	2300      	movs	r3, #0
 8000d28:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000d2c:	e01d      	b.n	8000d6a <USBTask+0x6a>
			sendBuffer[i] = USBTx.buff[USBTx.indexData++];
 8000d2e:	4b19      	ldr	r3, [pc, #100]	@ (8000d94 <USBTask+0x94>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b18      	ldr	r3, [pc, #96]	@ (8000d94 <USBTask+0x94>)
 8000d34:	7a1b      	ldrb	r3, [r3, #8]
 8000d36:	1c59      	adds	r1, r3, #1
 8000d38:	b2c8      	uxtb	r0, r1
 8000d3a:	4916      	ldr	r1, [pc, #88]	@ (8000d94 <USBTask+0x94>)
 8000d3c:	7208      	strb	r0, [r1, #8]
 8000d3e:	441a      	add	r2, r3
 8000d40:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000d44:	7811      	ldrb	r1, [r2, #0]
 8000d46:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8000d4a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8000d4e:	54d1      	strb	r1, [r2, r3]
			USBTx.indexData &= USBTx.mask;
 8000d50:	4b10      	ldr	r3, [pc, #64]	@ (8000d94 <USBTask+0x94>)
 8000d52:	7a1a      	ldrb	r2, [r3, #8]
 8000d54:	4b0f      	ldr	r3, [pc, #60]	@ (8000d94 <USBTask+0x94>)
 8000d56:	799b      	ldrb	r3, [r3, #6]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	4b0d      	ldr	r3, [pc, #52]	@ (8000d94 <USBTask+0x94>)
 8000d5e:	721a      	strb	r2, [r3, #8]
		for (uint8_t i = 0; i < USBTx.bytes; i++) { //Paso limpio, error ultima posición
 8000d60:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8000d64:	3301      	adds	r3, #1
 8000d66:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <USBTask+0x94>)
 8000d6c:	79db      	ldrb	r3, [r3, #7]
 8000d6e:	f897 2107 	ldrb.w	r2, [r7, #263]	@ 0x107
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d3db      	bcc.n	8000d2e <USBTask+0x2e>
		}

		CDC_Transmit_FS(sendBuffer, USBTx.bytes);
 8000d76:	4b07      	ldr	r3, [pc, #28]	@ (8000d94 <USBTask+0x94>)
 8000d78:	79db      	ldrb	r3, [r3, #7]
 8000d7a:	461a      	mov	r2, r3
 8000d7c:	1d3b      	adds	r3, r7, #4
 8000d7e:	4611      	mov	r1, r2
 8000d80:	4618      	mov	r0, r3
 8000d82:	f00d fa09 	bl	800e198 <CDC_Transmit_FS>
	}

}
 8000d86:	bf00      	nop
 8000d88:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200004ac 	.word	0x200004ac
 8000d94:	200004a0 	.word	0x200004a0

08000d98 <decodeCommand>:

void decodeCommand(_sTx *dataRx, _sTx *dataTx) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]

	switch (dataRx->buff[dataRx->indexData]) {
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	7a12      	ldrb	r2, [r2, #8]
 8000daa:	4413      	add	r3, r2
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	3bf0      	subs	r3, #240	@ 0xf0
 8000db0:	2b03      	cmp	r3, #3
 8000db2:	f200 8129 	bhi.w	8001008 <decodeCommand+0x270>
 8000db6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dbc <decodeCommand+0x24>)
 8000db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dbc:	08000dcd 	.word	0x08000dcd
 8000dc0:	08000ded 	.word	0x08000ded
 8000dc4:	08000e0d 	.word	0x08000e0d
 8000dc8:	08000ef1 	.word	0x08000ef1
	case ALIVE:
		unerPrtcl_PutHeaderOnTx(dataTx, ALIVE, 2);
 8000dcc:	2202      	movs	r2, #2
 8000dce:	21f0      	movs	r1, #240	@ 0xf0
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f002 f9fd 	bl	80031d0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, ACK);
 8000dd6:	210d      	movs	r1, #13
 8000dd8:	6838      	ldr	r0, [r7, #0]
 8000dda:	f002 faa8 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	7a5b      	ldrb	r3, [r3, #9]
 8000de2:	4619      	mov	r1, r3
 8000de4:	6838      	ldr	r0, [r7, #0]
 8000de6:	f002 faa2 	bl	800332e <unerPrtcl_PutByteOnTx>
		break;
 8000dea:	e123      	b.n	8001034 <decodeCommand+0x29c>
	case FIRMWARE:
		unerPrtcl_PutHeaderOnTx(dataTx, FIRMWARE, 13);
 8000dec:	220d      	movs	r2, #13
 8000dee:	21f1      	movs	r1, #241	@ 0xf1
 8000df0:	6838      	ldr	r0, [r7, #0]
 8000df2:	f002 f9ed 	bl	80031d0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutStrOntx(dataTx, firmware);
 8000df6:	4991      	ldr	r1, [pc, #580]	@ (800103c <decodeCommand+0x2a4>)
 8000df8:	6838      	ldr	r0, [r7, #0]
 8000dfa:	f002 fac6 	bl	800338a <unerPrtcl_PutStrOntx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	7a5b      	ldrb	r3, [r3, #9]
 8000e02:	4619      	mov	r1, r3
 8000e04:	6838      	ldr	r0, [r7, #0]
 8000e06:	f002 fa92 	bl	800332e <unerPrtcl_PutByteOnTx>
		break;
 8000e0a:	e113      	b.n	8001034 <decodeCommand+0x29c>
	case GETMPU:
		unerPrtcl_PutHeaderOnTx(dataTx, GETMPU, 13);
 8000e0c:	220d      	movs	r2, #13
 8000e0e:	21f2      	movs	r1, #242	@ 0xf2
 8000e10:	6838      	ldr	r0, [r7, #0]
 8000e12:	f002 f9dd 	bl	80031d0 <unerPrtcl_PutHeaderOnTx>
		myWord.i16[0] = ax;
 8000e16:	4b8a      	ldr	r3, [pc, #552]	@ (8001040 <decodeCommand+0x2a8>)
 8000e18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e1c:	4b89      	ldr	r3, [pc, #548]	@ (8001044 <decodeCommand+0x2ac>)
 8000e1e:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000e20:	4b88      	ldr	r3, [pc, #544]	@ (8001044 <decodeCommand+0x2ac>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	4619      	mov	r1, r3
 8000e26:	6838      	ldr	r0, [r7, #0]
 8000e28:	f002 fa81 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000e2c:	4b85      	ldr	r3, [pc, #532]	@ (8001044 <decodeCommand+0x2ac>)
 8000e2e:	785b      	ldrb	r3, [r3, #1]
 8000e30:	4619      	mov	r1, r3
 8000e32:	6838      	ldr	r0, [r7, #0]
 8000e34:	f002 fa7b 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = ay;
 8000e38:	4b83      	ldr	r3, [pc, #524]	@ (8001048 <decodeCommand+0x2b0>)
 8000e3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e3e:	4b81      	ldr	r3, [pc, #516]	@ (8001044 <decodeCommand+0x2ac>)
 8000e40:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000e42:	4b80      	ldr	r3, [pc, #512]	@ (8001044 <decodeCommand+0x2ac>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4619      	mov	r1, r3
 8000e48:	6838      	ldr	r0, [r7, #0]
 8000e4a:	f002 fa70 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000e4e:	4b7d      	ldr	r3, [pc, #500]	@ (8001044 <decodeCommand+0x2ac>)
 8000e50:	785b      	ldrb	r3, [r3, #1]
 8000e52:	4619      	mov	r1, r3
 8000e54:	6838      	ldr	r0, [r7, #0]
 8000e56:	f002 fa6a 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = az;
 8000e5a:	4b7c      	ldr	r3, [pc, #496]	@ (800104c <decodeCommand+0x2b4>)
 8000e5c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e60:	4b78      	ldr	r3, [pc, #480]	@ (8001044 <decodeCommand+0x2ac>)
 8000e62:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000e64:	4b77      	ldr	r3, [pc, #476]	@ (8001044 <decodeCommand+0x2ac>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	6838      	ldr	r0, [r7, #0]
 8000e6c:	f002 fa5f 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000e70:	4b74      	ldr	r3, [pc, #464]	@ (8001044 <decodeCommand+0x2ac>)
 8000e72:	785b      	ldrb	r3, [r3, #1]
 8000e74:	4619      	mov	r1, r3
 8000e76:	6838      	ldr	r0, [r7, #0]
 8000e78:	f002 fa59 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gx;
 8000e7c:	4b74      	ldr	r3, [pc, #464]	@ (8001050 <decodeCommand+0x2b8>)
 8000e7e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e82:	4b70      	ldr	r3, [pc, #448]	@ (8001044 <decodeCommand+0x2ac>)
 8000e84:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000e86:	4b6f      	ldr	r3, [pc, #444]	@ (8001044 <decodeCommand+0x2ac>)
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	6838      	ldr	r0, [r7, #0]
 8000e8e:	f002 fa4e 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000e92:	4b6c      	ldr	r3, [pc, #432]	@ (8001044 <decodeCommand+0x2ac>)
 8000e94:	785b      	ldrb	r3, [r3, #1]
 8000e96:	4619      	mov	r1, r3
 8000e98:	6838      	ldr	r0, [r7, #0]
 8000e9a:	f002 fa48 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gy;
 8000e9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001054 <decodeCommand+0x2bc>)
 8000ea0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ea4:	4b67      	ldr	r3, [pc, #412]	@ (8001044 <decodeCommand+0x2ac>)
 8000ea6:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000ea8:	4b66      	ldr	r3, [pc, #408]	@ (8001044 <decodeCommand+0x2ac>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	4619      	mov	r1, r3
 8000eae:	6838      	ldr	r0, [r7, #0]
 8000eb0:	f002 fa3d 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000eb4:	4b63      	ldr	r3, [pc, #396]	@ (8001044 <decodeCommand+0x2ac>)
 8000eb6:	785b      	ldrb	r3, [r3, #1]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	6838      	ldr	r0, [r7, #0]
 8000ebc:	f002 fa37 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.i16[0] = gz;
 8000ec0:	4b65      	ldr	r3, [pc, #404]	@ (8001058 <decodeCommand+0x2c0>)
 8000ec2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000ec6:	4b5f      	ldr	r3, [pc, #380]	@ (8001044 <decodeCommand+0x2ac>)
 8000ec8:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000eca:	4b5e      	ldr	r3, [pc, #376]	@ (8001044 <decodeCommand+0x2ac>)
 8000ecc:	781b      	ldrb	r3, [r3, #0]
 8000ece:	4619      	mov	r1, r3
 8000ed0:	6838      	ldr	r0, [r7, #0]
 8000ed2:	f002 fa2c 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000ed6:	4b5b      	ldr	r3, [pc, #364]	@ (8001044 <decodeCommand+0x2ac>)
 8000ed8:	785b      	ldrb	r3, [r3, #1]
 8000eda:	4619      	mov	r1, r3
 8000edc:	6838      	ldr	r0, [r7, #0]
 8000ede:	f002 fa26 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	7a5b      	ldrb	r3, [r3, #9]
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	6838      	ldr	r0, [r7, #0]
 8000eea:	f002 fa20 	bl	800332e <unerPrtcl_PutByteOnTx>
		break;
 8000eee:	e0a1      	b.n	8001034 <decodeCommand+0x29c>
	case GETADC:
		unerPrtcl_PutHeaderOnTx(dataTx, GETADC, 17);
 8000ef0:	2211      	movs	r2, #17
 8000ef2:	21f3      	movs	r1, #243	@ 0xf3
 8000ef4:	6838      	ldr	r0, [r7, #0]
 8000ef6:	f002 f96b 	bl	80031d0 <unerPrtcl_PutHeaderOnTx>
		myWord.ui16[0] = adcDataTx[0];
 8000efa:	4b58      	ldr	r3, [pc, #352]	@ (800105c <decodeCommand+0x2c4>)
 8000efc:	881a      	ldrh	r2, [r3, #0]
 8000efe:	4b51      	ldr	r3, [pc, #324]	@ (8001044 <decodeCommand+0x2ac>)
 8000f00:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f02:	4b50      	ldr	r3, [pc, #320]	@ (8001044 <decodeCommand+0x2ac>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	4619      	mov	r1, r3
 8000f08:	6838      	ldr	r0, [r7, #0]
 8000f0a:	f002 fa10 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f0e:	4b4d      	ldr	r3, [pc, #308]	@ (8001044 <decodeCommand+0x2ac>)
 8000f10:	785b      	ldrb	r3, [r3, #1]
 8000f12:	4619      	mov	r1, r3
 8000f14:	6838      	ldr	r0, [r7, #0]
 8000f16:	f002 fa0a 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[1];
 8000f1a:	4b50      	ldr	r3, [pc, #320]	@ (800105c <decodeCommand+0x2c4>)
 8000f1c:	885a      	ldrh	r2, [r3, #2]
 8000f1e:	4b49      	ldr	r3, [pc, #292]	@ (8001044 <decodeCommand+0x2ac>)
 8000f20:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f22:	4b48      	ldr	r3, [pc, #288]	@ (8001044 <decodeCommand+0x2ac>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	4619      	mov	r1, r3
 8000f28:	6838      	ldr	r0, [r7, #0]
 8000f2a:	f002 fa00 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f2e:	4b45      	ldr	r3, [pc, #276]	@ (8001044 <decodeCommand+0x2ac>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	4619      	mov	r1, r3
 8000f34:	6838      	ldr	r0, [r7, #0]
 8000f36:	f002 f9fa 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[2];
 8000f3a:	4b48      	ldr	r3, [pc, #288]	@ (800105c <decodeCommand+0x2c4>)
 8000f3c:	889a      	ldrh	r2, [r3, #4]
 8000f3e:	4b41      	ldr	r3, [pc, #260]	@ (8001044 <decodeCommand+0x2ac>)
 8000f40:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f42:	4b40      	ldr	r3, [pc, #256]	@ (8001044 <decodeCommand+0x2ac>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	4619      	mov	r1, r3
 8000f48:	6838      	ldr	r0, [r7, #0]
 8000f4a:	f002 f9f0 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001044 <decodeCommand+0x2ac>)
 8000f50:	785b      	ldrb	r3, [r3, #1]
 8000f52:	4619      	mov	r1, r3
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f002 f9ea 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[3];
 8000f5a:	4b40      	ldr	r3, [pc, #256]	@ (800105c <decodeCommand+0x2c4>)
 8000f5c:	88da      	ldrh	r2, [r3, #6]
 8000f5e:	4b39      	ldr	r3, [pc, #228]	@ (8001044 <decodeCommand+0x2ac>)
 8000f60:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f62:	4b38      	ldr	r3, [pc, #224]	@ (8001044 <decodeCommand+0x2ac>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	4619      	mov	r1, r3
 8000f68:	6838      	ldr	r0, [r7, #0]
 8000f6a:	f002 f9e0 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f6e:	4b35      	ldr	r3, [pc, #212]	@ (8001044 <decodeCommand+0x2ac>)
 8000f70:	785b      	ldrb	r3, [r3, #1]
 8000f72:	4619      	mov	r1, r3
 8000f74:	6838      	ldr	r0, [r7, #0]
 8000f76:	f002 f9da 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[4];
 8000f7a:	4b38      	ldr	r3, [pc, #224]	@ (800105c <decodeCommand+0x2c4>)
 8000f7c:	891a      	ldrh	r2, [r3, #8]
 8000f7e:	4b31      	ldr	r3, [pc, #196]	@ (8001044 <decodeCommand+0x2ac>)
 8000f80:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000f82:	4b30      	ldr	r3, [pc, #192]	@ (8001044 <decodeCommand+0x2ac>)
 8000f84:	781b      	ldrb	r3, [r3, #0]
 8000f86:	4619      	mov	r1, r3
 8000f88:	6838      	ldr	r0, [r7, #0]
 8000f8a:	f002 f9d0 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000f8e:	4b2d      	ldr	r3, [pc, #180]	@ (8001044 <decodeCommand+0x2ac>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	4619      	mov	r1, r3
 8000f94:	6838      	ldr	r0, [r7, #0]
 8000f96:	f002 f9ca 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[5];
 8000f9a:	4b30      	ldr	r3, [pc, #192]	@ (800105c <decodeCommand+0x2c4>)
 8000f9c:	895a      	ldrh	r2, [r3, #10]
 8000f9e:	4b29      	ldr	r3, [pc, #164]	@ (8001044 <decodeCommand+0x2ac>)
 8000fa0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fa2:	4b28      	ldr	r3, [pc, #160]	@ (8001044 <decodeCommand+0x2ac>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	6838      	ldr	r0, [r7, #0]
 8000faa:	f002 f9c0 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fae:	4b25      	ldr	r3, [pc, #148]	@ (8001044 <decodeCommand+0x2ac>)
 8000fb0:	785b      	ldrb	r3, [r3, #1]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	6838      	ldr	r0, [r7, #0]
 8000fb6:	f002 f9ba 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[6];
 8000fba:	4b28      	ldr	r3, [pc, #160]	@ (800105c <decodeCommand+0x2c4>)
 8000fbc:	899a      	ldrh	r2, [r3, #12]
 8000fbe:	4b21      	ldr	r3, [pc, #132]	@ (8001044 <decodeCommand+0x2ac>)
 8000fc0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fc2:	4b20      	ldr	r3, [pc, #128]	@ (8001044 <decodeCommand+0x2ac>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	6838      	ldr	r0, [r7, #0]
 8000fca:	f002 f9b0 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <decodeCommand+0x2ac>)
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	6838      	ldr	r0, [r7, #0]
 8000fd6:	f002 f9aa 	bl	800332e <unerPrtcl_PutByteOnTx>
		myWord.ui16[0] = adcDataTx[7];
 8000fda:	4b20      	ldr	r3, [pc, #128]	@ (800105c <decodeCommand+0x2c4>)
 8000fdc:	89da      	ldrh	r2, [r3, #14]
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <decodeCommand+0x2ac>)
 8000fe0:	801a      	strh	r2, [r3, #0]
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[0]);
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <decodeCommand+0x2ac>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	6838      	ldr	r0, [r7, #0]
 8000fea:	f002 f9a0 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, myWord.ui8[1]);
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <decodeCommand+0x2ac>)
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	4619      	mov	r1, r3
 8000ff4:	6838      	ldr	r0, [r7, #0]
 8000ff6:	f002 f99a 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	7a5b      	ldrb	r3, [r3, #9]
 8000ffe:	4619      	mov	r1, r3
 8001000:	6838      	ldr	r0, [r7, #0]
 8001002:	f002 f994 	bl	800332e <unerPrtcl_PutByteOnTx>
		break;
 8001006:	e015      	b.n	8001034 <decodeCommand+0x29c>
		break;
	default:
		unerPrtcl_PutHeaderOnTx(dataTx, (_eCmd) dataRx->buff[dataRx->indexData], 2);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	7a12      	ldrb	r2, [r2, #8]
 8001010:	4413      	add	r3, r2
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2202      	movs	r2, #2
 8001016:	4619      	mov	r1, r3
 8001018:	6838      	ldr	r0, [r7, #0]
 800101a:	f002 f8d9 	bl	80031d0 <unerPrtcl_PutHeaderOnTx>
		unerPrtcl_PutByteOnTx(dataTx, UNKNOWN);
 800101e:	21ff      	movs	r1, #255	@ 0xff
 8001020:	6838      	ldr	r0, [r7, #0]
 8001022:	f002 f984 	bl	800332e <unerPrtcl_PutByteOnTx>
		unerPrtcl_PutByteOnTx(dataTx, dataTx->chk);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	7a5b      	ldrb	r3, [r3, #9]
 800102a:	4619      	mov	r1, r3
 800102c:	6838      	ldr	r0, [r7, #0]
 800102e:	f002 f97e 	bl	800332e <unerPrtcl_PutByteOnTx>
		break;
 8001032:	bf00      	nop
	}
}
 8001034:	bf00      	nop
 8001036:	3708      	adds	r7, #8
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	08010910 	.word	0x08010910
 8001040:	200006c0 	.word	0x200006c0
 8001044:	200006b8 	.word	0x200006b8
 8001048:	200006c2 	.word	0x200006c2
 800104c:	200006c4 	.word	0x200006c4
 8001050:	200006c6 	.word	0x200006c6
 8001054:	200006c8 	.word	0x200006c8
 8001058:	200006ca 	.word	0x200006ca
 800105c:	20000490 	.word	0x20000490

08001060 <do10ms>:

void do10ms() {
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
	if (IS10MS) {
 8001064:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <do10ms+0x80>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d034      	beq.n	80010dc <do10ms+0x7c>
		IS10MS = FALSE;
 8001072:	4a1b      	ldr	r2, [pc, #108]	@ (80010e0 <do10ms+0x80>)
 8001074:	7813      	ldrb	r3, [r2, #0]
 8001076:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800107a:	7013      	strb	r3, [r2, #0]
		tmo100ms--;
 800107c:	4b19      	ldr	r3, [pc, #100]	@ (80010e4 <do10ms+0x84>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	3b01      	subs	r3, #1
 8001082:	b2da      	uxtb	r2, r3
 8001084:	4b17      	ldr	r3, [pc, #92]	@ (80010e4 <do10ms+0x84>)
 8001086:	701a      	strb	r2, [r3, #0]
		tmo20ms--;
 8001088:	4b17      	ldr	r3, [pc, #92]	@ (80010e8 <do10ms+0x88>)
 800108a:	781b      	ldrb	r3, [r3, #0]
 800108c:	3b01      	subs	r3, #1
 800108e:	b2da      	uxtb	r2, r3
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <do10ms+0x88>)
 8001092:	701a      	strb	r2, [r3, #0]
		if (!tmo20ms) {
 8001094:	4b14      	ldr	r3, [pc, #80]	@ (80010e8 <do10ms+0x88>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d10c      	bne.n	80010b6 <do10ms+0x56>
			tmo20ms = 2;
 800109c:	4b12      	ldr	r3, [pc, #72]	@ (80010e8 <do10ms+0x88>)
 800109e:	2202      	movs	r2, #2
 80010a0:	701a      	strb	r2, [r3, #0]
			IS20MS = TRUE;
 80010a2:	4a0f      	ldr	r2, [pc, #60]	@ (80010e0 <do10ms+0x80>)
 80010a4:	7813      	ldrb	r3, [r2, #0]
 80010a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80010aa:	7013      	strb	r3, [r2, #0]
			ONMPU = TRUE;
 80010ac:	4a0c      	ldr	r2, [pc, #48]	@ (80010e0 <do10ms+0x80>)
 80010ae:	7813      	ldrb	r3, [r2, #0]
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	7013      	strb	r3, [r2, #0]
		}
		if (!tmo100ms) {
 80010b6:	4b0b      	ldr	r3, [pc, #44]	@ (80010e4 <do10ms+0x84>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d10e      	bne.n	80010dc <do10ms+0x7c>
			tmo100ms = 10;
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <do10ms+0x84>)
 80010c0:	220a      	movs	r2, #10
 80010c2:	701a      	strb	r2, [r3, #0]
			IS100MS = TRUE;
 80010c4:	4a06      	ldr	r2, [pc, #24]	@ (80010e0 <do10ms+0x80>)
 80010c6:	7813      	ldrb	r3, [r2, #0]
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	7013      	strb	r3, [r2, #0]
			ONDISPLAY = TRUE;
 80010ce:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <do10ms+0x80>)
 80010d0:	7813      	ldrb	r3, [r2, #0]
 80010d2:	f043 0308 	orr.w	r3, r3, #8
 80010d6:	7013      	strb	r3, [r2, #0]
			heartBeatTask();
 80010d8:	f000 f808 	bl	80010ec <heartBeatTask>
		}
	}
}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200006bc 	.word	0x200006bc
 80010e4:	20000028 	.word	0x20000028
 80010e8:	20000029 	.word	0x20000029

080010ec <heartBeatTask>:
	if(IS100MS){
		IS100MS=FALSE;
	}
}

void heartBeatTask() {
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
	static uint8_t times = 0;

	if (~heartBeatMask[0] & (1 << times)) //Add index
 80010f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001130 <heartBeatTask+0x44>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	43db      	mvns	r3, r3
 80010f6:	4a0f      	ldr	r2, [pc, #60]	@ (8001134 <heartBeatTask+0x48>)
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4611      	mov	r1, r2
 80010fc:	2201      	movs	r2, #1
 80010fe:	408a      	lsls	r2, r1
 8001100:	4013      	ands	r3, r2
 8001102:	2b00      	cmp	r3, #0
 8001104:	d004      	beq.n	8001110 <heartBeatTask+0x24>
		HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // Blink LED
 8001106:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800110a:	480b      	ldr	r0, [pc, #44]	@ (8001138 <heartBeatTask+0x4c>)
 800110c:	f003 fef3 	bl	8004ef6 <HAL_GPIO_TogglePin>

	times++;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <heartBeatTask+0x48>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	3301      	adds	r3, #1
 8001116:	b2da      	uxtb	r2, r3
 8001118:	4b06      	ldr	r3, [pc, #24]	@ (8001134 <heartBeatTask+0x48>)
 800111a:	701a      	strb	r2, [r3, #0]
	times &= 31;
 800111c:	4b05      	ldr	r3, [pc, #20]	@ (8001134 <heartBeatTask+0x48>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	f003 031f 	and.w	r3, r3, #31
 8001124:	b2da      	uxtb	r2, r3
 8001126:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <heartBeatTask+0x48>)
 8001128:	701a      	strb	r2, [r3, #0]
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000000 	.word	0x20000000
 8001134:	200006cc 	.word	0x200006cc
 8001138:	40020800 	.word	0x40020800

0800113c <displayMemWrite>:

void displayMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 800113c:	b580      	push	{r7, lr}
 800113e:	b086      	sub	sp, #24
 8001140:	af04      	add	r7, sp, #16
 8001142:	6039      	str	r1, [r7, #0]
 8001144:	4611      	mov	r1, r2
 8001146:	461a      	mov	r2, r3
 8001148:	4603      	mov	r3, r0
 800114a:	71fb      	strb	r3, [r7, #7]
 800114c:	460b      	mov	r3, r1
 800114e:	71bb      	strb	r3, [r7, #6]
 8001150:	4613      	mov	r3, r2
 8001152:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	b299      	uxth	r1, r3
 8001158:	797b      	ldrb	r3, [r7, #5]
 800115a:	b29a      	uxth	r2, r3
 800115c:	79bb      	ldrb	r3, [r7, #6]
 800115e:	b29b      	uxth	r3, r3
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	9002      	str	r0, [sp, #8]
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	2301      	movs	r3, #1
 800116e:	4803      	ldr	r0, [pc, #12]	@ (800117c <displayMemWrite+0x40>)
 8001170:	f004 f836 	bl	80051e0 <HAL_I2C_Mem_Write>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000248 	.word	0x20000248

08001180 <displayMemWriteDMA>:

void displayMemWriteDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af02      	add	r7, sp, #8
 8001186:	6039      	str	r1, [r7, #0]
 8001188:	4611      	mov	r1, r2
 800118a:	461a      	mov	r2, r3
 800118c:	4603      	mov	r3, r0
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	460b      	mov	r3, r1
 8001192:	71bb      	strb	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write_DMA(&hi2c1, address , type, 1, data, size);
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	b299      	uxth	r1, r3
 800119c:	797b      	ldrb	r3, [r7, #5]
 800119e:	b29a      	uxth	r2, r3
 80011a0:	79bb      	ldrb	r3, [r7, #6]
 80011a2:	b29b      	uxth	r3, r3
 80011a4:	9301      	str	r3, [sp, #4]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	2301      	movs	r3, #1
 80011ac:	4803      	ldr	r0, [pc, #12]	@ (80011bc <displayMemWriteDMA+0x3c>)
 80011ae:	f004 f911 	bl	80053d4 <HAL_I2C_Mem_Write_DMA>
}
 80011b2:	bf00      	nop
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000248 	.word	0x20000248

080011c0 <mpuMemWrite>:

void mpuMemWrite(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af04      	add	r7, sp, #16
 80011c6:	6039      	str	r1, [r7, #0]
 80011c8:	4611      	mov	r1, r2
 80011ca:	461a      	mov	r2, r3
 80011cc:	4603      	mov	r3, r0
 80011ce:	71fb      	strb	r3, [r7, #7]
 80011d0:	460b      	mov	r3, r1
 80011d2:	71bb      	strb	r3, [r7, #6]
 80011d4:	4613      	mov	r3, r2
 80011d6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Write(&hi2c1, address , type, 1, data, size, HAL_MAX_DELAY);
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	b299      	uxth	r1, r3
 80011dc:	797b      	ldrb	r3, [r7, #5]
 80011de:	b29a      	uxth	r2, r3
 80011e0:	79bb      	ldrb	r3, [r7, #6]
 80011e2:	b29b      	uxth	r3, r3
 80011e4:	f04f 30ff 	mov.w	r0, #4294967295
 80011e8:	9002      	str	r0, [sp, #8]
 80011ea:	9301      	str	r3, [sp, #4]
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	9300      	str	r3, [sp, #0]
 80011f0:	2301      	movs	r3, #1
 80011f2:	4803      	ldr	r0, [pc, #12]	@ (8001200 <mpuMemWrite+0x40>)
 80011f4:	f003 fff4 	bl	80051e0 <HAL_I2C_Mem_Write>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	20000248 	.word	0x20000248

08001204 <mpuMemReadDMA>:

void mpuMemReadDMA(uint8_t address, uint8_t *data, uint8_t size, uint8_t type){
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af02      	add	r7, sp, #8
 800120a:	6039      	str	r1, [r7, #0]
 800120c:	4611      	mov	r1, r2
 800120e:	461a      	mov	r2, r3
 8001210:	4603      	mov	r3, r0
 8001212:	71fb      	strb	r3, [r7, #7]
 8001214:	460b      	mov	r3, r1
 8001216:	71bb      	strb	r3, [r7, #6]
 8001218:	4613      	mov	r3, r2
 800121a:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Mem_Read_DMA(&hi2c1, address , type, 1, data, size);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	b299      	uxth	r1, r3
 8001220:	797b      	ldrb	r3, [r7, #5]
 8001222:	b29a      	uxth	r2, r3
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	b29b      	uxth	r3, r3
 8001228:	9301      	str	r3, [sp, #4]
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2301      	movs	r3, #1
 8001230:	4803      	ldr	r0, [pc, #12]	@ (8001240 <mpuMemReadDMA+0x3c>)
 8001232:	f004 fa2d 	bl	8005690 <HAL_I2C_Mem_Read_DMA>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000248 	.word	0x20000248

08001244 <displayTask>:

void displayTask() {
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af02      	add	r7, sp, #8
	char data[8];
	uint8_t y = 0, x = 2;
 800124a:	2300      	movs	r3, #0
 800124c:	73fb      	strb	r3, [r7, #15]
 800124e:	2302      	movs	r3, #2
 8001250:	73bb      	strb	r3, [r7, #14]
	static uint8_t init = FALSE;
	static uint8_t wait = FALSE;
	static uint8_t over = TRUE;

	if(!over){
 8001252:	4b0c      	ldr	r3, [pc, #48]	@ (8001284 <displayTask+0x40>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d104      	bne.n	8001264 <displayTask+0x20>
		ONMPU=FALSE;
 800125a:	4a0b      	ldr	r2, [pc, #44]	@ (8001288 <displayTask+0x44>)
 800125c:	7813      	ldrb	r3, [r2, #0]
 800125e:	f023 0302 	bic.w	r3, r3, #2
 8001262:	7013      	strb	r3, [r2, #0]
	}

	if (ONMPU) { //Espera de la pantalla
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <displayTask+0x44>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	f003 0302 	and.w	r3, r3, #2
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d00e      	beq.n	8001290 <displayTask+0x4c>
		wait = TRUE;
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <displayTask+0x48>)
 8001274:	2201      	movs	r2, #1
 8001276:	701a      	strb	r2, [r3, #0]
		ONDISPLAY = FALSE;
 8001278:	4a03      	ldr	r2, [pc, #12]	@ (8001288 <displayTask+0x44>)
 800127a:	7813      	ldrb	r3, [r2, #0]
 800127c:	f023 0308 	bic.w	r3, r3, #8
 8001280:	7013      	strb	r3, [r2, #0]
 8001282:	e1eb      	b.n	800165c <displayTask+0x418>
 8001284:	2000002a 	.word	0x2000002a
 8001288:	200006bc 	.word	0x200006bc
 800128c:	200006cd 	.word	0x200006cd
		return;
	}

	if (wait && !ONMPU) { //MPU terminó, entra pantalla
 8001290:	4bbf      	ldr	r3, [pc, #764]	@ (8001590 <displayTask+0x34c>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d011      	beq.n	80012bc <displayTask+0x78>
 8001298:	4bbe      	ldr	r3, [pc, #760]	@ (8001594 <displayTask+0x350>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	f003 0302 	and.w	r3, r3, #2
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d10a      	bne.n	80012bc <displayTask+0x78>
		wait = FALSE;
 80012a6:	4bba      	ldr	r3, [pc, #744]	@ (8001590 <displayTask+0x34c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
		init = TRUE;
 80012ac:	4bba      	ldr	r3, [pc, #744]	@ (8001598 <displayTask+0x354>)
 80012ae:	2201      	movs	r2, #1
 80012b0:	701a      	strb	r2, [r3, #0]
		ONDISPLAY = TRUE;
 80012b2:	4ab8      	ldr	r2, [pc, #736]	@ (8001594 <displayTask+0x350>)
 80012b4:	7813      	ldrb	r3, [r2, #0]
 80012b6:	f043 0308 	orr.w	r3, r3, #8
 80012ba:	7013      	strb	r3, [r2, #0]
	}

	//OVERDISPLAY = FALSE;
	if(ONDISPLAY){
 80012bc:	4bb5      	ldr	r3, [pc, #724]	@ (8001594 <displayTask+0x350>)
 80012be:	781b      	ldrb	r3, [r3, #0]
 80012c0:	f003 0308 	and.w	r3, r3, #8
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	f000 81c8 	beq.w	800165c <displayTask+0x418>
	if (init) {
 80012cc:	4bb2      	ldr	r3, [pc, #712]	@ (8001598 <displayTask+0x354>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 81b3 	beq.w	800163c <displayTask+0x3f8>
		init = FALSE;
 80012d6:	4bb0      	ldr	r3, [pc, #704]	@ (8001598 <displayTask+0x354>)
 80012d8:	2200      	movs	r2, #0
 80012da:	701a      	strb	r2, [r3, #0]
		over = FALSE;
 80012dc:	4baf      	ldr	r3, [pc, #700]	@ (800159c <displayTask+0x358>)
 80012de:	2200      	movs	r2, #0
 80012e0:	701a      	strb	r2, [r3, #0]
		ssd1306_Fill(White);
 80012e2:	2001      	movs	r0, #1
 80012e4:	f001 f99e 	bl	8002624 <ssd1306_Fill>

		ssd1306_FillRectangle(30, 0, 32, 64, Black);
 80012e8:	2300      	movs	r3, #0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2340      	movs	r3, #64	@ 0x40
 80012ee:	2220      	movs	r2, #32
 80012f0:	2100      	movs	r1, #0
 80012f2:	201e      	movs	r0, #30
 80012f4:	f001 fbc6 	bl	8002a84 <ssd1306_FillRectangle>

		ssd1306_FillRectangle(0, 20, 128, 22, Black);
 80012f8:	2300      	movs	r3, #0
 80012fa:	9300      	str	r3, [sp, #0]
 80012fc:	2316      	movs	r3, #22
 80012fe:	2280      	movs	r2, #128	@ 0x80
 8001300:	2114      	movs	r1, #20
 8001302:	2000      	movs	r0, #0
 8001304:	f001 fbbe 	bl	8002a84 <ssd1306_FillRectangle>

		ssd1306_FillRectangle(80,0, 82, 64, Black);
 8001308:	2300      	movs	r3, #0
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	2340      	movs	r3, #64	@ 0x40
 800130e:	2252      	movs	r2, #82	@ 0x52
 8001310:	2100      	movs	r1, #0
 8001312:	2050      	movs	r0, #80	@ 0x50
 8001314:	f001 fbb6 	bl	8002a84 <ssd1306_FillRectangle>

		x = SSD1306_SNDCOL;
 8001318:	2328      	movs	r3, #40	@ 0x28
 800131a:	73bb      	strb	r3, [r7, #14]
		y = 0;
 800131c:	2300      	movs	r3, #0
 800131e:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(x, y);
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	4611      	mov	r1, r2
 8001326:	4618      	mov	r0, r3
 8001328:	f001 fb28 	bl	800297c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "ACC");
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	4a9c      	ldr	r2, [pc, #624]	@ (80015a0 <displayTask+0x35c>)
 8001330:	2108      	movs	r1, #8
 8001332:	4618      	mov	r0, r3
 8001334:	f00d fb92 	bl	800ea5c <sniprintf>
		ssd1306_WriteString(data, Font_11x18, Black);
 8001338:	4b9a      	ldr	r3, [pc, #616]	@ (80015a4 <displayTask+0x360>)
 800133a:	1d38      	adds	r0, r7, #4
 800133c:	2200      	movs	r2, #0
 800133e:	9200      	str	r2, [sp, #0]
 8001340:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001342:	f001 faf5 	bl	8002930 <ssd1306_WriteString>
		x = SSD1306_TRDCOL;
 8001346:	2355      	movs	r3, #85	@ 0x55
 8001348:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 800134a:	7bfa      	ldrb	r2, [r7, #15]
 800134c:	7bbb      	ldrb	r3, [r7, #14]
 800134e:	4611      	mov	r1, r2
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fb13 	bl	800297c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "GYR");
 8001356:	1d3b      	adds	r3, r7, #4
 8001358:	4a93      	ldr	r2, [pc, #588]	@ (80015a8 <displayTask+0x364>)
 800135a:	2108      	movs	r1, #8
 800135c:	4618      	mov	r0, r3
 800135e:	f00d fb7d 	bl	800ea5c <sniprintf>
		ssd1306_WriteString(data, Font_11x18, Black);
 8001362:	4b90      	ldr	r3, [pc, #576]	@ (80015a4 <displayTask+0x360>)
 8001364:	1d38      	adds	r0, r7, #4
 8001366:	2200      	movs	r2, #0
 8001368:	9200      	str	r2, [sp, #0]
 800136a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800136c:	f001 fae0 	bl	8002930 <ssd1306_WriteString>

		x = SSD1306_SNDCOL;
 8001370:	2328      	movs	r3, #40	@ 0x28
 8001372:	73bb      	strb	r3, [r7, #14]
		y+=25;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	3319      	adds	r3, #25
 8001378:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(x, y);
 800137a:	7bfa      	ldrb	r2, [r7, #15]
 800137c:	7bbb      	ldrb	r3, [r7, #14]
 800137e:	4611      	mov	r1, r2
 8001380:	4618      	mov	r0, r3
 8001382:	f001 fafb 	bl	800297c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", ax);
 8001386:	4b89      	ldr	r3, [pc, #548]	@ (80015ac <displayTask+0x368>)
 8001388:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138c:	1d38      	adds	r0, r7, #4
 800138e:	4a88      	ldr	r2, [pc, #544]	@ (80015b0 <displayTask+0x36c>)
 8001390:	2108      	movs	r1, #8
 8001392:	f00d fb63 	bl	800ea5c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 8001396:	4b87      	ldr	r3, [pc, #540]	@ (80015b4 <displayTask+0x370>)
 8001398:	1d38      	adds	r0, r7, #4
 800139a:	2200      	movs	r2, #0
 800139c:	9200      	str	r2, [sp, #0]
 800139e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013a0:	f001 fac6 	bl	8002930 <ssd1306_WriteString>
		x = SSD1306_TRDCOL;
 80013a4:	2355      	movs	r3, #85	@ 0x55
 80013a6:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	7bbb      	ldrb	r3, [r7, #14]
 80013ac:	4611      	mov	r1, r2
 80013ae:	4618      	mov	r0, r3
 80013b0:	f001 fae4 	bl	800297c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", gx);
 80013b4:	4b80      	ldr	r3, [pc, #512]	@ (80015b8 <displayTask+0x374>)
 80013b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ba:	1d38      	adds	r0, r7, #4
 80013bc:	4a7c      	ldr	r2, [pc, #496]	@ (80015b0 <displayTask+0x36c>)
 80013be:	2108      	movs	r1, #8
 80013c0:	f00d fb4c 	bl	800ea5c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 80013c4:	4b7b      	ldr	r3, [pc, #492]	@ (80015b4 <displayTask+0x370>)
 80013c6:	1d38      	adds	r0, r7, #4
 80013c8:	2200      	movs	r2, #0
 80013ca:	9200      	str	r2, [sp, #0]
 80013cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013ce:	f001 faaf 	bl	8002930 <ssd1306_WriteString>

		x = SSD1306_SNDCOL;
 80013d2:	2328      	movs	r3, #40	@ 0x28
 80013d4:	73bb      	strb	r3, [r7, #14]
		y+=12;
 80013d6:	7bfb      	ldrb	r3, [r7, #15]
 80013d8:	330c      	adds	r3, #12
 80013da:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(x, y);
 80013dc:	7bfa      	ldrb	r2, [r7, #15]
 80013de:	7bbb      	ldrb	r3, [r7, #14]
 80013e0:	4611      	mov	r1, r2
 80013e2:	4618      	mov	r0, r3
 80013e4:	f001 faca 	bl	800297c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", ay);
 80013e8:	4b74      	ldr	r3, [pc, #464]	@ (80015bc <displayTask+0x378>)
 80013ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ee:	1d38      	adds	r0, r7, #4
 80013f0:	4a6f      	ldr	r2, [pc, #444]	@ (80015b0 <displayTask+0x36c>)
 80013f2:	2108      	movs	r1, #8
 80013f4:	f00d fb32 	bl	800ea5c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 80013f8:	4b6e      	ldr	r3, [pc, #440]	@ (80015b4 <displayTask+0x370>)
 80013fa:	1d38      	adds	r0, r7, #4
 80013fc:	2200      	movs	r2, #0
 80013fe:	9200      	str	r2, [sp, #0]
 8001400:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001402:	f001 fa95 	bl	8002930 <ssd1306_WriteString>
		x = SSD1306_TRDCOL;
 8001406:	2355      	movs	r3, #85	@ 0x55
 8001408:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 800140a:	7bfa      	ldrb	r2, [r7, #15]
 800140c:	7bbb      	ldrb	r3, [r7, #14]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f001 fab3 	bl	800297c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", gy);
 8001416:	4b6a      	ldr	r3, [pc, #424]	@ (80015c0 <displayTask+0x37c>)
 8001418:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141c:	1d38      	adds	r0, r7, #4
 800141e:	4a64      	ldr	r2, [pc, #400]	@ (80015b0 <displayTask+0x36c>)
 8001420:	2108      	movs	r1, #8
 8001422:	f00d fb1b 	bl	800ea5c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 8001426:	4b63      	ldr	r3, [pc, #396]	@ (80015b4 <displayTask+0x370>)
 8001428:	1d38      	adds	r0, r7, #4
 800142a:	2200      	movs	r2, #0
 800142c:	9200      	str	r2, [sp, #0]
 800142e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001430:	f001 fa7e 	bl	8002930 <ssd1306_WriteString>

		x = SSD1306_SNDCOL;
 8001434:	2328      	movs	r3, #40	@ 0x28
 8001436:	73bb      	strb	r3, [r7, #14]
		y+=12;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	330c      	adds	r3, #12
 800143c:	73fb      	strb	r3, [r7, #15]
		ssd1306_SetCursor(x, y);
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	7bbb      	ldrb	r3, [r7, #14]
 8001442:	4611      	mov	r1, r2
 8001444:	4618      	mov	r0, r3
 8001446:	f001 fa99 	bl	800297c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", az);
 800144a:	4b5e      	ldr	r3, [pc, #376]	@ (80015c4 <displayTask+0x380>)
 800144c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001450:	1d38      	adds	r0, r7, #4
 8001452:	4a57      	ldr	r2, [pc, #348]	@ (80015b0 <displayTask+0x36c>)
 8001454:	2108      	movs	r1, #8
 8001456:	f00d fb01 	bl	800ea5c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 800145a:	4b56      	ldr	r3, [pc, #344]	@ (80015b4 <displayTask+0x370>)
 800145c:	1d38      	adds	r0, r7, #4
 800145e:	2200      	movs	r2, #0
 8001460:	9200      	str	r2, [sp, #0]
 8001462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001464:	f001 fa64 	bl	8002930 <ssd1306_WriteString>
		x = SSD1306_TRDCOL;
 8001468:	2355      	movs	r3, #85	@ 0x55
 800146a:	73bb      	strb	r3, [r7, #14]
		ssd1306_SetCursor(x, y);
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	7bbb      	ldrb	r3, [r7, #14]
 8001470:	4611      	mov	r1, r2
 8001472:	4618      	mov	r0, r3
 8001474:	f001 fa82 	bl	800297c <ssd1306_SetCursor>
		snprintf(data, sizeof(data), "%d", gz);
 8001478:	4b53      	ldr	r3, [pc, #332]	@ (80015c8 <displayTask+0x384>)
 800147a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800147e:	1d38      	adds	r0, r7, #4
 8001480:	4a4b      	ldr	r2, [pc, #300]	@ (80015b0 <displayTask+0x36c>)
 8001482:	2108      	movs	r1, #8
 8001484:	f00d faea 	bl	800ea5c <sniprintf>
		ssd1306_WriteString(data, Font_7x10, Black);
 8001488:	4b4a      	ldr	r3, [pc, #296]	@ (80015b4 <displayTask+0x370>)
 800148a:	1d38      	adds	r0, r7, #4
 800148c:	2200      	movs	r2, #0
 800148e:	9200      	str	r2, [sp, #0]
 8001490:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001492:	f001 fa4d 	bl	8002930 <ssd1306_WriteString>

		ssd1306_Line(3, 60, 3, (SSD1306_MINADC - (adcDataTx[0] / 4090) * SSD1306_MAXADC), Black);
 8001496:	4b4d      	ldr	r3, [pc, #308]	@ (80015cc <displayTask+0x388>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	4a4d      	ldr	r2, [pc, #308]	@ (80015d0 <displayTask+0x38c>)
 800149c:	fba2 2303 	umull	r2, r3, r2, r3
 80014a0:	0adb      	lsrs	r3, r3, #11
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	011b      	lsls	r3, r3, #4
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	333c      	adds	r3, #60	@ 0x3c
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2200      	movs	r2, #0
 80014b6:	9200      	str	r2, [sp, #0]
 80014b8:	2203      	movs	r2, #3
 80014ba:	213c      	movs	r1, #60	@ 0x3c
 80014bc:	2003      	movs	r0, #3
 80014be:	f001 fa75 	bl	80029ac <ssd1306_Line>
		ssd1306_Line(6, 60, 6, (SSD1306_MINADC - (adcDataTx[1] / 4090) * SSD1306_MAXADC), Black);
 80014c2:	4b42      	ldr	r3, [pc, #264]	@ (80015cc <displayTask+0x388>)
 80014c4:	885b      	ldrh	r3, [r3, #2]
 80014c6:	4a42      	ldr	r2, [pc, #264]	@ (80015d0 <displayTask+0x38c>)
 80014c8:	fba2 2303 	umull	r2, r3, r2, r3
 80014cc:	0adb      	lsrs	r3, r3, #11
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	461a      	mov	r2, r3
 80014d4:	011b      	lsls	r3, r3, #4
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	333c      	adds	r3, #60	@ 0x3c
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2200      	movs	r2, #0
 80014e2:	9200      	str	r2, [sp, #0]
 80014e4:	2206      	movs	r2, #6
 80014e6:	213c      	movs	r1, #60	@ 0x3c
 80014e8:	2006      	movs	r0, #6
 80014ea:	f001 fa5f 	bl	80029ac <ssd1306_Line>
		ssd1306_Line(9, 60, 9, (SSD1306_MINADC - (adcDataTx[2] / 4090) * SSD1306_MAXADC), Black);
 80014ee:	4b37      	ldr	r3, [pc, #220]	@ (80015cc <displayTask+0x388>)
 80014f0:	889b      	ldrh	r3, [r3, #4]
 80014f2:	4a37      	ldr	r2, [pc, #220]	@ (80015d0 <displayTask+0x38c>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	0adb      	lsrs	r3, r3, #11
 80014fa:	b29b      	uxth	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	461a      	mov	r2, r3
 8001500:	011b      	lsls	r3, r3, #4
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	b2db      	uxtb	r3, r3
 8001508:	333c      	adds	r3, #60	@ 0x3c
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2200      	movs	r2, #0
 800150e:	9200      	str	r2, [sp, #0]
 8001510:	2209      	movs	r2, #9
 8001512:	213c      	movs	r1, #60	@ 0x3c
 8001514:	2009      	movs	r0, #9
 8001516:	f001 fa49 	bl	80029ac <ssd1306_Line>
		ssd1306_Line(12, 60, 12, (SSD1306_MINADC - (adcDataTx[3] / 4090) * SSD1306_MAXADC), Black);
 800151a:	4b2c      	ldr	r3, [pc, #176]	@ (80015cc <displayTask+0x388>)
 800151c:	88db      	ldrh	r3, [r3, #6]
 800151e:	4a2c      	ldr	r2, [pc, #176]	@ (80015d0 <displayTask+0x38c>)
 8001520:	fba2 2303 	umull	r2, r3, r2, r3
 8001524:	0adb      	lsrs	r3, r3, #11
 8001526:	b29b      	uxth	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	461a      	mov	r2, r3
 800152c:	011b      	lsls	r3, r3, #4
 800152e:	1ad3      	subs	r3, r2, r3
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	b2db      	uxtb	r3, r3
 8001534:	333c      	adds	r3, #60	@ 0x3c
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2200      	movs	r2, #0
 800153a:	9200      	str	r2, [sp, #0]
 800153c:	220c      	movs	r2, #12
 800153e:	213c      	movs	r1, #60	@ 0x3c
 8001540:	200c      	movs	r0, #12
 8001542:	f001 fa33 	bl	80029ac <ssd1306_Line>
		ssd1306_Line(15, 60, 15, (SSD1306_MINADC - (adcDataTx[4] / 4090) * SSD1306_MAXADC), Black);
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <displayTask+0x388>)
 8001548:	891b      	ldrh	r3, [r3, #8]
 800154a:	4a21      	ldr	r2, [pc, #132]	@ (80015d0 <displayTask+0x38c>)
 800154c:	fba2 2303 	umull	r2, r3, r2, r3
 8001550:	0adb      	lsrs	r3, r3, #11
 8001552:	b29b      	uxth	r3, r3
 8001554:	b2db      	uxtb	r3, r3
 8001556:	461a      	mov	r2, r3
 8001558:	011b      	lsls	r3, r3, #4
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b2db      	uxtb	r3, r3
 8001560:	333c      	adds	r3, #60	@ 0x3c
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2200      	movs	r2, #0
 8001566:	9200      	str	r2, [sp, #0]
 8001568:	220f      	movs	r2, #15
 800156a:	213c      	movs	r1, #60	@ 0x3c
 800156c:	200f      	movs	r0, #15
 800156e:	f001 fa1d 	bl	80029ac <ssd1306_Line>
		ssd1306_Line(18, 60, 18, (SSD1306_MINADC - (adcDataTx[5] / 4090) * SSD1306_MAXADC), Black);
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <displayTask+0x388>)
 8001574:	895b      	ldrh	r3, [r3, #10]
 8001576:	4a16      	ldr	r2, [pc, #88]	@ (80015d0 <displayTask+0x38c>)
 8001578:	fba2 2303 	umull	r2, r3, r2, r3
 800157c:	0adb      	lsrs	r3, r3, #11
 800157e:	b29b      	uxth	r3, r3
 8001580:	b2db      	uxtb	r3, r3
 8001582:	461a      	mov	r2, r3
 8001584:	011b      	lsls	r3, r3, #4
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	b2db      	uxtb	r3, r3
 800158c:	333c      	adds	r3, #60	@ 0x3c
 800158e:	e021      	b.n	80015d4 <displayTask+0x390>
 8001590:	200006cd 	.word	0x200006cd
 8001594:	200006bc 	.word	0x200006bc
 8001598:	200006ce 	.word	0x200006ce
 800159c:	2000002a 	.word	0x2000002a
 80015a0:	0800f3dc 	.word	0x0800f3dc
 80015a4:	08010904 	.word	0x08010904
 80015a8:	0800f3e0 	.word	0x0800f3e0
 80015ac:	200006c0 	.word	0x200006c0
 80015b0:	0800f3e4 	.word	0x0800f3e4
 80015b4:	080108f8 	.word	0x080108f8
 80015b8:	200006c6 	.word	0x200006c6
 80015bc:	200006c2 	.word	0x200006c2
 80015c0:	200006c8 	.word	0x200006c8
 80015c4:	200006c4 	.word	0x200006c4
 80015c8:	200006ca 	.word	0x200006ca
 80015cc:	20000490 	.word	0x20000490
 80015d0:	80301207 	.word	0x80301207
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	2200      	movs	r2, #0
 80015d8:	9200      	str	r2, [sp, #0]
 80015da:	2212      	movs	r2, #18
 80015dc:	213c      	movs	r1, #60	@ 0x3c
 80015de:	2012      	movs	r0, #18
 80015e0:	f001 f9e4 	bl	80029ac <ssd1306_Line>
		ssd1306_Line(21, 60, 21, (SSD1306_MINADC - (adcDataTx[6] / 4090) * SSD1306_MAXADC), Black);
 80015e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001664 <displayTask+0x420>)
 80015e6:	899b      	ldrh	r3, [r3, #12]
 80015e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001668 <displayTask+0x424>)
 80015ea:	fba2 2303 	umull	r2, r3, r2, r3
 80015ee:	0adb      	lsrs	r3, r3, #11
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	011b      	lsls	r3, r3, #4
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	005b      	lsls	r3, r3, #1
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	333c      	adds	r3, #60	@ 0x3c
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2200      	movs	r2, #0
 8001604:	9200      	str	r2, [sp, #0]
 8001606:	2215      	movs	r2, #21
 8001608:	213c      	movs	r1, #60	@ 0x3c
 800160a:	2015      	movs	r0, #21
 800160c:	f001 f9ce 	bl	80029ac <ssd1306_Line>
		ssd1306_Line(24, 60, 24, (SSD1306_MINADC - (adcDataTx[7] / 4090) * SSD1306_MAXADC), Black);
 8001610:	4b14      	ldr	r3, [pc, #80]	@ (8001664 <displayTask+0x420>)
 8001612:	89db      	ldrh	r3, [r3, #14]
 8001614:	4a14      	ldr	r2, [pc, #80]	@ (8001668 <displayTask+0x424>)
 8001616:	fba2 2303 	umull	r2, r3, r2, r3
 800161a:	0adb      	lsrs	r3, r3, #11
 800161c:	b29b      	uxth	r3, r3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	461a      	mov	r2, r3
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	b2db      	uxtb	r3, r3
 800162a:	333c      	adds	r3, #60	@ 0x3c
 800162c:	b2db      	uxtb	r3, r3
 800162e:	2200      	movs	r2, #0
 8001630:	9200      	str	r2, [sp, #0]
 8001632:	2218      	movs	r2, #24
 8001634:	213c      	movs	r1, #60	@ 0x3c
 8001636:	2018      	movs	r0, #24
 8001638:	f001 f9b8 	bl	80029ac <ssd1306_Line>
	}

	if (ssd1306_UpdateScreenDMA()) {
 800163c:	f001 f832 	bl	80026a4 <ssd1306_UpdateScreenDMA>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d00a      	beq.n	800165c <displayTask+0x418>
		ONDISPLAY = FALSE;
 8001646:	4a09      	ldr	r2, [pc, #36]	@ (800166c <displayTask+0x428>)
 8001648:	7813      	ldrb	r3, [r2, #0]
 800164a:	f023 0308 	bic.w	r3, r3, #8
 800164e:	7013      	strb	r3, [r2, #0]
		over = TRUE;
 8001650:	4b07      	ldr	r3, [pc, #28]	@ (8001670 <displayTask+0x42c>)
 8001652:	2201      	movs	r2, #1
 8001654:	701a      	strb	r2, [r3, #0]
		init = TRUE;
 8001656:	4b07      	ldr	r3, [pc, #28]	@ (8001674 <displayTask+0x430>)
 8001658:	2201      	movs	r2, #1
 800165a:	701a      	strb	r2, [r3, #0]
	}
	}
}
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000490 	.word	0x20000490
 8001668:	80301207 	.word	0x80301207
 800166c:	200006bc 	.word	0x200006bc
 8001670:	2000002a 	.word	0x2000002a
 8001674:	200006ce 	.word	0x200006ce

08001678 <mpuTask>:


void mpuTask() {
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af02      	add	r7, sp, #8

	if (ONMPU) {
 800167e:	4b0f      	ldr	r3, [pc, #60]	@ (80016bc <mpuTask+0x44>)
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	b2db      	uxtb	r3, r3
 8001688:	2b00      	cmp	r3, #0
 800168a:	d013      	beq.n	80016b4 <mpuTask+0x3c>
		if (mpu6050_Read()) {
 800168c:	f000 fce0 	bl	8002050 <mpu6050_Read>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00e      	beq.n	80016b4 <mpuTask+0x3c>
			ONMPU = FALSE;
 8001696:	4a09      	ldr	r2, [pc, #36]	@ (80016bc <mpuTask+0x44>)
 8001698:	7813      	ldrb	r3, [r2, #0]
 800169a:	f023 0302 	bic.w	r3, r3, #2
 800169e:	7013      	strb	r3, [r2, #0]
			mpu6050_GetData(&ax, &ay, &az, &gx, &gy, &gz);
 80016a0:	4b07      	ldr	r3, [pc, #28]	@ (80016c0 <mpuTask+0x48>)
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	4b07      	ldr	r3, [pc, #28]	@ (80016c4 <mpuTask+0x4c>)
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	4b07      	ldr	r3, [pc, #28]	@ (80016c8 <mpuTask+0x50>)
 80016aa:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <mpuTask+0x54>)
 80016ac:	4908      	ldr	r1, [pc, #32]	@ (80016d0 <mpuTask+0x58>)
 80016ae:	4809      	ldr	r0, [pc, #36]	@ (80016d4 <mpuTask+0x5c>)
 80016b0:	f000 fe80 	bl	80023b4 <mpu6050_GetData>
		}
	}

}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200006bc 	.word	0x200006bc
 80016c0:	200006ca 	.word	0x200006ca
 80016c4:	200006c8 	.word	0x200006c8
 80016c8:	200006c6 	.word	0x200006c6
 80016cc:	200006c4 	.word	0x200006c4
 80016d0:	200006c2 	.word	0x200006c2
 80016d4:	200006c0 	.word	0x200006c0

080016d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016dc:	f001 fffa 	bl	80036d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016e0:	f000 f878 	bl	80017d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016e4:	f000 fbda 	bl	8001e9c <MX_GPIO_Init>
  MX_DMA_Init();
 80016e8:	f000 fb9a 	bl	8001e20 <MX_DMA_Init>
  MX_ADC1_Init();
 80016ec:	f000 f8da 	bl	80018a4 <MX_ADC1_Init>
  MX_I2C1_Init();
 80016f0:	f000 f98c 	bl	8001a0c <MX_I2C1_Init>
  MX_TIM1_Init();
 80016f4:	f000 f9b8 	bl	8001a68 <MX_TIM1_Init>
  MX_USB_DEVICE_Init();
 80016f8:	f00c fc34 	bl	800df64 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 80016fc:	f000 fa1a 	bl	8001b34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001700:	f000 fa7c 	bl	8001bfc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001704:	f000 fb28 	bl	8001d58 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

	CDC_Attach_Rx(USBRxData); //Attach a la función que tenia en el .C
 8001708:	4821      	ldr	r0, [pc, #132]	@ (8001790 <main+0xb8>)
 800170a:	f00c fd7d 	bl	800e208 <CDC_Attach_Rx>

	HAL_TIM_Base_Start_IT(&htim1);
 800170e:	4821      	ldr	r0, [pc, #132]	@ (8001794 <main+0xbc>)
 8001710:	f008 f98a 	bl	8009a28 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim2);
 8001714:	4820      	ldr	r0, [pc, #128]	@ (8001798 <main+0xc0>)
 8001716:	f008 f987 	bl	8009a28 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800171a:	4820      	ldr	r0, [pc, #128]	@ (800179c <main+0xc4>)
 800171c:	f008 f984 	bl	8009a28 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim4);
 8001720:	481f      	ldr	r0, [pc, #124]	@ (80017a0 <main+0xc8>)
 8001722:	f008 f981 	bl	8009a28 <HAL_TIM_Base_Start_IT>

	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET); //Apagamos el LED
 8001726:	2201      	movs	r2, #1
 8001728:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800172c:	481d      	ldr	r0, [pc, #116]	@ (80017a4 <main+0xcc>)
 800172e:	f003 fbc9 	bl	8004ec4 <HAL_GPIO_WritePin>

	//Display
	ssd1306_ADC_ConfCpltCallback(&ssd1306_TxCplt);
 8001732:	481d      	ldr	r0, [pc, #116]	@ (80017a8 <main+0xd0>)
 8001734:	f000 fefc 	bl	8002530 <ssd1306_ADC_ConfCpltCallback>
	ssd1306_Attach_MemWrite(displayMemWrite);
 8001738:	481c      	ldr	r0, [pc, #112]	@ (80017ac <main+0xd4>)
 800173a:	f000 fee9 	bl	8002510 <ssd1306_Attach_MemWrite>
	ssd1306_Attach_MemWriteDMA(displayMemWriteDMA);
 800173e:	481c      	ldr	r0, [pc, #112]	@ (80017b0 <main+0xd8>)
 8001740:	f000 fed6 	bl	80024f0 <ssd1306_Attach_MemWriteDMA>
	ssd1306_Init();
 8001744:	f000 ff04 	bl	8002550 <ssd1306_Init>

	//mpu6050

	mpu6050_ADC_ConfCpltCallback(&mpu6050_RxCplt);
 8001748:	481a      	ldr	r0, [pc, #104]	@ (80017b4 <main+0xdc>)
 800174a:	f000 fc0d 	bl	8001f68 <mpu6050_ADC_ConfCpltCallback>
	mpu6050_Attach_MemWrite(mpuMemWrite);
 800174e:	481a      	ldr	r0, [pc, #104]	@ (80017b8 <main+0xe0>)
 8001750:	f000 fc1a 	bl	8001f88 <mpu6050_Attach_MemWrite>
	mpu6050_Attach_MemReadDMA(mpuMemReadDMA);
 8001754:	4819      	ldr	r0, [pc, #100]	@ (80017bc <main+0xe4>)
 8001756:	f000 fc27 	bl	8001fa8 <mpu6050_Attach_MemReadDMA>
	MPU6050_Init();
 800175a:	f000 fc5f 	bl	800201c <MPU6050_Init>

	//Inicializacion de protocolo
	unerPrtcl_Init(&USBRx, &USBTx, buffUSBRx, buffUSBTx);
 800175e:	4b18      	ldr	r3, [pc, #96]	@ (80017c0 <main+0xe8>)
 8001760:	4a18      	ldr	r2, [pc, #96]	@ (80017c4 <main+0xec>)
 8001762:	4919      	ldr	r1, [pc, #100]	@ (80017c8 <main+0xf0>)
 8001764:	4819      	ldr	r0, [pc, #100]	@ (80017cc <main+0xf4>)
 8001766:	f001 ff53 	bl	8003610 <unerPrtcl_Init>

	//Variables
	ALLFLAGS = RESET;
 800176a:	4b19      	ldr	r3, [pc, #100]	@ (80017d0 <main+0xf8>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
	OVERDISPLAY = TRUE;
 8001770:	4a17      	ldr	r2, [pc, #92]	@ (80017d0 <main+0xf8>)
 8001772:	7813      	ldrb	r3, [r2, #0]
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	7013      	strb	r3, [r2, #0]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		do10ms();
 800177a:	f7ff fc71 	bl	8001060 <do10ms>
		USBTask();
 800177e:	f7ff fabf 	bl	8000d00 <USBTask>
		displayTask();
 8001782:	f7ff fd5f 	bl	8001244 <displayTask>
		mpuTask();
 8001786:	f7ff ff77 	bl	8001678 <mpuTask>
		do10ms();
 800178a:	bf00      	nop
 800178c:	e7f5      	b.n	800177a <main+0xa2>
 800178e:	bf00      	nop
 8001790:	08000ca5 	.word	0x08000ca5
 8001794:	2000035c 	.word	0x2000035c
 8001798:	200003a4 	.word	0x200003a4
 800179c:	200003ec 	.word	0x200003ec
 80017a0:	20000434 	.word	0x20000434
 80017a4:	40020800 	.word	0x40020800
 80017a8:	200006bd 	.word	0x200006bd
 80017ac:	0800113d 	.word	0x0800113d
 80017b0:	08001181 	.word	0x08001181
 80017b4:	200006be 	.word	0x200006be
 80017b8:	080011c1 	.word	0x080011c1
 80017bc:	08001205 	.word	0x08001205
 80017c0:	200004b8 	.word	0x200004b8
 80017c4:	200005b8 	.word	0x200005b8
 80017c8:	200004a0 	.word	0x200004a0
 80017cc:	200004ac 	.word	0x200004ac
 80017d0:	200006bc 	.word	0x200006bc

080017d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b094      	sub	sp, #80	@ 0x50
 80017d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017da:	f107 0320 	add.w	r3, r7, #32
 80017de:	2230      	movs	r2, #48	@ 0x30
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f00d f970 	bl	800eac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017f8:	2300      	movs	r3, #0
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	4b27      	ldr	r3, [pc, #156]	@ (800189c <SystemClock_Config+0xc8>)
 80017fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001800:	4a26      	ldr	r2, [pc, #152]	@ (800189c <SystemClock_Config+0xc8>)
 8001802:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001806:	6413      	str	r3, [r2, #64]	@ 0x40
 8001808:	4b24      	ldr	r3, [pc, #144]	@ (800189c <SystemClock_Config+0xc8>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001810:	60bb      	str	r3, [r7, #8]
 8001812:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001814:	2300      	movs	r3, #0
 8001816:	607b      	str	r3, [r7, #4]
 8001818:	4b21      	ldr	r3, [pc, #132]	@ (80018a0 <SystemClock_Config+0xcc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a20      	ldr	r2, [pc, #128]	@ (80018a0 <SystemClock_Config+0xcc>)
 800181e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b1e      	ldr	r3, [pc, #120]	@ (80018a0 <SystemClock_Config+0xcc>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001830:	2301      	movs	r3, #1
 8001832:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001834:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800183a:	2302      	movs	r3, #2
 800183c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800183e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001842:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001844:	2319      	movs	r3, #25
 8001846:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001848:	23c0      	movs	r3, #192	@ 0xc0
 800184a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800184c:	2302      	movs	r3, #2
 800184e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001850:	2304      	movs	r3, #4
 8001852:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001854:	f107 0320 	add.w	r3, r7, #32
 8001858:	4618      	mov	r0, r3
 800185a:	f007 fc51 	bl	8009100 <HAL_RCC_OscConfig>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001864:	f000 fb7a 	bl	8001f5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001868:	230f      	movs	r3, #15
 800186a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800186c:	2302      	movs	r3, #2
 800186e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001874:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800187a:	2300      	movs	r3, #0
 800187c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800187e:	f107 030c 	add.w	r3, r7, #12
 8001882:	2103      	movs	r1, #3
 8001884:	4618      	mov	r0, r3
 8001886:	f007 feb3 	bl	80095f0 <HAL_RCC_ClockConfig>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001890:	f000 fb64 	bl	8001f5c <Error_Handler>
  }
}
 8001894:	bf00      	nop
 8001896:	3750      	adds	r7, #80	@ 0x50
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	40007000 	.word	0x40007000

080018a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b084      	sub	sp, #16
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018b6:	4b52      	ldr	r3, [pc, #328]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018b8:	4a52      	ldr	r2, [pc, #328]	@ (8001a04 <MX_ADC1_Init+0x160>)
 80018ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018bc:	4b50      	ldr	r3, [pc, #320]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80018c2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018ca:	4b4d      	ldr	r3, [pc, #308]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80018d0:	4b4b      	ldr	r3, [pc, #300]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018d6:	4b4a      	ldr	r3, [pc, #296]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018de:	4b48      	ldr	r3, [pc, #288]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018e4:	4b46      	ldr	r3, [pc, #280]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018e6:	4a48      	ldr	r2, [pc, #288]	@ (8001a08 <MX_ADC1_Init+0x164>)
 80018e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018ea:	4b45      	ldr	r3, [pc, #276]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 80018f0:	4b43      	ldr	r3, [pc, #268]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018f2:	2208      	movs	r2, #8
 80018f4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80018f6:	4b42      	ldr	r3, [pc, #264]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80018f8:	2201      	movs	r2, #1
 80018fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018fe:	4b40      	ldr	r3, [pc, #256]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 8001900:	2201      	movs	r2, #1
 8001902:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001904:	483e      	ldr	r0, [pc, #248]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 8001906:	f001 ff7b 	bl	8003800 <HAL_ADC_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001910:	f000 fb24 	bl	8001f5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001914:	2300      	movs	r3, #0
 8001916:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001918:	2301      	movs	r3, #1
 800191a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800191c:	2300      	movs	r3, #0
 800191e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001920:	463b      	mov	r3, r7
 8001922:	4619      	mov	r1, r3
 8001924:	4836      	ldr	r0, [pc, #216]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 8001926:	f002 f9d1 	bl	8003ccc <HAL_ADC_ConfigChannel>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d001      	beq.n	8001934 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001930:	f000 fb14 	bl	8001f5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001934:	2301      	movs	r3, #1
 8001936:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001938:	2302      	movs	r3, #2
 800193a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800193c:	463b      	mov	r3, r7
 800193e:	4619      	mov	r1, r3
 8001940:	482f      	ldr	r0, [pc, #188]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 8001942:	f002 f9c3 	bl	8003ccc <HAL_ADC_ConfigChannel>
 8001946:	4603      	mov	r3, r0
 8001948:	2b00      	cmp	r3, #0
 800194a:	d001      	beq.n	8001950 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800194c:	f000 fb06 	bl	8001f5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001950:	2302      	movs	r3, #2
 8001952:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001954:	2303      	movs	r3, #3
 8001956:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001958:	463b      	mov	r3, r7
 800195a:	4619      	mov	r1, r3
 800195c:	4828      	ldr	r0, [pc, #160]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 800195e:	f002 f9b5 	bl	8003ccc <HAL_ADC_ConfigChannel>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d001      	beq.n	800196c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001968:	f000 faf8 	bl	8001f5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800196c:	2303      	movs	r3, #3
 800196e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001970:	2304      	movs	r3, #4
 8001972:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001974:	463b      	mov	r3, r7
 8001976:	4619      	mov	r1, r3
 8001978:	4821      	ldr	r0, [pc, #132]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 800197a:	f002 f9a7 	bl	8003ccc <HAL_ADC_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8001984:	f000 faea 	bl	8001f5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001988:	2304      	movs	r3, #4
 800198a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800198c:	2305      	movs	r3, #5
 800198e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001990:	463b      	mov	r3, r7
 8001992:	4619      	mov	r1, r3
 8001994:	481a      	ldr	r0, [pc, #104]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 8001996:	f002 f999 	bl	8003ccc <HAL_ADC_ConfigChannel>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80019a0:	f000 fadc 	bl	8001f5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80019a4:	2305      	movs	r3, #5
 80019a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 80019a8:	2306      	movs	r3, #6
 80019aa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ac:	463b      	mov	r3, r7
 80019ae:	4619      	mov	r1, r3
 80019b0:	4813      	ldr	r0, [pc, #76]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80019b2:	f002 f98b 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 80019bc:	f000 face 	bl	8001f5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80019c0:	2306      	movs	r3, #6
 80019c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 80019c4:	2307      	movs	r3, #7
 80019c6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c8:	463b      	mov	r3, r7
 80019ca:	4619      	mov	r1, r3
 80019cc:	480c      	ldr	r0, [pc, #48]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80019ce:	f002 f97d 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 80019d8:	f000 fac0 	bl	8001f5c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80019dc:	2307      	movs	r3, #7
 80019de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 8;
 80019e0:	2308      	movs	r3, #8
 80019e2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019e4:	463b      	mov	r3, r7
 80019e6:	4619      	mov	r1, r3
 80019e8:	4805      	ldr	r0, [pc, #20]	@ (8001a00 <MX_ADC1_Init+0x15c>)
 80019ea:	f002 f96f 	bl	8003ccc <HAL_ADC_ConfigChannel>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 80019f4:	f000 fab2 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019f8:	bf00      	nop
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	200001a0 	.word	0x200001a0
 8001a04:	40012000 	.word	0x40012000
 8001a08:	0f000001 	.word	0x0f000001

08001a0c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a10:	4b12      	ldr	r3, [pc, #72]	@ (8001a5c <MX_I2C1_Init+0x50>)
 8001a12:	4a13      	ldr	r2, [pc, #76]	@ (8001a60 <MX_I2C1_Init+0x54>)
 8001a14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <MX_I2C1_Init+0x50>)
 8001a18:	4a12      	ldr	r2, [pc, #72]	@ (8001a64 <MX_I2C1_Init+0x58>)
 8001a1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <MX_I2C1_Init+0x50>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <MX_I2C1_Init+0x50>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <MX_I2C1_Init+0x50>)
 8001a2a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a2e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <MX_I2C1_Init+0x50>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a36:	4b09      	ldr	r3, [pc, #36]	@ (8001a5c <MX_I2C1_Init+0x50>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a3c:	4b07      	ldr	r3, [pc, #28]	@ (8001a5c <MX_I2C1_Init+0x50>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <MX_I2C1_Init+0x50>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a48:	4804      	ldr	r0, [pc, #16]	@ (8001a5c <MX_I2C1_Init+0x50>)
 8001a4a:	f003 fa6f 	bl	8004f2c <HAL_I2C_Init>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a54:	f000 fa82 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	20000248 	.word	0x20000248
 8001a60:	40005400 	.word	0x40005400
 8001a64:	00061a80 	.word	0x00061a80

08001a68 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08c      	sub	sp, #48	@ 0x30
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a6e:	f107 0320 	add.w	r3, r7, #32
 8001a72:	2200      	movs	r2, #0
 8001a74:	601a      	str	r2, [r3, #0]
 8001a76:	605a      	str	r2, [r3, #4]
 8001a78:	609a      	str	r2, [r3, #8]
 8001a7a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a7c:	f107 030c 	add.w	r3, r7, #12
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8c:	1d3b      	adds	r3, r7, #4
 8001a8e:	2200      	movs	r2, #0
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a94:	4b25      	ldr	r3, [pc, #148]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001a96:	4a26      	ldr	r2, [pc, #152]	@ (8001b30 <MX_TIM1_Init+0xc8>)
 8001a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 95;
 8001a9a:	4b24      	ldr	r3, [pc, #144]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001a9c:	225f      	movs	r2, #95	@ 0x5f
 8001a9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa0:	4b22      	ldr	r3, [pc, #136]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 249;
 8001aa6:	4b21      	ldr	r3, [pc, #132]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001aa8:	22f9      	movs	r2, #249	@ 0xf9
 8001aaa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ab2:	4b1e      	ldr	r3, [pc, #120]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001abe:	481b      	ldr	r0, [pc, #108]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001ac0:	f007 ff62 	bl	8009988 <HAL_TIM_Base_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001aca:	f000 fa47 	bl	8001f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ace:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ad2:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4814      	ldr	r0, [pc, #80]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001adc:	f008 fa12 	bl	8009f04 <HAL_TIM_ConfigClockSource>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001ae6:	f000 fa39 	bl	8001f5c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001aea:	2300      	movs	r3, #0
 8001aec:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001af2:	f107 030c 	add.w	r3, r7, #12
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001afa:	f008 faca 	bl	800a092 <HAL_TIM_SlaveConfigSynchro>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0xa0>
  {
    Error_Handler();
 8001b04:	f000 fa2a 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	@ (8001b2c <MX_TIM1_Init+0xc4>)
 8001b16:	f008 fe65 	bl	800a7e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001b20:	f000 fa1c 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3730      	adds	r7, #48	@ 0x30
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000035c 	.word	0x2000035c
 8001b30:	40010000 	.word	0x40010000

08001b34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b3a:	f107 0320 	add.w	r3, r7, #32
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001b48:	f107 030c 	add.w	r3, r7, #12
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b58:	1d3b      	adds	r3, r7, #4
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	601a      	str	r2, [r3, #0]
 8001b5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b60:	4b25      	ldr	r3, [pc, #148]	@ (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b62:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 95;
 8001b68:	4b23      	ldr	r3, [pc, #140]	@ (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b6a:	225f      	movs	r2, #95	@ 0x5f
 8001b6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b22      	ldr	r3, [pc, #136]	@ (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8001b74:	4b20      	ldr	r3, [pc, #128]	@ (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b76:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001b7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b1e      	ldr	r3, [pc, #120]	@ (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b82:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b88:	481b      	ldr	r0, [pc, #108]	@ (8001bf8 <MX_TIM2_Init+0xc4>)
 8001b8a:	f007 fefd 	bl	8009988 <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001b94:	f000 f9e2 	bl	8001f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b9e:	f107 0320 	add.w	r3, r7, #32
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4814      	ldr	r0, [pc, #80]	@ (8001bf8 <MX_TIM2_Init+0xc4>)
 8001ba6:	f008 f9ad 	bl	8009f04 <HAL_TIM_ConfigClockSource>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001bb0:	f000 f9d4 	bl	8001f5c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001bbc:	f107 030c 	add.w	r3, r7, #12
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <MX_TIM2_Init+0xc4>)
 8001bc4:	f008 fa65 	bl	800a092 <HAL_TIM_SlaveConfigSynchro>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001bce:	f000 f9c5 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4806      	ldr	r0, [pc, #24]	@ (8001bf8 <MX_TIM2_Init+0xc4>)
 8001be0:	f008 fe00 	bl	800a7e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d001      	beq.n	8001bee <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001bea:	f000 f9b7 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bee:	bf00      	nop
 8001bf0:	3730      	adds	r7, #48	@ 0x30
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200003a4 	.word	0x200003a4

08001bfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b092      	sub	sp, #72	@ 0x48
 8001c00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c02:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001c10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	463b      	mov	r3, r7
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c3c:	4b44      	ldr	r3, [pc, #272]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001c3e:	4a45      	ldr	r2, [pc, #276]	@ (8001d54 <MX_TIM3_Init+0x158>)
 8001c40:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 95;
 8001c42:	4b43      	ldr	r3, [pc, #268]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001c44:	225f      	movs	r2, #95	@ 0x5f
 8001c46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b41      	ldr	r3, [pc, #260]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001c4e:	4b40      	ldr	r3, [pc, #256]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001c50:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001c54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c56:	4b3e      	ldr	r3, [pc, #248]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5c:	4b3c      	ldr	r3, [pc, #240]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c62:	483b      	ldr	r0, [pc, #236]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001c64:	f007 fe90 	bl	8009988 <HAL_TIM_Base_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8001c6e:	f000 f975 	bl	8001f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c76:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c78:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4834      	ldr	r0, [pc, #208]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001c80:	f008 f940 	bl	8009f04 <HAL_TIM_ConfigClockSource>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001c8a:	f000 f967 	bl	8001f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c8e:	4830      	ldr	r0, [pc, #192]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001c90:	f007 ff2c 	bl	8009aec <HAL_TIM_PWM_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM3_Init+0xa2>
  {
    Error_Handler();
 8001c9a:	f000 f95f 	bl	8001f5c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001ca6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001caa:	4619      	mov	r1, r3
 8001cac:	4828      	ldr	r0, [pc, #160]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001cae:	f008 f9f0 	bl	800a092 <HAL_TIM_SlaveConfigSynchro>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <MX_TIM3_Init+0xc0>
  {
    Error_Handler();
 8001cb8:	f000 f950 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cc4:	f107 031c 	add.w	r3, r7, #28
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4821      	ldr	r0, [pc, #132]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001ccc:	f008 fd8a 	bl	800a7e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM3_Init+0xde>
  {
    Error_Handler();
 8001cd6:	f000 f941 	bl	8001f5c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cda:	2360      	movs	r3, #96	@ 0x60
 8001cdc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cea:	463b      	mov	r3, r7
 8001cec:	2200      	movs	r2, #0
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4817      	ldr	r0, [pc, #92]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001cf2:	f008 f845 	bl	8009d80 <HAL_TIM_PWM_ConfigChannel>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001cfc:	f000 f92e 	bl	8001f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d00:	463b      	mov	r3, r7
 8001d02:	2204      	movs	r2, #4
 8001d04:	4619      	mov	r1, r3
 8001d06:	4812      	ldr	r0, [pc, #72]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001d08:	f008 f83a 	bl	8009d80 <HAL_TIM_PWM_ConfigChannel>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_TIM3_Init+0x11a>
  {
    Error_Handler();
 8001d12:	f000 f923 	bl	8001f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	2208      	movs	r2, #8
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	480c      	ldr	r0, [pc, #48]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001d1e:	f008 f82f 	bl	8009d80 <HAL_TIM_PWM_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM3_Init+0x130>
  {
    Error_Handler();
 8001d28:	f000 f918 	bl	8001f5c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d2c:	463b      	mov	r3, r7
 8001d2e:	220c      	movs	r2, #12
 8001d30:	4619      	mov	r1, r3
 8001d32:	4807      	ldr	r0, [pc, #28]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001d34:	f008 f824 	bl	8009d80 <HAL_TIM_PWM_ConfigChannel>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM3_Init+0x146>
  {
    Error_Handler();
 8001d3e:	f000 f90d 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d42:	4803      	ldr	r0, [pc, #12]	@ (8001d50 <MX_TIM3_Init+0x154>)
 8001d44:	f001 f910 	bl	8002f68 <HAL_TIM_MspPostInit>

}
 8001d48:	bf00      	nop
 8001d4a:	3748      	adds	r7, #72	@ 0x48
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	200003ec 	.word	0x200003ec
 8001d54:	40000400 	.word	0x40000400

08001d58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	@ 0x30
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d5e:	f107 0320 	add.w	r3, r7, #32
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001d6c:	f107 030c 	add.w	r3, r7, #12
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001d84:	4b24      	ldr	r3, [pc, #144]	@ (8001e18 <MX_TIM4_Init+0xc0>)
 8001d86:	4a25      	ldr	r2, [pc, #148]	@ (8001e1c <MX_TIM4_Init+0xc4>)
 8001d88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 191;
 8001d8a:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <MX_TIM4_Init+0xc0>)
 8001d8c:	22bf      	movs	r2, #191	@ 0xbf
 8001d8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d90:	4b21      	ldr	r3, [pc, #132]	@ (8001e18 <MX_TIM4_Init+0xc0>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 49999;
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <MX_TIM4_Init+0xc0>)
 8001d98:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001d9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d9e:	4b1e      	ldr	r3, [pc, #120]	@ (8001e18 <MX_TIM4_Init+0xc0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da4:	4b1c      	ldr	r3, [pc, #112]	@ (8001e18 <MX_TIM4_Init+0xc0>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001daa:	481b      	ldr	r0, [pc, #108]	@ (8001e18 <MX_TIM4_Init+0xc0>)
 8001dac:	f007 fdec 	bl	8009988 <HAL_TIM_Base_Init>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM4_Init+0x62>
  {
    Error_Handler();
 8001db6:	f000 f8d1 	bl	8001f5c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001dbe:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001dc0:	f107 0320 	add.w	r3, r7, #32
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4814      	ldr	r0, [pc, #80]	@ (8001e18 <MX_TIM4_Init+0xc0>)
 8001dc8:	f008 f89c 	bl	8009f04 <HAL_TIM_ConfigClockSource>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001dd2:	f000 f8c3 	bl	8001f5c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	4619      	mov	r1, r3
 8001de4:	480c      	ldr	r0, [pc, #48]	@ (8001e18 <MX_TIM4_Init+0xc0>)
 8001de6:	f008 f954 	bl	800a092 <HAL_TIM_SlaveConfigSynchro>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001df0:	f000 f8b4 	bl	8001f5c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001df4:	2300      	movs	r3, #0
 8001df6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001dfc:	1d3b      	adds	r3, r7, #4
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	@ (8001e18 <MX_TIM4_Init+0xc0>)
 8001e02:	f008 fcef 	bl	800a7e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 8001e0c:	f000 f8a6 	bl	8001f5c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3730      	adds	r7, #48	@ 0x30
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000434 	.word	0x20000434
 8001e1c:	40000800 	.word	0x40000800

08001e20 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e26:	2300      	movs	r3, #0
 8001e28:	607b      	str	r3, [r7, #4]
 8001e2a:	4b1b      	ldr	r3, [pc, #108]	@ (8001e98 <MX_DMA_Init+0x78>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001e98 <MX_DMA_Init+0x78>)
 8001e30:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001e34:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e36:	4b18      	ldr	r3, [pc, #96]	@ (8001e98 <MX_DMA_Init+0x78>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001e3e:	607b      	str	r3, [r7, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	603b      	str	r3, [r7, #0]
 8001e46:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <MX_DMA_Init+0x78>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e4a:	4a13      	ldr	r2, [pc, #76]	@ (8001e98 <MX_DMA_Init+0x78>)
 8001e4c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e52:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <MX_DMA_Init+0x78>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e56:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2100      	movs	r1, #0
 8001e62:	200b      	movs	r0, #11
 8001e64:	f002 fac7 	bl	80043f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e68:	200b      	movs	r0, #11
 8001e6a:	f002 fae0 	bl	800442e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	200c      	movs	r0, #12
 8001e74:	f002 fabf 	bl	80043f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e78:	200c      	movs	r0, #12
 8001e7a:	f002 fad8 	bl	800442e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	2038      	movs	r0, #56	@ 0x38
 8001e84:	f002 fab7 	bl	80043f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e88:	2038      	movs	r0, #56	@ 0x38
 8001e8a:	f002 fad0 	bl	800442e <HAL_NVIC_EnableIRQ>

}
 8001e8e:	bf00      	nop
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800

08001e9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b08a      	sub	sp, #40	@ 0x28
 8001ea0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea2:	f107 0314 	add.w	r3, r7, #20
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
 8001eb0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b27      	ldr	r3, [pc, #156]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a26      	ldr	r2, [pc, #152]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001ebc:	f043 0304 	orr.w	r3, r3, #4
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b24      	ldr	r3, [pc, #144]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0304 	and.w	r3, r3, #4
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b20      	ldr	r3, [pc, #128]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a1f      	ldr	r2, [pc, #124]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b1d      	ldr	r3, [pc, #116]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	60bb      	str	r3, [r7, #8]
 8001eee:	4b19      	ldr	r3, [pc, #100]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	4a18      	ldr	r2, [pc, #96]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001ef4:	f043 0301 	orr.w	r3, r3, #1
 8001ef8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001efa:	4b16      	ldr	r3, [pc, #88]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	f003 0301 	and.w	r3, r3, #1
 8001f02:	60bb      	str	r3, [r7, #8]
 8001f04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	4a11      	ldr	r2, [pc, #68]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f16:	4b0f      	ldr	r3, [pc, #60]	@ (8001f54 <MX_GPIO_Init+0xb8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001f22:	2200      	movs	r2, #0
 8001f24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f28:	480b      	ldr	r0, [pc, #44]	@ (8001f58 <MX_GPIO_Init+0xbc>)
 8001f2a:	f002 ffcb 	bl	8004ec4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001f2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f34:	2301      	movs	r3, #1
 8001f36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001f40:	f107 0314 	add.w	r3, r7, #20
 8001f44:	4619      	mov	r1, r3
 8001f46:	4804      	ldr	r0, [pc, #16]	@ (8001f58 <MX_GPIO_Init+0xbc>)
 8001f48:	f002 fe38 	bl	8004bbc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	@ 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40020800 	.word	0x40020800

08001f5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f60:	b672      	cpsid	i
}
 8001f62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <Error_Handler+0x8>

08001f68 <mpu6050_ADC_ConfCpltCallback>:
int16_t gz_real;

// Variables RAW leídas directamente del sensor (int16_t = complemento a dos)
static int32_t ax, ay, az, gx, gy, gz;

void mpu6050_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
	mpu6050_RxCplt = (uint8_t *)PtrRx;
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <mpu6050_ADC_ConfCpltCallback+0x1c>)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6013      	str	r3, [r2, #0]
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	200006d0 	.word	0x200006d0

08001f88 <mpu6050_Attach_MemWrite>:

void mpu6050_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001f88:	b480      	push	{r7}
 8001f8a:	b083      	sub	sp, #12
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8001f90:	4a04      	ldr	r2, [pc, #16]	@ (8001fa4 <mpu6050_Attach_MemWrite+0x1c>)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6013      	str	r3, [r2, #0]
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	200006d4 	.word	0x200006d4

08001fa8 <mpu6050_Attach_MemReadDMA>:

void mpu6050_Attach_MemReadDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
	memReadDMA = PtrRx;
 8001fb0:	4a04      	ldr	r2, [pc, #16]	@ (8001fc4 <mpu6050_Attach_MemReadDMA+0x1c>)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	200006d8 	.word	0x200006d8

08001fc8 <mpu6050_WriteData>:


//Send init command
void mpu6050_WriteData(uint8_t *byte, uint8_t type) {
 8001fc8:	b590      	push	{r4, r7, lr}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	70fb      	strb	r3, [r7, #3]
	memWrite(MPU6050_ADDR, byte, 1, type);
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <mpu6050_WriteData+0x24>)
 8001fd6:	681c      	ldr	r4, [r3, #0]
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	6879      	ldr	r1, [r7, #4]
 8001fde:	20d0      	movs	r0, #208	@ 0xd0
 8001fe0:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8001fe2:	bf00      	nop
 8001fe4:	370c      	adds	r7, #12
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd90      	pop	{r4, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	200006d4 	.word	0x200006d4

08001ff0 <mpu6050_ReadDataDMA>:

void mpu6050_ReadDataDMA(uint8_t* buffer, size_t size, uint8_t type) {
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b085      	sub	sp, #20
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	71fb      	strb	r3, [r7, #7]
	memReadDMA(MPU6050_ADDR, buffer, size, type);
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <mpu6050_ReadDataDMA+0x28>)
 8002000:	681c      	ldr	r4, [r3, #0]
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	b2da      	uxtb	r2, r3
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	68f9      	ldr	r1, [r7, #12]
 800200a:	20d0      	movs	r0, #208	@ 0xd0
 800200c:	47a0      	blx	r4
	//HAL_I2C_Mem_Read(&hi2c1, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data,14, 1000);
}
 800200e:	bf00      	nop
 8002010:	3714      	adds	r7, #20
 8002012:	46bd      	mov	sp, r7
 8002014:	bd90      	pop	{r4, r7, pc}
 8002016:	bf00      	nop
 8002018:	200006d8 	.word	0x200006d8

0800201c <MPU6050_Init>:


void MPU6050_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
    uint8_t data;

    // Salir del modo de bajo consumo (modo sleep)
    // Escritura en el registro PWR_MGMT_1 (0x6B)
    data = 0x00;
 8002022:	2300      	movs	r3, #0
 8002024:	71fb      	strb	r3, [r7, #7]
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, PWR_MGMT_1_REG);
 8002026:	1dfb      	adds	r3, r7, #7
 8002028:	216b      	movs	r1, #107	@ 0x6b
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ffcc 	bl	8001fc8 <mpu6050_WriteData>

    // Configurar acelerómetro con rango ±2g (registro ACCEL_CONFIG = 0x1C, valor 0x00)
    //data = 0x00;
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, ACCEL_CONFIG_REG);
 8002030:	1dfb      	adds	r3, r7, #7
 8002032:	211c      	movs	r1, #28
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff ffc7 	bl	8001fc8 <mpu6050_WriteData>

    // Configurar giroscopio con rango ±250°/s (registro GYRO_CONFIG = 0x1B, valor 0x00)
    //data = 0x00;
    //HAL_I2C_Mem_Write(&hi2c1, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &data, 1, HAL_MAX_DELAY);
    mpu6050_WriteData(&data, GYRO_CONFIG_REG);
 800203a:	1dfb      	adds	r3, r7, #7
 800203c:	211b      	movs	r1, #27
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff ffc2 	bl	8001fc8 <mpu6050_WriteData>

}
 8002044:	bf00      	nop
 8002046:	3708      	adds	r7, #8
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	0000      	movs	r0, r0
	...

08002050 <mpu6050_Read>:

char mpu6050_Read(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
	static uint8_t Rec_Data[14];
	static uint8_t state = 1;

	if (*mpu6050_RxCplt || state == 1) {
 8002054:	4ba0      	ldr	r3, [pc, #640]	@ (80022d8 <mpu6050_Read+0x288>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d104      	bne.n	8002068 <mpu6050_Read+0x18>
 800205e:	4b9f      	ldr	r3, [pc, #636]	@ (80022dc <mpu6050_Read+0x28c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b01      	cmp	r3, #1
 8002064:	f040 8196 	bne.w	8002394 <mpu6050_Read+0x344>
		*mpu6050_RxCplt = 0;  // Reset completion flag
 8002068:	4b9b      	ldr	r3, [pc, #620]	@ (80022d8 <mpu6050_Read+0x288>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
		switch (state) {
 8002070:	4b9a      	ldr	r3, [pc, #616]	@ (80022dc <mpu6050_Read+0x28c>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b01      	cmp	r3, #1
 8002076:	d002      	beq.n	800207e <mpu6050_Read+0x2e>
 8002078:	2b02      	cmp	r3, #2
 800207a:	d009      	beq.n	8002090 <mpu6050_Read+0x40>
 800207c:	e18a      	b.n	8002394 <mpu6050_Read+0x344>
		case 1:
			state=2;
 800207e:	4b97      	ldr	r3, [pc, #604]	@ (80022dc <mpu6050_Read+0x28c>)
 8002080:	2202      	movs	r2, #2
 8002082:	701a      	strb	r2, [r3, #0]
			// Leer 6 bytes desde ACCEL_XOUT_H (registro 0x3B)
			mpu6050_ReadDataDMA(Rec_Data, 14, ACCEL_XOUT_H_REG);
 8002084:	223b      	movs	r2, #59	@ 0x3b
 8002086:	210e      	movs	r1, #14
 8002088:	4895      	ldr	r0, [pc, #596]	@ (80022e0 <mpu6050_Read+0x290>)
 800208a:	f7ff ffb1 	bl	8001ff0 <mpu6050_ReadDataDMA>
			break;
 800208e:	e181      	b.n	8002394 <mpu6050_Read+0x344>
		case 2:
			state=1;
 8002090:	4b92      	ldr	r3, [pc, #584]	@ (80022dc <mpu6050_Read+0x28c>)
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
			// Combinar bytes altos y bajos en variables de 16 bits con signo
			//Valores accelerometro
			ax = (int16_t) (Rec_Data[0] << 8 | Rec_Data[1]); //primer byte  es la parte alta, segundo parte baja
 8002096:	4b92      	ldr	r3, [pc, #584]	@ (80022e0 <mpu6050_Read+0x290>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	b21b      	sxth	r3, r3
 800209c:	021b      	lsls	r3, r3, #8
 800209e:	b21a      	sxth	r2, r3
 80020a0:	4b8f      	ldr	r3, [pc, #572]	@ (80022e0 <mpu6050_Read+0x290>)
 80020a2:	785b      	ldrb	r3, [r3, #1]
 80020a4:	b21b      	sxth	r3, r3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	461a      	mov	r2, r3
 80020ac:	4b8d      	ldr	r3, [pc, #564]	@ (80022e4 <mpu6050_Read+0x294>)
 80020ae:	601a      	str	r2, [r3, #0]
			ay = (int16_t) (Rec_Data[2] << 8 | Rec_Data[3]);
 80020b0:	4b8b      	ldr	r3, [pc, #556]	@ (80022e0 <mpu6050_Read+0x290>)
 80020b2:	789b      	ldrb	r3, [r3, #2]
 80020b4:	b21b      	sxth	r3, r3
 80020b6:	021b      	lsls	r3, r3, #8
 80020b8:	b21a      	sxth	r2, r3
 80020ba:	4b89      	ldr	r3, [pc, #548]	@ (80022e0 <mpu6050_Read+0x290>)
 80020bc:	78db      	ldrb	r3, [r3, #3]
 80020be:	b21b      	sxth	r3, r3
 80020c0:	4313      	orrs	r3, r2
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	461a      	mov	r2, r3
 80020c6:	4b88      	ldr	r3, [pc, #544]	@ (80022e8 <mpu6050_Read+0x298>)
 80020c8:	601a      	str	r2, [r3, #0]
			az = (int16_t) (Rec_Data[4] << 8 | Rec_Data[5]);
 80020ca:	4b85      	ldr	r3, [pc, #532]	@ (80022e0 <mpu6050_Read+0x290>)
 80020cc:	791b      	ldrb	r3, [r3, #4]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	4b82      	ldr	r3, [pc, #520]	@ (80022e0 <mpu6050_Read+0x290>)
 80020d6:	795b      	ldrb	r3, [r3, #5]
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21b      	sxth	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	4b82      	ldr	r3, [pc, #520]	@ (80022ec <mpu6050_Read+0x29c>)
 80020e2:	601a      	str	r2, [r3, #0]
			//Medida temperatura
			//t = (int16_t) (Rec_Data[6] << 8 | Rec_Data[7]);
			//Valores del giroscopio
			gx = (int16_t) (Rec_Data[8] << 8 | Rec_Data[9]);
 80020e4:	4b7e      	ldr	r3, [pc, #504]	@ (80022e0 <mpu6050_Read+0x290>)
 80020e6:	7a1b      	ldrb	r3, [r3, #8]
 80020e8:	b21b      	sxth	r3, r3
 80020ea:	021b      	lsls	r3, r3, #8
 80020ec:	b21a      	sxth	r2, r3
 80020ee:	4b7c      	ldr	r3, [pc, #496]	@ (80022e0 <mpu6050_Read+0x290>)
 80020f0:	7a5b      	ldrb	r3, [r3, #9]
 80020f2:	b21b      	sxth	r3, r3
 80020f4:	4313      	orrs	r3, r2
 80020f6:	b21b      	sxth	r3, r3
 80020f8:	461a      	mov	r2, r3
 80020fa:	4b7d      	ldr	r3, [pc, #500]	@ (80022f0 <mpu6050_Read+0x2a0>)
 80020fc:	601a      	str	r2, [r3, #0]
			gy = (int16_t) (Rec_Data[10] << 8 | Rec_Data[11]);
 80020fe:	4b78      	ldr	r3, [pc, #480]	@ (80022e0 <mpu6050_Read+0x290>)
 8002100:	7a9b      	ldrb	r3, [r3, #10]
 8002102:	b21b      	sxth	r3, r3
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	b21a      	sxth	r2, r3
 8002108:	4b75      	ldr	r3, [pc, #468]	@ (80022e0 <mpu6050_Read+0x290>)
 800210a:	7adb      	ldrb	r3, [r3, #11]
 800210c:	b21b      	sxth	r3, r3
 800210e:	4313      	orrs	r3, r2
 8002110:	b21b      	sxth	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	4b77      	ldr	r3, [pc, #476]	@ (80022f4 <mpu6050_Read+0x2a4>)
 8002116:	601a      	str	r2, [r3, #0]
			gz = (int16_t) (Rec_Data[12] << 8 | Rec_Data[13]);
 8002118:	4b71      	ldr	r3, [pc, #452]	@ (80022e0 <mpu6050_Read+0x290>)
 800211a:	7b1b      	ldrb	r3, [r3, #12]
 800211c:	b21b      	sxth	r3, r3
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	b21a      	sxth	r2, r3
 8002122:	4b6f      	ldr	r3, [pc, #444]	@ (80022e0 <mpu6050_Read+0x290>)
 8002124:	7b5b      	ldrb	r3, [r3, #13]
 8002126:	b21b      	sxth	r3, r3
 8002128:	4313      	orrs	r3, r2
 800212a:	b21b      	sxth	r3, r3
 800212c:	461a      	mov	r2, r3
 800212e:	4b72      	ldr	r3, [pc, #456]	@ (80022f8 <mpu6050_Read+0x2a8>)
 8002130:	601a      	str	r2, [r3, #0]


			if (abs(ax) <= OFFSET_AX)
 8002132:	4b6c      	ldr	r3, [pc, #432]	@ (80022e4 <mpu6050_Read+0x294>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 800213a:	db08      	blt.n	800214e <mpu6050_Read+0xfe>
 800213c:	4b69      	ldr	r3, [pc, #420]	@ (80022e4 <mpu6050_Read+0x294>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8002144:	dc03      	bgt.n	800214e <mpu6050_Read+0xfe>
				ax_real = 0;
 8002146:	4b6d      	ldr	r3, [pc, #436]	@ (80022fc <mpu6050_Read+0x2ac>)
 8002148:	2200      	movs	r2, #0
 800214a:	801a      	strh	r2, [r3, #0]
 800214c:	e025      	b.n	800219a <mpu6050_Read+0x14a>
			else
				ax_real = (ax / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 800214e:	4b65      	ldr	r3, [pc, #404]	@ (80022e4 <mpu6050_Read+0x294>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800215a:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8002300 <mpu6050_Read+0x2b0>
 800215e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002162:	ee16 0a90 	vmov	r0, s13
 8002166:	f7fe fb19 	bl	800079c <__aeabi_f2d>
 800216a:	a359      	add	r3, pc, #356	@ (adr r3, 80022d0 <mpu6050_Read+0x280>)
 800216c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002170:	f7fe f886 	bl	8000280 <__aeabi_dmul>
 8002174:	4602      	mov	r2, r0
 8002176:	460b      	mov	r3, r1
 8002178:	4610      	mov	r0, r2
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 0200 	mov.w	r2, #0
 8002180:	4b60      	ldr	r3, [pc, #384]	@ (8002304 <mpu6050_Read+0x2b4>)
 8002182:	f7fe f87d 	bl	8000280 <__aeabi_dmul>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fb5d 	bl	800084c <__aeabi_d2iz>
 8002192:	4603      	mov	r3, r0
 8002194:	b21a      	sxth	r2, r3
 8002196:	4b59      	ldr	r3, [pc, #356]	@ (80022fc <mpu6050_Read+0x2ac>)
 8002198:	801a      	strh	r2, [r3, #0]

			if (abs(ay) <= OFFSET_AY)
 800219a:	4b53      	ldr	r3, [pc, #332]	@ (80022e8 <mpu6050_Read+0x298>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 80021a2:	db08      	blt.n	80021b6 <mpu6050_Read+0x166>
 80021a4:	4b50      	ldr	r3, [pc, #320]	@ (80022e8 <mpu6050_Read+0x298>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 80021ac:	dc03      	bgt.n	80021b6 <mpu6050_Read+0x166>
				ay_real = 0;
 80021ae:	4b56      	ldr	r3, [pc, #344]	@ (8002308 <mpu6050_Read+0x2b8>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	801a      	strh	r2, [r3, #0]
 80021b4:	e025      	b.n	8002202 <mpu6050_Read+0x1b2>
			else
				ay_real = (ay / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 80021b6:	4b4c      	ldr	r3, [pc, #304]	@ (80022e8 <mpu6050_Read+0x298>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c2:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 8002300 <mpu6050_Read+0x2b0>
 80021c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021ca:	ee16 0a90 	vmov	r0, s13
 80021ce:	f7fe fae5 	bl	800079c <__aeabi_f2d>
 80021d2:	a33f      	add	r3, pc, #252	@ (adr r3, 80022d0 <mpu6050_Read+0x280>)
 80021d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d8:	f7fe f852 	bl	8000280 <__aeabi_dmul>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	f04f 0200 	mov.w	r2, #0
 80021e8:	4b46      	ldr	r3, [pc, #280]	@ (8002304 <mpu6050_Read+0x2b4>)
 80021ea:	f7fe f849 	bl	8000280 <__aeabi_dmul>
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4610      	mov	r0, r2
 80021f4:	4619      	mov	r1, r3
 80021f6:	f7fe fb29 	bl	800084c <__aeabi_d2iz>
 80021fa:	4603      	mov	r3, r0
 80021fc:	b21a      	sxth	r2, r3
 80021fe:	4b42      	ldr	r3, [pc, #264]	@ (8002308 <mpu6050_Read+0x2b8>)
 8002200:	801a      	strh	r2, [r3, #0]

			if (abs(az) <= OFFSET_AZ)
 8002202:	4b3a      	ldr	r3, [pc, #232]	@ (80022ec <mpu6050_Read+0x29c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 800220a:	db08      	blt.n	800221e <mpu6050_Read+0x1ce>
 800220c:	4b37      	ldr	r3, [pc, #220]	@ (80022ec <mpu6050_Read+0x29c>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 8002214:	dc03      	bgt.n	800221e <mpu6050_Read+0x1ce>
				az_real = 0;//9.81 * MULTIPLICADORFLOAT; // en reposo debería medir ~1g hacia Z
 8002216:	4b3d      	ldr	r3, [pc, #244]	@ (800230c <mpu6050_Read+0x2bc>)
 8002218:	2200      	movs	r2, #0
 800221a:	801a      	strh	r2, [r3, #0]
 800221c:	e025      	b.n	800226a <mpu6050_Read+0x21a>
			else
				az_real = (az / 16384.0f) * GRAVEDAD * MULTIPLICADORFLOAT;
 800221e:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <mpu6050_Read+0x29c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8002300 <mpu6050_Read+0x2b0>
 800222e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002232:	ee16 0a90 	vmov	r0, s13
 8002236:	f7fe fab1 	bl	800079c <__aeabi_f2d>
 800223a:	a325      	add	r3, pc, #148	@ (adr r3, 80022d0 <mpu6050_Read+0x280>)
 800223c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002240:	f7fe f81e 	bl	8000280 <__aeabi_dmul>
 8002244:	4602      	mov	r2, r0
 8002246:	460b      	mov	r3, r1
 8002248:	4610      	mov	r0, r2
 800224a:	4619      	mov	r1, r3
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b2c      	ldr	r3, [pc, #176]	@ (8002304 <mpu6050_Read+0x2b4>)
 8002252:	f7fe f815 	bl	8000280 <__aeabi_dmul>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe faf5 	bl	800084c <__aeabi_d2iz>
 8002262:	4603      	mov	r3, r0
 8002264:	b21a      	sxth	r2, r3
 8002266:	4b29      	ldr	r3, [pc, #164]	@ (800230c <mpu6050_Read+0x2bc>)
 8002268:	801a      	strh	r2, [r3, #0]

			// Aplicar offset y escalar a grados/segundo (centésimas)
			if (abs(gx) <= OFFSET_GX)
 800226a:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <mpu6050_Read+0x2a0>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f513 7fe1 	cmn.w	r3, #450	@ 0x1c2
 8002272:	db08      	blt.n	8002286 <mpu6050_Read+0x236>
 8002274:	4b1e      	ldr	r3, [pc, #120]	@ (80022f0 <mpu6050_Read+0x2a0>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f5b3 7fe1 	cmp.w	r3, #450	@ 0x1c2
 800227c:	dc03      	bgt.n	8002286 <mpu6050_Read+0x236>
				gx_real = 0;
 800227e:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <mpu6050_Read+0x2c0>)
 8002280:	2200      	movs	r2, #0
 8002282:	801a      	strh	r2, [r3, #0]
 8002284:	e014      	b.n	80022b0 <mpu6050_Read+0x260>
			else
				gx_real = (gx / 131.0f) * MULTIPLICADORFLOAT;
 8002286:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <mpu6050_Read+0x2a0>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	ee07 3a90 	vmov	s15, r3
 800228e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002292:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8002314 <mpu6050_Read+0x2c4>
 8002296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800229a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8002318 <mpu6050_Read+0x2c8>
 800229e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a6:	ee17 3a90 	vmov	r3, s15
 80022aa:	b21a      	sxth	r2, r3
 80022ac:	4b18      	ldr	r3, [pc, #96]	@ (8002310 <mpu6050_Read+0x2c0>)
 80022ae:	801a      	strh	r2, [r3, #0]

			if (abs(gy) <= OFFSET_GY)
 80022b0:	4b10      	ldr	r3, [pc, #64]	@ (80022f4 <mpu6050_Read+0x2a4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 80022b8:	db32      	blt.n	8002320 <mpu6050_Read+0x2d0>
 80022ba:	4b0e      	ldr	r3, [pc, #56]	@ (80022f4 <mpu6050_Read+0x2a4>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 80022c2:	dc2d      	bgt.n	8002320 <mpu6050_Read+0x2d0>
				gy_real = 0;
 80022c4:	4b15      	ldr	r3, [pc, #84]	@ (800231c <mpu6050_Read+0x2cc>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	801a      	strh	r2, [r3, #0]
 80022ca:	e03e      	b.n	800234a <mpu6050_Read+0x2fa>
 80022cc:	f3af 8000 	nop.w
 80022d0:	51eb851f 	.word	0x51eb851f
 80022d4:	40239eb8 	.word	0x40239eb8
 80022d8:	200006d0 	.word	0x200006d0
 80022dc:	2000002b 	.word	0x2000002b
 80022e0:	20000700 	.word	0x20000700
 80022e4:	200006e8 	.word	0x200006e8
 80022e8:	200006ec 	.word	0x200006ec
 80022ec:	200006f0 	.word	0x200006f0
 80022f0:	200006f4 	.word	0x200006f4
 80022f4:	200006f8 	.word	0x200006f8
 80022f8:	200006fc 	.word	0x200006fc
 80022fc:	200006dc 	.word	0x200006dc
 8002300:	46800000 	.word	0x46800000
 8002304:	40590000 	.word	0x40590000
 8002308:	200006de 	.word	0x200006de
 800230c:	200006e0 	.word	0x200006e0
 8002310:	200006e2 	.word	0x200006e2
 8002314:	43030000 	.word	0x43030000
 8002318:	42c80000 	.word	0x42c80000
 800231c:	200006e4 	.word	0x200006e4
			else
				gy_real = (gy / 131.0f) * MULTIPLICADORFLOAT;
 8002320:	4b1e      	ldr	r3, [pc, #120]	@ (800239c <mpu6050_Read+0x34c>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232c:	eddf 6a1c 	vldr	s13, [pc, #112]	@ 80023a0 <mpu6050_Read+0x350>
 8002330:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002334:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 80023a4 <mpu6050_Read+0x354>
 8002338:	ee67 7a87 	vmul.f32	s15, s15, s14
 800233c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002340:	ee17 3a90 	vmov	r3, s15
 8002344:	b21a      	sxth	r2, r3
 8002346:	4b18      	ldr	r3, [pc, #96]	@ (80023a8 <mpu6050_Read+0x358>)
 8002348:	801a      	strh	r2, [r3, #0]

			if (abs(gz) <= OFFSET_GZ)
 800234a:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <mpu6050_Read+0x35c>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f513 7faf 	cmn.w	r3, #350	@ 0x15e
 8002352:	db08      	blt.n	8002366 <mpu6050_Read+0x316>
 8002354:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <mpu6050_Read+0x35c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f5b3 7faf 	cmp.w	r3, #350	@ 0x15e
 800235c:	dc03      	bgt.n	8002366 <mpu6050_Read+0x316>
				gz_real = 0;
 800235e:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <mpu6050_Read+0x360>)
 8002360:	2200      	movs	r2, #0
 8002362:	801a      	strh	r2, [r3, #0]
 8002364:	e014      	b.n	8002390 <mpu6050_Read+0x340>
			else
				gz_real = (gz / 131.0f) * MULTIPLICADORFLOAT;
 8002366:	4b11      	ldr	r3, [pc, #68]	@ (80023ac <mpu6050_Read+0x35c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002372:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 80023a0 <mpu6050_Read+0x350>
 8002376:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800237a:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80023a4 <mpu6050_Read+0x354>
 800237e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002382:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002386:	ee17 3a90 	vmov	r3, s15
 800238a:	b21a      	sxth	r2, r3
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <mpu6050_Read+0x360>)
 800238e:	801a      	strh	r2, [r3, #0]

			return 1;
 8002390:	2301      	movs	r3, #1
 8002392:	e000      	b.n	8002396 <mpu6050_Read+0x346>
			break;
		}
	}
	return 0;
 8002394:	2300      	movs	r3, #0
}
 8002396:	4618      	mov	r0, r3
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200006f8 	.word	0x200006f8
 80023a0:	43030000 	.word	0x43030000
 80023a4:	42c80000 	.word	0x42c80000
 80023a8:	200006e4 	.word	0x200006e4
 80023ac:	200006fc 	.word	0x200006fc
 80023b0:	200006e6 	.word	0x200006e6

080023b4 <mpu6050_GetData>:

void mpu6050_GetData(int16_t *ax, int16_t *ay, int16_t *az, int16_t *gx, int16_t *gy, int16_t *gz) {
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
 80023c0:	603b      	str	r3, [r7, #0]
    if (ax) *ax = ax_real;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d004      	beq.n	80023d2 <mpu6050_GetData+0x1e>
 80023c8:	4b19      	ldr	r3, [pc, #100]	@ (8002430 <mpu6050_GetData+0x7c>)
 80023ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	801a      	strh	r2, [r3, #0]
    if (ay) *ay = ay_real;
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d004      	beq.n	80023e2 <mpu6050_GetData+0x2e>
 80023d8:	4b16      	ldr	r3, [pc, #88]	@ (8002434 <mpu6050_GetData+0x80>)
 80023da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	801a      	strh	r2, [r3, #0]
    if (az) *az = az_real;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d004      	beq.n	80023f2 <mpu6050_GetData+0x3e>
 80023e8:	4b13      	ldr	r3, [pc, #76]	@ (8002438 <mpu6050_GetData+0x84>)
 80023ea:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	801a      	strh	r2, [r3, #0]

    if (gx) *gx = gx_real;
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d004      	beq.n	8002402 <mpu6050_GetData+0x4e>
 80023f8:	4b10      	ldr	r3, [pc, #64]	@ (800243c <mpu6050_GetData+0x88>)
 80023fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	801a      	strh	r2, [r3, #0]
    if (gy) *gy = gy_real;
 8002402:	69bb      	ldr	r3, [r7, #24]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <mpu6050_GetData+0x5e>
 8002408:	4b0d      	ldr	r3, [pc, #52]	@ (8002440 <mpu6050_GetData+0x8c>)
 800240a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	801a      	strh	r2, [r3, #0]
    if (gz) *gz = gz_real;
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <mpu6050_GetData+0x6e>
 8002418:	4b0a      	ldr	r3, [pc, #40]	@ (8002444 <mpu6050_GetData+0x90>)
 800241a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	801a      	strh	r2, [r3, #0]
}
 8002422:	bf00      	nop
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
 800242e:	bf00      	nop
 8002430:	200006dc 	.word	0x200006dc
 8002434:	200006de 	.word	0x200006de
 8002438:	200006e0 	.word	0x200006e0
 800243c:	200006e2 	.word	0x200006e2
 8002440:	200006e4 	.word	0x200006e4
 8002444:	200006e6 	.word	0x200006e6

08002448 <ssd1306_Reset>:
static void (*memWrite)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;
static void (*memWriteDMA)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type) = NULL;

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 800244c:	bf00      	nop
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8002458:	b590      	push	{r4, r7, lr}
 800245a:	b083      	sub	sp, #12
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	71fb      	strb	r3, [r7, #7]
	memWrite(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <ssd1306_WriteCommand+0x20>)
 8002464:	681c      	ldr	r4, [r3, #0]
 8002466:	1df9      	adds	r1, r7, #7
 8002468:	2300      	movs	r3, #0
 800246a:	2201      	movs	r2, #1
 800246c:	2078      	movs	r0, #120	@ 0x78
 800246e:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
}
 8002470:	bf00      	nop
 8002472:	370c      	adds	r7, #12
 8002474:	46bd      	mov	sp, r7
 8002476:	bd90      	pop	{r4, r7, pc}
 8002478:	20000714 	.word	0x20000714

0800247c <ssd1306_WriteCommandDMA>:

void ssd1306_WriteCommandDMA(uint8_t byte) {
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	71fb      	strb	r3, [r7, #7]
	memWriteDMA(SSD1306_I2C_ADDR, &byte, 1, 0x00);
 8002486:	4b05      	ldr	r3, [pc, #20]	@ (800249c <ssd1306_WriteCommandDMA+0x20>)
 8002488:	681c      	ldr	r4, [r3, #0]
 800248a:	1df9      	adds	r1, r7, #7
 800248c:	2300      	movs	r3, #0
 800248e:	2201      	movs	r2, #1
 8002490:	2078      	movs	r0, #120	@ 0x78
 8002492:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1);
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}
 800249c:	20000718 	.word	0x20000718

080024a0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
    memWrite(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <ssd1306_WriteData+0x24>)
 80024ac:	681c      	ldr	r4, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	b2da      	uxtb	r2, r3
 80024b2:	2340      	movs	r3, #64	@ 0x40
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	2078      	movs	r0, #120	@ 0x78
 80024b8:	47a0      	blx	r4
	//HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}
 80024ba:	bf00      	nop
 80024bc:	370c      	adds	r7, #12
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd90      	pop	{r4, r7, pc}
 80024c2:	bf00      	nop
 80024c4:	20000714 	.word	0x20000714

080024c8 <ssd1306_WriteDataDMA>:

void ssd1306_WriteDataDMA(uint8_t* buffer, size_t buff_size) {
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
	memWriteDMA(SSD1306_I2C_ADDR, buffer, buff_size, 0x40);
 80024d2:	4b06      	ldr	r3, [pc, #24]	@ (80024ec <ssd1306_WriteDataDMA+0x24>)
 80024d4:	681c      	ldr	r4, [r3, #0]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	b2da      	uxtb	r2, r3
 80024da:	2340      	movs	r3, #64	@ 0x40
 80024dc:	6879      	ldr	r1, [r7, #4]
 80024de:	2078      	movs	r0, #120	@ 0x78
 80024e0:	47a0      	blx	r4
	//HAL_I2C_Mem_Write_DMA(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size);
}
 80024e2:	bf00      	nop
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd90      	pop	{r4, r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000718 	.word	0x20000718

080024f0 <ssd1306_Attach_MemWriteDMA>:
        ret = SSD1306_OK;
    }
    return ret;
}

void ssd1306_Attach_MemWriteDMA(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	memWriteDMA = PtrRx;
 80024f8:	4a04      	ldr	r2, [pc, #16]	@ (800250c <ssd1306_Attach_MemWriteDMA+0x1c>)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6013      	str	r3, [r2, #0]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000718 	.word	0x20000718

08002510 <ssd1306_Attach_MemWrite>:

void ssd1306_Attach_MemWrite(void(*PtrRx)(uint8_t address, uint8_t *data, uint8_t size, uint8_t type)){
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
	memWrite = PtrRx;
 8002518:	4a04      	ldr	r2, [pc, #16]	@ (800252c <ssd1306_Attach_MemWrite+0x1c>)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6013      	str	r3, [r2, #0]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000714 	.word	0x20000714

08002530 <ssd1306_ADC_ConfCpltCallback>:

void ssd1306_ADC_ConfCpltCallback(volatile uint8_t *PtrRx){
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	SSD1306_TxCplt = (uint8_t *)PtrRx;
 8002538:	4a04      	ldr	r2, [pc, #16]	@ (800254c <ssd1306_ADC_ConfCpltCallback+0x1c>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]
}
 800253e:	bf00      	nop
 8002540:	370c      	adds	r7, #12
 8002542:	46bd      	mov	sp, r7
 8002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002548:	4770      	bx	lr
 800254a:	bf00      	nop
 800254c:	20000710 	.word	0x20000710

08002550 <ssd1306_Init>:

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002554:	f7ff ff78 	bl	8002448 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002558:	2064      	movs	r0, #100	@ 0x64
 800255a:	f001 f92d 	bl	80037b8 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800255e:	2000      	movs	r0, #0
 8002560:	f000 faf2 	bl	8002b48 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002564:	2020      	movs	r0, #32
 8002566:	f7ff ff77 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800256a:	2000      	movs	r0, #0
 800256c:	f7ff ff74 	bl	8002458 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002570:	20b0      	movs	r0, #176	@ 0xb0
 8002572:	f7ff ff71 	bl	8002458 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002576:	20c8      	movs	r0, #200	@ 0xc8
 8002578:	f7ff ff6e 	bl	8002458 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800257c:	2000      	movs	r0, #0
 800257e:	f7ff ff6b 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002582:	2010      	movs	r0, #16
 8002584:	f7ff ff68 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002588:	2040      	movs	r0, #64	@ 0x40
 800258a:	f7ff ff65 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800258e:	20ff      	movs	r0, #255	@ 0xff
 8002590:	f000 fac6 	bl	8002b20 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002594:	20a1      	movs	r0, #161	@ 0xa1
 8002596:	f7ff ff5f 	bl	8002458 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800259a:	20a6      	movs	r0, #166	@ 0xa6
 800259c:	f7ff ff5c 	bl	8002458 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80025a0:	20a8      	movs	r0, #168	@ 0xa8
 80025a2:	f7ff ff59 	bl	8002458 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80025a6:	203f      	movs	r0, #63	@ 0x3f
 80025a8:	f7ff ff56 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80025ac:	20a4      	movs	r0, #164	@ 0xa4
 80025ae:	f7ff ff53 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80025b2:	20d3      	movs	r0, #211	@ 0xd3
 80025b4:	f7ff ff50 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80025b8:	2000      	movs	r0, #0
 80025ba:	f7ff ff4d 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80025be:	20d5      	movs	r0, #213	@ 0xd5
 80025c0:	f7ff ff4a 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80025c4:	20f0      	movs	r0, #240	@ 0xf0
 80025c6:	f7ff ff47 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80025ca:	20d9      	movs	r0, #217	@ 0xd9
 80025cc:	f7ff ff44 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80025d0:	2022      	movs	r0, #34	@ 0x22
 80025d2:	f7ff ff41 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80025d6:	20da      	movs	r0, #218	@ 0xda
 80025d8:	f7ff ff3e 	bl	8002458 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80025dc:	2012      	movs	r0, #18
 80025de:	f7ff ff3b 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80025e2:	20db      	movs	r0, #219	@ 0xdb
 80025e4:	f7ff ff38 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80025e8:	2020      	movs	r0, #32
 80025ea:	f7ff ff35 	bl	8002458 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80025ee:	208d      	movs	r0, #141	@ 0x8d
 80025f0:	f7ff ff32 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80025f4:	2014      	movs	r0, #20
 80025f6:	f7ff ff2f 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80025fa:	2001      	movs	r0, #1
 80025fc:	f000 faa4 	bl	8002b48 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8002600:	2000      	movs	r0, #0
 8002602:	f000 f80f 	bl	8002624 <ssd1306_Fill>
    //ssd1306_Fill(White);

    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8002606:	f000 f825 	bl	8002654 <ssd1306_UpdateScreen>

    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800260a:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <ssd1306_Init+0xd0>)
 800260c:	2200      	movs	r2, #0
 800260e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002610:	4b03      	ldr	r3, [pc, #12]	@ (8002620 <ssd1306_Init+0xd0>)
 8002612:	2200      	movs	r2, #0
 8002614:	805a      	strh	r2, [r3, #2]

    SSD1306.Initialized = 1;
 8002616:	4b02      	ldr	r3, [pc, #8]	@ (8002620 <ssd1306_Init+0xd0>)
 8002618:	2201      	movs	r2, #1
 800261a:	711a      	strb	r2, [r3, #4]
}
 800261c:	bf00      	nop
 800261e:	bd80      	pop	{r7, pc}
 8002620:	20000b1c 	.word	0x20000b1c

08002624 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	4603      	mov	r3, r0
 800262c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <ssd1306_Fill+0x14>
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <ssd1306_Fill+0x16>
 8002638:	23ff      	movs	r3, #255	@ 0xff
 800263a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800263e:	4619      	mov	r1, r3
 8002640:	4803      	ldr	r0, [pc, #12]	@ (8002650 <ssd1306_Fill+0x2c>)
 8002642:	f00c fa41 	bl	800eac8 <memset>
}
 8002646:	bf00      	nop
 8002648:	3708      	adds	r7, #8
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	2000071c 	.word	0x2000071c

08002654 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800265a:	2300      	movs	r3, #0
 800265c:	71fb      	strb	r3, [r7, #7]
 800265e:	e016      	b.n	800268e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	3b50      	subs	r3, #80	@ 0x50
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff fef6 	bl	8002458 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800266c:	2000      	movs	r0, #0
 800266e:	f7ff fef3 	bl	8002458 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002672:	2010      	movs	r0, #16
 8002674:	f7ff fef0 	bl	8002458 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002678:	79fb      	ldrb	r3, [r7, #7]
 800267a:	01db      	lsls	r3, r3, #7
 800267c:	4a08      	ldr	r2, [pc, #32]	@ (80026a0 <ssd1306_UpdateScreen+0x4c>)
 800267e:	4413      	add	r3, r2
 8002680:	2180      	movs	r1, #128	@ 0x80
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ff0c 	bl	80024a0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	3301      	adds	r3, #1
 800268c:	71fb      	strb	r3, [r7, #7]
 800268e:	79fb      	ldrb	r3, [r7, #7]
 8002690:	2b07      	cmp	r3, #7
 8002692:	d9e5      	bls.n	8002660 <ssd1306_UpdateScreen+0xc>
    }
}
 8002694:	bf00      	nop
 8002696:	bf00      	nop
 8002698:	3708      	adds	r7, #8
 800269a:	46bd      	mov	sp, r7
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	2000071c 	.word	0x2000071c

080026a4 <ssd1306_UpdateScreenDMA>:


/* Write the screenbuffer with changed to the screen */
char ssd1306_UpdateScreenDMA(void) {
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
	static uint8_t current_page = 0;
	static uint8_t state = 1;

	// Only proceed if I2C is ready or we're starting a new transaction

	if (*SSD1306_TxCplt || state == 1) {
 80026a8:	4b2a      	ldr	r3, [pc, #168]	@ (8002754 <ssd1306_UpdateScreenDMA+0xb0>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d103      	bne.n	80026ba <ssd1306_UpdateScreenDMA+0x16>
 80026b2:	4b29      	ldr	r3, [pc, #164]	@ (8002758 <ssd1306_UpdateScreenDMA+0xb4>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d149      	bne.n	800274e <ssd1306_UpdateScreenDMA+0xaa>
		*SSD1306_TxCplt = 0;  // Reset completion flag
 80026ba:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <ssd1306_UpdateScreenDMA+0xb0>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2200      	movs	r2, #0
 80026c0:	701a      	strb	r2, [r3, #0]

		switch (state) {
 80026c2:	4b25      	ldr	r3, [pc, #148]	@ (8002758 <ssd1306_UpdateScreenDMA+0xb4>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	3b01      	subs	r3, #1
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d840      	bhi.n	800274e <ssd1306_UpdateScreenDMA+0xaa>
 80026cc:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <ssd1306_UpdateScreenDMA+0x30>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	080026e5 	.word	0x080026e5
 80026d8:	080026fb 	.word	0x080026fb
 80026dc:	08002709 	.word	0x08002709
 80026e0:	08002717 	.word	0x08002717
		case 1:  // Set page address
			ssd1306_WriteCommandDMA(0xB0 + current_page);
 80026e4:	4b1d      	ldr	r3, [pc, #116]	@ (800275c <ssd1306_UpdateScreenDMA+0xb8>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	3b50      	subs	r3, #80	@ 0x50
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fec5 	bl	800247c <ssd1306_WriteCommandDMA>
			state = 2;
 80026f2:	4b19      	ldr	r3, [pc, #100]	@ (8002758 <ssd1306_UpdateScreenDMA+0xb4>)
 80026f4:	2202      	movs	r2, #2
 80026f6:	701a      	strb	r2, [r3, #0]
			break;
 80026f8:	e029      	b.n	800274e <ssd1306_UpdateScreenDMA+0xaa>
		case 2:  // Set column address low nibble
			ssd1306_WriteCommandDMA(0x00 + SSD1306_X_OFFSET_LOWER);
 80026fa:	2000      	movs	r0, #0
 80026fc:	f7ff febe 	bl	800247c <ssd1306_WriteCommandDMA>
			state = 3;
 8002700:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <ssd1306_UpdateScreenDMA+0xb4>)
 8002702:	2203      	movs	r2, #3
 8002704:	701a      	strb	r2, [r3, #0]
			break;
 8002706:	e022      	b.n	800274e <ssd1306_UpdateScreenDMA+0xaa>
		case 3:  // Set column address high nibble
			ssd1306_WriteCommandDMA(0x10 + SSD1306_X_OFFSET_UPPER);
 8002708:	2010      	movs	r0, #16
 800270a:	f7ff feb7 	bl	800247c <ssd1306_WriteCommandDMA>
			state = 4;
 800270e:	4b12      	ldr	r3, [pc, #72]	@ (8002758 <ssd1306_UpdateScreenDMA+0xb4>)
 8002710:	2204      	movs	r2, #4
 8002712:	701a      	strb	r2, [r3, #0]
			break;
 8002714:	e01b      	b.n	800274e <ssd1306_UpdateScreenDMA+0xaa>
		case 4:  // Write page data
			ssd1306_WriteDataDMA(&SSD1306_Buffer[SSD1306_WIDTH*current_page],SSD1306_WIDTH);
 8002716:	4b11      	ldr	r3, [pc, #68]	@ (800275c <ssd1306_UpdateScreenDMA+0xb8>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	01db      	lsls	r3, r3, #7
 800271c:	4a10      	ldr	r2, [pc, #64]	@ (8002760 <ssd1306_UpdateScreenDMA+0xbc>)
 800271e:	4413      	add	r3, r2
 8002720:	2180      	movs	r1, #128	@ 0x80
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fed0 	bl	80024c8 <ssd1306_WriteDataDMA>
			current_page++;
 8002728:	4b0c      	ldr	r3, [pc, #48]	@ (800275c <ssd1306_UpdateScreenDMA+0xb8>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	3301      	adds	r3, #1
 800272e:	b2da      	uxtb	r2, r3
 8002730:	4b0a      	ldr	r3, [pc, #40]	@ (800275c <ssd1306_UpdateScreenDMA+0xb8>)
 8002732:	701a      	strb	r2, [r3, #0]
			state = 1;  // Start over with next page
 8002734:	4b08      	ldr	r3, [pc, #32]	@ (8002758 <ssd1306_UpdateScreenDMA+0xb4>)
 8002736:	2201      	movs	r2, #1
 8002738:	701a      	strb	r2, [r3, #0]

			if (current_page > 7){//SSD1306_HEIGHT/8) {
 800273a:	4b08      	ldr	r3, [pc, #32]	@ (800275c <ssd1306_UpdateScreenDMA+0xb8>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	2b07      	cmp	r3, #7
 8002740:	d904      	bls.n	800274c <ssd1306_UpdateScreenDMA+0xa8>
				current_page = 0;
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <ssd1306_UpdateScreenDMA+0xb8>)
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
				return 1;
 8002748:	2301      	movs	r3, #1
 800274a:	e001      	b.n	8002750 <ssd1306_UpdateScreenDMA+0xac>
			}
			break;
 800274c:	bf00      	nop
		}
	}
	return 0;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20000710 	.word	0x20000710
 8002758:	2000002c 	.word	0x2000002c
 800275c:	20000b22 	.word	0x20000b22
 8002760:	2000071c 	.word	0x2000071c

08002764 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	4603      	mov	r3, r0
 800276c:	71fb      	strb	r3, [r7, #7]
 800276e:	460b      	mov	r3, r1
 8002770:	71bb      	strb	r3, [r7, #6]
 8002772:	4613      	mov	r3, r2
 8002774:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800277a:	2b00      	cmp	r3, #0
 800277c:	db3d      	blt.n	80027fa <ssd1306_DrawPixel+0x96>
 800277e:	79bb      	ldrb	r3, [r7, #6]
 8002780:	2b3f      	cmp	r3, #63	@ 0x3f
 8002782:	d83a      	bhi.n	80027fa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }

    // Draw in the right color
    if(color == White) {
 8002784:	797b      	ldrb	r3, [r7, #5]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d11a      	bne.n	80027c0 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800278a:	79fa      	ldrb	r2, [r7, #7]
 800278c:	79bb      	ldrb	r3, [r7, #6]
 800278e:	08db      	lsrs	r3, r3, #3
 8002790:	b2d8      	uxtb	r0, r3
 8002792:	4603      	mov	r3, r0
 8002794:	01db      	lsls	r3, r3, #7
 8002796:	4413      	add	r3, r2
 8002798:	4a1b      	ldr	r2, [pc, #108]	@ (8002808 <ssd1306_DrawPixel+0xa4>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	b25a      	sxtb	r2, r3
 800279e:	79bb      	ldrb	r3, [r7, #6]
 80027a0:	f003 0307 	and.w	r3, r3, #7
 80027a4:	2101      	movs	r1, #1
 80027a6:	fa01 f303 	lsl.w	r3, r1, r3
 80027aa:	b25b      	sxtb	r3, r3
 80027ac:	4313      	orrs	r3, r2
 80027ae:	b259      	sxtb	r1, r3
 80027b0:	79fa      	ldrb	r2, [r7, #7]
 80027b2:	4603      	mov	r3, r0
 80027b4:	01db      	lsls	r3, r3, #7
 80027b6:	4413      	add	r3, r2
 80027b8:	b2c9      	uxtb	r1, r1
 80027ba:	4a13      	ldr	r2, [pc, #76]	@ (8002808 <ssd1306_DrawPixel+0xa4>)
 80027bc:	54d1      	strb	r1, [r2, r3]
 80027be:	e01d      	b.n	80027fc <ssd1306_DrawPixel+0x98>
    } else {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80027c0:	79fa      	ldrb	r2, [r7, #7]
 80027c2:	79bb      	ldrb	r3, [r7, #6]
 80027c4:	08db      	lsrs	r3, r3, #3
 80027c6:	b2d8      	uxtb	r0, r3
 80027c8:	4603      	mov	r3, r0
 80027ca:	01db      	lsls	r3, r3, #7
 80027cc:	4413      	add	r3, r2
 80027ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002808 <ssd1306_DrawPixel+0xa4>)
 80027d0:	5cd3      	ldrb	r3, [r2, r3]
 80027d2:	b25a      	sxtb	r2, r3
 80027d4:	79bb      	ldrb	r3, [r7, #6]
 80027d6:	f003 0307 	and.w	r3, r3, #7
 80027da:	2101      	movs	r1, #1
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	b25b      	sxtb	r3, r3
 80027e2:	43db      	mvns	r3, r3
 80027e4:	b25b      	sxtb	r3, r3
 80027e6:	4013      	ands	r3, r2
 80027e8:	b259      	sxtb	r1, r3
 80027ea:	79fa      	ldrb	r2, [r7, #7]
 80027ec:	4603      	mov	r3, r0
 80027ee:	01db      	lsls	r3, r3, #7
 80027f0:	4413      	add	r3, r2
 80027f2:	b2c9      	uxtb	r1, r1
 80027f4:	4a04      	ldr	r2, [pc, #16]	@ (8002808 <ssd1306_DrawPixel+0xa4>)
 80027f6:	54d1      	strb	r1, [r2, r3]
 80027f8:	e000      	b.n	80027fc <ssd1306_DrawPixel+0x98>
        return;
 80027fa:	bf00      	nop
    }
}
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	2000071c 	.word	0x2000071c

0800280c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800280c:	b590      	push	{r4, r7, lr}
 800280e:	b089      	sub	sp, #36	@ 0x24
 8002810:	af00      	add	r7, sp, #0
 8002812:	4604      	mov	r4, r0
 8002814:	4638      	mov	r0, r7
 8002816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800281a:	4623      	mov	r3, r4
 800281c:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	2b1f      	cmp	r3, #31
 8002822:	d902      	bls.n	800282a <ssd1306_WriteChar+0x1e>
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	2b7e      	cmp	r3, #126	@ 0x7e
 8002828:	d901      	bls.n	800282e <ssd1306_WriteChar+0x22>
        return 0;
 800282a:	2300      	movs	r3, #0
 800282c:	e079      	b.n	8002922 <ssd1306_WriteChar+0x116>

    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 800282e:	68bb      	ldr	r3, [r7, #8]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d005      	beq.n	8002840 <ssd1306_WriteChar+0x34>
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	3b20      	subs	r3, #32
 800283a:	4413      	add	r3, r2
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	e000      	b.n	8002842 <ssd1306_WriteChar+0x36>
 8002840:	783b      	ldrb	r3, [r7, #0]
 8002842:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8002844:	4b39      	ldr	r3, [pc, #228]	@ (800292c <ssd1306_WriteChar+0x120>)
 8002846:	881b      	ldrh	r3, [r3, #0]
 8002848:	461a      	mov	r2, r3
 800284a:	7dfb      	ldrb	r3, [r7, #23]
 800284c:	4413      	add	r3, r2
 800284e:	2b80      	cmp	r3, #128	@ 0x80
 8002850:	dc06      	bgt.n	8002860 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002852:	4b36      	ldr	r3, [pc, #216]	@ (800292c <ssd1306_WriteChar+0x120>)
 8002854:	885b      	ldrh	r3, [r3, #2]
 8002856:	461a      	mov	r2, r3
 8002858:	787b      	ldrb	r3, [r7, #1]
 800285a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 800285c:	2b40      	cmp	r3, #64	@ 0x40
 800285e:	dd01      	ble.n	8002864 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8002860:	2300      	movs	r3, #0
 8002862:	e05e      	b.n	8002922 <ssd1306_WriteChar+0x116>
    }

    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8002864:	2300      	movs	r3, #0
 8002866:	61fb      	str	r3, [r7, #28]
 8002868:	e04d      	b.n	8002906 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	7bfb      	ldrb	r3, [r7, #15]
 800286e:	3b20      	subs	r3, #32
 8002870:	7879      	ldrb	r1, [r7, #1]
 8002872:	fb01 f303 	mul.w	r3, r1, r3
 8002876:	4619      	mov	r1, r3
 8002878:	69fb      	ldr	r3, [r7, #28]
 800287a:	440b      	add	r3, r1
 800287c:	005b      	lsls	r3, r3, #1
 800287e:	4413      	add	r3, r2
 8002880:	881b      	ldrh	r3, [r3, #0]
 8002882:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8002884:	2300      	movs	r3, #0
 8002886:	61bb      	str	r3, [r7, #24]
 8002888:	e036      	b.n	80028f8 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 800288a:	693a      	ldr	r2, [r7, #16]
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d013      	beq.n	80028c2 <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800289a:	4b24      	ldr	r3, [pc, #144]	@ (800292c <ssd1306_WriteChar+0x120>)
 800289c:	881b      	ldrh	r3, [r3, #0]
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	b2d8      	uxtb	r0, r3
 80028a8:	4b20      	ldr	r3, [pc, #128]	@ (800292c <ssd1306_WriteChar+0x120>)
 80028aa:	885b      	ldrh	r3, [r3, #2]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80028ba:	4619      	mov	r1, r3
 80028bc:	f7ff ff52 	bl	8002764 <ssd1306_DrawPixel>
 80028c0:	e017      	b.n	80028f2 <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80028c2:	4b1a      	ldr	r3, [pc, #104]	@ (800292c <ssd1306_WriteChar+0x120>)
 80028c4:	881b      	ldrh	r3, [r3, #0]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	b2d8      	uxtb	r0, r3
 80028d0:	4b16      	ldr	r3, [pc, #88]	@ (800292c <ssd1306_WriteChar+0x120>)
 80028d2:	885b      	ldrh	r3, [r3, #2]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	4413      	add	r3, r2
 80028dc:	b2d9      	uxtb	r1, r3
 80028de:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	bf0c      	ite	eq
 80028e6:	2301      	moveq	r3, #1
 80028e8:	2300      	movne	r3, #0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	461a      	mov	r2, r3
 80028ee:	f7ff ff39 	bl	8002764 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	3301      	adds	r3, #1
 80028f6:	61bb      	str	r3, [r7, #24]
 80028f8:	7dfb      	ldrb	r3, [r7, #23]
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d3c4      	bcc.n	800288a <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	3301      	adds	r3, #1
 8002904:	61fb      	str	r3, [r7, #28]
 8002906:	787b      	ldrb	r3, [r7, #1]
 8002908:	461a      	mov	r2, r3
 800290a:	69fb      	ldr	r3, [r7, #28]
 800290c:	4293      	cmp	r3, r2
 800290e:	d3ac      	bcc.n	800286a <ssd1306_WriteChar+0x5e>
            }
        }
    }

    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8002910:	4b06      	ldr	r3, [pc, #24]	@ (800292c <ssd1306_WriteChar+0x120>)
 8002912:	881a      	ldrh	r2, [r3, #0]
 8002914:	7dfb      	ldrb	r3, [r7, #23]
 8002916:	b29b      	uxth	r3, r3
 8002918:	4413      	add	r3, r2
 800291a:	b29a      	uxth	r2, r3
 800291c:	4b03      	ldr	r3, [pc, #12]	@ (800292c <ssd1306_WriteChar+0x120>)
 800291e:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 8002920:	7bfb      	ldrb	r3, [r7, #15]
}
 8002922:	4618      	mov	r0, r3
 8002924:	3724      	adds	r7, #36	@ 0x24
 8002926:	46bd      	mov	sp, r7
 8002928:	bd90      	pop	{r4, r7, pc}
 800292a:	bf00      	nop
 800292c:	20000b1c 	.word	0x20000b1c

08002930 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002930:	b580      	push	{r7, lr}
 8002932:	b086      	sub	sp, #24
 8002934:	af02      	add	r7, sp, #8
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	4638      	mov	r0, r7
 800293a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800293e:	e013      	b.n	8002968 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	7818      	ldrb	r0, [r3, #0]
 8002944:	7e3b      	ldrb	r3, [r7, #24]
 8002946:	9300      	str	r3, [sp, #0]
 8002948:	463b      	mov	r3, r7
 800294a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800294c:	f7ff ff5e 	bl	800280c <ssd1306_WriteChar>
 8002950:	4603      	mov	r3, r0
 8002952:	461a      	mov	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	429a      	cmp	r2, r3
 800295a:	d002      	beq.n	8002962 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	e008      	b.n	8002974 <ssd1306_WriteString+0x44>
        }
        str++;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	3301      	adds	r3, #1
 8002966:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1e7      	bne.n	8002940 <ssd1306_WriteString+0x10>
    }

    // Everything ok
    return *str;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	781b      	ldrb	r3, [r3, #0]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	460a      	mov	r2, r1
 8002986:	71fb      	strb	r3, [r7, #7]
 8002988:	4613      	mov	r3, r2
 800298a:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	b29a      	uxth	r2, r3
 8002990:	4b05      	ldr	r3, [pc, #20]	@ (80029a8 <ssd1306_SetCursor+0x2c>)
 8002992:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8002994:	79bb      	ldrb	r3, [r7, #6]
 8002996:	b29a      	uxth	r2, r3
 8002998:	4b03      	ldr	r3, [pc, #12]	@ (80029a8 <ssd1306_SetCursor+0x2c>)
 800299a:	805a      	strh	r2, [r3, #2]
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	20000b1c 	.word	0x20000b1c

080029ac <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80029ac:	b590      	push	{r4, r7, lr}
 80029ae:	b089      	sub	sp, #36	@ 0x24
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	4604      	mov	r4, r0
 80029b4:	4608      	mov	r0, r1
 80029b6:	4611      	mov	r1, r2
 80029b8:	461a      	mov	r2, r3
 80029ba:	4623      	mov	r3, r4
 80029bc:	71fb      	strb	r3, [r7, #7]
 80029be:	4603      	mov	r3, r0
 80029c0:	71bb      	strb	r3, [r7, #6]
 80029c2:	460b      	mov	r3, r1
 80029c4:	717b      	strb	r3, [r7, #5]
 80029c6:	4613      	mov	r3, r2
 80029c8:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 80029ca:	797a      	ldrb	r2, [r7, #5]
 80029cc:	79fb      	ldrb	r3, [r7, #7]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	bfb8      	it	lt
 80029d4:	425b      	neglt	r3, r3
 80029d6:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 80029d8:	793a      	ldrb	r2, [r7, #4]
 80029da:	79bb      	ldrb	r3, [r7, #6]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	bfb8      	it	lt
 80029e2:	425b      	neglt	r3, r3
 80029e4:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80029e6:	79fa      	ldrb	r2, [r7, #7]
 80029e8:	797b      	ldrb	r3, [r7, #5]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d201      	bcs.n	80029f2 <ssd1306_Line+0x46>
 80029ee:	2301      	movs	r3, #1
 80029f0:	e001      	b.n	80029f6 <ssd1306_Line+0x4a>
 80029f2:	f04f 33ff 	mov.w	r3, #4294967295
 80029f6:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80029f8:	79ba      	ldrb	r2, [r7, #6]
 80029fa:	793b      	ldrb	r3, [r7, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d201      	bcs.n	8002a04 <ssd1306_Line+0x58>
 8002a00:	2301      	movs	r3, #1
 8002a02:	e001      	b.n	8002a08 <ssd1306_Line+0x5c>
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	61fb      	str	r3, [r7, #28]
    int32_t error2;

    ssd1306_DrawPixel(x2, y2, color);
 8002a12:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002a16:	7939      	ldrb	r1, [r7, #4]
 8002a18:	797b      	ldrb	r3, [r7, #5]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fea2 	bl	8002764 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8002a20:	e024      	b.n	8002a6c <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8002a22:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002a26:	79b9      	ldrb	r1, [r7, #6]
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fe9a 	bl	8002764 <ssd1306_DrawPixel>
        error2 = error * 2;
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	005b      	lsls	r3, r3, #1
 8002a34:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	425b      	negs	r3, r3
 8002a3a:	68ba      	ldr	r2, [r7, #8]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	dd08      	ble.n	8002a52 <ssd1306_Line+0xa6>
            error -= deltaY;
 8002a40:	69fa      	ldr	r2, [r7, #28]
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	79fb      	ldrb	r3, [r7, #7]
 8002a4e:	4413      	add	r3, r2
 8002a50:	71fb      	strb	r3, [r7, #7]
        }

        if(error2 < deltaX) {
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	429a      	cmp	r2, r3
 8002a58:	da08      	bge.n	8002a6c <ssd1306_Line+0xc0>
            error += deltaX;
 8002a5a:	69fa      	ldr	r2, [r7, #28]
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	4413      	add	r3, r2
 8002a60:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	79bb      	ldrb	r3, [r7, #6]
 8002a68:	4413      	add	r3, r2
 8002a6a:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8002a6c:	79fa      	ldrb	r2, [r7, #7]
 8002a6e:	797b      	ldrb	r3, [r7, #5]
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d1d6      	bne.n	8002a22 <ssd1306_Line+0x76>
 8002a74:	79ba      	ldrb	r2, [r7, #6]
 8002a76:	793b      	ldrb	r3, [r7, #4]
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d1d2      	bne.n	8002a22 <ssd1306_Line+0x76>
        }
    }
    return;
 8002a7c:	bf00      	nop
}
 8002a7e:	3724      	adds	r7, #36	@ 0x24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd90      	pop	{r4, r7, pc}

08002a84 <ssd1306_FillRectangle>:

    return;
}

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b085      	sub	sp, #20
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4604      	mov	r4, r0
 8002a8c:	4608      	mov	r0, r1
 8002a8e:	4611      	mov	r1, r2
 8002a90:	461a      	mov	r2, r3
 8002a92:	4623      	mov	r3, r4
 8002a94:	71fb      	strb	r3, [r7, #7]
 8002a96:	4603      	mov	r3, r0
 8002a98:	71bb      	strb	r3, [r7, #6]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	717b      	strb	r3, [r7, #5]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8002aa2:	79fa      	ldrb	r2, [r7, #7]
 8002aa4:	797b      	ldrb	r3, [r7, #5]
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	bf28      	it	cs
 8002aaa:	4613      	movcs	r3, r2
 8002aac:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8002aae:	797a      	ldrb	r2, [r7, #5]
 8002ab0:	79fb      	ldrb	r3, [r7, #7]
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	bf38      	it	cc
 8002ab6:	4613      	movcc	r3, r2
 8002ab8:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8002aba:	79ba      	ldrb	r2, [r7, #6]
 8002abc:	793b      	ldrb	r3, [r7, #4]
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	bf28      	it	cs
 8002ac2:	4613      	movcs	r3, r2
 8002ac4:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8002ac6:	793a      	ldrb	r2, [r7, #4]
 8002ac8:	79bb      	ldrb	r3, [r7, #6]
 8002aca:	4293      	cmp	r3, r2
 8002acc:	bf38      	it	cc
 8002ace:	4613      	movcc	r3, r2
 8002ad0:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002ad2:	7afb      	ldrb	r3, [r7, #11]
 8002ad4:	73fb      	strb	r3, [r7, #15]
 8002ad6:	e017      	b.n	8002b08 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002ad8:	7b7b      	ldrb	r3, [r7, #13]
 8002ada:	73bb      	strb	r3, [r7, #14]
 8002adc:	e009      	b.n	8002af2 <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8002ade:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ae2:	7bf9      	ldrb	r1, [r7, #15]
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fe3c 	bl	8002764 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	3301      	adds	r3, #1
 8002af0:	73bb      	strb	r3, [r7, #14]
 8002af2:	7bba      	ldrb	r2, [r7, #14]
 8002af4:	7b3b      	ldrb	r3, [r7, #12]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	d803      	bhi.n	8002b02 <ssd1306_FillRectangle+0x7e>
 8002afa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	daed      	bge.n	8002ade <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8002b02:	7bfb      	ldrb	r3, [r7, #15]
 8002b04:	3301      	adds	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
 8002b08:	7bfa      	ldrb	r2, [r7, #15]
 8002b0a:	7abb      	ldrb	r3, [r7, #10]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d803      	bhi.n	8002b18 <ssd1306_FillRectangle+0x94>
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b3f      	cmp	r3, #63	@ 0x3f
 8002b14:	d9e0      	bls.n	8002ad8 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
}
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd90      	pop	{r4, r7, pc}

08002b20 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8002b2a:	2381      	movs	r3, #129	@ 0x81
 8002b2c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7ff fc91 	bl	8002458 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8002b36:	79fb      	ldrb	r3, [r7, #7]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f7ff fc8d 	bl	8002458 <ssd1306_WriteCommand>
}
 8002b3e:	bf00      	nop
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d005      	beq.n	8002b64 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002b58:	23af      	movs	r3, #175	@ 0xaf
 8002b5a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002b5c:	4b08      	ldr	r3, [pc, #32]	@ (8002b80 <ssd1306_SetDisplayOn+0x38>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	715a      	strb	r2, [r3, #5]
 8002b62:	e004      	b.n	8002b6e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002b64:	23ae      	movs	r3, #174	@ 0xae
 8002b66:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002b68:	4b05      	ldr	r3, [pc, #20]	@ (8002b80 <ssd1306_SetDisplayOn+0x38>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7ff fc71 	bl	8002458 <ssd1306_WriteCommand>
}
 8002b76:	bf00      	nop
 8002b78:	3710      	adds	r7, #16
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	20000b1c 	.word	0x20000b1c

08002b84 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	4b10      	ldr	r3, [pc, #64]	@ (8002bd0 <HAL_MspInit+0x4c>)
 8002b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b92:	4a0f      	ldr	r2, [pc, #60]	@ (8002bd0 <HAL_MspInit+0x4c>)
 8002b94:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b98:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b9a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bd0 <HAL_MspInit+0x4c>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	603b      	str	r3, [r7, #0]
 8002baa:	4b09      	ldr	r3, [pc, #36]	@ (8002bd0 <HAL_MspInit+0x4c>)
 8002bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bae:	4a08      	ldr	r2, [pc, #32]	@ (8002bd0 <HAL_MspInit+0x4c>)
 8002bb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bb4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bb6:	4b06      	ldr	r3, [pc, #24]	@ (8002bd0 <HAL_MspInit+0x4c>)
 8002bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bbe:	603b      	str	r3, [r7, #0]
 8002bc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr
 8002bce:	bf00      	nop
 8002bd0:	40023800 	.word	0x40023800

08002bd4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b08a      	sub	sp, #40	@ 0x28
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bdc:	f107 0314 	add.w	r3, r7, #20
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
 8002be6:	609a      	str	r2, [r3, #8]
 8002be8:	60da      	str	r2, [r3, #12]
 8002bea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a32      	ldr	r2, [pc, #200]	@ (8002cbc <HAL_ADC_MspInit+0xe8>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d15e      	bne.n	8002cb4 <HAL_ADC_MspInit+0xe0>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	4b31      	ldr	r3, [pc, #196]	@ (8002cc0 <HAL_ADC_MspInit+0xec>)
 8002bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfe:	4a30      	ldr	r2, [pc, #192]	@ (8002cc0 <HAL_ADC_MspInit+0xec>)
 8002c00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c04:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c06:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc0 <HAL_ADC_MspInit+0xec>)
 8002c08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0e:	613b      	str	r3, [r7, #16]
 8002c10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc0 <HAL_ADC_MspInit+0xec>)
 8002c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1a:	4a29      	ldr	r2, [pc, #164]	@ (8002cc0 <HAL_ADC_MspInit+0xec>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c22:	4b27      	ldr	r3, [pc, #156]	@ (8002cc0 <HAL_ADC_MspInit+0xec>)
 8002c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c26:	f003 0301 	and.w	r3, r3, #1
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8002c2e:	23ff      	movs	r3, #255	@ 0xff
 8002c30:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c32:	2303      	movs	r3, #3
 8002c34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c3a:	f107 0314 	add.w	r3, r7, #20
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4820      	ldr	r0, [pc, #128]	@ (8002cc4 <HAL_ADC_MspInit+0xf0>)
 8002c42:	f001 ffbb 	bl	8004bbc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c48:	4a20      	ldr	r2, [pc, #128]	@ (8002ccc <HAL_ADC_MspInit+0xf8>)
 8002c4a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002c4c:	4b1e      	ldr	r3, [pc, #120]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c4e:	2200      	movs	r2, #0
 8002c50:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c52:	4b1d      	ldr	r3, [pc, #116]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c58:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c5e:	4b1a      	ldr	r3, [pc, #104]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c60:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002c64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c66:	4b18      	ldr	r3, [pc, #96]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c68:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002c6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002c6e:	4b16      	ldr	r3, [pc, #88]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c70:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002c76:	4b14      	ldr	r3, [pc, #80]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002c7c:	4b12      	ldr	r3, [pc, #72]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c82:	4b11      	ldr	r3, [pc, #68]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c84:	2200      	movs	r2, #0
 8002c86:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002c88:	480f      	ldr	r0, [pc, #60]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c8a:	f001 fbeb 	bl	8004464 <HAL_DMA_Init>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8002c94:	f7ff f962 	bl	8001f5c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	4a0b      	ldr	r2, [pc, #44]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002c9c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8002cc8 <HAL_ADC_MspInit+0xf4>)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	2100      	movs	r1, #0
 8002ca8:	2012      	movs	r0, #18
 8002caa:	f001 fba4 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002cae:	2012      	movs	r0, #18
 8002cb0:	f001 fbbd 	bl	800442e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002cb4:	bf00      	nop
 8002cb6:	3728      	adds	r7, #40	@ 0x28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	40012000 	.word	0x40012000
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	40020000 	.word	0x40020000
 8002cc8:	200001e8 	.word	0x200001e8
 8002ccc:	40026410 	.word	0x40026410

08002cd0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd8:	f107 0314 	add.w	r3, r7, #20
 8002cdc:	2200      	movs	r2, #0
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
 8002ce4:	60da      	str	r2, [r3, #12]
 8002ce6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a4f      	ldr	r2, [pc, #316]	@ (8002e2c <HAL_I2C_MspInit+0x15c>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	f040 8097 	bne.w	8002e22 <HAL_I2C_MspInit+0x152>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e30 <HAL_I2C_MspInit+0x160>)
 8002cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8002e30 <HAL_I2C_MspInit+0x160>)
 8002cfe:	f043 0302 	orr.w	r3, r3, #2
 8002d02:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d04:	4b4a      	ldr	r3, [pc, #296]	@ (8002e30 <HAL_I2C_MspInit+0x160>)
 8002d06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	613b      	str	r3, [r7, #16]
 8002d0e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d10:	23c0      	movs	r3, #192	@ 0xc0
 8002d12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d14:	2312      	movs	r3, #18
 8002d16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d20:	2304      	movs	r3, #4
 8002d22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d24:	f107 0314 	add.w	r3, r7, #20
 8002d28:	4619      	mov	r1, r3
 8002d2a:	4842      	ldr	r0, [pc, #264]	@ (8002e34 <HAL_I2C_MspInit+0x164>)
 8002d2c:	f001 ff46 	bl	8004bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d30:	2300      	movs	r3, #0
 8002d32:	60fb      	str	r3, [r7, #12]
 8002d34:	4b3e      	ldr	r3, [pc, #248]	@ (8002e30 <HAL_I2C_MspInit+0x160>)
 8002d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d38:	4a3d      	ldr	r2, [pc, #244]	@ (8002e30 <HAL_I2C_MspInit+0x160>)
 8002d3a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002d3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d40:	4b3b      	ldr	r3, [pc, #236]	@ (8002e30 <HAL_I2C_MspInit+0x160>)
 8002d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002d4c:	4b3a      	ldr	r3, [pc, #232]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d4e:	4a3b      	ldr	r2, [pc, #236]	@ (8002e3c <HAL_I2C_MspInit+0x16c>)
 8002d50:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002d52:	4b39      	ldr	r3, [pc, #228]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d54:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d58:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d5a:	4b37      	ldr	r3, [pc, #220]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d60:	4b35      	ldr	r3, [pc, #212]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d66:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d68:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002d6c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d6e:	4b32      	ldr	r3, [pc, #200]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d74:	4b30      	ldr	r3, [pc, #192]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002d7a:	4b2f      	ldr	r3, [pc, #188]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d80:	4b2d      	ldr	r3, [pc, #180]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d86:	4b2c      	ldr	r3, [pc, #176]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002d8c:	482a      	ldr	r0, [pc, #168]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002d8e:	f001 fb69 	bl	8004464 <HAL_DMA_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_I2C_MspInit+0xcc>
    {
      Error_Handler();
 8002d98:	f7ff f8e0 	bl	8001f5c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a26      	ldr	r2, [pc, #152]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002da0:	639a      	str	r2, [r3, #56]	@ 0x38
 8002da2:	4a25      	ldr	r2, [pc, #148]	@ (8002e38 <HAL_I2C_MspInit+0x168>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream1;
 8002da8:	4b25      	ldr	r3, [pc, #148]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002daa:	4a26      	ldr	r2, [pc, #152]	@ (8002e44 <HAL_I2C_MspInit+0x174>)
 8002dac:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_0;
 8002dae:	4b24      	ldr	r3, [pc, #144]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002db4:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002db6:	2240      	movs	r2, #64	@ 0x40
 8002db8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dba:	4b21      	ldr	r3, [pc, #132]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc0:	4b1f      	ldr	r3, [pc, #124]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002dc2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002dc6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dc8:	4b1d      	ldr	r3, [pc, #116]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dce:	4b1c      	ldr	r3, [pc, #112]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002dd4:	4b1a      	ldr	r3, [pc, #104]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dda:	4b19      	ldr	r3, [pc, #100]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de0:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002de6:	4816      	ldr	r0, [pc, #88]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002de8:	f001 fb3c 	bl	8004464 <HAL_DMA_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_I2C_MspInit+0x126>
    {
      Error_Handler();
 8002df2:	f7ff f8b3 	bl	8001f5c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a11      	ldr	r2, [pc, #68]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002dfa:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dfc:	4a10      	ldr	r2, [pc, #64]	@ (8002e40 <HAL_I2C_MspInit+0x170>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	201f      	movs	r0, #31
 8002e08:	f001 faf5 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002e0c:	201f      	movs	r0, #31
 8002e0e:	f001 fb0e 	bl	800442e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002e12:	2200      	movs	r2, #0
 8002e14:	2100      	movs	r1, #0
 8002e16:	2020      	movs	r0, #32
 8002e18:	f001 faed 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002e1c:	2020      	movs	r0, #32
 8002e1e:	f001 fb06 	bl	800442e <HAL_NVIC_EnableIRQ>

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002e22:	bf00      	nop
 8002e24:	3728      	adds	r7, #40	@ 0x28
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40005400 	.word	0x40005400
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40020400 	.word	0x40020400
 8002e38:	2000029c 	.word	0x2000029c
 8002e3c:	40026010 	.word	0x40026010
 8002e40:	200002fc 	.word	0x200002fc
 8002e44:	40026028 	.word	0x40026028

08002e48 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a40      	ldr	r2, [pc, #256]	@ (8002f58 <HAL_TIM_Base_MspInit+0x110>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d12e      	bne.n	8002eb8 <HAL_TIM_Base_MspInit+0x70>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	617b      	str	r3, [r7, #20]
 8002e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e62:	4a3e      	ldr	r2, [pc, #248]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002e64:	f043 0301 	orr.w	r3, r3, #1
 8002e68:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e6e:	f003 0301 	and.w	r3, r3, #1
 8002e72:	617b      	str	r3, [r7, #20]
 8002e74:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2018      	movs	r0, #24
 8002e7c:	f001 fabb 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002e80:	2018      	movs	r0, #24
 8002e82:	f001 fad4 	bl	800442e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002e86:	2200      	movs	r2, #0
 8002e88:	2100      	movs	r1, #0
 8002e8a:	2019      	movs	r0, #25
 8002e8c:	f001 fab3 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002e90:	2019      	movs	r0, #25
 8002e92:	f001 facc 	bl	800442e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002e96:	2200      	movs	r2, #0
 8002e98:	2100      	movs	r1, #0
 8002e9a:	201a      	movs	r0, #26
 8002e9c:	f001 faab 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8002ea0:	201a      	movs	r0, #26
 8002ea2:	f001 fac4 	bl	800442e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	201b      	movs	r0, #27
 8002eac:	f001 faa3 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002eb0:	201b      	movs	r0, #27
 8002eb2:	f001 fabc 	bl	800442e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002eb6:	e04a      	b.n	8002f4e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ec0:	d116      	bne.n	8002ef0 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	613b      	str	r3, [r7, #16]
 8002ec6:	4b25      	ldr	r3, [pc, #148]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eca:	4a24      	ldr	r2, [pc, #144]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ed2:	4b22      	ldr	r3, [pc, #136]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002ed4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	613b      	str	r3, [r7, #16]
 8002edc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002ede:	2200      	movs	r2, #0
 8002ee0:	2100      	movs	r1, #0
 8002ee2:	201c      	movs	r0, #28
 8002ee4:	f001 fa87 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ee8:	201c      	movs	r0, #28
 8002eea:	f001 faa0 	bl	800442e <HAL_NVIC_EnableIRQ>
}
 8002eee:	e02e      	b.n	8002f4e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8002f60 <HAL_TIM_Base_MspInit+0x118>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d116      	bne.n	8002f28 <HAL_TIM_Base_MspInit+0xe0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b17      	ldr	r3, [pc, #92]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	4a16      	ldr	r2, [pc, #88]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002f04:	f043 0302 	orr.w	r3, r3, #2
 8002f08:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f0a:	4b14      	ldr	r3, [pc, #80]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f16:	2200      	movs	r2, #0
 8002f18:	2100      	movs	r1, #0
 8002f1a:	201d      	movs	r0, #29
 8002f1c:	f001 fa6b 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f20:	201d      	movs	r0, #29
 8002f22:	f001 fa84 	bl	800442e <HAL_NVIC_EnableIRQ>
}
 8002f26:	e012      	b.n	8002f4e <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a0d      	ldr	r2, [pc, #52]	@ (8002f64 <HAL_TIM_Base_MspInit+0x11c>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d10d      	bne.n	8002f4e <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	60bb      	str	r3, [r7, #8]
 8002f36:	4b09      	ldr	r3, [pc, #36]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f3a:	4a08      	ldr	r2, [pc, #32]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002f3c:	f043 0304 	orr.w	r3, r3, #4
 8002f40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f42:	4b06      	ldr	r3, [pc, #24]	@ (8002f5c <HAL_TIM_Base_MspInit+0x114>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
}
 8002f4e:	bf00      	nop
 8002f50:	3718      	adds	r7, #24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40000400 	.word	0x40000400
 8002f64:	40000800 	.word	0x40000800

08002f68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f70:	f107 030c 	add.w	r3, r7, #12
 8002f74:	2200      	movs	r2, #0
 8002f76:	601a      	str	r2, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
 8002f7a:	609a      	str	r2, [r3, #8]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a12      	ldr	r2, [pc, #72]	@ (8002fd0 <HAL_TIM_MspPostInit+0x68>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d11d      	bne.n	8002fc6 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	60bb      	str	r3, [r7, #8]
 8002f8e:	4b11      	ldr	r3, [pc, #68]	@ (8002fd4 <HAL_TIM_MspPostInit+0x6c>)
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	4a10      	ldr	r2, [pc, #64]	@ (8002fd4 <HAL_TIM_MspPostInit+0x6c>)
 8002f94:	f043 0302 	orr.w	r3, r3, #2
 8002f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <HAL_TIM_MspPostInit+0x6c>)
 8002f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f9e:	f003 0302 	and.w	r3, r3, #2
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002fa6:	2333      	movs	r3, #51	@ 0x33
 8002fa8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002faa:	2302      	movs	r3, #2
 8002fac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fba:	f107 030c 	add.w	r3, r7, #12
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4805      	ldr	r0, [pc, #20]	@ (8002fd8 <HAL_TIM_MspPostInit+0x70>)
 8002fc2:	f001 fdfb 	bl	8004bbc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002fc6:	bf00      	nop
 8002fc8:	3720      	adds	r7, #32
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	40000400 	.word	0x40000400
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40020400 	.word	0x40020400

08002fdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002fe0:	bf00      	nop
 8002fe2:	e7fd      	b.n	8002fe0 <NMI_Handler+0x4>

08002fe4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002fe8:	bf00      	nop
 8002fea:	e7fd      	b.n	8002fe8 <HardFault_Handler+0x4>

08002fec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ff0:	bf00      	nop
 8002ff2:	e7fd      	b.n	8002ff0 <MemManage_Handler+0x4>

08002ff4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ff8:	bf00      	nop
 8002ffa:	e7fd      	b.n	8002ff8 <BusFault_Handler+0x4>

08002ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003000:	bf00      	nop
 8003002:	e7fd      	b.n	8003000 <UsageFault_Handler+0x4>

08003004 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003004:	b480      	push	{r7}
 8003006:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003008:	bf00      	nop
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr

08003012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003016:	bf00      	nop
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003024:	bf00      	nop
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr

0800302e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800302e:	b580      	push	{r7, lr}
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003032:	f000 fba1 	bl	8003778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003036:	bf00      	nop
 8003038:	bd80      	pop	{r7, pc}
	...

0800303c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003040:	4802      	ldr	r0, [pc, #8]	@ (800304c <DMA1_Stream0_IRQHandler+0x10>)
 8003042:	f001 fb37 	bl	80046b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003046:	bf00      	nop
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	2000029c 	.word	0x2000029c

08003050 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8003054:	4802      	ldr	r0, [pc, #8]	@ (8003060 <DMA1_Stream1_IRQHandler+0x10>)
 8003056:	f001 fb2d 	bl	80046b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	200002fc 	.word	0x200002fc

08003064 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003068:	4802      	ldr	r0, [pc, #8]	@ (8003074 <ADC_IRQHandler+0x10>)
 800306a:	f000 fc0c 	bl	8003886 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800306e:	bf00      	nop
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	200001a0 	.word	0x200001a0

08003078 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800307c:	4802      	ldr	r0, [pc, #8]	@ (8003088 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800307e:	f006 fd8e 	bl	8009b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003082:	bf00      	nop
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	2000035c 	.word	0x2000035c

0800308c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003090:	4802      	ldr	r0, [pc, #8]	@ (800309c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003092:	f006 fd84 	bl	8009b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	2000035c 	.word	0x2000035c

080030a0 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030a4:	4802      	ldr	r0, [pc, #8]	@ (80030b0 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 80030a6:	f006 fd7a 	bl	8009b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000035c 	.word	0x2000035c

080030b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80030b8:	4802      	ldr	r0, [pc, #8]	@ (80030c4 <TIM1_CC_IRQHandler+0x10>)
 80030ba:	f006 fd70 	bl	8009b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80030be:	bf00      	nop
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	2000035c 	.word	0x2000035c

080030c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030cc:	4802      	ldr	r0, [pc, #8]	@ (80030d8 <TIM2_IRQHandler+0x10>)
 80030ce:	f006 fd66 	bl	8009b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030d2:	bf00      	nop
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200003a4 	.word	0x200003a4

080030dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80030e0:	4802      	ldr	r0, [pc, #8]	@ (80030ec <TIM3_IRQHandler+0x10>)
 80030e2:	f006 fd5c 	bl	8009b9e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80030e6:	bf00      	nop
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	200003ec 	.word	0x200003ec

080030f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80030f4:	4802      	ldr	r0, [pc, #8]	@ (8003100 <I2C1_EV_IRQHandler+0x10>)
 80030f6:	f002 fc5b 	bl	80059b0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80030fa:	bf00      	nop
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	20000248 	.word	0x20000248

08003104 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003108:	4802      	ldr	r0, [pc, #8]	@ (8003114 <I2C1_ER_IRQHandler+0x10>)
 800310a:	f002 fdc2 	bl	8005c92 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800310e:	bf00      	nop
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000248 	.word	0x20000248

08003118 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800311c:	4802      	ldr	r0, [pc, #8]	@ (8003128 <DMA2_Stream0_IRQHandler+0x10>)
 800311e:	f001 fac9 	bl	80046b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003122:	bf00      	nop
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	200001e8 	.word	0x200001e8

0800312c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003130:	4802      	ldr	r0, [pc, #8]	@ (800313c <OTG_FS_IRQHandler+0x10>)
 8003132:	f004 fed7 	bl	8007ee4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003136:	bf00      	nop
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	20001414 	.word	0x20001414

08003140 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b086      	sub	sp, #24
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003148:	4a14      	ldr	r2, [pc, #80]	@ (800319c <_sbrk+0x5c>)
 800314a:	4b15      	ldr	r3, [pc, #84]	@ (80031a0 <_sbrk+0x60>)
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003154:	4b13      	ldr	r3, [pc, #76]	@ (80031a4 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d102      	bne.n	8003162 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800315c:	4b11      	ldr	r3, [pc, #68]	@ (80031a4 <_sbrk+0x64>)
 800315e:	4a12      	ldr	r2, [pc, #72]	@ (80031a8 <_sbrk+0x68>)
 8003160:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003162:	4b10      	ldr	r3, [pc, #64]	@ (80031a4 <_sbrk+0x64>)
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	429a      	cmp	r2, r3
 800316e:	d207      	bcs.n	8003180 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003170:	f00b fcb2 	bl	800ead8 <__errno>
 8003174:	4603      	mov	r3, r0
 8003176:	220c      	movs	r2, #12
 8003178:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295
 800317e:	e009      	b.n	8003194 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003180:	4b08      	ldr	r3, [pc, #32]	@ (80031a4 <_sbrk+0x64>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003186:	4b07      	ldr	r3, [pc, #28]	@ (80031a4 <_sbrk+0x64>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4413      	add	r3, r2
 800318e:	4a05      	ldr	r2, [pc, #20]	@ (80031a4 <_sbrk+0x64>)
 8003190:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	4618      	mov	r0, r3
 8003196:	3718      	adds	r7, #24
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}
 800319c:	20020000 	.word	0x20020000
 80031a0:	00000400 	.word	0x00000400
 80031a4:	20000b24 	.word	0x20000b24
 80031a8:	20001c60 	.word	0x20001c60

080031ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031b0:	4b06      	ldr	r3, [pc, #24]	@ (80031cc <SystemInit+0x20>)
 80031b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b6:	4a05      	ldr	r2, [pc, #20]	@ (80031cc <SystemInit+0x20>)
 80031b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80031bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <unerPrtcl_PutHeaderOnTx>:


//Function definitions

uint8_t unerPrtcl_PutHeaderOnTx(_sTx  *dataTx, uint8_t ID, uint8_t frameLength)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	460b      	mov	r3, r1
 80031da:	70fb      	strb	r3, [r7, #3]
 80031dc:	4613      	mov	r3, r2
 80031de:	70bb      	strb	r3, [r7, #2]
	frameLength++;
 80031e0:	78bb      	ldrb	r3, [r7, #2]
 80031e2:	3301      	adds	r3, #1
 80031e4:	70bb      	strb	r3, [r7, #2]
    dataTx->chk = 0;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	725a      	strb	r2, [r3, #9]
    dataTx->indexData = dataTx->indexW;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	795a      	ldrb	r2, [r3, #5]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	721a      	strb	r2, [r3, #8]

    dataTx->buff[dataTx->indexW++]='U';
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	795b      	ldrb	r3, [r3, #5]
 80031fc:	1c59      	adds	r1, r3, #1
 80031fe:	b2c8      	uxtb	r0, r1
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	7148      	strb	r0, [r1, #5]
 8003204:	4413      	add	r3, r2
 8003206:	2255      	movs	r2, #85	@ 0x55
 8003208:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	795a      	ldrb	r2, [r3, #5]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	799b      	ldrb	r3, [r3, #6]
 8003212:	4013      	ands	r3, r2
 8003214:	b2da      	uxtb	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='N';
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	795b      	ldrb	r3, [r3, #5]
 8003222:	1c59      	adds	r1, r3, #1
 8003224:	b2c8      	uxtb	r0, r1
 8003226:	6879      	ldr	r1, [r7, #4]
 8003228:	7148      	strb	r0, [r1, #5]
 800322a:	4413      	add	r3, r2
 800322c:	224e      	movs	r2, #78	@ 0x4e
 800322e:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	795a      	ldrb	r2, [r3, #5]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	799b      	ldrb	r3, [r3, #6]
 8003238:	4013      	ands	r3, r2
 800323a:	b2da      	uxtb	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='E';
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	795b      	ldrb	r3, [r3, #5]
 8003248:	1c59      	adds	r1, r3, #1
 800324a:	b2c8      	uxtb	r0, r1
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	7148      	strb	r0, [r1, #5]
 8003250:	4413      	add	r3, r2
 8003252:	2245      	movs	r2, #69	@ 0x45
 8003254:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	795a      	ldrb	r2, [r3, #5]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	799b      	ldrb	r3, [r3, #6]
 800325e:	4013      	ands	r3, r2
 8003260:	b2da      	uxtb	r2, r3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]='R';
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	795b      	ldrb	r3, [r3, #5]
 800326e:	1c59      	adds	r1, r3, #1
 8003270:	b2c8      	uxtb	r0, r1
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	7148      	strb	r0, [r1, #5]
 8003276:	4413      	add	r3, r2
 8003278:	2252      	movs	r2, #82	@ 0x52
 800327a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	795a      	ldrb	r2, [r3, #5]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	799b      	ldrb	r3, [r3, #6]
 8003284:	4013      	ands	r3, r2
 8003286:	b2da      	uxtb	r2, r3
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=frameLength;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	795b      	ldrb	r3, [r3, #5]
 8003294:	1c59      	adds	r1, r3, #1
 8003296:	b2c8      	uxtb	r0, r1
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	7148      	strb	r0, [r1, #5]
 800329c:	4413      	add	r3, r2
 800329e:	78ba      	ldrb	r2, [r7, #2]
 80032a0:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	795a      	ldrb	r2, [r3, #5]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	799b      	ldrb	r3, [r3, #6]
 80032aa:	4013      	ands	r3, r2
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=':';
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	795b      	ldrb	r3, [r3, #5]
 80032ba:	1c59      	adds	r1, r3, #1
 80032bc:	b2c8      	uxtb	r0, r1
 80032be:	6879      	ldr	r1, [r7, #4]
 80032c0:	7148      	strb	r0, [r1, #5]
 80032c2:	4413      	add	r3, r2
 80032c4:	223a      	movs	r2, #58	@ 0x3a
 80032c6:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	795a      	ldrb	r2, [r3, #5]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	799b      	ldrb	r3, [r3, #6]
 80032d0:	4013      	ands	r3, r2
 80032d2:	b2da      	uxtb	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	715a      	strb	r2, [r3, #5]
    dataTx->buff[dataTx->indexW++]=ID;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	795b      	ldrb	r3, [r3, #5]
 80032e0:	1c59      	adds	r1, r3, #1
 80032e2:	b2c8      	uxtb	r0, r1
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	7148      	strb	r0, [r1, #5]
 80032e8:	4413      	add	r3, r2
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	795a      	ldrb	r2, [r3, #5]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	799b      	ldrb	r3, [r3, #6]
 80032f6:	4013      	ands	r3, r2
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	715a      	strb	r2, [r3, #5]

    dataTx->bytes = TXBYTES;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2207      	movs	r2, #7
 8003302:	71da      	strb	r2, [r3, #7]
    dataTx->chk ^= ('U' ^'N' ^'E' ^'R' ^frameLength ^':'^ID) ;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	7a5a      	ldrb	r2, [r3, #9]
 8003308:	78b9      	ldrb	r1, [r7, #2]
 800330a:	78fb      	ldrb	r3, [r7, #3]
 800330c:	404b      	eors	r3, r1
 800330e:	b2db      	uxtb	r3, r3
 8003310:	4053      	eors	r3, r2
 8003312:	b2db      	uxtb	r3, r3
 8003314:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8003318:	b2da      	uxtb	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	725a      	strb	r2, [r3, #9]

    return  dataTx->chk;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	7a5b      	ldrb	r3, [r3, #9]
}
 8003322:	4618      	mov	r0, r3
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <unerPrtcl_PutByteOnTx>:

uint8_t unerPrtcl_PutByteOnTx(_sTx *dataTx, uint8_t byte)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
 8003336:	460b      	mov	r3, r1
 8003338:	70fb      	strb	r3, [r7, #3]
	dataTx->bytes++;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	79db      	ldrb	r3, [r3, #7]
 800333e:	3301      	adds	r3, #1
 8003340:	b2da      	uxtb	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	71da      	strb	r2, [r3, #7]
    dataTx->buff[dataTx->indexW++]=byte;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	795b      	ldrb	r3, [r3, #5]
 800334e:	1c59      	adds	r1, r3, #1
 8003350:	b2c8      	uxtb	r0, r1
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	7148      	strb	r0, [r1, #5]
 8003356:	4413      	add	r3, r2
 8003358:	78fa      	ldrb	r2, [r7, #3]
 800335a:	701a      	strb	r2, [r3, #0]
    dataTx->indexW &= dataTx->mask;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	795a      	ldrb	r2, [r3, #5]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	799b      	ldrb	r3, [r3, #6]
 8003364:	4013      	ands	r3, r2
 8003366:	b2da      	uxtb	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	715a      	strb	r2, [r3, #5]
    dataTx->chk ^= byte;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	7a5a      	ldrb	r2, [r3, #9]
 8003370:	78fb      	ldrb	r3, [r7, #3]
 8003372:	4053      	eors	r3, r2
 8003374:	b2da      	uxtb	r2, r3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	725a      	strb	r2, [r3, #9]
    return dataTx->chk;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	7a5b      	ldrb	r3, [r3, #9]
}
 800337e:	4618      	mov	r0, r3
 8003380:	370c      	adds	r7, #12
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr

0800338a <unerPrtcl_PutStrOntx>:

uint8_t unerPrtcl_PutStrOntx(_sTx *dataTx, const char *str)
{
 800338a:	b490      	push	{r4, r7}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
 8003392:	6039      	str	r1, [r7, #0]
    volatile uint8_t globalIndex=0;
 8003394:	2300      	movs	r3, #0
 8003396:	73fb      	strb	r3, [r7, #15]
    while(str[globalIndex]){
 8003398:	e02c      	b.n	80033f4 <unerPrtcl_PutStrOntx+0x6a>
    	dataTx->bytes++;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	79db      	ldrb	r3, [r3, #7]
 800339e:	3301      	adds	r3, #1
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	71da      	strb	r2, [r3, #7]
        dataTx->buff[dataTx->indexW++]=str[globalIndex];
 80033a6:	7bfb      	ldrb	r3, [r7, #15]
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	441a      	add	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6819      	ldr	r1, [r3, #0]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	795b      	ldrb	r3, [r3, #5]
 80033b8:	1c58      	adds	r0, r3, #1
 80033ba:	b2c4      	uxtb	r4, r0
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	7144      	strb	r4, [r0, #5]
 80033c0:	440b      	add	r3, r1
 80033c2:	7812      	ldrb	r2, [r2, #0]
 80033c4:	701a      	strb	r2, [r3, #0]
        dataTx->indexW &= dataTx->mask;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	795a      	ldrb	r2, [r3, #5]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	799b      	ldrb	r3, [r3, #6]
 80033ce:	4013      	ands	r3, r2
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	715a      	strb	r2, [r3, #5]
        dataTx->chk ^= str[globalIndex++];
 80033d6:	7bfb      	ldrb	r3, [r7, #15]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	1c5a      	adds	r2, r3, #1
 80033dc:	b2d2      	uxtb	r2, r2
 80033de:	73fa      	strb	r2, [r7, #15]
 80033e0:	461a      	mov	r2, r3
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	4413      	add	r3, r2
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	7a5b      	ldrb	r3, [r3, #9]
 80033ec:	4053      	eors	r3, r2
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	725a      	strb	r2, [r3, #9]
    while(str[globalIndex]){
 80033f4:	7bfb      	ldrb	r3, [r7, #15]
 80033f6:	b2db      	uxtb	r3, r3
 80033f8:	461a      	mov	r2, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	4413      	add	r3, r2
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d1ca      	bne.n	800339a <unerPrtcl_PutStrOntx+0x10>
    }
    //dataTx->bytes += ++globalIndex;
    return dataTx->chk;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	7a5b      	ldrb	r3, [r3, #9]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bc90      	pop	{r4, r7}
 8003410:	4770      	bx	lr
	...

08003414 <unerPrtcl_DecodeHeader>:
	return getByte;
}


uint8_t unerPrtcl_DecodeHeader(_sTx *dataRx)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
	uint8_t nBytes = 0;
 800341c:	2300      	movs	r3, #0
 800341e:	73fb      	strb	r3, [r7, #15]
	static uint8_t header = HEADER_U;
    uint8_t auxIndex=dataRx->indexW;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	795b      	ldrb	r3, [r3, #5]
 8003424:	73bb      	strb	r3, [r7, #14]
    while(dataRx->indexR != auxIndex){
 8003426:	e0e4      	b.n	80035f2 <unerPrtcl_DecodeHeader+0x1de>
        switch(header)
 8003428:	4b78      	ldr	r3, [pc, #480]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b07      	cmp	r3, #7
 800342e:	f200 80c9 	bhi.w	80035c4 <unerPrtcl_DecodeHeader+0x1b0>
 8003432:	a201      	add	r2, pc, #4	@ (adr r2, 8003438 <unerPrtcl_DecodeHeader+0x24>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	08003459 	.word	0x08003459
 800343c:	08003473 	.word	0x08003473
 8003440:	080034b1 	.word	0x080034b1
 8003444:	080034dd 	.word	0x080034dd
 8003448:	08003509 	.word	0x08003509
 800344c:	0800351f 	.word	0x0800351f
 8003450:	080035c5 	.word	0x080035c5
 8003454:	08003581 	.word	0x08003581
        {
            case HEADER_U:
                if(dataRx->buff[dataRx->indexR] == 'U'){
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	7912      	ldrb	r2, [r2, #4]
 8003460:	4413      	add	r3, r2
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b55      	cmp	r3, #85	@ 0x55
 8003466:	f040 80b1 	bne.w	80035cc <unerPrtcl_DecodeHeader+0x1b8>
                   header = HEADER_N;
 800346a:	4b68      	ldr	r3, [pc, #416]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 800346c:	2201      	movs	r2, #1
 800346e:	701a      	strb	r2, [r3, #0]
                }
            break;
 8003470:	e0ac      	b.n	80035cc <unerPrtcl_DecodeHeader+0x1b8>
            case HEADER_N:
                if(dataRx->buff[dataRx->indexR] == 'N'){
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	7912      	ldrb	r2, [r2, #4]
 800347a:	4413      	add	r3, r2
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b4e      	cmp	r3, #78	@ 0x4e
 8003480:	d103      	bne.n	800348a <unerPrtcl_DecodeHeader+0x76>
                    header = HEADER_E;
 8003482:	4b62      	ldr	r3, [pc, #392]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 8003484:	2202      	movs	r2, #2
 8003486:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] != 'U'){
                    	header = HEADER_U;
                        dataRx->indexR--;
                    }
                }
            break;
 8003488:	e0a2      	b.n	80035d0 <unerPrtcl_DecodeHeader+0x1bc>
                    if(dataRx->buff[dataRx->indexR] != 'U'){
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	7912      	ldrb	r2, [r2, #4]
 8003492:	4413      	add	r3, r2
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	2b55      	cmp	r3, #85	@ 0x55
 8003498:	f000 809a 	beq.w	80035d0 <unerPrtcl_DecodeHeader+0x1bc>
                    	header = HEADER_U;
 800349c:	4b5b      	ldr	r3, [pc, #364]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
                        dataRx->indexR--;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	791b      	ldrb	r3, [r3, #4]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	711a      	strb	r2, [r3, #4]
            break;
 80034ae:	e08f      	b.n	80035d0 <unerPrtcl_DecodeHeader+0x1bc>
            case HEADER_E:
                if(dataRx->buff[dataRx->indexR] == 'E'){
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	7912      	ldrb	r2, [r2, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b45      	cmp	r3, #69	@ 0x45
 80034be:	d103      	bne.n	80034c8 <unerPrtcl_DecodeHeader+0xb4>
                    header = HEADER_R;
 80034c0:	4b52      	ldr	r3, [pc, #328]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 80034c2:	2203      	movs	r2, #3
 80034c4:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80034c6:	e086      	b.n	80035d6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80034c8:	4b50      	ldr	r3, [pc, #320]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	791b      	ldrb	r3, [r3, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	711a      	strb	r2, [r3, #4]
            break;
 80034da:	e07c      	b.n	80035d6 <unerPrtcl_DecodeHeader+0x1c2>
            case HEADER_R:
                if(dataRx->buff[dataRx->indexR] == 'R'){
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	7912      	ldrb	r2, [r2, #4]
 80034e4:	4413      	add	r3, r2
 80034e6:	781b      	ldrb	r3, [r3, #0]
 80034e8:	2b52      	cmp	r3, #82	@ 0x52
 80034ea:	d103      	bne.n	80034f4 <unerPrtcl_DecodeHeader+0xe0>
                    header = NBYTES;
 80034ec:	4b47      	ldr	r3, [pc, #284]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 80034ee:	2204      	movs	r2, #4
 80034f0:	701a      	strb	r2, [r3, #0]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 80034f2:	e070      	b.n	80035d6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 80034f4:	4b45      	ldr	r3, [pc, #276]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	791b      	ldrb	r3, [r3, #4]
 80034fe:	3b01      	subs	r3, #1
 8003500:	b2da      	uxtb	r2, r3
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	711a      	strb	r2, [r3, #4]
            break;
 8003506:	e066      	b.n	80035d6 <unerPrtcl_DecodeHeader+0x1c2>
            case NBYTES:
                nBytes=dataRx->buff[dataRx->indexR];
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	7912      	ldrb	r2, [r2, #4]
 8003510:	4413      	add	r3, r2
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	73fb      	strb	r3, [r7, #15]
                header = TOKEN;
 8003516:	4b3d      	ldr	r3, [pc, #244]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 8003518:	2205      	movs	r2, #5
 800351a:	701a      	strb	r2, [r3, #0]
            break;
 800351c:	e05b      	b.n	80035d6 <unerPrtcl_DecodeHeader+0x1c2>
            case TOKEN:
                if(dataRx->buff[dataRx->indexR] == ':'){
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	7912      	ldrb	r2, [r2, #4]
 8003526:	4413      	add	r3, r2
 8003528:	781b      	ldrb	r3, [r3, #0]
 800352a:	2b3a      	cmp	r3, #58	@ 0x3a
 800352c:	d11e      	bne.n	800356c <unerPrtcl_DecodeHeader+0x158>
                    header = PAYLOAD;
 800352e:	4b37      	ldr	r3, [pc, #220]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 8003530:	2207      	movs	r2, #7
 8003532:	701a      	strb	r2, [r3, #0]
                    dataRx->indexData = dataRx->indexR+1;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	791b      	ldrb	r3, [r3, #4]
 8003538:	3301      	adds	r3, #1
 800353a:	b2da      	uxtb	r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	721a      	strb	r2, [r3, #8]
                    dataRx->indexData &= dataRx->mask;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7a1a      	ldrb	r2, [r3, #8]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	799b      	ldrb	r3, [r3, #6]
 8003548:	4013      	ands	r3, r2
 800354a:	b2da      	uxtb	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	721a      	strb	r2, [r3, #8]
                    dataRx->chk = 0;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	725a      	strb	r2, [r3, #9]
                    dataRx->chk ^= ('U' ^'N' ^'E' ^'R' ^nBytes ^':') ;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7a5a      	ldrb	r2, [r3, #9]
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	4053      	eors	r3, r2
 800355e:	b2db      	uxtb	r3, r3
 8003560:	f083 0336 	eor.w	r3, r3, #54	@ 0x36
 8003564:	b2da      	uxtb	r2, r3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    dataRx->indexR--;
                }
            break;
 800356a:	e034      	b.n	80035d6 <unerPrtcl_DecodeHeader+0x1c2>
                    header = HEADER_U;
 800356c:	4b27      	ldr	r3, [pc, #156]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 800356e:	2200      	movs	r2, #0
 8003570:	701a      	strb	r2, [r3, #0]
                    dataRx->indexR--;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	791b      	ldrb	r3, [r3, #4]
 8003576:	3b01      	subs	r3, #1
 8003578:	b2da      	uxtb	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	711a      	strb	r2, [r3, #4]
            break;
 800357e:	e02a      	b.n	80035d6 <unerPrtcl_DecodeHeader+0x1c2>
            case PAYLOAD:
                nBytes--;
 8003580:	7bfb      	ldrb	r3, [r7, #15]
 8003582:	3b01      	subs	r3, #1
 8003584:	73fb      	strb	r3, [r7, #15]
                if(nBytes>0){
 8003586:	7bfb      	ldrb	r3, [r7, #15]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d00c      	beq.n	80035a6 <unerPrtcl_DecodeHeader+0x192>
                   dataRx->chk ^= dataRx->buff[dataRx->indexR];
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	7a5a      	ldrb	r2, [r3, #9]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	6879      	ldr	r1, [r7, #4]
 8003596:	7909      	ldrb	r1, [r1, #4]
 8003598:	440b      	add	r3, r1
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	4053      	eors	r3, r2
 800359e:	b2da      	uxtb	r2, r3
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	725a      	strb	r2, [r3, #9]
                }else{
                    header = HEADER_U;
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
                        return TRUE;
                }
            break;
 80035a4:	e016      	b.n	80035d4 <unerPrtcl_DecodeHeader+0x1c0>
                    header = HEADER_U;
 80035a6:	4b19      	ldr	r3, [pc, #100]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	701a      	strb	r2, [r3, #0]
                    if(dataRx->buff[dataRx->indexR] == dataRx->chk)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	7912      	ldrb	r2, [r2, #4]
 80035b4:	4413      	add	r3, r2
 80035b6:	781a      	ldrb	r2, [r3, #0]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	7a5b      	ldrb	r3, [r3, #9]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d109      	bne.n	80035d4 <unerPrtcl_DecodeHeader+0x1c0>
                        return TRUE;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e01d      	b.n	8003600 <unerPrtcl_DecodeHeader+0x1ec>
            default:
                header = HEADER_U;
 80035c4:	4b11      	ldr	r3, [pc, #68]	@ (800360c <unerPrtcl_DecodeHeader+0x1f8>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	701a      	strb	r2, [r3, #0]
            break;
 80035ca:	e004      	b.n	80035d6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80035cc:	bf00      	nop
 80035ce:	e002      	b.n	80035d6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80035d0:	bf00      	nop
 80035d2:	e000      	b.n	80035d6 <unerPrtcl_DecodeHeader+0x1c2>
            break;
 80035d4:	bf00      	nop
        }
        dataRx->indexR++;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	791b      	ldrb	r3, [r3, #4]
 80035da:	3301      	adds	r3, #1
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	711a      	strb	r2, [r3, #4]
        dataRx->indexR &= dataRx->mask;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	791a      	ldrb	r2, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	799b      	ldrb	r3, [r3, #6]
 80035ea:	4013      	ands	r3, r2
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	711a      	strb	r2, [r3, #4]
    while(dataRx->indexR != auxIndex){
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	791b      	ldrb	r3, [r3, #4]
 80035f6:	7bba      	ldrb	r2, [r7, #14]
 80035f8:	429a      	cmp	r2, r3
 80035fa:	f47f af15 	bne.w	8003428 <unerPrtcl_DecodeHeader+0x14>
    }
    return FALSE;
 80035fe:	2300      	movs	r3, #0
}
 8003600:	4618      	mov	r0, r3
 8003602:	3714      	adds	r7, #20
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	20000b28 	.word	0x20000b28

08003610 <unerPrtcl_Init>:

void unerPrtcl_Init(_sTx *Rx, _sTx *Tx, volatile uint8_t *buffRx, volatile uint8_t *buffTx){
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
 800361c:	603b      	str	r3, [r7, #0]
	Rx->buff = (uint8_t *)buffRx;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	601a      	str	r2, [r3, #0]
    Rx->indexR = 0;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2200      	movs	r2, #0
 8003628:	711a      	strb	r2, [r3, #4]
    Rx->indexW = 0;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	715a      	strb	r2, [r3, #5]
    Rx->indexData = 0;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	721a      	strb	r2, [r3, #8]
    Rx->bytes = 0;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	71da      	strb	r2, [r3, #7]
    Rx->mask = RXBUFSIZE - 1; //Control de buffer 2n-1
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	22ff      	movs	r2, #255	@ 0xff
 8003640:	719a      	strb	r2, [r3, #6]
    Rx->chk = 0;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	725a      	strb	r2, [r3, #9]

    Tx->buff = (uint8_t *)buffTx;
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	601a      	str	r2, [r3, #0]
    Tx->indexR = 0;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	2200      	movs	r2, #0
 8003652:	711a      	strb	r2, [r3, #4]
    Tx->indexW = 0;
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	2200      	movs	r2, #0
 8003658:	715a      	strb	r2, [r3, #5]
    Tx->indexData = 0;
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	2200      	movs	r2, #0
 800365e:	721a      	strb	r2, [r3, #8]
    Tx->bytes = 0;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2200      	movs	r2, #0
 8003664:	71da      	strb	r2, [r3, #7]
    Tx->mask = TXBUFSIZE - 1;
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	22ff      	movs	r2, #255	@ 0xff
 800366a:	719a      	strb	r2, [r3, #6]
    Tx->chk = 0;
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	2200      	movs	r2, #0
 8003670:	725a      	strb	r2, [r3, #9]

}
 8003672:	bf00      	nop
 8003674:	3714      	adds	r7, #20
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
	...

08003680 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003680:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036b8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003684:	f7ff fd92 	bl	80031ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003688:	480c      	ldr	r0, [pc, #48]	@ (80036bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800368a:	490d      	ldr	r1, [pc, #52]	@ (80036c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800368c:	4a0d      	ldr	r2, [pc, #52]	@ (80036c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800368e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003690:	e002      	b.n	8003698 <LoopCopyDataInit>

08003692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003696:	3304      	adds	r3, #4

08003698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800369a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800369c:	d3f9      	bcc.n	8003692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800369e:	4a0a      	ldr	r2, [pc, #40]	@ (80036c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036a0:	4c0a      	ldr	r4, [pc, #40]	@ (80036cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80036a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036a4:	e001      	b.n	80036aa <LoopFillZerobss>

080036a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036a8:	3204      	adds	r2, #4

080036aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036ac:	d3fb      	bcc.n	80036a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036ae:	f00b fa19 	bl	800eae4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036b2:	f7fe f811 	bl	80016d8 <main>
  bx  lr    
 80036b6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80036b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80036bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80036c0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80036c4:	08010984 	.word	0x08010984
  ldr r2, =_sbss
 80036c8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80036cc:	20001c60 	.word	0x20001c60

080036d0 <DMA1_Stream2_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036d0:	e7fe      	b.n	80036d0 <DMA1_Stream2_IRQHandler>
	...

080036d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80036d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003714 <HAL_Init+0x40>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003714 <HAL_Init+0x40>)
 80036de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80036e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80036e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003714 <HAL_Init+0x40>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003714 <HAL_Init+0x40>)
 80036ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80036f0:	4b08      	ldr	r3, [pc, #32]	@ (8003714 <HAL_Init+0x40>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a07      	ldr	r2, [pc, #28]	@ (8003714 <HAL_Init+0x40>)
 80036f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80036fc:	2003      	movs	r0, #3
 80036fe:	f000 fe6f 	bl	80043e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003702:	200f      	movs	r0, #15
 8003704:	f000 f808 	bl	8003718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003708:	f7ff fa3c 	bl	8002b84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800370c:	2300      	movs	r3, #0
}
 800370e:	4618      	mov	r0, r3
 8003710:	bd80      	pop	{r7, pc}
 8003712:	bf00      	nop
 8003714:	40023c00 	.word	0x40023c00

08003718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003720:	4b12      	ldr	r3, [pc, #72]	@ (800376c <HAL_InitTick+0x54>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_InitTick+0x58>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	4619      	mov	r1, r3
 800372a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800372e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003732:	fbb2 f3f3 	udiv	r3, r2, r3
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fe87 	bl	800444a <HAL_SYSTICK_Config>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e00e      	b.n	8003764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2b0f      	cmp	r3, #15
 800374a:	d80a      	bhi.n	8003762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800374c:	2200      	movs	r2, #0
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	f04f 30ff 	mov.w	r0, #4294967295
 8003754:	f000 fe4f 	bl	80043f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003758:	4a06      	ldr	r2, [pc, #24]	@ (8003774 <HAL_InitTick+0x5c>)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
 8003760:	e000      	b.n	8003764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
}
 8003764:	4618      	mov	r0, r3
 8003766:	3708      	adds	r7, #8
 8003768:	46bd      	mov	sp, r7
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000030 	.word	0x20000030
 8003770:	20000038 	.word	0x20000038
 8003774:	20000034 	.word	0x20000034

08003778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003778:	b480      	push	{r7}
 800377a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800377c:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <HAL_IncTick+0x20>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	4b06      	ldr	r3, [pc, #24]	@ (800379c <HAL_IncTick+0x24>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4413      	add	r3, r2
 8003788:	4a04      	ldr	r2, [pc, #16]	@ (800379c <HAL_IncTick+0x24>)
 800378a:	6013      	str	r3, [r2, #0]
}
 800378c:	bf00      	nop
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	20000038 	.word	0x20000038
 800379c:	20000b2c 	.word	0x20000b2c

080037a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return uwTick;
 80037a4:	4b03      	ldr	r3, [pc, #12]	@ (80037b4 <HAL_GetTick+0x14>)
 80037a6:	681b      	ldr	r3, [r3, #0]
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	20000b2c 	.word	0x20000b2c

080037b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80037c0:	f7ff ffee 	bl	80037a0 <HAL_GetTick>
 80037c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037d0:	d005      	beq.n	80037de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80037d2:	4b0a      	ldr	r3, [pc, #40]	@ (80037fc <HAL_Delay+0x44>)
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80037de:	bf00      	nop
 80037e0:	f7ff ffde 	bl	80037a0 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d8f7      	bhi.n	80037e0 <HAL_Delay+0x28>
  {
  }
}
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	3710      	adds	r7, #16
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}
 80037fa:	bf00      	nop
 80037fc:	20000038 	.word	0x20000038

08003800 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003808:	2300      	movs	r3, #0
 800380a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e033      	b.n	800387e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381a:	2b00      	cmp	r3, #0
 800381c:	d109      	bne.n	8003832 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff f9d8 	bl	8002bd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b00      	cmp	r3, #0
 800383c:	d118      	bne.n	8003870 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003842:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003846:	f023 0302 	bic.w	r3, r3, #2
 800384a:	f043 0202 	orr.w	r2, r3, #2
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f000 fb6c 	bl	8003f30 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003862:	f023 0303 	bic.w	r3, r3, #3
 8003866:	f043 0201 	orr.w	r2, r3, #1
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	641a      	str	r2, [r3, #64]	@ 0x40
 800386e:	e001      	b.n	8003874 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800387c:	7bfb      	ldrb	r3, [r7, #15]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b086      	sub	sp, #24
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
 8003892:	2300      	movs	r3, #0
 8003894:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f003 0302 	and.w	r3, r3, #2
 80038ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	f003 0320 	and.w	r3, r3, #32
 80038b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d049      	beq.n	8003950 <HAL_ADC_IRQHandler+0xca>
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d046      	beq.n	8003950 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	f003 0310 	and.w	r3, r3, #16
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d105      	bne.n	80038da <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d2:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	689b      	ldr	r3, [r3, #8]
 80038e0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d12b      	bne.n	8003940 <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d127      	bne.n	8003940 <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d006      	beq.n	800390c <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003908:	2b00      	cmp	r3, #0
 800390a:	d119      	bne.n	8003940 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0220 	bic.w	r2, r2, #32
 800391a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003920:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7fd f941 	bl	8000bc8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f06f 0212 	mvn.w	r2, #18
 800394e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800395e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d057      	beq.n	8003a16 <HAL_ADC_IRQHandler+0x190>
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d054      	beq.n	8003a16 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003970:	f003 0310 	and.w	r3, r3, #16
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d139      	bne.n	8003a06 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003998:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800399c:	2b00      	cmp	r3, #0
 800399e:	d006      	beq.n	80039ae <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d12b      	bne.n	8003a06 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d124      	bne.n	8003a06 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d11d      	bne.n	8003a06 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d119      	bne.n	8003a06 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80039e0:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d105      	bne.n	8003a06 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	f043 0201 	orr.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f000 fc10 	bl	800422c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f06f 020c 	mvn.w	r2, #12
 8003a14:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a24:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d017      	beq.n	8003a5c <HAL_ADC_IRQHandler+0x1d6>
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d014      	beq.n	8003a5c <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d10d      	bne.n	8003a5c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 f929 	bl	8003ca4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f06f 0201 	mvn.w	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003a6a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d015      	beq.n	8003a9e <HAL_ADC_IRQHandler+0x218>
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d012      	beq.n	8003a9e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7c:	f043 0202 	orr.w	r2, r3, #2
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f06f 0220 	mvn.w	r2, #32
 8003a8c:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 f912 	bl	8003cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f06f 0220 	mvn.w	r2, #32
 8003a9c:	601a      	str	r2, [r3, #0]
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
	...

08003aa8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b088      	sub	sp, #32
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	60f8      	str	r0, [r7, #12]
 8003ab0:	60b9      	str	r1, [r7, #8]
 8003ab2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	617b      	str	r3, [r7, #20]
  ADC_Common_TypeDef *tmpADC_Common;
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	77fb      	strb	r3, [r7, #31]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d101      	bne.n	8003aca <HAL_ADC_Start_DMA+0x22>
 8003ac6:	2302      	movs	r3, #2
 8003ac8:	e0d0      	b.n	8003c6c <HAL_ADC_Start_DMA+0x1c4>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 0301 	and.w	r3, r3, #1
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d018      	beq.n	8003b12 <HAL_ADC_Start_DMA+0x6a>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	689a      	ldr	r2, [r3, #8]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f042 0201 	orr.w	r2, r2, #1
 8003aee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003af0:	4b60      	ldr	r3, [pc, #384]	@ (8003c74 <HAL_ADC_Start_DMA+0x1cc>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a60      	ldr	r2, [pc, #384]	@ (8003c78 <HAL_ADC_Start_DMA+0x1d0>)
 8003af6:	fba2 2303 	umull	r2, r3, r2, r3
 8003afa:	0c9a      	lsrs	r2, r3, #18
 8003afc:	4613      	mov	r3, r2
 8003afe:	005b      	lsls	r3, r3, #1
 8003b00:	4413      	add	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003b04:	e002      	b.n	8003b0c <HAL_ADC_Start_DMA+0x64>
    {
      counter--;
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	617b      	str	r3, [r7, #20]
    while (counter != 0U)
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1f9      	bne.n	8003b06 <HAL_ADC_Start_DMA+0x5e>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b20:	d107      	bne.n	8003b32 <HAL_ADC_Start_DMA+0x8a>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	689a      	ldr	r2, [r3, #8]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b30:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b01      	cmp	r3, #1
 8003b3e:	f040 8088 	bne.w	8003c52 <HAL_ADC_Start_DMA+0x1aa>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b46:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d007      	beq.n	8003b74 <HAL_ADC_Start_DMA+0xcc>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b68:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003b6c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b80:	d106      	bne.n	8003b90 <HAL_ADC_Start_DMA+0xe8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	f023 0206 	bic.w	r2, r3, #6
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	645a      	str	r2, [r3, #68]	@ 0x44
 8003b8e:	e002      	b.n	8003b96 <HAL_ADC_Start_DMA+0xee>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2200      	movs	r2, #0
 8003b94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b9e:	4b37      	ldr	r3, [pc, #220]	@ (8003c7c <HAL_ADC_Start_DMA+0x1d4>)
 8003ba0:	61bb      	str	r3, [r7, #24]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba6:	4a36      	ldr	r2, [pc, #216]	@ (8003c80 <HAL_ADC_Start_DMA+0x1d8>)
 8003ba8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bae:	4a35      	ldr	r2, [pc, #212]	@ (8003c84 <HAL_ADC_Start_DMA+0x1dc>)
 8003bb0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb6:	4a34      	ldr	r2, [pc, #208]	@ (8003c88 <HAL_ADC_Start_DMA+0x1e0>)
 8003bb8:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003bc2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	685a      	ldr	r2, [r3, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003bd2:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689a      	ldr	r2, [r3, #8]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be2:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	334c      	adds	r3, #76	@ 0x4c
 8003bee:	4619      	mov	r1, r3
 8003bf0:	68ba      	ldr	r2, [r7, #8]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	f000 fce4 	bl	80045c0 <HAL_DMA_Start_IT>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	77fb      	strb	r3, [r7, #31]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	f003 031f 	and.w	r3, r3, #31
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d10f      	bne.n	8003c28 <HAL_ADC_Start_DMA+0x180>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d129      	bne.n	8003c6a <HAL_ADC_Start_DMA+0x1c2>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	689a      	ldr	r2, [r3, #8]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c24:	609a      	str	r2, [r3, #8]
 8003c26:	e020      	b.n	8003c6a <HAL_ADC_Start_DMA+0x1c2>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a17      	ldr	r2, [pc, #92]	@ (8003c8c <HAL_ADC_Start_DMA+0x1e4>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d11b      	bne.n	8003c6a <HAL_ADC_Start_DMA+0x1c2>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d114      	bne.n	8003c6a <HAL_ADC_Start_DMA+0x1c2>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003c4e:	609a      	str	r2, [r3, #8]
 8003c50:	e00b      	b.n	8003c6a <HAL_ADC_Start_DMA+0x1c2>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c56:	f043 0210 	orr.w	r2, r3, #16
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	f043 0201 	orr.w	r2, r3, #1
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return tmp_hal_status;
 8003c6a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3720      	adds	r7, #32
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}
 8003c74:	20000030 	.word	0x20000030
 8003c78:	431bde83 	.word	0x431bde83
 8003c7c:	40012300 	.word	0x40012300
 8003c80:	08004129 	.word	0x08004129
 8003c84:	080041e3 	.word	0x080041e3
 8003c88:	080041ff 	.word	0x080041ff
 8003c8c:	40012000 	.word	0x40012000

08003c90 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_ADC_ConfigChannel+0x1c>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e113      	b.n	8003f10 <HAL_ADC_ConfigChannel+0x244>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	2b09      	cmp	r3, #9
 8003cf6:	d925      	bls.n	8003d44 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68d9      	ldr	r1, [r3, #12]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	461a      	mov	r2, r3
 8003d06:	4613      	mov	r3, r2
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	4413      	add	r3, r2
 8003d0c:	3b1e      	subs	r3, #30
 8003d0e:	2207      	movs	r2, #7
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	43da      	mvns	r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	400a      	ands	r2, r1
 8003d1c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68d9      	ldr	r1, [r3, #12]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	b29b      	uxth	r3, r3
 8003d2e:	4618      	mov	r0, r3
 8003d30:	4603      	mov	r3, r0
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	4403      	add	r3, r0
 8003d36:	3b1e      	subs	r3, #30
 8003d38:	409a      	lsls	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	e022      	b.n	8003d8a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6919      	ldr	r1, [r3, #16]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	461a      	mov	r2, r3
 8003d52:	4613      	mov	r3, r2
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4413      	add	r3, r2
 8003d58:	2207      	movs	r2, #7
 8003d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5e:	43da      	mvns	r2, r3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	400a      	ands	r2, r1
 8003d66:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	6919      	ldr	r1, [r3, #16]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	4618      	mov	r0, r3
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	4403      	add	r3, r0
 8003d80:	409a      	lsls	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	430a      	orrs	r2, r1
 8003d88:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b06      	cmp	r3, #6
 8003d90:	d824      	bhi.n	8003ddc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685a      	ldr	r2, [r3, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4413      	add	r3, r2
 8003da2:	3b05      	subs	r3, #5
 8003da4:	221f      	movs	r2, #31
 8003da6:	fa02 f303 	lsl.w	r3, r2, r3
 8003daa:	43da      	mvns	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	400a      	ands	r2, r1
 8003db2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	685a      	ldr	r2, [r3, #4]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	3b05      	subs	r3, #5
 8003dce:	fa00 f203 	lsl.w	r2, r0, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	635a      	str	r2, [r3, #52]	@ 0x34
 8003dda:	e04c      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2b0c      	cmp	r3, #12
 8003de2:	d824      	bhi.n	8003e2e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	4613      	mov	r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	4413      	add	r3, r2
 8003df4:	3b23      	subs	r3, #35	@ 0x23
 8003df6:	221f      	movs	r2, #31
 8003df8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	400a      	ands	r2, r1
 8003e04:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	4618      	mov	r0, r3
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4413      	add	r3, r2
 8003e1e:	3b23      	subs	r3, #35	@ 0x23
 8003e20:	fa00 f203 	lsl.w	r2, r0, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e2c:	e023      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	685a      	ldr	r2, [r3, #4]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	3b41      	subs	r3, #65	@ 0x41
 8003e40:	221f      	movs	r2, #31
 8003e42:	fa02 f303 	lsl.w	r3, r2, r3
 8003e46:	43da      	mvns	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	400a      	ands	r2, r1
 8003e4e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	4413      	add	r3, r2
 8003e68:	3b41      	subs	r3, #65	@ 0x41
 8003e6a:	fa00 f203 	lsl.w	r2, r0, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003e76:	4b29      	ldr	r3, [pc, #164]	@ (8003f1c <HAL_ADC_ConfigChannel+0x250>)
 8003e78:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a28      	ldr	r2, [pc, #160]	@ (8003f20 <HAL_ADC_ConfigChannel+0x254>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d10f      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1d8>
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2b12      	cmp	r3, #18
 8003e8a:	d10b      	bne.n	8003ea4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	685b      	ldr	r3, [r3, #4]
 8003e9c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a1d      	ldr	r2, [pc, #116]	@ (8003f20 <HAL_ADC_ConfigChannel+0x254>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d12b      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x23a>
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d003      	beq.n	8003ec0 <HAL_ADC_ConfigChannel+0x1f4>
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b11      	cmp	r3, #17
 8003ebe:	d122      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a11      	ldr	r2, [pc, #68]	@ (8003f24 <HAL_ADC_ConfigChannel+0x258>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003ee2:	4b11      	ldr	r3, [pc, #68]	@ (8003f28 <HAL_ADC_ConfigChannel+0x25c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a11      	ldr	r2, [pc, #68]	@ (8003f2c <HAL_ADC_ConfigChannel+0x260>)
 8003ee8:	fba2 2303 	umull	r2, r3, r2, r3
 8003eec:	0c9a      	lsrs	r2, r3, #18
 8003eee:	4613      	mov	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4413      	add	r3, r2
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003ef8:	e002      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3b01      	subs	r3, #1
 8003efe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f9      	bne.n	8003efa <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	40012300 	.word	0x40012300
 8003f20:	40012000 	.word	0x40012000
 8003f24:	10000012 	.word	0x10000012
 8003f28:	20000030 	.word	0x20000030
 8003f2c:	431bde83 	.word	0x431bde83

08003f30 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003f30:	b480      	push	{r7}
 8003f32:	b085      	sub	sp, #20
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f38:	4b79      	ldr	r3, [pc, #484]	@ (8004120 <ADC_Init+0x1f0>)
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	431a      	orrs	r2, r3
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6859      	ldr	r1, [r3, #4]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	691b      	ldr	r3, [r3, #16]
 8003f70:	021a      	lsls	r2, r3, #8
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	6859      	ldr	r1, [r3, #4]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6899      	ldr	r1, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	4a58      	ldr	r2, [pc, #352]	@ (8004124 <ADC_Init+0x1f4>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d022      	beq.n	800400e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	689a      	ldr	r2, [r3, #8]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003fd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6899      	ldr	r1, [r3, #8]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6899      	ldr	r1, [r3, #8]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	609a      	str	r2, [r3, #8]
 800400c:	e00f      	b.n	800402e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800401c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800402c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f022 0202 	bic.w	r2, r2, #2
 800403c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	6899      	ldr	r1, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	7e1b      	ldrb	r3, [r3, #24]
 8004048:	005a      	lsls	r2, r3, #1
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d01b      	beq.n	8004094 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800406a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	685a      	ldr	r2, [r3, #4]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800407a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6859      	ldr	r1, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004086:	3b01      	subs	r3, #1
 8004088:	035a      	lsls	r2, r3, #13
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	430a      	orrs	r2, r1
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	e007      	b.n	80040a4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	685a      	ldr	r2, [r3, #4]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040a2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80040b2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69db      	ldr	r3, [r3, #28]
 80040be:	3b01      	subs	r3, #1
 80040c0:	051a      	lsls	r2, r3, #20
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	430a      	orrs	r2, r1
 80040c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689a      	ldr	r2, [r3, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80040d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6899      	ldr	r1, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80040e6:	025a      	lsls	r2, r3, #9
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	430a      	orrs	r2, r1
 80040ee:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689a      	ldr	r2, [r3, #8]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	6899      	ldr	r1, [r3, #8]
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	695b      	ldr	r3, [r3, #20]
 800410a:	029a      	lsls	r2, r3, #10
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	609a      	str	r2, [r3, #8]
}
 8004114:	bf00      	nop
 8004116:	3714      	adds	r7, #20
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	40012300 	.word	0x40012300
 8004124:	0f000001 	.word	0x0f000001

08004128 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004134:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800413a:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800413e:	2b00      	cmp	r3, #0
 8004140:	d13c      	bne.n	80041bc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004146:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d12b      	bne.n	80041b4 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004160:	2b00      	cmp	r3, #0
 8004162:	d127      	bne.n	80041b4 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800417c:	2b00      	cmp	r3, #0
 800417e:	d119      	bne.n	80041b4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	685a      	ldr	r2, [r3, #4]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0220 	bic.w	r2, r2, #32
 800418e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004194:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d105      	bne.n	80041b4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ac:	f043 0201 	orr.w	r2, r3, #1
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80041b4:	68f8      	ldr	r0, [r7, #12]
 80041b6:	f7fc fd07 	bl	8000bc8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80041ba:	e00e      	b.n	80041da <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff fd75 	bl	8003cb8 <HAL_ADC_ErrorCallback>
}
 80041ce:	e004      	b.n	80041da <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	4798      	blx	r3
}
 80041da:	bf00      	nop
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b084      	sub	sp, #16
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80041f0:	68f8      	ldr	r0, [r7, #12]
 80041f2:	f7ff fd4d 	bl	8003c90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80041f6:	bf00      	nop
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800420a:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2240      	movs	r2, #64	@ 0x40
 8004210:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	f043 0204 	orr.w	r2, r3, #4
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff fd4a 	bl	8003cb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800422c:	b480      	push	{r7}
 800422e:	b083      	sub	sp, #12
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8004234:	bf00      	nop
 8004236:	370c      	adds	r7, #12
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004250:	4b0c      	ldr	r3, [pc, #48]	@ (8004284 <__NVIC_SetPriorityGrouping+0x44>)
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800425c:	4013      	ands	r3, r2
 800425e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004268:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800426c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004272:	4a04      	ldr	r2, [pc, #16]	@ (8004284 <__NVIC_SetPriorityGrouping+0x44>)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	60d3      	str	r3, [r2, #12]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004288:	b480      	push	{r7}
 800428a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800428c:	4b04      	ldr	r3, [pc, #16]	@ (80042a0 <__NVIC_GetPriorityGrouping+0x18>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	0a1b      	lsrs	r3, r3, #8
 8004292:	f003 0307 	and.w	r3, r3, #7
}
 8004296:	4618      	mov	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr
 80042a0:	e000ed00 	.word	0xe000ed00

080042a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	4603      	mov	r3, r0
 80042ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	db0b      	blt.n	80042ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042b6:	79fb      	ldrb	r3, [r7, #7]
 80042b8:	f003 021f 	and.w	r2, r3, #31
 80042bc:	4907      	ldr	r1, [pc, #28]	@ (80042dc <__NVIC_EnableIRQ+0x38>)
 80042be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c2:	095b      	lsrs	r3, r3, #5
 80042c4:	2001      	movs	r0, #1
 80042c6:	fa00 f202 	lsl.w	r2, r0, r2
 80042ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80042ce:	bf00      	nop
 80042d0:	370c      	adds	r7, #12
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	e000e100 	.word	0xe000e100

080042e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	4603      	mov	r3, r0
 80042e8:	6039      	str	r1, [r7, #0]
 80042ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	db0a      	blt.n	800430a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	490c      	ldr	r1, [pc, #48]	@ (800432c <__NVIC_SetPriority+0x4c>)
 80042fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042fe:	0112      	lsls	r2, r2, #4
 8004300:	b2d2      	uxtb	r2, r2
 8004302:	440b      	add	r3, r1
 8004304:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004308:	e00a      	b.n	8004320 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	b2da      	uxtb	r2, r3
 800430e:	4908      	ldr	r1, [pc, #32]	@ (8004330 <__NVIC_SetPriority+0x50>)
 8004310:	79fb      	ldrb	r3, [r7, #7]
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	3b04      	subs	r3, #4
 8004318:	0112      	lsls	r2, r2, #4
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	440b      	add	r3, r1
 800431e:	761a      	strb	r2, [r3, #24]
}
 8004320:	bf00      	nop
 8004322:	370c      	adds	r7, #12
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	e000e100 	.word	0xe000e100
 8004330:	e000ed00 	.word	0xe000ed00

08004334 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004334:	b480      	push	{r7}
 8004336:	b089      	sub	sp, #36	@ 0x24
 8004338:	af00      	add	r7, sp, #0
 800433a:	60f8      	str	r0, [r7, #12]
 800433c:	60b9      	str	r1, [r7, #8]
 800433e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	f1c3 0307 	rsb	r3, r3, #7
 800434e:	2b04      	cmp	r3, #4
 8004350:	bf28      	it	cs
 8004352:	2304      	movcs	r3, #4
 8004354:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	3304      	adds	r3, #4
 800435a:	2b06      	cmp	r3, #6
 800435c:	d902      	bls.n	8004364 <NVIC_EncodePriority+0x30>
 800435e:	69fb      	ldr	r3, [r7, #28]
 8004360:	3b03      	subs	r3, #3
 8004362:	e000      	b.n	8004366 <NVIC_EncodePriority+0x32>
 8004364:	2300      	movs	r3, #0
 8004366:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004368:	f04f 32ff 	mov.w	r2, #4294967295
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43da      	mvns	r2, r3
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	401a      	ands	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800437c:	f04f 31ff 	mov.w	r1, #4294967295
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	fa01 f303 	lsl.w	r3, r1, r3
 8004386:	43d9      	mvns	r1, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800438c:	4313      	orrs	r3, r2
         );
}
 800438e:	4618      	mov	r0, r3
 8004390:	3724      	adds	r7, #36	@ 0x24
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
	...

0800439c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3b01      	subs	r3, #1
 80043a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043ac:	d301      	bcc.n	80043b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80043ae:	2301      	movs	r3, #1
 80043b0:	e00f      	b.n	80043d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043b2:	4a0a      	ldr	r2, [pc, #40]	@ (80043dc <SysTick_Config+0x40>)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3b01      	subs	r3, #1
 80043b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043ba:	210f      	movs	r1, #15
 80043bc:	f04f 30ff 	mov.w	r0, #4294967295
 80043c0:	f7ff ff8e 	bl	80042e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80043c4:	4b05      	ldr	r3, [pc, #20]	@ (80043dc <SysTick_Config+0x40>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80043ca:	4b04      	ldr	r3, [pc, #16]	@ (80043dc <SysTick_Config+0x40>)
 80043cc:	2207      	movs	r2, #7
 80043ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	e000e010 	.word	0xe000e010

080043e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f7ff ff29 	bl	8004240 <__NVIC_SetPriorityGrouping>
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b086      	sub	sp, #24
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	4603      	mov	r3, r0
 80043fe:	60b9      	str	r1, [r7, #8]
 8004400:	607a      	str	r2, [r7, #4]
 8004402:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004408:	f7ff ff3e 	bl	8004288 <__NVIC_GetPriorityGrouping>
 800440c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	68b9      	ldr	r1, [r7, #8]
 8004412:	6978      	ldr	r0, [r7, #20]
 8004414:	f7ff ff8e 	bl	8004334 <NVIC_EncodePriority>
 8004418:	4602      	mov	r2, r0
 800441a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800441e:	4611      	mov	r1, r2
 8004420:	4618      	mov	r0, r3
 8004422:	f7ff ff5d 	bl	80042e0 <__NVIC_SetPriority>
}
 8004426:	bf00      	nop
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}

0800442e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800442e:	b580      	push	{r7, lr}
 8004430:	b082      	sub	sp, #8
 8004432:	af00      	add	r7, sp, #0
 8004434:	4603      	mov	r3, r0
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800443c:	4618      	mov	r0, r3
 800443e:	f7ff ff31 	bl	80042a4 <__NVIC_EnableIRQ>
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b082      	sub	sp, #8
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff ffa2 	bl	800439c <SysTick_Config>
 8004458:	4603      	mov	r3, r0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
	...

08004464 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800446c:	2300      	movs	r3, #0
 800446e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004470:	f7ff f996 	bl	80037a0 <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e099      	b.n	80045b4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2202      	movs	r2, #2
 8004484:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044a0:	e00f      	b.n	80044c2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044a2:	f7ff f97d 	bl	80037a0 <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b05      	cmp	r3, #5
 80044ae:	d908      	bls.n	80044c2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2220      	movs	r2, #32
 80044b4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2203      	movs	r2, #3
 80044ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e078      	b.n	80045b4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e8      	bne.n	80044a2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	4b38      	ldr	r3, [pc, #224]	@ (80045bc <HAL_DMA_Init+0x158>)
 80044dc:	4013      	ands	r3, r2
 80044de:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	691b      	ldr	r3, [r3, #16]
 80044f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	699b      	ldr	r3, [r3, #24]
 8004500:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a1b      	ldr	r3, [r3, #32]
 800450c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	2b04      	cmp	r3, #4
 800451a:	d107      	bne.n	800452c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004524:	4313      	orrs	r3, r2
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	f023 0307 	bic.w	r3, r3, #7
 8004542:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004552:	2b04      	cmp	r3, #4
 8004554:	d117      	bne.n	8004586 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00e      	beq.n	8004586 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 faab 	bl	8004ac4 <DMA_CheckFifoParam>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2240      	movs	r2, #64	@ 0x40
 8004578:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2201      	movs	r2, #1
 800457e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004582:	2301      	movs	r3, #1
 8004584:	e016      	b.n	80045b4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fa62 	bl	8004a58 <DMA_CalcBaseAndBitshift>
 8004594:	4603      	mov	r3, r0
 8004596:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459c:	223f      	movs	r2, #63	@ 0x3f
 800459e:	409a      	lsls	r2, r3
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3718      	adds	r7, #24
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	f010803f 	.word	0xf010803f

080045c0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ce:	2300      	movs	r3, #0
 80045d0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045d6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80045de:	2b01      	cmp	r3, #1
 80045e0:	d101      	bne.n	80045e6 <HAL_DMA_Start_IT+0x26>
 80045e2:	2302      	movs	r3, #2
 80045e4:	e040      	b.n	8004668 <HAL_DMA_Start_IT+0xa8>
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b01      	cmp	r3, #1
 80045f8:	d12f      	bne.n	800465a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2202      	movs	r2, #2
 80045fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	687a      	ldr	r2, [r7, #4]
 800460c:	68b9      	ldr	r1, [r7, #8]
 800460e:	68f8      	ldr	r0, [r7, #12]
 8004610:	f000 f9f4 	bl	80049fc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004618:	223f      	movs	r2, #63	@ 0x3f
 800461a:	409a      	lsls	r2, r3
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0216 	orr.w	r2, r2, #22
 800462e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d007      	beq.n	8004648 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f042 0208 	orr.w	r2, r2, #8
 8004646:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]
 8004658:	e005      	b.n	8004666 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2200      	movs	r2, #0
 800465e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004662:	2302      	movs	r3, #2
 8004664:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004666:	7dfb      	ldrb	r3, [r7, #23]
}
 8004668:	4618      	mov	r0, r3
 800466a:	3718      	adds	r7, #24
 800466c:	46bd      	mov	sp, r7
 800466e:	bd80      	pop	{r7, pc}

08004670 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800467e:	b2db      	uxtb	r3, r3
 8004680:	2b02      	cmp	r3, #2
 8004682:	d004      	beq.n	800468e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2280      	movs	r2, #128	@ 0x80
 8004688:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e00c      	b.n	80046a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2205      	movs	r2, #5
 8004692:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f022 0201 	bic.w	r2, r2, #1
 80046a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b086      	sub	sp, #24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80046bc:	2300      	movs	r3, #0
 80046be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80046c0:	4b8e      	ldr	r3, [pc, #568]	@ (80048fc <HAL_DMA_IRQHandler+0x248>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a8e      	ldr	r2, [pc, #568]	@ (8004900 <HAL_DMA_IRQHandler+0x24c>)
 80046c6:	fba2 2303 	umull	r2, r3, r2, r3
 80046ca:	0a9b      	lsrs	r3, r3, #10
 80046cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046de:	2208      	movs	r2, #8
 80046e0:	409a      	lsls	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	4013      	ands	r3, r2
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d01a      	beq.n	8004720 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0304 	and.w	r3, r3, #4
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d013      	beq.n	8004720 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f022 0204 	bic.w	r2, r2, #4
 8004706:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800470c:	2208      	movs	r2, #8
 800470e:	409a      	lsls	r2, r3
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004718:	f043 0201 	orr.w	r2, r3, #1
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004724:	2201      	movs	r2, #1
 8004726:	409a      	lsls	r2, r3
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	4013      	ands	r3, r2
 800472c:	2b00      	cmp	r3, #0
 800472e:	d012      	beq.n	8004756 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00b      	beq.n	8004756 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004742:	2201      	movs	r2, #1
 8004744:	409a      	lsls	r2, r3
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474e:	f043 0202 	orr.w	r2, r3, #2
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475a:	2204      	movs	r2, #4
 800475c:	409a      	lsls	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4013      	ands	r3, r2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d012      	beq.n	800478c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0302 	and.w	r3, r3, #2
 8004770:	2b00      	cmp	r3, #0
 8004772:	d00b      	beq.n	800478c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004778:	2204      	movs	r2, #4
 800477a:	409a      	lsls	r2, r3
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004784:	f043 0204 	orr.w	r2, r3, #4
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004790:	2210      	movs	r2, #16
 8004792:	409a      	lsls	r2, r3
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4013      	ands	r3, r2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d043      	beq.n	8004824 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d03c      	beq.n	8004824 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ae:	2210      	movs	r2, #16
 80047b0:	409a      	lsls	r2, r3
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d018      	beq.n	80047f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d108      	bne.n	80047e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d024      	beq.n	8004824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	4798      	blx	r3
 80047e2:	e01f      	b.n	8004824 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d01b      	beq.n	8004824 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
 80047f4:	e016      	b.n	8004824 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004800:	2b00      	cmp	r3, #0
 8004802:	d107      	bne.n	8004814 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f022 0208 	bic.w	r2, r2, #8
 8004812:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004818:	2b00      	cmp	r3, #0
 800481a:	d003      	beq.n	8004824 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004828:	2220      	movs	r2, #32
 800482a:	409a      	lsls	r2, r3
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	4013      	ands	r3, r2
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 808f 	beq.w	8004954 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0310 	and.w	r3, r3, #16
 8004840:	2b00      	cmp	r3, #0
 8004842:	f000 8087 	beq.w	8004954 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800484a:	2220      	movs	r2, #32
 800484c:	409a      	lsls	r2, r3
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b05      	cmp	r3, #5
 800485c:	d136      	bne.n	80048cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0216 	bic.w	r2, r2, #22
 800486c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800487c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004882:	2b00      	cmp	r3, #0
 8004884:	d103      	bne.n	800488e <HAL_DMA_IRQHandler+0x1da>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0208 	bic.w	r2, r2, #8
 800489c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a2:	223f      	movs	r2, #63	@ 0x3f
 80048a4:	409a      	lsls	r2, r3
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d07e      	beq.n	80049c0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	4798      	blx	r3
        }
        return;
 80048ca:	e079      	b.n	80049c0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d01d      	beq.n	8004916 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10d      	bne.n	8004904 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d031      	beq.n	8004954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	4798      	blx	r3
 80048f8:	e02c      	b.n	8004954 <HAL_DMA_IRQHandler+0x2a0>
 80048fa:	bf00      	nop
 80048fc:	20000030 	.word	0x20000030
 8004900:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004908:	2b00      	cmp	r3, #0
 800490a:	d023      	beq.n	8004954 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	4798      	blx	r3
 8004914:	e01e      	b.n	8004954 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004920:	2b00      	cmp	r3, #0
 8004922:	d10f      	bne.n	8004944 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0210 	bic.w	r2, r2, #16
 8004932:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004950:	6878      	ldr	r0, [r7, #4]
 8004952:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004958:	2b00      	cmp	r3, #0
 800495a:	d032      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004960:	f003 0301 	and.w	r3, r3, #1
 8004964:	2b00      	cmp	r3, #0
 8004966:	d022      	beq.n	80049ae <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2205      	movs	r2, #5
 800496c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0201 	bic.w	r2, r2, #1
 800497e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	3301      	adds	r3, #1
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	697a      	ldr	r2, [r7, #20]
 8004988:	429a      	cmp	r2, r3
 800498a:	d307      	bcc.n	800499c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f2      	bne.n	8004980 <HAL_DMA_IRQHandler+0x2cc>
 800499a:	e000      	b.n	800499e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800499c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2201      	movs	r2, #1
 80049a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d005      	beq.n	80049c2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
 80049be:	e000      	b.n	80049c2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80049c0:	bf00      	nop
    }
  }
}
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80049d6:	b2db      	uxtb	r3, r3
}
 80049d8:	4618      	mov	r0, r3
 80049da:	370c      	adds	r7, #12
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	60f8      	str	r0, [r7, #12]
 8004a04:	60b9      	str	r1, [r7, #8]
 8004a06:	607a      	str	r2, [r7, #4]
 8004a08:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004a18:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	683a      	ldr	r2, [r7, #0]
 8004a20:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2b40      	cmp	r3, #64	@ 0x40
 8004a28:	d108      	bne.n	8004a3c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68ba      	ldr	r2, [r7, #8]
 8004a38:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004a3a:	e007      	b.n	8004a4c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	60da      	str	r2, [r3, #12]
}
 8004a4c:	bf00      	nop
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b085      	sub	sp, #20
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	3b10      	subs	r3, #16
 8004a68:	4a14      	ldr	r2, [pc, #80]	@ (8004abc <DMA_CalcBaseAndBitshift+0x64>)
 8004a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6e:	091b      	lsrs	r3, r3, #4
 8004a70:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004a72:	4a13      	ldr	r2, [pc, #76]	@ (8004ac0 <DMA_CalcBaseAndBitshift+0x68>)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4413      	add	r3, r2
 8004a78:	781b      	ldrb	r3, [r3, #0]
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	d909      	bls.n	8004a9a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004a8e:	f023 0303 	bic.w	r3, r3, #3
 8004a92:	1d1a      	adds	r2, r3, #4
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a98:	e007      	b.n	8004aaa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004aa2:	f023 0303 	bic.w	r3, r3, #3
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3714      	adds	r7, #20
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	aaaaaaab 	.word	0xaaaaaaab
 8004ac0:	08010938 	.word	0x08010938

08004ac4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004acc:	2300      	movs	r3, #0
 8004ace:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d11f      	bne.n	8004b1e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d856      	bhi.n	8004b92 <DMA_CheckFifoParam+0xce>
 8004ae4:	a201      	add	r2, pc, #4	@ (adr r2, 8004aec <DMA_CheckFifoParam+0x28>)
 8004ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aea:	bf00      	nop
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b0f 	.word	0x08004b0f
 8004af4:	08004afd 	.word	0x08004afd
 8004af8:	08004b93 	.word	0x08004b93
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b00:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d046      	beq.n	8004b96 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b0c:	e043      	b.n	8004b96 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b12:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b16:	d140      	bne.n	8004b9a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b1c:	e03d      	b.n	8004b9a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b26:	d121      	bne.n	8004b6c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d837      	bhi.n	8004b9e <DMA_CheckFifoParam+0xda>
 8004b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b34 <DMA_CheckFifoParam+0x70>)
 8004b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b34:	08004b45 	.word	0x08004b45
 8004b38:	08004b4b 	.word	0x08004b4b
 8004b3c:	08004b45 	.word	0x08004b45
 8004b40:	08004b5d 	.word	0x08004b5d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
      break;
 8004b48:	e030      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b4e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d025      	beq.n	8004ba2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004b56:	2301      	movs	r3, #1
 8004b58:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b5a:	e022      	b.n	8004ba2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b60:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004b64:	d11f      	bne.n	8004ba6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004b6a:	e01c      	b.n	8004ba6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	2b02      	cmp	r3, #2
 8004b70:	d903      	bls.n	8004b7a <DMA_CheckFifoParam+0xb6>
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	2b03      	cmp	r3, #3
 8004b76:	d003      	beq.n	8004b80 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004b78:	e018      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7e:	e015      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00e      	beq.n	8004baa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004b90:	e00b      	b.n	8004baa <DMA_CheckFifoParam+0xe6>
      break;
 8004b92:	bf00      	nop
 8004b94:	e00a      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;
 8004b96:	bf00      	nop
 8004b98:	e008      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e006      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;
 8004b9e:	bf00      	nop
 8004ba0:	e004      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;
 8004ba2:	bf00      	nop
 8004ba4:	e002      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;   
 8004ba6:	bf00      	nop
 8004ba8:	e000      	b.n	8004bac <DMA_CheckFifoParam+0xe8>
      break;
 8004baa:	bf00      	nop
    }
  } 
  
  return status; 
 8004bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3714      	adds	r7, #20
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop

08004bbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	b089      	sub	sp, #36	@ 0x24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	61fb      	str	r3, [r7, #28]
 8004bd6:	e159      	b.n	8004e8c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004bd8:	2201      	movs	r2, #1
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8004be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	697a      	ldr	r2, [r7, #20]
 8004be8:	4013      	ands	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	429a      	cmp	r2, r3
 8004bf2:	f040 8148 	bne.w	8004e86 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d005      	beq.n	8004c0e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d130      	bne.n	8004c70 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c14:	69fb      	ldr	r3, [r7, #28]
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	2203      	movs	r2, #3
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43db      	mvns	r3, r3
 8004c20:	69ba      	ldr	r2, [r7, #24]
 8004c22:	4013      	ands	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68da      	ldr	r2, [r3, #12]
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	69ba      	ldr	r2, [r7, #24]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	69ba      	ldr	r2, [r7, #24]
 8004c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c44:	2201      	movs	r2, #1
 8004c46:	69fb      	ldr	r3, [r7, #28]
 8004c48:	fa02 f303 	lsl.w	r3, r2, r3
 8004c4c:	43db      	mvns	r3, r3
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	4013      	ands	r3, r2
 8004c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	685b      	ldr	r3, [r3, #4]
 8004c58:	091b      	lsrs	r3, r3, #4
 8004c5a:	f003 0201 	and.w	r2, r3, #1
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	fa02 f303 	lsl.w	r3, r2, r3
 8004c64:	69ba      	ldr	r2, [r7, #24]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	f003 0303 	and.w	r3, r3, #3
 8004c78:	2b03      	cmp	r3, #3
 8004c7a:	d017      	beq.n	8004cac <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	2203      	movs	r2, #3
 8004c88:	fa02 f303 	lsl.w	r3, r2, r3
 8004c8c:	43db      	mvns	r3, r3
 8004c8e:	69ba      	ldr	r2, [r7, #24]
 8004c90:	4013      	ands	r3, r2
 8004c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	689a      	ldr	r2, [r3, #8]
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	005b      	lsls	r3, r3, #1
 8004c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004ca0:	69ba      	ldr	r2, [r7, #24]
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69ba      	ldr	r2, [r7, #24]
 8004caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	f003 0303 	and.w	r3, r3, #3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d123      	bne.n	8004d00 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	08da      	lsrs	r2, r3, #3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	3208      	adds	r2, #8
 8004cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	f003 0307 	and.w	r3, r3, #7
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	220f      	movs	r2, #15
 8004cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd4:	43db      	mvns	r3, r3
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	4013      	ands	r3, r2
 8004cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	691a      	ldr	r2, [r3, #16]
 8004ce0:	69fb      	ldr	r3, [r7, #28]
 8004ce2:	f003 0307 	and.w	r3, r3, #7
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8004cec:	69ba      	ldr	r2, [r7, #24]
 8004cee:	4313      	orrs	r3, r2
 8004cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	08da      	lsrs	r2, r3, #3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	3208      	adds	r2, #8
 8004cfa:	69b9      	ldr	r1, [r7, #24]
 8004cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	2203      	movs	r2, #3
 8004d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d10:	43db      	mvns	r3, r3
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	4013      	ands	r3, r2
 8004d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	f003 0203 	and.w	r2, r3, #3
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	69ba      	ldr	r2, [r7, #24]
 8004d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 80a2 	beq.w	8004e86 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
 8004d46:	4b57      	ldr	r3, [pc, #348]	@ (8004ea4 <HAL_GPIO_Init+0x2e8>)
 8004d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d4a:	4a56      	ldr	r2, [pc, #344]	@ (8004ea4 <HAL_GPIO_Init+0x2e8>)
 8004d4c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d50:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d52:	4b54      	ldr	r3, [pc, #336]	@ (8004ea4 <HAL_GPIO_Init+0x2e8>)
 8004d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004d5e:	4a52      	ldr	r2, [pc, #328]	@ (8004ea8 <HAL_GPIO_Init+0x2ec>)
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	089b      	lsrs	r3, r3, #2
 8004d64:	3302      	adds	r3, #2
 8004d66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004d6c:	69fb      	ldr	r3, [r7, #28]
 8004d6e:	f003 0303 	and.w	r3, r3, #3
 8004d72:	009b      	lsls	r3, r3, #2
 8004d74:	220f      	movs	r2, #15
 8004d76:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a49      	ldr	r2, [pc, #292]	@ (8004eac <HAL_GPIO_Init+0x2f0>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d019      	beq.n	8004dbe <HAL_GPIO_Init+0x202>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a48      	ldr	r2, [pc, #288]	@ (8004eb0 <HAL_GPIO_Init+0x2f4>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_GPIO_Init+0x1fe>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	4a47      	ldr	r2, [pc, #284]	@ (8004eb4 <HAL_GPIO_Init+0x2f8>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d00d      	beq.n	8004db6 <HAL_GPIO_Init+0x1fa>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a46      	ldr	r2, [pc, #280]	@ (8004eb8 <HAL_GPIO_Init+0x2fc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d007      	beq.n	8004db2 <HAL_GPIO_Init+0x1f6>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a45      	ldr	r2, [pc, #276]	@ (8004ebc <HAL_GPIO_Init+0x300>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d101      	bne.n	8004dae <HAL_GPIO_Init+0x1f2>
 8004daa:	2304      	movs	r3, #4
 8004dac:	e008      	b.n	8004dc0 <HAL_GPIO_Init+0x204>
 8004dae:	2307      	movs	r3, #7
 8004db0:	e006      	b.n	8004dc0 <HAL_GPIO_Init+0x204>
 8004db2:	2303      	movs	r3, #3
 8004db4:	e004      	b.n	8004dc0 <HAL_GPIO_Init+0x204>
 8004db6:	2302      	movs	r3, #2
 8004db8:	e002      	b.n	8004dc0 <HAL_GPIO_Init+0x204>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_GPIO_Init+0x204>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	69fa      	ldr	r2, [r7, #28]
 8004dc2:	f002 0203 	and.w	r2, r2, #3
 8004dc6:	0092      	lsls	r2, r2, #2
 8004dc8:	4093      	lsls	r3, r2
 8004dca:	69ba      	ldr	r2, [r7, #24]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dd0:	4935      	ldr	r1, [pc, #212]	@ (8004ea8 <HAL_GPIO_Init+0x2ec>)
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	089b      	lsrs	r3, r3, #2
 8004dd6:	3302      	adds	r3, #2
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004dde:	4b38      	ldr	r3, [pc, #224]	@ (8004ec0 <HAL_GPIO_Init+0x304>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004de4:	693b      	ldr	r3, [r7, #16]
 8004de6:	43db      	mvns	r3, r3
 8004de8:	69ba      	ldr	r2, [r7, #24]
 8004dea:	4013      	ands	r3, r2
 8004dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004dfa:	69ba      	ldr	r2, [r7, #24]
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e02:	4a2f      	ldr	r2, [pc, #188]	@ (8004ec0 <HAL_GPIO_Init+0x304>)
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e08:	4b2d      	ldr	r3, [pc, #180]	@ (8004ec0 <HAL_GPIO_Init+0x304>)
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	43db      	mvns	r3, r3
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	4013      	ands	r3, r2
 8004e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e24:	69ba      	ldr	r2, [r7, #24]
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e2c:	4a24      	ldr	r2, [pc, #144]	@ (8004ec0 <HAL_GPIO_Init+0x304>)
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e32:	4b23      	ldr	r3, [pc, #140]	@ (8004ec0 <HAL_GPIO_Init+0x304>)
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	43db      	mvns	r3, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d003      	beq.n	8004e56 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004e56:	4a1a      	ldr	r2, [pc, #104]	@ (8004ec0 <HAL_GPIO_Init+0x304>)
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004e5c:	4b18      	ldr	r3, [pc, #96]	@ (8004ec0 <HAL_GPIO_Init+0x304>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d003      	beq.n	8004e80 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004e80:	4a0f      	ldr	r2, [pc, #60]	@ (8004ec0 <HAL_GPIO_Init+0x304>)
 8004e82:	69bb      	ldr	r3, [r7, #24]
 8004e84:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	61fb      	str	r3, [r7, #28]
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	2b0f      	cmp	r3, #15
 8004e90:	f67f aea2 	bls.w	8004bd8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004e94:	bf00      	nop
 8004e96:	bf00      	nop
 8004e98:	3724      	adds	r7, #36	@ 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
 8004ea2:	bf00      	nop
 8004ea4:	40023800 	.word	0x40023800
 8004ea8:	40013800 	.word	0x40013800
 8004eac:	40020000 	.word	0x40020000
 8004eb0:	40020400 	.word	0x40020400
 8004eb4:	40020800 	.word	0x40020800
 8004eb8:	40020c00 	.word	0x40020c00
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40013c00 	.word	0x40013c00

08004ec4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	807b      	strh	r3, [r7, #2]
 8004ed0:	4613      	mov	r3, r2
 8004ed2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004ed4:	787b      	ldrb	r3, [r7, #1]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004eda:	887a      	ldrh	r2, [r7, #2]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ee0:	e003      	b.n	8004eea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ee2:	887b      	ldrh	r3, [r7, #2]
 8004ee4:	041a      	lsls	r2, r3, #16
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	619a      	str	r2, [r3, #24]
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
 8004efe:	460b      	mov	r3, r1
 8004f00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004f08:	887a      	ldrh	r2, [r7, #2]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	041a      	lsls	r2, r3, #16
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	43d9      	mvns	r1, r3
 8004f14:	887b      	ldrh	r3, [r7, #2]
 8004f16:	400b      	ands	r3, r1
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	619a      	str	r2, [r3, #24]
}
 8004f1e:	bf00      	nop
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr
	...

08004f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e12b      	b.n	8005196 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d106      	bne.n	8004f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f7fd febc 	bl	8002cd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2224      	movs	r2, #36	@ 0x24
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681a      	ldr	r2, [r3, #0]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0201 	bic.w	r2, r2, #1
 8004f6e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f7e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f8e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004f90:	f004 fce6 	bl	8009960 <HAL_RCC_GetPCLK1Freq>
 8004f94:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	4a81      	ldr	r2, [pc, #516]	@ (80051a0 <HAL_I2C_Init+0x274>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d807      	bhi.n	8004fb0 <HAL_I2C_Init+0x84>
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4a80      	ldr	r2, [pc, #512]	@ (80051a4 <HAL_I2C_Init+0x278>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	bf94      	ite	ls
 8004fa8:	2301      	movls	r3, #1
 8004faa:	2300      	movhi	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	e006      	b.n	8004fbe <HAL_I2C_Init+0x92>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4a7d      	ldr	r2, [pc, #500]	@ (80051a8 <HAL_I2C_Init+0x27c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	bf94      	ite	ls
 8004fb8:	2301      	movls	r3, #1
 8004fba:	2300      	movhi	r3, #0
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e0e7      	b.n	8005196 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	4a78      	ldr	r2, [pc, #480]	@ (80051ac <HAL_I2C_Init+0x280>)
 8004fca:	fba2 2303 	umull	r2, r3, r2, r3
 8004fce:	0c9b      	lsrs	r3, r3, #18
 8004fd0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	4a6a      	ldr	r2, [pc, #424]	@ (80051a0 <HAL_I2C_Init+0x274>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d802      	bhi.n	8005000 <HAL_I2C_Init+0xd4>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	e009      	b.n	8005014 <HAL_I2C_Init+0xe8>
 8005000:	68bb      	ldr	r3, [r7, #8]
 8005002:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005006:	fb02 f303 	mul.w	r3, r2, r3
 800500a:	4a69      	ldr	r2, [pc, #420]	@ (80051b0 <HAL_I2C_Init+0x284>)
 800500c:	fba2 2303 	umull	r2, r3, r2, r3
 8005010:	099b      	lsrs	r3, r3, #6
 8005012:	3301      	adds	r3, #1
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6812      	ldr	r2, [r2, #0]
 8005018:	430b      	orrs	r3, r1
 800501a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	69db      	ldr	r3, [r3, #28]
 8005022:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005026:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	495c      	ldr	r1, [pc, #368]	@ (80051a0 <HAL_I2C_Init+0x274>)
 8005030:	428b      	cmp	r3, r1
 8005032:	d819      	bhi.n	8005068 <HAL_I2C_Init+0x13c>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	1e59      	subs	r1, r3, #1
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005042:	1c59      	adds	r1, r3, #1
 8005044:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005048:	400b      	ands	r3, r1
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00a      	beq.n	8005064 <HAL_I2C_Init+0x138>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	1e59      	subs	r1, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	005b      	lsls	r3, r3, #1
 8005058:	fbb1 f3f3 	udiv	r3, r1, r3
 800505c:	3301      	adds	r3, #1
 800505e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005062:	e051      	b.n	8005108 <HAL_I2C_Init+0x1dc>
 8005064:	2304      	movs	r3, #4
 8005066:	e04f      	b.n	8005108 <HAL_I2C_Init+0x1dc>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d111      	bne.n	8005094 <HAL_I2C_Init+0x168>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	1e58      	subs	r0, r3, #1
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6859      	ldr	r1, [r3, #4]
 8005078:	460b      	mov	r3, r1
 800507a:	005b      	lsls	r3, r3, #1
 800507c:	440b      	add	r3, r1
 800507e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005082:	3301      	adds	r3, #1
 8005084:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005088:	2b00      	cmp	r3, #0
 800508a:	bf0c      	ite	eq
 800508c:	2301      	moveq	r3, #1
 800508e:	2300      	movne	r3, #0
 8005090:	b2db      	uxtb	r3, r3
 8005092:	e012      	b.n	80050ba <HAL_I2C_Init+0x18e>
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	1e58      	subs	r0, r3, #1
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6859      	ldr	r1, [r3, #4]
 800509c:	460b      	mov	r3, r1
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	440b      	add	r3, r1
 80050a2:	0099      	lsls	r1, r3, #2
 80050a4:	440b      	add	r3, r1
 80050a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80050aa:	3301      	adds	r3, #1
 80050ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	bf0c      	ite	eq
 80050b4:	2301      	moveq	r3, #1
 80050b6:	2300      	movne	r3, #0
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_I2C_Init+0x196>
 80050be:	2301      	movs	r3, #1
 80050c0:	e022      	b.n	8005108 <HAL_I2C_Init+0x1dc>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10e      	bne.n	80050e8 <HAL_I2C_Init+0x1bc>
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1e58      	subs	r0, r3, #1
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6859      	ldr	r1, [r3, #4]
 80050d2:	460b      	mov	r3, r1
 80050d4:	005b      	lsls	r3, r3, #1
 80050d6:	440b      	add	r3, r1
 80050d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80050dc:	3301      	adds	r3, #1
 80050de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80050e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80050e6:	e00f      	b.n	8005108 <HAL_I2C_Init+0x1dc>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	1e58      	subs	r0, r3, #1
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6859      	ldr	r1, [r3, #4]
 80050f0:	460b      	mov	r3, r1
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	440b      	add	r3, r1
 80050f6:	0099      	lsls	r1, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80050fe:	3301      	adds	r3, #1
 8005100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005104:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	6809      	ldr	r1, [r1, #0]
 800510c:	4313      	orrs	r3, r2
 800510e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	69da      	ldr	r2, [r3, #28]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a1b      	ldr	r3, [r3, #32]
 8005122:	431a      	orrs	r2, r3
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	430a      	orrs	r2, r1
 800512a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005136:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	6911      	ldr	r1, [r2, #16]
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	68d2      	ldr	r2, [r2, #12]
 8005142:	4311      	orrs	r1, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6812      	ldr	r2, [r2, #0]
 8005148:	430b      	orrs	r3, r1
 800514a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	699b      	ldr	r3, [r3, #24]
 800515e:	431a      	orrs	r2, r3
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	430a      	orrs	r2, r1
 8005166:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f042 0201 	orr.w	r2, r2, #1
 8005176:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2220      	movs	r2, #32
 8005182:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3710      	adds	r7, #16
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	000186a0 	.word	0x000186a0
 80051a4:	001e847f 	.word	0x001e847f
 80051a8:	003d08ff 	.word	0x003d08ff
 80051ac:	431bde83 	.word	0x431bde83
 80051b0:	10624dd3 	.word	0x10624dd3

080051b4 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051c6:	2b80      	cmp	r3, #128	@ 0x80
 80051c8:	d103      	bne.n	80051d2 <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2200      	movs	r2, #0
 80051d0:	611a      	str	r2, [r3, #16]
  }
}
 80051d2:	bf00      	nop
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
	...

080051e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af02      	add	r7, sp, #8
 80051e6:	60f8      	str	r0, [r7, #12]
 80051e8:	4608      	mov	r0, r1
 80051ea:	4611      	mov	r1, r2
 80051ec:	461a      	mov	r2, r3
 80051ee:	4603      	mov	r3, r0
 80051f0:	817b      	strh	r3, [r7, #10]
 80051f2:	460b      	mov	r3, r1
 80051f4:	813b      	strh	r3, [r7, #8]
 80051f6:	4613      	mov	r3, r2
 80051f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80051fa:	f7fe fad1 	bl	80037a0 <HAL_GetTick>
 80051fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005206:	b2db      	uxtb	r3, r3
 8005208:	2b20      	cmp	r3, #32
 800520a:	f040 80d9 	bne.w	80053c0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	2319      	movs	r3, #25
 8005214:	2201      	movs	r2, #1
 8005216:	496d      	ldr	r1, [pc, #436]	@ (80053cc <HAL_I2C_Mem_Write+0x1ec>)
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f002 faf9 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d001      	beq.n	8005228 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005224:	2302      	movs	r3, #2
 8005226:	e0cc      	b.n	80053c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800522e:	2b01      	cmp	r3, #1
 8005230:	d101      	bne.n	8005236 <HAL_I2C_Mem_Write+0x56>
 8005232:	2302      	movs	r3, #2
 8005234:	e0c5      	b.n	80053c2 <HAL_I2C_Mem_Write+0x1e2>
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b01      	cmp	r3, #1
 800524a:	d007      	beq.n	800525c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	681a      	ldr	r2, [r3, #0]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f042 0201 	orr.w	r2, r2, #1
 800525a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800526a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2221      	movs	r2, #33	@ 0x21
 8005270:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2240      	movs	r2, #64	@ 0x40
 8005278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2200      	movs	r2, #0
 8005280:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	6a3a      	ldr	r2, [r7, #32]
 8005286:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800528c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005292:	b29a      	uxth	r2, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4a4d      	ldr	r2, [pc, #308]	@ (80053d0 <HAL_I2C_Mem_Write+0x1f0>)
 800529c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800529e:	88f8      	ldrh	r0, [r7, #6]
 80052a0:	893a      	ldrh	r2, [r7, #8]
 80052a2:	8979      	ldrh	r1, [r7, #10]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	9301      	str	r3, [sp, #4]
 80052a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	4603      	mov	r3, r0
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	f001 ff6c 	bl	800718c <I2C_RequestMemoryWrite>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d052      	beq.n	8005360 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e081      	b.n	80053c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052c2:	68f8      	ldr	r0, [r7, #12]
 80052c4:	f002 fbbe 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00d      	beq.n	80052ea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052d2:	2b04      	cmp	r3, #4
 80052d4:	d107      	bne.n	80052e6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	e06b      	b.n	80053c2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ee:	781a      	ldrb	r2, [r3, #0]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	1c5a      	adds	r2, r3, #1
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005304:	3b01      	subs	r3, #1
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005310:	b29b      	uxth	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b29a      	uxth	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	695b      	ldr	r3, [r3, #20]
 8005320:	f003 0304 	and.w	r3, r3, #4
 8005324:	2b04      	cmp	r3, #4
 8005326:	d11b      	bne.n	8005360 <HAL_I2C_Mem_Write+0x180>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800532c:	2b00      	cmp	r3, #0
 800532e:	d017      	beq.n	8005360 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	781a      	ldrb	r2, [r3, #0]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534a:	3b01      	subs	r3, #1
 800534c:	b29a      	uxth	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005356:	b29b      	uxth	r3, r3
 8005358:	3b01      	subs	r3, #1
 800535a:	b29a      	uxth	r2, r3
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1aa      	bne.n	80052be <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800536c:	68f8      	ldr	r0, [r7, #12]
 800536e:	f002 fbb1 	bl	8007ad4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d00d      	beq.n	8005394 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800537c:	2b04      	cmp	r3, #4
 800537e:	d107      	bne.n	8005390 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800538e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	e016      	b.n	80053c2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2220      	movs	r2, #32
 80053a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	e000      	b.n	80053c2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80053c0:	2302      	movs	r3, #2
  }
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	00100002 	.word	0x00100002
 80053d0:	ffff0000 	.word	0xffff0000

080053d4 <HAL_I2C_Mem_Write_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	@ 0x28
 80053d8:	af02      	add	r7, sp, #8
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	4608      	mov	r0, r1
 80053de:	4611      	mov	r1, r2
 80053e0:	461a      	mov	r2, r3
 80053e2:	4603      	mov	r3, r0
 80053e4:	817b      	strh	r3, [r7, #10]
 80053e6:	460b      	mov	r3, r1
 80053e8:	813b      	strh	r3, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80053ee:	2300      	movs	r3, #0
 80053f0:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef dmaxferstatus;

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053f2:	f7fe f9d5 	bl	80037a0 <HAL_GetTick>
 80053f6:	61f8      	str	r0, [r7, #28]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b20      	cmp	r3, #32
 8005402:	f040 8136 	bne.w	8005672 <HAL_I2C_Mem_Write_DMA+0x29e>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005406:	4b9d      	ldr	r3, [pc, #628]	@ (800567c <HAL_I2C_Mem_Write_DMA+0x2a8>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	08db      	lsrs	r3, r3, #3
 800540c:	4a9c      	ldr	r2, [pc, #624]	@ (8005680 <HAL_I2C_Mem_Write_DMA+0x2ac>)
 800540e:	fba2 2303 	umull	r2, r3, r2, r3
 8005412:	0a1a      	lsrs	r2, r3, #8
 8005414:	4613      	mov	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4413      	add	r3, r2
 800541a:	009a      	lsls	r2, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	3b01      	subs	r3, #1
 8005424:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d112      	bne.n	8005452 <HAL_I2C_Mem_Write_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005446:	f043 0220 	orr.w	r2, r3, #32
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800544e:	2302      	movs	r3, #2
 8005450:	e110      	b.n	8005674 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699b      	ldr	r3, [r3, #24]
 8005458:	f003 0302 	and.w	r3, r3, #2
 800545c:	2b02      	cmp	r3, #2
 800545e:	d0df      	beq.n	8005420 <HAL_I2C_Mem_Write_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005466:	2b01      	cmp	r3, #1
 8005468:	d101      	bne.n	800546e <HAL_I2C_Mem_Write_DMA+0x9a>
 800546a:	2302      	movs	r3, #2
 800546c:	e102      	b.n	8005674 <HAL_I2C_Mem_Write_DMA+0x2a0>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f003 0301 	and.w	r3, r3, #1
 8005480:	2b01      	cmp	r3, #1
 8005482:	d007      	beq.n	8005494 <HAL_I2C_Mem_Write_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0201 	orr.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681a      	ldr	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054a2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2221      	movs	r2, #33	@ 0x21
 80054a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2240      	movs	r2, #64	@ 0x40
 80054b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2200      	movs	r2, #0
 80054b8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80054c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	4a6c      	ldr	r2, [pc, #432]	@ (8005684 <HAL_I2C_Mem_Write_DMA+0x2b0>)
 80054d4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 80054d6:	897a      	ldrh	r2, [r7, #10]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 80054dc:	893a      	ldrh	r2, [r7, #8]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	2200      	movs	r2, #0
 80054ec:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 80a9 	beq.w	800564a <HAL_I2C_Mem_Write_DMA+0x276>
    {
      if (hi2c->hdmatx != NULL)
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d02a      	beq.n	8005556 <HAL_I2C_Mem_Write_DMA+0x182>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAXferCplt;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005504:	4a60      	ldr	r2, [pc, #384]	@ (8005688 <HAL_I2C_Mem_Write_DMA+0x2b4>)
 8005506:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800550c:	4a5f      	ldr	r2, [pc, #380]	@ (800568c <HAL_I2C_Mem_Write_DMA+0x2b8>)
 800550e:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005514:	2200      	movs	r2, #0
 8005516:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmatx->XferM1CpltCallback = NULL;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800551c:	2200      	movs	r2, #0
 800551e:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmatx->XferM1HalfCpltCallback = NULL;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005524:	2200      	movs	r2, #0
 8005526:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmatx->XferAbortCallback = NULL;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552c:	2200      	movs	r2, #0
 800552e:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->DR, hi2c->XferSize);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005538:	4619      	mov	r1, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	3310      	adds	r3, #16
 8005540:	461a      	mov	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005546:	f7ff f83b 	bl	80045c0 <HAL_DMA_Start_IT>
 800554a:	4603      	mov	r3, r0
 800554c:	76fb      	strb	r3, [r7, #27]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800554e:	7efb      	ldrb	r3, [r7, #27]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d166      	bne.n	8005622 <HAL_I2C_Mem_Write_DMA+0x24e>
 8005554:	e013      	b.n	800557e <HAL_I2C_Mem_Write_DMA+0x1aa>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	2220      	movs	r2, #32
 800555a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800556a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2200      	movs	r2, #0
 8005576:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800557a:	2301      	movs	r3, #1
 800557c:	e07a      	b.n	8005674 <HAL_I2C_Mem_Write_DMA+0x2a0>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800557e:	88f8      	ldrh	r0, [r7, #6]
 8005580:	893a      	ldrh	r2, [r7, #8]
 8005582:	8979      	ldrh	r1, [r7, #10]
 8005584:	69fb      	ldr	r3, [r7, #28]
 8005586:	9301      	str	r3, [sp, #4]
 8005588:	2323      	movs	r3, #35	@ 0x23
 800558a:	9300      	str	r3, [sp, #0]
 800558c:	4603      	mov	r3, r0
 800558e:	68f8      	ldr	r0, [r7, #12]
 8005590:	f001 fdfc 	bl	800718c <I2C_RequestMemoryWrite>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d022      	beq.n	80055e0 <HAL_I2C_Mem_Write_DMA+0x20c>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmatx);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800559e:	4618      	mov	r0, r3
 80055a0:	f7ff f866 	bl	8004670 <HAL_DMA_Abort_IT>
 80055a4:	4603      	mov	r3, r0
 80055a6:	76fb      	strb	r3, [r7, #27]

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmatx->XferCpltCallback = NULL;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80055ac:	2200      	movs	r2, #0
 80055ae:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055be:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f022 0201 	bic.w	r2, r2, #1
 80055da:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e049      	b.n	8005674 <HAL_I2C_Mem_Write_DMA+0x2a0>
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055e0:	2300      	movs	r3, #0
 80055e2:	613b      	str	r3, [r7, #16]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	613b      	str	r3, [r7, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699b      	ldr	r3, [r3, #24]
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	693b      	ldr	r3, [r7, #16]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685a      	ldr	r2, [r3, #4]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800560c:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	685a      	ldr	r2, [r3, #4]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800561c:	605a      	str	r2, [r3, #4]

        return HAL_OK;
 800561e:	2300      	movs	r3, #0
 8005620:	e028      	b.n	8005674 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2200      	movs	r2, #0
 800562e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005636:	f043 0210 	orr.w	r2, r3, #16
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e014      	b.n	8005674 <HAL_I2C_Mem_Write_DMA+0x2a0>
      }
    }
    else
    {
      /* Update I2C state */
      hi2c->State     = HAL_I2C_STATE_READY;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	2220      	movs	r2, #32
 800564e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Update I2C error code */
      hi2c->ErrorCode |= HAL_I2C_ERROR_SIZE;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800565e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e000      	b.n	8005674 <HAL_I2C_Mem_Write_DMA+0x2a0>
    }
  }
  else
  {
    return HAL_BUSY;
 8005672:	2302      	movs	r3, #2
  }
}
 8005674:	4618      	mov	r0, r3
 8005676:	3720      	adds	r7, #32
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20000030 	.word	0x20000030
 8005680:	14f8b589 	.word	0x14f8b589
 8005684:	ffff0000 	.word	0xffff0000
 8005688:	08007489 	.word	0x08007489
 800568c:	08007647 	.word	0x08007647

08005690 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b08c      	sub	sp, #48	@ 0x30
 8005694:	af02      	add	r7, sp, #8
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	4608      	mov	r0, r1
 800569a:	4611      	mov	r1, r2
 800569c:	461a      	mov	r2, r3
 800569e:	4603      	mov	r3, r0
 80056a0:	817b      	strh	r3, [r7, #10]
 80056a2:	460b      	mov	r3, r1
 80056a4:	813b      	strh	r3, [r7, #8]
 80056a6:	4613      	mov	r3, r2
 80056a8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056aa:	f7fe f879 	bl	80037a0 <HAL_GetTick>
 80056ae:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056ba:	b2db      	uxtb	r3, r3
 80056bc:	2b20      	cmp	r3, #32
 80056be:	f040 8172 	bne.w	80059a6 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80056c2:	4b93      	ldr	r3, [pc, #588]	@ (8005910 <HAL_I2C_Mem_Read_DMA+0x280>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	08db      	lsrs	r3, r3, #3
 80056c8:	4a92      	ldr	r2, [pc, #584]	@ (8005914 <HAL_I2C_Mem_Read_DMA+0x284>)
 80056ca:	fba2 2303 	umull	r2, r3, r2, r3
 80056ce:	0a1a      	lsrs	r2, r3, #8
 80056d0:	4613      	mov	r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	4413      	add	r3, r2
 80056d6:	009a      	lsls	r2, r3, #2
 80056d8:	4413      	add	r3, r2
 80056da:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	3b01      	subs	r3, #1
 80056e0:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d112      	bne.n	800570e <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	2200      	movs	r2, #0
 80056ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005702:	f043 0220 	orr.w	r2, r3, #32
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 800570a:	2302      	movs	r3, #2
 800570c:	e14c      	b.n	80059a8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	699b      	ldr	r3, [r3, #24]
 8005714:	f003 0302 	and.w	r3, r3, #2
 8005718:	2b02      	cmp	r3, #2
 800571a:	d0df      	beq.n	80056dc <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005722:	2b01      	cmp	r3, #1
 8005724:	d101      	bne.n	800572a <HAL_I2C_Mem_Read_DMA+0x9a>
 8005726:	2302      	movs	r3, #2
 8005728:	e13e      	b.n	80059a8 <HAL_I2C_Mem_Read_DMA+0x318>
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2201      	movs	r2, #1
 800572e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b01      	cmp	r3, #1
 800573e:	d007      	beq.n	8005750 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	681a      	ldr	r2, [r3, #0]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f042 0201 	orr.w	r2, r2, #1
 800574e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	681a      	ldr	r2, [r3, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800575e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2222      	movs	r2, #34	@ 0x22
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	2240      	movs	r2, #64	@ 0x40
 800576c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800577a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005780:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005786:	b29a      	uxth	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	4a62      	ldr	r2, [pc, #392]	@ (8005918 <HAL_I2C_Mem_Read_DMA+0x288>)
 8005790:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005792:	897a      	ldrh	r2, [r7, #10]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005798:	893a      	ldrh	r2, [r7, #8]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800579e:	88fa      	ldrh	r2, [r7, #6]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	2200      	movs	r2, #0
 80057a8:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	f000 80cc 	beq.w	800594c <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d02d      	beq.n	8005818 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c0:	4a56      	ldr	r2, [pc, #344]	@ (800591c <HAL_I2C_Mem_Read_DMA+0x28c>)
 80057c2:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057c8:	4a55      	ldr	r2, [pc, #340]	@ (8005920 <HAL_I2C_Mem_Read_DMA+0x290>)
 80057ca:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d0:	2200      	movs	r2, #0
 80057d2:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057d8:	2200      	movs	r2, #0
 80057da:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e0:	2200      	movs	r2, #0
 80057e2:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e8:	2200      	movs	r2, #0
 80057ea:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	3310      	adds	r3, #16
 80057f6:	4619      	mov	r1, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fc:	461a      	mov	r2, r3
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005802:	f7fe fedd 	bl	80045c0 <HAL_DMA_Start_IT>
 8005806:	4603      	mov	r3, r0
 8005808:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800580c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005810:	2b00      	cmp	r3, #0
 8005812:	f040 8087 	bne.w	8005924 <HAL_I2C_Mem_Read_DMA+0x294>
 8005816:	e013      	b.n	8005840 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2220      	movs	r2, #32
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800582c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 800583c:	2301      	movs	r3, #1
 800583e:	e0b3      	b.n	80059a8 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005840:	88f8      	ldrh	r0, [r7, #6]
 8005842:	893a      	ldrh	r2, [r7, #8]
 8005844:	8979      	ldrh	r1, [r7, #10]
 8005846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	2323      	movs	r3, #35	@ 0x23
 800584c:	9300      	str	r3, [sp, #0]
 800584e:	4603      	mov	r3, r0
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f001 fd31 	bl	80072b8 <I2C_RequestMemoryRead>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d023      	beq.n	80058a4 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005860:	4618      	mov	r0, r3
 8005862:	f7fe ff05 	bl	8004670 <HAL_DMA_Abort_IT>
 8005866:	4603      	mov	r3, r0
 8005868:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005870:	2200      	movs	r2, #0
 8005872:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005882:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0201 	bic.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e081      	b.n	80059a8 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	d108      	bne.n	80058be <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80058ba:	601a      	str	r2, [r3, #0]
 80058bc:	e007      	b.n	80058ce <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80058cc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058ce:	2300      	movs	r3, #0
 80058d0:	61bb      	str	r3, [r7, #24]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	61bb      	str	r3, [r7, #24]
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058fa:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685a      	ldr	r2, [r3, #4]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800590a:	605a      	str	r2, [r3, #4]
 800590c:	e049      	b.n	80059a2 <HAL_I2C_Mem_Read_DMA+0x312>
 800590e:	bf00      	nop
 8005910:	20000030 	.word	0x20000030
 8005914:	14f8b589 	.word	0x14f8b589
 8005918:	ffff0000 	.word	0xffff0000
 800591c:	08007489 	.word	0x08007489
 8005920:	08007647 	.word	0x08007647
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005938:	f043 0210 	orr.w	r2, r3, #16
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2200      	movs	r2, #0
 8005944:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e02d      	b.n	80059a8 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 800594c:	88f8      	ldrh	r0, [r7, #6]
 800594e:	893a      	ldrh	r2, [r7, #8]
 8005950:	8979      	ldrh	r1, [r7, #10]
 8005952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005954:	9301      	str	r3, [sp, #4]
 8005956:	2323      	movs	r3, #35	@ 0x23
 8005958:	9300      	str	r3, [sp, #0]
 800595a:	4603      	mov	r3, r0
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f001 fcab 	bl	80072b8 <I2C_RequestMemoryRead>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e01d      	b.n	80059a8 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800596c:	2300      	movs	r3, #0
 800596e:	617b      	str	r3, [r7, #20]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	699b      	ldr	r3, [r3, #24]
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005990:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2220      	movs	r2, #32
 8005996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 80059a2:	2300      	movs	r3, #0
 80059a4:	e000      	b.n	80059a8 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 80059a6:	2302      	movs	r3, #2
  }
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3728      	adds	r7, #40	@ 0x28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b088      	sub	sp, #32
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80059d0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059d8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80059da:	7bfb      	ldrb	r3, [r7, #15]
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d003      	beq.n	80059e8 <HAL_I2C_EV_IRQHandler+0x38>
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b40      	cmp	r3, #64	@ 0x40
 80059e4:	f040 80c1 	bne.w	8005b6a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	699b      	ldr	r3, [r3, #24]
 80059ee:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	f003 0301 	and.w	r3, r3, #1
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10d      	bne.n	8005a1e <HAL_I2C_EV_IRQHandler+0x6e>
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005a08:	d003      	beq.n	8005a12 <HAL_I2C_EV_IRQHandler+0x62>
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005a10:	d101      	bne.n	8005a16 <HAL_I2C_EV_IRQHandler+0x66>
 8005a12:	2301      	movs	r3, #1
 8005a14:	e000      	b.n	8005a18 <HAL_I2C_EV_IRQHandler+0x68>
 8005a16:	2300      	movs	r3, #0
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	f000 8132 	beq.w	8005c82 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00c      	beq.n	8005a42 <HAL_I2C_EV_IRQHandler+0x92>
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	0a5b      	lsrs	r3, r3, #9
 8005a2c:	f003 0301 	and.w	r3, r3, #1
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d006      	beq.n	8005a42 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f002 f8f6 	bl	8007c26 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 fd87 	bl	800654e <I2C_Master_SB>
 8005a40:	e092      	b.n	8005b68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	08db      	lsrs	r3, r3, #3
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d009      	beq.n	8005a62 <HAL_I2C_EV_IRQHandler+0xb2>
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	0a5b      	lsrs	r3, r3, #9
 8005a52:	f003 0301 	and.w	r3, r3, #1
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fdfd 	bl	800665a <I2C_Master_ADD10>
 8005a60:	e082      	b.n	8005b68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	085b      	lsrs	r3, r3, #1
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d009      	beq.n	8005a82 <HAL_I2C_EV_IRQHandler+0xd2>
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	0a5b      	lsrs	r3, r3, #9
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d003      	beq.n	8005a82 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 fe17 	bl	80066ae <I2C_Master_ADDR>
 8005a80:	e072      	b.n	8005b68 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005a82:	69bb      	ldr	r3, [r7, #24]
 8005a84:	089b      	lsrs	r3, r3, #2
 8005a86:	f003 0301 	and.w	r3, r3, #1
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d03b      	beq.n	8005b06 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a98:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005a9c:	f000 80f3 	beq.w	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	09db      	lsrs	r3, r3, #7
 8005aa4:	f003 0301 	and.w	r3, r3, #1
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00f      	beq.n	8005acc <HAL_I2C_EV_IRQHandler+0x11c>
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	0a9b      	lsrs	r3, r3, #10
 8005ab0:	f003 0301 	and.w	r3, r3, #1
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d009      	beq.n	8005acc <HAL_I2C_EV_IRQHandler+0x11c>
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	089b      	lsrs	r3, r3, #2
 8005abc:	f003 0301 	and.w	r3, r3, #1
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d103      	bne.n	8005acc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f9df 	bl	8005e88 <I2C_MasterTransmit_TXE>
 8005aca:	e04d      	b.n	8005b68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	089b      	lsrs	r3, r3, #2
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80d6 	beq.w	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	0a5b      	lsrs	r3, r3, #9
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 80cf 	beq.w	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005ae8:	7bbb      	ldrb	r3, [r7, #14]
 8005aea:	2b21      	cmp	r3, #33	@ 0x21
 8005aec:	d103      	bne.n	8005af6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa66 	bl	8005fc0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005af4:	e0c7      	b.n	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005af6:	7bfb      	ldrb	r3, [r7, #15]
 8005af8:	2b40      	cmp	r3, #64	@ 0x40
 8005afa:	f040 80c4 	bne.w	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 fad4 	bl	80060ac <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b04:	e0bf      	b.n	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b14:	f000 80b7 	beq.w	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005b18:	69fb      	ldr	r3, [r7, #28]
 8005b1a:	099b      	lsrs	r3, r3, #6
 8005b1c:	f003 0301 	and.w	r3, r3, #1
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d00f      	beq.n	8005b44 <HAL_I2C_EV_IRQHandler+0x194>
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	0a9b      	lsrs	r3, r3, #10
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d009      	beq.n	8005b44 <HAL_I2C_EV_IRQHandler+0x194>
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	089b      	lsrs	r3, r3, #2
 8005b34:	f003 0301 	and.w	r3, r3, #1
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d103      	bne.n	8005b44 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005b3c:	6878      	ldr	r0, [r7, #4]
 8005b3e:	f000 fb4d 	bl	80061dc <I2C_MasterReceive_RXNE>
 8005b42:	e011      	b.n	8005b68 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	089b      	lsrs	r3, r3, #2
 8005b48:	f003 0301 	and.w	r3, r3, #1
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 809a 	beq.w	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	0a5b      	lsrs	r3, r3, #9
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8093 	beq.w	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 fc03 	bl	800636c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b66:	e08e      	b.n	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
 8005b68:	e08d      	b.n	8005c86 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d004      	beq.n	8005b7c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	61fb      	str	r3, [r7, #28]
 8005b7a:	e007      	b.n	8005b8c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	695b      	ldr	r3, [r3, #20]
 8005b8a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	085b      	lsrs	r3, r3, #1
 8005b90:	f003 0301 	and.w	r3, r3, #1
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d012      	beq.n	8005bbe <HAL_I2C_EV_IRQHandler+0x20e>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	0a5b      	lsrs	r3, r3, #9
 8005b9c:	f003 0301 	and.w	r3, r3, #1
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d00c      	beq.n	8005bbe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005bb4:	69b9      	ldr	r1, [r7, #24]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 ffc8 	bl	8006b4c <I2C_Slave_ADDR>
 8005bbc:	e066      	b.n	8005c8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005bbe:	69fb      	ldr	r3, [r7, #28]
 8005bc0:	091b      	lsrs	r3, r3, #4
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d009      	beq.n	8005bde <HAL_I2C_EV_IRQHandler+0x22e>
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	0a5b      	lsrs	r3, r3, #9
 8005bce:	f003 0301 	and.w	r3, r3, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 f802 	bl	8006be0 <I2C_Slave_STOPF>
 8005bdc:	e056      	b.n	8005c8c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	2b21      	cmp	r3, #33	@ 0x21
 8005be2:	d002      	beq.n	8005bea <HAL_I2C_EV_IRQHandler+0x23a>
 8005be4:	7bbb      	ldrb	r3, [r7, #14]
 8005be6:	2b29      	cmp	r3, #41	@ 0x29
 8005be8:	d125      	bne.n	8005c36 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	09db      	lsrs	r3, r3, #7
 8005bee:	f003 0301 	and.w	r3, r3, #1
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00f      	beq.n	8005c16 <HAL_I2C_EV_IRQHandler+0x266>
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	0a9b      	lsrs	r3, r3, #10
 8005bfa:	f003 0301 	and.w	r3, r3, #1
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <HAL_I2C_EV_IRQHandler+0x266>
 8005c02:	69fb      	ldr	r3, [r7, #28]
 8005c04:	089b      	lsrs	r3, r3, #2
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 fede 	bl	80069d0 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c14:	e039      	b.n	8005c8a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c16:	69fb      	ldr	r3, [r7, #28]
 8005c18:	089b      	lsrs	r3, r3, #2
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d033      	beq.n	8005c8a <HAL_I2C_EV_IRQHandler+0x2da>
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	0a5b      	lsrs	r3, r3, #9
 8005c26:	f003 0301 	and.w	r3, r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d02d      	beq.n	8005c8a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 ff0b 	bl	8006a4a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c34:	e029      	b.n	8005c8a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	099b      	lsrs	r3, r3, #6
 8005c3a:	f003 0301 	and.w	r3, r3, #1
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d00f      	beq.n	8005c62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	0a9b      	lsrs	r3, r3, #10
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d009      	beq.n	8005c62 <HAL_I2C_EV_IRQHandler+0x2b2>
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	089b      	lsrs	r3, r3, #2
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d103      	bne.n	8005c62 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 ff16 	bl	8006a8c <I2C_SlaveReceive_RXNE>
 8005c60:	e014      	b.n	8005c8c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c62:	69fb      	ldr	r3, [r7, #28]
 8005c64:	089b      	lsrs	r3, r3, #2
 8005c66:	f003 0301 	and.w	r3, r3, #1
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d00e      	beq.n	8005c8c <HAL_I2C_EV_IRQHandler+0x2dc>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	0a5b      	lsrs	r3, r3, #9
 8005c72:	f003 0301 	and.w	r3, r3, #1
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d008      	beq.n	8005c8c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 ff44 	bl	8006b08 <I2C_SlaveReceive_BTF>
 8005c80:	e004      	b.n	8005c8c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8005c82:	bf00      	nop
 8005c84:	e002      	b.n	8005c8c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005c86:	bf00      	nop
 8005c88:	e000      	b.n	8005c8c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005c8a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005c8c:	3720      	adds	r7, #32
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b08a      	sub	sp, #40	@ 0x28
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	685b      	ldr	r3, [r3, #4]
 8005ca8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005caa:	2300      	movs	r3, #0
 8005cac:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005cb4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005cb6:	6a3b      	ldr	r3, [r7, #32]
 8005cb8:	0a1b      	lsrs	r3, r3, #8
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00e      	beq.n	8005ce0 <HAL_I2C_ER_IRQHandler+0x4e>
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d008      	beq.n	8005ce0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd0:	f043 0301 	orr.w	r3, r3, #1
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005cde:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005ce0:	6a3b      	ldr	r3, [r7, #32]
 8005ce2:	0a5b      	lsrs	r3, r3, #9
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d00e      	beq.n	8005d0a <HAL_I2C_ER_IRQHandler+0x78>
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	0a1b      	lsrs	r3, r3, #8
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	f043 0302 	orr.w	r3, r3, #2
 8005cfe:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005d08:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d0a:	6a3b      	ldr	r3, [r7, #32]
 8005d0c:	0a9b      	lsrs	r3, r3, #10
 8005d0e:	f003 0301 	and.w	r3, r3, #1
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d03f      	beq.n	8005d96 <HAL_I2C_ER_IRQHandler+0x104>
 8005d16:	69fb      	ldr	r3, [r7, #28]
 8005d18:	0a1b      	lsrs	r3, r3, #8
 8005d1a:	f003 0301 	and.w	r3, r3, #1
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d039      	beq.n	8005d96 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8005d22:	7efb      	ldrb	r3, [r7, #27]
 8005d24:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d34:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d3a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005d3c:	7ebb      	ldrb	r3, [r7, #26]
 8005d3e:	2b20      	cmp	r3, #32
 8005d40:	d112      	bne.n	8005d68 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10f      	bne.n	8005d68 <HAL_I2C_ER_IRQHandler+0xd6>
 8005d48:	7cfb      	ldrb	r3, [r7, #19]
 8005d4a:	2b21      	cmp	r3, #33	@ 0x21
 8005d4c:	d008      	beq.n	8005d60 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005d4e:	7cfb      	ldrb	r3, [r7, #19]
 8005d50:	2b29      	cmp	r3, #41	@ 0x29
 8005d52:	d005      	beq.n	8005d60 <HAL_I2C_ER_IRQHandler+0xce>
 8005d54:	7cfb      	ldrb	r3, [r7, #19]
 8005d56:	2b28      	cmp	r3, #40	@ 0x28
 8005d58:	d106      	bne.n	8005d68 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b21      	cmp	r3, #33	@ 0x21
 8005d5e:	d103      	bne.n	8005d68 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f001 f86d 	bl	8006e40 <I2C_Slave_AF>
 8005d66:	e016      	b.n	8005d96 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005d70:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d74:	f043 0304 	orr.w	r3, r3, #4
 8005d78:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005d7a:	7efb      	ldrb	r3, [r7, #27]
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d002      	beq.n	8005d86 <HAL_I2C_ER_IRQHandler+0xf4>
 8005d80:	7efb      	ldrb	r3, [r7, #27]
 8005d82:	2b40      	cmp	r3, #64	@ 0x40
 8005d84:	d107      	bne.n	8005d96 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d94:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	0adb      	lsrs	r3, r3, #11
 8005d9a:	f003 0301 	and.w	r3, r3, #1
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00e      	beq.n	8005dc0 <HAL_I2C_ER_IRQHandler+0x12e>
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	0a1b      	lsrs	r3, r3, #8
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d008      	beq.n	8005dc0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db0:	f043 0308 	orr.w	r3, r3, #8
 8005db4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005dbe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d008      	beq.n	8005dd8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dcc:	431a      	orrs	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 f8a8 	bl	8006f28 <I2C_ITError>
  }
}
 8005dd8:	bf00      	nop
 8005dda:	3728      	adds	r7, #40	@ 0x28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	bd80      	pop	{r7, pc}

08005de0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005de0:	b480      	push	{r7}
 8005de2:	b083      	sub	sp, #12
 8005de4:	af00      	add	r7, sp, #0
 8005de6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005dfc:	bf00      	nop
 8005dfe:	370c      	adds	r7, #12
 8005e00:	46bd      	mov	sp, r7
 8005e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e06:	4770      	bx	lr

08005e08 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
 8005e3c:	4613      	mov	r3, r2
 8005e3e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b083      	sub	sp, #12
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005e68:	bf00      	nop
 8005e6a:	370c      	adds	r7, #12
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e72:	4770      	bx	lr

08005e74 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b083      	sub	sp, #12
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005e7c:	bf00      	nop
 8005e7e:	370c      	adds	r7, #12
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr

08005e88 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b084      	sub	sp, #16
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e96:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e9e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d150      	bne.n	8005f50 <I2C_MasterTransmit_TXE+0xc8>
 8005eae:	7bfb      	ldrb	r3, [r7, #15]
 8005eb0:	2b21      	cmp	r3, #33	@ 0x21
 8005eb2:	d14d      	bne.n	8005f50 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	2b08      	cmp	r3, #8
 8005eb8:	d01d      	beq.n	8005ef6 <I2C_MasterTransmit_TXE+0x6e>
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b20      	cmp	r3, #32
 8005ebe:	d01a      	beq.n	8005ef6 <I2C_MasterTransmit_TXE+0x6e>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ec6:	d016      	beq.n	8005ef6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685a      	ldr	r2, [r3, #4]
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005ed6:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2211      	movs	r2, #17
 8005edc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2220      	movs	r2, #32
 8005eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7ff ff76 	bl	8005de0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005ef4:	e060      	b.n	8005fb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f04:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681a      	ldr	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f14:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2220      	movs	r2, #32
 8005f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	2b40      	cmp	r3, #64	@ 0x40
 8005f2e:	d107      	bne.n	8005f40 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fa fe65 	bl	8000c08 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f3e:	e03b      	b.n	8005fb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f7ff ff49 	bl	8005de0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005f4e:	e033      	b.n	8005fb8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	2b21      	cmp	r3, #33	@ 0x21
 8005f54:	d005      	beq.n	8005f62 <I2C_MasterTransmit_TXE+0xda>
 8005f56:	7bbb      	ldrb	r3, [r7, #14]
 8005f58:	2b40      	cmp	r3, #64	@ 0x40
 8005f5a:	d12d      	bne.n	8005fb8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005f5c:	7bfb      	ldrb	r3, [r7, #15]
 8005f5e:	2b22      	cmp	r3, #34	@ 0x22
 8005f60:	d12a      	bne.n	8005fb8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d108      	bne.n	8005f7e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685a      	ldr	r2, [r3, #4]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f7a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005f7c:	e01c      	b.n	8005fb8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	2b40      	cmp	r3, #64	@ 0x40
 8005f88:	d103      	bne.n	8005f92 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 f88e 	bl	80060ac <I2C_MemoryTransmit_TXE_BTF>
}
 8005f90:	e012      	b.n	8005fb8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f96:	781a      	ldrb	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa2:	1c5a      	adds	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005fb6:	e7ff      	b.n	8005fb8 <I2C_MasterTransmit_TXE+0x130>
 8005fb8:	bf00      	nop
 8005fba:	3710      	adds	r7, #16
 8005fbc:	46bd      	mov	sp, r7
 8005fbe:	bd80      	pop	{r7, pc}

08005fc0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b084      	sub	sp, #16
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fcc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fd4:	b2db      	uxtb	r3, r3
 8005fd6:	2b21      	cmp	r3, #33	@ 0x21
 8005fd8:	d164      	bne.n	80060a4 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d012      	beq.n	800600a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	781a      	ldrb	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff4:	1c5a      	adds	r2, r3, #1
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006008:	e04c      	b.n	80060a4 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2b08      	cmp	r3, #8
 800600e:	d01d      	beq.n	800604c <I2C_MasterTransmit_BTF+0x8c>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b20      	cmp	r3, #32
 8006014:	d01a      	beq.n	800604c <I2C_MasterTransmit_BTF+0x8c>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800601c:	d016      	beq.n	800604c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	685a      	ldr	r2, [r3, #4]
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800602c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2211      	movs	r2, #17
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2200      	movs	r2, #0
 8006038:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2220      	movs	r2, #32
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f7ff fecb 	bl	8005de0 <HAL_I2C_MasterTxCpltCallback>
}
 800604a:	e02b      	b.n	80060a4 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800605a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800606a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006080:	b2db      	uxtb	r3, r3
 8006082:	2b40      	cmp	r3, #64	@ 0x40
 8006084:	d107      	bne.n	8006096 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2200      	movs	r2, #0
 800608a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7fa fdba 	bl	8000c08 <HAL_I2C_MemTxCpltCallback>
}
 8006094:	e006      	b.n	80060a4 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff fe9e 	bl	8005de0 <HAL_I2C_MasterTxCpltCallback>
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80060ba:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d11d      	bne.n	8006100 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d10b      	bne.n	80060e4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060dc:	1c9a      	adds	r2, r3, #2
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 80060e2:	e077      	b.n	80061d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	121b      	asrs	r3, r3, #8
 80060ec:	b2da      	uxtb	r2, r3
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060f8:	1c5a      	adds	r2, r3, #1
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80060fe:	e069      	b.n	80061d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006104:	2b01      	cmp	r3, #1
 8006106:	d10b      	bne.n	8006120 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800610c:	b2da      	uxtb	r2, r3
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006118:	1c5a      	adds	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800611e:	e059      	b.n	80061d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006124:	2b02      	cmp	r3, #2
 8006126:	d152      	bne.n	80061ce <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006128:	7bfb      	ldrb	r3, [r7, #15]
 800612a:	2b22      	cmp	r3, #34	@ 0x22
 800612c:	d10d      	bne.n	800614a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800613c:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006142:	1c5a      	adds	r2, r3, #1
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8006148:	e044      	b.n	80061d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800614e:	b29b      	uxth	r3, r3
 8006150:	2b00      	cmp	r3, #0
 8006152:	d015      	beq.n	8006180 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	2b21      	cmp	r3, #33	@ 0x21
 8006158:	d112      	bne.n	8006180 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615e:	781a      	ldrb	r2, [r3, #0]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800617e:	e029      	b.n	80061d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006184:	b29b      	uxth	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d124      	bne.n	80061d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
 800618a:	7bfb      	ldrb	r3, [r7, #15]
 800618c:	2b21      	cmp	r3, #33	@ 0x21
 800618e:	d121      	bne.n	80061d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800619e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061ae:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2220      	movs	r2, #32
 80061ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f7fa fd1e 	bl	8000c08 <HAL_I2C_MemTxCpltCallback>
}
 80061cc:	e002      	b.n	80061d4 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fe fff0 	bl	80051b4 <I2C_Flush_DR>
}
 80061d4:	bf00      	nop
 80061d6:	3710      	adds	r7, #16
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b22      	cmp	r3, #34	@ 0x22
 80061ee:	f040 80b9 	bne.w	8006364 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061fc:	b29b      	uxth	r3, r3
 80061fe:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2b03      	cmp	r3, #3
 8006204:	d921      	bls.n	800624a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691a      	ldr	r2, [r3, #16]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006210:	b2d2      	uxtb	r2, r2
 8006212:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006218:	1c5a      	adds	r2, r3, #1
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006222:	b29b      	uxth	r3, r3
 8006224:	3b01      	subs	r3, #1
 8006226:	b29a      	uxth	r2, r3
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006230:	b29b      	uxth	r3, r3
 8006232:	2b03      	cmp	r3, #3
 8006234:	f040 8096 	bne.w	8006364 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006246:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006248:	e08c      	b.n	8006364 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800624e:	2b02      	cmp	r3, #2
 8006250:	d07f      	beq.n	8006352 <I2C_MasterReceive_RXNE+0x176>
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	2b01      	cmp	r3, #1
 8006256:	d002      	beq.n	800625e <I2C_MasterReceive_RXNE+0x82>
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d179      	bne.n	8006352 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f001 fc80 	bl	8007b64 <I2C_WaitOnSTOPRequestThroughIT>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d14c      	bne.n	8006304 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	681a      	ldr	r2, [r3, #0]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006278:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	685a      	ldr	r2, [r3, #4]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006288:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	691a      	ldr	r2, [r3, #16]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006294:	b2d2      	uxtb	r2, r2
 8006296:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629c:	1c5a      	adds	r2, r3, #1
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	3b01      	subs	r3, #1
 80062aa:	b29a      	uxth	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	2b40      	cmp	r3, #64	@ 0x40
 80062c2:	d10a      	bne.n	80062da <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fa fca8 	bl	8000c28 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80062d8:	e044      	b.n	8006364 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d002      	beq.n	80062ee <I2C_MasterReceive_RXNE+0x112>
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	d103      	bne.n	80062f6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80062f4:	e002      	b.n	80062fc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2212      	movs	r2, #18
 80062fa:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f7ff fd79 	bl	8005df4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006302:	e02f      	b.n	8006364 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685a      	ldr	r2, [r3, #4]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006312:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691a      	ldr	r2, [r3, #16]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800631e:	b2d2      	uxtb	r2, r2
 8006320:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006330:	b29b      	uxth	r3, r3
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2220      	movs	r2, #32
 800633e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff fd88 	bl	8005e60 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006350:	e008      	b.n	8006364 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006360:	605a      	str	r2, [r3, #4]
}
 8006362:	e7ff      	b.n	8006364 <I2C_MasterReceive_RXNE+0x188>
 8006364:	bf00      	nop
 8006366:	3710      	adds	r7, #16
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006378:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	2b04      	cmp	r3, #4
 8006382:	d11b      	bne.n	80063bc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	685a      	ldr	r2, [r3, #4]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006392:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691a      	ldr	r2, [r3, #16]
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800639e:	b2d2      	uxtb	r2, r2
 80063a0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063a6:	1c5a      	adds	r2, r3, #1
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	3b01      	subs	r3, #1
 80063b4:	b29a      	uxth	r2, r3
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80063ba:	e0c4      	b.n	8006546 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 3U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d129      	bne.n	800641a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	685a      	ldr	r2, [r3, #4]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063d4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d00a      	beq.n	80063f2 <I2C_MasterReceive_BTF+0x86>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d007      	beq.n	80063f2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063f0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	691a      	ldr	r2, [r3, #16]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006404:	1c5a      	adds	r2, r3, #1
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800640e:	b29b      	uxth	r3, r3
 8006410:	3b01      	subs	r3, #1
 8006412:	b29a      	uxth	r2, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006418:	e095      	b.n	8006546 <I2C_MasterReceive_BTF+0x1da>
  else if (hi2c->XferCount == 2U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800641e:	b29b      	uxth	r3, r3
 8006420:	2b02      	cmp	r3, #2
 8006422:	d17d      	bne.n	8006520 <I2C_MasterReceive_BTF+0x1b4>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d002      	beq.n	8006430 <I2C_MasterReceive_BTF+0xc4>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2b10      	cmp	r3, #16
 800642e:	d108      	bne.n	8006442 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800643e:	601a      	str	r2, [r3, #0]
 8006440:	e016      	b.n	8006470 <I2C_MasterReceive_BTF+0x104>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2b04      	cmp	r3, #4
 8006446:	d002      	beq.n	800644e <I2C_MasterReceive_BTF+0xe2>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d108      	bne.n	8006460 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800645c:	601a      	str	r2, [r3, #0]
 800645e:	e007      	b.n	8006470 <I2C_MasterReceive_BTF+0x104>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	681a      	ldr	r2, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800646e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800648c:	b29b      	uxth	r3, r3
 800648e:	3b01      	subs	r3, #1
 8006490:	b29a      	uxth	r2, r3
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	691a      	ldr	r2, [r3, #16]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a0:	b2d2      	uxtb	r2, r2
 80064a2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	3b01      	subs	r3, #1
 80064b6:	b29a      	uxth	r2, r3
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80064ca:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064da:	b2db      	uxtb	r3, r3
 80064dc:	2b40      	cmp	r3, #64	@ 0x40
 80064de:	d10a      	bne.n	80064f6 <I2C_MasterReceive_BTF+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f7fa fb9a 	bl	8000c28 <HAL_I2C_MemRxCpltCallback>
}
 80064f4:	e027      	b.n	8006546 <I2C_MasterReceive_BTF+0x1da>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	2b08      	cmp	r3, #8
 8006502:	d002      	beq.n	800650a <I2C_MasterReceive_BTF+0x19e>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b20      	cmp	r3, #32
 8006508:	d103      	bne.n	8006512 <I2C_MasterReceive_BTF+0x1a6>
        hi2c->PreviousState = I2C_STATE_NONE;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2200      	movs	r2, #0
 800650e:	631a      	str	r2, [r3, #48]	@ 0x30
 8006510:	e002      	b.n	8006518 <I2C_MasterReceive_BTF+0x1ac>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2212      	movs	r2, #18
 8006516:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f7ff fc6b 	bl	8005df4 <HAL_I2C_MasterRxCpltCallback>
}
 800651e:	e012      	b.n	8006546 <I2C_MasterReceive_BTF+0x1da>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691a      	ldr	r2, [r3, #16]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800652a:	b2d2      	uxtb	r2, r2
 800652c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006546:	bf00      	nop
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800654e:	b480      	push	{r7}
 8006550:	b083      	sub	sp, #12
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800655c:	b2db      	uxtb	r3, r3
 800655e:	2b40      	cmp	r3, #64	@ 0x40
 8006560:	d117      	bne.n	8006592 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006566:	2b00      	cmp	r3, #0
 8006568:	d109      	bne.n	800657e <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800656e:	b2db      	uxtb	r3, r3
 8006570:	461a      	mov	r2, r3
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800657a:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800657c:	e067      	b.n	800664e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006582:	b2db      	uxtb	r3, r3
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	b2da      	uxtb	r2, r3
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	611a      	str	r2, [r3, #16]
}
 8006590:	e05d      	b.n	800664e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800659a:	d133      	bne.n	8006604 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b21      	cmp	r3, #33	@ 0x21
 80065a6:	d109      	bne.n	80065bc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	461a      	mov	r2, r3
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80065b8:	611a      	str	r2, [r3, #16]
 80065ba:	e008      	b.n	80065ce <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	f043 0301 	orr.w	r3, r3, #1
 80065c6:	b2da      	uxtb	r2, r3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d004      	beq.n	80065e0 <I2C_Master_SB+0x92>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d108      	bne.n	80065f2 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d032      	beq.n	800664e <I2C_Master_SB+0x100>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d02d      	beq.n	800664e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	685a      	ldr	r2, [r3, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006600:	605a      	str	r2, [r3, #4]
}
 8006602:	e024      	b.n	800664e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006608:	2b00      	cmp	r3, #0
 800660a:	d10e      	bne.n	800662a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006610:	b29b      	uxth	r3, r3
 8006612:	11db      	asrs	r3, r3, #7
 8006614:	b2db      	uxtb	r3, r3
 8006616:	f003 0306 	and.w	r3, r3, #6
 800661a:	b2db      	uxtb	r3, r3
 800661c:	f063 030f 	orn	r3, r3, #15
 8006620:	b2da      	uxtb	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	611a      	str	r2, [r3, #16]
}
 8006628:	e011      	b.n	800664e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800662e:	2b01      	cmp	r3, #1
 8006630:	d10d      	bne.n	800664e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006636:	b29b      	uxth	r3, r3
 8006638:	11db      	asrs	r3, r3, #7
 800663a:	b2db      	uxtb	r3, r3
 800663c:	f003 0306 	and.w	r3, r3, #6
 8006640:	b2db      	uxtb	r3, r3
 8006642:	f063 030e 	orn	r3, r3, #14
 8006646:	b2da      	uxtb	r2, r3
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	611a      	str	r2, [r3, #16]
}
 800664e:	bf00      	nop
 8006650:	370c      	adds	r7, #12
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006666:	b2da      	uxtb	r2, r3
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006672:	2b00      	cmp	r3, #0
 8006674:	d004      	beq.n	8006680 <I2C_Master_ADD10+0x26>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800667a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800667c:	2b00      	cmp	r3, #0
 800667e:	d108      	bne.n	8006692 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00c      	beq.n	80066a2 <I2C_Master_ADD10+0x48>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800668c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800668e:	2b00      	cmp	r3, #0
 8006690:	d007      	beq.n	80066a2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685a      	ldr	r2, [r3, #4]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066a0:	605a      	str	r2, [r3, #4]
  }
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b091      	sub	sp, #68	@ 0x44
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066ca:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	2b22      	cmp	r3, #34	@ 0x22
 80066d6:	f040 8169 	bne.w	80069ac <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10f      	bne.n	8006702 <I2C_Master_ADDR+0x54>
 80066e2:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80066e6:	2b40      	cmp	r3, #64	@ 0x40
 80066e8:	d10b      	bne.n	8006702 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066ea:	2300      	movs	r3, #0
 80066ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	699b      	ldr	r3, [r3, #24]
 80066fc:	633b      	str	r3, [r7, #48]	@ 0x30
 80066fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006700:	e160      	b.n	80069c4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006706:	2b00      	cmp	r3, #0
 8006708:	d11d      	bne.n	8006746 <I2C_Master_ADDR+0x98>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006712:	d118      	bne.n	8006746 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006714:	2300      	movs	r3, #0
 8006716:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	695b      	ldr	r3, [r3, #20]
 800671e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	699b      	ldr	r3, [r3, #24]
 8006726:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006738:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800673e:	1c5a      	adds	r2, r3, #1
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	651a      	str	r2, [r3, #80]	@ 0x50
 8006744:	e13e      	b.n	80069c4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800674a:	b29b      	uxth	r3, r3
 800674c:	2b00      	cmp	r3, #0
 800674e:	d113      	bne.n	8006778 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006750:	2300      	movs	r3, #0
 8006752:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	695b      	ldr	r3, [r3, #20]
 800675a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	699b      	ldr	r3, [r3, #24]
 8006762:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006764:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681a      	ldr	r2, [r3, #0]
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006774:	601a      	str	r2, [r3, #0]
 8006776:	e115      	b.n	80069a4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800677c:	b29b      	uxth	r3, r3
 800677e:	2b01      	cmp	r3, #1
 8006780:	f040 808a 	bne.w	8006898 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006786:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800678a:	d137      	bne.n	80067fc <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800679a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067aa:	d113      	bne.n	80067d4 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067ba:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067bc:	2300      	movs	r3, #0
 80067be:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	695b      	ldr	r3, [r3, #20]
 80067c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80067d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d2:	e0e7      	b.n	80069a4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067d4:	2300      	movs	r3, #0
 80067d6:	623b      	str	r3, [r7, #32]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	695b      	ldr	r3, [r3, #20]
 80067de:	623b      	str	r3, [r7, #32]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	623b      	str	r3, [r7, #32]
 80067e8:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80067f8:	601a      	str	r2, [r3, #0]
 80067fa:	e0d3      	b.n	80069a4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80067fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d02e      	beq.n	8006860 <I2C_Master_ADDR+0x1b2>
 8006802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006804:	2b20      	cmp	r3, #32
 8006806:	d02b      	beq.n	8006860 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800680a:	2b12      	cmp	r3, #18
 800680c:	d102      	bne.n	8006814 <I2C_Master_ADDR+0x166>
 800680e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006810:	2b01      	cmp	r3, #1
 8006812:	d125      	bne.n	8006860 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006816:	2b04      	cmp	r3, #4
 8006818:	d00e      	beq.n	8006838 <I2C_Master_ADDR+0x18a>
 800681a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681c:	2b02      	cmp	r3, #2
 800681e:	d00b      	beq.n	8006838 <I2C_Master_ADDR+0x18a>
 8006820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006822:	2b10      	cmp	r3, #16
 8006824:	d008      	beq.n	8006838 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006834:	601a      	str	r2, [r3, #0]
 8006836:	e007      	b.n	8006848 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	681a      	ldr	r2, [r3, #0]
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006846:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006848:	2300      	movs	r3, #0
 800684a:	61fb      	str	r3, [r7, #28]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	695b      	ldr	r3, [r3, #20]
 8006852:	61fb      	str	r3, [r7, #28]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	699b      	ldr	r3, [r3, #24]
 800685a:	61fb      	str	r3, [r7, #28]
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	e0a1      	b.n	80069a4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800686e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006870:	2300      	movs	r3, #0
 8006872:	61bb      	str	r3, [r7, #24]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	61bb      	str	r3, [r7, #24]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	699b      	ldr	r3, [r3, #24]
 8006882:	61bb      	str	r3, [r7, #24]
 8006884:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	681a      	ldr	r2, [r3, #0]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006894:	601a      	str	r2, [r3, #0]
 8006896:	e085      	b.n	80069a4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b02      	cmp	r3, #2
 80068a0:	d14d      	bne.n	800693e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80068a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068a4:	2b04      	cmp	r3, #4
 80068a6:	d016      	beq.n	80068d6 <I2C_Master_ADDR+0x228>
 80068a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068aa:	2b02      	cmp	r3, #2
 80068ac:	d013      	beq.n	80068d6 <I2C_Master_ADDR+0x228>
 80068ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068b0:	2b10      	cmp	r3, #16
 80068b2:	d010      	beq.n	80068d6 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068c2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	681a      	ldr	r2, [r3, #0]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80068d2:	601a      	str	r2, [r3, #0]
 80068d4:	e007      	b.n	80068e6 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80068e4:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80068f4:	d117      	bne.n	8006926 <I2C_Master_ADDR+0x278>
 80068f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80068fc:	d00b      	beq.n	8006916 <I2C_Master_ADDR+0x268>
 80068fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006900:	2b01      	cmp	r3, #1
 8006902:	d008      	beq.n	8006916 <I2C_Master_ADDR+0x268>
 8006904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006906:	2b08      	cmp	r3, #8
 8006908:	d005      	beq.n	8006916 <I2C_Master_ADDR+0x268>
 800690a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800690c:	2b10      	cmp	r3, #16
 800690e:	d002      	beq.n	8006916 <I2C_Master_ADDR+0x268>
 8006910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006912:	2b20      	cmp	r3, #32
 8006914:	d107      	bne.n	8006926 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685a      	ldr	r2, [r3, #4]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006924:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006926:	2300      	movs	r3, #0
 8006928:	617b      	str	r3, [r7, #20]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	695b      	ldr	r3, [r3, #20]
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	697b      	ldr	r3, [r7, #20]
 800693c:	e032      	b.n	80069a4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800694c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006958:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800695c:	d117      	bne.n	800698e <I2C_Master_ADDR+0x2e0>
 800695e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006960:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006964:	d00b      	beq.n	800697e <I2C_Master_ADDR+0x2d0>
 8006966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006968:	2b01      	cmp	r3, #1
 800696a:	d008      	beq.n	800697e <I2C_Master_ADDR+0x2d0>
 800696c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800696e:	2b08      	cmp	r3, #8
 8006970:	d005      	beq.n	800697e <I2C_Master_ADDR+0x2d0>
 8006972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006974:	2b10      	cmp	r3, #16
 8006976:	d002      	beq.n	800697e <I2C_Master_ADDR+0x2d0>
 8006978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800697a:	2b20      	cmp	r3, #32
 800697c:	d107      	bne.n	800698e <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685a      	ldr	r2, [r3, #4]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800698c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800698e:	2300      	movs	r3, #0
 8006990:	613b      	str	r3, [r7, #16]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	695b      	ldr	r3, [r3, #20]
 8006998:	613b      	str	r3, [r7, #16]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	699b      	ldr	r3, [r3, #24]
 80069a0:	613b      	str	r3, [r7, #16]
 80069a2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2200      	movs	r2, #0
 80069a8:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80069aa:	e00b      	b.n	80069c4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069ac:	2300      	movs	r3, #0
 80069ae:	60fb      	str	r3, [r7, #12]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	695b      	ldr	r3, [r3, #20]
 80069b6:	60fb      	str	r3, [r7, #12]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	699b      	ldr	r3, [r3, #24]
 80069be:	60fb      	str	r3, [r7, #12]
 80069c0:	68fb      	ldr	r3, [r7, #12]
}
 80069c2:	e7ff      	b.n	80069c4 <I2C_Master_ADDR+0x316>
 80069c4:	bf00      	nop
 80069c6:	3744      	adds	r7, #68	@ 0x44
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d02b      	beq.n	8006a42 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069fa:	1c5a      	adds	r2, r3, #1
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d114      	bne.n	8006a42 <I2C_SlaveTransmit_TXE+0x72>
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	2b29      	cmp	r3, #41	@ 0x29
 8006a1c:	d111      	bne.n	8006a42 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a2c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2221      	movs	r2, #33	@ 0x21
 8006a32:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2228      	movs	r2, #40	@ 0x28
 8006a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff f9e3 	bl	8005e08 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006a42:	bf00      	nop
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006a4a:	b480      	push	{r7}
 8006a4c:	b083      	sub	sp, #12
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d011      	beq.n	8006a80 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a60:	781a      	ldrb	r2, [r3, #0]
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a6c:	1c5a      	adds	r2, r3, #1
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	3b01      	subs	r3, #1
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a9a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d02c      	beq.n	8006b00 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	691a      	ldr	r2, [r3, #16]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab0:	b2d2      	uxtb	r2, r2
 8006ab2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ab8:	1c5a      	adds	r2, r3, #1
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d114      	bne.n	8006b00 <I2C_SlaveReceive_RXNE+0x74>
 8006ad6:	7bfb      	ldrb	r3, [r7, #15]
 8006ad8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006ada:	d111      	bne.n	8006b00 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	685a      	ldr	r2, [r3, #4]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aea:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2222      	movs	r2, #34	@ 0x22
 8006af0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2228      	movs	r2, #40	@ 0x28
 8006af6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff f98e 	bl	8005e1c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8006b00:	bf00      	nop
 8006b02:	3710      	adds	r7, #16
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}

08006b08 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d012      	beq.n	8006b40 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	691a      	ldr	r2, [r3, #16]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b24:	b2d2      	uxtb	r2, r2
 8006b26:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b2c:	1c5a      	adds	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	b29a      	uxth	r2, r3
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr

08006b4c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b084      	sub	sp, #16
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006b56:	2300      	movs	r3, #0
 8006b58:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006b66:	2b28      	cmp	r3, #40	@ 0x28
 8006b68:	d127      	bne.n	8006bba <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	685a      	ldr	r2, [r3, #4]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b78:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	089b      	lsrs	r3, r3, #2
 8006b7e:	f003 0301 	and.w	r3, r3, #1
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006b86:	2301      	movs	r3, #1
 8006b88:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	09db      	lsrs	r3, r3, #7
 8006b8e:	f003 0301 	and.w	r3, r3, #1
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d103      	bne.n	8006b9e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	81bb      	strh	r3, [r7, #12]
 8006b9c:	e002      	b.n	8006ba4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	699b      	ldr	r3, [r3, #24]
 8006ba2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006bac:	89ba      	ldrh	r2, [r7, #12]
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f7ff f93c 	bl	8005e30 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006bb8:	e00e      	b.n	8006bd8 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	60bb      	str	r3, [r7, #8]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	60bb      	str	r3, [r7, #8]
 8006bce:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8006bd8:	bf00      	nop
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}

08006be0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bee:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685a      	ldr	r2, [r3, #4]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006bfe:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006c00:	2300      	movs	r3, #0
 8006c02:	60bb      	str	r3, [r7, #8]
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	60bb      	str	r3, [r7, #8]
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	681a      	ldr	r2, [r3, #0]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f042 0201 	orr.w	r2, r2, #1
 8006c1a:	601a      	str	r2, [r3, #0]
 8006c1c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	681a      	ldr	r2, [r3, #0]
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c2c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c38:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c3c:	d172      	bne.n	8006d24 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006c3e:	7bfb      	ldrb	r3, [r7, #15]
 8006c40:	2b22      	cmp	r3, #34	@ 0x22
 8006c42:	d002      	beq.n	8006c4a <I2C_Slave_STOPF+0x6a>
 8006c44:	7bfb      	ldrb	r3, [r7, #15]
 8006c46:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c48:	d135      	bne.n	8006cb6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	685b      	ldr	r3, [r3, #4]
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c5c:	b29b      	uxth	r3, r3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d005      	beq.n	8006c6e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c66:	f043 0204 	orr.w	r2, r3, #4
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	685a      	ldr	r2, [r3, #4]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c7c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fd fea0 	bl	80049c8 <HAL_DMA_GetState>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d049      	beq.n	8006d22 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c92:	4a69      	ldr	r2, [pc, #420]	@ (8006e38 <I2C_Slave_STOPF+0x258>)
 8006c94:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	f7fd fce8 	bl	8004670 <HAL_DMA_Abort_IT>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d03d      	beq.n	8006d22 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006caa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cac:	687a      	ldr	r2, [r7, #4]
 8006cae:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006cb0:	4610      	mov	r0, r2
 8006cb2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006cb4:	e035      	b.n	8006d22 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	b29a      	uxth	r2, r3
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006cc8:	b29b      	uxth	r3, r3
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d005      	beq.n	8006cda <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd2:	f043 0204 	orr.w	r2, r3, #4
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685a      	ldr	r2, [r3, #4]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006ce8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fd fe6a 	bl	80049c8 <HAL_DMA_GetState>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d014      	beq.n	8006d24 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cfe:	4a4e      	ldr	r2, [pc, #312]	@ (8006e38 <I2C_Slave_STOPF+0x258>)
 8006d00:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fd fcb2 	bl	8004670 <HAL_DMA_Abort_IT>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d008      	beq.n	8006d24 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006d16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d18:	687a      	ldr	r2, [r7, #4]
 8006d1a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006d1c:	4610      	mov	r0, r2
 8006d1e:	4798      	blx	r3
 8006d20:	e000      	b.n	8006d24 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006d22:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d28:	b29b      	uxth	r3, r3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d03e      	beq.n	8006dac <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	f003 0304 	and.w	r3, r3, #4
 8006d38:	2b04      	cmp	r3, #4
 8006d3a:	d112      	bne.n	8006d62 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	691a      	ldr	r2, [r3, #16]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d46:	b2d2      	uxtb	r2, r2
 8006d48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4e:	1c5a      	adds	r2, r3, #1
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	3b01      	subs	r3, #1
 8006d5c:	b29a      	uxth	r2, r3
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	695b      	ldr	r3, [r3, #20]
 8006d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6c:	2b40      	cmp	r3, #64	@ 0x40
 8006d6e:	d112      	bne.n	8006d96 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	691a      	ldr	r2, [r3, #16]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d82:	1c5a      	adds	r2, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d005      	beq.n	8006dac <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006da4:	f043 0204 	orr.w	r2, r3, #4
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d003      	beq.n	8006dbc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f8b7 	bl	8006f28 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006dba:	e039      	b.n	8006e30 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006dbc:	7bfb      	ldrb	r3, [r7, #15]
 8006dbe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006dc0:	d109      	bne.n	8006dd6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2228      	movs	r2, #40	@ 0x28
 8006dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f7ff f823 	bl	8005e1c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b28      	cmp	r3, #40	@ 0x28
 8006de0:	d111      	bne.n	8006e06 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	4a15      	ldr	r2, [pc, #84]	@ (8006e3c <I2C_Slave_STOPF+0x25c>)
 8006de6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2200      	movs	r2, #0
 8006dec:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2220      	movs	r2, #32
 8006df2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f7ff f824 	bl	8005e4c <HAL_I2C_ListenCpltCallback>
}
 8006e04:	e014      	b.n	8006e30 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e0a:	2b22      	cmp	r3, #34	@ 0x22
 8006e0c:	d002      	beq.n	8006e14 <I2C_Slave_STOPF+0x234>
 8006e0e:	7bfb      	ldrb	r3, [r7, #15]
 8006e10:	2b22      	cmp	r3, #34	@ 0x22
 8006e12:	d10d      	bne.n	8006e30 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2220      	movs	r2, #32
 8006e1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7fe fff6 	bl	8005e1c <HAL_I2C_SlaveRxCpltCallback>
}
 8006e30:	bf00      	nop
 8006e32:	3710      	adds	r7, #16
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}
 8006e38:	080076c1 	.word	0x080076c1
 8006e3c:	ffff0000 	.word	0xffff0000

08006e40 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e4e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e54:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	2b08      	cmp	r3, #8
 8006e5a:	d002      	beq.n	8006e62 <I2C_Slave_AF+0x22>
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	2b20      	cmp	r3, #32
 8006e60:	d129      	bne.n	8006eb6 <I2C_Slave_AF+0x76>
 8006e62:	7bfb      	ldrb	r3, [r7, #15]
 8006e64:	2b28      	cmp	r3, #40	@ 0x28
 8006e66:	d126      	bne.n	8006eb6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a2e      	ldr	r2, [pc, #184]	@ (8006f24 <I2C_Slave_AF+0xe4>)
 8006e6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	685a      	ldr	r2, [r3, #4]
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e7c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006e86:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e96:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fe ffcc 	bl	8005e4c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006eb4:	e031      	b.n	8006f1a <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	2b21      	cmp	r3, #33	@ 0x21
 8006eba:	d129      	bne.n	8006f10 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a19      	ldr	r2, [pc, #100]	@ (8006f24 <I2C_Slave_AF+0xe4>)
 8006ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2221      	movs	r2, #33	@ 0x21
 8006ec6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	685a      	ldr	r2, [r3, #4]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006ee6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ef0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f00:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7fe f956 	bl	80051b4 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7fe ff7d 	bl	8005e08 <HAL_I2C_SlaveTxCpltCallback>
}
 8006f0e:	e004      	b.n	8006f1a <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006f18:	615a      	str	r2, [r3, #20]
}
 8006f1a:	bf00      	nop
 8006f1c:	3710      	adds	r7, #16
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}
 8006f22:	bf00      	nop
 8006f24:	ffff0000 	.word	0xffff0000

08006f28 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b084      	sub	sp, #16
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f36:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006f3e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006f40:	7bbb      	ldrb	r3, [r7, #14]
 8006f42:	2b10      	cmp	r3, #16
 8006f44:	d002      	beq.n	8006f4c <I2C_ITError+0x24>
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	2b40      	cmp	r3, #64	@ 0x40
 8006f4a:	d10a      	bne.n	8006f62 <I2C_ITError+0x3a>
 8006f4c:	7bfb      	ldrb	r3, [r7, #15]
 8006f4e:	2b22      	cmp	r3, #34	@ 0x22
 8006f50:	d107      	bne.n	8006f62 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f60:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006f68:	2b28      	cmp	r3, #40	@ 0x28
 8006f6a:	d107      	bne.n	8006f7c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2228      	movs	r2, #40	@ 0x28
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006f7a:	e015      	b.n	8006fa8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	685b      	ldr	r3, [r3, #4]
 8006f82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f86:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006f8a:	d00a      	beq.n	8006fa2 <I2C_ITError+0x7a>
 8006f8c:	7bfb      	ldrb	r3, [r7, #15]
 8006f8e:	2b60      	cmp	r3, #96	@ 0x60
 8006f90:	d007      	beq.n	8006fa2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2220      	movs	r2, #32
 8006f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	685b      	ldr	r3, [r3, #4]
 8006fae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fb2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fb6:	d162      	bne.n	800707e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fc6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fcc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006fd0:	b2db      	uxtb	r3, r3
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d020      	beq.n	8007018 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fda:	4a6a      	ldr	r2, [pc, #424]	@ (8007184 <I2C_ITError+0x25c>)
 8006fdc:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fd fb44 	bl	8004670 <HAL_DMA_Abort_IT>
 8006fe8:	4603      	mov	r3, r0
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	f000 8089 	beq.w	8007102 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f022 0201 	bic.w	r2, r2, #1
 8006ffe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2220      	movs	r2, #32
 8007004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800700c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800700e:	687a      	ldr	r2, [r7, #4]
 8007010:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8007012:	4610      	mov	r0, r2
 8007014:	4798      	blx	r3
 8007016:	e074      	b.n	8007102 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800701c:	4a59      	ldr	r2, [pc, #356]	@ (8007184 <I2C_ITError+0x25c>)
 800701e:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007024:	4618      	mov	r0, r3
 8007026:	f7fd fb23 	bl	8004670 <HAL_DMA_Abort_IT>
 800702a:	4603      	mov	r3, r0
 800702c:	2b00      	cmp	r3, #0
 800702e:	d068      	beq.n	8007102 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	695b      	ldr	r3, [r3, #20]
 8007036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800703a:	2b40      	cmp	r3, #64	@ 0x40
 800703c:	d10b      	bne.n	8007056 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	691a      	ldr	r2, [r3, #16]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007048:	b2d2      	uxtb	r2, r2
 800704a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	1c5a      	adds	r2, r3, #1
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f022 0201 	bic.w	r2, r2, #1
 8007064:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2220      	movs	r2, #32
 800706a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	e041      	b.n	8007102 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007084:	b2db      	uxtb	r3, r3
 8007086:	2b60      	cmp	r3, #96	@ 0x60
 8007088:	d125      	bne.n	80070d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2220      	movs	r2, #32
 800708e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	695b      	ldr	r3, [r3, #20]
 800709e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a2:	2b40      	cmp	r3, #64	@ 0x40
 80070a4:	d10b      	bne.n	80070be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	691a      	ldr	r2, [r3, #16]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b0:	b2d2      	uxtb	r2, r2
 80070b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b8:	1c5a      	adds	r2, r3, #1
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	681a      	ldr	r2, [r3, #0]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	f022 0201 	bic.w	r2, r2, #1
 80070cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f7fe fed0 	bl	8005e74 <HAL_I2C_AbortCpltCallback>
 80070d4:	e015      	b.n	8007102 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	695b      	ldr	r3, [r3, #20]
 80070dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e0:	2b40      	cmp	r3, #64	@ 0x40
 80070e2:	d10b      	bne.n	80070fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	691a      	ldr	r2, [r3, #16]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f6:	1c5a      	adds	r2, r3, #1
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f7fe feaf 	bl	8005e60 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007106:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d10e      	bne.n	8007130 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007118:	2b00      	cmp	r3, #0
 800711a:	d109      	bne.n	8007130 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007122:	2b00      	cmp	r3, #0
 8007124:	d104      	bne.n	8007130 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800712c:	2b00      	cmp	r3, #0
 800712e:	d007      	beq.n	8007140 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	685a      	ldr	r2, [r3, #4]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800713e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007146:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b04      	cmp	r3, #4
 8007152:	d113      	bne.n	800717c <I2C_ITError+0x254>
 8007154:	7bfb      	ldrb	r3, [r7, #15]
 8007156:	2b28      	cmp	r3, #40	@ 0x28
 8007158:	d110      	bne.n	800717c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a0a      	ldr	r2, [pc, #40]	@ (8007188 <I2C_ITError+0x260>)
 800715e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2200      	movs	r2, #0
 8007164:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2220      	movs	r2, #32
 800716a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	2200      	movs	r2, #0
 8007172:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f7fe fe68 	bl	8005e4c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800717c:	bf00      	nop
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}
 8007184:	080076c1 	.word	0x080076c1
 8007188:	ffff0000 	.word	0xffff0000

0800718c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b088      	sub	sp, #32
 8007190:	af02      	add	r7, sp, #8
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	4608      	mov	r0, r1
 8007196:	4611      	mov	r1, r2
 8007198:	461a      	mov	r2, r3
 800719a:	4603      	mov	r3, r0
 800719c:	817b      	strh	r3, [r7, #10]
 800719e:	460b      	mov	r3, r1
 80071a0:	813b      	strh	r3, [r7, #8]
 80071a2:	4613      	mov	r3, r2
 80071a4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80071b4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b8:	9300      	str	r3, [sp, #0]
 80071ba:	6a3b      	ldr	r3, [r7, #32]
 80071bc:	2200      	movs	r2, #0
 80071be:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80071c2:	68f8      	ldr	r0, [r7, #12]
 80071c4:	f000 fb24 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 80071c8:	4603      	mov	r3, r0
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d00d      	beq.n	80071ea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80071dc:	d103      	bne.n	80071e6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80071e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80071e6:	2303      	movs	r3, #3
 80071e8:	e05f      	b.n	80072aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80071ea:	897b      	ldrh	r3, [r7, #10]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	461a      	mov	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80071f8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	6a3a      	ldr	r2, [r7, #32]
 80071fe:	492d      	ldr	r1, [pc, #180]	@ (80072b4 <I2C_RequestMemoryWrite+0x128>)
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	f000 fb7f 	bl	8007904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007206:	4603      	mov	r3, r0
 8007208:	2b00      	cmp	r3, #0
 800720a:	d001      	beq.n	8007210 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e04c      	b.n	80072aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007210:	2300      	movs	r3, #0
 8007212:	617b      	str	r3, [r7, #20]
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	695b      	ldr	r3, [r3, #20]
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	617b      	str	r3, [r7, #20]
 8007224:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007228:	6a39      	ldr	r1, [r7, #32]
 800722a:	68f8      	ldr	r0, [r7, #12]
 800722c:	f000 fc0a 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00d      	beq.n	8007252 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800723a:	2b04      	cmp	r3, #4
 800723c:	d107      	bne.n	800724e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800724c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800724e:	2301      	movs	r3, #1
 8007250:	e02b      	b.n	80072aa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007252:	88fb      	ldrh	r3, [r7, #6]
 8007254:	2b01      	cmp	r3, #1
 8007256:	d105      	bne.n	8007264 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007258:	893b      	ldrh	r3, [r7, #8]
 800725a:	b2da      	uxtb	r2, r3
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	611a      	str	r2, [r3, #16]
 8007262:	e021      	b.n	80072a8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007264:	893b      	ldrh	r3, [r7, #8]
 8007266:	0a1b      	lsrs	r3, r3, #8
 8007268:	b29b      	uxth	r3, r3
 800726a:	b2da      	uxtb	r2, r3
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007272:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007274:	6a39      	ldr	r1, [r7, #32]
 8007276:	68f8      	ldr	r0, [r7, #12]
 8007278:	f000 fbe4 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 800727c:	4603      	mov	r3, r0
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00d      	beq.n	800729e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007286:	2b04      	cmp	r3, #4
 8007288:	d107      	bne.n	800729a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007298:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e005      	b.n	80072aa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800729e:	893b      	ldrh	r3, [r7, #8]
 80072a0:	b2da      	uxtb	r2, r3
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
 80072b2:	bf00      	nop
 80072b4:	00010002 	.word	0x00010002

080072b8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b088      	sub	sp, #32
 80072bc:	af02      	add	r7, sp, #8
 80072be:	60f8      	str	r0, [r7, #12]
 80072c0:	4608      	mov	r0, r1
 80072c2:	4611      	mov	r1, r2
 80072c4:	461a      	mov	r2, r3
 80072c6:	4603      	mov	r3, r0
 80072c8:	817b      	strh	r3, [r7, #10]
 80072ca:	460b      	mov	r3, r1
 80072cc:	813b      	strh	r3, [r7, #8]
 80072ce:	4613      	mov	r3, r2
 80072d0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681a      	ldr	r2, [r3, #0]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80072e0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80072f0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	9300      	str	r3, [sp, #0]
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80072fe:	68f8      	ldr	r0, [r7, #12]
 8007300:	f000 fa86 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 8007304:	4603      	mov	r3, r0
 8007306:	2b00      	cmp	r3, #0
 8007308:	d00d      	beq.n	8007326 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007314:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007318:	d103      	bne.n	8007322 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007320:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e0aa      	b.n	800747c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007326:	897b      	ldrh	r3, [r7, #10]
 8007328:	b2db      	uxtb	r3, r3
 800732a:	461a      	mov	r2, r3
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007334:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007336:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007338:	6a3a      	ldr	r2, [r7, #32]
 800733a:	4952      	ldr	r1, [pc, #328]	@ (8007484 <I2C_RequestMemoryRead+0x1cc>)
 800733c:	68f8      	ldr	r0, [r7, #12]
 800733e:	f000 fae1 	bl	8007904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d001      	beq.n	800734c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007348:	2301      	movs	r3, #1
 800734a:	e097      	b.n	800747c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800734c:	2300      	movs	r3, #0
 800734e:	617b      	str	r3, [r7, #20]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	695b      	ldr	r3, [r3, #20]
 8007356:	617b      	str	r3, [r7, #20]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	699b      	ldr	r3, [r3, #24]
 800735e:	617b      	str	r3, [r7, #20]
 8007360:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007362:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007364:	6a39      	ldr	r1, [r7, #32]
 8007366:	68f8      	ldr	r0, [r7, #12]
 8007368:	f000 fb6c 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 800736c:	4603      	mov	r3, r0
 800736e:	2b00      	cmp	r3, #0
 8007370:	d00d      	beq.n	800738e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007376:	2b04      	cmp	r3, #4
 8007378:	d107      	bne.n	800738a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007388:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e076      	b.n	800747c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800738e:	88fb      	ldrh	r3, [r7, #6]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d105      	bne.n	80073a0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007394:	893b      	ldrh	r3, [r7, #8]
 8007396:	b2da      	uxtb	r2, r3
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	611a      	str	r2, [r3, #16]
 800739e:	e021      	b.n	80073e4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80073a0:	893b      	ldrh	r3, [r7, #8]
 80073a2:	0a1b      	lsrs	r3, r3, #8
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073b0:	6a39      	ldr	r1, [r7, #32]
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 fb46 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80073b8:	4603      	mov	r3, r0
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d00d      	beq.n	80073da <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	2b04      	cmp	r3, #4
 80073c4:	d107      	bne.n	80073d6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	681a      	ldr	r2, [r3, #0]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073d4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80073d6:	2301      	movs	r3, #1
 80073d8:	e050      	b.n	800747c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80073da:	893b      	ldrh	r3, [r7, #8]
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80073e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e6:	6a39      	ldr	r1, [r7, #32]
 80073e8:	68f8      	ldr	r0, [r7, #12]
 80073ea:	f000 fb2b 	bl	8007a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80073ee:	4603      	mov	r3, r0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00d      	beq.n	8007410 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073f8:	2b04      	cmp	r3, #4
 80073fa:	d107      	bne.n	800740c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800740a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	e035      	b.n	800747c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	681a      	ldr	r2, [r3, #0]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800741e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	6a3b      	ldr	r3, [r7, #32]
 8007426:	2200      	movs	r2, #0
 8007428:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800742c:	68f8      	ldr	r0, [r7, #12]
 800742e:	f000 f9ef 	bl	8007810 <I2C_WaitOnFlagUntilTimeout>
 8007432:	4603      	mov	r3, r0
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00d      	beq.n	8007454 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007446:	d103      	bne.n	8007450 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800744e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007450:	2303      	movs	r3, #3
 8007452:	e013      	b.n	800747c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007454:	897b      	ldrh	r3, [r7, #10]
 8007456:	b2db      	uxtb	r3, r3
 8007458:	f043 0301 	orr.w	r3, r3, #1
 800745c:	b2da      	uxtb	r2, r3
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007466:	6a3a      	ldr	r2, [r7, #32]
 8007468:	4906      	ldr	r1, [pc, #24]	@ (8007484 <I2C_RequestMemoryRead+0x1cc>)
 800746a:	68f8      	ldr	r0, [r7, #12]
 800746c:	f000 fa4a 	bl	8007904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007470:	4603      	mov	r3, r0
 8007472:	2b00      	cmp	r3, #0
 8007474:	d001      	beq.n	800747a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e000      	b.n	800747c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800747a:	2300      	movs	r3, #0
}
 800747c:	4618      	mov	r0, r3
 800747e:	3718      	adds	r7, #24
 8007480:	46bd      	mov	sp, r7
 8007482:	bd80      	pop	{r7, pc}
 8007484:	00010002 	.word	0x00010002

08007488 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b086      	sub	sp, #24
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007494:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800749c:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80074a4:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074aa:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80074ba:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d003      	beq.n	80074cc <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074c8:	2200      	movs	r2, #0
 80074ca:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d8:	2200      	movs	r2, #0
 80074da:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80074dc:	7cfb      	ldrb	r3, [r7, #19]
 80074de:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80074e2:	2b21      	cmp	r3, #33	@ 0x21
 80074e4:	d007      	beq.n	80074f6 <I2C_DMAXferCplt+0x6e>
 80074e6:	7cfb      	ldrb	r3, [r7, #19]
 80074e8:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80074ec:	2b22      	cmp	r3, #34	@ 0x22
 80074ee:	d131      	bne.n	8007554 <I2C_DMAXferCplt+0xcc>
 80074f0:	7cbb      	ldrb	r3, [r7, #18]
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d12e      	bne.n	8007554 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80074f6:	697b      	ldr	r3, [r7, #20]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	685a      	ldr	r2, [r3, #4]
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007504:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	2200      	movs	r2, #0
 800750a:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800750c:	7cfb      	ldrb	r3, [r7, #19]
 800750e:	2b29      	cmp	r3, #41	@ 0x29
 8007510:	d10a      	bne.n	8007528 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2221      	movs	r2, #33	@ 0x21
 8007516:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007518:	697b      	ldr	r3, [r7, #20]
 800751a:	2228      	movs	r2, #40	@ 0x28
 800751c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007520:	6978      	ldr	r0, [r7, #20]
 8007522:	f7fe fc71 	bl	8005e08 <HAL_I2C_SlaveTxCpltCallback>
 8007526:	e00c      	b.n	8007542 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007528:	7cfb      	ldrb	r3, [r7, #19]
 800752a:	2b2a      	cmp	r3, #42	@ 0x2a
 800752c:	d109      	bne.n	8007542 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	2222      	movs	r2, #34	@ 0x22
 8007532:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2228      	movs	r2, #40	@ 0x28
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800753c:	6978      	ldr	r0, [r7, #20]
 800753e:	f7fe fc6d 	bl	8005e1c <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	697b      	ldr	r3, [r7, #20]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007550:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007552:	e074      	b.n	800763e <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800755a:	b2db      	uxtb	r3, r3
 800755c:	2b00      	cmp	r3, #0
 800755e:	d06e      	beq.n	800763e <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007564:	b29b      	uxth	r3, r3
 8007566:	2b01      	cmp	r3, #1
 8007568:	d107      	bne.n	800757a <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007578:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	697b      	ldr	r3, [r7, #20]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007588:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007590:	d009      	beq.n	80075a6 <I2C_DMAXferCplt+0x11e>
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2b08      	cmp	r3, #8
 8007596:	d006      	beq.n	80075a6 <I2C_DMAXferCplt+0x11e>
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800759e:	d002      	beq.n	80075a6 <I2C_DMAXferCplt+0x11e>
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2b20      	cmp	r3, #32
 80075a4:	d107      	bne.n	80075b6 <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075b4:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	685a      	ldr	r2, [r3, #4]
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80075c4:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	685a      	ldr	r2, [r3, #4]
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80075d4:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	2200      	movs	r2, #0
 80075da:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80075dc:	697b      	ldr	r3, [r7, #20]
 80075de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80075e4:	6978      	ldr	r0, [r7, #20]
 80075e6:	f7fe fc3b 	bl	8005e60 <HAL_I2C_ErrorCallback>
}
 80075ea:	e028      	b.n	800763e <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	2220      	movs	r2, #32
 80075f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80075f4:	697b      	ldr	r3, [r7, #20]
 80075f6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b40      	cmp	r3, #64	@ 0x40
 80075fe:	d10a      	bne.n	8007616 <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	2200      	movs	r2, #0
 8007604:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	2200      	movs	r2, #0
 800760c:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 800760e:	6978      	ldr	r0, [r7, #20]
 8007610:	f7f9 fb0a 	bl	8000c28 <HAL_I2C_MemRxCpltCallback>
}
 8007614:	e013      	b.n	800763e <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2b08      	cmp	r3, #8
 8007622:	d002      	beq.n	800762a <I2C_DMAXferCplt+0x1a2>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b20      	cmp	r3, #32
 8007628:	d103      	bne.n	8007632 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	2200      	movs	r2, #0
 800762e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007630:	e002      	b.n	8007638 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	2212      	movs	r2, #18
 8007636:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007638:	6978      	ldr	r0, [r7, #20]
 800763a:	f7fe fbdb 	bl	8005df4 <HAL_I2C_MasterRxCpltCallback>
}
 800763e:	bf00      	nop
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007652:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007660:	2200      	movs	r2, #0
 8007662:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007668:	2b00      	cmp	r3, #0
 800766a:	d003      	beq.n	8007674 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007670:	2200      	movs	r2, #0
 8007672:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007674:	6878      	ldr	r0, [r7, #4]
 8007676:	f7fd f9b5 	bl	80049e4 <HAL_DMA_GetError>
 800767a:	4603      	mov	r3, r0
 800767c:	2b02      	cmp	r3, #2
 800767e:	d01b      	beq.n	80076b8 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800768e:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2200      	movs	r2, #0
 8007694:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2220      	movs	r2, #32
 800769a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076aa:	f043 0210 	orr.w	r2, r3, #16
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f7fe fbd4 	bl	8005e60 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80076b8:	bf00      	nop
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}

080076c0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b086      	sub	sp, #24
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076d0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80076d8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80076da:	4b4b      	ldr	r3, [pc, #300]	@ (8007808 <I2C_DMAAbort+0x148>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	08db      	lsrs	r3, r3, #3
 80076e0:	4a4a      	ldr	r2, [pc, #296]	@ (800780c <I2C_DMAAbort+0x14c>)
 80076e2:	fba2 2303 	umull	r2, r3, r2, r3
 80076e6:	0a1a      	lsrs	r2, r3, #8
 80076e8:	4613      	mov	r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	4413      	add	r3, r2
 80076ee:	00da      	lsls	r2, r3, #3
 80076f0:	1ad3      	subs	r3, r2, r3
 80076f2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d106      	bne.n	8007708 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076fe:	f043 0220 	orr.w	r2, r3, #32
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 8007706:	e00a      	b.n	800771e <I2C_DMAAbort+0x5e>
    }
    count--;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	3b01      	subs	r3, #1
 800770c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007718:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800771c:	d0ea      	beq.n	80076f4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800771e:	697b      	ldr	r3, [r7, #20]
 8007720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007722:	2b00      	cmp	r3, #0
 8007724:	d003      	beq.n	800772e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800772a:	2200      	movs	r2, #0
 800772c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773a:	2200      	movs	r2, #0
 800773c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	697b      	ldr	r3, [r7, #20]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800774c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800774e:	697b      	ldr	r3, [r7, #20]
 8007750:	2200      	movs	r2, #0
 8007752:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007758:	2b00      	cmp	r3, #0
 800775a:	d003      	beq.n	8007764 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007760:	2200      	movs	r2, #0
 8007762:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007768:	2b00      	cmp	r3, #0
 800776a:	d003      	beq.n	8007774 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800776c:	697b      	ldr	r3, [r7, #20]
 800776e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007770:	2200      	movs	r2, #0
 8007772:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007774:	697b      	ldr	r3, [r7, #20]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800778a:	b2db      	uxtb	r3, r3
 800778c:	2b60      	cmp	r3, #96	@ 0x60
 800778e:	d10e      	bne.n	80077ae <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007790:	697b      	ldr	r3, [r7, #20]
 8007792:	2220      	movs	r2, #32
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007798:	697b      	ldr	r3, [r7, #20]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	2200      	movs	r2, #0
 80077a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80077a6:	6978      	ldr	r0, [r7, #20]
 80077a8:	f7fe fb64 	bl	8005e74 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80077ac:	e027      	b.n	80077fe <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80077ae:	7cfb      	ldrb	r3, [r7, #19]
 80077b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80077b4:	2b28      	cmp	r3, #40	@ 0x28
 80077b6:	d117      	bne.n	80077e8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f042 0201 	orr.w	r2, r2, #1
 80077c6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80077d6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2200      	movs	r2, #0
 80077dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80077de:	697b      	ldr	r3, [r7, #20]
 80077e0:	2228      	movs	r2, #40	@ 0x28
 80077e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80077e6:	e007      	b.n	80077f8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80077f8:	6978      	ldr	r0, [r7, #20]
 80077fa:	f7fe fb31 	bl	8005e60 <HAL_I2C_ErrorCallback>
}
 80077fe:	bf00      	nop
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
 8007806:	bf00      	nop
 8007808:	20000030 	.word	0x20000030
 800780c:	14f8b589 	.word	0x14f8b589

08007810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	603b      	str	r3, [r7, #0]
 800781c:	4613      	mov	r3, r2
 800781e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007820:	e048      	b.n	80078b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007828:	d044      	beq.n	80078b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800782a:	f7fb ffb9 	bl	80037a0 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	429a      	cmp	r2, r3
 8007838:	d302      	bcc.n	8007840 <I2C_WaitOnFlagUntilTimeout+0x30>
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d139      	bne.n	80078b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	0c1b      	lsrs	r3, r3, #16
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b01      	cmp	r3, #1
 8007848:	d10d      	bne.n	8007866 <I2C_WaitOnFlagUntilTimeout+0x56>
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	43da      	mvns	r2, r3
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	4013      	ands	r3, r2
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	bf0c      	ite	eq
 800785c:	2301      	moveq	r3, #1
 800785e:	2300      	movne	r3, #0
 8007860:	b2db      	uxtb	r3, r3
 8007862:	461a      	mov	r2, r3
 8007864:	e00c      	b.n	8007880 <I2C_WaitOnFlagUntilTimeout+0x70>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	699b      	ldr	r3, [r3, #24]
 800786c:	43da      	mvns	r2, r3
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	4013      	ands	r3, r2
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	bf0c      	ite	eq
 8007878:	2301      	moveq	r3, #1
 800787a:	2300      	movne	r3, #0
 800787c:	b2db      	uxtb	r3, r3
 800787e:	461a      	mov	r2, r3
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	429a      	cmp	r2, r3
 8007884:	d116      	bne.n	80078b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2200      	movs	r2, #0
 800788a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2200      	movs	r2, #0
 8007898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a0:	f043 0220 	orr.w	r2, r3, #32
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2200      	movs	r2, #0
 80078ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	e023      	b.n	80078fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078b4:	68bb      	ldr	r3, [r7, #8]
 80078b6:	0c1b      	lsrs	r3, r3, #16
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d10d      	bne.n	80078da <I2C_WaitOnFlagUntilTimeout+0xca>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	43da      	mvns	r2, r3
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	4013      	ands	r3, r2
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	bf0c      	ite	eq
 80078d0:	2301      	moveq	r3, #1
 80078d2:	2300      	movne	r3, #0
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	461a      	mov	r2, r3
 80078d8:	e00c      	b.n	80078f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	43da      	mvns	r2, r3
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	4013      	ands	r3, r2
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	bf0c      	ite	eq
 80078ec:	2301      	moveq	r3, #1
 80078ee:	2300      	movne	r3, #0
 80078f0:	b2db      	uxtb	r3, r3
 80078f2:	461a      	mov	r2, r3
 80078f4:	79fb      	ldrb	r3, [r7, #7]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d093      	beq.n	8007822 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	607a      	str	r2, [r7, #4]
 8007910:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007912:	e071      	b.n	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	695b      	ldr	r3, [r3, #20]
 800791a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800791e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007922:	d123      	bne.n	800796c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	681a      	ldr	r2, [r3, #0]
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007932:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800793c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	2200      	movs	r2, #0
 8007942:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2220      	movs	r2, #32
 8007948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007958:	f043 0204 	orr.w	r2, r3, #4
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007968:	2301      	movs	r3, #1
 800796a:	e067      	b.n	8007a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007972:	d041      	beq.n	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007974:	f7fb ff14 	bl	80037a0 <HAL_GetTick>
 8007978:	4602      	mov	r2, r0
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	1ad3      	subs	r3, r2, r3
 800797e:	687a      	ldr	r2, [r7, #4]
 8007980:	429a      	cmp	r2, r3
 8007982:	d302      	bcc.n	800798a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d136      	bne.n	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	0c1b      	lsrs	r3, r3, #16
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	d10c      	bne.n	80079ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	43da      	mvns	r2, r3
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	4013      	ands	r3, r2
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	bf14      	ite	ne
 80079a6:	2301      	movne	r3, #1
 80079a8:	2300      	moveq	r3, #0
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	e00b      	b.n	80079c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	699b      	ldr	r3, [r3, #24]
 80079b4:	43da      	mvns	r2, r3
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	4013      	ands	r3, r2
 80079ba:	b29b      	uxth	r3, r3
 80079bc:	2b00      	cmp	r3, #0
 80079be:	bf14      	ite	ne
 80079c0:	2301      	movne	r3, #1
 80079c2:	2300      	moveq	r3, #0
 80079c4:	b2db      	uxtb	r3, r3
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d016      	beq.n	80079f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2220      	movs	r2, #32
 80079d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079e4:	f043 0220 	orr.w	r2, r3, #32
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80079f4:	2301      	movs	r3, #1
 80079f6:	e021      	b.n	8007a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	0c1b      	lsrs	r3, r3, #16
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	2b01      	cmp	r3, #1
 8007a00:	d10c      	bne.n	8007a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	695b      	ldr	r3, [r3, #20]
 8007a08:	43da      	mvns	r2, r3
 8007a0a:	68bb      	ldr	r3, [r7, #8]
 8007a0c:	4013      	ands	r3, r2
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e00b      	b.n	8007a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	43da      	mvns	r2, r3
 8007a24:	68bb      	ldr	r3, [r7, #8]
 8007a26:	4013      	ands	r3, r2
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	bf14      	ite	ne
 8007a2e:	2301      	movne	r3, #1
 8007a30:	2300      	moveq	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f47f af6d 	bne.w	8007914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007a3a:	2300      	movs	r3, #0
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b084      	sub	sp, #16
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a50:	e034      	b.n	8007abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007a52:	68f8      	ldr	r0, [r7, #12]
 8007a54:	f000 f8b8 	bl	8007bc8 <I2C_IsAcknowledgeFailed>
 8007a58:	4603      	mov	r3, r0
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e034      	b.n	8007acc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a68:	d028      	beq.n	8007abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a6a:	f7fb fe99 	bl	80037a0 <HAL_GetTick>
 8007a6e:	4602      	mov	r2, r0
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	1ad3      	subs	r3, r2, r3
 8007a74:	68ba      	ldr	r2, [r7, #8]
 8007a76:	429a      	cmp	r2, r3
 8007a78:	d302      	bcc.n	8007a80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007a7a:	68bb      	ldr	r3, [r7, #8]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d11d      	bne.n	8007abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007a8a:	2b80      	cmp	r3, #128	@ 0x80
 8007a8c:	d016      	beq.n	8007abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	2200      	movs	r2, #0
 8007a92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2220      	movs	r2, #32
 8007a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aa8:	f043 0220 	orr.w	r2, r3, #32
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e007      	b.n	8007acc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	695b      	ldr	r3, [r3, #20]
 8007ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ac6:	2b80      	cmp	r3, #128	@ 0x80
 8007ac8:	d1c3      	bne.n	8007a52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007aca:	2300      	movs	r3, #0
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3710      	adds	r7, #16
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	60f8      	str	r0, [r7, #12]
 8007adc:	60b9      	str	r1, [r7, #8]
 8007ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ae0:	e034      	b.n	8007b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 f870 	bl	8007bc8 <I2C_IsAcknowledgeFailed>
 8007ae8:	4603      	mov	r3, r0
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d001      	beq.n	8007af2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007aee:	2301      	movs	r3, #1
 8007af0:	e034      	b.n	8007b5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af8:	d028      	beq.n	8007b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007afa:	f7fb fe51 	bl	80037a0 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	68ba      	ldr	r2, [r7, #8]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	d302      	bcc.n	8007b10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d11d      	bne.n	8007b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	695b      	ldr	r3, [r3, #20]
 8007b16:	f003 0304 	and.w	r3, r3, #4
 8007b1a:	2b04      	cmp	r3, #4
 8007b1c:	d016      	beq.n	8007b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2200      	movs	r2, #0
 8007b22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	2220      	movs	r2, #32
 8007b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b38:	f043 0220 	orr.w	r2, r3, #32
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e007      	b.n	8007b5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	f003 0304 	and.w	r3, r3, #4
 8007b56:	2b04      	cmp	r3, #4
 8007b58:	d1c3      	bne.n	8007ae2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007b5a:	2300      	movs	r3, #0
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3710      	adds	r7, #16
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bd80      	pop	{r7, pc}

08007b64 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b085      	sub	sp, #20
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007b70:	4b13      	ldr	r3, [pc, #76]	@ (8007bc0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	08db      	lsrs	r3, r3, #3
 8007b76:	4a13      	ldr	r2, [pc, #76]	@ (8007bc4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007b78:	fba2 2303 	umull	r2, r3, r2, r3
 8007b7c:	0a1a      	lsrs	r2, r3, #8
 8007b7e:	4613      	mov	r3, r2
 8007b80:	009b      	lsls	r3, r3, #2
 8007b82:	4413      	add	r3, r2
 8007b84:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d107      	bne.n	8007ba2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b96:	f043 0220 	orr.w	r2, r3, #32
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e008      	b.n	8007bb4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007bac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007bb0:	d0e9      	beq.n	8007b86 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007bb2:	2300      	movs	r3, #0
}
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	3714      	adds	r7, #20
 8007bb8:	46bd      	mov	sp, r7
 8007bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bbe:	4770      	bx	lr
 8007bc0:	20000030 	.word	0x20000030
 8007bc4:	14f8b589 	.word	0x14f8b589

08007bc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bde:	d11b      	bne.n	8007c18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007be8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2200      	movs	r2, #0
 8007bee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2220      	movs	r2, #32
 8007bf4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c04:	f043 0204 	orr.w	r2, r3, #4
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007c14:	2301      	movs	r3, #1
 8007c16:	e000      	b.n	8007c1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007c18:	2300      	movs	r3, #0
}
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	370c      	adds	r7, #12
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr

08007c26 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007c26:	b480      	push	{r7}
 8007c28:	b083      	sub	sp, #12
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c32:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007c36:	d103      	bne.n	8007c40 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007c3e:	e007      	b.n	8007c50 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c44:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007c48:	d102      	bne.n	8007c50 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b086      	sub	sp, #24
 8007c60:	af02      	add	r7, sp, #8
 8007c62:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e101      	b.n	8007e72 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d106      	bne.n	8007c8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f006 fbdd 	bl	800e448 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2203      	movs	r2, #3
 8007c92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007c9c:	d102      	bne.n	8007ca4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4618      	mov	r0, r3
 8007caa:	f002 ff34 	bl	800ab16 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	7c1a      	ldrb	r2, [r3, #16]
 8007cb6:	f88d 2000 	strb.w	r2, [sp]
 8007cba:	3304      	adds	r3, #4
 8007cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007cbe:	f002 fe13 	bl	800a8e8 <USB_CoreInit>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d005      	beq.n	8007cd4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e0ce      	b.n	8007e72 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2100      	movs	r1, #0
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f002 ff2c 	bl	800ab38 <USB_SetCurrentMode>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d005      	beq.n	8007cf2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2202      	movs	r2, #2
 8007cea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e0bf      	b.n	8007e72 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	73fb      	strb	r3, [r7, #15]
 8007cf6:	e04a      	b.n	8007d8e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007cf8:	7bfa      	ldrb	r2, [r7, #15]
 8007cfa:	6879      	ldr	r1, [r7, #4]
 8007cfc:	4613      	mov	r3, r2
 8007cfe:	00db      	lsls	r3, r3, #3
 8007d00:	4413      	add	r3, r2
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	440b      	add	r3, r1
 8007d06:	3315      	adds	r3, #21
 8007d08:	2201      	movs	r2, #1
 8007d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007d0c:	7bfa      	ldrb	r2, [r7, #15]
 8007d0e:	6879      	ldr	r1, [r7, #4]
 8007d10:	4613      	mov	r3, r2
 8007d12:	00db      	lsls	r3, r3, #3
 8007d14:	4413      	add	r3, r2
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	440b      	add	r3, r1
 8007d1a:	3314      	adds	r3, #20
 8007d1c:	7bfa      	ldrb	r2, [r7, #15]
 8007d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007d20:	7bfa      	ldrb	r2, [r7, #15]
 8007d22:	7bfb      	ldrb	r3, [r7, #15]
 8007d24:	b298      	uxth	r0, r3
 8007d26:	6879      	ldr	r1, [r7, #4]
 8007d28:	4613      	mov	r3, r2
 8007d2a:	00db      	lsls	r3, r3, #3
 8007d2c:	4413      	add	r3, r2
 8007d2e:	009b      	lsls	r3, r3, #2
 8007d30:	440b      	add	r3, r1
 8007d32:	332e      	adds	r3, #46	@ 0x2e
 8007d34:	4602      	mov	r2, r0
 8007d36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007d38:	7bfa      	ldrb	r2, [r7, #15]
 8007d3a:	6879      	ldr	r1, [r7, #4]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	00db      	lsls	r3, r3, #3
 8007d40:	4413      	add	r3, r2
 8007d42:	009b      	lsls	r3, r3, #2
 8007d44:	440b      	add	r3, r1
 8007d46:	3318      	adds	r3, #24
 8007d48:	2200      	movs	r2, #0
 8007d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007d4c:	7bfa      	ldrb	r2, [r7, #15]
 8007d4e:	6879      	ldr	r1, [r7, #4]
 8007d50:	4613      	mov	r3, r2
 8007d52:	00db      	lsls	r3, r3, #3
 8007d54:	4413      	add	r3, r2
 8007d56:	009b      	lsls	r3, r3, #2
 8007d58:	440b      	add	r3, r1
 8007d5a:	331c      	adds	r3, #28
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007d60:	7bfa      	ldrb	r2, [r7, #15]
 8007d62:	6879      	ldr	r1, [r7, #4]
 8007d64:	4613      	mov	r3, r2
 8007d66:	00db      	lsls	r3, r3, #3
 8007d68:	4413      	add	r3, r2
 8007d6a:	009b      	lsls	r3, r3, #2
 8007d6c:	440b      	add	r3, r1
 8007d6e:	3320      	adds	r3, #32
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007d74:	7bfa      	ldrb	r2, [r7, #15]
 8007d76:	6879      	ldr	r1, [r7, #4]
 8007d78:	4613      	mov	r3, r2
 8007d7a:	00db      	lsls	r3, r3, #3
 8007d7c:	4413      	add	r3, r2
 8007d7e:	009b      	lsls	r3, r3, #2
 8007d80:	440b      	add	r3, r1
 8007d82:	3324      	adds	r3, #36	@ 0x24
 8007d84:	2200      	movs	r2, #0
 8007d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d88:	7bfb      	ldrb	r3, [r7, #15]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	73fb      	strb	r3, [r7, #15]
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	791b      	ldrb	r3, [r3, #4]
 8007d92:	7bfa      	ldrb	r2, [r7, #15]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d3af      	bcc.n	8007cf8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
 8007d9c:	e044      	b.n	8007e28 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007d9e:	7bfa      	ldrb	r2, [r7, #15]
 8007da0:	6879      	ldr	r1, [r7, #4]
 8007da2:	4613      	mov	r3, r2
 8007da4:	00db      	lsls	r3, r3, #3
 8007da6:	4413      	add	r3, r2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	440b      	add	r3, r1
 8007dac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8007db0:	2200      	movs	r2, #0
 8007db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007db4:	7bfa      	ldrb	r2, [r7, #15]
 8007db6:	6879      	ldr	r1, [r7, #4]
 8007db8:	4613      	mov	r3, r2
 8007dba:	00db      	lsls	r3, r3, #3
 8007dbc:	4413      	add	r3, r2
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	440b      	add	r3, r1
 8007dc2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8007dc6:	7bfa      	ldrb	r2, [r7, #15]
 8007dc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007dca:	7bfa      	ldrb	r2, [r7, #15]
 8007dcc:	6879      	ldr	r1, [r7, #4]
 8007dce:	4613      	mov	r3, r2
 8007dd0:	00db      	lsls	r3, r3, #3
 8007dd2:	4413      	add	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	440b      	add	r3, r1
 8007dd8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8007ddc:	2200      	movs	r2, #0
 8007dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007de0:	7bfa      	ldrb	r2, [r7, #15]
 8007de2:	6879      	ldr	r1, [r7, #4]
 8007de4:	4613      	mov	r3, r2
 8007de6:	00db      	lsls	r3, r3, #3
 8007de8:	4413      	add	r3, r2
 8007dea:	009b      	lsls	r3, r3, #2
 8007dec:	440b      	add	r3, r1
 8007dee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8007df2:	2200      	movs	r2, #0
 8007df4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007df6:	7bfa      	ldrb	r2, [r7, #15]
 8007df8:	6879      	ldr	r1, [r7, #4]
 8007dfa:	4613      	mov	r3, r2
 8007dfc:	00db      	lsls	r3, r3, #3
 8007dfe:	4413      	add	r3, r2
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	440b      	add	r3, r1
 8007e04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007e0c:	7bfa      	ldrb	r2, [r7, #15]
 8007e0e:	6879      	ldr	r1, [r7, #4]
 8007e10:	4613      	mov	r3, r2
 8007e12:	00db      	lsls	r3, r3, #3
 8007e14:	4413      	add	r3, r2
 8007e16:	009b      	lsls	r3, r3, #2
 8007e18:	440b      	add	r3, r1
 8007e1a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8007e1e:	2200      	movs	r2, #0
 8007e20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007e22:	7bfb      	ldrb	r3, [r7, #15]
 8007e24:	3301      	adds	r3, #1
 8007e26:	73fb      	strb	r3, [r7, #15]
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	791b      	ldrb	r3, [r3, #4]
 8007e2c:	7bfa      	ldrb	r2, [r7, #15]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d3b5      	bcc.n	8007d9e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6818      	ldr	r0, [r3, #0]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	7c1a      	ldrb	r2, [r3, #16]
 8007e3a:	f88d 2000 	strb.w	r2, [sp]
 8007e3e:	3304      	adds	r3, #4
 8007e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e42:	f002 fec5 	bl	800abd0 <USB_DevInit>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d005      	beq.n	8007e58 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8007e54:	2301      	movs	r3, #1
 8007e56:	e00c      	b.n	8007e72 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f003 ff0f 	bl	800bc8e <USB_DevDisconnect>

  return HAL_OK;
 8007e70:	2300      	movs	r3, #0
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3710      	adds	r7, #16
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}

08007e7a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007e7a:	b580      	push	{r7, lr}
 8007e7c:	b084      	sub	sp, #16
 8007e7e:	af00      	add	r7, sp, #0
 8007e80:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_PCD_Start+0x1c>
 8007e92:	2302      	movs	r3, #2
 8007e94:	e022      	b.n	8007edc <HAL_PCD_Start+0x62>
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d009      	beq.n	8007ebe <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8007eae:	2b01      	cmp	r3, #1
 8007eb0:	d105      	bne.n	8007ebe <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb6:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	4618      	mov	r0, r3
 8007ec4:	f002 fe16 	bl	800aaf4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f003 febd 	bl	800bc4c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8007eda:	2300      	movs	r3, #0
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3710      	adds	r7, #16
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007ee4:	b590      	push	{r4, r7, lr}
 8007ee6:	b08d      	sub	sp, #52	@ 0x34
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ef2:	6a3b      	ldr	r3, [r7, #32]
 8007ef4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4618      	mov	r0, r3
 8007efc:	f003 ff7b 	bl	800bdf6 <USB_GetMode>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 848c 	bne.w	8008820 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f003 fedf 	bl	800bcd0 <USB_ReadInterrupts>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8482 	beq.w	800881e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f20:	689b      	ldr	r3, [r3, #8]
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f003 fecc 	bl	800bcd0 <USB_ReadInterrupts>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	f003 0302 	and.w	r3, r3, #2
 8007f3e:	2b02      	cmp	r3, #2
 8007f40:	d107      	bne.n	8007f52 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	695a      	ldr	r2, [r3, #20]
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f002 0202 	and.w	r2, r2, #2
 8007f50:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4618      	mov	r0, r3
 8007f58:	f003 feba 	bl	800bcd0 <USB_ReadInterrupts>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	f003 0310 	and.w	r3, r3, #16
 8007f62:	2b10      	cmp	r3, #16
 8007f64:	d161      	bne.n	800802a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	699a      	ldr	r2, [r3, #24]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0210 	bic.w	r2, r2, #16
 8007f74:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8007f7c:	69bb      	ldr	r3, [r7, #24]
 8007f7e:	f003 020f 	and.w	r2, r3, #15
 8007f82:	4613      	mov	r3, r2
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	4413      	add	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	4413      	add	r3, r2
 8007f92:	3304      	adds	r3, #4
 8007f94:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007f9c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007fa0:	d124      	bne.n	8007fec <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8007fa8:	4013      	ands	r3, r2
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d035      	beq.n	800801a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	091b      	lsrs	r3, r3, #4
 8007fb6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007fb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	6a38      	ldr	r0, [r7, #32]
 8007fc2:	f003 fcf1 	bl	800b9a8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	68da      	ldr	r2, [r3, #12]
 8007fca:	69bb      	ldr	r3, [r7, #24]
 8007fcc:	091b      	lsrs	r3, r3, #4
 8007fce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fd2:	441a      	add	r2, r3
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	695a      	ldr	r2, [r3, #20]
 8007fdc:	69bb      	ldr	r3, [r7, #24]
 8007fde:	091b      	lsrs	r3, r3, #4
 8007fe0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fe4:	441a      	add	r2, r3
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	615a      	str	r2, [r3, #20]
 8007fea:	e016      	b.n	800801a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8007fec:	69bb      	ldr	r3, [r7, #24]
 8007fee:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8007ff2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8007ff6:	d110      	bne.n	800801a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007ffe:	2208      	movs	r2, #8
 8008000:	4619      	mov	r1, r3
 8008002:	6a38      	ldr	r0, [r7, #32]
 8008004:	f003 fcd0 	bl	800b9a8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	695a      	ldr	r2, [r3, #20]
 800800c:	69bb      	ldr	r3, [r7, #24]
 800800e:	091b      	lsrs	r3, r3, #4
 8008010:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008014:	441a      	add	r2, r3
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	699a      	ldr	r2, [r3, #24]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	f042 0210 	orr.w	r2, r2, #16
 8008028:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f003 fe4e 	bl	800bcd0 <USB_ReadInterrupts>
 8008034:	4603      	mov	r3, r0
 8008036:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800803a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800803e:	f040 80a7 	bne.w	8008190 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8008042:	2300      	movs	r3, #0
 8008044:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4618      	mov	r0, r3
 800804c:	f003 fe53 	bl	800bcf6 <USB_ReadDevAllOutEpInterrupt>
 8008050:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8008052:	e099      	b.n	8008188 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008056:	f003 0301 	and.w	r3, r3, #1
 800805a:	2b00      	cmp	r3, #0
 800805c:	f000 808e 	beq.w	800817c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008066:	b2d2      	uxtb	r2, r2
 8008068:	4611      	mov	r1, r2
 800806a:	4618      	mov	r0, r3
 800806c:	f003 fe77 	bl	800bd5e <USB_ReadDevOutEPInterrupt>
 8008070:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008072:	693b      	ldr	r3, [r7, #16]
 8008074:	f003 0301 	and.w	r3, r3, #1
 8008078:	2b00      	cmp	r3, #0
 800807a:	d00c      	beq.n	8008096 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800807c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008088:	461a      	mov	r2, r3
 800808a:	2301      	movs	r3, #1
 800808c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800808e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 fea3 	bl	8008ddc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008096:	693b      	ldr	r3, [r7, #16]
 8008098:	f003 0308 	and.w	r3, r3, #8
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00c      	beq.n	80080ba <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80080a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a2:	015a      	lsls	r2, r3, #5
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	4413      	add	r3, r2
 80080a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080ac:	461a      	mov	r2, r3
 80080ae:	2308      	movs	r3, #8
 80080b0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80080b2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 ff79 	bl	8008fac <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80080ba:	693b      	ldr	r3, [r7, #16]
 80080bc:	f003 0310 	and.w	r3, r3, #16
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d008      	beq.n	80080d6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80080c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080c6:	015a      	lsls	r2, r3, #5
 80080c8:	69fb      	ldr	r3, [r7, #28]
 80080ca:	4413      	add	r3, r2
 80080cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080d0:	461a      	mov	r2, r3
 80080d2:	2310      	movs	r3, #16
 80080d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	f003 0302 	and.w	r3, r3, #2
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d030      	beq.n	8008142 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80080e0:	6a3b      	ldr	r3, [r7, #32]
 80080e2:	695b      	ldr	r3, [r3, #20]
 80080e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080e8:	2b80      	cmp	r3, #128	@ 0x80
 80080ea:	d109      	bne.n	8008100 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	69fa      	ldr	r2, [r7, #28]
 80080f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80080fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80080fe:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8008100:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008102:	4613      	mov	r3, r2
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	4413      	add	r3, r2
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	4413      	add	r3, r2
 8008112:	3304      	adds	r3, #4
 8008114:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	78db      	ldrb	r3, [r3, #3]
 800811a:	2b01      	cmp	r3, #1
 800811c:	d108      	bne.n	8008130 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	2200      	movs	r2, #0
 8008122:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008126:	b2db      	uxtb	r3, r3
 8008128:	4619      	mov	r1, r3
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f006 fa88 	bl	800e640 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8008130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008132:	015a      	lsls	r2, r3, #5
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	4413      	add	r3, r2
 8008138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800813c:	461a      	mov	r2, r3
 800813e:	2302      	movs	r3, #2
 8008140:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008142:	693b      	ldr	r3, [r7, #16]
 8008144:	f003 0320 	and.w	r3, r3, #32
 8008148:	2b00      	cmp	r3, #0
 800814a:	d008      	beq.n	800815e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800814c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800814e:	015a      	lsls	r2, r3, #5
 8008150:	69fb      	ldr	r3, [r7, #28]
 8008152:	4413      	add	r3, r2
 8008154:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008158:	461a      	mov	r2, r3
 800815a:	2320      	movs	r3, #32
 800815c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8008164:	2b00      	cmp	r3, #0
 8008166:	d009      	beq.n	800817c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800816a:	015a      	lsls	r2, r3, #5
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	4413      	add	r3, r2
 8008170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008174:	461a      	mov	r2, r3
 8008176:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800817a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800817c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817e:	3301      	adds	r3, #1
 8008180:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008184:	085b      	lsrs	r3, r3, #1
 8008186:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800818a:	2b00      	cmp	r3, #0
 800818c:	f47f af62 	bne.w	8008054 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4618      	mov	r0, r3
 8008196:	f003 fd9b 	bl	800bcd0 <USB_ReadInterrupts>
 800819a:	4603      	mov	r3, r0
 800819c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80081a0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80081a4:	f040 80db 	bne.w	800835e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4618      	mov	r0, r3
 80081ae:	f003 fdbc 	bl	800bd2a <USB_ReadDevAllInEpInterrupt>
 80081b2:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80081b4:	2300      	movs	r3, #0
 80081b6:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80081b8:	e0cd      	b.n	8008356 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80081ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081bc:	f003 0301 	and.w	r3, r3, #1
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 80c2 	beq.w	800834a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80081cc:	b2d2      	uxtb	r2, r2
 80081ce:	4611      	mov	r1, r2
 80081d0:	4618      	mov	r0, r3
 80081d2:	f003 fde2 	bl	800bd9a <USB_ReadDevInEPInterrupt>
 80081d6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f003 0301 	and.w	r3, r3, #1
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d057      	beq.n	8008292 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80081e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e4:	f003 030f 	and.w	r3, r3, #15
 80081e8:	2201      	movs	r2, #1
 80081ea:	fa02 f303 	lsl.w	r3, r2, r3
 80081ee:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80081f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	43db      	mvns	r3, r3
 80081fc:	69f9      	ldr	r1, [r7, #28]
 80081fe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008202:	4013      	ands	r3, r2
 8008204:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	4413      	add	r3, r2
 800820e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008212:	461a      	mov	r2, r3
 8008214:	2301      	movs	r3, #1
 8008216:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	799b      	ldrb	r3, [r3, #6]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d132      	bne.n	8008286 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008224:	4613      	mov	r3, r2
 8008226:	00db      	lsls	r3, r3, #3
 8008228:	4413      	add	r3, r2
 800822a:	009b      	lsls	r3, r3, #2
 800822c:	440b      	add	r3, r1
 800822e:	3320      	adds	r3, #32
 8008230:	6819      	ldr	r1, [r3, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008236:	4613      	mov	r3, r2
 8008238:	00db      	lsls	r3, r3, #3
 800823a:	4413      	add	r3, r2
 800823c:	009b      	lsls	r3, r3, #2
 800823e:	4403      	add	r3, r0
 8008240:	331c      	adds	r3, #28
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4419      	add	r1, r3
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800824a:	4613      	mov	r3, r2
 800824c:	00db      	lsls	r3, r3, #3
 800824e:	4413      	add	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	4403      	add	r3, r0
 8008254:	3320      	adds	r3, #32
 8008256:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008258:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800825a:	2b00      	cmp	r3, #0
 800825c:	d113      	bne.n	8008286 <HAL_PCD_IRQHandler+0x3a2>
 800825e:	6879      	ldr	r1, [r7, #4]
 8008260:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008262:	4613      	mov	r3, r2
 8008264:	00db      	lsls	r3, r3, #3
 8008266:	4413      	add	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	440b      	add	r3, r1
 800826c:	3324      	adds	r3, #36	@ 0x24
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b00      	cmp	r3, #0
 8008272:	d108      	bne.n	8008286 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	6818      	ldr	r0, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800827e:	461a      	mov	r2, r3
 8008280:	2101      	movs	r1, #1
 8008282:	f003 fde9 	bl	800be58 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008288:	b2db      	uxtb	r3, r3
 800828a:	4619      	mov	r1, r3
 800828c:	6878      	ldr	r0, [r7, #4]
 800828e:	f006 f95c 	bl	800e54a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008292:	693b      	ldr	r3, [r7, #16]
 8008294:	f003 0308 	and.w	r3, r3, #8
 8008298:	2b00      	cmp	r3, #0
 800829a:	d008      	beq.n	80082ae <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800829c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800829e:	015a      	lsls	r2, r3, #5
 80082a0:	69fb      	ldr	r3, [r7, #28]
 80082a2:	4413      	add	r3, r2
 80082a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082a8:	461a      	mov	r2, r3
 80082aa:	2308      	movs	r3, #8
 80082ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d008      	beq.n	80082ca <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	015a      	lsls	r2, r3, #5
 80082bc:	69fb      	ldr	r3, [r7, #28]
 80082be:	4413      	add	r3, r2
 80082c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082c4:	461a      	mov	r2, r3
 80082c6:	2310      	movs	r3, #16
 80082c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d008      	beq.n	80082e6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	015a      	lsls	r2, r3, #5
 80082d8:	69fb      	ldr	r3, [r7, #28]
 80082da:	4413      	add	r3, r2
 80082dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082e0:	461a      	mov	r2, r3
 80082e2:	2340      	movs	r3, #64	@ 0x40
 80082e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80082e6:	693b      	ldr	r3, [r7, #16]
 80082e8:	f003 0302 	and.w	r3, r3, #2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d023      	beq.n	8008338 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80082f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80082f2:	6a38      	ldr	r0, [r7, #32]
 80082f4:	f002 fdd0 	bl	800ae98 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80082f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082fa:	4613      	mov	r3, r2
 80082fc:	00db      	lsls	r3, r3, #3
 80082fe:	4413      	add	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	3310      	adds	r3, #16
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	4413      	add	r3, r2
 8008308:	3304      	adds	r3, #4
 800830a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	78db      	ldrb	r3, [r3, #3]
 8008310:	2b01      	cmp	r3, #1
 8008312:	d108      	bne.n	8008326 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8008314:	697b      	ldr	r3, [r7, #20]
 8008316:	2200      	movs	r2, #0
 8008318:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	b2db      	uxtb	r3, r3
 800831e:	4619      	mov	r1, r3
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f006 f99f 	bl	800e664 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008328:	015a      	lsls	r2, r3, #5
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	4413      	add	r3, r2
 800832e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008332:	461a      	mov	r2, r3
 8008334:	2302      	movs	r3, #2
 8008336:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008338:	693b      	ldr	r3, [r7, #16]
 800833a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800833e:	2b00      	cmp	r3, #0
 8008340:	d003      	beq.n	800834a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008342:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fcbd 	bl	8008cc4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800834a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800834c:	3301      	adds	r3, #1
 800834e:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8008350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008352:	085b      	lsrs	r3, r3, #1
 8008354:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8008356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008358:	2b00      	cmp	r3, #0
 800835a:	f47f af2e 	bne.w	80081ba <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	4618      	mov	r0, r3
 8008364:	f003 fcb4 	bl	800bcd0 <USB_ReadInterrupts>
 8008368:	4603      	mov	r3, r0
 800836a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800836e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008372:	d122      	bne.n	80083ba <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008374:	69fb      	ldr	r3, [r7, #28]
 8008376:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	69fa      	ldr	r2, [r7, #28]
 800837e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008382:	f023 0301 	bic.w	r3, r3, #1
 8008386:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800838e:	2b01      	cmp	r3, #1
 8008390:	d108      	bne.n	80083a4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2200      	movs	r2, #0
 8008396:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800839a:	2100      	movs	r1, #0
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 fea3 	bl	80090e8 <HAL_PCDEx_LPM_Callback>
 80083a2:	e002      	b.n	80083aa <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80083a4:	6878      	ldr	r0, [r7, #4]
 80083a6:	f006 f93d 	bl	800e624 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	695a      	ldr	r2, [r3, #20]
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80083b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f003 fc86 	bl	800bcd0 <USB_ReadInterrupts>
 80083c4:	4603      	mov	r3, r0
 80083c6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80083ca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80083ce:	d112      	bne.n	80083f6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80083d0:	69fb      	ldr	r3, [r7, #28]
 80083d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d102      	bne.n	80083e6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f006 f8f9 	bl	800e5d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	695a      	ldr	r2, [r3, #20]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80083f4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4618      	mov	r0, r3
 80083fc:	f003 fc68 	bl	800bcd0 <USB_ReadInterrupts>
 8008400:	4603      	mov	r3, r0
 8008402:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800840a:	f040 80b7 	bne.w	800857c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008414:	685b      	ldr	r3, [r3, #4]
 8008416:	69fa      	ldr	r2, [r7, #28]
 8008418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800841c:	f023 0301 	bic.w	r3, r3, #1
 8008420:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	2110      	movs	r1, #16
 8008428:	4618      	mov	r0, r3
 800842a:	f002 fd35 	bl	800ae98 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800842e:	2300      	movs	r3, #0
 8008430:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008432:	e046      	b.n	80084c2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008434:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008440:	461a      	mov	r2, r3
 8008442:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008446:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800844a:	015a      	lsls	r2, r3, #5
 800844c:	69fb      	ldr	r3, [r7, #28]
 800844e:	4413      	add	r3, r2
 8008450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008458:	0151      	lsls	r1, r2, #5
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	440a      	add	r2, r1
 800845e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008462:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008466:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846a:	015a      	lsls	r2, r3, #5
 800846c:	69fb      	ldr	r3, [r7, #28]
 800846e:	4413      	add	r3, r2
 8008470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008474:	461a      	mov	r2, r3
 8008476:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800847a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800847c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800848c:	0151      	lsls	r1, r2, #5
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	440a      	add	r2, r1
 8008492:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008496:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800849a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800849c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	69fb      	ldr	r3, [r7, #28]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80084ac:	0151      	lsls	r1, r2, #5
 80084ae:	69fa      	ldr	r2, [r7, #28]
 80084b0:	440a      	add	r2, r1
 80084b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80084b6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80084ba:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80084bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084be:	3301      	adds	r3, #1
 80084c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	791b      	ldrb	r3, [r3, #4]
 80084c6:	461a      	mov	r2, r3
 80084c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d3b2      	bcc.n	8008434 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084d4:	69db      	ldr	r3, [r3, #28]
 80084d6:	69fa      	ldr	r2, [r7, #28]
 80084d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084dc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80084e0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	7bdb      	ldrb	r3, [r3, #15]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d016      	beq.n	8008518 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80084f4:	69fa      	ldr	r2, [r7, #28]
 80084f6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084fa:	f043 030b 	orr.w	r3, r3, #11
 80084fe:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008502:	69fb      	ldr	r3, [r7, #28]
 8008504:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800850a:	69fa      	ldr	r2, [r7, #28]
 800850c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008510:	f043 030b 	orr.w	r3, r3, #11
 8008514:	6453      	str	r3, [r2, #68]	@ 0x44
 8008516:	e015      	b.n	8008544 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800851e:	695b      	ldr	r3, [r3, #20]
 8008520:	69fa      	ldr	r2, [r7, #28]
 8008522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008526:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800852a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800852e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008536:	691b      	ldr	r3, [r3, #16]
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800853e:	f043 030b 	orr.w	r3, r3, #11
 8008542:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008544:	69fb      	ldr	r3, [r7, #28]
 8008546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	69fa      	ldr	r2, [r7, #28]
 800854e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008552:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008556:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6818      	ldr	r0, [r3, #0]
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008566:	461a      	mov	r2, r3
 8008568:	f003 fc76 	bl	800be58 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	695a      	ldr	r2, [r3, #20]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800857a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4618      	mov	r0, r3
 8008582:	f003 fba5 	bl	800bcd0 <USB_ReadInterrupts>
 8008586:	4603      	mov	r3, r0
 8008588:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800858c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008590:	d123      	bne.n	80085da <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4618      	mov	r0, r3
 8008598:	f003 fc3b 	bl	800be12 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4618      	mov	r0, r3
 80085a2:	f002 fcf2 	bl	800af8a <USB_GetDevSpeed>
 80085a6:	4603      	mov	r3, r0
 80085a8:	461a      	mov	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681c      	ldr	r4, [r3, #0]
 80085b2:	f001 f9c9 	bl	8009948 <HAL_RCC_GetHCLKFreq>
 80085b6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80085bc:	461a      	mov	r2, r3
 80085be:	4620      	mov	r0, r4
 80085c0:	f002 f9f6 	bl	800a9b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80085c4:	6878      	ldr	r0, [r7, #4]
 80085c6:	f005 ffe8 	bl	800e59a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	695a      	ldr	r2, [r3, #20]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80085d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4618      	mov	r0, r3
 80085e0:	f003 fb76 	bl	800bcd0 <USB_ReadInterrupts>
 80085e4:	4603      	mov	r3, r0
 80085e6:	f003 0308 	and.w	r3, r3, #8
 80085ea:	2b08      	cmp	r3, #8
 80085ec:	d10a      	bne.n	8008604 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f005 ffc5 	bl	800e57e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	695a      	ldr	r2, [r3, #20]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f002 0208 	and.w	r2, r2, #8
 8008602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4618      	mov	r0, r3
 800860a:	f003 fb61 	bl	800bcd0 <USB_ReadInterrupts>
 800860e:	4603      	mov	r3, r0
 8008610:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008614:	2b80      	cmp	r3, #128	@ 0x80
 8008616:	d123      	bne.n	8008660 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8008618:	6a3b      	ldr	r3, [r7, #32]
 800861a:	699b      	ldr	r3, [r3, #24]
 800861c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008620:	6a3b      	ldr	r3, [r7, #32]
 8008622:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008624:	2301      	movs	r3, #1
 8008626:	627b      	str	r3, [r7, #36]	@ 0x24
 8008628:	e014      	b.n	8008654 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800862a:	6879      	ldr	r1, [r7, #4]
 800862c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800862e:	4613      	mov	r3, r2
 8008630:	00db      	lsls	r3, r3, #3
 8008632:	4413      	add	r3, r2
 8008634:	009b      	lsls	r3, r3, #2
 8008636:	440b      	add	r3, r1
 8008638:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800863c:	781b      	ldrb	r3, [r3, #0]
 800863e:	2b01      	cmp	r3, #1
 8008640:	d105      	bne.n	800864e <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	b2db      	uxtb	r3, r3
 8008646:	4619      	mov	r1, r3
 8008648:	6878      	ldr	r0, [r7, #4]
 800864a:	f000 fb0a 	bl	8008c62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	3301      	adds	r3, #1
 8008652:	627b      	str	r3, [r7, #36]	@ 0x24
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	791b      	ldrb	r3, [r3, #4]
 8008658:	461a      	mov	r2, r3
 800865a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800865c:	4293      	cmp	r3, r2
 800865e:	d3e4      	bcc.n	800862a <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4618      	mov	r0, r3
 8008666:	f003 fb33 	bl	800bcd0 <USB_ReadInterrupts>
 800866a:	4603      	mov	r3, r0
 800866c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008670:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008674:	d13c      	bne.n	80086f0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008676:	2301      	movs	r3, #1
 8008678:	627b      	str	r3, [r7, #36]	@ 0x24
 800867a:	e02b      	b.n	80086d4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800867c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800867e:	015a      	lsls	r2, r3, #5
 8008680:	69fb      	ldr	r3, [r7, #28]
 8008682:	4413      	add	r3, r2
 8008684:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800868c:	6879      	ldr	r1, [r7, #4]
 800868e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008690:	4613      	mov	r3, r2
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	4413      	add	r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	3318      	adds	r3, #24
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d115      	bne.n	80086ce <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80086a2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	da12      	bge.n	80086ce <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80086a8:	6879      	ldr	r1, [r7, #4]
 80086aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ac:	4613      	mov	r3, r2
 80086ae:	00db      	lsls	r3, r3, #3
 80086b0:	4413      	add	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	440b      	add	r3, r1
 80086b6:	3317      	adds	r3, #23
 80086b8:	2201      	movs	r2, #1
 80086ba:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086c4:	b2db      	uxtb	r3, r3
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 faca 	bl	8008c62 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80086ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d0:	3301      	adds	r3, #1
 80086d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	791b      	ldrb	r3, [r3, #4]
 80086d8:	461a      	mov	r2, r3
 80086da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086dc:	4293      	cmp	r3, r2
 80086de:	d3cd      	bcc.n	800867c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	695a      	ldr	r2, [r3, #20]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80086ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4618      	mov	r0, r3
 80086f6:	f003 faeb 	bl	800bcd0 <USB_ReadInterrupts>
 80086fa:	4603      	mov	r3, r0
 80086fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008700:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008704:	d156      	bne.n	80087b4 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008706:	2301      	movs	r3, #1
 8008708:	627b      	str	r3, [r7, #36]	@ 0x24
 800870a:	e045      	b.n	8008798 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	015a      	lsls	r2, r3, #5
 8008710:	69fb      	ldr	r3, [r7, #28]
 8008712:	4413      	add	r3, r2
 8008714:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800871c:	6879      	ldr	r1, [r7, #4]
 800871e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008720:	4613      	mov	r3, r2
 8008722:	00db      	lsls	r3, r3, #3
 8008724:	4413      	add	r3, r2
 8008726:	009b      	lsls	r3, r3, #2
 8008728:	440b      	add	r3, r1
 800872a:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800872e:	781b      	ldrb	r3, [r3, #0]
 8008730:	2b01      	cmp	r3, #1
 8008732:	d12e      	bne.n	8008792 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8008734:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8008736:	2b00      	cmp	r3, #0
 8008738:	da2b      	bge.n	8008792 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800873a:	69bb      	ldr	r3, [r7, #24]
 800873c:	0c1a      	lsrs	r2, r3, #16
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8008744:	4053      	eors	r3, r2
 8008746:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800874a:	2b00      	cmp	r3, #0
 800874c:	d121      	bne.n	8008792 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800874e:	6879      	ldr	r1, [r7, #4]
 8008750:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008752:	4613      	mov	r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	440b      	add	r3, r1
 800875c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8008760:	2201      	movs	r2, #1
 8008762:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8008764:	6a3b      	ldr	r3, [r7, #32]
 8008766:	699b      	ldr	r3, [r3, #24]
 8008768:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800876c:	6a3b      	ldr	r3, [r7, #32]
 800876e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8008770:	6a3b      	ldr	r3, [r7, #32]
 8008772:	695b      	ldr	r3, [r3, #20]
 8008774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008778:	2b00      	cmp	r3, #0
 800877a:	d10a      	bne.n	8008792 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008782:	685b      	ldr	r3, [r3, #4]
 8008784:	69fa      	ldr	r2, [r7, #28]
 8008786:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800878a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800878e:	6053      	str	r3, [r2, #4]
            break;
 8008790:	e008      	b.n	80087a4 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8008792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008794:	3301      	adds	r3, #1
 8008796:	627b      	str	r3, [r7, #36]	@ 0x24
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	791b      	ldrb	r3, [r3, #4]
 800879c:	461a      	mov	r2, r3
 800879e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d3b3      	bcc.n	800870c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	695a      	ldr	r2, [r3, #20]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80087b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f003 fa89 	bl	800bcd0 <USB_ReadInterrupts>
 80087be:	4603      	mov	r3, r0
 80087c0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80087c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087c8:	d10a      	bne.n	80087e0 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f005 ff5c 	bl	800e688 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	695a      	ldr	r2, [r3, #20]
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80087de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4618      	mov	r0, r3
 80087e6:	f003 fa73 	bl	800bcd0 <USB_ReadInterrupts>
 80087ea:	4603      	mov	r3, r0
 80087ec:	f003 0304 	and.w	r3, r3, #4
 80087f0:	2b04      	cmp	r3, #4
 80087f2:	d115      	bne.n	8008820 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d002      	beq.n	800880c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f005 ff4c 	bl	800e6a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6859      	ldr	r1, [r3, #4]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69ba      	ldr	r2, [r7, #24]
 8008818:	430a      	orrs	r2, r1
 800881a:	605a      	str	r2, [r3, #4]
 800881c:	e000      	b.n	8008820 <HAL_PCD_IRQHandler+0x93c>
      return;
 800881e:	bf00      	nop
    }
  }
}
 8008820:	3734      	adds	r7, #52	@ 0x34
 8008822:	46bd      	mov	sp, r7
 8008824:	bd90      	pop	{r4, r7, pc}

08008826 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008826:	b580      	push	{r7, lr}
 8008828:	b082      	sub	sp, #8
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
 800882e:	460b      	mov	r3, r1
 8008830:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008838:	2b01      	cmp	r3, #1
 800883a:	d101      	bne.n	8008840 <HAL_PCD_SetAddress+0x1a>
 800883c:	2302      	movs	r3, #2
 800883e:	e012      	b.n	8008866 <HAL_PCD_SetAddress+0x40>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2201      	movs	r2, #1
 8008844:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	78fa      	ldrb	r2, [r7, #3]
 800884c:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	78fa      	ldrb	r2, [r7, #3]
 8008854:	4611      	mov	r1, r2
 8008856:	4618      	mov	r0, r3
 8008858:	f003 f9d2 	bl	800bc00 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
 8008876:	4608      	mov	r0, r1
 8008878:	4611      	mov	r1, r2
 800887a:	461a      	mov	r2, r3
 800887c:	4603      	mov	r3, r0
 800887e:	70fb      	strb	r3, [r7, #3]
 8008880:	460b      	mov	r3, r1
 8008882:	803b      	strh	r3, [r7, #0]
 8008884:	4613      	mov	r3, r2
 8008886:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8008888:	2300      	movs	r3, #0
 800888a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800888c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008890:	2b00      	cmp	r3, #0
 8008892:	da0f      	bge.n	80088b4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008894:	78fb      	ldrb	r3, [r7, #3]
 8008896:	f003 020f 	and.w	r2, r3, #15
 800889a:	4613      	mov	r3, r2
 800889c:	00db      	lsls	r3, r3, #3
 800889e:	4413      	add	r3, r2
 80088a0:	009b      	lsls	r3, r3, #2
 80088a2:	3310      	adds	r3, #16
 80088a4:	687a      	ldr	r2, [r7, #4]
 80088a6:	4413      	add	r3, r2
 80088a8:	3304      	adds	r3, #4
 80088aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	2201      	movs	r2, #1
 80088b0:	705a      	strb	r2, [r3, #1]
 80088b2:	e00f      	b.n	80088d4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088b4:	78fb      	ldrb	r3, [r7, #3]
 80088b6:	f003 020f 	and.w	r2, r3, #15
 80088ba:	4613      	mov	r3, r2
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	4413      	add	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	4413      	add	r3, r2
 80088ca:	3304      	adds	r3, #4
 80088cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80088e0:	883b      	ldrh	r3, [r7, #0]
 80088e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	78ba      	ldrb	r2, [r7, #2]
 80088ee:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	785b      	ldrb	r3, [r3, #1]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d004      	beq.n	8008902 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	781b      	ldrb	r3, [r3, #0]
 80088fc:	461a      	mov	r2, r3
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008902:	78bb      	ldrb	r3, [r7, #2]
 8008904:	2b02      	cmp	r3, #2
 8008906:	d102      	bne.n	800890e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2200      	movs	r2, #0
 800890c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008914:	2b01      	cmp	r3, #1
 8008916:	d101      	bne.n	800891c <HAL_PCD_EP_Open+0xae>
 8008918:	2302      	movs	r3, #2
 800891a:	e00e      	b.n	800893a <HAL_PCD_EP_Open+0xcc>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2201      	movs	r2, #1
 8008920:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	68f9      	ldr	r1, [r7, #12]
 800892a:	4618      	mov	r0, r3
 800892c:	f002 fb52 	bl	800afd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2200      	movs	r2, #0
 8008934:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8008938:	7afb      	ldrb	r3, [r7, #11]
}
 800893a:	4618      	mov	r0, r3
 800893c:	3710      	adds	r7, #16
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008942:	b580      	push	{r7, lr}
 8008944:	b084      	sub	sp, #16
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	460b      	mov	r3, r1
 800894c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800894e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008952:	2b00      	cmp	r3, #0
 8008954:	da0f      	bge.n	8008976 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008956:	78fb      	ldrb	r3, [r7, #3]
 8008958:	f003 020f 	and.w	r2, r3, #15
 800895c:	4613      	mov	r3, r2
 800895e:	00db      	lsls	r3, r3, #3
 8008960:	4413      	add	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	3310      	adds	r3, #16
 8008966:	687a      	ldr	r2, [r7, #4]
 8008968:	4413      	add	r3, r2
 800896a:	3304      	adds	r3, #4
 800896c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2201      	movs	r2, #1
 8008972:	705a      	strb	r2, [r3, #1]
 8008974:	e00f      	b.n	8008996 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008976:	78fb      	ldrb	r3, [r7, #3]
 8008978:	f003 020f 	and.w	r2, r3, #15
 800897c:	4613      	mov	r3, r2
 800897e:	00db      	lsls	r3, r3, #3
 8008980:	4413      	add	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	4413      	add	r3, r2
 800898c:	3304      	adds	r3, #4
 800898e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2200      	movs	r2, #0
 8008994:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8008996:	78fb      	ldrb	r3, [r7, #3]
 8008998:	f003 030f 	and.w	r3, r3, #15
 800899c:	b2da      	uxtb	r2, r3
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d101      	bne.n	80089b0 <HAL_PCD_EP_Close+0x6e>
 80089ac:	2302      	movs	r3, #2
 80089ae:	e00e      	b.n	80089ce <HAL_PCD_EP_Close+0x8c>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68f9      	ldr	r1, [r7, #12]
 80089be:	4618      	mov	r0, r3
 80089c0:	f002 fb90 	bl	800b0e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2200      	movs	r2, #0
 80089c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80089cc:	2300      	movs	r3, #0
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3710      	adds	r7, #16
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b086      	sub	sp, #24
 80089da:	af00      	add	r7, sp, #0
 80089dc:	60f8      	str	r0, [r7, #12]
 80089de:	607a      	str	r2, [r7, #4]
 80089e0:	603b      	str	r3, [r7, #0]
 80089e2:	460b      	mov	r3, r1
 80089e4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089e6:	7afb      	ldrb	r3, [r7, #11]
 80089e8:	f003 020f 	and.w	r2, r3, #15
 80089ec:	4613      	mov	r3, r2
 80089ee:	00db      	lsls	r3, r3, #3
 80089f0:	4413      	add	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80089f8:	68fa      	ldr	r2, [r7, #12]
 80089fa:	4413      	add	r3, r2
 80089fc:	3304      	adds	r3, #4
 80089fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a00:	697b      	ldr	r3, [r7, #20]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	683a      	ldr	r2, [r7, #0]
 8008a0a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	2200      	movs	r2, #0
 8008a10:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	2200      	movs	r2, #0
 8008a16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a18:	7afb      	ldrb	r3, [r7, #11]
 8008a1a:	f003 030f 	and.w	r3, r3, #15
 8008a1e:	b2da      	uxtb	r2, r3
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	799b      	ldrb	r3, [r3, #6]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d102      	bne.n	8008a32 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	799b      	ldrb	r3, [r3, #6]
 8008a3a:	461a      	mov	r2, r3
 8008a3c:	6979      	ldr	r1, [r7, #20]
 8008a3e:	f002 fc2d 	bl	800b29c <USB_EPStartXfer>

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3718      	adds	r7, #24
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008a58:	78fb      	ldrb	r3, [r7, #3]
 8008a5a:	f003 020f 	and.w	r2, r3, #15
 8008a5e:	6879      	ldr	r1, [r7, #4]
 8008a60:	4613      	mov	r3, r2
 8008a62:	00db      	lsls	r3, r3, #3
 8008a64:	4413      	add	r3, r2
 8008a66:	009b      	lsls	r3, r3, #2
 8008a68:	440b      	add	r3, r1
 8008a6a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8008a6e:	681b      	ldr	r3, [r3, #0]
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	370c      	adds	r7, #12
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b086      	sub	sp, #24
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	60f8      	str	r0, [r7, #12]
 8008a84:	607a      	str	r2, [r7, #4]
 8008a86:	603b      	str	r3, [r7, #0]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a8c:	7afb      	ldrb	r3, [r7, #11]
 8008a8e:	f003 020f 	and.w	r2, r3, #15
 8008a92:	4613      	mov	r3, r2
 8008a94:	00db      	lsls	r3, r3, #3
 8008a96:	4413      	add	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	3310      	adds	r3, #16
 8008a9c:	68fa      	ldr	r2, [r7, #12]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008aa4:	697b      	ldr	r3, [r7, #20]
 8008aa6:	687a      	ldr	r2, [r7, #4]
 8008aa8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008aaa:	697b      	ldr	r3, [r7, #20]
 8008aac:	683a      	ldr	r2, [r7, #0]
 8008aae:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008abc:	7afb      	ldrb	r3, [r7, #11]
 8008abe:	f003 030f 	and.w	r3, r3, #15
 8008ac2:	b2da      	uxtb	r2, r3
 8008ac4:	697b      	ldr	r3, [r7, #20]
 8008ac6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	799b      	ldrb	r3, [r3, #6]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d102      	bne.n	8008ad6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	6818      	ldr	r0, [r3, #0]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	799b      	ldrb	r3, [r3, #6]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	6979      	ldr	r1, [r7, #20]
 8008ae2:	f002 fbdb 	bl	800b29c <USB_EPStartXfer>

  return HAL_OK;
 8008ae6:	2300      	movs	r3, #0
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	3718      	adds	r7, #24
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	460b      	mov	r3, r1
 8008afa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008afc:	78fb      	ldrb	r3, [r7, #3]
 8008afe:	f003 030f 	and.w	r3, r3, #15
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	7912      	ldrb	r2, [r2, #4]
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d901      	bls.n	8008b0e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e04f      	b.n	8008bae <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	da0f      	bge.n	8008b36 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b16:	78fb      	ldrb	r3, [r7, #3]
 8008b18:	f003 020f 	and.w	r2, r3, #15
 8008b1c:	4613      	mov	r3, r2
 8008b1e:	00db      	lsls	r3, r3, #3
 8008b20:	4413      	add	r3, r2
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	3310      	adds	r3, #16
 8008b26:	687a      	ldr	r2, [r7, #4]
 8008b28:	4413      	add	r3, r2
 8008b2a:	3304      	adds	r3, #4
 8008b2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2201      	movs	r2, #1
 8008b32:	705a      	strb	r2, [r3, #1]
 8008b34:	e00d      	b.n	8008b52 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008b36:	78fa      	ldrb	r2, [r7, #3]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008b44:	687a      	ldr	r2, [r7, #4]
 8008b46:	4413      	add	r3, r2
 8008b48:	3304      	adds	r3, #4
 8008b4a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	2200      	movs	r2, #0
 8008b50:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2201      	movs	r2, #1
 8008b56:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b58:	78fb      	ldrb	r3, [r7, #3]
 8008b5a:	f003 030f 	and.w	r3, r3, #15
 8008b5e:	b2da      	uxtb	r2, r3
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008b6a:	2b01      	cmp	r3, #1
 8008b6c:	d101      	bne.n	8008b72 <HAL_PCD_EP_SetStall+0x82>
 8008b6e:	2302      	movs	r3, #2
 8008b70:	e01d      	b.n	8008bae <HAL_PCD_EP_SetStall+0xbe>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	2201      	movs	r2, #1
 8008b76:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68f9      	ldr	r1, [r7, #12]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f002 ff69 	bl	800ba58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008b86:	78fb      	ldrb	r3, [r7, #3]
 8008b88:	f003 030f 	and.w	r3, r3, #15
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d109      	bne.n	8008ba4 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6818      	ldr	r0, [r3, #0]
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	7999      	ldrb	r1, [r3, #6]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	f003 f95a 	bl	800be58 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008bac:	2300      	movs	r3, #0
}
 8008bae:	4618      	mov	r0, r3
 8008bb0:	3710      	adds	r7, #16
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bb6:	b580      	push	{r7, lr}
 8008bb8:	b084      	sub	sp, #16
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
 8008bbe:	460b      	mov	r3, r1
 8008bc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008bc2:	78fb      	ldrb	r3, [r7, #3]
 8008bc4:	f003 030f 	and.w	r3, r3, #15
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	7912      	ldrb	r2, [r2, #4]
 8008bcc:	4293      	cmp	r3, r2
 8008bce:	d901      	bls.n	8008bd4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e042      	b.n	8008c5a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008bd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	da0f      	bge.n	8008bfc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008bdc:	78fb      	ldrb	r3, [r7, #3]
 8008bde:	f003 020f 	and.w	r2, r3, #15
 8008be2:	4613      	mov	r3, r2
 8008be4:	00db      	lsls	r3, r3, #3
 8008be6:	4413      	add	r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	3310      	adds	r3, #16
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	4413      	add	r3, r2
 8008bf0:	3304      	adds	r3, #4
 8008bf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	705a      	strb	r2, [r3, #1]
 8008bfa:	e00f      	b.n	8008c1c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008bfc:	78fb      	ldrb	r3, [r7, #3]
 8008bfe:	f003 020f 	and.w	r2, r3, #15
 8008c02:	4613      	mov	r3, r2
 8008c04:	00db      	lsls	r3, r3, #3
 8008c06:	4413      	add	r3, r2
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	4413      	add	r3, r2
 8008c12:	3304      	adds	r3, #4
 8008c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c22:	78fb      	ldrb	r3, [r7, #3]
 8008c24:	f003 030f 	and.w	r3, r3, #15
 8008c28:	b2da      	uxtb	r2, r3
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8008c34:	2b01      	cmp	r3, #1
 8008c36:	d101      	bne.n	8008c3c <HAL_PCD_EP_ClrStall+0x86>
 8008c38:	2302      	movs	r3, #2
 8008c3a:	e00e      	b.n	8008c5a <HAL_PCD_EP_ClrStall+0xa4>
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	2201      	movs	r2, #1
 8008c40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68f9      	ldr	r1, [r7, #12]
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f002 ff72 	bl	800bb34 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8008c58:	2300      	movs	r3, #0
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3710      	adds	r7, #16
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}

08008c62 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c62:	b580      	push	{r7, lr}
 8008c64:	b084      	sub	sp, #16
 8008c66:	af00      	add	r7, sp, #0
 8008c68:	6078      	str	r0, [r7, #4]
 8008c6a:	460b      	mov	r3, r1
 8008c6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8008c6e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	da0c      	bge.n	8008c90 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c76:	78fb      	ldrb	r3, [r7, #3]
 8008c78:	f003 020f 	and.w	r2, r3, #15
 8008c7c:	4613      	mov	r3, r2
 8008c7e:	00db      	lsls	r3, r3, #3
 8008c80:	4413      	add	r3, r2
 8008c82:	009b      	lsls	r3, r3, #2
 8008c84:	3310      	adds	r3, #16
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	4413      	add	r3, r2
 8008c8a:	3304      	adds	r3, #4
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	e00c      	b.n	8008caa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	f003 020f 	and.w	r2, r3, #15
 8008c96:	4613      	mov	r3, r2
 8008c98:	00db      	lsls	r3, r3, #3
 8008c9a:	4413      	add	r3, r2
 8008c9c:	009b      	lsls	r3, r3, #2
 8008c9e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	4413      	add	r3, r2
 8008ca6:	3304      	adds	r3, #4
 8008ca8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68f9      	ldr	r1, [r7, #12]
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f002 fd91 	bl	800b7d8 <USB_EPStopXfer>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	72fb      	strb	r3, [r7, #11]

  return ret;
 8008cba:	7afb      	ldrb	r3, [r7, #11]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b08a      	sub	sp, #40	@ 0x28
 8008cc8:	af02      	add	r7, sp, #8
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	4613      	mov	r3, r2
 8008cdc:	00db      	lsls	r3, r3, #3
 8008cde:	4413      	add	r3, r2
 8008ce0:	009b      	lsls	r3, r3, #2
 8008ce2:	3310      	adds	r3, #16
 8008ce4:	687a      	ldr	r2, [r7, #4]
 8008ce6:	4413      	add	r3, r2
 8008ce8:	3304      	adds	r3, #4
 8008cea:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	695a      	ldr	r2, [r3, #20]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	691b      	ldr	r3, [r3, #16]
 8008cf4:	429a      	cmp	r2, r3
 8008cf6:	d901      	bls.n	8008cfc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	e06b      	b.n	8008dd4 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	691a      	ldr	r2, [r3, #16]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	1ad3      	subs	r3, r2, r3
 8008d06:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	69fa      	ldr	r2, [r7, #28]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d902      	bls.n	8008d18 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008d18:	69fb      	ldr	r3, [r7, #28]
 8008d1a:	3303      	adds	r3, #3
 8008d1c:	089b      	lsrs	r3, r3, #2
 8008d1e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d20:	e02a      	b.n	8008d78 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	691a      	ldr	r2, [r3, #16]
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	695b      	ldr	r3, [r3, #20]
 8008d2a:	1ad3      	subs	r3, r2, r3
 8008d2c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	689b      	ldr	r3, [r3, #8]
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d902      	bls.n	8008d3e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008d3e:	69fb      	ldr	r3, [r7, #28]
 8008d40:	3303      	adds	r3, #3
 8008d42:	089b      	lsrs	r3, r3, #2
 8008d44:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	68d9      	ldr	r1, [r3, #12]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	69fb      	ldr	r3, [r7, #28]
 8008d50:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d56:	9300      	str	r3, [sp, #0]
 8008d58:	4603      	mov	r3, r0
 8008d5a:	6978      	ldr	r0, [r7, #20]
 8008d5c:	f002 fde6 	bl	800b92c <USB_WritePacket>

    ep->xfer_buff  += len;
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	68da      	ldr	r2, [r3, #12]
 8008d64:	69fb      	ldr	r3, [r7, #28]
 8008d66:	441a      	add	r2, r3
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	695a      	ldr	r2, [r3, #20]
 8008d70:	69fb      	ldr	r3, [r7, #28]
 8008d72:	441a      	add	r2, r3
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d78:	683b      	ldr	r3, [r7, #0]
 8008d7a:	015a      	lsls	r2, r3, #5
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	4413      	add	r3, r2
 8008d80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d88:	69ba      	ldr	r2, [r7, #24]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d809      	bhi.n	8008da2 <PCD_WriteEmptyTxFifo+0xde>
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	695a      	ldr	r2, [r3, #20]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d203      	bcs.n	8008da2 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	691b      	ldr	r3, [r3, #16]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d1bf      	bne.n	8008d22 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	691a      	ldr	r2, [r3, #16]
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	695b      	ldr	r3, [r3, #20]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d811      	bhi.n	8008dd2 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	f003 030f 	and.w	r3, r3, #15
 8008db4:	2201      	movs	r2, #1
 8008db6:	fa02 f303 	lsl.w	r3, r2, r3
 8008dba:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	43db      	mvns	r3, r3
 8008dc8:	6939      	ldr	r1, [r7, #16]
 8008dca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008dce:	4013      	ands	r3, r2
 8008dd0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8008dd2:	2300      	movs	r3, #0
}
 8008dd4:	4618      	mov	r0, r3
 8008dd6:	3720      	adds	r7, #32
 8008dd8:	46bd      	mov	sp, r7
 8008dda:	bd80      	pop	{r7, pc}

08008ddc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b088      	sub	sp, #32
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dec:	69fb      	ldr	r3, [r7, #28]
 8008dee:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008df0:	69fb      	ldr	r3, [r7, #28]
 8008df2:	333c      	adds	r3, #60	@ 0x3c
 8008df4:	3304      	adds	r3, #4
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	69bb      	ldr	r3, [r7, #24]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e06:	689b      	ldr	r3, [r3, #8]
 8008e08:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	799b      	ldrb	r3, [r3, #6]
 8008e0e:	2b01      	cmp	r3, #1
 8008e10:	d17b      	bne.n	8008f0a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f003 0308 	and.w	r3, r3, #8
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d015      	beq.n	8008e48 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	4a61      	ldr	r2, [pc, #388]	@ (8008fa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	f240 80b9 	bls.w	8008f98 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 80b3 	beq.w	8008f98 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e32:	683b      	ldr	r3, [r7, #0]
 8008e34:	015a      	lsls	r2, r3, #5
 8008e36:	69bb      	ldr	r3, [r7, #24]
 8008e38:	4413      	add	r3, r2
 8008e3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e3e:	461a      	mov	r2, r3
 8008e40:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e44:	6093      	str	r3, [r2, #8]
 8008e46:	e0a7      	b.n	8008f98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	f003 0320 	and.w	r3, r3, #32
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d009      	beq.n	8008e66 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	69bb      	ldr	r3, [r7, #24]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e5e:	461a      	mov	r2, r3
 8008e60:	2320      	movs	r3, #32
 8008e62:	6093      	str	r3, [r2, #8]
 8008e64:	e098      	b.n	8008f98 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f040 8093 	bne.w	8008f98 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e72:	697b      	ldr	r3, [r7, #20]
 8008e74:	4a4b      	ldr	r2, [pc, #300]	@ (8008fa4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d90f      	bls.n	8008e9a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d00a      	beq.n	8008e9a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e84:	683b      	ldr	r3, [r7, #0]
 8008e86:	015a      	lsls	r2, r3, #5
 8008e88:	69bb      	ldr	r3, [r7, #24]
 8008e8a:	4413      	add	r3, r2
 8008e8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008e90:	461a      	mov	r2, r3
 8008e92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008e96:	6093      	str	r3, [r2, #8]
 8008e98:	e07e      	b.n	8008f98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	4613      	mov	r3, r2
 8008e9e:	00db      	lsls	r3, r3, #3
 8008ea0:	4413      	add	r3, r2
 8008ea2:	009b      	lsls	r3, r3, #2
 8008ea4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8008ea8:	687a      	ldr	r2, [r7, #4]
 8008eaa:	4413      	add	r3, r2
 8008eac:	3304      	adds	r3, #4
 8008eae:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	6a1a      	ldr	r2, [r3, #32]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	0159      	lsls	r1, r3, #5
 8008eb8:	69bb      	ldr	r3, [r7, #24]
 8008eba:	440b      	add	r3, r1
 8008ebc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ec6:	1ad2      	subs	r2, r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d114      	bne.n	8008efc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	691b      	ldr	r3, [r3, #16]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d109      	bne.n	8008eee <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6818      	ldr	r0, [r3, #0]
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	2101      	movs	r1, #1
 8008ee8:	f002 ffb6 	bl	800be58 <USB_EP0_OutStart>
 8008eec:	e006      	b.n	8008efc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	441a      	add	r2, r3
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f005 fb06 	bl	800e514 <HAL_PCD_DataOutStageCallback>
 8008f08:	e046      	b.n	8008f98 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	4a26      	ldr	r2, [pc, #152]	@ (8008fa8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d124      	bne.n	8008f5c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008f12:	693b      	ldr	r3, [r7, #16]
 8008f14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d00a      	beq.n	8008f32 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	69bb      	ldr	r3, [r7, #24]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f28:	461a      	mov	r2, r3
 8008f2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f2e:	6093      	str	r3, [r2, #8]
 8008f30:	e032      	b.n	8008f98 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	f003 0320 	and.w	r3, r3, #32
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d008      	beq.n	8008f4e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f3c:	683b      	ldr	r3, [r7, #0]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	69bb      	ldr	r3, [r7, #24]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f48:	461a      	mov	r2, r3
 8008f4a:	2320      	movs	r3, #32
 8008f4c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	b2db      	uxtb	r3, r3
 8008f52:	4619      	mov	r1, r3
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f005 fadd 	bl	800e514 <HAL_PCD_DataOutStageCallback>
 8008f5a:	e01d      	b.n	8008f98 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d114      	bne.n	8008f8c <PCD_EP_OutXfrComplete_int+0x1b0>
 8008f62:	6879      	ldr	r1, [r7, #4]
 8008f64:	683a      	ldr	r2, [r7, #0]
 8008f66:	4613      	mov	r3, r2
 8008f68:	00db      	lsls	r3, r3, #3
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	440b      	add	r3, r1
 8008f70:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d108      	bne.n	8008f8c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6818      	ldr	r0, [r3, #0]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8008f84:	461a      	mov	r2, r3
 8008f86:	2100      	movs	r1, #0
 8008f88:	f002 ff66 	bl	800be58 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	b2db      	uxtb	r3, r3
 8008f90:	4619      	mov	r1, r3
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f005 fabe 	bl	800e514 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	3720      	adds	r7, #32
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bd80      	pop	{r7, pc}
 8008fa2:	bf00      	nop
 8008fa4:	4f54300a 	.word	0x4f54300a
 8008fa8:	4f54310a 	.word	0x4f54310a

08008fac <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b086      	sub	sp, #24
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fbc:	697b      	ldr	r3, [r7, #20]
 8008fbe:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008fc0:	697b      	ldr	r3, [r7, #20]
 8008fc2:	333c      	adds	r3, #60	@ 0x3c
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	4a15      	ldr	r2, [pc, #84]	@ (8009034 <PCD_EP_OutSetupPacket_int+0x88>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d90e      	bls.n	8009000 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d009      	beq.n	8009000 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008ffe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009000:	6878      	ldr	r0, [r7, #4]
 8009002:	f005 fa75 	bl	800e4f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4a0a      	ldr	r2, [pc, #40]	@ (8009034 <PCD_EP_OutSetupPacket_int+0x88>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d90c      	bls.n	8009028 <PCD_EP_OutSetupPacket_int+0x7c>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	799b      	ldrb	r3, [r3, #6]
 8009012:	2b01      	cmp	r3, #1
 8009014:	d108      	bne.n	8009028 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6818      	ldr	r0, [r3, #0]
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009020:	461a      	mov	r2, r3
 8009022:	2101      	movs	r1, #1
 8009024:	f002 ff18 	bl	800be58 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3718      	adds	r7, #24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	4f54300a 	.word	0x4f54300a

08009038 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009038:	b480      	push	{r7}
 800903a:	b085      	sub	sp, #20
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	70fb      	strb	r3, [r7, #3]
 8009044:	4613      	mov	r3, r2
 8009046:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800904e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009050:	78fb      	ldrb	r3, [r7, #3]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d107      	bne.n	8009066 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009056:	883b      	ldrh	r3, [r7, #0]
 8009058:	0419      	lsls	r1, r3, #16
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	68ba      	ldr	r2, [r7, #8]
 8009060:	430a      	orrs	r2, r1
 8009062:	629a      	str	r2, [r3, #40]	@ 0x28
 8009064:	e028      	b.n	80090b8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800906c:	0c1b      	lsrs	r3, r3, #16
 800906e:	68ba      	ldr	r2, [r7, #8]
 8009070:	4413      	add	r3, r2
 8009072:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009074:	2300      	movs	r3, #0
 8009076:	73fb      	strb	r3, [r7, #15]
 8009078:	e00d      	b.n	8009096 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	7bfb      	ldrb	r3, [r7, #15]
 8009080:	3340      	adds	r3, #64	@ 0x40
 8009082:	009b      	lsls	r3, r3, #2
 8009084:	4413      	add	r3, r2
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	0c1b      	lsrs	r3, r3, #16
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	4413      	add	r3, r2
 800908e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009090:	7bfb      	ldrb	r3, [r7, #15]
 8009092:	3301      	adds	r3, #1
 8009094:	73fb      	strb	r3, [r7, #15]
 8009096:	7bfa      	ldrb	r2, [r7, #15]
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	3b01      	subs	r3, #1
 800909c:	429a      	cmp	r2, r3
 800909e:	d3ec      	bcc.n	800907a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80090a0:	883b      	ldrh	r3, [r7, #0]
 80090a2:	0418      	lsls	r0, r3, #16
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	6819      	ldr	r1, [r3, #0]
 80090a8:	78fb      	ldrb	r3, [r7, #3]
 80090aa:	3b01      	subs	r3, #1
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	4302      	orrs	r2, r0
 80090b0:	3340      	adds	r3, #64	@ 0x40
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	440b      	add	r3, r1
 80090b6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3714      	adds	r7, #20
 80090be:	46bd      	mov	sp, r7
 80090c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c4:	4770      	bx	lr

080090c6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b083      	sub	sp, #12
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	460b      	mov	r3, r1
 80090d0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	887a      	ldrh	r2, [r7, #2]
 80090d8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80090f4:	bf00      	nop
 80090f6:	370c      	adds	r7, #12
 80090f8:	46bd      	mov	sp, r7
 80090fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fe:	4770      	bx	lr

08009100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b086      	sub	sp, #24
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d101      	bne.n	8009112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	e267      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f003 0301 	and.w	r3, r3, #1
 800911a:	2b00      	cmp	r3, #0
 800911c:	d075      	beq.n	800920a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800911e:	4b88      	ldr	r3, [pc, #544]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009120:	689b      	ldr	r3, [r3, #8]
 8009122:	f003 030c 	and.w	r3, r3, #12
 8009126:	2b04      	cmp	r3, #4
 8009128:	d00c      	beq.n	8009144 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800912a:	4b85      	ldr	r3, [pc, #532]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 800912c:	689b      	ldr	r3, [r3, #8]
 800912e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8009132:	2b08      	cmp	r3, #8
 8009134:	d112      	bne.n	800915c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009136:	4b82      	ldr	r3, [pc, #520]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009138:	685b      	ldr	r3, [r3, #4]
 800913a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800913e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009142:	d10b      	bne.n	800915c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009144:	4b7e      	ldr	r3, [pc, #504]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d05b      	beq.n	8009208 <HAL_RCC_OscConfig+0x108>
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d157      	bne.n	8009208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009158:	2301      	movs	r3, #1
 800915a:	e242      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	685b      	ldr	r3, [r3, #4]
 8009160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009164:	d106      	bne.n	8009174 <HAL_RCC_OscConfig+0x74>
 8009166:	4b76      	ldr	r3, [pc, #472]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	4a75      	ldr	r2, [pc, #468]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 800916c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	e01d      	b.n	80091b0 <HAL_RCC_OscConfig+0xb0>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800917c:	d10c      	bne.n	8009198 <HAL_RCC_OscConfig+0x98>
 800917e:	4b70      	ldr	r3, [pc, #448]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a6f      	ldr	r2, [pc, #444]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009188:	6013      	str	r3, [r2, #0]
 800918a:	4b6d      	ldr	r3, [pc, #436]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4a6c      	ldr	r2, [pc, #432]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009194:	6013      	str	r3, [r2, #0]
 8009196:	e00b      	b.n	80091b0 <HAL_RCC_OscConfig+0xb0>
 8009198:	4b69      	ldr	r3, [pc, #420]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a68      	ldr	r2, [pc, #416]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 800919e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80091a2:	6013      	str	r3, [r2, #0]
 80091a4:	4b66      	ldr	r3, [pc, #408]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	4a65      	ldr	r2, [pc, #404]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 80091aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80091ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	685b      	ldr	r3, [r3, #4]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d013      	beq.n	80091e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091b8:	f7fa faf2 	bl	80037a0 <HAL_GetTick>
 80091bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091be:	e008      	b.n	80091d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091c0:	f7fa faee 	bl	80037a0 <HAL_GetTick>
 80091c4:	4602      	mov	r2, r0
 80091c6:	693b      	ldr	r3, [r7, #16]
 80091c8:	1ad3      	subs	r3, r2, r3
 80091ca:	2b64      	cmp	r3, #100	@ 0x64
 80091cc:	d901      	bls.n	80091d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80091ce:	2303      	movs	r3, #3
 80091d0:	e207      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091d2:	4b5b      	ldr	r3, [pc, #364]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d0f0      	beq.n	80091c0 <HAL_RCC_OscConfig+0xc0>
 80091de:	e014      	b.n	800920a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091e0:	f7fa fade 	bl	80037a0 <HAL_GetTick>
 80091e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091e6:	e008      	b.n	80091fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80091e8:	f7fa fada 	bl	80037a0 <HAL_GetTick>
 80091ec:	4602      	mov	r2, r0
 80091ee:	693b      	ldr	r3, [r7, #16]
 80091f0:	1ad3      	subs	r3, r2, r3
 80091f2:	2b64      	cmp	r3, #100	@ 0x64
 80091f4:	d901      	bls.n	80091fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80091f6:	2303      	movs	r3, #3
 80091f8:	e1f3      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80091fa:	4b51      	ldr	r3, [pc, #324]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1f0      	bne.n	80091e8 <HAL_RCC_OscConfig+0xe8>
 8009206:	e000      	b.n	800920a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f003 0302 	and.w	r3, r3, #2
 8009212:	2b00      	cmp	r3, #0
 8009214:	d063      	beq.n	80092de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8009216:	4b4a      	ldr	r3, [pc, #296]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009218:	689b      	ldr	r3, [r3, #8]
 800921a:	f003 030c 	and.w	r3, r3, #12
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00b      	beq.n	800923a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009222:	4b47      	ldr	r3, [pc, #284]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800922a:	2b08      	cmp	r3, #8
 800922c:	d11c      	bne.n	8009268 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800922e:	4b44      	ldr	r3, [pc, #272]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009236:	2b00      	cmp	r3, #0
 8009238:	d116      	bne.n	8009268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800923a:	4b41      	ldr	r3, [pc, #260]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0302 	and.w	r3, r3, #2
 8009242:	2b00      	cmp	r3, #0
 8009244:	d005      	beq.n	8009252 <HAL_RCC_OscConfig+0x152>
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	68db      	ldr	r3, [r3, #12]
 800924a:	2b01      	cmp	r3, #1
 800924c:	d001      	beq.n	8009252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e1c7      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009252:	4b3b      	ldr	r3, [pc, #236]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	691b      	ldr	r3, [r3, #16]
 800925e:	00db      	lsls	r3, r3, #3
 8009260:	4937      	ldr	r1, [pc, #220]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009262:	4313      	orrs	r3, r2
 8009264:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009266:	e03a      	b.n	80092de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d020      	beq.n	80092b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009270:	4b34      	ldr	r3, [pc, #208]	@ (8009344 <HAL_RCC_OscConfig+0x244>)
 8009272:	2201      	movs	r2, #1
 8009274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009276:	f7fa fa93 	bl	80037a0 <HAL_GetTick>
 800927a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800927c:	e008      	b.n	8009290 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800927e:	f7fa fa8f 	bl	80037a0 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e1a8      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009290:	4b2b      	ldr	r3, [pc, #172]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 0302 	and.w	r3, r3, #2
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0f0      	beq.n	800927e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800929c:	4b28      	ldr	r3, [pc, #160]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	691b      	ldr	r3, [r3, #16]
 80092a8:	00db      	lsls	r3, r3, #3
 80092aa:	4925      	ldr	r1, [pc, #148]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 80092ac:	4313      	orrs	r3, r2
 80092ae:	600b      	str	r3, [r1, #0]
 80092b0:	e015      	b.n	80092de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092b2:	4b24      	ldr	r3, [pc, #144]	@ (8009344 <HAL_RCC_OscConfig+0x244>)
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092b8:	f7fa fa72 	bl	80037a0 <HAL_GetTick>
 80092bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092be:	e008      	b.n	80092d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80092c0:	f7fa fa6e 	bl	80037a0 <HAL_GetTick>
 80092c4:	4602      	mov	r2, r0
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	2b02      	cmp	r3, #2
 80092cc:	d901      	bls.n	80092d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e187      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1f0      	bne.n	80092c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f003 0308 	and.w	r3, r3, #8
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d036      	beq.n	8009358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d016      	beq.n	8009320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80092f2:	4b15      	ldr	r3, [pc, #84]	@ (8009348 <HAL_RCC_OscConfig+0x248>)
 80092f4:	2201      	movs	r2, #1
 80092f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f8:	f7fa fa52 	bl	80037a0 <HAL_GetTick>
 80092fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80092fe:	e008      	b.n	8009312 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009300:	f7fa fa4e 	bl	80037a0 <HAL_GetTick>
 8009304:	4602      	mov	r2, r0
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	1ad3      	subs	r3, r2, r3
 800930a:	2b02      	cmp	r3, #2
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e167      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009312:	4b0b      	ldr	r3, [pc, #44]	@ (8009340 <HAL_RCC_OscConfig+0x240>)
 8009314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0f0      	beq.n	8009300 <HAL_RCC_OscConfig+0x200>
 800931e:	e01b      	b.n	8009358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009320:	4b09      	ldr	r3, [pc, #36]	@ (8009348 <HAL_RCC_OscConfig+0x248>)
 8009322:	2200      	movs	r2, #0
 8009324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009326:	f7fa fa3b 	bl	80037a0 <HAL_GetTick>
 800932a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800932c:	e00e      	b.n	800934c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800932e:	f7fa fa37 	bl	80037a0 <HAL_GetTick>
 8009332:	4602      	mov	r2, r0
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	1ad3      	subs	r3, r2, r3
 8009338:	2b02      	cmp	r3, #2
 800933a:	d907      	bls.n	800934c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800933c:	2303      	movs	r3, #3
 800933e:	e150      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
 8009340:	40023800 	.word	0x40023800
 8009344:	42470000 	.word	0x42470000
 8009348:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800934c:	4b88      	ldr	r3, [pc, #544]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 800934e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	2b00      	cmp	r3, #0
 8009356:	d1ea      	bne.n	800932e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0304 	and.w	r3, r3, #4
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 8097 	beq.w	8009494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009366:	2300      	movs	r3, #0
 8009368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800936a:	4b81      	ldr	r3, [pc, #516]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 800936c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800936e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009372:	2b00      	cmp	r3, #0
 8009374:	d10f      	bne.n	8009396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009376:	2300      	movs	r3, #0
 8009378:	60bb      	str	r3, [r7, #8]
 800937a:	4b7d      	ldr	r3, [pc, #500]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 800937c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800937e:	4a7c      	ldr	r2, [pc, #496]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 8009380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009384:	6413      	str	r3, [r2, #64]	@ 0x40
 8009386:	4b7a      	ldr	r3, [pc, #488]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 8009388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800938a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800938e:	60bb      	str	r3, [r7, #8]
 8009390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009392:	2301      	movs	r3, #1
 8009394:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009396:	4b77      	ldr	r3, [pc, #476]	@ (8009574 <HAL_RCC_OscConfig+0x474>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d118      	bne.n	80093d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093a2:	4b74      	ldr	r3, [pc, #464]	@ (8009574 <HAL_RCC_OscConfig+0x474>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a73      	ldr	r2, [pc, #460]	@ (8009574 <HAL_RCC_OscConfig+0x474>)
 80093a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80093ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093ae:	f7fa f9f7 	bl	80037a0 <HAL_GetTick>
 80093b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093b4:	e008      	b.n	80093c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093b6:	f7fa f9f3 	bl	80037a0 <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	693b      	ldr	r3, [r7, #16]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	2b02      	cmp	r3, #2
 80093c2:	d901      	bls.n	80093c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80093c4:	2303      	movs	r3, #3
 80093c6:	e10c      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093c8:	4b6a      	ldr	r3, [pc, #424]	@ (8009574 <HAL_RCC_OscConfig+0x474>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d0f0      	beq.n	80093b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	689b      	ldr	r3, [r3, #8]
 80093d8:	2b01      	cmp	r3, #1
 80093da:	d106      	bne.n	80093ea <HAL_RCC_OscConfig+0x2ea>
 80093dc:	4b64      	ldr	r3, [pc, #400]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 80093de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093e0:	4a63      	ldr	r2, [pc, #396]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 80093e2:	f043 0301 	orr.w	r3, r3, #1
 80093e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80093e8:	e01c      	b.n	8009424 <HAL_RCC_OscConfig+0x324>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	2b05      	cmp	r3, #5
 80093f0:	d10c      	bne.n	800940c <HAL_RCC_OscConfig+0x30c>
 80093f2:	4b5f      	ldr	r3, [pc, #380]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 80093f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093f6:	4a5e      	ldr	r2, [pc, #376]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 80093f8:	f043 0304 	orr.w	r3, r3, #4
 80093fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80093fe:	4b5c      	ldr	r3, [pc, #368]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 8009400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009402:	4a5b      	ldr	r2, [pc, #364]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 8009404:	f043 0301 	orr.w	r3, r3, #1
 8009408:	6713      	str	r3, [r2, #112]	@ 0x70
 800940a:	e00b      	b.n	8009424 <HAL_RCC_OscConfig+0x324>
 800940c:	4b58      	ldr	r3, [pc, #352]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 800940e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009410:	4a57      	ldr	r2, [pc, #348]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 8009412:	f023 0301 	bic.w	r3, r3, #1
 8009416:	6713      	str	r3, [r2, #112]	@ 0x70
 8009418:	4b55      	ldr	r3, [pc, #340]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 800941a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800941c:	4a54      	ldr	r2, [pc, #336]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 800941e:	f023 0304 	bic.w	r3, r3, #4
 8009422:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d015      	beq.n	8009458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800942c:	f7fa f9b8 	bl	80037a0 <HAL_GetTick>
 8009430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009432:	e00a      	b.n	800944a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009434:	f7fa f9b4 	bl	80037a0 <HAL_GetTick>
 8009438:	4602      	mov	r2, r0
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	1ad3      	subs	r3, r2, r3
 800943e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009442:	4293      	cmp	r3, r2
 8009444:	d901      	bls.n	800944a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8009446:	2303      	movs	r3, #3
 8009448:	e0cb      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800944a:	4b49      	ldr	r3, [pc, #292]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800944e:	f003 0302 	and.w	r3, r3, #2
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0ee      	beq.n	8009434 <HAL_RCC_OscConfig+0x334>
 8009456:	e014      	b.n	8009482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009458:	f7fa f9a2 	bl	80037a0 <HAL_GetTick>
 800945c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800945e:	e00a      	b.n	8009476 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009460:	f7fa f99e 	bl	80037a0 <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800946e:	4293      	cmp	r3, r2
 8009470:	d901      	bls.n	8009476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8009472:	2303      	movs	r3, #3
 8009474:	e0b5      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009476:	4b3e      	ldr	r3, [pc, #248]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 8009478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800947a:	f003 0302 	and.w	r3, r3, #2
 800947e:	2b00      	cmp	r3, #0
 8009480:	d1ee      	bne.n	8009460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009482:	7dfb      	ldrb	r3, [r7, #23]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d105      	bne.n	8009494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009488:	4b39      	ldr	r3, [pc, #228]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 800948a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800948c:	4a38      	ldr	r2, [pc, #224]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 800948e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009492:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	699b      	ldr	r3, [r3, #24]
 8009498:	2b00      	cmp	r3, #0
 800949a:	f000 80a1 	beq.w	80095e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800949e:	4b34      	ldr	r3, [pc, #208]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f003 030c 	and.w	r3, r3, #12
 80094a6:	2b08      	cmp	r3, #8
 80094a8:	d05c      	beq.n	8009564 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	699b      	ldr	r3, [r3, #24]
 80094ae:	2b02      	cmp	r3, #2
 80094b0:	d141      	bne.n	8009536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094b2:	4b31      	ldr	r3, [pc, #196]	@ (8009578 <HAL_RCC_OscConfig+0x478>)
 80094b4:	2200      	movs	r2, #0
 80094b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094b8:	f7fa f972 	bl	80037a0 <HAL_GetTick>
 80094bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094be:	e008      	b.n	80094d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80094c0:	f7fa f96e 	bl	80037a0 <HAL_GetTick>
 80094c4:	4602      	mov	r2, r0
 80094c6:	693b      	ldr	r3, [r7, #16]
 80094c8:	1ad3      	subs	r3, r2, r3
 80094ca:	2b02      	cmp	r3, #2
 80094cc:	d901      	bls.n	80094d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80094ce:	2303      	movs	r3, #3
 80094d0:	e087      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094d2:	4b27      	ldr	r3, [pc, #156]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1f0      	bne.n	80094c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	69da      	ldr	r2, [r3, #28]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a1b      	ldr	r3, [r3, #32]
 80094e6:	431a      	orrs	r2, r3
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094ec:	019b      	lsls	r3, r3, #6
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80094f4:	085b      	lsrs	r3, r3, #1
 80094f6:	3b01      	subs	r3, #1
 80094f8:	041b      	lsls	r3, r3, #16
 80094fa:	431a      	orrs	r2, r3
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009500:	061b      	lsls	r3, r3, #24
 8009502:	491b      	ldr	r1, [pc, #108]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 8009504:	4313      	orrs	r3, r2
 8009506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009508:	4b1b      	ldr	r3, [pc, #108]	@ (8009578 <HAL_RCC_OscConfig+0x478>)
 800950a:	2201      	movs	r2, #1
 800950c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800950e:	f7fa f947 	bl	80037a0 <HAL_GetTick>
 8009512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009514:	e008      	b.n	8009528 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009516:	f7fa f943 	bl	80037a0 <HAL_GetTick>
 800951a:	4602      	mov	r2, r0
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	2b02      	cmp	r3, #2
 8009522:	d901      	bls.n	8009528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009524:	2303      	movs	r3, #3
 8009526:	e05c      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009528:	4b11      	ldr	r3, [pc, #68]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d0f0      	beq.n	8009516 <HAL_RCC_OscConfig+0x416>
 8009534:	e054      	b.n	80095e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009536:	4b10      	ldr	r3, [pc, #64]	@ (8009578 <HAL_RCC_OscConfig+0x478>)
 8009538:	2200      	movs	r2, #0
 800953a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800953c:	f7fa f930 	bl	80037a0 <HAL_GetTick>
 8009540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009542:	e008      	b.n	8009556 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009544:	f7fa f92c 	bl	80037a0 <HAL_GetTick>
 8009548:	4602      	mov	r2, r0
 800954a:	693b      	ldr	r3, [r7, #16]
 800954c:	1ad3      	subs	r3, r2, r3
 800954e:	2b02      	cmp	r3, #2
 8009550:	d901      	bls.n	8009556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009552:	2303      	movs	r3, #3
 8009554:	e045      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009556:	4b06      	ldr	r3, [pc, #24]	@ (8009570 <HAL_RCC_OscConfig+0x470>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d1f0      	bne.n	8009544 <HAL_RCC_OscConfig+0x444>
 8009562:	e03d      	b.n	80095e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	2b01      	cmp	r3, #1
 800956a:	d107      	bne.n	800957c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800956c:	2301      	movs	r3, #1
 800956e:	e038      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
 8009570:	40023800 	.word	0x40023800
 8009574:	40007000 	.word	0x40007000
 8009578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800957c:	4b1b      	ldr	r3, [pc, #108]	@ (80095ec <HAL_RCC_OscConfig+0x4ec>)
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	699b      	ldr	r3, [r3, #24]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d028      	beq.n	80095dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009594:	429a      	cmp	r2, r3
 8009596:	d121      	bne.n	80095dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095a2:	429a      	cmp	r2, r3
 80095a4:	d11a      	bne.n	80095dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095a6:	68fa      	ldr	r2, [r7, #12]
 80095a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80095ac:	4013      	ands	r3, r2
 80095ae:	687a      	ldr	r2, [r7, #4]
 80095b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80095b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d111      	bne.n	80095dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095c2:	085b      	lsrs	r3, r3, #1
 80095c4:	3b01      	subs	r3, #1
 80095c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d107      	bne.n	80095dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095d8:	429a      	cmp	r2, r3
 80095da:	d001      	beq.n	80095e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	e000      	b.n	80095e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3718      	adds	r7, #24
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	40023800 	.word	0x40023800

080095f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d101      	bne.n	8009604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009600:	2301      	movs	r3, #1
 8009602:	e0cc      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009604:	4b68      	ldr	r3, [pc, #416]	@ (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f003 0307 	and.w	r3, r3, #7
 800960c:	683a      	ldr	r2, [r7, #0]
 800960e:	429a      	cmp	r2, r3
 8009610:	d90c      	bls.n	800962c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009612:	4b65      	ldr	r3, [pc, #404]	@ (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009614:	683a      	ldr	r2, [r7, #0]
 8009616:	b2d2      	uxtb	r2, r2
 8009618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800961a:	4b63      	ldr	r3, [pc, #396]	@ (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f003 0307 	and.w	r3, r3, #7
 8009622:	683a      	ldr	r2, [r7, #0]
 8009624:	429a      	cmp	r2, r3
 8009626:	d001      	beq.n	800962c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009628:	2301      	movs	r3, #1
 800962a:	e0b8      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d020      	beq.n	800967a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d005      	beq.n	8009650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009644:	4b59      	ldr	r3, [pc, #356]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	4a58      	ldr	r2, [pc, #352]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 800964a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800964e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	f003 0308 	and.w	r3, r3, #8
 8009658:	2b00      	cmp	r3, #0
 800965a:	d005      	beq.n	8009668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800965c:	4b53      	ldr	r3, [pc, #332]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 800965e:	689b      	ldr	r3, [r3, #8]
 8009660:	4a52      	ldr	r2, [pc, #328]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8009666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009668:	4b50      	ldr	r3, [pc, #320]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	494d      	ldr	r1, [pc, #308]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009676:	4313      	orrs	r3, r2
 8009678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f003 0301 	and.w	r3, r3, #1
 8009682:	2b00      	cmp	r3, #0
 8009684:	d044      	beq.n	8009710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	2b01      	cmp	r3, #1
 800968c:	d107      	bne.n	800969e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800968e:	4b47      	ldr	r3, [pc, #284]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009696:	2b00      	cmp	r3, #0
 8009698:	d119      	bne.n	80096ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	e07f      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d003      	beq.n	80096ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096aa:	2b03      	cmp	r3, #3
 80096ac:	d107      	bne.n	80096be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096ae:	4b3f      	ldr	r3, [pc, #252]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	d109      	bne.n	80096ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096ba:	2301      	movs	r3, #1
 80096bc:	e06f      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096be:	4b3b      	ldr	r3, [pc, #236]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d101      	bne.n	80096ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096ca:	2301      	movs	r3, #1
 80096cc:	e067      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096ce:	4b37      	ldr	r3, [pc, #220]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 80096d0:	689b      	ldr	r3, [r3, #8]
 80096d2:	f023 0203 	bic.w	r2, r3, #3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	685b      	ldr	r3, [r3, #4]
 80096da:	4934      	ldr	r1, [pc, #208]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 80096dc:	4313      	orrs	r3, r2
 80096de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80096e0:	f7fa f85e 	bl	80037a0 <HAL_GetTick>
 80096e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096e6:	e00a      	b.n	80096fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80096e8:	f7fa f85a 	bl	80037a0 <HAL_GetTick>
 80096ec:	4602      	mov	r2, r0
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	1ad3      	subs	r3, r2, r3
 80096f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d901      	bls.n	80096fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096fa:	2303      	movs	r3, #3
 80096fc:	e04f      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80096fe:	4b2b      	ldr	r3, [pc, #172]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009700:	689b      	ldr	r3, [r3, #8]
 8009702:	f003 020c 	and.w	r2, r3, #12
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	429a      	cmp	r2, r3
 800970e:	d1eb      	bne.n	80096e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009710:	4b25      	ldr	r3, [pc, #148]	@ (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0307 	and.w	r3, r3, #7
 8009718:	683a      	ldr	r2, [r7, #0]
 800971a:	429a      	cmp	r2, r3
 800971c:	d20c      	bcs.n	8009738 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800971e:	4b22      	ldr	r3, [pc, #136]	@ (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009720:	683a      	ldr	r2, [r7, #0]
 8009722:	b2d2      	uxtb	r2, r2
 8009724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009726:	4b20      	ldr	r3, [pc, #128]	@ (80097a8 <HAL_RCC_ClockConfig+0x1b8>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f003 0307 	and.w	r3, r3, #7
 800972e:	683a      	ldr	r2, [r7, #0]
 8009730:	429a      	cmp	r2, r3
 8009732:	d001      	beq.n	8009738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009734:	2301      	movs	r3, #1
 8009736:	e032      	b.n	800979e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f003 0304 	and.w	r3, r3, #4
 8009740:	2b00      	cmp	r3, #0
 8009742:	d008      	beq.n	8009756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009744:	4b19      	ldr	r3, [pc, #100]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009746:	689b      	ldr	r3, [r3, #8]
 8009748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	68db      	ldr	r3, [r3, #12]
 8009750:	4916      	ldr	r1, [pc, #88]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009752:	4313      	orrs	r3, r2
 8009754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f003 0308 	and.w	r3, r3, #8
 800975e:	2b00      	cmp	r3, #0
 8009760:	d009      	beq.n	8009776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009762:	4b12      	ldr	r3, [pc, #72]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	691b      	ldr	r3, [r3, #16]
 800976e:	00db      	lsls	r3, r3, #3
 8009770:	490e      	ldr	r1, [pc, #56]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 8009772:	4313      	orrs	r3, r2
 8009774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009776:	f000 f821 	bl	80097bc <HAL_RCC_GetSysClockFreq>
 800977a:	4602      	mov	r2, r0
 800977c:	4b0b      	ldr	r3, [pc, #44]	@ (80097ac <HAL_RCC_ClockConfig+0x1bc>)
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	091b      	lsrs	r3, r3, #4
 8009782:	f003 030f 	and.w	r3, r3, #15
 8009786:	490a      	ldr	r1, [pc, #40]	@ (80097b0 <HAL_RCC_ClockConfig+0x1c0>)
 8009788:	5ccb      	ldrb	r3, [r1, r3]
 800978a:	fa22 f303 	lsr.w	r3, r2, r3
 800978e:	4a09      	ldr	r2, [pc, #36]	@ (80097b4 <HAL_RCC_ClockConfig+0x1c4>)
 8009790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009792:	4b09      	ldr	r3, [pc, #36]	@ (80097b8 <HAL_RCC_ClockConfig+0x1c8>)
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	4618      	mov	r0, r3
 8009798:	f7f9 ffbe 	bl	8003718 <HAL_InitTick>

  return HAL_OK;
 800979c:	2300      	movs	r3, #0
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	40023c00 	.word	0x40023c00
 80097ac:	40023800 	.word	0x40023800
 80097b0:	08010920 	.word	0x08010920
 80097b4:	20000030 	.word	0x20000030
 80097b8:	20000034 	.word	0x20000034

080097bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80097c0:	b090      	sub	sp, #64	@ 0x40
 80097c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80097c4:	2300      	movs	r3, #0
 80097c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80097c8:	2300      	movs	r3, #0
 80097ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80097d0:	2300      	movs	r3, #0
 80097d2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80097d4:	4b59      	ldr	r3, [pc, #356]	@ (800993c <HAL_RCC_GetSysClockFreq+0x180>)
 80097d6:	689b      	ldr	r3, [r3, #8]
 80097d8:	f003 030c 	and.w	r3, r3, #12
 80097dc:	2b08      	cmp	r3, #8
 80097de:	d00d      	beq.n	80097fc <HAL_RCC_GetSysClockFreq+0x40>
 80097e0:	2b08      	cmp	r3, #8
 80097e2:	f200 80a1 	bhi.w	8009928 <HAL_RCC_GetSysClockFreq+0x16c>
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <HAL_RCC_GetSysClockFreq+0x34>
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d003      	beq.n	80097f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80097ee:	e09b      	b.n	8009928 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80097f0:	4b53      	ldr	r3, [pc, #332]	@ (8009940 <HAL_RCC_GetSysClockFreq+0x184>)
 80097f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80097f4:	e09b      	b.n	800992e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80097f6:	4b53      	ldr	r3, [pc, #332]	@ (8009944 <HAL_RCC_GetSysClockFreq+0x188>)
 80097f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80097fa:	e098      	b.n	800992e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80097fc:	4b4f      	ldr	r3, [pc, #316]	@ (800993c <HAL_RCC_GetSysClockFreq+0x180>)
 80097fe:	685b      	ldr	r3, [r3, #4]
 8009800:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009804:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009806:	4b4d      	ldr	r3, [pc, #308]	@ (800993c <HAL_RCC_GetSysClockFreq+0x180>)
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800980e:	2b00      	cmp	r3, #0
 8009810:	d028      	beq.n	8009864 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009812:	4b4a      	ldr	r3, [pc, #296]	@ (800993c <HAL_RCC_GetSysClockFreq+0x180>)
 8009814:	685b      	ldr	r3, [r3, #4]
 8009816:	099b      	lsrs	r3, r3, #6
 8009818:	2200      	movs	r2, #0
 800981a:	623b      	str	r3, [r7, #32]
 800981c:	627a      	str	r2, [r7, #36]	@ 0x24
 800981e:	6a3b      	ldr	r3, [r7, #32]
 8009820:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8009824:	2100      	movs	r1, #0
 8009826:	4b47      	ldr	r3, [pc, #284]	@ (8009944 <HAL_RCC_GetSysClockFreq+0x188>)
 8009828:	fb03 f201 	mul.w	r2, r3, r1
 800982c:	2300      	movs	r3, #0
 800982e:	fb00 f303 	mul.w	r3, r0, r3
 8009832:	4413      	add	r3, r2
 8009834:	4a43      	ldr	r2, [pc, #268]	@ (8009944 <HAL_RCC_GetSysClockFreq+0x188>)
 8009836:	fba0 1202 	umull	r1, r2, r0, r2
 800983a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800983c:	460a      	mov	r2, r1
 800983e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8009840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009842:	4413      	add	r3, r2
 8009844:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009848:	2200      	movs	r2, #0
 800984a:	61bb      	str	r3, [r7, #24]
 800984c:	61fa      	str	r2, [r7, #28]
 800984e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009852:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8009856:	f7f7 f821 	bl	800089c <__aeabi_uldivmod>
 800985a:	4602      	mov	r2, r0
 800985c:	460b      	mov	r3, r1
 800985e:	4613      	mov	r3, r2
 8009860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009862:	e053      	b.n	800990c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009864:	4b35      	ldr	r3, [pc, #212]	@ (800993c <HAL_RCC_GetSysClockFreq+0x180>)
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	099b      	lsrs	r3, r3, #6
 800986a:	2200      	movs	r2, #0
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	617a      	str	r2, [r7, #20]
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8009876:	f04f 0b00 	mov.w	fp, #0
 800987a:	4652      	mov	r2, sl
 800987c:	465b      	mov	r3, fp
 800987e:	f04f 0000 	mov.w	r0, #0
 8009882:	f04f 0100 	mov.w	r1, #0
 8009886:	0159      	lsls	r1, r3, #5
 8009888:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800988c:	0150      	lsls	r0, r2, #5
 800988e:	4602      	mov	r2, r0
 8009890:	460b      	mov	r3, r1
 8009892:	ebb2 080a 	subs.w	r8, r2, sl
 8009896:	eb63 090b 	sbc.w	r9, r3, fp
 800989a:	f04f 0200 	mov.w	r2, #0
 800989e:	f04f 0300 	mov.w	r3, #0
 80098a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80098a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80098aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80098ae:	ebb2 0408 	subs.w	r4, r2, r8
 80098b2:	eb63 0509 	sbc.w	r5, r3, r9
 80098b6:	f04f 0200 	mov.w	r2, #0
 80098ba:	f04f 0300 	mov.w	r3, #0
 80098be:	00eb      	lsls	r3, r5, #3
 80098c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098c4:	00e2      	lsls	r2, r4, #3
 80098c6:	4614      	mov	r4, r2
 80098c8:	461d      	mov	r5, r3
 80098ca:	eb14 030a 	adds.w	r3, r4, sl
 80098ce:	603b      	str	r3, [r7, #0]
 80098d0:	eb45 030b 	adc.w	r3, r5, fp
 80098d4:	607b      	str	r3, [r7, #4]
 80098d6:	f04f 0200 	mov.w	r2, #0
 80098da:	f04f 0300 	mov.w	r3, #0
 80098de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80098e2:	4629      	mov	r1, r5
 80098e4:	028b      	lsls	r3, r1, #10
 80098e6:	4621      	mov	r1, r4
 80098e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80098ec:	4621      	mov	r1, r4
 80098ee:	028a      	lsls	r2, r1, #10
 80098f0:	4610      	mov	r0, r2
 80098f2:	4619      	mov	r1, r3
 80098f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098f6:	2200      	movs	r2, #0
 80098f8:	60bb      	str	r3, [r7, #8]
 80098fa:	60fa      	str	r2, [r7, #12]
 80098fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009900:	f7f6 ffcc 	bl	800089c <__aeabi_uldivmod>
 8009904:	4602      	mov	r2, r0
 8009906:	460b      	mov	r3, r1
 8009908:	4613      	mov	r3, r2
 800990a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800990c:	4b0b      	ldr	r3, [pc, #44]	@ (800993c <HAL_RCC_GetSysClockFreq+0x180>)
 800990e:	685b      	ldr	r3, [r3, #4]
 8009910:	0c1b      	lsrs	r3, r3, #16
 8009912:	f003 0303 	and.w	r3, r3, #3
 8009916:	3301      	adds	r3, #1
 8009918:	005b      	lsls	r3, r3, #1
 800991a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800991c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800991e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009920:	fbb2 f3f3 	udiv	r3, r2, r3
 8009924:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8009926:	e002      	b.n	800992e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009928:	4b05      	ldr	r3, [pc, #20]	@ (8009940 <HAL_RCC_GetSysClockFreq+0x184>)
 800992a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800992c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800992e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8009930:	4618      	mov	r0, r3
 8009932:	3740      	adds	r7, #64	@ 0x40
 8009934:	46bd      	mov	sp, r7
 8009936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800993a:	bf00      	nop
 800993c:	40023800 	.word	0x40023800
 8009940:	00f42400 	.word	0x00f42400
 8009944:	017d7840 	.word	0x017d7840

08009948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009948:	b480      	push	{r7}
 800994a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800994c:	4b03      	ldr	r3, [pc, #12]	@ (800995c <HAL_RCC_GetHCLKFreq+0x14>)
 800994e:	681b      	ldr	r3, [r3, #0]
}
 8009950:	4618      	mov	r0, r3
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr
 800995a:	bf00      	nop
 800995c:	20000030 	.word	0x20000030

08009960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009960:	b580      	push	{r7, lr}
 8009962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009964:	f7ff fff0 	bl	8009948 <HAL_RCC_GetHCLKFreq>
 8009968:	4602      	mov	r2, r0
 800996a:	4b05      	ldr	r3, [pc, #20]	@ (8009980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	0a9b      	lsrs	r3, r3, #10
 8009970:	f003 0307 	and.w	r3, r3, #7
 8009974:	4903      	ldr	r1, [pc, #12]	@ (8009984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009976:	5ccb      	ldrb	r3, [r1, r3]
 8009978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800997c:	4618      	mov	r0, r3
 800997e:	bd80      	pop	{r7, pc}
 8009980:	40023800 	.word	0x40023800
 8009984:	08010930 	.word	0x08010930

08009988 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b082      	sub	sp, #8
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d101      	bne.n	800999a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	e041      	b.n	8009a1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80099a0:	b2db      	uxtb	r3, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d106      	bne.n	80099b4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2200      	movs	r2, #0
 80099aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f7f9 fa4a 	bl	8002e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2202      	movs	r2, #2
 80099b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	3304      	adds	r3, #4
 80099c4:	4619      	mov	r1, r3
 80099c6:	4610      	mov	r0, r2
 80099c8:	f000 fbce 	bl	800a168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	2201      	movs	r2, #1
 80099d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2201      	movs	r2, #1
 80099e0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2201      	movs	r2, #1
 8009a00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2201      	movs	r2, #1
 8009a08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	2201      	movs	r2, #1
 8009a10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2201      	movs	r2, #1
 8009a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009a1c:	2300      	movs	r3, #0
}
 8009a1e:	4618      	mov	r0, r3
 8009a20:	3708      	adds	r7, #8
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
	...

08009a28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b085      	sub	sp, #20
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d001      	beq.n	8009a40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e044      	b.n	8009aca <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2202      	movs	r2, #2
 8009a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	68da      	ldr	r2, [r3, #12]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f042 0201 	orr.w	r2, r2, #1
 8009a56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a1e      	ldr	r2, [pc, #120]	@ (8009ad8 <HAL_TIM_Base_Start_IT+0xb0>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d018      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x6c>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6a:	d013      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x6c>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a1a      	ldr	r2, [pc, #104]	@ (8009adc <HAL_TIM_Base_Start_IT+0xb4>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d00e      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x6c>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a19      	ldr	r2, [pc, #100]	@ (8009ae0 <HAL_TIM_Base_Start_IT+0xb8>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d009      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x6c>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a17      	ldr	r2, [pc, #92]	@ (8009ae4 <HAL_TIM_Base_Start_IT+0xbc>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d004      	beq.n	8009a94 <HAL_TIM_Base_Start_IT+0x6c>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a16      	ldr	r2, [pc, #88]	@ (8009ae8 <HAL_TIM_Base_Start_IT+0xc0>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d111      	bne.n	8009ab8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	f003 0307 	and.w	r3, r3, #7
 8009a9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b06      	cmp	r3, #6
 8009aa4:	d010      	beq.n	8009ac8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0201 	orr.w	r2, r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab6:	e007      	b.n	8009ac8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ac8:	2300      	movs	r3, #0
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3714      	adds	r7, #20
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
 8009ad6:	bf00      	nop
 8009ad8:	40010000 	.word	0x40010000
 8009adc:	40000400 	.word	0x40000400
 8009ae0:	40000800 	.word	0x40000800
 8009ae4:	40000c00 	.word	0x40000c00
 8009ae8:	40014000 	.word	0x40014000

08009aec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009aec:	b580      	push	{r7, lr}
 8009aee:	b082      	sub	sp, #8
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d101      	bne.n	8009afe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e041      	b.n	8009b82 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009b04:	b2db      	uxtb	r3, r3
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d106      	bne.n	8009b18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f839 	bl	8009b8a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681a      	ldr	r2, [r3, #0]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	3304      	adds	r3, #4
 8009b28:	4619      	mov	r1, r3
 8009b2a:	4610      	mov	r0, r2
 8009b2c:	f000 fb1c 	bl	800a168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8009b80:	2300      	movs	r3, #0
}
 8009b82:	4618      	mov	r0, r3
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}

08009b8a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009b8a:	b480      	push	{r7}
 8009b8c:	b083      	sub	sp, #12
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009b92:	bf00      	nop
 8009b94:	370c      	adds	r7, #12
 8009b96:	46bd      	mov	sp, r7
 8009b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9c:	4770      	bx	lr

08009b9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b9e:	b580      	push	{r7, lr}
 8009ba0:	b084      	sub	sp, #16
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	691b      	ldr	r3, [r3, #16]
 8009bb4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	f003 0302 	and.w	r3, r3, #2
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d020      	beq.n	8009c02 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	f003 0302 	and.w	r3, r3, #2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d01b      	beq.n	8009c02 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f06f 0202 	mvn.w	r2, #2
 8009bd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2201      	movs	r2, #1
 8009bd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	699b      	ldr	r3, [r3, #24]
 8009be0:	f003 0303 	and.w	r3, r3, #3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d003      	beq.n	8009bf0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f000 fa9e 	bl	800a12a <HAL_TIM_IC_CaptureCallback>
 8009bee:	e005      	b.n	8009bfc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fa90 	bl	800a116 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 faa1 	bl	800a13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8009c02:	68bb      	ldr	r3, [r7, #8]
 8009c04:	f003 0304 	and.w	r3, r3, #4
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d020      	beq.n	8009c4e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f003 0304 	and.w	r3, r3, #4
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d01b      	beq.n	8009c4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	f06f 0204 	mvn.w	r2, #4
 8009c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2202      	movs	r2, #2
 8009c24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	699b      	ldr	r3, [r3, #24]
 8009c2c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d003      	beq.n	8009c3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c34:	6878      	ldr	r0, [r7, #4]
 8009c36:	f000 fa78 	bl	800a12a <HAL_TIM_IC_CaptureCallback>
 8009c3a:	e005      	b.n	8009c48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 fa6a 	bl	800a116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 fa7b 	bl	800a13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	f003 0308 	and.w	r3, r3, #8
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d020      	beq.n	8009c9a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f003 0308 	and.w	r3, r3, #8
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d01b      	beq.n	8009c9a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f06f 0208 	mvn.w	r2, #8
 8009c6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2204      	movs	r2, #4
 8009c70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	f003 0303 	and.w	r3, r3, #3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c80:	6878      	ldr	r0, [r7, #4]
 8009c82:	f000 fa52 	bl	800a12a <HAL_TIM_IC_CaptureCallback>
 8009c86:	e005      	b.n	8009c94 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f000 fa44 	bl	800a116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c8e:	6878      	ldr	r0, [r7, #4]
 8009c90:	f000 fa55 	bl	800a13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2200      	movs	r2, #0
 8009c98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	f003 0310 	and.w	r3, r3, #16
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d020      	beq.n	8009ce6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	f003 0310 	and.w	r3, r3, #16
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d01b      	beq.n	8009ce6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	f06f 0210 	mvn.w	r2, #16
 8009cb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2208      	movs	r2, #8
 8009cbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	69db      	ldr	r3, [r3, #28]
 8009cc4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d003      	beq.n	8009cd4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 fa2c 	bl	800a12a <HAL_TIM_IC_CaptureCallback>
 8009cd2:	e005      	b.n	8009ce0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cd4:	6878      	ldr	r0, [r7, #4]
 8009cd6:	f000 fa1e 	bl	800a116 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fa2f 	bl	800a13e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2200      	movs	r2, #0
 8009ce4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	f003 0301 	and.w	r3, r3, #1
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d00c      	beq.n	8009d0a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	f003 0301 	and.w	r3, r3, #1
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d007      	beq.n	8009d0a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f06f 0201 	mvn.w	r2, #1
 8009d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f7f6 ff9f 	bl	8000c48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d00c      	beq.n	8009d2e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d007      	beq.n	8009d2e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8009d26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fdd3 	bl	800a8d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d00c      	beq.n	8009d52 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d007      	beq.n	8009d52 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8009d4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d4c:	6878      	ldr	r0, [r7, #4]
 8009d4e:	f000 fa00 	bl	800a152 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	f003 0320 	and.w	r3, r3, #32
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d00c      	beq.n	8009d76 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f003 0320 	and.w	r3, r3, #32
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d007      	beq.n	8009d76 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f06f 0220 	mvn.w	r2, #32
 8009d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 fda5 	bl	800a8c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009d76:	bf00      	nop
 8009d78:	3710      	adds	r7, #16
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
	...

08009d80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b086      	sub	sp, #24
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	60f8      	str	r0, [r7, #12]
 8009d88:	60b9      	str	r1, [r7, #8]
 8009d8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	d101      	bne.n	8009d9e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009d9a:	2302      	movs	r3, #2
 8009d9c:	e0ae      	b.n	8009efc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	2201      	movs	r2, #1
 8009da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2b0c      	cmp	r3, #12
 8009daa:	f200 809f 	bhi.w	8009eec <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009dae:	a201      	add	r2, pc, #4	@ (adr r2, 8009db4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db4:	08009de9 	.word	0x08009de9
 8009db8:	08009eed 	.word	0x08009eed
 8009dbc:	08009eed 	.word	0x08009eed
 8009dc0:	08009eed 	.word	0x08009eed
 8009dc4:	08009e29 	.word	0x08009e29
 8009dc8:	08009eed 	.word	0x08009eed
 8009dcc:	08009eed 	.word	0x08009eed
 8009dd0:	08009eed 	.word	0x08009eed
 8009dd4:	08009e6b 	.word	0x08009e6b
 8009dd8:	08009eed 	.word	0x08009eed
 8009ddc:	08009eed 	.word	0x08009eed
 8009de0:	08009eed 	.word	0x08009eed
 8009de4:	08009eab 	.word	0x08009eab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	68b9      	ldr	r1, [r7, #8]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f000 fa40 	bl	800a274 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	699a      	ldr	r2, [r3, #24]
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	f042 0208 	orr.w	r2, r2, #8
 8009e02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	699a      	ldr	r2, [r3, #24]
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	681b      	ldr	r3, [r3, #0]
 8009e0e:	f022 0204 	bic.w	r2, r2, #4
 8009e12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6999      	ldr	r1, [r3, #24]
 8009e1a:	68bb      	ldr	r3, [r7, #8]
 8009e1c:	691a      	ldr	r2, [r3, #16]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	430a      	orrs	r2, r1
 8009e24:	619a      	str	r2, [r3, #24]
      break;
 8009e26:	e064      	b.n	8009ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	68b9      	ldr	r1, [r7, #8]
 8009e2e:	4618      	mov	r0, r3
 8009e30:	f000 fa86 	bl	800a340 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	699a      	ldr	r2, [r3, #24]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009e42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	699a      	ldr	r2, [r3, #24]
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009e52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	6999      	ldr	r1, [r3, #24]
 8009e5a:	68bb      	ldr	r3, [r7, #8]
 8009e5c:	691b      	ldr	r3, [r3, #16]
 8009e5e:	021a      	lsls	r2, r3, #8
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	619a      	str	r2, [r3, #24]
      break;
 8009e68:	e043      	b.n	8009ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68b9      	ldr	r1, [r7, #8]
 8009e70:	4618      	mov	r0, r3
 8009e72:	f000 fad1 	bl	800a418 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	69da      	ldr	r2, [r3, #28]
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	f042 0208 	orr.w	r2, r2, #8
 8009e84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	69da      	ldr	r2, [r3, #28]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f022 0204 	bic.w	r2, r2, #4
 8009e94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69d9      	ldr	r1, [r3, #28]
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	691a      	ldr	r2, [r3, #16]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	430a      	orrs	r2, r1
 8009ea6:	61da      	str	r2, [r3, #28]
      break;
 8009ea8:	e023      	b.n	8009ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68b9      	ldr	r1, [r7, #8]
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f000 fb1b 	bl	800a4ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	69da      	ldr	r2, [r3, #28]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8009ec4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69da      	ldr	r2, [r3, #28]
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8009ed4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	69d9      	ldr	r1, [r3, #28]
 8009edc:	68bb      	ldr	r3, [r7, #8]
 8009ede:	691b      	ldr	r3, [r3, #16]
 8009ee0:	021a      	lsls	r2, r3, #8
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	430a      	orrs	r2, r1
 8009ee8:	61da      	str	r2, [r3, #28]
      break;
 8009eea:	e002      	b.n	8009ef2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009eec:	2301      	movs	r3, #1
 8009eee:	75fb      	strb	r3, [r7, #23]
      break;
 8009ef0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8009efa:	7dfb      	ldrb	r3, [r7, #23]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	3718      	adds	r7, #24
 8009f00:	46bd      	mov	sp, r7
 8009f02:	bd80      	pop	{r7, pc}

08009f04 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d101      	bne.n	8009f20 <HAL_TIM_ConfigClockSource+0x1c>
 8009f1c:	2302      	movs	r3, #2
 8009f1e:	e0b4      	b.n	800a08a <HAL_TIM_ConfigClockSource+0x186>
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2201      	movs	r2, #1
 8009f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	689b      	ldr	r3, [r3, #8]
 8009f36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8009f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f46:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	68ba      	ldr	r2, [r7, #8]
 8009f4e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f58:	d03e      	beq.n	8009fd8 <HAL_TIM_ConfigClockSource+0xd4>
 8009f5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009f5e:	f200 8087 	bhi.w	800a070 <HAL_TIM_ConfigClockSource+0x16c>
 8009f62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f66:	f000 8086 	beq.w	800a076 <HAL_TIM_ConfigClockSource+0x172>
 8009f6a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f6e:	d87f      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x16c>
 8009f70:	2b70      	cmp	r3, #112	@ 0x70
 8009f72:	d01a      	beq.n	8009faa <HAL_TIM_ConfigClockSource+0xa6>
 8009f74:	2b70      	cmp	r3, #112	@ 0x70
 8009f76:	d87b      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x16c>
 8009f78:	2b60      	cmp	r3, #96	@ 0x60
 8009f7a:	d050      	beq.n	800a01e <HAL_TIM_ConfigClockSource+0x11a>
 8009f7c:	2b60      	cmp	r3, #96	@ 0x60
 8009f7e:	d877      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x16c>
 8009f80:	2b50      	cmp	r3, #80	@ 0x50
 8009f82:	d03c      	beq.n	8009ffe <HAL_TIM_ConfigClockSource+0xfa>
 8009f84:	2b50      	cmp	r3, #80	@ 0x50
 8009f86:	d873      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x16c>
 8009f88:	2b40      	cmp	r3, #64	@ 0x40
 8009f8a:	d058      	beq.n	800a03e <HAL_TIM_ConfigClockSource+0x13a>
 8009f8c:	2b40      	cmp	r3, #64	@ 0x40
 8009f8e:	d86f      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x16c>
 8009f90:	2b30      	cmp	r3, #48	@ 0x30
 8009f92:	d064      	beq.n	800a05e <HAL_TIM_ConfigClockSource+0x15a>
 8009f94:	2b30      	cmp	r3, #48	@ 0x30
 8009f96:	d86b      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x16c>
 8009f98:	2b20      	cmp	r3, #32
 8009f9a:	d060      	beq.n	800a05e <HAL_TIM_ConfigClockSource+0x15a>
 8009f9c:	2b20      	cmp	r3, #32
 8009f9e:	d867      	bhi.n	800a070 <HAL_TIM_ConfigClockSource+0x16c>
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d05c      	beq.n	800a05e <HAL_TIM_ConfigClockSource+0x15a>
 8009fa4:	2b10      	cmp	r3, #16
 8009fa6:	d05a      	beq.n	800a05e <HAL_TIM_ConfigClockSource+0x15a>
 8009fa8:	e062      	b.n	800a070 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009fba:	f000 fbf2 	bl	800a7a2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689b      	ldr	r3, [r3, #8]
 8009fc4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8009fcc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	609a      	str	r2, [r3, #8]
      break;
 8009fd6:	e04f      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009fe8:	f000 fbdb 	bl	800a7a2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689a      	ldr	r2, [r3, #8]
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8009ffa:	609a      	str	r2, [r3, #8]
      break;
 8009ffc:	e03c      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a00a:	461a      	mov	r2, r3
 800a00c:	f000 fb4f 	bl	800a6ae <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	2150      	movs	r1, #80	@ 0x50
 800a016:	4618      	mov	r0, r3
 800a018:	f000 fba8 	bl	800a76c <TIM_ITRx_SetConfig>
      break;
 800a01c:	e02c      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a02a:	461a      	mov	r2, r3
 800a02c:	f000 fb6e 	bl	800a70c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2160      	movs	r1, #96	@ 0x60
 800a036:	4618      	mov	r0, r3
 800a038:	f000 fb98 	bl	800a76c <TIM_ITRx_SetConfig>
      break;
 800a03c:	e01c      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a04a:	461a      	mov	r2, r3
 800a04c:	f000 fb2f 	bl	800a6ae <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	2140      	movs	r1, #64	@ 0x40
 800a056:	4618      	mov	r0, r3
 800a058:	f000 fb88 	bl	800a76c <TIM_ITRx_SetConfig>
      break;
 800a05c:	e00c      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	4619      	mov	r1, r3
 800a068:	4610      	mov	r0, r2
 800a06a:	f000 fb7f 	bl	800a76c <TIM_ITRx_SetConfig>
      break;
 800a06e:	e003      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	73fb      	strb	r3, [r7, #15]
      break;
 800a074:	e000      	b.n	800a078 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a076:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2201      	movs	r2, #1
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	2200      	movs	r2, #0
 800a084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800a088:	7bfb      	ldrb	r3, [r7, #15]
}
 800a08a:	4618      	mov	r0, r3
 800a08c:	3710      	adds	r7, #16
 800a08e:	46bd      	mov	sp, r7
 800a090:	bd80      	pop	{r7, pc}

0800a092 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a092:	b580      	push	{r7, lr}
 800a094:	b082      	sub	sp, #8
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
 800a09a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d101      	bne.n	800a0aa <HAL_TIM_SlaveConfigSynchro+0x18>
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	e031      	b.n	800a10e <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2202      	movs	r2, #2
 800a0b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a0ba:	6839      	ldr	r1, [r7, #0]
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fa65 	bl	800a58c <TIM_SlaveTimer_SetConfig>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d009      	beq.n	800a0dc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800a0d8:	2301      	movs	r3, #1
 800a0da:	e018      	b.n	800a10e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68da      	ldr	r2, [r3, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0ea:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	68da      	ldr	r2, [r3, #12]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800a0fa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2201      	movs	r2, #1
 800a100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}

0800a116 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a11e:	bf00      	nop
 800a120:	370c      	adds	r7, #12
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a12a:	b480      	push	{r7}
 800a12c:	b083      	sub	sp, #12
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a132:	bf00      	nop
 800a134:	370c      	adds	r7, #12
 800a136:	46bd      	mov	sp, r7
 800a138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a13c:	4770      	bx	lr

0800a13e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a13e:	b480      	push	{r7}
 800a140:	b083      	sub	sp, #12
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr

0800a152 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a152:	b480      	push	{r7}
 800a154:	b083      	sub	sp, #12
 800a156:	af00      	add	r7, sp, #0
 800a158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a15a:	bf00      	nop
 800a15c:	370c      	adds	r7, #12
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
	...

0800a168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	6078      	str	r0, [r7, #4]
 800a170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a37      	ldr	r2, [pc, #220]	@ (800a258 <TIM_Base_SetConfig+0xf0>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d00f      	beq.n	800a1a0 <TIM_Base_SetConfig+0x38>
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a186:	d00b      	beq.n	800a1a0 <TIM_Base_SetConfig+0x38>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	4a34      	ldr	r2, [pc, #208]	@ (800a25c <TIM_Base_SetConfig+0xf4>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d007      	beq.n	800a1a0 <TIM_Base_SetConfig+0x38>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a33      	ldr	r2, [pc, #204]	@ (800a260 <TIM_Base_SetConfig+0xf8>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d003      	beq.n	800a1a0 <TIM_Base_SetConfig+0x38>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a32      	ldr	r2, [pc, #200]	@ (800a264 <TIM_Base_SetConfig+0xfc>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d108      	bne.n	800a1b2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	685b      	ldr	r3, [r3, #4]
 800a1ac:	68fa      	ldr	r2, [r7, #12]
 800a1ae:	4313      	orrs	r3, r2
 800a1b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a28      	ldr	r2, [pc, #160]	@ (800a258 <TIM_Base_SetConfig+0xf0>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d01b      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a1c0:	d017      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a25      	ldr	r2, [pc, #148]	@ (800a25c <TIM_Base_SetConfig+0xf4>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d013      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a24      	ldr	r2, [pc, #144]	@ (800a260 <TIM_Base_SetConfig+0xf8>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d00f      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a23      	ldr	r2, [pc, #140]	@ (800a264 <TIM_Base_SetConfig+0xfc>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d00b      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a22      	ldr	r2, [pc, #136]	@ (800a268 <TIM_Base_SetConfig+0x100>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d007      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a21      	ldr	r2, [pc, #132]	@ (800a26c <TIM_Base_SetConfig+0x104>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d003      	beq.n	800a1f2 <TIM_Base_SetConfig+0x8a>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a20      	ldr	r2, [pc, #128]	@ (800a270 <TIM_Base_SetConfig+0x108>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d108      	bne.n	800a204 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a1f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	4313      	orrs	r3, r2
 800a202:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	695b      	ldr	r3, [r3, #20]
 800a20e:	4313      	orrs	r3, r2
 800a210:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	689a      	ldr	r2, [r3, #8]
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	4a0c      	ldr	r2, [pc, #48]	@ (800a258 <TIM_Base_SetConfig+0xf0>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d103      	bne.n	800a232 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	691a      	ldr	r2, [r3, #16]
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f043 0204 	orr.w	r2, r3, #4
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2201      	movs	r2, #1
 800a242:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	68fa      	ldr	r2, [r7, #12]
 800a248:	601a      	str	r2, [r3, #0]
}
 800a24a:	bf00      	nop
 800a24c:	3714      	adds	r7, #20
 800a24e:	46bd      	mov	sp, r7
 800a250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	40010000 	.word	0x40010000
 800a25c:	40000400 	.word	0x40000400
 800a260:	40000800 	.word	0x40000800
 800a264:	40000c00 	.word	0x40000c00
 800a268:	40014000 	.word	0x40014000
 800a26c:	40014400 	.word	0x40014400
 800a270:	40014800 	.word	0x40014800

0800a274 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a274:	b480      	push	{r7}
 800a276:	b087      	sub	sp, #28
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
 800a27c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a1b      	ldr	r3, [r3, #32]
 800a282:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	6a1b      	ldr	r3, [r3, #32]
 800a288:	f023 0201 	bic.w	r2, r3, #1
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	685b      	ldr	r3, [r3, #4]
 800a294:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	699b      	ldr	r3, [r3, #24]
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f023 0303 	bic.w	r3, r3, #3
 800a2aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f023 0302 	bic.w	r3, r3, #2
 800a2bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	689b      	ldr	r3, [r3, #8]
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	4a1c      	ldr	r2, [pc, #112]	@ (800a33c <TIM_OC1_SetConfig+0xc8>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d10c      	bne.n	800a2ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2d0:	697b      	ldr	r3, [r7, #20]
 800a2d2:	f023 0308 	bic.w	r3, r3, #8
 800a2d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	68db      	ldr	r3, [r3, #12]
 800a2dc:	697a      	ldr	r2, [r7, #20]
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	f023 0304 	bic.w	r3, r3, #4
 800a2e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	4a13      	ldr	r2, [pc, #76]	@ (800a33c <TIM_OC1_SetConfig+0xc8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d111      	bne.n	800a316 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a2f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2fa:	693b      	ldr	r3, [r7, #16]
 800a2fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a300:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	695b      	ldr	r3, [r3, #20]
 800a306:	693a      	ldr	r2, [r7, #16]
 800a308:	4313      	orrs	r3, r2
 800a30a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	4313      	orrs	r3, r2
 800a314:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	621a      	str	r2, [r3, #32]
}
 800a330:	bf00      	nop
 800a332:	371c      	adds	r7, #28
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr
 800a33c:	40010000 	.word	0x40010000

0800a340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a340:	b480      	push	{r7}
 800a342:	b087      	sub	sp, #28
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6a1b      	ldr	r3, [r3, #32]
 800a34e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	6a1b      	ldr	r3, [r3, #32]
 800a354:	f023 0210 	bic.w	r2, r3, #16
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	685b      	ldr	r3, [r3, #4]
 800a360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a36e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a376:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	021b      	lsls	r3, r3, #8
 800a37e:	68fa      	ldr	r2, [r7, #12]
 800a380:	4313      	orrs	r3, r2
 800a382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	f023 0320 	bic.w	r3, r3, #32
 800a38a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	689b      	ldr	r3, [r3, #8]
 800a390:	011b      	lsls	r3, r3, #4
 800a392:	697a      	ldr	r2, [r7, #20]
 800a394:	4313      	orrs	r3, r2
 800a396:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	4a1e      	ldr	r2, [pc, #120]	@ (800a414 <TIM_OC2_SetConfig+0xd4>)
 800a39c:	4293      	cmp	r3, r2
 800a39e:	d10d      	bne.n	800a3bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a3a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	68db      	ldr	r3, [r3, #12]
 800a3ac:	011b      	lsls	r3, r3, #4
 800a3ae:	697a      	ldr	r2, [r7, #20]
 800a3b0:	4313      	orrs	r3, r2
 800a3b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a3ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	4a15      	ldr	r2, [pc, #84]	@ (800a414 <TIM_OC2_SetConfig+0xd4>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d113      	bne.n	800a3ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a3c4:	693b      	ldr	r3, [r7, #16]
 800a3c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a3ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a3d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	695b      	ldr	r3, [r3, #20]
 800a3d8:	009b      	lsls	r3, r3, #2
 800a3da:	693a      	ldr	r2, [r7, #16]
 800a3dc:	4313      	orrs	r3, r2
 800a3de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	699b      	ldr	r3, [r3, #24]
 800a3e4:	009b      	lsls	r3, r3, #2
 800a3e6:	693a      	ldr	r2, [r7, #16]
 800a3e8:	4313      	orrs	r3, r2
 800a3ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	693a      	ldr	r2, [r7, #16]
 800a3f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	68fa      	ldr	r2, [r7, #12]
 800a3f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	697a      	ldr	r2, [r7, #20]
 800a404:	621a      	str	r2, [r3, #32]
}
 800a406:	bf00      	nop
 800a408:	371c      	adds	r7, #28
 800a40a:	46bd      	mov	sp, r7
 800a40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a410:	4770      	bx	lr
 800a412:	bf00      	nop
 800a414:	40010000 	.word	0x40010000

0800a418 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a418:	b480      	push	{r7}
 800a41a:	b087      	sub	sp, #28
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6a1b      	ldr	r3, [r3, #32]
 800a426:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6a1b      	ldr	r3, [r3, #32]
 800a42c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	685b      	ldr	r3, [r3, #4]
 800a438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f023 0303 	bic.w	r3, r3, #3
 800a44e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	68fa      	ldr	r2, [r7, #12]
 800a456:	4313      	orrs	r3, r2
 800a458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	689b      	ldr	r3, [r3, #8]
 800a466:	021b      	lsls	r3, r3, #8
 800a468:	697a      	ldr	r2, [r7, #20]
 800a46a:	4313      	orrs	r3, r2
 800a46c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	4a1d      	ldr	r2, [pc, #116]	@ (800a4e8 <TIM_OC3_SetConfig+0xd0>)
 800a472:	4293      	cmp	r3, r2
 800a474:	d10d      	bne.n	800a492 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a47c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	68db      	ldr	r3, [r3, #12]
 800a482:	021b      	lsls	r3, r3, #8
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4313      	orrs	r3, r2
 800a488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	4a14      	ldr	r2, [pc, #80]	@ (800a4e8 <TIM_OC3_SetConfig+0xd0>)
 800a496:	4293      	cmp	r3, r2
 800a498:	d113      	bne.n	800a4c2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a4a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	695b      	ldr	r3, [r3, #20]
 800a4ae:	011b      	lsls	r3, r3, #4
 800a4b0:	693a      	ldr	r2, [r7, #16]
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a4b6:	683b      	ldr	r3, [r7, #0]
 800a4b8:	699b      	ldr	r3, [r3, #24]
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	693a      	ldr	r2, [r7, #16]
 800a4be:	4313      	orrs	r3, r2
 800a4c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	693a      	ldr	r2, [r7, #16]
 800a4c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	68fa      	ldr	r2, [r7, #12]
 800a4cc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	685a      	ldr	r2, [r3, #4]
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	697a      	ldr	r2, [r7, #20]
 800a4da:	621a      	str	r2, [r3, #32]
}
 800a4dc:	bf00      	nop
 800a4de:	371c      	adds	r7, #28
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e6:	4770      	bx	lr
 800a4e8:	40010000 	.word	0x40010000

0800a4ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a1b      	ldr	r3, [r3, #32]
 800a4fa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	6a1b      	ldr	r3, [r3, #32]
 800a500:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	685b      	ldr	r3, [r3, #4]
 800a50c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	69db      	ldr	r3, [r3, #28]
 800a512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a51a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800a522:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	021b      	lsls	r3, r3, #8
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	4313      	orrs	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800a536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	689b      	ldr	r3, [r3, #8]
 800a53c:	031b      	lsls	r3, r3, #12
 800a53e:	693a      	ldr	r2, [r7, #16]
 800a540:	4313      	orrs	r3, r2
 800a542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	4a10      	ldr	r2, [pc, #64]	@ (800a588 <TIM_OC4_SetConfig+0x9c>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d109      	bne.n	800a560 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800a552:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	695b      	ldr	r3, [r3, #20]
 800a558:	019b      	lsls	r3, r3, #6
 800a55a:	697a      	ldr	r2, [r7, #20]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	697a      	ldr	r2, [r7, #20]
 800a564:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	68fa      	ldr	r2, [r7, #12]
 800a56a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a56c:	683b      	ldr	r3, [r7, #0]
 800a56e:	685a      	ldr	r2, [r3, #4]
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	693a      	ldr	r2, [r7, #16]
 800a578:	621a      	str	r2, [r3, #32]
}
 800a57a:	bf00      	nop
 800a57c:	371c      	adds	r7, #28
 800a57e:	46bd      	mov	sp, r7
 800a580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a584:	4770      	bx	lr
 800a586:	bf00      	nop
 800a588:	40010000 	.word	0x40010000

0800a58c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b086      	sub	sp, #24
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a596:	2300      	movs	r3, #0
 800a598:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	689b      	ldr	r3, [r3, #8]
 800a5a0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5a2:	693b      	ldr	r3, [r7, #16]
 800a5a4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a5a8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	693a      	ldr	r2, [r7, #16]
 800a5b0:	4313      	orrs	r3, r2
 800a5b2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	f023 0307 	bic.w	r3, r3, #7
 800a5ba:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	693a      	ldr	r2, [r7, #16]
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	685b      	ldr	r3, [r3, #4]
 800a5d2:	2b70      	cmp	r3, #112	@ 0x70
 800a5d4:	d01a      	beq.n	800a60c <TIM_SlaveTimer_SetConfig+0x80>
 800a5d6:	2b70      	cmp	r3, #112	@ 0x70
 800a5d8:	d860      	bhi.n	800a69c <TIM_SlaveTimer_SetConfig+0x110>
 800a5da:	2b60      	cmp	r3, #96	@ 0x60
 800a5dc:	d054      	beq.n	800a688 <TIM_SlaveTimer_SetConfig+0xfc>
 800a5de:	2b60      	cmp	r3, #96	@ 0x60
 800a5e0:	d85c      	bhi.n	800a69c <TIM_SlaveTimer_SetConfig+0x110>
 800a5e2:	2b50      	cmp	r3, #80	@ 0x50
 800a5e4:	d046      	beq.n	800a674 <TIM_SlaveTimer_SetConfig+0xe8>
 800a5e6:	2b50      	cmp	r3, #80	@ 0x50
 800a5e8:	d858      	bhi.n	800a69c <TIM_SlaveTimer_SetConfig+0x110>
 800a5ea:	2b40      	cmp	r3, #64	@ 0x40
 800a5ec:	d019      	beq.n	800a622 <TIM_SlaveTimer_SetConfig+0x96>
 800a5ee:	2b40      	cmp	r3, #64	@ 0x40
 800a5f0:	d854      	bhi.n	800a69c <TIM_SlaveTimer_SetConfig+0x110>
 800a5f2:	2b30      	cmp	r3, #48	@ 0x30
 800a5f4:	d055      	beq.n	800a6a2 <TIM_SlaveTimer_SetConfig+0x116>
 800a5f6:	2b30      	cmp	r3, #48	@ 0x30
 800a5f8:	d850      	bhi.n	800a69c <TIM_SlaveTimer_SetConfig+0x110>
 800a5fa:	2b20      	cmp	r3, #32
 800a5fc:	d051      	beq.n	800a6a2 <TIM_SlaveTimer_SetConfig+0x116>
 800a5fe:	2b20      	cmp	r3, #32
 800a600:	d84c      	bhi.n	800a69c <TIM_SlaveTimer_SetConfig+0x110>
 800a602:	2b00      	cmp	r3, #0
 800a604:	d04d      	beq.n	800a6a2 <TIM_SlaveTimer_SetConfig+0x116>
 800a606:	2b10      	cmp	r3, #16
 800a608:	d04b      	beq.n	800a6a2 <TIM_SlaveTimer_SetConfig+0x116>
 800a60a:	e047      	b.n	800a69c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800a61c:	f000 f8c1 	bl	800a7a2 <TIM_ETR_SetConfig>
      break;
 800a620:	e040      	b.n	800a6a4 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b05      	cmp	r3, #5
 800a628:	d101      	bne.n	800a62e <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e03b      	b.n	800a6a6 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	6a1b      	ldr	r3, [r3, #32]
 800a634:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	6a1a      	ldr	r2, [r3, #32]
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f022 0201 	bic.w	r2, r2, #1
 800a644:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	699b      	ldr	r3, [r3, #24]
 800a64c:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a654:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	691b      	ldr	r3, [r3, #16]
 800a65a:	011b      	lsls	r3, r3, #4
 800a65c:	68ba      	ldr	r2, [r7, #8]
 800a65e:	4313      	orrs	r3, r2
 800a660:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	68ba      	ldr	r2, [r7, #8]
 800a668:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	68fa      	ldr	r2, [r7, #12]
 800a670:	621a      	str	r2, [r3, #32]
      break;
 800a672:	e017      	b.n	800a6a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a680:	461a      	mov	r2, r3
 800a682:	f000 f814 	bl	800a6ae <TIM_TI1_ConfigInputStage>
      break;
 800a686:	e00d      	b.n	800a6a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a694:	461a      	mov	r2, r3
 800a696:	f000 f839 	bl	800a70c <TIM_TI2_ConfigInputStage>
      break;
 800a69a:	e003      	b.n	800a6a4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	75fb      	strb	r3, [r7, #23]
      break;
 800a6a0:	e000      	b.n	800a6a4 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 800a6a2:	bf00      	nop
  }

  return status;
 800a6a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3718      	adds	r7, #24
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a6ae:	b480      	push	{r7}
 800a6b0:	b087      	sub	sp, #28
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	60f8      	str	r0, [r7, #12]
 800a6b6:	60b9      	str	r1, [r7, #8]
 800a6b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	6a1b      	ldr	r3, [r3, #32]
 800a6be:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	6a1b      	ldr	r3, [r3, #32]
 800a6c4:	f023 0201 	bic.w	r2, r3, #1
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	699b      	ldr	r3, [r3, #24]
 800a6d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800a6d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	011b      	lsls	r3, r3, #4
 800a6de:	693a      	ldr	r2, [r7, #16]
 800a6e0:	4313      	orrs	r3, r2
 800a6e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f023 030a 	bic.w	r3, r3, #10
 800a6ea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	693a      	ldr	r2, [r7, #16]
 800a6f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	697a      	ldr	r2, [r7, #20]
 800a6fe:	621a      	str	r2, [r3, #32]
}
 800a700:	bf00      	nop
 800a702:	371c      	adds	r7, #28
 800a704:	46bd      	mov	sp, r7
 800a706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a70a:	4770      	bx	lr

0800a70c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b087      	sub	sp, #28
 800a710:	af00      	add	r7, sp, #0
 800a712:	60f8      	str	r0, [r7, #12]
 800a714:	60b9      	str	r1, [r7, #8]
 800a716:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6a1b      	ldr	r3, [r3, #32]
 800a71c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	6a1b      	ldr	r3, [r3, #32]
 800a722:	f023 0210 	bic.w	r2, r3, #16
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	699b      	ldr	r3, [r3, #24]
 800a72e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800a736:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	031b      	lsls	r3, r3, #12
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	4313      	orrs	r3, r2
 800a740:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800a748:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a74a:	68bb      	ldr	r3, [r7, #8]
 800a74c:	011b      	lsls	r3, r3, #4
 800a74e:	697a      	ldr	r2, [r7, #20]
 800a750:	4313      	orrs	r3, r2
 800a752:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	693a      	ldr	r2, [r7, #16]
 800a758:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	697a      	ldr	r2, [r7, #20]
 800a75e:	621a      	str	r2, [r3, #32]
}
 800a760:	bf00      	nop
 800a762:	371c      	adds	r7, #28
 800a764:	46bd      	mov	sp, r7
 800a766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76a:	4770      	bx	lr

0800a76c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
 800a774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	689b      	ldr	r3, [r3, #8]
 800a77a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a782:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a784:	683a      	ldr	r2, [r7, #0]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	4313      	orrs	r3, r2
 800a78a:	f043 0307 	orr.w	r3, r3, #7
 800a78e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	609a      	str	r2, [r3, #8]
}
 800a796:	bf00      	nop
 800a798:	3714      	adds	r7, #20
 800a79a:	46bd      	mov	sp, r7
 800a79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a7a2:	b480      	push	{r7}
 800a7a4:	b087      	sub	sp, #28
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	60f8      	str	r0, [r7, #12]
 800a7aa:	60b9      	str	r1, [r7, #8]
 800a7ac:	607a      	str	r2, [r7, #4]
 800a7ae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	689b      	ldr	r3, [r3, #8]
 800a7b4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a7bc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	021a      	lsls	r2, r3, #8
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	431a      	orrs	r2, r3
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	4313      	orrs	r3, r2
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	697a      	ldr	r2, [r7, #20]
 800a7d4:	609a      	str	r2, [r3, #8]
}
 800a7d6:	bf00      	nop
 800a7d8:	371c      	adds	r7, #28
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr
	...

0800a7e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b085      	sub	sp, #20
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d101      	bne.n	800a7fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a7f8:	2302      	movs	r3, #2
 800a7fa:	e050      	b.n	800a89e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2201      	movs	r2, #1
 800a800:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2202      	movs	r2, #2
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	685b      	ldr	r3, [r3, #4]
 800a812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	689b      	ldr	r3, [r3, #8]
 800a81a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a822:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	68fa      	ldr	r2, [r7, #12]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a1c      	ldr	r2, [pc, #112]	@ (800a8ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d018      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a848:	d013      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a18      	ldr	r2, [pc, #96]	@ (800a8b0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d00e      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a16      	ldr	r2, [pc, #88]	@ (800a8b4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d009      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a15      	ldr	r2, [pc, #84]	@ (800a8b8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d004      	beq.n	800a872 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a13      	ldr	r2, [pc, #76]	@ (800a8bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d10c      	bne.n	800a88c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a872:	68bb      	ldr	r3, [r7, #8]
 800a874:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a878:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	68ba      	ldr	r2, [r7, #8]
 800a880:	4313      	orrs	r3, r2
 800a882:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	68ba      	ldr	r2, [r7, #8]
 800a88a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a89c:	2300      	movs	r3, #0
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	40010000 	.word	0x40010000
 800a8b0:	40000400 	.word	0x40000400
 800a8b4:	40000800 	.word	0x40000800
 800a8b8:	40000c00 	.word	0x40000c00
 800a8bc:	40014000 	.word	0x40014000

0800a8c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8c8:	bf00      	nop
 800a8ca:	370c      	adds	r7, #12
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d2:	4770      	bx	lr

0800a8d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b083      	sub	sp, #12
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8dc:	bf00      	nop
 800a8de:	370c      	adds	r7, #12
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e6:	4770      	bx	lr

0800a8e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a8e8:	b084      	sub	sp, #16
 800a8ea:	b580      	push	{r7, lr}
 800a8ec:	b084      	sub	sp, #16
 800a8ee:	af00      	add	r7, sp, #0
 800a8f0:	6078      	str	r0, [r7, #4]
 800a8f2:	f107 001c 	add.w	r0, r7, #28
 800a8f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a8fa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d123      	bne.n	800a94a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a906:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a916:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a91a:	687a      	ldr	r2, [r7, #4]
 800a91c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	68db      	ldr	r3, [r3, #12]
 800a922:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a92a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d105      	bne.n	800a93e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	68db      	ldr	r3, [r3, #12]
 800a936:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f001 fae8 	bl	800bf14 <USB_CoreReset>
 800a944:	4603      	mov	r3, r0
 800a946:	73fb      	strb	r3, [r7, #15]
 800a948:	e01b      	b.n	800a982 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a956:	6878      	ldr	r0, [r7, #4]
 800a958:	f001 fadc 	bl	800bf14 <USB_CoreReset>
 800a95c:	4603      	mov	r3, r0
 800a95e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a960:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a964:	2b00      	cmp	r3, #0
 800a966:	d106      	bne.n	800a976 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a96c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	639a      	str	r2, [r3, #56]	@ 0x38
 800a974:	e005      	b.n	800a982 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a97a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a982:	7fbb      	ldrb	r3, [r7, #30]
 800a984:	2b01      	cmp	r3, #1
 800a986:	d10b      	bne.n	800a9a0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	689b      	ldr	r3, [r3, #8]
 800a98c:	f043 0206 	orr.w	r2, r3, #6
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	f043 0220 	orr.w	r2, r3, #32
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	3710      	adds	r7, #16
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9ac:	b004      	add	sp, #16
 800a9ae:	4770      	bx	lr

0800a9b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b087      	sub	sp, #28
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	4613      	mov	r3, r2
 800a9bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a9be:	79fb      	ldrb	r3, [r7, #7]
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d165      	bne.n	800aa90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	4a41      	ldr	r2, [pc, #260]	@ (800aacc <USB_SetTurnaroundTime+0x11c>)
 800a9c8:	4293      	cmp	r3, r2
 800a9ca:	d906      	bls.n	800a9da <USB_SetTurnaroundTime+0x2a>
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	4a40      	ldr	r2, [pc, #256]	@ (800aad0 <USB_SetTurnaroundTime+0x120>)
 800a9d0:	4293      	cmp	r3, r2
 800a9d2:	d202      	bcs.n	800a9da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a9d4:	230f      	movs	r3, #15
 800a9d6:	617b      	str	r3, [r7, #20]
 800a9d8:	e062      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	4a3c      	ldr	r2, [pc, #240]	@ (800aad0 <USB_SetTurnaroundTime+0x120>)
 800a9de:	4293      	cmp	r3, r2
 800a9e0:	d306      	bcc.n	800a9f0 <USB_SetTurnaroundTime+0x40>
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	4a3b      	ldr	r2, [pc, #236]	@ (800aad4 <USB_SetTurnaroundTime+0x124>)
 800a9e6:	4293      	cmp	r3, r2
 800a9e8:	d202      	bcs.n	800a9f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a9ea:	230e      	movs	r3, #14
 800a9ec:	617b      	str	r3, [r7, #20]
 800a9ee:	e057      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	4a38      	ldr	r2, [pc, #224]	@ (800aad4 <USB_SetTurnaroundTime+0x124>)
 800a9f4:	4293      	cmp	r3, r2
 800a9f6:	d306      	bcc.n	800aa06 <USB_SetTurnaroundTime+0x56>
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	4a37      	ldr	r2, [pc, #220]	@ (800aad8 <USB_SetTurnaroundTime+0x128>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d202      	bcs.n	800aa06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aa00:	230d      	movs	r3, #13
 800aa02:	617b      	str	r3, [r7, #20]
 800aa04:	e04c      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	4a33      	ldr	r2, [pc, #204]	@ (800aad8 <USB_SetTurnaroundTime+0x128>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d306      	bcc.n	800aa1c <USB_SetTurnaroundTime+0x6c>
 800aa0e:	68bb      	ldr	r3, [r7, #8]
 800aa10:	4a32      	ldr	r2, [pc, #200]	@ (800aadc <USB_SetTurnaroundTime+0x12c>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d802      	bhi.n	800aa1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aa16:	230c      	movs	r3, #12
 800aa18:	617b      	str	r3, [r7, #20]
 800aa1a:	e041      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	4a2f      	ldr	r2, [pc, #188]	@ (800aadc <USB_SetTurnaroundTime+0x12c>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d906      	bls.n	800aa32 <USB_SetTurnaroundTime+0x82>
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	4a2e      	ldr	r2, [pc, #184]	@ (800aae0 <USB_SetTurnaroundTime+0x130>)
 800aa28:	4293      	cmp	r3, r2
 800aa2a:	d802      	bhi.n	800aa32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aa2c:	230b      	movs	r3, #11
 800aa2e:	617b      	str	r3, [r7, #20]
 800aa30:	e036      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	4a2a      	ldr	r2, [pc, #168]	@ (800aae0 <USB_SetTurnaroundTime+0x130>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d906      	bls.n	800aa48 <USB_SetTurnaroundTime+0x98>
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	4a29      	ldr	r2, [pc, #164]	@ (800aae4 <USB_SetTurnaroundTime+0x134>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d802      	bhi.n	800aa48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aa42:	230a      	movs	r3, #10
 800aa44:	617b      	str	r3, [r7, #20]
 800aa46:	e02b      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aa48:	68bb      	ldr	r3, [r7, #8]
 800aa4a:	4a26      	ldr	r2, [pc, #152]	@ (800aae4 <USB_SetTurnaroundTime+0x134>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d906      	bls.n	800aa5e <USB_SetTurnaroundTime+0xae>
 800aa50:	68bb      	ldr	r3, [r7, #8]
 800aa52:	4a25      	ldr	r2, [pc, #148]	@ (800aae8 <USB_SetTurnaroundTime+0x138>)
 800aa54:	4293      	cmp	r3, r2
 800aa56:	d202      	bcs.n	800aa5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aa58:	2309      	movs	r3, #9
 800aa5a:	617b      	str	r3, [r7, #20]
 800aa5c:	e020      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aa5e:	68bb      	ldr	r3, [r7, #8]
 800aa60:	4a21      	ldr	r2, [pc, #132]	@ (800aae8 <USB_SetTurnaroundTime+0x138>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d306      	bcc.n	800aa74 <USB_SetTurnaroundTime+0xc4>
 800aa66:	68bb      	ldr	r3, [r7, #8]
 800aa68:	4a20      	ldr	r2, [pc, #128]	@ (800aaec <USB_SetTurnaroundTime+0x13c>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d802      	bhi.n	800aa74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aa6e:	2308      	movs	r3, #8
 800aa70:	617b      	str	r3, [r7, #20]
 800aa72:	e015      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	4a1d      	ldr	r2, [pc, #116]	@ (800aaec <USB_SetTurnaroundTime+0x13c>)
 800aa78:	4293      	cmp	r3, r2
 800aa7a:	d906      	bls.n	800aa8a <USB_SetTurnaroundTime+0xda>
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	4a1c      	ldr	r2, [pc, #112]	@ (800aaf0 <USB_SetTurnaroundTime+0x140>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d202      	bcs.n	800aa8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aa84:	2307      	movs	r3, #7
 800aa86:	617b      	str	r3, [r7, #20]
 800aa88:	e00a      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800aa8a:	2306      	movs	r3, #6
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	e007      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800aa90:	79fb      	ldrb	r3, [r7, #7]
 800aa92:	2b00      	cmp	r3, #0
 800aa94:	d102      	bne.n	800aa9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800aa96:	2309      	movs	r3, #9
 800aa98:	617b      	str	r3, [r7, #20]
 800aa9a:	e001      	b.n	800aaa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800aa9c:	2309      	movs	r3, #9
 800aa9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	68db      	ldr	r3, [r3, #12]
 800aaa4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	68da      	ldr	r2, [r3, #12]
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	029b      	lsls	r3, r3, #10
 800aab4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800aab8:	431a      	orrs	r2, r3
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800aabe:	2300      	movs	r3, #0
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	371c      	adds	r7, #28
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr
 800aacc:	00d8acbf 	.word	0x00d8acbf
 800aad0:	00e4e1c0 	.word	0x00e4e1c0
 800aad4:	00f42400 	.word	0x00f42400
 800aad8:	01067380 	.word	0x01067380
 800aadc:	011a499f 	.word	0x011a499f
 800aae0:	01312cff 	.word	0x01312cff
 800aae4:	014ca43f 	.word	0x014ca43f
 800aae8:	016e3600 	.word	0x016e3600
 800aaec:	01a6ab1f 	.word	0x01a6ab1f
 800aaf0:	01e84800 	.word	0x01e84800

0800aaf4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf4:	b480      	push	{r7}
 800aaf6:	b083      	sub	sp, #12
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	689b      	ldr	r3, [r3, #8]
 800ab00:	f043 0201 	orr.w	r2, r3, #1
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab08:	2300      	movs	r3, #0
}
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	370c      	adds	r7, #12
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab14:	4770      	bx	lr

0800ab16 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab16:	b480      	push	{r7}
 800ab18:	b083      	sub	sp, #12
 800ab1a:	af00      	add	r7, sp, #0
 800ab1c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	f023 0201 	bic.w	r2, r3, #1
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab2a:	2300      	movs	r3, #0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	370c      	adds	r7, #12
 800ab30:	46bd      	mov	sp, r7
 800ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab36:	4770      	bx	lr

0800ab38 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b084      	sub	sp, #16
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
 800ab40:	460b      	mov	r3, r1
 800ab42:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ab44:	2300      	movs	r3, #0
 800ab46:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ab54:	78fb      	ldrb	r3, [r7, #3]
 800ab56:	2b01      	cmp	r3, #1
 800ab58:	d115      	bne.n	800ab86 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab66:	200a      	movs	r0, #10
 800ab68:	f7f8 fe26 	bl	80037b8 <HAL_Delay>
      ms += 10U;
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	330a      	adds	r3, #10
 800ab70:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f001 f93f 	bl	800bdf6 <USB_GetMode>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b01      	cmp	r3, #1
 800ab7c:	d01e      	beq.n	800abbc <USB_SetCurrentMode+0x84>
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	2bc7      	cmp	r3, #199	@ 0xc7
 800ab82:	d9f0      	bls.n	800ab66 <USB_SetCurrentMode+0x2e>
 800ab84:	e01a      	b.n	800abbc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ab86:	78fb      	ldrb	r3, [r7, #3]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d115      	bne.n	800abb8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800ab98:	200a      	movs	r0, #10
 800ab9a:	f7f8 fe0d 	bl	80037b8 <HAL_Delay>
      ms += 10U;
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	330a      	adds	r3, #10
 800aba2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800aba4:	6878      	ldr	r0, [r7, #4]
 800aba6:	f001 f926 	bl	800bdf6 <USB_GetMode>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d005      	beq.n	800abbc <USB_SetCurrentMode+0x84>
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2bc7      	cmp	r3, #199	@ 0xc7
 800abb4:	d9f0      	bls.n	800ab98 <USB_SetCurrentMode+0x60>
 800abb6:	e001      	b.n	800abbc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e005      	b.n	800abc8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2bc8      	cmp	r3, #200	@ 0xc8
 800abc0:	d101      	bne.n	800abc6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800abc2:	2301      	movs	r3, #1
 800abc4:	e000      	b.n	800abc8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800abc6:	2300      	movs	r3, #0
}
 800abc8:	4618      	mov	r0, r3
 800abca:	3710      	adds	r7, #16
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}

0800abd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800abd0:	b084      	sub	sp, #16
 800abd2:	b580      	push	{r7, lr}
 800abd4:	b086      	sub	sp, #24
 800abd6:	af00      	add	r7, sp, #0
 800abd8:	6078      	str	r0, [r7, #4]
 800abda:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800abde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800abe2:	2300      	movs	r3, #0
 800abe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800abea:	2300      	movs	r3, #0
 800abec:	613b      	str	r3, [r7, #16]
 800abee:	e009      	b.n	800ac04 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800abf0:	687a      	ldr	r2, [r7, #4]
 800abf2:	693b      	ldr	r3, [r7, #16]
 800abf4:	3340      	adds	r3, #64	@ 0x40
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	2200      	movs	r2, #0
 800abfc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800abfe:	693b      	ldr	r3, [r7, #16]
 800ac00:	3301      	adds	r3, #1
 800ac02:	613b      	str	r3, [r7, #16]
 800ac04:	693b      	ldr	r3, [r7, #16]
 800ac06:	2b0e      	cmp	r3, #14
 800ac08:	d9f2      	bls.n	800abf0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac0a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d11c      	bne.n	800ac4c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac18:	685b      	ldr	r3, [r3, #4]
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ac20:	f043 0302 	orr.w	r3, r3, #2
 800ac24:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac2a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac36:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac42:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	639a      	str	r2, [r3, #56]	@ 0x38
 800ac4a:	e00b      	b.n	800ac64 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac50:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac5c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ac70:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800ac74:	2b01      	cmp	r3, #1
 800ac76:	d10d      	bne.n	800ac94 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ac78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d104      	bne.n	800ac8a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ac80:	2100      	movs	r1, #0
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 f968 	bl	800af58 <USB_SetDevSpeed>
 800ac88:	e008      	b.n	800ac9c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ac8a:	2101      	movs	r1, #1
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f963 	bl	800af58 <USB_SetDevSpeed>
 800ac92:	e003      	b.n	800ac9c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ac94:	2103      	movs	r1, #3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f000 f95e 	bl	800af58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ac9c:	2110      	movs	r1, #16
 800ac9e:	6878      	ldr	r0, [r7, #4]
 800aca0:	f000 f8fa 	bl	800ae98 <USB_FlushTxFifo>
 800aca4:	4603      	mov	r3, r0
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d001      	beq.n	800acae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800acaa:	2301      	movs	r3, #1
 800acac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f000 f924 	bl	800aefc <USB_FlushRxFifo>
 800acb4:	4603      	mov	r3, r0
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d001      	beq.n	800acbe <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acc4:	461a      	mov	r2, r3
 800acc6:	2300      	movs	r3, #0
 800acc8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acd0:	461a      	mov	r2, r3
 800acd2:	2300      	movs	r3, #0
 800acd4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acdc:	461a      	mov	r2, r3
 800acde:	2300      	movs	r3, #0
 800ace0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ace2:	2300      	movs	r3, #0
 800ace4:	613b      	str	r3, [r7, #16]
 800ace6:	e043      	b.n	800ad70 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ace8:	693b      	ldr	r3, [r7, #16]
 800acea:	015a      	lsls	r2, r3, #5
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	4413      	add	r3, r2
 800acf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800acfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800acfe:	d118      	bne.n	800ad32 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10a      	bne.n	800ad1c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad06:	693b      	ldr	r3, [r7, #16]
 800ad08:	015a      	lsls	r2, r3, #5
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	4413      	add	r3, r2
 800ad0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad12:	461a      	mov	r2, r3
 800ad14:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800ad18:	6013      	str	r3, [r2, #0]
 800ad1a:	e013      	b.n	800ad44 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad1c:	693b      	ldr	r3, [r7, #16]
 800ad1e:	015a      	lsls	r2, r3, #5
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	4413      	add	r3, r2
 800ad24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad28:	461a      	mov	r2, r3
 800ad2a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800ad2e:	6013      	str	r3, [r2, #0]
 800ad30:	e008      	b.n	800ad44 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	015a      	lsls	r2, r3, #5
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4413      	add	r3, r2
 800ad3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad3e:	461a      	mov	r2, r3
 800ad40:	2300      	movs	r3, #0
 800ad42:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ad44:	693b      	ldr	r3, [r7, #16]
 800ad46:	015a      	lsls	r2, r3, #5
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	4413      	add	r3, r2
 800ad4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad50:	461a      	mov	r2, r3
 800ad52:	2300      	movs	r3, #0
 800ad54:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ad56:	693b      	ldr	r3, [r7, #16]
 800ad58:	015a      	lsls	r2, r3, #5
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	4413      	add	r3, r2
 800ad5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad62:	461a      	mov	r2, r3
 800ad64:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ad68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	3301      	adds	r3, #1
 800ad6e:	613b      	str	r3, [r7, #16]
 800ad70:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ad74:	461a      	mov	r2, r3
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d3b5      	bcc.n	800ace8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	613b      	str	r3, [r7, #16]
 800ad80:	e043      	b.n	800ae0a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	015a      	lsls	r2, r3, #5
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	4413      	add	r3, r2
 800ad8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ad94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ad98:	d118      	bne.n	800adcc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d10a      	bne.n	800adb6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ada0:	693b      	ldr	r3, [r7, #16]
 800ada2:	015a      	lsls	r2, r3, #5
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	4413      	add	r3, r2
 800ada8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adac:	461a      	mov	r2, r3
 800adae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	e013      	b.n	800adde <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	015a      	lsls	r2, r3, #5
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	4413      	add	r3, r2
 800adbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adc2:	461a      	mov	r2, r3
 800adc4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800adc8:	6013      	str	r3, [r2, #0]
 800adca:	e008      	b.n	800adde <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	015a      	lsls	r2, r3, #5
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	4413      	add	r3, r2
 800add4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800add8:	461a      	mov	r2, r3
 800adda:	2300      	movs	r3, #0
 800addc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	015a      	lsls	r2, r3, #5
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	4413      	add	r3, r2
 800ade6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adea:	461a      	mov	r2, r3
 800adec:	2300      	movs	r3, #0
 800adee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800adf0:	693b      	ldr	r3, [r7, #16]
 800adf2:	015a      	lsls	r2, r3, #5
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	4413      	add	r3, r2
 800adf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800adfc:	461a      	mov	r2, r3
 800adfe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800ae02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	3301      	adds	r3, #1
 800ae08:	613b      	str	r3, [r7, #16]
 800ae0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800ae0e:	461a      	mov	r2, r3
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d3b5      	bcc.n	800ad82 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ae1c:	691b      	ldr	r3, [r3, #16]
 800ae1e:	68fa      	ldr	r2, [r7, #12]
 800ae20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800ae24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ae28:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800ae36:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ae38:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d105      	bne.n	800ae4c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	699b      	ldr	r3, [r3, #24]
 800ae44:	f043 0210 	orr.w	r2, r3, #16
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	699a      	ldr	r2, [r3, #24]
 800ae50:	4b10      	ldr	r3, [pc, #64]	@ (800ae94 <USB_DevInit+0x2c4>)
 800ae52:	4313      	orrs	r3, r2
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ae58:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d005      	beq.n	800ae6c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	699b      	ldr	r3, [r3, #24]
 800ae64:	f043 0208 	orr.w	r2, r3, #8
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ae6c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800ae70:	2b01      	cmp	r3, #1
 800ae72:	d107      	bne.n	800ae84 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	699b      	ldr	r3, [r3, #24]
 800ae78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ae7c:	f043 0304 	orr.w	r3, r3, #4
 800ae80:	687a      	ldr	r2, [r7, #4]
 800ae82:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800ae84:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ae90:	b004      	add	sp, #16
 800ae92:	4770      	bx	lr
 800ae94:	803c3800 	.word	0x803c3800

0800ae98 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aea2:	2300      	movs	r3, #0
 800aea4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	3301      	adds	r3, #1
 800aeaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aeb2:	d901      	bls.n	800aeb8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aeb4:	2303      	movs	r3, #3
 800aeb6:	e01b      	b.n	800aef0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	691b      	ldr	r3, [r3, #16]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	daf2      	bge.n	800aea6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aec0:	2300      	movs	r3, #0
 800aec2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	019b      	lsls	r3, r3, #6
 800aec8:	f043 0220 	orr.w	r2, r3, #32
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	3301      	adds	r3, #1
 800aed4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aedc:	d901      	bls.n	800aee2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aede:	2303      	movs	r3, #3
 800aee0:	e006      	b.n	800aef0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	691b      	ldr	r3, [r3, #16]
 800aee6:	f003 0320 	and.w	r3, r3, #32
 800aeea:	2b20      	cmp	r3, #32
 800aeec:	d0f0      	beq.n	800aed0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aeee:	2300      	movs	r3, #0
}
 800aef0:	4618      	mov	r0, r3
 800aef2:	3714      	adds	r7, #20
 800aef4:	46bd      	mov	sp, r7
 800aef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefa:	4770      	bx	lr

0800aefc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aefc:	b480      	push	{r7}
 800aefe:	b085      	sub	sp, #20
 800af00:	af00      	add	r7, sp, #0
 800af02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af04:	2300      	movs	r3, #0
 800af06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	3301      	adds	r3, #1
 800af0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af14:	d901      	bls.n	800af1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af16:	2303      	movs	r3, #3
 800af18:	e018      	b.n	800af4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	691b      	ldr	r3, [r3, #16]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	daf2      	bge.n	800af08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800af22:	2300      	movs	r3, #0
 800af24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	2210      	movs	r2, #16
 800af2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	3301      	adds	r3, #1
 800af30:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800af38:	d901      	bls.n	800af3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800af3a:	2303      	movs	r3, #3
 800af3c:	e006      	b.n	800af4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	f003 0310 	and.w	r3, r3, #16
 800af46:	2b10      	cmp	r3, #16
 800af48:	d0f0      	beq.n	800af2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	460b      	mov	r3, r1
 800af62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af6e:	681a      	ldr	r2, [r3, #0]
 800af70:	78fb      	ldrb	r3, [r7, #3]
 800af72:	68f9      	ldr	r1, [r7, #12]
 800af74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800af78:	4313      	orrs	r3, r2
 800af7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800af7c:	2300      	movs	r3, #0
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3714      	adds	r7, #20
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800af8a:	b480      	push	{r7}
 800af8c:	b087      	sub	sp, #28
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800af96:	693b      	ldr	r3, [r7, #16]
 800af98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	f003 0306 	and.w	r3, r3, #6
 800afa2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d102      	bne.n	800afb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800afaa:	2300      	movs	r3, #0
 800afac:	75fb      	strb	r3, [r7, #23]
 800afae:	e00a      	b.n	800afc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2b02      	cmp	r3, #2
 800afb4:	d002      	beq.n	800afbc <USB_GetDevSpeed+0x32>
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2b06      	cmp	r3, #6
 800afba:	d102      	bne.n	800afc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800afbc:	2302      	movs	r3, #2
 800afbe:	75fb      	strb	r3, [r7, #23]
 800afc0:	e001      	b.n	800afc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800afc2:	230f      	movs	r3, #15
 800afc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800afc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800afc8:	4618      	mov	r0, r3
 800afca:	371c      	adds	r7, #28
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr

0800afd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800afe2:	683b      	ldr	r3, [r7, #0]
 800afe4:	781b      	ldrb	r3, [r3, #0]
 800afe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	785b      	ldrb	r3, [r3, #1]
 800afec:	2b01      	cmp	r3, #1
 800afee:	d13a      	bne.n	800b066 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aff6:	69da      	ldr	r2, [r3, #28]
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	781b      	ldrb	r3, [r3, #0]
 800affc:	f003 030f 	and.w	r3, r3, #15
 800b000:	2101      	movs	r1, #1
 800b002:	fa01 f303 	lsl.w	r3, r1, r3
 800b006:	b29b      	uxth	r3, r3
 800b008:	68f9      	ldr	r1, [r7, #12]
 800b00a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b00e:	4313      	orrs	r3, r2
 800b010:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b024:	2b00      	cmp	r3, #0
 800b026:	d155      	bne.n	800b0d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	015a      	lsls	r2, r3, #5
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	4413      	add	r3, r2
 800b030:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b034:	681a      	ldr	r2, [r3, #0]
 800b036:	683b      	ldr	r3, [r7, #0]
 800b038:	689b      	ldr	r3, [r3, #8]
 800b03a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	791b      	ldrb	r3, [r3, #4]
 800b042:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b044:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	059b      	lsls	r3, r3, #22
 800b04a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b04c:	4313      	orrs	r3, r2
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	0151      	lsls	r1, r2, #5
 800b052:	68fa      	ldr	r2, [r7, #12]
 800b054:	440a      	add	r2, r1
 800b056:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b05a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b05e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b062:	6013      	str	r3, [r2, #0]
 800b064:	e036      	b.n	800b0d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b06c:	69da      	ldr	r2, [r3, #28]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	781b      	ldrb	r3, [r3, #0]
 800b072:	f003 030f 	and.w	r3, r3, #15
 800b076:	2101      	movs	r1, #1
 800b078:	fa01 f303 	lsl.w	r3, r1, r3
 800b07c:	041b      	lsls	r3, r3, #16
 800b07e:	68f9      	ldr	r1, [r7, #12]
 800b080:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b084:	4313      	orrs	r3, r2
 800b086:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d11a      	bne.n	800b0d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	689b      	ldr	r3, [r3, #8]
 800b0b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	791b      	ldrb	r3, [r3, #4]
 800b0b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b0ba:	430b      	orrs	r3, r1
 800b0bc:	4313      	orrs	r3, r2
 800b0be:	68ba      	ldr	r2, [r7, #8]
 800b0c0:	0151      	lsls	r1, r2, #5
 800b0c2:	68fa      	ldr	r2, [r7, #12]
 800b0c4:	440a      	add	r2, r1
 800b0c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b0ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800b0d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
	...

0800b0e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b085      	sub	sp, #20
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	781b      	ldrb	r3, [r3, #0]
 800b0f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b0f8:	683b      	ldr	r3, [r7, #0]
 800b0fa:	785b      	ldrb	r3, [r3, #1]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d161      	bne.n	800b1c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	015a      	lsls	r2, r3, #5
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	4413      	add	r3, r2
 800b108:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b112:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b116:	d11f      	bne.n	800b158 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	0151      	lsls	r1, r2, #5
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	440a      	add	r2, r1
 800b12e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b132:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b136:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	015a      	lsls	r2, r3, #5
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	4413      	add	r3, r2
 800b140:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	68ba      	ldr	r2, [r7, #8]
 800b148:	0151      	lsls	r1, r2, #5
 800b14a:	68fa      	ldr	r2, [r7, #12]
 800b14c:	440a      	add	r2, r1
 800b14e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b152:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b156:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b15e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b160:	683b      	ldr	r3, [r7, #0]
 800b162:	781b      	ldrb	r3, [r3, #0]
 800b164:	f003 030f 	and.w	r3, r3, #15
 800b168:	2101      	movs	r1, #1
 800b16a:	fa01 f303 	lsl.w	r3, r1, r3
 800b16e:	b29b      	uxth	r3, r3
 800b170:	43db      	mvns	r3, r3
 800b172:	68f9      	ldr	r1, [r7, #12]
 800b174:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b178:	4013      	ands	r3, r2
 800b17a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b182:	69da      	ldr	r2, [r3, #28]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	f003 030f 	and.w	r3, r3, #15
 800b18c:	2101      	movs	r1, #1
 800b18e:	fa01 f303 	lsl.w	r3, r1, r3
 800b192:	b29b      	uxth	r3, r3
 800b194:	43db      	mvns	r3, r3
 800b196:	68f9      	ldr	r1, [r7, #12]
 800b198:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b19c:	4013      	ands	r3, r2
 800b19e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b1a0:	68bb      	ldr	r3, [r7, #8]
 800b1a2:	015a      	lsls	r2, r3, #5
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	4413      	add	r3, r2
 800b1a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ac:	681a      	ldr	r2, [r3, #0]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	0159      	lsls	r1, r3, #5
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	440b      	add	r3, r1
 800b1b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b1ba:	4619      	mov	r1, r3
 800b1bc:	4b35      	ldr	r3, [pc, #212]	@ (800b294 <USB_DeactivateEndpoint+0x1b0>)
 800b1be:	4013      	ands	r3, r2
 800b1c0:	600b      	str	r3, [r1, #0]
 800b1c2:	e060      	b.n	800b286 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	015a      	lsls	r2, r3, #5
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b1d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b1da:	d11f      	bne.n	800b21c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	0151      	lsls	r1, r2, #5
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	440a      	add	r2, r1
 800b1f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b1fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	015a      	lsls	r2, r3, #5
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	4413      	add	r3, r2
 800b204:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	0151      	lsls	r1, r2, #5
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	440a      	add	r2, r1
 800b212:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b216:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b21a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b222:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	2101      	movs	r1, #1
 800b22e:	fa01 f303 	lsl.w	r3, r1, r3
 800b232:	041b      	lsls	r3, r3, #16
 800b234:	43db      	mvns	r3, r3
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b23c:	4013      	ands	r3, r2
 800b23e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b246:	69da      	ldr	r2, [r3, #28]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	f003 030f 	and.w	r3, r3, #15
 800b250:	2101      	movs	r1, #1
 800b252:	fa01 f303 	lsl.w	r3, r1, r3
 800b256:	041b      	lsls	r3, r3, #16
 800b258:	43db      	mvns	r3, r3
 800b25a:	68f9      	ldr	r1, [r7, #12]
 800b25c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b260:	4013      	ands	r3, r2
 800b262:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	015a      	lsls	r2, r3, #5
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	4413      	add	r3, r2
 800b26c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	0159      	lsls	r1, r3, #5
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	440b      	add	r3, r1
 800b27a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b27e:	4619      	mov	r1, r3
 800b280:	4b05      	ldr	r3, [pc, #20]	@ (800b298 <USB_DeactivateEndpoint+0x1b4>)
 800b282:	4013      	ands	r3, r2
 800b284:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b286:	2300      	movs	r3, #0
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	ec337800 	.word	0xec337800
 800b298:	eff37800 	.word	0xeff37800

0800b29c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b08a      	sub	sp, #40	@ 0x28
 800b2a0:	af02      	add	r7, sp, #8
 800b2a2:	60f8      	str	r0, [r7, #12]
 800b2a4:	60b9      	str	r1, [r7, #8]
 800b2a6:	4613      	mov	r3, r2
 800b2a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	781b      	ldrb	r3, [r3, #0]
 800b2b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	785b      	ldrb	r3, [r3, #1]
 800b2b8:	2b01      	cmp	r3, #1
 800b2ba:	f040 817f 	bne.w	800b5bc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	691b      	ldr	r3, [r3, #16]
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d132      	bne.n	800b32c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2c6:	69bb      	ldr	r3, [r7, #24]
 800b2c8:	015a      	lsls	r2, r3, #5
 800b2ca:	69fb      	ldr	r3, [r7, #28]
 800b2cc:	4413      	add	r3, r2
 800b2ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2d2:	691b      	ldr	r3, [r3, #16]
 800b2d4:	69ba      	ldr	r2, [r7, #24]
 800b2d6:	0151      	lsls	r1, r2, #5
 800b2d8:	69fa      	ldr	r2, [r7, #28]
 800b2da:	440a      	add	r2, r1
 800b2dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2e0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b2e4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b2e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b2ea:	69bb      	ldr	r3, [r7, #24]
 800b2ec:	015a      	lsls	r2, r3, #5
 800b2ee:	69fb      	ldr	r3, [r7, #28]
 800b2f0:	4413      	add	r3, r2
 800b2f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2f6:	691b      	ldr	r3, [r3, #16]
 800b2f8:	69ba      	ldr	r2, [r7, #24]
 800b2fa:	0151      	lsls	r1, r2, #5
 800b2fc:	69fa      	ldr	r2, [r7, #28]
 800b2fe:	440a      	add	r2, r1
 800b300:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b304:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b308:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b30a:	69bb      	ldr	r3, [r7, #24]
 800b30c:	015a      	lsls	r2, r3, #5
 800b30e:	69fb      	ldr	r3, [r7, #28]
 800b310:	4413      	add	r3, r2
 800b312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b316:	691b      	ldr	r3, [r3, #16]
 800b318:	69ba      	ldr	r2, [r7, #24]
 800b31a:	0151      	lsls	r1, r2, #5
 800b31c:	69fa      	ldr	r2, [r7, #28]
 800b31e:	440a      	add	r2, r1
 800b320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b324:	0cdb      	lsrs	r3, r3, #19
 800b326:	04db      	lsls	r3, r3, #19
 800b328:	6113      	str	r3, [r2, #16]
 800b32a:	e097      	b.n	800b45c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b32c:	69bb      	ldr	r3, [r7, #24]
 800b32e:	015a      	lsls	r2, r3, #5
 800b330:	69fb      	ldr	r3, [r7, #28]
 800b332:	4413      	add	r3, r2
 800b334:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	69ba      	ldr	r2, [r7, #24]
 800b33c:	0151      	lsls	r1, r2, #5
 800b33e:	69fa      	ldr	r2, [r7, #28]
 800b340:	440a      	add	r2, r1
 800b342:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b346:	0cdb      	lsrs	r3, r3, #19
 800b348:	04db      	lsls	r3, r3, #19
 800b34a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b34c:	69bb      	ldr	r3, [r7, #24]
 800b34e:	015a      	lsls	r2, r3, #5
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	4413      	add	r3, r2
 800b354:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b358:	691b      	ldr	r3, [r3, #16]
 800b35a:	69ba      	ldr	r2, [r7, #24]
 800b35c:	0151      	lsls	r1, r2, #5
 800b35e:	69fa      	ldr	r2, [r7, #28]
 800b360:	440a      	add	r2, r1
 800b362:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b366:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b36a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b36e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	2b00      	cmp	r3, #0
 800b374:	d11a      	bne.n	800b3ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	691a      	ldr	r2, [r3, #16]
 800b37a:	68bb      	ldr	r3, [r7, #8]
 800b37c:	689b      	ldr	r3, [r3, #8]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d903      	bls.n	800b38a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	689a      	ldr	r2, [r3, #8]
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	015a      	lsls	r2, r3, #5
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	4413      	add	r3, r2
 800b392:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b396:	691b      	ldr	r3, [r3, #16]
 800b398:	69ba      	ldr	r2, [r7, #24]
 800b39a:	0151      	lsls	r1, r2, #5
 800b39c:	69fa      	ldr	r2, [r7, #28]
 800b39e:	440a      	add	r2, r1
 800b3a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b3a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b3a8:	6113      	str	r3, [r2, #16]
 800b3aa:	e044      	b.n	800b436 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b3ac:	68bb      	ldr	r3, [r7, #8]
 800b3ae:	691a      	ldr	r2, [r3, #16]
 800b3b0:	68bb      	ldr	r3, [r7, #8]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	1e5a      	subs	r2, r3, #1
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3c0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3ce:	691a      	ldr	r2, [r3, #16]
 800b3d0:	8afb      	ldrh	r3, [r7, #22]
 800b3d2:	04d9      	lsls	r1, r3, #19
 800b3d4:	4ba4      	ldr	r3, [pc, #656]	@ (800b668 <USB_EPStartXfer+0x3cc>)
 800b3d6:	400b      	ands	r3, r1
 800b3d8:	69b9      	ldr	r1, [r7, #24]
 800b3da:	0148      	lsls	r0, r1, #5
 800b3dc:	69f9      	ldr	r1, [r7, #28]
 800b3de:	4401      	add	r1, r0
 800b3e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b3e4:	4313      	orrs	r3, r2
 800b3e6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	791b      	ldrb	r3, [r3, #4]
 800b3ec:	2b01      	cmp	r3, #1
 800b3ee:	d122      	bne.n	800b436 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b3fc:	691b      	ldr	r3, [r3, #16]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	0151      	lsls	r1, r2, #5
 800b402:	69fa      	ldr	r2, [r7, #28]
 800b404:	440a      	add	r2, r1
 800b406:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b40a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800b40e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b41c:	691a      	ldr	r2, [r3, #16]
 800b41e:	8afb      	ldrh	r3, [r7, #22]
 800b420:	075b      	lsls	r3, r3, #29
 800b422:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800b426:	69b9      	ldr	r1, [r7, #24]
 800b428:	0148      	lsls	r0, r1, #5
 800b42a:	69f9      	ldr	r1, [r7, #28]
 800b42c:	4401      	add	r1, r0
 800b42e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b432:	4313      	orrs	r3, r2
 800b434:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b436:	69bb      	ldr	r3, [r7, #24]
 800b438:	015a      	lsls	r2, r3, #5
 800b43a:	69fb      	ldr	r3, [r7, #28]
 800b43c:	4413      	add	r3, r2
 800b43e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b442:	691a      	ldr	r2, [r3, #16]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	691b      	ldr	r3, [r3, #16]
 800b448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b44c:	69b9      	ldr	r1, [r7, #24]
 800b44e:	0148      	lsls	r0, r1, #5
 800b450:	69f9      	ldr	r1, [r7, #28]
 800b452:	4401      	add	r1, r0
 800b454:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800b458:	4313      	orrs	r3, r2
 800b45a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b45c:	79fb      	ldrb	r3, [r7, #7]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	d14b      	bne.n	800b4fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	69db      	ldr	r3, [r3, #28]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d009      	beq.n	800b47e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b46a:	69bb      	ldr	r3, [r7, #24]
 800b46c:	015a      	lsls	r2, r3, #5
 800b46e:	69fb      	ldr	r3, [r7, #28]
 800b470:	4413      	add	r3, r2
 800b472:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b476:	461a      	mov	r2, r3
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	69db      	ldr	r3, [r3, #28]
 800b47c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b47e:	68bb      	ldr	r3, [r7, #8]
 800b480:	791b      	ldrb	r3, [r3, #4]
 800b482:	2b01      	cmp	r3, #1
 800b484:	d128      	bne.n	800b4d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b486:	69fb      	ldr	r3, [r7, #28]
 800b488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b492:	2b00      	cmp	r3, #0
 800b494:	d110      	bne.n	800b4b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b496:	69bb      	ldr	r3, [r7, #24]
 800b498:	015a      	lsls	r2, r3, #5
 800b49a:	69fb      	ldr	r3, [r7, #28]
 800b49c:	4413      	add	r3, r2
 800b49e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	69ba      	ldr	r2, [r7, #24]
 800b4a6:	0151      	lsls	r1, r2, #5
 800b4a8:	69fa      	ldr	r2, [r7, #28]
 800b4aa:	440a      	add	r2, r1
 800b4ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b4b4:	6013      	str	r3, [r2, #0]
 800b4b6:	e00f      	b.n	800b4d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b4b8:	69bb      	ldr	r3, [r7, #24]
 800b4ba:	015a      	lsls	r2, r3, #5
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	4413      	add	r3, r2
 800b4c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	69ba      	ldr	r2, [r7, #24]
 800b4c8:	0151      	lsls	r1, r2, #5
 800b4ca:	69fa      	ldr	r2, [r7, #28]
 800b4cc:	440a      	add	r2, r1
 800b4ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b4d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4d8:	69bb      	ldr	r3, [r7, #24]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	69fb      	ldr	r3, [r7, #28]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	69ba      	ldr	r2, [r7, #24]
 800b4e8:	0151      	lsls	r1, r2, #5
 800b4ea:	69fa      	ldr	r2, [r7, #28]
 800b4ec:	440a      	add	r2, r1
 800b4ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b4f6:	6013      	str	r3, [r2, #0]
 800b4f8:	e166      	b.n	800b7c8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4fa:	69bb      	ldr	r3, [r7, #24]
 800b4fc:	015a      	lsls	r2, r3, #5
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	4413      	add	r3, r2
 800b502:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	69ba      	ldr	r2, [r7, #24]
 800b50a:	0151      	lsls	r1, r2, #5
 800b50c:	69fa      	ldr	r2, [r7, #28]
 800b50e:	440a      	add	r2, r1
 800b510:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b514:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b518:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	791b      	ldrb	r3, [r3, #4]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d015      	beq.n	800b54e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	2b00      	cmp	r3, #0
 800b528:	f000 814e 	beq.w	800b7c8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b532:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	781b      	ldrb	r3, [r3, #0]
 800b538:	f003 030f 	and.w	r3, r3, #15
 800b53c:	2101      	movs	r1, #1
 800b53e:	fa01 f303 	lsl.w	r3, r1, r3
 800b542:	69f9      	ldr	r1, [r7, #28]
 800b544:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b548:	4313      	orrs	r3, r2
 800b54a:	634b      	str	r3, [r1, #52]	@ 0x34
 800b54c:	e13c      	b.n	800b7c8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b554:	689b      	ldr	r3, [r3, #8]
 800b556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d110      	bne.n	800b580 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b55e:	69bb      	ldr	r3, [r7, #24]
 800b560:	015a      	lsls	r2, r3, #5
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	4413      	add	r3, r2
 800b566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	69ba      	ldr	r2, [r7, #24]
 800b56e:	0151      	lsls	r1, r2, #5
 800b570:	69fa      	ldr	r2, [r7, #28]
 800b572:	440a      	add	r2, r1
 800b574:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b578:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b57c:	6013      	str	r3, [r2, #0]
 800b57e:	e00f      	b.n	800b5a0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b580:	69bb      	ldr	r3, [r7, #24]
 800b582:	015a      	lsls	r2, r3, #5
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	4413      	add	r3, r2
 800b588:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	69ba      	ldr	r2, [r7, #24]
 800b590:	0151      	lsls	r1, r2, #5
 800b592:	69fa      	ldr	r2, [r7, #28]
 800b594:	440a      	add	r2, r1
 800b596:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b59a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b59e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	68d9      	ldr	r1, [r3, #12]
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	781a      	ldrb	r2, [r3, #0]
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	691b      	ldr	r3, [r3, #16]
 800b5ac:	b298      	uxth	r0, r3
 800b5ae:	79fb      	ldrb	r3, [r7, #7]
 800b5b0:	9300      	str	r3, [sp, #0]
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	68f8      	ldr	r0, [r7, #12]
 800b5b6:	f000 f9b9 	bl	800b92c <USB_WritePacket>
 800b5ba:	e105      	b.n	800b7c8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5bc:	69bb      	ldr	r3, [r7, #24]
 800b5be:	015a      	lsls	r2, r3, #5
 800b5c0:	69fb      	ldr	r3, [r7, #28]
 800b5c2:	4413      	add	r3, r2
 800b5c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5c8:	691b      	ldr	r3, [r3, #16]
 800b5ca:	69ba      	ldr	r2, [r7, #24]
 800b5cc:	0151      	lsls	r1, r2, #5
 800b5ce:	69fa      	ldr	r2, [r7, #28]
 800b5d0:	440a      	add	r2, r1
 800b5d2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5d6:	0cdb      	lsrs	r3, r3, #19
 800b5d8:	04db      	lsls	r3, r3, #19
 800b5da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	015a      	lsls	r2, r3, #5
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	69ba      	ldr	r2, [r7, #24]
 800b5ec:	0151      	lsls	r1, r2, #5
 800b5ee:	69fa      	ldr	r2, [r7, #28]
 800b5f0:	440a      	add	r2, r1
 800b5f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b5f6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b5fa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b5fe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d132      	bne.n	800b66c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	691b      	ldr	r3, [r3, #16]
 800b60a:	2b00      	cmp	r3, #0
 800b60c:	d003      	beq.n	800b616 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	689a      	ldr	r2, [r3, #8]
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b616:	68bb      	ldr	r3, [r7, #8]
 800b618:	689a      	ldr	r2, [r3, #8]
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b61e:	69bb      	ldr	r3, [r7, #24]
 800b620:	015a      	lsls	r2, r3, #5
 800b622:	69fb      	ldr	r3, [r7, #28]
 800b624:	4413      	add	r3, r2
 800b626:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b62a:	691a      	ldr	r2, [r3, #16]
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	6a1b      	ldr	r3, [r3, #32]
 800b630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b634:	69b9      	ldr	r1, [r7, #24]
 800b636:	0148      	lsls	r0, r1, #5
 800b638:	69f9      	ldr	r1, [r7, #28]
 800b63a:	4401      	add	r1, r0
 800b63c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b640:	4313      	orrs	r3, r2
 800b642:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	015a      	lsls	r2, r3, #5
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	4413      	add	r3, r2
 800b64c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b650:	691b      	ldr	r3, [r3, #16]
 800b652:	69ba      	ldr	r2, [r7, #24]
 800b654:	0151      	lsls	r1, r2, #5
 800b656:	69fa      	ldr	r2, [r7, #28]
 800b658:	440a      	add	r2, r1
 800b65a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b65e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b662:	6113      	str	r3, [r2, #16]
 800b664:	e062      	b.n	800b72c <USB_EPStartXfer+0x490>
 800b666:	bf00      	nop
 800b668:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	691b      	ldr	r3, [r3, #16]
 800b670:	2b00      	cmp	r3, #0
 800b672:	d123      	bne.n	800b6bc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b674:	69bb      	ldr	r3, [r7, #24]
 800b676:	015a      	lsls	r2, r3, #5
 800b678:	69fb      	ldr	r3, [r7, #28]
 800b67a:	4413      	add	r3, r2
 800b67c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b680:	691a      	ldr	r2, [r3, #16]
 800b682:	68bb      	ldr	r3, [r7, #8]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b68a:	69b9      	ldr	r1, [r7, #24]
 800b68c:	0148      	lsls	r0, r1, #5
 800b68e:	69f9      	ldr	r1, [r7, #28]
 800b690:	4401      	add	r1, r0
 800b692:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b696:	4313      	orrs	r3, r2
 800b698:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	015a      	lsls	r2, r3, #5
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	69ba      	ldr	r2, [r7, #24]
 800b6aa:	0151      	lsls	r1, r2, #5
 800b6ac:	69fa      	ldr	r2, [r7, #28]
 800b6ae:	440a      	add	r2, r1
 800b6b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b6b4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b6b8:	6113      	str	r3, [r2, #16]
 800b6ba:	e037      	b.n	800b72c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b6bc:	68bb      	ldr	r3, [r7, #8]
 800b6be:	691a      	ldr	r2, [r3, #16]
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	689b      	ldr	r3, [r3, #8]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	1e5a      	subs	r2, r3, #1
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6d0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b6d2:	68bb      	ldr	r3, [r7, #8]
 800b6d4:	689b      	ldr	r3, [r3, #8]
 800b6d6:	8afa      	ldrh	r2, [r7, #22]
 800b6d8:	fb03 f202 	mul.w	r2, r3, r2
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b6ec:	691a      	ldr	r2, [r3, #16]
 800b6ee:	8afb      	ldrh	r3, [r7, #22]
 800b6f0:	04d9      	lsls	r1, r3, #19
 800b6f2:	4b38      	ldr	r3, [pc, #224]	@ (800b7d4 <USB_EPStartXfer+0x538>)
 800b6f4:	400b      	ands	r3, r1
 800b6f6:	69b9      	ldr	r1, [r7, #24]
 800b6f8:	0148      	lsls	r0, r1, #5
 800b6fa:	69f9      	ldr	r1, [r7, #28]
 800b6fc:	4401      	add	r1, r0
 800b6fe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b702:	4313      	orrs	r3, r2
 800b704:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b706:	69bb      	ldr	r3, [r7, #24]
 800b708:	015a      	lsls	r2, r3, #5
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	4413      	add	r3, r2
 800b70e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b712:	691a      	ldr	r2, [r3, #16]
 800b714:	68bb      	ldr	r3, [r7, #8]
 800b716:	6a1b      	ldr	r3, [r3, #32]
 800b718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b71c:	69b9      	ldr	r1, [r7, #24]
 800b71e:	0148      	lsls	r0, r1, #5
 800b720:	69f9      	ldr	r1, [r7, #28]
 800b722:	4401      	add	r1, r0
 800b724:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b728:	4313      	orrs	r3, r2
 800b72a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b72c:	79fb      	ldrb	r3, [r7, #7]
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d10d      	bne.n	800b74e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b732:	68bb      	ldr	r3, [r7, #8]
 800b734:	68db      	ldr	r3, [r3, #12]
 800b736:	2b00      	cmp	r3, #0
 800b738:	d009      	beq.n	800b74e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	68d9      	ldr	r1, [r3, #12]
 800b73e:	69bb      	ldr	r3, [r7, #24]
 800b740:	015a      	lsls	r2, r3, #5
 800b742:	69fb      	ldr	r3, [r7, #28]
 800b744:	4413      	add	r3, r2
 800b746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b74a:	460a      	mov	r2, r1
 800b74c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	791b      	ldrb	r3, [r3, #4]
 800b752:	2b01      	cmp	r3, #1
 800b754:	d128      	bne.n	800b7a8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b756:	69fb      	ldr	r3, [r7, #28]
 800b758:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b75c:	689b      	ldr	r3, [r3, #8]
 800b75e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b762:	2b00      	cmp	r3, #0
 800b764:	d110      	bne.n	800b788 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	015a      	lsls	r2, r3, #5
 800b76a:	69fb      	ldr	r3, [r7, #28]
 800b76c:	4413      	add	r3, r2
 800b76e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	69ba      	ldr	r2, [r7, #24]
 800b776:	0151      	lsls	r1, r2, #5
 800b778:	69fa      	ldr	r2, [r7, #28]
 800b77a:	440a      	add	r2, r1
 800b77c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b780:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b784:	6013      	str	r3, [r2, #0]
 800b786:	e00f      	b.n	800b7a8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b788:	69bb      	ldr	r3, [r7, #24]
 800b78a:	015a      	lsls	r2, r3, #5
 800b78c:	69fb      	ldr	r3, [r7, #28]
 800b78e:	4413      	add	r3, r2
 800b790:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	69ba      	ldr	r2, [r7, #24]
 800b798:	0151      	lsls	r1, r2, #5
 800b79a:	69fa      	ldr	r2, [r7, #28]
 800b79c:	440a      	add	r2, r1
 800b79e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b7a6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	015a      	lsls	r2, r3, #5
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	69ba      	ldr	r2, [r7, #24]
 800b7b8:	0151      	lsls	r1, r2, #5
 800b7ba:	69fa      	ldr	r2, [r7, #28]
 800b7bc:	440a      	add	r2, r1
 800b7be:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b7c2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b7c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	3720      	adds	r7, #32
 800b7ce:	46bd      	mov	sp, r7
 800b7d0:	bd80      	pop	{r7, pc}
 800b7d2:	bf00      	nop
 800b7d4:	1ff80000 	.word	0x1ff80000

0800b7d8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b7d8:	b480      	push	{r7}
 800b7da:	b087      	sub	sp, #28
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	785b      	ldrb	r3, [r3, #1]
 800b7f2:	2b01      	cmp	r3, #1
 800b7f4:	d14a      	bne.n	800b88c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	781b      	ldrb	r3, [r3, #0]
 800b7fa:	015a      	lsls	r2, r3, #5
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	4413      	add	r3, r2
 800b800:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b80a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b80e:	f040 8086 	bne.w	800b91e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	7812      	ldrb	r2, [r2, #0]
 800b826:	0151      	lsls	r1, r2, #5
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	440a      	add	r2, r1
 800b82c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b830:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b834:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	781b      	ldrb	r3, [r3, #0]
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	683a      	ldr	r2, [r7, #0]
 800b848:	7812      	ldrb	r2, [r2, #0]
 800b84a:	0151      	lsls	r1, r2, #5
 800b84c:	693a      	ldr	r2, [r7, #16]
 800b84e:	440a      	add	r2, r1
 800b850:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b854:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b858:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	3301      	adds	r3, #1
 800b85e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b866:	4293      	cmp	r3, r2
 800b868:	d902      	bls.n	800b870 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	75fb      	strb	r3, [r7, #23]
          break;
 800b86e:	e056      	b.n	800b91e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	015a      	lsls	r2, r3, #5
 800b876:	693b      	ldr	r3, [r7, #16]
 800b878:	4413      	add	r3, r2
 800b87a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b888:	d0e7      	beq.n	800b85a <USB_EPStopXfer+0x82>
 800b88a:	e048      	b.n	800b91e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	781b      	ldrb	r3, [r3, #0]
 800b890:	015a      	lsls	r2, r3, #5
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	4413      	add	r3, r2
 800b896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b8a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8a4:	d13b      	bne.n	800b91e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	015a      	lsls	r2, r3, #5
 800b8ac:	693b      	ldr	r3, [r7, #16]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	683a      	ldr	r2, [r7, #0]
 800b8b8:	7812      	ldrb	r2, [r2, #0]
 800b8ba:	0151      	lsls	r1, r2, #5
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	440a      	add	r2, r1
 800b8c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8c4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b8c8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	781b      	ldrb	r3, [r3, #0]
 800b8ce:	015a      	lsls	r2, r3, #5
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	4413      	add	r3, r2
 800b8d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	683a      	ldr	r2, [r7, #0]
 800b8dc:	7812      	ldrb	r2, [r2, #0]
 800b8de:	0151      	lsls	r1, r2, #5
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	440a      	add	r2, r1
 800b8e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b8e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b8ec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d902      	bls.n	800b904 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b8fe:	2301      	movs	r3, #1
 800b900:	75fb      	strb	r3, [r7, #23]
          break;
 800b902:	e00c      	b.n	800b91e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	781b      	ldrb	r3, [r3, #0]
 800b908:	015a      	lsls	r2, r3, #5
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	4413      	add	r3, r2
 800b90e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b918:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b91c:	d0e7      	beq.n	800b8ee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b920:	4618      	mov	r0, r3
 800b922:	371c      	adds	r7, #28
 800b924:	46bd      	mov	sp, r7
 800b926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b92a:	4770      	bx	lr

0800b92c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b089      	sub	sp, #36	@ 0x24
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	4611      	mov	r1, r2
 800b938:	461a      	mov	r2, r3
 800b93a:	460b      	mov	r3, r1
 800b93c:	71fb      	strb	r3, [r7, #7]
 800b93e:	4613      	mov	r3, r2
 800b940:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b94a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d123      	bne.n	800b99a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b952:	88bb      	ldrh	r3, [r7, #4]
 800b954:	3303      	adds	r3, #3
 800b956:	089b      	lsrs	r3, r3, #2
 800b958:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b95a:	2300      	movs	r3, #0
 800b95c:	61bb      	str	r3, [r7, #24]
 800b95e:	e018      	b.n	800b992 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b960:	79fb      	ldrb	r3, [r7, #7]
 800b962:	031a      	lsls	r2, r3, #12
 800b964:	697b      	ldr	r3, [r7, #20]
 800b966:	4413      	add	r3, r2
 800b968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b96c:	461a      	mov	r2, r3
 800b96e:	69fb      	ldr	r3, [r7, #28]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b974:	69fb      	ldr	r3, [r7, #28]
 800b976:	3301      	adds	r3, #1
 800b978:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b97a:	69fb      	ldr	r3, [r7, #28]
 800b97c:	3301      	adds	r3, #1
 800b97e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b980:	69fb      	ldr	r3, [r7, #28]
 800b982:	3301      	adds	r3, #1
 800b984:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b986:	69fb      	ldr	r3, [r7, #28]
 800b988:	3301      	adds	r3, #1
 800b98a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b98c:	69bb      	ldr	r3, [r7, #24]
 800b98e:	3301      	adds	r3, #1
 800b990:	61bb      	str	r3, [r7, #24]
 800b992:	69ba      	ldr	r2, [r7, #24]
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	429a      	cmp	r2, r3
 800b998:	d3e2      	bcc.n	800b960 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b99a:	2300      	movs	r3, #0
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3724      	adds	r7, #36	@ 0x24
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9a6:	4770      	bx	lr

0800b9a8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b08b      	sub	sp, #44	@ 0x2c
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	60f8      	str	r0, [r7, #12]
 800b9b0:	60b9      	str	r1, [r7, #8]
 800b9b2:	4613      	mov	r3, r2
 800b9b4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b9be:	88fb      	ldrh	r3, [r7, #6]
 800b9c0:	089b      	lsrs	r3, r3, #2
 800b9c2:	b29b      	uxth	r3, r3
 800b9c4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b9c6:	88fb      	ldrh	r3, [r7, #6]
 800b9c8:	f003 0303 	and.w	r3, r3, #3
 800b9cc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	623b      	str	r3, [r7, #32]
 800b9d2:	e014      	b.n	800b9fe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b9d4:	69bb      	ldr	r3, [r7, #24]
 800b9d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b9da:	681a      	ldr	r2, [r3, #0]
 800b9dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9de:	601a      	str	r2, [r3, #0]
    pDest++;
 800b9e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e2:	3301      	adds	r3, #1
 800b9e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9e8:	3301      	adds	r3, #1
 800b9ea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9ee:	3301      	adds	r3, #1
 800b9f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b9f8:	6a3b      	ldr	r3, [r7, #32]
 800b9fa:	3301      	adds	r3, #1
 800b9fc:	623b      	str	r3, [r7, #32]
 800b9fe:	6a3a      	ldr	r2, [r7, #32]
 800ba00:	697b      	ldr	r3, [r7, #20]
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d3e6      	bcc.n	800b9d4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ba06:	8bfb      	ldrh	r3, [r7, #30]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d01e      	beq.n	800ba4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ba10:	69bb      	ldr	r3, [r7, #24]
 800ba12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ba16:	461a      	mov	r2, r3
 800ba18:	f107 0310 	add.w	r3, r7, #16
 800ba1c:	6812      	ldr	r2, [r2, #0]
 800ba1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ba20:	693a      	ldr	r2, [r7, #16]
 800ba22:	6a3b      	ldr	r3, [r7, #32]
 800ba24:	b2db      	uxtb	r3, r3
 800ba26:	00db      	lsls	r3, r3, #3
 800ba28:	fa22 f303 	lsr.w	r3, r2, r3
 800ba2c:	b2da      	uxtb	r2, r3
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba30:	701a      	strb	r2, [r3, #0]
      i++;
 800ba32:	6a3b      	ldr	r3, [r7, #32]
 800ba34:	3301      	adds	r3, #1
 800ba36:	623b      	str	r3, [r7, #32]
      pDest++;
 800ba38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba3a:	3301      	adds	r3, #1
 800ba3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800ba3e:	8bfb      	ldrh	r3, [r7, #30]
 800ba40:	3b01      	subs	r3, #1
 800ba42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ba44:	8bfb      	ldrh	r3, [r7, #30]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d1ea      	bne.n	800ba20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	372c      	adds	r7, #44	@ 0x2c
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b085      	sub	sp, #20
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	781b      	ldrb	r3, [r3, #0]
 800ba6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba6c:	683b      	ldr	r3, [r7, #0]
 800ba6e:	785b      	ldrb	r3, [r3, #1]
 800ba70:	2b01      	cmp	r3, #1
 800ba72:	d12c      	bne.n	800bace <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	015a      	lsls	r2, r3, #5
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	db12      	blt.n	800baac <USB_EPSetStall+0x54>
 800ba86:	68bb      	ldr	r3, [r7, #8]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d00f      	beq.n	800baac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	015a      	lsls	r2, r3, #5
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	4413      	add	r3, r2
 800ba94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68ba      	ldr	r2, [r7, #8]
 800ba9c:	0151      	lsls	r1, r2, #5
 800ba9e:	68fa      	ldr	r2, [r7, #12]
 800baa0:	440a      	add	r2, r1
 800baa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800baa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800baaa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800baac:	68bb      	ldr	r3, [r7, #8]
 800baae:	015a      	lsls	r2, r3, #5
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	4413      	add	r3, r2
 800bab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	0151      	lsls	r1, r2, #5
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	440a      	add	r2, r1
 800bac2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bac6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800baca:	6013      	str	r3, [r2, #0]
 800bacc:	e02b      	b.n	800bb26 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bace:	68bb      	ldr	r3, [r7, #8]
 800bad0:	015a      	lsls	r2, r3, #5
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	4413      	add	r3, r2
 800bad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	2b00      	cmp	r3, #0
 800bade:	db12      	blt.n	800bb06 <USB_EPSetStall+0xae>
 800bae0:	68bb      	ldr	r3, [r7, #8]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d00f      	beq.n	800bb06 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bae6:	68bb      	ldr	r3, [r7, #8]
 800bae8:	015a      	lsls	r2, r3, #5
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	4413      	add	r3, r2
 800baee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68ba      	ldr	r2, [r7, #8]
 800baf6:	0151      	lsls	r1, r2, #5
 800baf8:	68fa      	ldr	r2, [r7, #12]
 800bafa:	440a      	add	r2, r1
 800bafc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb00:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800bb04:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	015a      	lsls	r2, r3, #5
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	68ba      	ldr	r2, [r7, #8]
 800bb16:	0151      	lsls	r1, r2, #5
 800bb18:	68fa      	ldr	r2, [r7, #12]
 800bb1a:	440a      	add	r2, r1
 800bb1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bb20:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800bb24:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3714      	adds	r7, #20
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb32:	4770      	bx	lr

0800bb34 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800bb34:	b480      	push	{r7}
 800bb36:	b085      	sub	sp, #20
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	781b      	ldrb	r3, [r3, #0]
 800bb46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bb48:	683b      	ldr	r3, [r7, #0]
 800bb4a:	785b      	ldrb	r3, [r3, #1]
 800bb4c:	2b01      	cmp	r3, #1
 800bb4e:	d128      	bne.n	800bba2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	015a      	lsls	r2, r3, #5
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	4413      	add	r3, r2
 800bb58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	68ba      	ldr	r2, [r7, #8]
 800bb60:	0151      	lsls	r1, r2, #5
 800bb62:	68fa      	ldr	r2, [r7, #12]
 800bb64:	440a      	add	r2, r1
 800bb66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb6a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bb6e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	791b      	ldrb	r3, [r3, #4]
 800bb74:	2b03      	cmp	r3, #3
 800bb76:	d003      	beq.n	800bb80 <USB_EPClearStall+0x4c>
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	791b      	ldrb	r3, [r3, #4]
 800bb7c:	2b02      	cmp	r3, #2
 800bb7e:	d138      	bne.n	800bbf2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	0151      	lsls	r1, r2, #5
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	440a      	add	r2, r1
 800bb96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800bb9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bb9e:	6013      	str	r3, [r2, #0]
 800bba0:	e027      	b.n	800bbf2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bba2:	68bb      	ldr	r3, [r7, #8]
 800bba4:	015a      	lsls	r2, r3, #5
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	4413      	add	r3, r2
 800bbaa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	68ba      	ldr	r2, [r7, #8]
 800bbb2:	0151      	lsls	r1, r2, #5
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	440a      	add	r2, r1
 800bbb8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbbc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800bbc0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	791b      	ldrb	r3, [r3, #4]
 800bbc6:	2b03      	cmp	r3, #3
 800bbc8:	d003      	beq.n	800bbd2 <USB_EPClearStall+0x9e>
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	791b      	ldrb	r3, [r3, #4]
 800bbce:	2b02      	cmp	r3, #2
 800bbd0:	d10f      	bne.n	800bbf2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bbd2:	68bb      	ldr	r3, [r7, #8]
 800bbd4:	015a      	lsls	r2, r3, #5
 800bbd6:	68fb      	ldr	r3, [r7, #12]
 800bbd8:	4413      	add	r3, r2
 800bbda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	68ba      	ldr	r2, [r7, #8]
 800bbe2:	0151      	lsls	r1, r2, #5
 800bbe4:	68fa      	ldr	r2, [r7, #12]
 800bbe6:	440a      	add	r2, r1
 800bbe8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bbec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800bbf0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bbf2:	2300      	movs	r3, #0
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3714      	adds	r7, #20
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfe:	4770      	bx	lr

0800bc00 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bc00:	b480      	push	{r7}
 800bc02:	b085      	sub	sp, #20
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800bc22:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc2a:	681a      	ldr	r2, [r3, #0]
 800bc2c:	78fb      	ldrb	r3, [r7, #3]
 800bc2e:	011b      	lsls	r3, r3, #4
 800bc30:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800bc34:	68f9      	ldr	r1, [r7, #12]
 800bc36:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800bc3a:	4313      	orrs	r3, r2
 800bc3c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bc3e:	2300      	movs	r3, #0
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3714      	adds	r7, #20
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc4c:	b480      	push	{r7}
 800bc4e:	b085      	sub	sp, #20
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bc66:	f023 0303 	bic.w	r3, r3, #3
 800bc6a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bc6c:	68fb      	ldr	r3, [r7, #12]
 800bc6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bc72:	685b      	ldr	r3, [r3, #4]
 800bc74:	68fa      	ldr	r2, [r7, #12]
 800bc76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bc7a:	f023 0302 	bic.w	r3, r3, #2
 800bc7e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr

0800bc8e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc8e:	b480      	push	{r7}
 800bc90:	b085      	sub	sp, #20
 800bc92:	af00      	add	r7, sp, #0
 800bc94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800bca0:	681b      	ldr	r3, [r3, #0]
 800bca2:	68fa      	ldr	r2, [r7, #12]
 800bca4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800bca8:	f023 0303 	bic.w	r3, r3, #3
 800bcac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	68fa      	ldr	r2, [r7, #12]
 800bcb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800bcbc:	f043 0302 	orr.w	r3, r3, #2
 800bcc0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bcc2:	2300      	movs	r3, #0
}
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	3714      	adds	r7, #20
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcce:	4770      	bx	lr

0800bcd0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bcd0:	b480      	push	{r7}
 800bcd2:	b085      	sub	sp, #20
 800bcd4:	af00      	add	r7, sp, #0
 800bcd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	695b      	ldr	r3, [r3, #20]
 800bcdc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	699b      	ldr	r3, [r3, #24]
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	4013      	ands	r3, r2
 800bce6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bce8:	68fb      	ldr	r3, [r7, #12]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr

0800bcf6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b085      	sub	sp, #20
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd08:	699b      	ldr	r3, [r3, #24]
 800bd0a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd12:	69db      	ldr	r3, [r3, #28]
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	4013      	ands	r3, r2
 800bd18:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	0c1b      	lsrs	r3, r3, #16
}
 800bd1e:	4618      	mov	r0, r3
 800bd20:	3714      	adds	r7, #20
 800bd22:	46bd      	mov	sp, r7
 800bd24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd28:	4770      	bx	lr

0800bd2a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b085      	sub	sp, #20
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd3c:	699b      	ldr	r3, [r3, #24]
 800bd3e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd46:	69db      	ldr	r3, [r3, #28]
 800bd48:	68ba      	ldr	r2, [r7, #8]
 800bd4a:	4013      	ands	r3, r2
 800bd4c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	b29b      	uxth	r3, r3
}
 800bd52:	4618      	mov	r0, r3
 800bd54:	3714      	adds	r7, #20
 800bd56:	46bd      	mov	sp, r7
 800bd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5c:	4770      	bx	lr

0800bd5e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd5e:	b480      	push	{r7}
 800bd60:	b085      	sub	sp, #20
 800bd62:	af00      	add	r7, sp, #0
 800bd64:	6078      	str	r0, [r7, #4]
 800bd66:	460b      	mov	r3, r1
 800bd68:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bd6e:	78fb      	ldrb	r3, [r7, #3]
 800bd70:	015a      	lsls	r2, r3, #5
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	4413      	add	r3, r2
 800bd76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bd84:	695b      	ldr	r3, [r3, #20]
 800bd86:	68ba      	ldr	r2, [r7, #8]
 800bd88:	4013      	ands	r3, r2
 800bd8a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd8c:	68bb      	ldr	r3, [r7, #8]
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3714      	adds	r7, #20
 800bd92:	46bd      	mov	sp, r7
 800bd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd98:	4770      	bx	lr

0800bd9a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd9a:	b480      	push	{r7}
 800bd9c:	b087      	sub	sp, #28
 800bd9e:	af00      	add	r7, sp, #0
 800bda0:	6078      	str	r0, [r7, #4]
 800bda2:	460b      	mov	r3, r1
 800bda4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdb0:	691b      	ldr	r3, [r3, #16]
 800bdb2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800bdba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bdbc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bdbe:	78fb      	ldrb	r3, [r7, #3]
 800bdc0:	f003 030f 	and.w	r3, r3, #15
 800bdc4:	68fa      	ldr	r2, [r7, #12]
 800bdc6:	fa22 f303 	lsr.w	r3, r2, r3
 800bdca:	01db      	lsls	r3, r3, #7
 800bdcc:	b2db      	uxtb	r3, r3
 800bdce:	693a      	ldr	r2, [r7, #16]
 800bdd0:	4313      	orrs	r3, r2
 800bdd2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bdd4:	78fb      	ldrb	r3, [r7, #3]
 800bdd6:	015a      	lsls	r2, r3, #5
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	4413      	add	r3, r2
 800bddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800bde0:	689b      	ldr	r3, [r3, #8]
 800bde2:	693a      	ldr	r2, [r7, #16]
 800bde4:	4013      	ands	r3, r2
 800bde6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bde8:	68bb      	ldr	r3, [r7, #8]
}
 800bdea:	4618      	mov	r0, r3
 800bdec:	371c      	adds	r7, #28
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bdf6:	b480      	push	{r7}
 800bdf8:	b083      	sub	sp, #12
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	695b      	ldr	r3, [r3, #20]
 800be02:	f003 0301 	and.w	r3, r3, #1
}
 800be06:	4618      	mov	r0, r3
 800be08:	370c      	adds	r7, #12
 800be0a:	46bd      	mov	sp, r7
 800be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be10:	4770      	bx	lr

0800be12 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800be12:	b480      	push	{r7}
 800be14:	b085      	sub	sp, #20
 800be16:	af00      	add	r7, sp, #0
 800be18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	68fa      	ldr	r2, [r7, #12]
 800be28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800be2c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800be30:	f023 0307 	bic.w	r3, r3, #7
 800be34:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800be3c:	685b      	ldr	r3, [r3, #4]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800be44:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800be48:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800be4a:	2300      	movs	r3, #0
}
 800be4c:	4618      	mov	r0, r3
 800be4e:	3714      	adds	r7, #20
 800be50:	46bd      	mov	sp, r7
 800be52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be56:	4770      	bx	lr

0800be58 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800be58:	b480      	push	{r7}
 800be5a:	b087      	sub	sp, #28
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	60f8      	str	r0, [r7, #12]
 800be60:	460b      	mov	r3, r1
 800be62:	607a      	str	r2, [r7, #4]
 800be64:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	333c      	adds	r3, #60	@ 0x3c
 800be6e:	3304      	adds	r3, #4
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800be74:	693b      	ldr	r3, [r7, #16]
 800be76:	4a26      	ldr	r2, [pc, #152]	@ (800bf10 <USB_EP0_OutStart+0xb8>)
 800be78:	4293      	cmp	r3, r2
 800be7a:	d90a      	bls.n	800be92 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800be88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800be8c:	d101      	bne.n	800be92 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	e037      	b.n	800bf02 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800be92:	697b      	ldr	r3, [r7, #20]
 800be94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800be98:	461a      	mov	r2, r3
 800be9a:	2300      	movs	r3, #0
 800be9c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be9e:	697b      	ldr	r3, [r7, #20]
 800bea0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bea4:	691b      	ldr	r3, [r3, #16]
 800bea6:	697a      	ldr	r2, [r7, #20]
 800bea8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800beac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800beb0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800beb2:	697b      	ldr	r3, [r7, #20]
 800beb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	697a      	ldr	r2, [r7, #20]
 800bebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bec0:	f043 0318 	orr.w	r3, r3, #24
 800bec4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bec6:	697b      	ldr	r3, [r7, #20]
 800bec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	697a      	ldr	r2, [r7, #20]
 800bed0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800bed4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800bed8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800beda:	7afb      	ldrb	r3, [r7, #11]
 800bedc:	2b01      	cmp	r3, #1
 800bede:	d10f      	bne.n	800bf00 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bee6:	461a      	mov	r2, r3
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800beec:	697b      	ldr	r3, [r7, #20]
 800beee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	697a      	ldr	r2, [r7, #20]
 800bef6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800befa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800befe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	371c      	adds	r7, #28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr
 800bf0e:	bf00      	nop
 800bf10:	4f54300a 	.word	0x4f54300a

0800bf14 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bf14:	b480      	push	{r7}
 800bf16:	b085      	sub	sp, #20
 800bf18:	af00      	add	r7, sp, #0
 800bf1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	3301      	adds	r3, #1
 800bf24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf2c:	d901      	bls.n	800bf32 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bf2e:	2303      	movs	r3, #3
 800bf30:	e022      	b.n	800bf78 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	daf2      	bge.n	800bf20 <USB_CoreReset+0xc>

  count = 10U;
 800bf3a:	230a      	movs	r3, #10
 800bf3c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800bf3e:	e002      	b.n	800bf46 <USB_CoreReset+0x32>
  {
    count--;
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	3b01      	subs	r3, #1
 800bf44:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d1f9      	bne.n	800bf40 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	691b      	ldr	r3, [r3, #16]
 800bf50:	f043 0201 	orr.w	r2, r3, #1
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bf64:	d901      	bls.n	800bf6a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800bf66:	2303      	movs	r3, #3
 800bf68:	e006      	b.n	800bf78 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	f003 0301 	and.w	r3, r3, #1
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d0f0      	beq.n	800bf58 <USB_CoreReset+0x44>

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr

0800bf84 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b084      	sub	sp, #16
 800bf88:	af00      	add	r7, sp, #0
 800bf8a:	6078      	str	r0, [r7, #4]
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bf90:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800bf94:	f002 fd1e 	bl	800e9d4 <USBD_static_malloc>
 800bf98:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d109      	bne.n	800bfb4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	32b0      	adds	r2, #176	@ 0xb0
 800bfaa:	2100      	movs	r1, #0
 800bfac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e0d4      	b.n	800c15e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bfb4:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800bfb8:	2100      	movs	r1, #0
 800bfba:	68f8      	ldr	r0, [r7, #12]
 800bfbc:	f002 fd84 	bl	800eac8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	32b0      	adds	r2, #176	@ 0xb0
 800bfca:	68f9      	ldr	r1, [r7, #12]
 800bfcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	32b0      	adds	r2, #176	@ 0xb0
 800bfda:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	7c1b      	ldrb	r3, [r3, #16]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d138      	bne.n	800c05e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bfec:	4b5e      	ldr	r3, [pc, #376]	@ (800c168 <USBD_CDC_Init+0x1e4>)
 800bfee:	7819      	ldrb	r1, [r3, #0]
 800bff0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bff4:	2202      	movs	r2, #2
 800bff6:	6878      	ldr	r0, [r7, #4]
 800bff8:	f002 fbc9 	bl	800e78e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bffc:	4b5a      	ldr	r3, [pc, #360]	@ (800c168 <USBD_CDC_Init+0x1e4>)
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	f003 020f 	and.w	r2, r3, #15
 800c004:	6879      	ldr	r1, [r7, #4]
 800c006:	4613      	mov	r3, r2
 800c008:	009b      	lsls	r3, r3, #2
 800c00a:	4413      	add	r3, r2
 800c00c:	009b      	lsls	r3, r3, #2
 800c00e:	440b      	add	r3, r1
 800c010:	3323      	adds	r3, #35	@ 0x23
 800c012:	2201      	movs	r2, #1
 800c014:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c016:	4b55      	ldr	r3, [pc, #340]	@ (800c16c <USBD_CDC_Init+0x1e8>)
 800c018:	7819      	ldrb	r1, [r3, #0]
 800c01a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c01e:	2202      	movs	r2, #2
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f002 fbb4 	bl	800e78e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c026:	4b51      	ldr	r3, [pc, #324]	@ (800c16c <USBD_CDC_Init+0x1e8>)
 800c028:	781b      	ldrb	r3, [r3, #0]
 800c02a:	f003 020f 	and.w	r2, r3, #15
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	4613      	mov	r3, r2
 800c032:	009b      	lsls	r3, r3, #2
 800c034:	4413      	add	r3, r2
 800c036:	009b      	lsls	r3, r3, #2
 800c038:	440b      	add	r3, r1
 800c03a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c03e:	2201      	movs	r2, #1
 800c040:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c042:	4b4b      	ldr	r3, [pc, #300]	@ (800c170 <USBD_CDC_Init+0x1ec>)
 800c044:	781b      	ldrb	r3, [r3, #0]
 800c046:	f003 020f 	and.w	r2, r3, #15
 800c04a:	6879      	ldr	r1, [r7, #4]
 800c04c:	4613      	mov	r3, r2
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	4413      	add	r3, r2
 800c052:	009b      	lsls	r3, r3, #2
 800c054:	440b      	add	r3, r1
 800c056:	331c      	adds	r3, #28
 800c058:	2210      	movs	r2, #16
 800c05a:	601a      	str	r2, [r3, #0]
 800c05c:	e035      	b.n	800c0ca <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c05e:	4b42      	ldr	r3, [pc, #264]	@ (800c168 <USBD_CDC_Init+0x1e4>)
 800c060:	7819      	ldrb	r1, [r3, #0]
 800c062:	2340      	movs	r3, #64	@ 0x40
 800c064:	2202      	movs	r2, #2
 800c066:	6878      	ldr	r0, [r7, #4]
 800c068:	f002 fb91 	bl	800e78e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c06c:	4b3e      	ldr	r3, [pc, #248]	@ (800c168 <USBD_CDC_Init+0x1e4>)
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	f003 020f 	and.w	r2, r3, #15
 800c074:	6879      	ldr	r1, [r7, #4]
 800c076:	4613      	mov	r3, r2
 800c078:	009b      	lsls	r3, r3, #2
 800c07a:	4413      	add	r3, r2
 800c07c:	009b      	lsls	r3, r3, #2
 800c07e:	440b      	add	r3, r1
 800c080:	3323      	adds	r3, #35	@ 0x23
 800c082:	2201      	movs	r2, #1
 800c084:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c086:	4b39      	ldr	r3, [pc, #228]	@ (800c16c <USBD_CDC_Init+0x1e8>)
 800c088:	7819      	ldrb	r1, [r3, #0]
 800c08a:	2340      	movs	r3, #64	@ 0x40
 800c08c:	2202      	movs	r2, #2
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f002 fb7d 	bl	800e78e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c094:	4b35      	ldr	r3, [pc, #212]	@ (800c16c <USBD_CDC_Init+0x1e8>)
 800c096:	781b      	ldrb	r3, [r3, #0]
 800c098:	f003 020f 	and.w	r2, r3, #15
 800c09c:	6879      	ldr	r1, [r7, #4]
 800c09e:	4613      	mov	r3, r2
 800c0a0:	009b      	lsls	r3, r3, #2
 800c0a2:	4413      	add	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	440b      	add	r3, r1
 800c0a8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c0ac:	2201      	movs	r2, #1
 800c0ae:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c0b0:	4b2f      	ldr	r3, [pc, #188]	@ (800c170 <USBD_CDC_Init+0x1ec>)
 800c0b2:	781b      	ldrb	r3, [r3, #0]
 800c0b4:	f003 020f 	and.w	r2, r3, #15
 800c0b8:	6879      	ldr	r1, [r7, #4]
 800c0ba:	4613      	mov	r3, r2
 800c0bc:	009b      	lsls	r3, r3, #2
 800c0be:	4413      	add	r3, r2
 800c0c0:	009b      	lsls	r3, r3, #2
 800c0c2:	440b      	add	r3, r1
 800c0c4:	331c      	adds	r3, #28
 800c0c6:	2210      	movs	r2, #16
 800c0c8:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c0ca:	4b29      	ldr	r3, [pc, #164]	@ (800c170 <USBD_CDC_Init+0x1ec>)
 800c0cc:	7819      	ldrb	r1, [r3, #0]
 800c0ce:	2308      	movs	r3, #8
 800c0d0:	2203      	movs	r2, #3
 800c0d2:	6878      	ldr	r0, [r7, #4]
 800c0d4:	f002 fb5b 	bl	800e78e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c0d8:	4b25      	ldr	r3, [pc, #148]	@ (800c170 <USBD_CDC_Init+0x1ec>)
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	f003 020f 	and.w	r2, r3, #15
 800c0e0:	6879      	ldr	r1, [r7, #4]
 800c0e2:	4613      	mov	r3, r2
 800c0e4:	009b      	lsls	r3, r3, #2
 800c0e6:	4413      	add	r3, r2
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	440b      	add	r3, r1
 800c0ec:	3323      	adds	r3, #35	@ 0x23
 800c0ee:	2201      	movs	r2, #1
 800c0f0:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c100:	687a      	ldr	r2, [r7, #4]
 800c102:	33b0      	adds	r3, #176	@ 0xb0
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	4413      	add	r3, r2
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2200      	movs	r2, #0
 800c112:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2200      	movs	r2, #0
 800c11a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800c124:	2b00      	cmp	r3, #0
 800c126:	d101      	bne.n	800c12c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c128:	2302      	movs	r3, #2
 800c12a:	e018      	b.n	800c15e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	7c1b      	ldrb	r3, [r3, #16]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d10a      	bne.n	800c14a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c134:	4b0d      	ldr	r3, [pc, #52]	@ (800c16c <USBD_CDC_Init+0x1e8>)
 800c136:	7819      	ldrb	r1, [r3, #0]
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c13e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f002 fc12 	bl	800e96c <USBD_LL_PrepareReceive>
 800c148:	e008      	b.n	800c15c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c14a:	4b08      	ldr	r3, [pc, #32]	@ (800c16c <USBD_CDC_Init+0x1e8>)
 800c14c:	7819      	ldrb	r1, [r3, #0]
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c154:	2340      	movs	r3, #64	@ 0x40
 800c156:	6878      	ldr	r0, [r7, #4]
 800c158:	f002 fc08 	bl	800e96c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c15c:	2300      	movs	r3, #0
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}
 800c166:	bf00      	nop
 800c168:	200000c3 	.word	0x200000c3
 800c16c:	200000c4 	.word	0x200000c4
 800c170:	200000c5 	.word	0x200000c5

0800c174 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c174:	b580      	push	{r7, lr}
 800c176:	b082      	sub	sp, #8
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	460b      	mov	r3, r1
 800c17e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c180:	4b3a      	ldr	r3, [pc, #232]	@ (800c26c <USBD_CDC_DeInit+0xf8>)
 800c182:	781b      	ldrb	r3, [r3, #0]
 800c184:	4619      	mov	r1, r3
 800c186:	6878      	ldr	r0, [r7, #4]
 800c188:	f002 fb27 	bl	800e7da <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c18c:	4b37      	ldr	r3, [pc, #220]	@ (800c26c <USBD_CDC_DeInit+0xf8>)
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	f003 020f 	and.w	r2, r3, #15
 800c194:	6879      	ldr	r1, [r7, #4]
 800c196:	4613      	mov	r3, r2
 800c198:	009b      	lsls	r3, r3, #2
 800c19a:	4413      	add	r3, r2
 800c19c:	009b      	lsls	r3, r3, #2
 800c19e:	440b      	add	r3, r1
 800c1a0:	3323      	adds	r3, #35	@ 0x23
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c1a6:	4b32      	ldr	r3, [pc, #200]	@ (800c270 <USBD_CDC_DeInit+0xfc>)
 800c1a8:	781b      	ldrb	r3, [r3, #0]
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f002 fb14 	bl	800e7da <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c1b2:	4b2f      	ldr	r3, [pc, #188]	@ (800c270 <USBD_CDC_DeInit+0xfc>)
 800c1b4:	781b      	ldrb	r3, [r3, #0]
 800c1b6:	f003 020f 	and.w	r2, r3, #15
 800c1ba:	6879      	ldr	r1, [r7, #4]
 800c1bc:	4613      	mov	r3, r2
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	4413      	add	r3, r2
 800c1c2:	009b      	lsls	r3, r3, #2
 800c1c4:	440b      	add	r3, r1
 800c1c6:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c1ce:	4b29      	ldr	r3, [pc, #164]	@ (800c274 <USBD_CDC_DeInit+0x100>)
 800c1d0:	781b      	ldrb	r3, [r3, #0]
 800c1d2:	4619      	mov	r1, r3
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f002 fb00 	bl	800e7da <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c1da:	4b26      	ldr	r3, [pc, #152]	@ (800c274 <USBD_CDC_DeInit+0x100>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	f003 020f 	and.w	r2, r3, #15
 800c1e2:	6879      	ldr	r1, [r7, #4]
 800c1e4:	4613      	mov	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	4413      	add	r3, r2
 800c1ea:	009b      	lsls	r3, r3, #2
 800c1ec:	440b      	add	r3, r1
 800c1ee:	3323      	adds	r3, #35	@ 0x23
 800c1f0:	2200      	movs	r2, #0
 800c1f2:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c1f4:	4b1f      	ldr	r3, [pc, #124]	@ (800c274 <USBD_CDC_DeInit+0x100>)
 800c1f6:	781b      	ldrb	r3, [r3, #0]
 800c1f8:	f003 020f 	and.w	r2, r3, #15
 800c1fc:	6879      	ldr	r1, [r7, #4]
 800c1fe:	4613      	mov	r3, r2
 800c200:	009b      	lsls	r3, r3, #2
 800c202:	4413      	add	r3, r2
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	440b      	add	r3, r1
 800c208:	331c      	adds	r3, #28
 800c20a:	2200      	movs	r2, #0
 800c20c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	32b0      	adds	r2, #176	@ 0xb0
 800c218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d01f      	beq.n	800c260 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c226:	687a      	ldr	r2, [r7, #4]
 800c228:	33b0      	adds	r3, #176	@ 0xb0
 800c22a:	009b      	lsls	r3, r3, #2
 800c22c:	4413      	add	r3, r2
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	685b      	ldr	r3, [r3, #4]
 800c232:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	32b0      	adds	r2, #176	@ 0xb0
 800c23e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c242:	4618      	mov	r0, r3
 800c244:	f002 fbd4 	bl	800e9f0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	32b0      	adds	r2, #176	@ 0xb0
 800c252:	2100      	movs	r1, #0
 800c254:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	2200      	movs	r2, #0
 800c25c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c260:	2300      	movs	r3, #0
}
 800c262:	4618      	mov	r0, r3
 800c264:	3708      	adds	r7, #8
 800c266:	46bd      	mov	sp, r7
 800c268:	bd80      	pop	{r7, pc}
 800c26a:	bf00      	nop
 800c26c:	200000c3 	.word	0x200000c3
 800c270:	200000c4 	.word	0x200000c4
 800c274:	200000c5 	.word	0x200000c5

0800c278 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c278:	b580      	push	{r7, lr}
 800c27a:	b086      	sub	sp, #24
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	6078      	str	r0, [r7, #4]
 800c280:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	32b0      	adds	r2, #176	@ 0xb0
 800c28c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c290:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c292:	2300      	movs	r3, #0
 800c294:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c296:	2300      	movs	r3, #0
 800c298:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c29a:	2300      	movs	r3, #0
 800c29c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d101      	bne.n	800c2a8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c2a4:	2303      	movs	r3, #3
 800c2a6:	e0bf      	b.n	800c428 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	781b      	ldrb	r3, [r3, #0]
 800c2ac:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d050      	beq.n	800c356 <USBD_CDC_Setup+0xde>
 800c2b4:	2b20      	cmp	r3, #32
 800c2b6:	f040 80af 	bne.w	800c418 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	88db      	ldrh	r3, [r3, #6]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d03a      	beq.n	800c338 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	781b      	ldrb	r3, [r3, #0]
 800c2c6:	b25b      	sxtb	r3, r3
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	da1b      	bge.n	800c304 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	33b0      	adds	r3, #176	@ 0xb0
 800c2d6:	009b      	lsls	r3, r3, #2
 800c2d8:	4413      	add	r3, r2
 800c2da:	685b      	ldr	r3, [r3, #4]
 800c2dc:	689b      	ldr	r3, [r3, #8]
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c2e2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c2e4:	683a      	ldr	r2, [r7, #0]
 800c2e6:	88d2      	ldrh	r2, [r2, #6]
 800c2e8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	88db      	ldrh	r3, [r3, #6]
 800c2ee:	2b07      	cmp	r3, #7
 800c2f0:	bf28      	it	cs
 800c2f2:	2307      	movcs	r3, #7
 800c2f4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	89fa      	ldrh	r2, [r7, #14]
 800c2fa:	4619      	mov	r1, r3
 800c2fc:	6878      	ldr	r0, [r7, #4]
 800c2fe:	f001 fda9 	bl	800de54 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c302:	e090      	b.n	800c426 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	785a      	ldrb	r2, [r3, #1]
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	88db      	ldrh	r3, [r3, #6]
 800c312:	2b3f      	cmp	r3, #63	@ 0x3f
 800c314:	d803      	bhi.n	800c31e <USBD_CDC_Setup+0xa6>
 800c316:	683b      	ldr	r3, [r7, #0]
 800c318:	88db      	ldrh	r3, [r3, #6]
 800c31a:	b2da      	uxtb	r2, r3
 800c31c:	e000      	b.n	800c320 <USBD_CDC_Setup+0xa8>
 800c31e:	2240      	movs	r2, #64	@ 0x40
 800c320:	693b      	ldr	r3, [r7, #16]
 800c322:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c326:	6939      	ldr	r1, [r7, #16]
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800c32e:	461a      	mov	r2, r3
 800c330:	6878      	ldr	r0, [r7, #4]
 800c332:	f001 fdbe 	bl	800deb2 <USBD_CtlPrepareRx>
      break;
 800c336:	e076      	b.n	800c426 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c33e:	687a      	ldr	r2, [r7, #4]
 800c340:	33b0      	adds	r3, #176	@ 0xb0
 800c342:	009b      	lsls	r3, r3, #2
 800c344:	4413      	add	r3, r2
 800c346:	685b      	ldr	r3, [r3, #4]
 800c348:	689b      	ldr	r3, [r3, #8]
 800c34a:	683a      	ldr	r2, [r7, #0]
 800c34c:	7850      	ldrb	r0, [r2, #1]
 800c34e:	2200      	movs	r2, #0
 800c350:	6839      	ldr	r1, [r7, #0]
 800c352:	4798      	blx	r3
      break;
 800c354:	e067      	b.n	800c426 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	785b      	ldrb	r3, [r3, #1]
 800c35a:	2b0b      	cmp	r3, #11
 800c35c:	d851      	bhi.n	800c402 <USBD_CDC_Setup+0x18a>
 800c35e:	a201      	add	r2, pc, #4	@ (adr r2, 800c364 <USBD_CDC_Setup+0xec>)
 800c360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c364:	0800c395 	.word	0x0800c395
 800c368:	0800c411 	.word	0x0800c411
 800c36c:	0800c403 	.word	0x0800c403
 800c370:	0800c403 	.word	0x0800c403
 800c374:	0800c403 	.word	0x0800c403
 800c378:	0800c403 	.word	0x0800c403
 800c37c:	0800c403 	.word	0x0800c403
 800c380:	0800c403 	.word	0x0800c403
 800c384:	0800c403 	.word	0x0800c403
 800c388:	0800c403 	.word	0x0800c403
 800c38c:	0800c3bf 	.word	0x0800c3bf
 800c390:	0800c3e9 	.word	0x0800c3e9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c39a:	b2db      	uxtb	r3, r3
 800c39c:	2b03      	cmp	r3, #3
 800c39e:	d107      	bne.n	800c3b0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c3a0:	f107 030a 	add.w	r3, r7, #10
 800c3a4:	2202      	movs	r2, #2
 800c3a6:	4619      	mov	r1, r3
 800c3a8:	6878      	ldr	r0, [r7, #4]
 800c3aa:	f001 fd53 	bl	800de54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3ae:	e032      	b.n	800c416 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c3b0:	6839      	ldr	r1, [r7, #0]
 800c3b2:	6878      	ldr	r0, [r7, #4]
 800c3b4:	f001 fcd1 	bl	800dd5a <USBD_CtlError>
            ret = USBD_FAIL;
 800c3b8:	2303      	movs	r3, #3
 800c3ba:	75fb      	strb	r3, [r7, #23]
          break;
 800c3bc:	e02b      	b.n	800c416 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3c4:	b2db      	uxtb	r3, r3
 800c3c6:	2b03      	cmp	r3, #3
 800c3c8:	d107      	bne.n	800c3da <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c3ca:	f107 030d 	add.w	r3, r7, #13
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f001 fd3e 	bl	800de54 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c3d8:	e01d      	b.n	800c416 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c3da:	6839      	ldr	r1, [r7, #0]
 800c3dc:	6878      	ldr	r0, [r7, #4]
 800c3de:	f001 fcbc 	bl	800dd5a <USBD_CtlError>
            ret = USBD_FAIL;
 800c3e2:	2303      	movs	r3, #3
 800c3e4:	75fb      	strb	r3, [r7, #23]
          break;
 800c3e6:	e016      	b.n	800c416 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c3ee:	b2db      	uxtb	r3, r3
 800c3f0:	2b03      	cmp	r3, #3
 800c3f2:	d00f      	beq.n	800c414 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c3f4:	6839      	ldr	r1, [r7, #0]
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f001 fcaf 	bl	800dd5a <USBD_CtlError>
            ret = USBD_FAIL;
 800c3fc:	2303      	movs	r3, #3
 800c3fe:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c400:	e008      	b.n	800c414 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c402:	6839      	ldr	r1, [r7, #0]
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f001 fca8 	bl	800dd5a <USBD_CtlError>
          ret = USBD_FAIL;
 800c40a:	2303      	movs	r3, #3
 800c40c:	75fb      	strb	r3, [r7, #23]
          break;
 800c40e:	e002      	b.n	800c416 <USBD_CDC_Setup+0x19e>
          break;
 800c410:	bf00      	nop
 800c412:	e008      	b.n	800c426 <USBD_CDC_Setup+0x1ae>
          break;
 800c414:	bf00      	nop
      }
      break;
 800c416:	e006      	b.n	800c426 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c418:	6839      	ldr	r1, [r7, #0]
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f001 fc9d 	bl	800dd5a <USBD_CtlError>
      ret = USBD_FAIL;
 800c420:	2303      	movs	r3, #3
 800c422:	75fb      	strb	r3, [r7, #23]
      break;
 800c424:	bf00      	nop
  }

  return (uint8_t)ret;
 800c426:	7dfb      	ldrb	r3, [r7, #23]
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3718      	adds	r7, #24
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b084      	sub	sp, #16
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
 800c438:	460b      	mov	r3, r1
 800c43a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c442:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	32b0      	adds	r2, #176	@ 0xb0
 800c44e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d101      	bne.n	800c45a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c456:	2303      	movs	r3, #3
 800c458:	e065      	b.n	800c526 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	32b0      	adds	r2, #176	@ 0xb0
 800c464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c468:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c46a:	78fb      	ldrb	r3, [r7, #3]
 800c46c:	f003 020f 	and.w	r2, r3, #15
 800c470:	6879      	ldr	r1, [r7, #4]
 800c472:	4613      	mov	r3, r2
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	4413      	add	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	440b      	add	r3, r1
 800c47c:	3314      	adds	r3, #20
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	2b00      	cmp	r3, #0
 800c482:	d02f      	beq.n	800c4e4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c484:	78fb      	ldrb	r3, [r7, #3]
 800c486:	f003 020f 	and.w	r2, r3, #15
 800c48a:	6879      	ldr	r1, [r7, #4]
 800c48c:	4613      	mov	r3, r2
 800c48e:	009b      	lsls	r3, r3, #2
 800c490:	4413      	add	r3, r2
 800c492:	009b      	lsls	r3, r3, #2
 800c494:	440b      	add	r3, r1
 800c496:	3314      	adds	r3, #20
 800c498:	681a      	ldr	r2, [r3, #0]
 800c49a:	78fb      	ldrb	r3, [r7, #3]
 800c49c:	f003 010f 	and.w	r1, r3, #15
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	460b      	mov	r3, r1
 800c4a4:	00db      	lsls	r3, r3, #3
 800c4a6:	440b      	add	r3, r1
 800c4a8:	009b      	lsls	r3, r3, #2
 800c4aa:	4403      	add	r3, r0
 800c4ac:	331c      	adds	r3, #28
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	fbb2 f1f3 	udiv	r1, r2, r3
 800c4b4:	fb01 f303 	mul.w	r3, r1, r3
 800c4b8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d112      	bne.n	800c4e4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c4be:	78fb      	ldrb	r3, [r7, #3]
 800c4c0:	f003 020f 	and.w	r2, r3, #15
 800c4c4:	6879      	ldr	r1, [r7, #4]
 800c4c6:	4613      	mov	r3, r2
 800c4c8:	009b      	lsls	r3, r3, #2
 800c4ca:	4413      	add	r3, r2
 800c4cc:	009b      	lsls	r3, r3, #2
 800c4ce:	440b      	add	r3, r1
 800c4d0:	3314      	adds	r3, #20
 800c4d2:	2200      	movs	r2, #0
 800c4d4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c4d6:	78f9      	ldrb	r1, [r7, #3]
 800c4d8:	2300      	movs	r3, #0
 800c4da:	2200      	movs	r2, #0
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f002 fa24 	bl	800e92a <USBD_LL_Transmit>
 800c4e2:	e01f      	b.n	800c524 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	33b0      	adds	r3, #176	@ 0xb0
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	4413      	add	r3, r2
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d010      	beq.n	800c524 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c508:	687a      	ldr	r2, [r7, #4]
 800c50a:	33b0      	adds	r3, #176	@ 0xb0
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	4413      	add	r3, r2
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	691b      	ldr	r3, [r3, #16]
 800c514:	68ba      	ldr	r2, [r7, #8]
 800c516:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800c51a:	68ba      	ldr	r2, [r7, #8]
 800c51c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800c520:	78fa      	ldrb	r2, [r7, #3]
 800c522:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c524:	2300      	movs	r3, #0
}
 800c526:	4618      	mov	r0, r3
 800c528:	3710      	adds	r7, #16
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}

0800c52e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c52e:	b580      	push	{r7, lr}
 800c530:	b084      	sub	sp, #16
 800c532:	af00      	add	r7, sp, #0
 800c534:	6078      	str	r0, [r7, #4]
 800c536:	460b      	mov	r3, r1
 800c538:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	32b0      	adds	r2, #176	@ 0xb0
 800c544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c548:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	32b0      	adds	r2, #176	@ 0xb0
 800c554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d101      	bne.n	800c560 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c55c:	2303      	movs	r3, #3
 800c55e:	e01a      	b.n	800c596 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c560:	78fb      	ldrb	r3, [r7, #3]
 800c562:	4619      	mov	r1, r3
 800c564:	6878      	ldr	r0, [r7, #4]
 800c566:	f002 fa22 	bl	800e9ae <USBD_LL_GetRxDataSize>
 800c56a:	4602      	mov	r2, r0
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	33b0      	adds	r3, #176	@ 0xb0
 800c57c:	009b      	lsls	r3, r3, #2
 800c57e:	4413      	add	r3, r2
 800c580:	685b      	ldr	r3, [r3, #4]
 800c582:	68db      	ldr	r3, [r3, #12]
 800c584:	68fa      	ldr	r2, [r7, #12]
 800c586:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800c58a:	68fa      	ldr	r2, [r7, #12]
 800c58c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800c590:	4611      	mov	r1, r2
 800c592:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c594:	2300      	movs	r3, #0
}
 800c596:	4618      	mov	r0, r3
 800c598:	3710      	adds	r7, #16
 800c59a:	46bd      	mov	sp, r7
 800c59c:	bd80      	pop	{r7, pc}

0800c59e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c59e:	b580      	push	{r7, lr}
 800c5a0:	b084      	sub	sp, #16
 800c5a2:	af00      	add	r7, sp, #0
 800c5a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	32b0      	adds	r2, #176	@ 0xb0
 800c5b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5b4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d101      	bne.n	800c5c0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c5bc:	2303      	movs	r3, #3
 800c5be:	e024      	b.n	800c60a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5c6:	687a      	ldr	r2, [r7, #4]
 800c5c8:	33b0      	adds	r3, #176	@ 0xb0
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4413      	add	r3, r2
 800c5ce:	685b      	ldr	r3, [r3, #4]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d019      	beq.n	800c608 <USBD_CDC_EP0_RxReady+0x6a>
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c5da:	2bff      	cmp	r3, #255	@ 0xff
 800c5dc:	d014      	beq.n	800c608 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	33b0      	adds	r3, #176	@ 0xb0
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	4413      	add	r3, r2
 800c5ec:	685b      	ldr	r3, [r3, #4]
 800c5ee:	689b      	ldr	r3, [r3, #8]
 800c5f0:	68fa      	ldr	r2, [r7, #12]
 800c5f2:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c5f6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c5fe:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	22ff      	movs	r2, #255	@ 0xff
 800c604:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c608:	2300      	movs	r3, #0
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3710      	adds	r7, #16
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd80      	pop	{r7, pc}
	...

0800c614 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b086      	sub	sp, #24
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c61c:	2182      	movs	r1, #130	@ 0x82
 800c61e:	4818      	ldr	r0, [pc, #96]	@ (800c680 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c620:	f000 fd62 	bl	800d0e8 <USBD_GetEpDesc>
 800c624:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c626:	2101      	movs	r1, #1
 800c628:	4815      	ldr	r0, [pc, #84]	@ (800c680 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c62a:	f000 fd5d 	bl	800d0e8 <USBD_GetEpDesc>
 800c62e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c630:	2181      	movs	r1, #129	@ 0x81
 800c632:	4813      	ldr	r0, [pc, #76]	@ (800c680 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c634:	f000 fd58 	bl	800d0e8 <USBD_GetEpDesc>
 800c638:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c63a:	697b      	ldr	r3, [r7, #20]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d002      	beq.n	800c646 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c640:	697b      	ldr	r3, [r7, #20]
 800c642:	2210      	movs	r2, #16
 800c644:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d006      	beq.n	800c65a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	2200      	movs	r2, #0
 800c650:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c654:	711a      	strb	r2, [r3, #4]
 800c656:	2200      	movs	r2, #0
 800c658:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d006      	beq.n	800c66e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	2200      	movs	r2, #0
 800c664:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c668:	711a      	strb	r2, [r3, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2243      	movs	r2, #67	@ 0x43
 800c672:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c674:	4b02      	ldr	r3, [pc, #8]	@ (800c680 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c676:	4618      	mov	r0, r3
 800c678:	3718      	adds	r7, #24
 800c67a:	46bd      	mov	sp, r7
 800c67c:	bd80      	pop	{r7, pc}
 800c67e:	bf00      	nop
 800c680:	20000080 	.word	0x20000080

0800c684 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b086      	sub	sp, #24
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c68c:	2182      	movs	r1, #130	@ 0x82
 800c68e:	4818      	ldr	r0, [pc, #96]	@ (800c6f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c690:	f000 fd2a 	bl	800d0e8 <USBD_GetEpDesc>
 800c694:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c696:	2101      	movs	r1, #1
 800c698:	4815      	ldr	r0, [pc, #84]	@ (800c6f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c69a:	f000 fd25 	bl	800d0e8 <USBD_GetEpDesc>
 800c69e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c6a0:	2181      	movs	r1, #129	@ 0x81
 800c6a2:	4813      	ldr	r0, [pc, #76]	@ (800c6f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c6a4:	f000 fd20 	bl	800d0e8 <USBD_GetEpDesc>
 800c6a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c6aa:	697b      	ldr	r3, [r7, #20]
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d002      	beq.n	800c6b6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c6b0:	697b      	ldr	r3, [r7, #20]
 800c6b2:	2210      	movs	r2, #16
 800c6b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d006      	beq.n	800c6ca <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	711a      	strb	r2, [r3, #4]
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	f042 0202 	orr.w	r2, r2, #2
 800c6c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2b00      	cmp	r3, #0
 800c6ce:	d006      	beq.n	800c6de <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	711a      	strb	r2, [r3, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	f042 0202 	orr.w	r2, r2, #2
 800c6dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2243      	movs	r2, #67	@ 0x43
 800c6e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c6e4:	4b02      	ldr	r3, [pc, #8]	@ (800c6f0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3718      	adds	r7, #24
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	bd80      	pop	{r7, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20000080 	.word	0x20000080

0800c6f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b086      	sub	sp, #24
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c6fc:	2182      	movs	r1, #130	@ 0x82
 800c6fe:	4818      	ldr	r0, [pc, #96]	@ (800c760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c700:	f000 fcf2 	bl	800d0e8 <USBD_GetEpDesc>
 800c704:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c706:	2101      	movs	r1, #1
 800c708:	4815      	ldr	r0, [pc, #84]	@ (800c760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c70a:	f000 fced 	bl	800d0e8 <USBD_GetEpDesc>
 800c70e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c710:	2181      	movs	r1, #129	@ 0x81
 800c712:	4813      	ldr	r0, [pc, #76]	@ (800c760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c714:	f000 fce8 	bl	800d0e8 <USBD_GetEpDesc>
 800c718:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c71a:	697b      	ldr	r3, [r7, #20]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d002      	beq.n	800c726 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c720:	697b      	ldr	r3, [r7, #20]
 800c722:	2210      	movs	r2, #16
 800c724:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c726:	693b      	ldr	r3, [r7, #16]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d006      	beq.n	800c73a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c72c:	693b      	ldr	r3, [r7, #16]
 800c72e:	2200      	movs	r2, #0
 800c730:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c734:	711a      	strb	r2, [r3, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d006      	beq.n	800c74e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2200      	movs	r2, #0
 800c744:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c748:	711a      	strb	r2, [r3, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2243      	movs	r2, #67	@ 0x43
 800c752:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c754:	4b02      	ldr	r3, [pc, #8]	@ (800c760 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c756:	4618      	mov	r0, r3
 800c758:	3718      	adds	r7, #24
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
 800c75e:	bf00      	nop
 800c760:	20000080 	.word	0x20000080

0800c764 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c764:	b480      	push	{r7}
 800c766:	b083      	sub	sp, #12
 800c768:	af00      	add	r7, sp, #0
 800c76a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	220a      	movs	r2, #10
 800c770:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c772:	4b03      	ldr	r3, [pc, #12]	@ (800c780 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c774:	4618      	mov	r0, r3
 800c776:	370c      	adds	r7, #12
 800c778:	46bd      	mov	sp, r7
 800c77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77e:	4770      	bx	lr
 800c780:	2000003c 	.word	0x2000003c

0800c784 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
 800c78c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d101      	bne.n	800c798 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c794:	2303      	movs	r3, #3
 800c796:	e009      	b.n	800c7ac <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	33b0      	adds	r3, #176	@ 0xb0
 800c7a2:	009b      	lsls	r3, r3, #2
 800c7a4:	4413      	add	r3, r2
 800c7a6:	683a      	ldr	r2, [r7, #0]
 800c7a8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c7aa:	2300      	movs	r3, #0
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	370c      	adds	r7, #12
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b6:	4770      	bx	lr

0800c7b8 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b087      	sub	sp, #28
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	60f8      	str	r0, [r7, #12]
 800c7c0:	60b9      	str	r1, [r7, #8]
 800c7c2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	32b0      	adds	r2, #176	@ 0xb0
 800c7ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7d2:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d101      	bne.n	800c7de <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	e008      	b.n	800c7f0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c7de:	697b      	ldr	r3, [r7, #20]
 800c7e0:	68ba      	ldr	r2, [r7, #8]
 800c7e2:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c7e6:	697b      	ldr	r3, [r7, #20]
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	371c      	adds	r7, #28
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b085      	sub	sp, #20
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	32b0      	adds	r2, #176	@ 0xb0
 800c810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c814:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c816:	68fb      	ldr	r3, [r7, #12]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d101      	bne.n	800c820 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c81c:	2303      	movs	r3, #3
 800c81e:	e004      	b.n	800c82a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c828:	2300      	movs	r3, #0
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	3714      	adds	r7, #20
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr
	...

0800c838 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c838:	b580      	push	{r7, lr}
 800c83a:	b084      	sub	sp, #16
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	32b0      	adds	r2, #176	@ 0xb0
 800c84a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c84e:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c850:	2301      	movs	r3, #1
 800c852:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d101      	bne.n	800c85e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c85a:	2303      	movs	r3, #3
 800c85c:	e025      	b.n	800c8aa <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c864:	2b00      	cmp	r3, #0
 800c866:	d11f      	bne.n	800c8a8 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c868:	68bb      	ldr	r3, [r7, #8]
 800c86a:	2201      	movs	r2, #1
 800c86c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c870:	4b10      	ldr	r3, [pc, #64]	@ (800c8b4 <USBD_CDC_TransmitPacket+0x7c>)
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	f003 020f 	and.w	r2, r3, #15
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	4613      	mov	r3, r2
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	4413      	add	r3, r2
 800c886:	009b      	lsls	r3, r3, #2
 800c888:	4403      	add	r3, r0
 800c88a:	3314      	adds	r3, #20
 800c88c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c88e:	4b09      	ldr	r3, [pc, #36]	@ (800c8b4 <USBD_CDC_TransmitPacket+0x7c>)
 800c890:	7819      	ldrb	r1, [r3, #0]
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f002 f843 	bl	800e92a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c8a4:	2300      	movs	r3, #0
 800c8a6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c8a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8aa:	4618      	mov	r0, r3
 800c8ac:	3710      	adds	r7, #16
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	200000c3 	.word	0x200000c3

0800c8b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	32b0      	adds	r2, #176	@ 0xb0
 800c8ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8ce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	32b0      	adds	r2, #176	@ 0xb0
 800c8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d101      	bne.n	800c8e6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e018      	b.n	800c918 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	7c1b      	ldrb	r3, [r3, #16]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d10a      	bne.n	800c904 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8ee:	4b0c      	ldr	r3, [pc, #48]	@ (800c920 <USBD_CDC_ReceivePacket+0x68>)
 800c8f0:	7819      	ldrb	r1, [r3, #0]
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c8f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f002 f835 	bl	800e96c <USBD_LL_PrepareReceive>
 800c902:	e008      	b.n	800c916 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c904:	4b06      	ldr	r3, [pc, #24]	@ (800c920 <USBD_CDC_ReceivePacket+0x68>)
 800c906:	7819      	ldrb	r1, [r3, #0]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c90e:	2340      	movs	r3, #64	@ 0x40
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f002 f82b 	bl	800e96c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c916:	2300      	movs	r3, #0
}
 800c918:	4618      	mov	r0, r3
 800c91a:	3710      	adds	r7, #16
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}
 800c920:	200000c4 	.word	0x200000c4

0800c924 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b086      	sub	sp, #24
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	4613      	mov	r3, r2
 800c930:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c938:	2303      	movs	r3, #3
 800c93a:	e01f      	b.n	800c97c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	2200      	movs	r2, #0
 800c940:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	2200      	movs	r2, #0
 800c948:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	2200      	movs	r2, #0
 800c950:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d003      	beq.n	800c962 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	2201      	movs	r2, #1
 800c966:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	79fa      	ldrb	r2, [r7, #7]
 800c96e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f001 fea5 	bl	800e6c0 <USBD_LL_Init>
 800c976:	4603      	mov	r3, r0
 800c978:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c97a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c97c:	4618      	mov	r0, r3
 800c97e:	3718      	adds	r7, #24
 800c980:	46bd      	mov	sp, r7
 800c982:	bd80      	pop	{r7, pc}

0800c984 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c984:	b580      	push	{r7, lr}
 800c986:	b084      	sub	sp, #16
 800c988:	af00      	add	r7, sp, #0
 800c98a:	6078      	str	r0, [r7, #4]
 800c98c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c98e:	2300      	movs	r3, #0
 800c990:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d101      	bne.n	800c99c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c998:	2303      	movs	r3, #3
 800c99a:	e025      	b.n	800c9e8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	683a      	ldr	r2, [r7, #0]
 800c9a0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	32ae      	adds	r2, #174	@ 0xae
 800c9ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00f      	beq.n	800c9d8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	32ae      	adds	r2, #174	@ 0xae
 800c9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9c8:	f107 020e 	add.w	r2, r7, #14
 800c9cc:	4610      	mov	r0, r2
 800c9ce:	4798      	blx	r3
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c9de:	1c5a      	adds	r2, r3, #1
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c9e6:	2300      	movs	r3, #0
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3710      	adds	r7, #16
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b082      	sub	sp, #8
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c9f8:	6878      	ldr	r0, [r7, #4]
 800c9fa:	f001 fead 	bl	800e758 <USBD_LL_Start>
 800c9fe:	4603      	mov	r3, r0
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	3708      	adds	r7, #8
 800ca04:	46bd      	mov	sp, r7
 800ca06:	bd80      	pop	{r7, pc}

0800ca08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	370c      	adds	r7, #12
 800ca16:	46bd      	mov	sp, r7
 800ca18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1c:	4770      	bx	lr

0800ca1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca1e:	b580      	push	{r7, lr}
 800ca20:	b084      	sub	sp, #16
 800ca22:	af00      	add	r7, sp, #0
 800ca24:	6078      	str	r0, [r7, #4]
 800ca26:	460b      	mov	r3, r1
 800ca28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d009      	beq.n	800ca4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	78fa      	ldrb	r2, [r7, #3]
 800ca42:	4611      	mov	r1, r2
 800ca44:	6878      	ldr	r0, [r7, #4]
 800ca46:	4798      	blx	r3
 800ca48:	4603      	mov	r3, r0
 800ca4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca4c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b084      	sub	sp, #16
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
 800ca5e:	460b      	mov	r3, r1
 800ca60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca62:	2300      	movs	r3, #0
 800ca64:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ca6c:	685b      	ldr	r3, [r3, #4]
 800ca6e:	78fa      	ldrb	r2, [r7, #3]
 800ca70:	4611      	mov	r1, r2
 800ca72:	6878      	ldr	r0, [r7, #4]
 800ca74:	4798      	blx	r3
 800ca76:	4603      	mov	r3, r0
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d001      	beq.n	800ca80 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ca7c:	2303      	movs	r3, #3
 800ca7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca82:	4618      	mov	r0, r3
 800ca84:	3710      	adds	r7, #16
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd80      	pop	{r7, pc}

0800ca8a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ca8a:	b580      	push	{r7, lr}
 800ca8c:	b084      	sub	sp, #16
 800ca8e:	af00      	add	r7, sp, #0
 800ca90:	6078      	str	r0, [r7, #4]
 800ca92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ca9a:	6839      	ldr	r1, [r7, #0]
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	f001 f922 	bl	800dce6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	2201      	movs	r2, #1
 800caa6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800cab0:	461a      	mov	r2, r3
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cabe:	f003 031f 	and.w	r3, r3, #31
 800cac2:	2b02      	cmp	r3, #2
 800cac4:	d01a      	beq.n	800cafc <USBD_LL_SetupStage+0x72>
 800cac6:	2b02      	cmp	r3, #2
 800cac8:	d822      	bhi.n	800cb10 <USBD_LL_SetupStage+0x86>
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d002      	beq.n	800cad4 <USBD_LL_SetupStage+0x4a>
 800cace:	2b01      	cmp	r3, #1
 800cad0:	d00a      	beq.n	800cae8 <USBD_LL_SetupStage+0x5e>
 800cad2:	e01d      	b.n	800cb10 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cada:	4619      	mov	r1, r3
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 fb77 	bl	800d1d0 <USBD_StdDevReq>
 800cae2:	4603      	mov	r3, r0
 800cae4:	73fb      	strb	r3, [r7, #15]
      break;
 800cae6:	e020      	b.n	800cb2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800caee:	4619      	mov	r1, r3
 800caf0:	6878      	ldr	r0, [r7, #4]
 800caf2:	f000 fbdf 	bl	800d2b4 <USBD_StdItfReq>
 800caf6:	4603      	mov	r3, r0
 800caf8:	73fb      	strb	r3, [r7, #15]
      break;
 800cafa:	e016      	b.n	800cb2a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800cb02:	4619      	mov	r1, r3
 800cb04:	6878      	ldr	r0, [r7, #4]
 800cb06:	f000 fc41 	bl	800d38c <USBD_StdEPReq>
 800cb0a:	4603      	mov	r3, r0
 800cb0c:	73fb      	strb	r3, [r7, #15]
      break;
 800cb0e:	e00c      	b.n	800cb2a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cb16:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cb1a:	b2db      	uxtb	r3, r3
 800cb1c:	4619      	mov	r1, r3
 800cb1e:	6878      	ldr	r0, [r7, #4]
 800cb20:	f001 fe7a 	bl	800e818 <USBD_LL_StallEP>
 800cb24:	4603      	mov	r3, r0
 800cb26:	73fb      	strb	r3, [r7, #15]
      break;
 800cb28:	bf00      	nop
  }

  return ret;
 800cb2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	3710      	adds	r7, #16
 800cb30:	46bd      	mov	sp, r7
 800cb32:	bd80      	pop	{r7, pc}

0800cb34 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b086      	sub	sp, #24
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	60f8      	str	r0, [r7, #12]
 800cb3c:	460b      	mov	r3, r1
 800cb3e:	607a      	str	r2, [r7, #4]
 800cb40:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cb42:	2300      	movs	r3, #0
 800cb44:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800cb46:	7afb      	ldrb	r3, [r7, #11]
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d177      	bne.n	800cc3c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800cb52:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cb5a:	2b03      	cmp	r3, #3
 800cb5c:	f040 80a1 	bne.w	800cca2 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	685b      	ldr	r3, [r3, #4]
 800cb64:	693a      	ldr	r2, [r7, #16]
 800cb66:	8992      	ldrh	r2, [r2, #12]
 800cb68:	4293      	cmp	r3, r2
 800cb6a:	d91c      	bls.n	800cba6 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	693a      	ldr	r2, [r7, #16]
 800cb72:	8992      	ldrh	r2, [r2, #12]
 800cb74:	1a9a      	subs	r2, r3, r2
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	691b      	ldr	r3, [r3, #16]
 800cb7e:	693a      	ldr	r2, [r7, #16]
 800cb80:	8992      	ldrh	r2, [r2, #12]
 800cb82:	441a      	add	r2, r3
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800cb88:	693b      	ldr	r3, [r7, #16]
 800cb8a:	6919      	ldr	r1, [r3, #16]
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	899b      	ldrh	r3, [r3, #12]
 800cb90:	461a      	mov	r2, r3
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	685b      	ldr	r3, [r3, #4]
 800cb96:	4293      	cmp	r3, r2
 800cb98:	bf38      	it	cc
 800cb9a:	4613      	movcc	r3, r2
 800cb9c:	461a      	mov	r2, r3
 800cb9e:	68f8      	ldr	r0, [r7, #12]
 800cba0:	f001 f9a8 	bl	800def4 <USBD_CtlContinueRx>
 800cba4:	e07d      	b.n	800cca2 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800cbac:	f003 031f 	and.w	r3, r3, #31
 800cbb0:	2b02      	cmp	r3, #2
 800cbb2:	d014      	beq.n	800cbde <USBD_LL_DataOutStage+0xaa>
 800cbb4:	2b02      	cmp	r3, #2
 800cbb6:	d81d      	bhi.n	800cbf4 <USBD_LL_DataOutStage+0xc0>
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d002      	beq.n	800cbc2 <USBD_LL_DataOutStage+0x8e>
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d003      	beq.n	800cbc8 <USBD_LL_DataOutStage+0x94>
 800cbc0:	e018      	b.n	800cbf4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	75bb      	strb	r3, [r7, #22]
            break;
 800cbc6:	e018      	b.n	800cbfa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	4619      	mov	r1, r3
 800cbd2:	68f8      	ldr	r0, [r7, #12]
 800cbd4:	f000 fa6e 	bl	800d0b4 <USBD_CoreFindIF>
 800cbd8:	4603      	mov	r3, r0
 800cbda:	75bb      	strb	r3, [r7, #22]
            break;
 800cbdc:	e00d      	b.n	800cbfa <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800cbe4:	b2db      	uxtb	r3, r3
 800cbe6:	4619      	mov	r1, r3
 800cbe8:	68f8      	ldr	r0, [r7, #12]
 800cbea:	f000 fa70 	bl	800d0ce <USBD_CoreFindEP>
 800cbee:	4603      	mov	r3, r0
 800cbf0:	75bb      	strb	r3, [r7, #22]
            break;
 800cbf2:	e002      	b.n	800cbfa <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	75bb      	strb	r3, [r7, #22]
            break;
 800cbf8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cbfa:	7dbb      	ldrb	r3, [r7, #22]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d119      	bne.n	800cc34 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	2b03      	cmp	r3, #3
 800cc0a:	d113      	bne.n	800cc34 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cc0c:	7dba      	ldrb	r2, [r7, #22]
 800cc0e:	68fb      	ldr	r3, [r7, #12]
 800cc10:	32ae      	adds	r2, #174	@ 0xae
 800cc12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc16:	691b      	ldr	r3, [r3, #16]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00b      	beq.n	800cc34 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800cc1c:	7dba      	ldrb	r2, [r7, #22]
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cc24:	7dba      	ldrb	r2, [r7, #22]
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	32ae      	adds	r2, #174	@ 0xae
 800cc2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc2e:	691b      	ldr	r3, [r3, #16]
 800cc30:	68f8      	ldr	r0, [r7, #12]
 800cc32:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cc34:	68f8      	ldr	r0, [r7, #12]
 800cc36:	f001 f96e 	bl	800df16 <USBD_CtlSendStatus>
 800cc3a:	e032      	b.n	800cca2 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800cc3c:	7afb      	ldrb	r3, [r7, #11]
 800cc3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	4619      	mov	r1, r3
 800cc46:	68f8      	ldr	r0, [r7, #12]
 800cc48:	f000 fa41 	bl	800d0ce <USBD_CoreFindEP>
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc50:	7dbb      	ldrb	r3, [r7, #22]
 800cc52:	2bff      	cmp	r3, #255	@ 0xff
 800cc54:	d025      	beq.n	800cca2 <USBD_LL_DataOutStage+0x16e>
 800cc56:	7dbb      	ldrb	r3, [r7, #22]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d122      	bne.n	800cca2 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cc5c:	68fb      	ldr	r3, [r7, #12]
 800cc5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	d117      	bne.n	800cc98 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800cc68:	7dba      	ldrb	r2, [r7, #22]
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	32ae      	adds	r2, #174	@ 0xae
 800cc6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d00f      	beq.n	800cc98 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800cc78:	7dba      	ldrb	r2, [r7, #22]
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800cc80:	7dba      	ldrb	r2, [r7, #22]
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	32ae      	adds	r2, #174	@ 0xae
 800cc86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	7afa      	ldrb	r2, [r7, #11]
 800cc8e:	4611      	mov	r1, r2
 800cc90:	68f8      	ldr	r0, [r7, #12]
 800cc92:	4798      	blx	r3
 800cc94:	4603      	mov	r3, r0
 800cc96:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800cc98:	7dfb      	ldrb	r3, [r7, #23]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	d001      	beq.n	800cca2 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800cc9e:	7dfb      	ldrb	r3, [r7, #23]
 800cca0:	e000      	b.n	800cca4 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800cca2:	2300      	movs	r3, #0
}
 800cca4:	4618      	mov	r0, r3
 800cca6:	3718      	adds	r7, #24
 800cca8:	46bd      	mov	sp, r7
 800ccaa:	bd80      	pop	{r7, pc}

0800ccac <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b086      	sub	sp, #24
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	60f8      	str	r0, [r7, #12]
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	607a      	str	r2, [r7, #4]
 800ccb8:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800ccba:	7afb      	ldrb	r3, [r7, #11]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d178      	bne.n	800cdb2 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	3314      	adds	r3, #20
 800ccc4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800cccc:	2b02      	cmp	r3, #2
 800ccce:	d163      	bne.n	800cd98 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccd0:	693b      	ldr	r3, [r7, #16]
 800ccd2:	685b      	ldr	r3, [r3, #4]
 800ccd4:	693a      	ldr	r2, [r7, #16]
 800ccd6:	8992      	ldrh	r2, [r2, #12]
 800ccd8:	4293      	cmp	r3, r2
 800ccda:	d91c      	bls.n	800cd16 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	693a      	ldr	r2, [r7, #16]
 800cce2:	8992      	ldrh	r2, [r2, #12]
 800cce4:	1a9a      	subs	r2, r3, r2
 800cce6:	693b      	ldr	r3, [r7, #16]
 800cce8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	691b      	ldr	r3, [r3, #16]
 800ccee:	693a      	ldr	r2, [r7, #16]
 800ccf0:	8992      	ldrh	r2, [r2, #12]
 800ccf2:	441a      	add	r2, r3
 800ccf4:	693b      	ldr	r3, [r7, #16]
 800ccf6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800ccf8:	693b      	ldr	r3, [r7, #16]
 800ccfa:	6919      	ldr	r1, [r3, #16]
 800ccfc:	693b      	ldr	r3, [r7, #16]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	461a      	mov	r2, r3
 800cd02:	68f8      	ldr	r0, [r7, #12]
 800cd04:	f001 f8c4 	bl	800de90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd08:	2300      	movs	r3, #0
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	2100      	movs	r1, #0
 800cd0e:	68f8      	ldr	r0, [r7, #12]
 800cd10:	f001 fe2c 	bl	800e96c <USBD_LL_PrepareReceive>
 800cd14:	e040      	b.n	800cd98 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cd16:	693b      	ldr	r3, [r7, #16]
 800cd18:	899b      	ldrh	r3, [r3, #12]
 800cd1a:	461a      	mov	r2, r3
 800cd1c:	693b      	ldr	r3, [r7, #16]
 800cd1e:	685b      	ldr	r3, [r3, #4]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d11c      	bne.n	800cd5e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800cd24:	693b      	ldr	r3, [r7, #16]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	693a      	ldr	r2, [r7, #16]
 800cd2a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d316      	bcc.n	800cd5e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800cd30:	693b      	ldr	r3, [r7, #16]
 800cd32:	681a      	ldr	r2, [r3, #0]
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cd3a:	429a      	cmp	r2, r3
 800cd3c:	d20f      	bcs.n	800cd5e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd3e:	2200      	movs	r2, #0
 800cd40:	2100      	movs	r1, #0
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	f001 f8a4 	bl	800de90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd48:	68fb      	ldr	r3, [r7, #12]
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd50:	2300      	movs	r3, #0
 800cd52:	2200      	movs	r2, #0
 800cd54:	2100      	movs	r1, #0
 800cd56:	68f8      	ldr	r0, [r7, #12]
 800cd58:	f001 fe08 	bl	800e96c <USBD_LL_PrepareReceive>
 800cd5c:	e01c      	b.n	800cd98 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd5e:	68fb      	ldr	r3, [r7, #12]
 800cd60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd64:	b2db      	uxtb	r3, r3
 800cd66:	2b03      	cmp	r3, #3
 800cd68:	d10f      	bne.n	800cd8a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d009      	beq.n	800cd8a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2200      	movs	r2, #0
 800cd7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cd84:	68db      	ldr	r3, [r3, #12]
 800cd86:	68f8      	ldr	r0, [r7, #12]
 800cd88:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cd8a:	2180      	movs	r1, #128	@ 0x80
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	f001 fd43 	bl	800e818 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cd92:	68f8      	ldr	r0, [r7, #12]
 800cd94:	f001 f8d2 	bl	800df3c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cd98:	68fb      	ldr	r3, [r7, #12]
 800cd9a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d03a      	beq.n	800ce18 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800cda2:	68f8      	ldr	r0, [r7, #12]
 800cda4:	f7ff fe30 	bl	800ca08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2200      	movs	r2, #0
 800cdac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800cdb0:	e032      	b.n	800ce18 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cdb2:	7afb      	ldrb	r3, [r7, #11]
 800cdb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800cdb8:	b2db      	uxtb	r3, r3
 800cdba:	4619      	mov	r1, r3
 800cdbc:	68f8      	ldr	r0, [r7, #12]
 800cdbe:	f000 f986 	bl	800d0ce <USBD_CoreFindEP>
 800cdc2:	4603      	mov	r3, r0
 800cdc4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdc6:	7dfb      	ldrb	r3, [r7, #23]
 800cdc8:	2bff      	cmp	r3, #255	@ 0xff
 800cdca:	d025      	beq.n	800ce18 <USBD_LL_DataInStage+0x16c>
 800cdcc:	7dfb      	ldrb	r3, [r7, #23]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d122      	bne.n	800ce18 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cdd8:	b2db      	uxtb	r3, r3
 800cdda:	2b03      	cmp	r3, #3
 800cddc:	d11c      	bne.n	800ce18 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cdde:	7dfa      	ldrb	r2, [r7, #23]
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	32ae      	adds	r2, #174	@ 0xae
 800cde4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cde8:	695b      	ldr	r3, [r3, #20]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d014      	beq.n	800ce18 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800cdee:	7dfa      	ldrb	r2, [r7, #23]
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cdf6:	7dfa      	ldrb	r2, [r7, #23]
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	32ae      	adds	r2, #174	@ 0xae
 800cdfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce00:	695b      	ldr	r3, [r3, #20]
 800ce02:	7afa      	ldrb	r2, [r7, #11]
 800ce04:	4611      	mov	r1, r2
 800ce06:	68f8      	ldr	r0, [r7, #12]
 800ce08:	4798      	blx	r3
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ce0e:	7dbb      	ldrb	r3, [r7, #22]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d001      	beq.n	800ce18 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800ce14:	7dbb      	ldrb	r3, [r7, #22]
 800ce16:	e000      	b.n	800ce1a <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800ce18:	2300      	movs	r3, #0
}
 800ce1a:	4618      	mov	r0, r3
 800ce1c:	3718      	adds	r7, #24
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	bd80      	pop	{r7, pc}

0800ce22 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce22:	b580      	push	{r7, lr}
 800ce24:	b084      	sub	sp, #16
 800ce26:	af00      	add	r7, sp, #0
 800ce28:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2201      	movs	r2, #1
 800ce32:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	2200      	movs	r2, #0
 800ce48:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2200      	movs	r2, #0
 800ce50:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d014      	beq.n	800ce88 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d00e      	beq.n	800ce88 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ce70:	685b      	ldr	r3, [r3, #4]
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	6852      	ldr	r2, [r2, #4]
 800ce76:	b2d2      	uxtb	r2, r2
 800ce78:	4611      	mov	r1, r2
 800ce7a:	6878      	ldr	r0, [r7, #4]
 800ce7c:	4798      	blx	r3
 800ce7e:	4603      	mov	r3, r0
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d001      	beq.n	800ce88 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ce84:	2303      	movs	r3, #3
 800ce86:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce88:	2340      	movs	r3, #64	@ 0x40
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f001 fc7d 	bl	800e78e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2240      	movs	r2, #64	@ 0x40
 800cea0:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cea4:	2340      	movs	r3, #64	@ 0x40
 800cea6:	2200      	movs	r2, #0
 800cea8:	2180      	movs	r1, #128	@ 0x80
 800ceaa:	6878      	ldr	r0, [r7, #4]
 800ceac:	f001 fc6f 	bl	800e78e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2240      	movs	r2, #64	@ 0x40
 800cebc:	841a      	strh	r2, [r3, #32]

  return ret;
 800cebe:	7bfb      	ldrb	r3, [r7, #15]
}
 800cec0:	4618      	mov	r0, r3
 800cec2:	3710      	adds	r7, #16
 800cec4:	46bd      	mov	sp, r7
 800cec6:	bd80      	pop	{r7, pc}

0800cec8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cec8:	b480      	push	{r7}
 800ceca:	b083      	sub	sp, #12
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	460b      	mov	r3, r1
 800ced2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	78fa      	ldrb	r2, [r7, #3]
 800ced8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ceda:	2300      	movs	r3, #0
}
 800cedc:	4618      	mov	r0, r3
 800cede:	370c      	adds	r7, #12
 800cee0:	46bd      	mov	sp, r7
 800cee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee6:	4770      	bx	lr

0800cee8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cee8:	b480      	push	{r7}
 800ceea:	b083      	sub	sp, #12
 800ceec:	af00      	add	r7, sp, #0
 800ceee:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cef6:	b2db      	uxtb	r3, r3
 800cef8:	2b04      	cmp	r3, #4
 800cefa:	d006      	beq.n	800cf0a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf02:	b2da      	uxtb	r2, r3
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2204      	movs	r2, #4
 800cf0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	370c      	adds	r7, #12
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr

0800cf20 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cf20:	b480      	push	{r7}
 800cf22:	b083      	sub	sp, #12
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf2e:	b2db      	uxtb	r3, r3
 800cf30:	2b04      	cmp	r3, #4
 800cf32:	d106      	bne.n	800cf42 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b082      	sub	sp, #8
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b03      	cmp	r3, #3
 800cf62:	d110      	bne.n	800cf86 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d00b      	beq.n	800cf86 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf74:	69db      	ldr	r3, [r3, #28]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d005      	beq.n	800cf86 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cf80:	69db      	ldr	r3, [r3, #28]
 800cf82:	6878      	ldr	r0, [r7, #4]
 800cf84:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3708      	adds	r7, #8
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	bd80      	pop	{r7, pc}

0800cf90 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	460b      	mov	r3, r1
 800cf9a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	32ae      	adds	r2, #174	@ 0xae
 800cfa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d101      	bne.n	800cfb2 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cfae:	2303      	movs	r3, #3
 800cfb0:	e01c      	b.n	800cfec <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	2b03      	cmp	r3, #3
 800cfbc:	d115      	bne.n	800cfea <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	32ae      	adds	r2, #174	@ 0xae
 800cfc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfcc:	6a1b      	ldr	r3, [r3, #32]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00b      	beq.n	800cfea <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	32ae      	adds	r2, #174	@ 0xae
 800cfdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe0:	6a1b      	ldr	r3, [r3, #32]
 800cfe2:	78fa      	ldrb	r2, [r7, #3]
 800cfe4:	4611      	mov	r1, r2
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cfea:	2300      	movs	r3, #0
}
 800cfec:	4618      	mov	r0, r3
 800cfee:	3708      	adds	r7, #8
 800cff0:	46bd      	mov	sp, r7
 800cff2:	bd80      	pop	{r7, pc}

0800cff4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cff4:	b580      	push	{r7, lr}
 800cff6:	b082      	sub	sp, #8
 800cff8:	af00      	add	r7, sp, #0
 800cffa:	6078      	str	r0, [r7, #4]
 800cffc:	460b      	mov	r3, r1
 800cffe:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	32ae      	adds	r2, #174	@ 0xae
 800d00a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d101      	bne.n	800d016 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d012:	2303      	movs	r3, #3
 800d014:	e01c      	b.n	800d050 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d01c:	b2db      	uxtb	r3, r3
 800d01e:	2b03      	cmp	r3, #3
 800d020:	d115      	bne.n	800d04e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	32ae      	adds	r2, #174	@ 0xae
 800d02c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d032:	2b00      	cmp	r3, #0
 800d034:	d00b      	beq.n	800d04e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	32ae      	adds	r2, #174	@ 0xae
 800d040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d044:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d046:	78fa      	ldrb	r2, [r7, #3]
 800d048:	4611      	mov	r1, r2
 800d04a:	6878      	ldr	r0, [r7, #4]
 800d04c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d04e:	2300      	movs	r3, #0
}
 800d050:	4618      	mov	r0, r3
 800d052:	3708      	adds	r7, #8
 800d054:	46bd      	mov	sp, r7
 800d056:	bd80      	pop	{r7, pc}

0800d058 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d058:	b480      	push	{r7}
 800d05a:	b083      	sub	sp, #12
 800d05c:	af00      	add	r7, sp, #0
 800d05e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	370c      	adds	r7, #12
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d06e:	b580      	push	{r7, lr}
 800d070:	b084      	sub	sp, #16
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2201      	movs	r2, #1
 800d07e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d088:	2b00      	cmp	r3, #0
 800d08a:	d00e      	beq.n	800d0aa <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d092:	685b      	ldr	r3, [r3, #4]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	6852      	ldr	r2, [r2, #4]
 800d098:	b2d2      	uxtb	r2, r2
 800d09a:	4611      	mov	r1, r2
 800d09c:	6878      	ldr	r0, [r7, #4]
 800d09e:	4798      	blx	r3
 800d0a0:	4603      	mov	r3, r0
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d001      	beq.n	800d0aa <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d0a6:	2303      	movs	r3, #3
 800d0a8:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d0aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	3710      	adds	r7, #16
 800d0b0:	46bd      	mov	sp, r7
 800d0b2:	bd80      	pop	{r7, pc}

0800d0b4 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0b4:	b480      	push	{r7}
 800d0b6:	b083      	sub	sp, #12
 800d0b8:	af00      	add	r7, sp, #0
 800d0ba:	6078      	str	r0, [r7, #4]
 800d0bc:	460b      	mov	r3, r1
 800d0be:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0c0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	370c      	adds	r7, #12
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr

0800d0ce <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d0ce:	b480      	push	{r7}
 800d0d0:	b083      	sub	sp, #12
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	6078      	str	r0, [r7, #4]
 800d0d6:	460b      	mov	r3, r1
 800d0d8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d0da:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d0dc:	4618      	mov	r0, r3
 800d0de:	370c      	adds	r7, #12
 800d0e0:	46bd      	mov	sp, r7
 800d0e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e6:	4770      	bx	lr

0800d0e8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d0e8:	b580      	push	{r7, lr}
 800d0ea:	b086      	sub	sp, #24
 800d0ec:	af00      	add	r7, sp, #0
 800d0ee:	6078      	str	r0, [r7, #4]
 800d0f0:	460b      	mov	r3, r1
 800d0f2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	885b      	ldrh	r3, [r3, #2]
 800d104:	b29b      	uxth	r3, r3
 800d106:	68fa      	ldr	r2, [r7, #12]
 800d108:	7812      	ldrb	r2, [r2, #0]
 800d10a:	4293      	cmp	r3, r2
 800d10c:	d91f      	bls.n	800d14e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	781b      	ldrb	r3, [r3, #0]
 800d112:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d114:	e013      	b.n	800d13e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d116:	f107 030a 	add.w	r3, r7, #10
 800d11a:	4619      	mov	r1, r3
 800d11c:	6978      	ldr	r0, [r7, #20]
 800d11e:	f000 f81b 	bl	800d158 <USBD_GetNextDesc>
 800d122:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d124:	697b      	ldr	r3, [r7, #20]
 800d126:	785b      	ldrb	r3, [r3, #1]
 800d128:	2b05      	cmp	r3, #5
 800d12a:	d108      	bne.n	800d13e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d12c:	697b      	ldr	r3, [r7, #20]
 800d12e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d130:	693b      	ldr	r3, [r7, #16]
 800d132:	789b      	ldrb	r3, [r3, #2]
 800d134:	78fa      	ldrb	r2, [r7, #3]
 800d136:	429a      	cmp	r2, r3
 800d138:	d008      	beq.n	800d14c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d13a:	2300      	movs	r3, #0
 800d13c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	885b      	ldrh	r3, [r3, #2]
 800d142:	b29a      	uxth	r2, r3
 800d144:	897b      	ldrh	r3, [r7, #10]
 800d146:	429a      	cmp	r2, r3
 800d148:	d8e5      	bhi.n	800d116 <USBD_GetEpDesc+0x2e>
 800d14a:	e000      	b.n	800d14e <USBD_GetEpDesc+0x66>
          break;
 800d14c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d14e:	693b      	ldr	r3, [r7, #16]
}
 800d150:	4618      	mov	r0, r3
 800d152:	3718      	adds	r7, #24
 800d154:	46bd      	mov	sp, r7
 800d156:	bd80      	pop	{r7, pc}

0800d158 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d158:	b480      	push	{r7}
 800d15a:	b085      	sub	sp, #20
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	6078      	str	r0, [r7, #4]
 800d160:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	881b      	ldrh	r3, [r3, #0]
 800d16a:	68fa      	ldr	r2, [r7, #12]
 800d16c:	7812      	ldrb	r2, [r2, #0]
 800d16e:	4413      	add	r3, r2
 800d170:	b29a      	uxth	r2, r3
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	781b      	ldrb	r3, [r3, #0]
 800d17a:	461a      	mov	r2, r3
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	4413      	add	r3, r2
 800d180:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d182:	68fb      	ldr	r3, [r7, #12]
}
 800d184:	4618      	mov	r0, r3
 800d186:	3714      	adds	r7, #20
 800d188:	46bd      	mov	sp, r7
 800d18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d18e:	4770      	bx	lr

0800d190 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d190:	b480      	push	{r7}
 800d192:	b087      	sub	sp, #28
 800d194:	af00      	add	r7, sp, #0
 800d196:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d1a2:	697b      	ldr	r3, [r7, #20]
 800d1a4:	3301      	adds	r3, #1
 800d1a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d1a8:	697b      	ldr	r3, [r7, #20]
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d1ae:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800d1b2:	021b      	lsls	r3, r3, #8
 800d1b4:	b21a      	sxth	r2, r3
 800d1b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d1ba:	4313      	orrs	r3, r2
 800d1bc:	b21b      	sxth	r3, r3
 800d1be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d1c0:	89fb      	ldrh	r3, [r7, #14]
}
 800d1c2:	4618      	mov	r0, r3
 800d1c4:	371c      	adds	r7, #28
 800d1c6:	46bd      	mov	sp, r7
 800d1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1cc:	4770      	bx	lr
	...

0800d1d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1d0:	b580      	push	{r7, lr}
 800d1d2:	b084      	sub	sp, #16
 800d1d4:	af00      	add	r7, sp, #0
 800d1d6:	6078      	str	r0, [r7, #4]
 800d1d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d1de:	683b      	ldr	r3, [r7, #0]
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d1e6:	2b40      	cmp	r3, #64	@ 0x40
 800d1e8:	d005      	beq.n	800d1f6 <USBD_StdDevReq+0x26>
 800d1ea:	2b40      	cmp	r3, #64	@ 0x40
 800d1ec:	d857      	bhi.n	800d29e <USBD_StdDevReq+0xce>
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d00f      	beq.n	800d212 <USBD_StdDevReq+0x42>
 800d1f2:	2b20      	cmp	r3, #32
 800d1f4:	d153      	bne.n	800d29e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	32ae      	adds	r2, #174	@ 0xae
 800d200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d204:	689b      	ldr	r3, [r3, #8]
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	4798      	blx	r3
 800d20c:	4603      	mov	r3, r0
 800d20e:	73fb      	strb	r3, [r7, #15]
      break;
 800d210:	e04a      	b.n	800d2a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	785b      	ldrb	r3, [r3, #1]
 800d216:	2b09      	cmp	r3, #9
 800d218:	d83b      	bhi.n	800d292 <USBD_StdDevReq+0xc2>
 800d21a:	a201      	add	r2, pc, #4	@ (adr r2, 800d220 <USBD_StdDevReq+0x50>)
 800d21c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d220:	0800d275 	.word	0x0800d275
 800d224:	0800d289 	.word	0x0800d289
 800d228:	0800d293 	.word	0x0800d293
 800d22c:	0800d27f 	.word	0x0800d27f
 800d230:	0800d293 	.word	0x0800d293
 800d234:	0800d253 	.word	0x0800d253
 800d238:	0800d249 	.word	0x0800d249
 800d23c:	0800d293 	.word	0x0800d293
 800d240:	0800d26b 	.word	0x0800d26b
 800d244:	0800d25d 	.word	0x0800d25d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d248:	6839      	ldr	r1, [r7, #0]
 800d24a:	6878      	ldr	r0, [r7, #4]
 800d24c:	f000 fa3e 	bl	800d6cc <USBD_GetDescriptor>
          break;
 800d250:	e024      	b.n	800d29c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fba3 	bl	800d9a0 <USBD_SetAddress>
          break;
 800d25a:	e01f      	b.n	800d29c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d25c:	6839      	ldr	r1, [r7, #0]
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 fbe2 	bl	800da28 <USBD_SetConfig>
 800d264:	4603      	mov	r3, r0
 800d266:	73fb      	strb	r3, [r7, #15]
          break;
 800d268:	e018      	b.n	800d29c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d26a:	6839      	ldr	r1, [r7, #0]
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 fc85 	bl	800db7c <USBD_GetConfig>
          break;
 800d272:	e013      	b.n	800d29c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d274:	6839      	ldr	r1, [r7, #0]
 800d276:	6878      	ldr	r0, [r7, #4]
 800d278:	f000 fcb6 	bl	800dbe8 <USBD_GetStatus>
          break;
 800d27c:	e00e      	b.n	800d29c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fce5 	bl	800dc50 <USBD_SetFeature>
          break;
 800d286:	e009      	b.n	800d29c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d288:	6839      	ldr	r1, [r7, #0]
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	f000 fd09 	bl	800dca2 <USBD_ClrFeature>
          break;
 800d290:	e004      	b.n	800d29c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d292:	6839      	ldr	r1, [r7, #0]
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fd60 	bl	800dd5a <USBD_CtlError>
          break;
 800d29a:	bf00      	nop
      }
      break;
 800d29c:	e004      	b.n	800d2a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d29e:	6839      	ldr	r1, [r7, #0]
 800d2a0:	6878      	ldr	r0, [r7, #4]
 800d2a2:	f000 fd5a 	bl	800dd5a <USBD_CtlError>
      break;
 800d2a6:	bf00      	nop
  }

  return ret;
 800d2a8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}
 800d2b2:	bf00      	nop

0800d2b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b084      	sub	sp, #16
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
 800d2bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d2be:	2300      	movs	r3, #0
 800d2c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	781b      	ldrb	r3, [r3, #0]
 800d2c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d2ca:	2b40      	cmp	r3, #64	@ 0x40
 800d2cc:	d005      	beq.n	800d2da <USBD_StdItfReq+0x26>
 800d2ce:	2b40      	cmp	r3, #64	@ 0x40
 800d2d0:	d852      	bhi.n	800d378 <USBD_StdItfReq+0xc4>
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d001      	beq.n	800d2da <USBD_StdItfReq+0x26>
 800d2d6:	2b20      	cmp	r3, #32
 800d2d8:	d14e      	bne.n	800d378 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	2b02      	cmp	r3, #2
 800d2e6:	d840      	bhi.n	800d36a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d2e8:	683b      	ldr	r3, [r7, #0]
 800d2ea:	889b      	ldrh	r3, [r3, #4]
 800d2ec:	b2db      	uxtb	r3, r3
 800d2ee:	2b01      	cmp	r3, #1
 800d2f0:	d836      	bhi.n	800d360 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	889b      	ldrh	r3, [r3, #4]
 800d2f6:	b2db      	uxtb	r3, r3
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7ff feda 	bl	800d0b4 <USBD_CoreFindIF>
 800d300:	4603      	mov	r3, r0
 800d302:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d304:	7bbb      	ldrb	r3, [r7, #14]
 800d306:	2bff      	cmp	r3, #255	@ 0xff
 800d308:	d01d      	beq.n	800d346 <USBD_StdItfReq+0x92>
 800d30a:	7bbb      	ldrb	r3, [r7, #14]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d11a      	bne.n	800d346 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d310:	7bba      	ldrb	r2, [r7, #14]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	32ae      	adds	r2, #174	@ 0xae
 800d316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d31a:	689b      	ldr	r3, [r3, #8]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00f      	beq.n	800d340 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d320:	7bba      	ldrb	r2, [r7, #14]
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d328:	7bba      	ldrb	r2, [r7, #14]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	32ae      	adds	r2, #174	@ 0xae
 800d32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	6839      	ldr	r1, [r7, #0]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	4798      	blx	r3
 800d33a:	4603      	mov	r3, r0
 800d33c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d33e:	e004      	b.n	800d34a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d340:	2303      	movs	r3, #3
 800d342:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d344:	e001      	b.n	800d34a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d346:	2303      	movs	r3, #3
 800d348:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	88db      	ldrh	r3, [r3, #6]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d110      	bne.n	800d374 <USBD_StdItfReq+0xc0>
 800d352:	7bfb      	ldrb	r3, [r7, #15]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d10d      	bne.n	800d374 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 fddc 	bl	800df16 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d35e:	e009      	b.n	800d374 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d360:	6839      	ldr	r1, [r7, #0]
 800d362:	6878      	ldr	r0, [r7, #4]
 800d364:	f000 fcf9 	bl	800dd5a <USBD_CtlError>
          break;
 800d368:	e004      	b.n	800d374 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d36a:	6839      	ldr	r1, [r7, #0]
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 fcf4 	bl	800dd5a <USBD_CtlError>
          break;
 800d372:	e000      	b.n	800d376 <USBD_StdItfReq+0xc2>
          break;
 800d374:	bf00      	nop
      }
      break;
 800d376:	e004      	b.n	800d382 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d378:	6839      	ldr	r1, [r7, #0]
 800d37a:	6878      	ldr	r0, [r7, #4]
 800d37c:	f000 fced 	bl	800dd5a <USBD_CtlError>
      break;
 800d380:	bf00      	nop
  }

  return ret;
 800d382:	7bfb      	ldrb	r3, [r7, #15]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3710      	adds	r7, #16
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}

0800d38c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d38c:	b580      	push	{r7, lr}
 800d38e:	b084      	sub	sp, #16
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
 800d394:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d396:	2300      	movs	r3, #0
 800d398:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d39a:	683b      	ldr	r3, [r7, #0]
 800d39c:	889b      	ldrh	r3, [r3, #4]
 800d39e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	781b      	ldrb	r3, [r3, #0]
 800d3a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800d3a8:	2b40      	cmp	r3, #64	@ 0x40
 800d3aa:	d007      	beq.n	800d3bc <USBD_StdEPReq+0x30>
 800d3ac:	2b40      	cmp	r3, #64	@ 0x40
 800d3ae:	f200 8181 	bhi.w	800d6b4 <USBD_StdEPReq+0x328>
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d02a      	beq.n	800d40c <USBD_StdEPReq+0x80>
 800d3b6:	2b20      	cmp	r3, #32
 800d3b8:	f040 817c 	bne.w	800d6b4 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d3bc:	7bbb      	ldrb	r3, [r7, #14]
 800d3be:	4619      	mov	r1, r3
 800d3c0:	6878      	ldr	r0, [r7, #4]
 800d3c2:	f7ff fe84 	bl	800d0ce <USBD_CoreFindEP>
 800d3c6:	4603      	mov	r3, r0
 800d3c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3ca:	7b7b      	ldrb	r3, [r7, #13]
 800d3cc:	2bff      	cmp	r3, #255	@ 0xff
 800d3ce:	f000 8176 	beq.w	800d6be <USBD_StdEPReq+0x332>
 800d3d2:	7b7b      	ldrb	r3, [r7, #13]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	f040 8172 	bne.w	800d6be <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800d3da:	7b7a      	ldrb	r2, [r7, #13]
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d3e2:	7b7a      	ldrb	r2, [r7, #13]
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	32ae      	adds	r2, #174	@ 0xae
 800d3e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3ec:	689b      	ldr	r3, [r3, #8]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 8165 	beq.w	800d6be <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d3f4:	7b7a      	ldrb	r2, [r7, #13]
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	32ae      	adds	r2, #174	@ 0xae
 800d3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3fe:	689b      	ldr	r3, [r3, #8]
 800d400:	6839      	ldr	r1, [r7, #0]
 800d402:	6878      	ldr	r0, [r7, #4]
 800d404:	4798      	blx	r3
 800d406:	4603      	mov	r3, r0
 800d408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d40a:	e158      	b.n	800d6be <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d40c:	683b      	ldr	r3, [r7, #0]
 800d40e:	785b      	ldrb	r3, [r3, #1]
 800d410:	2b03      	cmp	r3, #3
 800d412:	d008      	beq.n	800d426 <USBD_StdEPReq+0x9a>
 800d414:	2b03      	cmp	r3, #3
 800d416:	f300 8147 	bgt.w	800d6a8 <USBD_StdEPReq+0x31c>
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f000 809b 	beq.w	800d556 <USBD_StdEPReq+0x1ca>
 800d420:	2b01      	cmp	r3, #1
 800d422:	d03c      	beq.n	800d49e <USBD_StdEPReq+0x112>
 800d424:	e140      	b.n	800d6a8 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d42c:	b2db      	uxtb	r3, r3
 800d42e:	2b02      	cmp	r3, #2
 800d430:	d002      	beq.n	800d438 <USBD_StdEPReq+0xac>
 800d432:	2b03      	cmp	r3, #3
 800d434:	d016      	beq.n	800d464 <USBD_StdEPReq+0xd8>
 800d436:	e02c      	b.n	800d492 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d438:	7bbb      	ldrb	r3, [r7, #14]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00d      	beq.n	800d45a <USBD_StdEPReq+0xce>
 800d43e:	7bbb      	ldrb	r3, [r7, #14]
 800d440:	2b80      	cmp	r3, #128	@ 0x80
 800d442:	d00a      	beq.n	800d45a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d444:	7bbb      	ldrb	r3, [r7, #14]
 800d446:	4619      	mov	r1, r3
 800d448:	6878      	ldr	r0, [r7, #4]
 800d44a:	f001 f9e5 	bl	800e818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d44e:	2180      	movs	r1, #128	@ 0x80
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f001 f9e1 	bl	800e818 <USBD_LL_StallEP>
 800d456:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d458:	e020      	b.n	800d49c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d45a:	6839      	ldr	r1, [r7, #0]
 800d45c:	6878      	ldr	r0, [r7, #4]
 800d45e:	f000 fc7c 	bl	800dd5a <USBD_CtlError>
              break;
 800d462:	e01b      	b.n	800d49c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d464:	683b      	ldr	r3, [r7, #0]
 800d466:	885b      	ldrh	r3, [r3, #2]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d10e      	bne.n	800d48a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d46c:	7bbb      	ldrb	r3, [r7, #14]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d00b      	beq.n	800d48a <USBD_StdEPReq+0xfe>
 800d472:	7bbb      	ldrb	r3, [r7, #14]
 800d474:	2b80      	cmp	r3, #128	@ 0x80
 800d476:	d008      	beq.n	800d48a <USBD_StdEPReq+0xfe>
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	88db      	ldrh	r3, [r3, #6]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d104      	bne.n	800d48a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d480:	7bbb      	ldrb	r3, [r7, #14]
 800d482:	4619      	mov	r1, r3
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f001 f9c7 	bl	800e818 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 fd43 	bl	800df16 <USBD_CtlSendStatus>

              break;
 800d490:	e004      	b.n	800d49c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d492:	6839      	ldr	r1, [r7, #0]
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f000 fc60 	bl	800dd5a <USBD_CtlError>
              break;
 800d49a:	bf00      	nop
          }
          break;
 800d49c:	e109      	b.n	800d6b2 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b02      	cmp	r3, #2
 800d4a8:	d002      	beq.n	800d4b0 <USBD_StdEPReq+0x124>
 800d4aa:	2b03      	cmp	r3, #3
 800d4ac:	d016      	beq.n	800d4dc <USBD_StdEPReq+0x150>
 800d4ae:	e04b      	b.n	800d548 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d4b0:	7bbb      	ldrb	r3, [r7, #14]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d00d      	beq.n	800d4d2 <USBD_StdEPReq+0x146>
 800d4b6:	7bbb      	ldrb	r3, [r7, #14]
 800d4b8:	2b80      	cmp	r3, #128	@ 0x80
 800d4ba:	d00a      	beq.n	800d4d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d4bc:	7bbb      	ldrb	r3, [r7, #14]
 800d4be:	4619      	mov	r1, r3
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f001 f9a9 	bl	800e818 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4c6:	2180      	movs	r1, #128	@ 0x80
 800d4c8:	6878      	ldr	r0, [r7, #4]
 800d4ca:	f001 f9a5 	bl	800e818 <USBD_LL_StallEP>
 800d4ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d4d0:	e040      	b.n	800d554 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d4d2:	6839      	ldr	r1, [r7, #0]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f000 fc40 	bl	800dd5a <USBD_CtlError>
              break;
 800d4da:	e03b      	b.n	800d554 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	885b      	ldrh	r3, [r3, #2]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d136      	bne.n	800d552 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d4e4:	7bbb      	ldrb	r3, [r7, #14]
 800d4e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	d004      	beq.n	800d4f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d4ee:	7bbb      	ldrb	r3, [r7, #14]
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f001 f9af 	bl	800e856 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f000 fd0c 	bl	800df16 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d4fe:	7bbb      	ldrb	r3, [r7, #14]
 800d500:	4619      	mov	r1, r3
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f7ff fde3 	bl	800d0ce <USBD_CoreFindEP>
 800d508:	4603      	mov	r3, r0
 800d50a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d50c:	7b7b      	ldrb	r3, [r7, #13]
 800d50e:	2bff      	cmp	r3, #255	@ 0xff
 800d510:	d01f      	beq.n	800d552 <USBD_StdEPReq+0x1c6>
 800d512:	7b7b      	ldrb	r3, [r7, #13]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d11c      	bne.n	800d552 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d518:	7b7a      	ldrb	r2, [r7, #13]
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d520:	7b7a      	ldrb	r2, [r7, #13]
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	32ae      	adds	r2, #174	@ 0xae
 800d526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d52a:	689b      	ldr	r3, [r3, #8]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d010      	beq.n	800d552 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d530:	7b7a      	ldrb	r2, [r7, #13]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	32ae      	adds	r2, #174	@ 0xae
 800d536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53a:	689b      	ldr	r3, [r3, #8]
 800d53c:	6839      	ldr	r1, [r7, #0]
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	4798      	blx	r3
 800d542:	4603      	mov	r3, r0
 800d544:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d546:	e004      	b.n	800d552 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d548:	6839      	ldr	r1, [r7, #0]
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fc05 	bl	800dd5a <USBD_CtlError>
              break;
 800d550:	e000      	b.n	800d554 <USBD_StdEPReq+0x1c8>
              break;
 800d552:	bf00      	nop
          }
          break;
 800d554:	e0ad      	b.n	800d6b2 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d55c:	b2db      	uxtb	r3, r3
 800d55e:	2b02      	cmp	r3, #2
 800d560:	d002      	beq.n	800d568 <USBD_StdEPReq+0x1dc>
 800d562:	2b03      	cmp	r3, #3
 800d564:	d033      	beq.n	800d5ce <USBD_StdEPReq+0x242>
 800d566:	e099      	b.n	800d69c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d568:	7bbb      	ldrb	r3, [r7, #14]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d007      	beq.n	800d57e <USBD_StdEPReq+0x1f2>
 800d56e:	7bbb      	ldrb	r3, [r7, #14]
 800d570:	2b80      	cmp	r3, #128	@ 0x80
 800d572:	d004      	beq.n	800d57e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d574:	6839      	ldr	r1, [r7, #0]
 800d576:	6878      	ldr	r0, [r7, #4]
 800d578:	f000 fbef 	bl	800dd5a <USBD_CtlError>
                break;
 800d57c:	e093      	b.n	800d6a6 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d57e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d582:	2b00      	cmp	r3, #0
 800d584:	da0b      	bge.n	800d59e <USBD_StdEPReq+0x212>
 800d586:	7bbb      	ldrb	r3, [r7, #14]
 800d588:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d58c:	4613      	mov	r3, r2
 800d58e:	009b      	lsls	r3, r3, #2
 800d590:	4413      	add	r3, r2
 800d592:	009b      	lsls	r3, r3, #2
 800d594:	3310      	adds	r3, #16
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	4413      	add	r3, r2
 800d59a:	3304      	adds	r3, #4
 800d59c:	e00b      	b.n	800d5b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d59e:	7bbb      	ldrb	r3, [r7, #14]
 800d5a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d5a4:	4613      	mov	r3, r2
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	4413      	add	r3, r2
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d5b0:	687a      	ldr	r2, [r7, #4]
 800d5b2:	4413      	add	r3, r2
 800d5b4:	3304      	adds	r3, #4
 800d5b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d5be:	68bb      	ldr	r3, [r7, #8]
 800d5c0:	330e      	adds	r3, #14
 800d5c2:	2202      	movs	r2, #2
 800d5c4:	4619      	mov	r1, r3
 800d5c6:	6878      	ldr	r0, [r7, #4]
 800d5c8:	f000 fc44 	bl	800de54 <USBD_CtlSendData>
              break;
 800d5cc:	e06b      	b.n	800d6a6 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d5ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	da11      	bge.n	800d5fa <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d5d6:	7bbb      	ldrb	r3, [r7, #14]
 800d5d8:	f003 020f 	and.w	r2, r3, #15
 800d5dc:	6879      	ldr	r1, [r7, #4]
 800d5de:	4613      	mov	r3, r2
 800d5e0:	009b      	lsls	r3, r3, #2
 800d5e2:	4413      	add	r3, r2
 800d5e4:	009b      	lsls	r3, r3, #2
 800d5e6:	440b      	add	r3, r1
 800d5e8:	3323      	adds	r3, #35	@ 0x23
 800d5ea:	781b      	ldrb	r3, [r3, #0]
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	d117      	bne.n	800d620 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d5f0:	6839      	ldr	r1, [r7, #0]
 800d5f2:	6878      	ldr	r0, [r7, #4]
 800d5f4:	f000 fbb1 	bl	800dd5a <USBD_CtlError>
                  break;
 800d5f8:	e055      	b.n	800d6a6 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d5fa:	7bbb      	ldrb	r3, [r7, #14]
 800d5fc:	f003 020f 	and.w	r2, r3, #15
 800d600:	6879      	ldr	r1, [r7, #4]
 800d602:	4613      	mov	r3, r2
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	4413      	add	r3, r2
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	440b      	add	r3, r1
 800d60c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800d610:	781b      	ldrb	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d104      	bne.n	800d620 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800d616:	6839      	ldr	r1, [r7, #0]
 800d618:	6878      	ldr	r0, [r7, #4]
 800d61a:	f000 fb9e 	bl	800dd5a <USBD_CtlError>
                  break;
 800d61e:	e042      	b.n	800d6a6 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d620:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d624:	2b00      	cmp	r3, #0
 800d626:	da0b      	bge.n	800d640 <USBD_StdEPReq+0x2b4>
 800d628:	7bbb      	ldrb	r3, [r7, #14]
 800d62a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d62e:	4613      	mov	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	4413      	add	r3, r2
 800d634:	009b      	lsls	r3, r3, #2
 800d636:	3310      	adds	r3, #16
 800d638:	687a      	ldr	r2, [r7, #4]
 800d63a:	4413      	add	r3, r2
 800d63c:	3304      	adds	r3, #4
 800d63e:	e00b      	b.n	800d658 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d640:	7bbb      	ldrb	r3, [r7, #14]
 800d642:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d646:	4613      	mov	r3, r2
 800d648:	009b      	lsls	r3, r3, #2
 800d64a:	4413      	add	r3, r2
 800d64c:	009b      	lsls	r3, r3, #2
 800d64e:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	4413      	add	r3, r2
 800d656:	3304      	adds	r3, #4
 800d658:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d65a:	7bbb      	ldrb	r3, [r7, #14]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d002      	beq.n	800d666 <USBD_StdEPReq+0x2da>
 800d660:	7bbb      	ldrb	r3, [r7, #14]
 800d662:	2b80      	cmp	r3, #128	@ 0x80
 800d664:	d103      	bne.n	800d66e <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	2200      	movs	r2, #0
 800d66a:	739a      	strb	r2, [r3, #14]
 800d66c:	e00e      	b.n	800d68c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d66e:	7bbb      	ldrb	r3, [r7, #14]
 800d670:	4619      	mov	r1, r3
 800d672:	6878      	ldr	r0, [r7, #4]
 800d674:	f001 f90e 	bl	800e894 <USBD_LL_IsStallEP>
 800d678:	4603      	mov	r3, r0
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d003      	beq.n	800d686 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	2201      	movs	r2, #1
 800d682:	739a      	strb	r2, [r3, #14]
 800d684:	e002      	b.n	800d68c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800d686:	68bb      	ldr	r3, [r7, #8]
 800d688:	2200      	movs	r2, #0
 800d68a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	330e      	adds	r3, #14
 800d690:	2202      	movs	r2, #2
 800d692:	4619      	mov	r1, r3
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 fbdd 	bl	800de54 <USBD_CtlSendData>
              break;
 800d69a:	e004      	b.n	800d6a6 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800d69c:	6839      	ldr	r1, [r7, #0]
 800d69e:	6878      	ldr	r0, [r7, #4]
 800d6a0:	f000 fb5b 	bl	800dd5a <USBD_CtlError>
              break;
 800d6a4:	bf00      	nop
          }
          break;
 800d6a6:	e004      	b.n	800d6b2 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800d6a8:	6839      	ldr	r1, [r7, #0]
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 fb55 	bl	800dd5a <USBD_CtlError>
          break;
 800d6b0:	bf00      	nop
      }
      break;
 800d6b2:	e005      	b.n	800d6c0 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fb4f 	bl	800dd5a <USBD_CtlError>
      break;
 800d6bc:	e000      	b.n	800d6c0 <USBD_StdEPReq+0x334>
      break;
 800d6be:	bf00      	nop
  }

  return ret;
 800d6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3710      	adds	r7, #16
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
	...

0800d6cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6cc:	b580      	push	{r7, lr}
 800d6ce:	b084      	sub	sp, #16
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	6078      	str	r0, [r7, #4]
 800d6d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d6da:	2300      	movs	r3, #0
 800d6dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d6de:	2300      	movs	r3, #0
 800d6e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	885b      	ldrh	r3, [r3, #2]
 800d6e6:	0a1b      	lsrs	r3, r3, #8
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	3b01      	subs	r3, #1
 800d6ec:	2b06      	cmp	r3, #6
 800d6ee:	f200 8128 	bhi.w	800d942 <USBD_GetDescriptor+0x276>
 800d6f2:	a201      	add	r2, pc, #4	@ (adr r2, 800d6f8 <USBD_GetDescriptor+0x2c>)
 800d6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d6f8:	0800d715 	.word	0x0800d715
 800d6fc:	0800d72d 	.word	0x0800d72d
 800d700:	0800d76d 	.word	0x0800d76d
 800d704:	0800d943 	.word	0x0800d943
 800d708:	0800d943 	.word	0x0800d943
 800d70c:	0800d8e3 	.word	0x0800d8e3
 800d710:	0800d90f 	.word	0x0800d90f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	687a      	ldr	r2, [r7, #4]
 800d71e:	7c12      	ldrb	r2, [r2, #16]
 800d720:	f107 0108 	add.w	r1, r7, #8
 800d724:	4610      	mov	r0, r2
 800d726:	4798      	blx	r3
 800d728:	60f8      	str	r0, [r7, #12]
      break;
 800d72a:	e112      	b.n	800d952 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	7c1b      	ldrb	r3, [r3, #16]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d10d      	bne.n	800d750 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d73c:	f107 0208 	add.w	r2, r7, #8
 800d740:	4610      	mov	r0, r2
 800d742:	4798      	blx	r3
 800d744:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d746:	68fb      	ldr	r3, [r7, #12]
 800d748:	3301      	adds	r3, #1
 800d74a:	2202      	movs	r2, #2
 800d74c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d74e:	e100      	b.n	800d952 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d758:	f107 0208 	add.w	r2, r7, #8
 800d75c:	4610      	mov	r0, r2
 800d75e:	4798      	blx	r3
 800d760:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	3301      	adds	r3, #1
 800d766:	2202      	movs	r2, #2
 800d768:	701a      	strb	r2, [r3, #0]
      break;
 800d76a:	e0f2      	b.n	800d952 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d76c:	683b      	ldr	r3, [r7, #0]
 800d76e:	885b      	ldrh	r3, [r3, #2]
 800d770:	b2db      	uxtb	r3, r3
 800d772:	2b05      	cmp	r3, #5
 800d774:	f200 80ac 	bhi.w	800d8d0 <USBD_GetDescriptor+0x204>
 800d778:	a201      	add	r2, pc, #4	@ (adr r2, 800d780 <USBD_GetDescriptor+0xb4>)
 800d77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d77e:	bf00      	nop
 800d780:	0800d799 	.word	0x0800d799
 800d784:	0800d7cd 	.word	0x0800d7cd
 800d788:	0800d801 	.word	0x0800d801
 800d78c:	0800d835 	.word	0x0800d835
 800d790:	0800d869 	.word	0x0800d869
 800d794:	0800d89d 	.word	0x0800d89d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d00b      	beq.n	800d7bc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7aa:	685b      	ldr	r3, [r3, #4]
 800d7ac:	687a      	ldr	r2, [r7, #4]
 800d7ae:	7c12      	ldrb	r2, [r2, #16]
 800d7b0:	f107 0108 	add.w	r1, r7, #8
 800d7b4:	4610      	mov	r0, r2
 800d7b6:	4798      	blx	r3
 800d7b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7ba:	e091      	b.n	800d8e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7bc:	6839      	ldr	r1, [r7, #0]
 800d7be:	6878      	ldr	r0, [r7, #4]
 800d7c0:	f000 facb 	bl	800dd5a <USBD_CtlError>
            err++;
 800d7c4:	7afb      	ldrb	r3, [r7, #11]
 800d7c6:	3301      	adds	r3, #1
 800d7c8:	72fb      	strb	r3, [r7, #11]
          break;
 800d7ca:	e089      	b.n	800d8e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7d2:	689b      	ldr	r3, [r3, #8]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d00b      	beq.n	800d7f0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d7de:	689b      	ldr	r3, [r3, #8]
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	7c12      	ldrb	r2, [r2, #16]
 800d7e4:	f107 0108 	add.w	r1, r7, #8
 800d7e8:	4610      	mov	r0, r2
 800d7ea:	4798      	blx	r3
 800d7ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d7ee:	e077      	b.n	800d8e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d7f0:	6839      	ldr	r1, [r7, #0]
 800d7f2:	6878      	ldr	r0, [r7, #4]
 800d7f4:	f000 fab1 	bl	800dd5a <USBD_CtlError>
            err++;
 800d7f8:	7afb      	ldrb	r3, [r7, #11]
 800d7fa:	3301      	adds	r3, #1
 800d7fc:	72fb      	strb	r3, [r7, #11]
          break;
 800d7fe:	e06f      	b.n	800d8e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d806:	68db      	ldr	r3, [r3, #12]
 800d808:	2b00      	cmp	r3, #0
 800d80a:	d00b      	beq.n	800d824 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d812:	68db      	ldr	r3, [r3, #12]
 800d814:	687a      	ldr	r2, [r7, #4]
 800d816:	7c12      	ldrb	r2, [r2, #16]
 800d818:	f107 0108 	add.w	r1, r7, #8
 800d81c:	4610      	mov	r0, r2
 800d81e:	4798      	blx	r3
 800d820:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d822:	e05d      	b.n	800d8e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d824:	6839      	ldr	r1, [r7, #0]
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 fa97 	bl	800dd5a <USBD_CtlError>
            err++;
 800d82c:	7afb      	ldrb	r3, [r7, #11]
 800d82e:	3301      	adds	r3, #1
 800d830:	72fb      	strb	r3, [r7, #11]
          break;
 800d832:	e055      	b.n	800d8e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d83a:	691b      	ldr	r3, [r3, #16]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d00b      	beq.n	800d858 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d846:	691b      	ldr	r3, [r3, #16]
 800d848:	687a      	ldr	r2, [r7, #4]
 800d84a:	7c12      	ldrb	r2, [r2, #16]
 800d84c:	f107 0108 	add.w	r1, r7, #8
 800d850:	4610      	mov	r0, r2
 800d852:	4798      	blx	r3
 800d854:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d856:	e043      	b.n	800d8e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d858:	6839      	ldr	r1, [r7, #0]
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 fa7d 	bl	800dd5a <USBD_CtlError>
            err++;
 800d860:	7afb      	ldrb	r3, [r7, #11]
 800d862:	3301      	adds	r3, #1
 800d864:	72fb      	strb	r3, [r7, #11]
          break;
 800d866:	e03b      	b.n	800d8e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d86e:	695b      	ldr	r3, [r3, #20]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00b      	beq.n	800d88c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d87a:	695b      	ldr	r3, [r3, #20]
 800d87c:	687a      	ldr	r2, [r7, #4]
 800d87e:	7c12      	ldrb	r2, [r2, #16]
 800d880:	f107 0108 	add.w	r1, r7, #8
 800d884:	4610      	mov	r0, r2
 800d886:	4798      	blx	r3
 800d888:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d88a:	e029      	b.n	800d8e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d88c:	6839      	ldr	r1, [r7, #0]
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 fa63 	bl	800dd5a <USBD_CtlError>
            err++;
 800d894:	7afb      	ldrb	r3, [r7, #11]
 800d896:	3301      	adds	r3, #1
 800d898:	72fb      	strb	r3, [r7, #11]
          break;
 800d89a:	e021      	b.n	800d8e0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8a2:	699b      	ldr	r3, [r3, #24]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	d00b      	beq.n	800d8c0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d8ae:	699b      	ldr	r3, [r3, #24]
 800d8b0:	687a      	ldr	r2, [r7, #4]
 800d8b2:	7c12      	ldrb	r2, [r2, #16]
 800d8b4:	f107 0108 	add.w	r1, r7, #8
 800d8b8:	4610      	mov	r0, r2
 800d8ba:	4798      	blx	r3
 800d8bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d8be:	e00f      	b.n	800d8e0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d8c0:	6839      	ldr	r1, [r7, #0]
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 fa49 	bl	800dd5a <USBD_CtlError>
            err++;
 800d8c8:	7afb      	ldrb	r3, [r7, #11]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	72fb      	strb	r3, [r7, #11]
          break;
 800d8ce:	e007      	b.n	800d8e0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d8d0:	6839      	ldr	r1, [r7, #0]
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 fa41 	bl	800dd5a <USBD_CtlError>
          err++;
 800d8d8:	7afb      	ldrb	r3, [r7, #11]
 800d8da:	3301      	adds	r3, #1
 800d8dc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d8de:	bf00      	nop
      }
      break;
 800d8e0:	e037      	b.n	800d952 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	7c1b      	ldrb	r3, [r3, #16]
 800d8e6:	2b00      	cmp	r3, #0
 800d8e8:	d109      	bne.n	800d8fe <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d8f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8f2:	f107 0208 	add.w	r2, r7, #8
 800d8f6:	4610      	mov	r0, r2
 800d8f8:	4798      	blx	r3
 800d8fa:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d8fc:	e029      	b.n	800d952 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d8fe:	6839      	ldr	r1, [r7, #0]
 800d900:	6878      	ldr	r0, [r7, #4]
 800d902:	f000 fa2a 	bl	800dd5a <USBD_CtlError>
        err++;
 800d906:	7afb      	ldrb	r3, [r7, #11]
 800d908:	3301      	adds	r3, #1
 800d90a:	72fb      	strb	r3, [r7, #11]
      break;
 800d90c:	e021      	b.n	800d952 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	7c1b      	ldrb	r3, [r3, #16]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d10d      	bne.n	800d932 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d91c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d91e:	f107 0208 	add.w	r2, r7, #8
 800d922:	4610      	mov	r0, r2
 800d924:	4798      	blx	r3
 800d926:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	3301      	adds	r3, #1
 800d92c:	2207      	movs	r2, #7
 800d92e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d930:	e00f      	b.n	800d952 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d932:	6839      	ldr	r1, [r7, #0]
 800d934:	6878      	ldr	r0, [r7, #4]
 800d936:	f000 fa10 	bl	800dd5a <USBD_CtlError>
        err++;
 800d93a:	7afb      	ldrb	r3, [r7, #11]
 800d93c:	3301      	adds	r3, #1
 800d93e:	72fb      	strb	r3, [r7, #11]
      break;
 800d940:	e007      	b.n	800d952 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d942:	6839      	ldr	r1, [r7, #0]
 800d944:	6878      	ldr	r0, [r7, #4]
 800d946:	f000 fa08 	bl	800dd5a <USBD_CtlError>
      err++;
 800d94a:	7afb      	ldrb	r3, [r7, #11]
 800d94c:	3301      	adds	r3, #1
 800d94e:	72fb      	strb	r3, [r7, #11]
      break;
 800d950:	bf00      	nop
  }

  if (err != 0U)
 800d952:	7afb      	ldrb	r3, [r7, #11]
 800d954:	2b00      	cmp	r3, #0
 800d956:	d11e      	bne.n	800d996 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	88db      	ldrh	r3, [r3, #6]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d016      	beq.n	800d98e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d960:	893b      	ldrh	r3, [r7, #8]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00e      	beq.n	800d984 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	88da      	ldrh	r2, [r3, #6]
 800d96a:	893b      	ldrh	r3, [r7, #8]
 800d96c:	4293      	cmp	r3, r2
 800d96e:	bf28      	it	cs
 800d970:	4613      	movcs	r3, r2
 800d972:	b29b      	uxth	r3, r3
 800d974:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d976:	893b      	ldrh	r3, [r7, #8]
 800d978:	461a      	mov	r2, r3
 800d97a:	68f9      	ldr	r1, [r7, #12]
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f000 fa69 	bl	800de54 <USBD_CtlSendData>
 800d982:	e009      	b.n	800d998 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d984:	6839      	ldr	r1, [r7, #0]
 800d986:	6878      	ldr	r0, [r7, #4]
 800d988:	f000 f9e7 	bl	800dd5a <USBD_CtlError>
 800d98c:	e004      	b.n	800d998 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 fac1 	bl	800df16 <USBD_CtlSendStatus>
 800d994:	e000      	b.n	800d998 <USBD_GetDescriptor+0x2cc>
    return;
 800d996:	bf00      	nop
  }
}
 800d998:	3710      	adds	r7, #16
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop

0800d9a0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9a0:	b580      	push	{r7, lr}
 800d9a2:	b084      	sub	sp, #16
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	6078      	str	r0, [r7, #4]
 800d9a8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	889b      	ldrh	r3, [r3, #4]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d131      	bne.n	800da16 <USBD_SetAddress+0x76>
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	88db      	ldrh	r3, [r3, #6]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d12d      	bne.n	800da16 <USBD_SetAddress+0x76>
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	885b      	ldrh	r3, [r3, #2]
 800d9be:	2b7f      	cmp	r3, #127	@ 0x7f
 800d9c0:	d829      	bhi.n	800da16 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	885b      	ldrh	r3, [r3, #2]
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d9cc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	2b03      	cmp	r3, #3
 800d9d8:	d104      	bne.n	800d9e4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d9da:	6839      	ldr	r1, [r7, #0]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f000 f9bc 	bl	800dd5a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9e2:	e01d      	b.n	800da20 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	7bfa      	ldrb	r2, [r7, #15]
 800d9e8:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d9ec:	7bfb      	ldrb	r3, [r7, #15]
 800d9ee:	4619      	mov	r1, r3
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 ff7b 	bl	800e8ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d9f6:	6878      	ldr	r0, [r7, #4]
 800d9f8:	f000 fa8d 	bl	800df16 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d9fc:	7bfb      	ldrb	r3, [r7, #15]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d004      	beq.n	800da0c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2202      	movs	r2, #2
 800da06:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da0a:	e009      	b.n	800da20 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2201      	movs	r2, #1
 800da10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da14:	e004      	b.n	800da20 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800da16:	6839      	ldr	r1, [r7, #0]
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f000 f99e 	bl	800dd5a <USBD_CtlError>
  }
}
 800da1e:	bf00      	nop
 800da20:	bf00      	nop
 800da22:	3710      	adds	r7, #16
 800da24:	46bd      	mov	sp, r7
 800da26:	bd80      	pop	{r7, pc}

0800da28 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	885b      	ldrh	r3, [r3, #2]
 800da3a:	b2da      	uxtb	r2, r3
 800da3c:	4b4e      	ldr	r3, [pc, #312]	@ (800db78 <USBD_SetConfig+0x150>)
 800da3e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800da40:	4b4d      	ldr	r3, [pc, #308]	@ (800db78 <USBD_SetConfig+0x150>)
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	2b01      	cmp	r3, #1
 800da46:	d905      	bls.n	800da54 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800da48:	6839      	ldr	r1, [r7, #0]
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 f985 	bl	800dd5a <USBD_CtlError>
    return USBD_FAIL;
 800da50:	2303      	movs	r3, #3
 800da52:	e08c      	b.n	800db6e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800da5a:	b2db      	uxtb	r3, r3
 800da5c:	2b02      	cmp	r3, #2
 800da5e:	d002      	beq.n	800da66 <USBD_SetConfig+0x3e>
 800da60:	2b03      	cmp	r3, #3
 800da62:	d029      	beq.n	800dab8 <USBD_SetConfig+0x90>
 800da64:	e075      	b.n	800db52 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800da66:	4b44      	ldr	r3, [pc, #272]	@ (800db78 <USBD_SetConfig+0x150>)
 800da68:	781b      	ldrb	r3, [r3, #0]
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	d020      	beq.n	800dab0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800da6e:	4b42      	ldr	r3, [pc, #264]	@ (800db78 <USBD_SetConfig+0x150>)
 800da70:	781b      	ldrb	r3, [r3, #0]
 800da72:	461a      	mov	r2, r3
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800da78:	4b3f      	ldr	r3, [pc, #252]	@ (800db78 <USBD_SetConfig+0x150>)
 800da7a:	781b      	ldrb	r3, [r3, #0]
 800da7c:	4619      	mov	r1, r3
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7fe ffcd 	bl	800ca1e <USBD_SetClassConfig>
 800da84:	4603      	mov	r3, r0
 800da86:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800da88:	7bfb      	ldrb	r3, [r7, #15]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d008      	beq.n	800daa0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800da8e:	6839      	ldr	r1, [r7, #0]
 800da90:	6878      	ldr	r0, [r7, #4]
 800da92:	f000 f962 	bl	800dd5a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	2202      	movs	r2, #2
 800da9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800da9e:	e065      	b.n	800db6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800daa0:	6878      	ldr	r0, [r7, #4]
 800daa2:	f000 fa38 	bl	800df16 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	2203      	movs	r2, #3
 800daaa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800daae:	e05d      	b.n	800db6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f000 fa30 	bl	800df16 <USBD_CtlSendStatus>
      break;
 800dab6:	e059      	b.n	800db6c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dab8:	4b2f      	ldr	r3, [pc, #188]	@ (800db78 <USBD_SetConfig+0x150>)
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d112      	bne.n	800dae6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2202      	movs	r2, #2
 800dac4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800dac8:	4b2b      	ldr	r3, [pc, #172]	@ (800db78 <USBD_SetConfig+0x150>)
 800daca:	781b      	ldrb	r3, [r3, #0]
 800dacc:	461a      	mov	r2, r3
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dad2:	4b29      	ldr	r3, [pc, #164]	@ (800db78 <USBD_SetConfig+0x150>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	4619      	mov	r1, r3
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7fe ffbc 	bl	800ca56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	f000 fa19 	bl	800df16 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dae4:	e042      	b.n	800db6c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800dae6:	4b24      	ldr	r3, [pc, #144]	@ (800db78 <USBD_SetConfig+0x150>)
 800dae8:	781b      	ldrb	r3, [r3, #0]
 800daea:	461a      	mov	r2, r3
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	685b      	ldr	r3, [r3, #4]
 800daf0:	429a      	cmp	r2, r3
 800daf2:	d02a      	beq.n	800db4a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	685b      	ldr	r3, [r3, #4]
 800daf8:	b2db      	uxtb	r3, r3
 800dafa:	4619      	mov	r1, r3
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f7fe ffaa 	bl	800ca56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800db02:	4b1d      	ldr	r3, [pc, #116]	@ (800db78 <USBD_SetConfig+0x150>)
 800db04:	781b      	ldrb	r3, [r3, #0]
 800db06:	461a      	mov	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800db0c:	4b1a      	ldr	r3, [pc, #104]	@ (800db78 <USBD_SetConfig+0x150>)
 800db0e:	781b      	ldrb	r3, [r3, #0]
 800db10:	4619      	mov	r1, r3
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f7fe ff83 	bl	800ca1e <USBD_SetClassConfig>
 800db18:	4603      	mov	r3, r0
 800db1a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800db1c:	7bfb      	ldrb	r3, [r7, #15]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d00f      	beq.n	800db42 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800db22:	6839      	ldr	r1, [r7, #0]
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 f918 	bl	800dd5a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	b2db      	uxtb	r3, r3
 800db30:	4619      	mov	r1, r3
 800db32:	6878      	ldr	r0, [r7, #4]
 800db34:	f7fe ff8f 	bl	800ca56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	2202      	movs	r2, #2
 800db3c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800db40:	e014      	b.n	800db6c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 f9e7 	bl	800df16 <USBD_CtlSendStatus>
      break;
 800db48:	e010      	b.n	800db6c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800db4a:	6878      	ldr	r0, [r7, #4]
 800db4c:	f000 f9e3 	bl	800df16 <USBD_CtlSendStatus>
      break;
 800db50:	e00c      	b.n	800db6c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800db52:	6839      	ldr	r1, [r7, #0]
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f000 f900 	bl	800dd5a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800db5a:	4b07      	ldr	r3, [pc, #28]	@ (800db78 <USBD_SetConfig+0x150>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f7fe ff78 	bl	800ca56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800db66:	2303      	movs	r3, #3
 800db68:	73fb      	strb	r3, [r7, #15]
      break;
 800db6a:	bf00      	nop
  }

  return ret;
 800db6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800db6e:	4618      	mov	r0, r3
 800db70:	3710      	adds	r7, #16
 800db72:	46bd      	mov	sp, r7
 800db74:	bd80      	pop	{r7, pc}
 800db76:	bf00      	nop
 800db78:	20000b30 	.word	0x20000b30

0800db7c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
 800db82:	6078      	str	r0, [r7, #4]
 800db84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	88db      	ldrh	r3, [r3, #6]
 800db8a:	2b01      	cmp	r3, #1
 800db8c:	d004      	beq.n	800db98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800db8e:	6839      	ldr	r1, [r7, #0]
 800db90:	6878      	ldr	r0, [r7, #4]
 800db92:	f000 f8e2 	bl	800dd5a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800db96:	e023      	b.n	800dbe0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800db9e:	b2db      	uxtb	r3, r3
 800dba0:	2b02      	cmp	r3, #2
 800dba2:	dc02      	bgt.n	800dbaa <USBD_GetConfig+0x2e>
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	dc03      	bgt.n	800dbb0 <USBD_GetConfig+0x34>
 800dba8:	e015      	b.n	800dbd6 <USBD_GetConfig+0x5a>
 800dbaa:	2b03      	cmp	r3, #3
 800dbac:	d00b      	beq.n	800dbc6 <USBD_GetConfig+0x4a>
 800dbae:	e012      	b.n	800dbd6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	3308      	adds	r3, #8
 800dbba:	2201      	movs	r2, #1
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	6878      	ldr	r0, [r7, #4]
 800dbc0:	f000 f948 	bl	800de54 <USBD_CtlSendData>
        break;
 800dbc4:	e00c      	b.n	800dbe0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	3304      	adds	r3, #4
 800dbca:	2201      	movs	r2, #1
 800dbcc:	4619      	mov	r1, r3
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f000 f940 	bl	800de54 <USBD_CtlSendData>
        break;
 800dbd4:	e004      	b.n	800dbe0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dbd6:	6839      	ldr	r1, [r7, #0]
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f000 f8be 	bl	800dd5a <USBD_CtlError>
        break;
 800dbde:	bf00      	nop
}
 800dbe0:	bf00      	nop
 800dbe2:	3708      	adds	r7, #8
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	3b01      	subs	r3, #1
 800dbfc:	2b02      	cmp	r3, #2
 800dbfe:	d81e      	bhi.n	800dc3e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	88db      	ldrh	r3, [r3, #6]
 800dc04:	2b02      	cmp	r3, #2
 800dc06:	d004      	beq.n	800dc12 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800dc08:	6839      	ldr	r1, [r7, #0]
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f8a5 	bl	800dd5a <USBD_CtlError>
        break;
 800dc10:	e01a      	b.n	800dc48 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	2201      	movs	r2, #1
 800dc16:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d005      	beq.n	800dc2e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	68db      	ldr	r3, [r3, #12]
 800dc26:	f043 0202 	orr.w	r2, r3, #2
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	330c      	adds	r3, #12
 800dc32:	2202      	movs	r2, #2
 800dc34:	4619      	mov	r1, r3
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 f90c 	bl	800de54 <USBD_CtlSendData>
      break;
 800dc3c:	e004      	b.n	800dc48 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800dc3e:	6839      	ldr	r1, [r7, #0]
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f000 f88a 	bl	800dd5a <USBD_CtlError>
      break;
 800dc46:	bf00      	nop
  }
}
 800dc48:	bf00      	nop
 800dc4a:	3708      	adds	r7, #8
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd80      	pop	{r7, pc}

0800dc50 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b082      	sub	sp, #8
 800dc54:	af00      	add	r7, sp, #0
 800dc56:	6078      	str	r0, [r7, #4]
 800dc58:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	885b      	ldrh	r3, [r3, #2]
 800dc5e:	2b01      	cmp	r3, #1
 800dc60:	d107      	bne.n	800dc72 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2201      	movs	r2, #1
 800dc66:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800dc6a:	6878      	ldr	r0, [r7, #4]
 800dc6c:	f000 f953 	bl	800df16 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800dc70:	e013      	b.n	800dc9a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800dc72:	683b      	ldr	r3, [r7, #0]
 800dc74:	885b      	ldrh	r3, [r3, #2]
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d10b      	bne.n	800dc92 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	889b      	ldrh	r3, [r3, #4]
 800dc7e:	0a1b      	lsrs	r3, r3, #8
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800dc8a:	6878      	ldr	r0, [r7, #4]
 800dc8c:	f000 f943 	bl	800df16 <USBD_CtlSendStatus>
}
 800dc90:	e003      	b.n	800dc9a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800dc92:	6839      	ldr	r1, [r7, #0]
 800dc94:	6878      	ldr	r0, [r7, #4]
 800dc96:	f000 f860 	bl	800dd5a <USBD_CtlError>
}
 800dc9a:	bf00      	nop
 800dc9c:	3708      	adds	r7, #8
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}

0800dca2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dca2:	b580      	push	{r7, lr}
 800dca4:	b082      	sub	sp, #8
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
 800dcaa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	3b01      	subs	r3, #1
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	d80b      	bhi.n	800dcd2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	885b      	ldrh	r3, [r3, #2]
 800dcbe:	2b01      	cmp	r3, #1
 800dcc0:	d10c      	bne.n	800dcdc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f000 f923 	bl	800df16 <USBD_CtlSendStatus>
      }
      break;
 800dcd0:	e004      	b.n	800dcdc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dcd2:	6839      	ldr	r1, [r7, #0]
 800dcd4:	6878      	ldr	r0, [r7, #4]
 800dcd6:	f000 f840 	bl	800dd5a <USBD_CtlError>
      break;
 800dcda:	e000      	b.n	800dcde <USBD_ClrFeature+0x3c>
      break;
 800dcdc:	bf00      	nop
  }
}
 800dcde:	bf00      	nop
 800dce0:	3708      	adds	r7, #8
 800dce2:	46bd      	mov	sp, r7
 800dce4:	bd80      	pop	{r7, pc}

0800dce6 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dce6:	b580      	push	{r7, lr}
 800dce8:	b084      	sub	sp, #16
 800dcea:	af00      	add	r7, sp, #0
 800dcec:	6078      	str	r0, [r7, #4]
 800dcee:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dcf0:	683b      	ldr	r3, [r7, #0]
 800dcf2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	781a      	ldrb	r2, [r3, #0]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	3301      	adds	r3, #1
 800dd00:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	781a      	ldrb	r2, [r3, #0]
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800dd10:	68f8      	ldr	r0, [r7, #12]
 800dd12:	f7ff fa3d 	bl	800d190 <SWAPBYTE>
 800dd16:	4603      	mov	r3, r0
 800dd18:	461a      	mov	r2, r3
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	3301      	adds	r3, #1
 800dd22:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	3301      	adds	r3, #1
 800dd28:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800dd2a:	68f8      	ldr	r0, [r7, #12]
 800dd2c:	f7ff fa30 	bl	800d190 <SWAPBYTE>
 800dd30:	4603      	mov	r3, r0
 800dd32:	461a      	mov	r2, r3
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	3301      	adds	r3, #1
 800dd3c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	3301      	adds	r3, #1
 800dd42:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dd44:	68f8      	ldr	r0, [r7, #12]
 800dd46:	f7ff fa23 	bl	800d190 <SWAPBYTE>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	461a      	mov	r2, r3
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	80da      	strh	r2, [r3, #6]
}
 800dd52:	bf00      	nop
 800dd54:	3710      	adds	r7, #16
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b082      	sub	sp, #8
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800dd64:	2180      	movs	r1, #128	@ 0x80
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f000 fd56 	bl	800e818 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 fd52 	bl	800e818 <USBD_LL_StallEP>
}
 800dd74:	bf00      	nop
 800dd76:	3708      	adds	r7, #8
 800dd78:	46bd      	mov	sp, r7
 800dd7a:	bd80      	pop	{r7, pc}

0800dd7c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b086      	sub	sp, #24
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd88:	2300      	movs	r3, #0
 800dd8a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d042      	beq.n	800de18 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800dd96:	6938      	ldr	r0, [r7, #16]
 800dd98:	f000 f842 	bl	800de20 <USBD_GetLen>
 800dd9c:	4603      	mov	r3, r0
 800dd9e:	3301      	adds	r3, #1
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dda6:	d808      	bhi.n	800ddba <USBD_GetString+0x3e>
 800dda8:	6938      	ldr	r0, [r7, #16]
 800ddaa:	f000 f839 	bl	800de20 <USBD_GetLen>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	3301      	adds	r3, #1
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	005b      	lsls	r3, r3, #1
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	e001      	b.n	800ddbe <USBD_GetString+0x42>
 800ddba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ddc2:	7dfb      	ldrb	r3, [r7, #23]
 800ddc4:	68ba      	ldr	r2, [r7, #8]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	687a      	ldr	r2, [r7, #4]
 800ddca:	7812      	ldrb	r2, [r2, #0]
 800ddcc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddce:	7dfb      	ldrb	r3, [r7, #23]
 800ddd0:	3301      	adds	r3, #1
 800ddd2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ddd4:	7dfb      	ldrb	r3, [r7, #23]
 800ddd6:	68ba      	ldr	r2, [r7, #8]
 800ddd8:	4413      	add	r3, r2
 800ddda:	2203      	movs	r2, #3
 800dddc:	701a      	strb	r2, [r3, #0]
  idx++;
 800ddde:	7dfb      	ldrb	r3, [r7, #23]
 800dde0:	3301      	adds	r3, #1
 800dde2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dde4:	e013      	b.n	800de0e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800dde6:	7dfb      	ldrb	r3, [r7, #23]
 800dde8:	68ba      	ldr	r2, [r7, #8]
 800ddea:	4413      	add	r3, r2
 800ddec:	693a      	ldr	r2, [r7, #16]
 800ddee:	7812      	ldrb	r2, [r2, #0]
 800ddf0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	613b      	str	r3, [r7, #16]
    idx++;
 800ddf8:	7dfb      	ldrb	r3, [r7, #23]
 800ddfa:	3301      	adds	r3, #1
 800ddfc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ddfe:	7dfb      	ldrb	r3, [r7, #23]
 800de00:	68ba      	ldr	r2, [r7, #8]
 800de02:	4413      	add	r3, r2
 800de04:	2200      	movs	r2, #0
 800de06:	701a      	strb	r2, [r3, #0]
    idx++;
 800de08:	7dfb      	ldrb	r3, [r7, #23]
 800de0a:	3301      	adds	r3, #1
 800de0c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800de0e:	693b      	ldr	r3, [r7, #16]
 800de10:	781b      	ldrb	r3, [r3, #0]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d1e7      	bne.n	800dde6 <USBD_GetString+0x6a>
 800de16:	e000      	b.n	800de1a <USBD_GetString+0x9e>
    return;
 800de18:	bf00      	nop
  }
}
 800de1a:	3718      	adds	r7, #24
 800de1c:	46bd      	mov	sp, r7
 800de1e:	bd80      	pop	{r7, pc}

0800de20 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800de28:	2300      	movs	r3, #0
 800de2a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800de30:	e005      	b.n	800de3e <USBD_GetLen+0x1e>
  {
    len++;
 800de32:	7bfb      	ldrb	r3, [r7, #15]
 800de34:	3301      	adds	r3, #1
 800de36:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800de38:	68bb      	ldr	r3, [r7, #8]
 800de3a:	3301      	adds	r3, #1
 800de3c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800de3e:	68bb      	ldr	r3, [r7, #8]
 800de40:	781b      	ldrb	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d1f5      	bne.n	800de32 <USBD_GetLen+0x12>
  }

  return len;
 800de46:	7bfb      	ldrb	r3, [r7, #15]
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3714      	adds	r7, #20
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800de54:	b580      	push	{r7, lr}
 800de56:	b084      	sub	sp, #16
 800de58:	af00      	add	r7, sp, #0
 800de5a:	60f8      	str	r0, [r7, #12]
 800de5c:	60b9      	str	r1, [r7, #8]
 800de5e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	2202      	movs	r2, #2
 800de64:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	687a      	ldr	r2, [r7, #4]
 800de6c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	68ba      	ldr	r2, [r7, #8]
 800de72:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	687a      	ldr	r2, [r7, #4]
 800de78:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	68ba      	ldr	r2, [r7, #8]
 800de7e:	2100      	movs	r1, #0
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f000 fd52 	bl	800e92a <USBD_LL_Transmit>

  return USBD_OK;
 800de86:	2300      	movs	r3, #0
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3710      	adds	r7, #16
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}

0800de90 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800de90:	b580      	push	{r7, lr}
 800de92:	b084      	sub	sp, #16
 800de94:	af00      	add	r7, sp, #0
 800de96:	60f8      	str	r0, [r7, #12]
 800de98:	60b9      	str	r1, [r7, #8]
 800de9a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	68ba      	ldr	r2, [r7, #8]
 800dea0:	2100      	movs	r1, #0
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f000 fd41 	bl	800e92a <USBD_LL_Transmit>

  return USBD_OK;
 800dea8:	2300      	movs	r3, #0
}
 800deaa:	4618      	mov	r0, r3
 800deac:	3710      	adds	r7, #16
 800deae:	46bd      	mov	sp, r7
 800deb0:	bd80      	pop	{r7, pc}

0800deb2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800deb2:	b580      	push	{r7, lr}
 800deb4:	b084      	sub	sp, #16
 800deb6:	af00      	add	r7, sp, #0
 800deb8:	60f8      	str	r0, [r7, #12]
 800deba:	60b9      	str	r1, [r7, #8]
 800debc:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	2203      	movs	r2, #3
 800dec2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	68ba      	ldr	r2, [r7, #8]
 800ded2:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	687a      	ldr	r2, [r7, #4]
 800deda:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	68ba      	ldr	r2, [r7, #8]
 800dee2:	2100      	movs	r1, #0
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f000 fd41 	bl	800e96c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800deea:	2300      	movs	r3, #0
}
 800deec:	4618      	mov	r0, r3
 800deee:	3710      	adds	r7, #16
 800def0:	46bd      	mov	sp, r7
 800def2:	bd80      	pop	{r7, pc}

0800def4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	68ba      	ldr	r2, [r7, #8]
 800df04:	2100      	movs	r1, #0
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f000 fd30 	bl	800e96c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df0c:	2300      	movs	r3, #0
}
 800df0e:	4618      	mov	r0, r3
 800df10:	3710      	adds	r7, #16
 800df12:	46bd      	mov	sp, r7
 800df14:	bd80      	pop	{r7, pc}

0800df16 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800df16:	b580      	push	{r7, lr}
 800df18:	b082      	sub	sp, #8
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2204      	movs	r2, #4
 800df22:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df26:	2300      	movs	r3, #0
 800df28:	2200      	movs	r2, #0
 800df2a:	2100      	movs	r1, #0
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 fcfc 	bl	800e92a <USBD_LL_Transmit>

  return USBD_OK;
 800df32:	2300      	movs	r3, #0
}
 800df34:	4618      	mov	r0, r3
 800df36:	3708      	adds	r7, #8
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}

0800df3c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800df3c:	b580      	push	{r7, lr}
 800df3e:	b082      	sub	sp, #8
 800df40:	af00      	add	r7, sp, #0
 800df42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	2205      	movs	r2, #5
 800df48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800df4c:	2300      	movs	r3, #0
 800df4e:	2200      	movs	r2, #0
 800df50:	2100      	movs	r1, #0
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	f000 fd0a 	bl	800e96c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df58:	2300      	movs	r3, #0
}
 800df5a:	4618      	mov	r0, r3
 800df5c:	3708      	adds	r7, #8
 800df5e:	46bd      	mov	sp, r7
 800df60:	bd80      	pop	{r7, pc}
	...

0800df64 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800df68:	2200      	movs	r2, #0
 800df6a:	4912      	ldr	r1, [pc, #72]	@ (800dfb4 <MX_USB_DEVICE_Init+0x50>)
 800df6c:	4812      	ldr	r0, [pc, #72]	@ (800dfb8 <MX_USB_DEVICE_Init+0x54>)
 800df6e:	f7fe fcd9 	bl	800c924 <USBD_Init>
 800df72:	4603      	mov	r3, r0
 800df74:	2b00      	cmp	r3, #0
 800df76:	d001      	beq.n	800df7c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800df78:	f7f3 fff0 	bl	8001f5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800df7c:	490f      	ldr	r1, [pc, #60]	@ (800dfbc <MX_USB_DEVICE_Init+0x58>)
 800df7e:	480e      	ldr	r0, [pc, #56]	@ (800dfb8 <MX_USB_DEVICE_Init+0x54>)
 800df80:	f7fe fd00 	bl	800c984 <USBD_RegisterClass>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d001      	beq.n	800df8e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800df8a:	f7f3 ffe7 	bl	8001f5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800df8e:	490c      	ldr	r1, [pc, #48]	@ (800dfc0 <MX_USB_DEVICE_Init+0x5c>)
 800df90:	4809      	ldr	r0, [pc, #36]	@ (800dfb8 <MX_USB_DEVICE_Init+0x54>)
 800df92:	f7fe fbf7 	bl	800c784 <USBD_CDC_RegisterInterface>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d001      	beq.n	800dfa0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800df9c:	f7f3 ffde 	bl	8001f5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dfa0:	4805      	ldr	r0, [pc, #20]	@ (800dfb8 <MX_USB_DEVICE_Init+0x54>)
 800dfa2:	f7fe fd25 	bl	800c9f0 <USBD_Start>
 800dfa6:	4603      	mov	r3, r0
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d001      	beq.n	800dfb0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800dfac:	f7f3 ffd6 	bl	8001f5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800dfb0:	bf00      	nop
 800dfb2:	bd80      	pop	{r7, pc}
 800dfb4:	200000e4 	.word	0x200000e4
 800dfb8:	20000b34 	.word	0x20000b34
 800dfbc:	20000048 	.word	0x20000048
 800dfc0:	200000d0 	.word	0x200000d0

0800dfc4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dfc8:	2200      	movs	r2, #0
 800dfca:	4905      	ldr	r1, [pc, #20]	@ (800dfe0 <CDC_Init_FS+0x1c>)
 800dfcc:	4805      	ldr	r0, [pc, #20]	@ (800dfe4 <CDC_Init_FS+0x20>)
 800dfce:	f7fe fbf3 	bl	800c7b8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800dfd2:	4905      	ldr	r1, [pc, #20]	@ (800dfe8 <CDC_Init_FS+0x24>)
 800dfd4:	4803      	ldr	r0, [pc, #12]	@ (800dfe4 <CDC_Init_FS+0x20>)
 800dfd6:	f7fe fc11 	bl	800c7fc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800dfda:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800dfdc:	4618      	mov	r0, r3
 800dfde:	bd80      	pop	{r7, pc}
 800dfe0:	20001010 	.word	0x20001010
 800dfe4:	20000b34 	.word	0x20000b34
 800dfe8:	20000e10 	.word	0x20000e10

0800dfec <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800dfec:	b480      	push	{r7}
 800dfee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800dff0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr

0800dffc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800dffc:	b480      	push	{r7}
 800dffe:	b083      	sub	sp, #12
 800e000:	af00      	add	r7, sp, #0
 800e002:	4603      	mov	r3, r0
 800e004:	6039      	str	r1, [r7, #0]
 800e006:	71fb      	strb	r3, [r7, #7]
 800e008:	4613      	mov	r3, r2
 800e00a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e00c:	79fb      	ldrb	r3, [r7, #7]
 800e00e:	2b23      	cmp	r3, #35	@ 0x23
 800e010:	f200 8098 	bhi.w	800e144 <CDC_Control_FS+0x148>
 800e014:	a201      	add	r2, pc, #4	@ (adr r2, 800e01c <CDC_Control_FS+0x20>)
 800e016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e01a:	bf00      	nop
 800e01c:	0800e145 	.word	0x0800e145
 800e020:	0800e145 	.word	0x0800e145
 800e024:	0800e145 	.word	0x0800e145
 800e028:	0800e145 	.word	0x0800e145
 800e02c:	0800e145 	.word	0x0800e145
 800e030:	0800e145 	.word	0x0800e145
 800e034:	0800e145 	.word	0x0800e145
 800e038:	0800e145 	.word	0x0800e145
 800e03c:	0800e145 	.word	0x0800e145
 800e040:	0800e145 	.word	0x0800e145
 800e044:	0800e145 	.word	0x0800e145
 800e048:	0800e145 	.word	0x0800e145
 800e04c:	0800e145 	.word	0x0800e145
 800e050:	0800e145 	.word	0x0800e145
 800e054:	0800e145 	.word	0x0800e145
 800e058:	0800e145 	.word	0x0800e145
 800e05c:	0800e145 	.word	0x0800e145
 800e060:	0800e145 	.word	0x0800e145
 800e064:	0800e145 	.word	0x0800e145
 800e068:	0800e145 	.word	0x0800e145
 800e06c:	0800e145 	.word	0x0800e145
 800e070:	0800e145 	.word	0x0800e145
 800e074:	0800e145 	.word	0x0800e145
 800e078:	0800e145 	.word	0x0800e145
 800e07c:	0800e145 	.word	0x0800e145
 800e080:	0800e145 	.word	0x0800e145
 800e084:	0800e145 	.word	0x0800e145
 800e088:	0800e145 	.word	0x0800e145
 800e08c:	0800e145 	.word	0x0800e145
 800e090:	0800e145 	.word	0x0800e145
 800e094:	0800e145 	.word	0x0800e145
 800e098:	0800e145 	.word	0x0800e145
 800e09c:	0800e0ad 	.word	0x0800e0ad
 800e0a0:	0800e0f1 	.word	0x0800e0f1
 800e0a4:	0800e145 	.word	0x0800e145
 800e0a8:	0800e145 	.word	0x0800e145
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	LineCoding.bitrate = (uint32_t)(pbuf[0] | (pbuf[1] << 8) | (pbuf[2] << 16) | (pbuf[3] << 24));
 800e0ac:	683b      	ldr	r3, [r7, #0]
 800e0ae:	781b      	ldrb	r3, [r3, #0]
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	3301      	adds	r3, #1
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	021b      	lsls	r3, r3, #8
 800e0ba:	431a      	orrs	r2, r3
 800e0bc:	683b      	ldr	r3, [r7, #0]
 800e0be:	3302      	adds	r3, #2
 800e0c0:	781b      	ldrb	r3, [r3, #0]
 800e0c2:	041b      	lsls	r3, r3, #16
 800e0c4:	431a      	orrs	r2, r3
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	3303      	adds	r3, #3
 800e0ca:	781b      	ldrb	r3, [r3, #0]
 800e0cc:	061b      	lsls	r3, r3, #24
 800e0ce:	4313      	orrs	r3, r2
 800e0d0:	461a      	mov	r2, r3
 800e0d2:	4b20      	ldr	r3, [pc, #128]	@ (800e154 <CDC_Control_FS+0x158>)
 800e0d4:	601a      	str	r2, [r3, #0]
		LineCoding.format = pbuf[4];
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	791a      	ldrb	r2, [r3, #4]
 800e0da:	4b1e      	ldr	r3, [pc, #120]	@ (800e154 <CDC_Control_FS+0x158>)
 800e0dc:	711a      	strb	r2, [r3, #4]
		LineCoding.paritytype = pbuf[5];
 800e0de:	683b      	ldr	r3, [r7, #0]
 800e0e0:	795a      	ldrb	r2, [r3, #5]
 800e0e2:	4b1c      	ldr	r3, [pc, #112]	@ (800e154 <CDC_Control_FS+0x158>)
 800e0e4:	715a      	strb	r2, [r3, #5]
		LineCoding.datatype = pbuf[6];
 800e0e6:	683b      	ldr	r3, [r7, #0]
 800e0e8:	799a      	ldrb	r2, [r3, #6]
 800e0ea:	4b1a      	ldr	r3, [pc, #104]	@ (800e154 <CDC_Control_FS+0x158>)
 800e0ec:	719a      	strb	r2, [r3, #6]
    break;
 800e0ee:	e02a      	b.n	800e146 <CDC_Control_FS+0x14a>

    case CDC_GET_LINE_CODING:
		pbuf[0] = (uint8_t)(LineCoding.bitrate);
 800e0f0:	4b18      	ldr	r3, [pc, #96]	@ (800e154 <CDC_Control_FS+0x158>)
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	b2da      	uxtb	r2, r3
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	701a      	strb	r2, [r3, #0]
		pbuf[1] = (uint8_t)(LineCoding.bitrate >> 8);
 800e0fa:	4b16      	ldr	r3, [pc, #88]	@ (800e154 <CDC_Control_FS+0x158>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	0a1a      	lsrs	r2, r3, #8
 800e100:	683b      	ldr	r3, [r7, #0]
 800e102:	3301      	adds	r3, #1
 800e104:	b2d2      	uxtb	r2, r2
 800e106:	701a      	strb	r2, [r3, #0]
		pbuf[2] = (uint8_t)(LineCoding.bitrate >> 16);
 800e108:	4b12      	ldr	r3, [pc, #72]	@ (800e154 <CDC_Control_FS+0x158>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	0c1a      	lsrs	r2, r3, #16
 800e10e:	683b      	ldr	r3, [r7, #0]
 800e110:	3302      	adds	r3, #2
 800e112:	b2d2      	uxtb	r2, r2
 800e114:	701a      	strb	r2, [r3, #0]
		pbuf[3] = (uint8_t)(LineCoding.bitrate >> 24);
 800e116:	4b0f      	ldr	r3, [pc, #60]	@ (800e154 <CDC_Control_FS+0x158>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	0e1a      	lsrs	r2, r3, #24
 800e11c:	683b      	ldr	r3, [r7, #0]
 800e11e:	3303      	adds	r3, #3
 800e120:	b2d2      	uxtb	r2, r2
 800e122:	701a      	strb	r2, [r3, #0]
		pbuf[4] = LineCoding.format;
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	3304      	adds	r3, #4
 800e128:	4a0a      	ldr	r2, [pc, #40]	@ (800e154 <CDC_Control_FS+0x158>)
 800e12a:	7912      	ldrb	r2, [r2, #4]
 800e12c:	701a      	strb	r2, [r3, #0]
		pbuf[5] = LineCoding.paritytype;
 800e12e:	683b      	ldr	r3, [r7, #0]
 800e130:	3305      	adds	r3, #5
 800e132:	4a08      	ldr	r2, [pc, #32]	@ (800e154 <CDC_Control_FS+0x158>)
 800e134:	7952      	ldrb	r2, [r2, #5]
 800e136:	701a      	strb	r2, [r3, #0]
		pbuf[6] = LineCoding.datatype;
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	3306      	adds	r3, #6
 800e13c:	4a05      	ldr	r2, [pc, #20]	@ (800e154 <CDC_Control_FS+0x158>)
 800e13e:	7992      	ldrb	r2, [r2, #6]
 800e140:	701a      	strb	r2, [r3, #0]
    break;
 800e142:	e000      	b.n	800e146 <CDC_Control_FS+0x14a>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e144:	bf00      	nop
  }

  return (USBD_OK);
 800e146:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e148:	4618      	mov	r0, r3
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr
 800e154:	200000c8 	.word	0x200000c8

0800e158 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
 800e160:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

	if (MyPtrRx != NULL) {
 800e162:	4b0b      	ldr	r3, [pc, #44]	@ (800e190 <CDC_Receive_FS+0x38>)
 800e164:	681b      	ldr	r3, [r3, #0]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d006      	beq.n	800e178 <CDC_Receive_FS+0x20>
		MyPtrRx(Buf, *Len);
 800e16a:	4b09      	ldr	r3, [pc, #36]	@ (800e190 <CDC_Receive_FS+0x38>)
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	683a      	ldr	r2, [r7, #0]
 800e170:	6812      	ldr	r2, [r2, #0]
 800e172:	4611      	mov	r1, r2
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	4798      	blx	r3
	}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e178:	6879      	ldr	r1, [r7, #4]
 800e17a:	4806      	ldr	r0, [pc, #24]	@ (800e194 <CDC_Receive_FS+0x3c>)
 800e17c:	f7fe fb3e 	bl	800c7fc <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e180:	4804      	ldr	r0, [pc, #16]	@ (800e194 <CDC_Receive_FS+0x3c>)
 800e182:	f7fe fb99 	bl	800c8b8 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 800e186:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e188:	4618      	mov	r0, r3
 800e18a:	3708      	adds	r7, #8
 800e18c:	46bd      	mov	sp, r7
 800e18e:	bd80      	pop	{r7, pc}
 800e190:	20001210 	.word	0x20001210
 800e194:	20000b34 	.word	0x20000b34

0800e198 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e1a8:	4b0d      	ldr	r3, [pc, #52]	@ (800e1e0 <CDC_Transmit_FS+0x48>)
 800e1aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e1ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d001      	beq.n	800e1be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e1ba:	2301      	movs	r3, #1
 800e1bc:	e00b      	b.n	800e1d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e1be:	887b      	ldrh	r3, [r7, #2]
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	6879      	ldr	r1, [r7, #4]
 800e1c4:	4806      	ldr	r0, [pc, #24]	@ (800e1e0 <CDC_Transmit_FS+0x48>)
 800e1c6:	f7fe faf7 	bl	800c7b8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e1ca:	4805      	ldr	r0, [pc, #20]	@ (800e1e0 <CDC_Transmit_FS+0x48>)
 800e1cc:	f7fe fb34 	bl	800c838 <USBD_CDC_TransmitPacket>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e1d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	3710      	adds	r7, #16
 800e1da:	46bd      	mov	sp, r7
 800e1dc:	bd80      	pop	{r7, pc}
 800e1de:	bf00      	nop
 800e1e0:	20000b34 	.word	0x20000b34

0800e1e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e1e4:	b480      	push	{r7}
 800e1e6:	b087      	sub	sp, #28
 800e1e8:	af00      	add	r7, sp, #0
 800e1ea:	60f8      	str	r0, [r7, #12]
 800e1ec:	60b9      	str	r1, [r7, #8]
 800e1ee:	4613      	mov	r3, r2
 800e1f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e1f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e1fa:	4618      	mov	r0, r3
 800e1fc:	371c      	adds	r7, #28
 800e1fe:	46bd      	mov	sp, r7
 800e200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e204:	4770      	bx	lr
	...

0800e208 <CDC_Attach_Rx>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void CDC_Attach_Rx(void(*PtrRx)(uint8_t *buf, uint32_t Len)){
 800e208:	b480      	push	{r7}
 800e20a:	b083      	sub	sp, #12
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
	MyPtrRx = PtrRx;
 800e210:	4a04      	ldr	r2, [pc, #16]	@ (800e224 <CDC_Attach_Rx+0x1c>)
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	6013      	str	r3, [r2, #0]
}
 800e216:	bf00      	nop
 800e218:	370c      	adds	r7, #12
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop
 800e224:	20001210 	.word	0x20001210

0800e228 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e228:	b480      	push	{r7}
 800e22a:	b083      	sub	sp, #12
 800e22c:	af00      	add	r7, sp, #0
 800e22e:	4603      	mov	r3, r0
 800e230:	6039      	str	r1, [r7, #0]
 800e232:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e234:	683b      	ldr	r3, [r7, #0]
 800e236:	2212      	movs	r2, #18
 800e238:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e23a:	4b03      	ldr	r3, [pc, #12]	@ (800e248 <USBD_FS_DeviceDescriptor+0x20>)
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	370c      	adds	r7, #12
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr
 800e248:	20000100 	.word	0x20000100

0800e24c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	4603      	mov	r3, r0
 800e254:	6039      	str	r1, [r7, #0]
 800e256:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	2204      	movs	r2, #4
 800e25c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800e25e:	4b03      	ldr	r3, [pc, #12]	@ (800e26c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800e260:	4618      	mov	r0, r3
 800e262:	370c      	adds	r7, #12
 800e264:	46bd      	mov	sp, r7
 800e266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e26a:	4770      	bx	lr
 800e26c:	20000114 	.word	0x20000114

0800e270 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e270:	b580      	push	{r7, lr}
 800e272:	b082      	sub	sp, #8
 800e274:	af00      	add	r7, sp, #0
 800e276:	4603      	mov	r3, r0
 800e278:	6039      	str	r1, [r7, #0]
 800e27a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e27c:	79fb      	ldrb	r3, [r7, #7]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d105      	bne.n	800e28e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e282:	683a      	ldr	r2, [r7, #0]
 800e284:	4907      	ldr	r1, [pc, #28]	@ (800e2a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e286:	4808      	ldr	r0, [pc, #32]	@ (800e2a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e288:	f7ff fd78 	bl	800dd7c <USBD_GetString>
 800e28c:	e004      	b.n	800e298 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800e28e:	683a      	ldr	r2, [r7, #0]
 800e290:	4904      	ldr	r1, [pc, #16]	@ (800e2a4 <USBD_FS_ProductStrDescriptor+0x34>)
 800e292:	4805      	ldr	r0, [pc, #20]	@ (800e2a8 <USBD_FS_ProductStrDescriptor+0x38>)
 800e294:	f7ff fd72 	bl	800dd7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e298:	4b02      	ldr	r3, [pc, #8]	@ (800e2a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e29a:	4618      	mov	r0, r3
 800e29c:	3708      	adds	r7, #8
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	bd80      	pop	{r7, pc}
 800e2a2:	bf00      	nop
 800e2a4:	20001214 	.word	0x20001214
 800e2a8:	0800f3e8 	.word	0x0800f3e8

0800e2ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	6039      	str	r1, [r7, #0]
 800e2b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e2b8:	683a      	ldr	r2, [r7, #0]
 800e2ba:	4904      	ldr	r1, [pc, #16]	@ (800e2cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e2bc:	4804      	ldr	r0, [pc, #16]	@ (800e2d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e2be:	f7ff fd5d 	bl	800dd7c <USBD_GetString>
  return USBD_StrDesc;
 800e2c2:	4b02      	ldr	r3, [pc, #8]	@ (800e2cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3708      	adds	r7, #8
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd80      	pop	{r7, pc}
 800e2cc:	20001214 	.word	0x20001214
 800e2d0:	0800f400 	.word	0x0800f400

0800e2d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	4603      	mov	r3, r0
 800e2dc:	6039      	str	r1, [r7, #0]
 800e2de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e2e0:	683b      	ldr	r3, [r7, #0]
 800e2e2:	221a      	movs	r2, #26
 800e2e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e2e6:	f000 f843 	bl	800e370 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e2ea:	4b02      	ldr	r3, [pc, #8]	@ (800e2f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3708      	adds	r7, #8
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}
 800e2f4:	20000118 	.word	0x20000118

0800e2f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e2f8:	b580      	push	{r7, lr}
 800e2fa:	b082      	sub	sp, #8
 800e2fc:	af00      	add	r7, sp, #0
 800e2fe:	4603      	mov	r3, r0
 800e300:	6039      	str	r1, [r7, #0]
 800e302:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e304:	79fb      	ldrb	r3, [r7, #7]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d105      	bne.n	800e316 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e30a:	683a      	ldr	r2, [r7, #0]
 800e30c:	4907      	ldr	r1, [pc, #28]	@ (800e32c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e30e:	4808      	ldr	r0, [pc, #32]	@ (800e330 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e310:	f7ff fd34 	bl	800dd7c <USBD_GetString>
 800e314:	e004      	b.n	800e320 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e316:	683a      	ldr	r2, [r7, #0]
 800e318:	4904      	ldr	r1, [pc, #16]	@ (800e32c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e31a:	4805      	ldr	r0, [pc, #20]	@ (800e330 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e31c:	f7ff fd2e 	bl	800dd7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e320:	4b02      	ldr	r3, [pc, #8]	@ (800e32c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e322:	4618      	mov	r0, r3
 800e324:	3708      	adds	r7, #8
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	20001214 	.word	0x20001214
 800e330:	0800f414 	.word	0x0800f414

0800e334 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	4603      	mov	r3, r0
 800e33c:	6039      	str	r1, [r7, #0]
 800e33e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e340:	79fb      	ldrb	r3, [r7, #7]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d105      	bne.n	800e352 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e346:	683a      	ldr	r2, [r7, #0]
 800e348:	4907      	ldr	r1, [pc, #28]	@ (800e368 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e34a:	4808      	ldr	r0, [pc, #32]	@ (800e36c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e34c:	f7ff fd16 	bl	800dd7c <USBD_GetString>
 800e350:	e004      	b.n	800e35c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e352:	683a      	ldr	r2, [r7, #0]
 800e354:	4904      	ldr	r1, [pc, #16]	@ (800e368 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e356:	4805      	ldr	r0, [pc, #20]	@ (800e36c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e358:	f7ff fd10 	bl	800dd7c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e35c:	4b02      	ldr	r3, [pc, #8]	@ (800e368 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3708      	adds	r7, #8
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	20001214 	.word	0x20001214
 800e36c:	0800f420 	.word	0x0800f420

0800e370 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e376:	4b0f      	ldr	r3, [pc, #60]	@ (800e3b4 <Get_SerialNum+0x44>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e37c:	4b0e      	ldr	r3, [pc, #56]	@ (800e3b8 <Get_SerialNum+0x48>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e382:	4b0e      	ldr	r3, [pc, #56]	@ (800e3bc <Get_SerialNum+0x4c>)
 800e384:	681b      	ldr	r3, [r3, #0]
 800e386:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e388:	68fa      	ldr	r2, [r7, #12]
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	4413      	add	r3, r2
 800e38e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d009      	beq.n	800e3aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e396:	2208      	movs	r2, #8
 800e398:	4909      	ldr	r1, [pc, #36]	@ (800e3c0 <Get_SerialNum+0x50>)
 800e39a:	68f8      	ldr	r0, [r7, #12]
 800e39c:	f000 f814 	bl	800e3c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e3a0:	2204      	movs	r2, #4
 800e3a2:	4908      	ldr	r1, [pc, #32]	@ (800e3c4 <Get_SerialNum+0x54>)
 800e3a4:	68b8      	ldr	r0, [r7, #8]
 800e3a6:	f000 f80f 	bl	800e3c8 <IntToUnicode>
  }
}
 800e3aa:	bf00      	nop
 800e3ac:	3710      	adds	r7, #16
 800e3ae:	46bd      	mov	sp, r7
 800e3b0:	bd80      	pop	{r7, pc}
 800e3b2:	bf00      	nop
 800e3b4:	1fff7a10 	.word	0x1fff7a10
 800e3b8:	1fff7a14 	.word	0x1fff7a14
 800e3bc:	1fff7a18 	.word	0x1fff7a18
 800e3c0:	2000011a 	.word	0x2000011a
 800e3c4:	2000012a 	.word	0x2000012a

0800e3c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e3c8:	b480      	push	{r7}
 800e3ca:	b087      	sub	sp, #28
 800e3cc:	af00      	add	r7, sp, #0
 800e3ce:	60f8      	str	r0, [r7, #12]
 800e3d0:	60b9      	str	r1, [r7, #8]
 800e3d2:	4613      	mov	r3, r2
 800e3d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e3da:	2300      	movs	r3, #0
 800e3dc:	75fb      	strb	r3, [r7, #23]
 800e3de:	e027      	b.n	800e430 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	0f1b      	lsrs	r3, r3, #28
 800e3e4:	2b09      	cmp	r3, #9
 800e3e6:	d80b      	bhi.n	800e400 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e3e8:	68fb      	ldr	r3, [r7, #12]
 800e3ea:	0f1b      	lsrs	r3, r3, #28
 800e3ec:	b2da      	uxtb	r2, r3
 800e3ee:	7dfb      	ldrb	r3, [r7, #23]
 800e3f0:	005b      	lsls	r3, r3, #1
 800e3f2:	4619      	mov	r1, r3
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	440b      	add	r3, r1
 800e3f8:	3230      	adds	r2, #48	@ 0x30
 800e3fa:	b2d2      	uxtb	r2, r2
 800e3fc:	701a      	strb	r2, [r3, #0]
 800e3fe:	e00a      	b.n	800e416 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	0f1b      	lsrs	r3, r3, #28
 800e404:	b2da      	uxtb	r2, r3
 800e406:	7dfb      	ldrb	r3, [r7, #23]
 800e408:	005b      	lsls	r3, r3, #1
 800e40a:	4619      	mov	r1, r3
 800e40c:	68bb      	ldr	r3, [r7, #8]
 800e40e:	440b      	add	r3, r1
 800e410:	3237      	adds	r2, #55	@ 0x37
 800e412:	b2d2      	uxtb	r2, r2
 800e414:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	011b      	lsls	r3, r3, #4
 800e41a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e41c:	7dfb      	ldrb	r3, [r7, #23]
 800e41e:	005b      	lsls	r3, r3, #1
 800e420:	3301      	adds	r3, #1
 800e422:	68ba      	ldr	r2, [r7, #8]
 800e424:	4413      	add	r3, r2
 800e426:	2200      	movs	r2, #0
 800e428:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e42a:	7dfb      	ldrb	r3, [r7, #23]
 800e42c:	3301      	adds	r3, #1
 800e42e:	75fb      	strb	r3, [r7, #23]
 800e430:	7dfa      	ldrb	r2, [r7, #23]
 800e432:	79fb      	ldrb	r3, [r7, #7]
 800e434:	429a      	cmp	r2, r3
 800e436:	d3d3      	bcc.n	800e3e0 <IntToUnicode+0x18>
  }
}
 800e438:	bf00      	nop
 800e43a:	bf00      	nop
 800e43c:	371c      	adds	r7, #28
 800e43e:	46bd      	mov	sp, r7
 800e440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e444:	4770      	bx	lr
	...

0800e448 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b08a      	sub	sp, #40	@ 0x28
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e450:	f107 0314 	add.w	r3, r7, #20
 800e454:	2200      	movs	r2, #0
 800e456:	601a      	str	r2, [r3, #0]
 800e458:	605a      	str	r2, [r3, #4]
 800e45a:	609a      	str	r2, [r3, #8]
 800e45c:	60da      	str	r2, [r3, #12]
 800e45e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e468:	d13a      	bne.n	800e4e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e46a:	2300      	movs	r3, #0
 800e46c:	613b      	str	r3, [r7, #16]
 800e46e:	4b1e      	ldr	r3, [pc, #120]	@ (800e4e8 <HAL_PCD_MspInit+0xa0>)
 800e470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e472:	4a1d      	ldr	r2, [pc, #116]	@ (800e4e8 <HAL_PCD_MspInit+0xa0>)
 800e474:	f043 0301 	orr.w	r3, r3, #1
 800e478:	6313      	str	r3, [r2, #48]	@ 0x30
 800e47a:	4b1b      	ldr	r3, [pc, #108]	@ (800e4e8 <HAL_PCD_MspInit+0xa0>)
 800e47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e47e:	f003 0301 	and.w	r3, r3, #1
 800e482:	613b      	str	r3, [r7, #16]
 800e484:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e486:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e48a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e48c:	2302      	movs	r3, #2
 800e48e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e490:	2300      	movs	r3, #0
 800e492:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e494:	2303      	movs	r3, #3
 800e496:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e498:	230a      	movs	r3, #10
 800e49a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e49c:	f107 0314 	add.w	r3, r7, #20
 800e4a0:	4619      	mov	r1, r3
 800e4a2:	4812      	ldr	r0, [pc, #72]	@ (800e4ec <HAL_PCD_MspInit+0xa4>)
 800e4a4:	f7f6 fb8a 	bl	8004bbc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e4a8:	4b0f      	ldr	r3, [pc, #60]	@ (800e4e8 <HAL_PCD_MspInit+0xa0>)
 800e4aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e4ac:	4a0e      	ldr	r2, [pc, #56]	@ (800e4e8 <HAL_PCD_MspInit+0xa0>)
 800e4ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e4b2:	6353      	str	r3, [r2, #52]	@ 0x34
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	60fb      	str	r3, [r7, #12]
 800e4b8:	4b0b      	ldr	r3, [pc, #44]	@ (800e4e8 <HAL_PCD_MspInit+0xa0>)
 800e4ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4bc:	4a0a      	ldr	r2, [pc, #40]	@ (800e4e8 <HAL_PCD_MspInit+0xa0>)
 800e4be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e4c2:	6453      	str	r3, [r2, #68]	@ 0x44
 800e4c4:	4b08      	ldr	r3, [pc, #32]	@ (800e4e8 <HAL_PCD_MspInit+0xa0>)
 800e4c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e4c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e4cc:	60fb      	str	r3, [r7, #12]
 800e4ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e4d0:	2200      	movs	r2, #0
 800e4d2:	2100      	movs	r1, #0
 800e4d4:	2043      	movs	r0, #67	@ 0x43
 800e4d6:	f7f5 ff8e 	bl	80043f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e4da:	2043      	movs	r0, #67	@ 0x43
 800e4dc:	f7f5 ffa7 	bl	800442e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e4e0:	bf00      	nop
 800e4e2:	3728      	adds	r7, #40	@ 0x28
 800e4e4:	46bd      	mov	sp, r7
 800e4e6:	bd80      	pop	{r7, pc}
 800e4e8:	40023800 	.word	0x40023800
 800e4ec:	40020000 	.word	0x40020000

0800e4f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e4f0:	b580      	push	{r7, lr}
 800e4f2:	b082      	sub	sp, #8
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e504:	4619      	mov	r1, r3
 800e506:	4610      	mov	r0, r2
 800e508:	f7fe fabf 	bl	800ca8a <USBD_LL_SetupStage>
}
 800e50c:	bf00      	nop
 800e50e:	3708      	adds	r7, #8
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}

0800e514 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e514:	b580      	push	{r7, lr}
 800e516:	b082      	sub	sp, #8
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	460b      	mov	r3, r1
 800e51e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e526:	78fa      	ldrb	r2, [r7, #3]
 800e528:	6879      	ldr	r1, [r7, #4]
 800e52a:	4613      	mov	r3, r2
 800e52c:	00db      	lsls	r3, r3, #3
 800e52e:	4413      	add	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	440b      	add	r3, r1
 800e534:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e538:	681a      	ldr	r2, [r3, #0]
 800e53a:	78fb      	ldrb	r3, [r7, #3]
 800e53c:	4619      	mov	r1, r3
 800e53e:	f7fe faf9 	bl	800cb34 <USBD_LL_DataOutStage>
}
 800e542:	bf00      	nop
 800e544:	3708      	adds	r7, #8
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b082      	sub	sp, #8
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
 800e552:	460b      	mov	r3, r1
 800e554:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e55c:	78fa      	ldrb	r2, [r7, #3]
 800e55e:	6879      	ldr	r1, [r7, #4]
 800e560:	4613      	mov	r3, r2
 800e562:	00db      	lsls	r3, r3, #3
 800e564:	4413      	add	r3, r2
 800e566:	009b      	lsls	r3, r3, #2
 800e568:	440b      	add	r3, r1
 800e56a:	3320      	adds	r3, #32
 800e56c:	681a      	ldr	r2, [r3, #0]
 800e56e:	78fb      	ldrb	r3, [r7, #3]
 800e570:	4619      	mov	r1, r3
 800e572:	f7fe fb9b 	bl	800ccac <USBD_LL_DataInStage>
}
 800e576:	bf00      	nop
 800e578:	3708      	adds	r7, #8
 800e57a:	46bd      	mov	sp, r7
 800e57c:	bd80      	pop	{r7, pc}

0800e57e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e57e:	b580      	push	{r7, lr}
 800e580:	b082      	sub	sp, #8
 800e582:	af00      	add	r7, sp, #0
 800e584:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e58c:	4618      	mov	r0, r3
 800e58e:	f7fe fcdf 	bl	800cf50 <USBD_LL_SOF>
}
 800e592:	bf00      	nop
 800e594:	3708      	adds	r7, #8
 800e596:	46bd      	mov	sp, r7
 800e598:	bd80      	pop	{r7, pc}

0800e59a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e59a:	b580      	push	{r7, lr}
 800e59c:	b084      	sub	sp, #16
 800e59e:	af00      	add	r7, sp, #0
 800e5a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	79db      	ldrb	r3, [r3, #7]
 800e5aa:	2b02      	cmp	r3, #2
 800e5ac:	d001      	beq.n	800e5b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e5ae:	f7f3 fcd5 	bl	8001f5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5b8:	7bfa      	ldrb	r2, [r7, #15]
 800e5ba:	4611      	mov	r1, r2
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fe fc83 	bl	800cec8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5c8:	4618      	mov	r0, r3
 800e5ca:	f7fe fc2a 	bl	800ce22 <USBD_LL_Reset>
}
 800e5ce:	bf00      	nop
 800e5d0:	3710      	adds	r7, #16
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	bd80      	pop	{r7, pc}
	...

0800e5d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e5d8:	b580      	push	{r7, lr}
 800e5da:	b082      	sub	sp, #8
 800e5dc:	af00      	add	r7, sp, #0
 800e5de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f7fe fc7e 	bl	800cee8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	687a      	ldr	r2, [r7, #4]
 800e5f8:	6812      	ldr	r2, [r2, #0]
 800e5fa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e5fe:	f043 0301 	orr.w	r3, r3, #1
 800e602:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	7adb      	ldrb	r3, [r3, #11]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d005      	beq.n	800e618 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e60c:	4b04      	ldr	r3, [pc, #16]	@ (800e620 <HAL_PCD_SuspendCallback+0x48>)
 800e60e:	691b      	ldr	r3, [r3, #16]
 800e610:	4a03      	ldr	r2, [pc, #12]	@ (800e620 <HAL_PCD_SuspendCallback+0x48>)
 800e612:	f043 0306 	orr.w	r3, r3, #6
 800e616:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e618:	bf00      	nop
 800e61a:	3708      	adds	r7, #8
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}
 800e620:	e000ed00 	.word	0xe000ed00

0800e624 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b082      	sub	sp, #8
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e632:	4618      	mov	r0, r3
 800e634:	f7fe fc74 	bl	800cf20 <USBD_LL_Resume>
}
 800e638:	bf00      	nop
 800e63a:	3708      	adds	r7, #8
 800e63c:	46bd      	mov	sp, r7
 800e63e:	bd80      	pop	{r7, pc}

0800e640 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e640:	b580      	push	{r7, lr}
 800e642:	b082      	sub	sp, #8
 800e644:	af00      	add	r7, sp, #0
 800e646:	6078      	str	r0, [r7, #4]
 800e648:	460b      	mov	r3, r1
 800e64a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e652:	78fa      	ldrb	r2, [r7, #3]
 800e654:	4611      	mov	r1, r2
 800e656:	4618      	mov	r0, r3
 800e658:	f7fe fccc 	bl	800cff4 <USBD_LL_IsoOUTIncomplete>
}
 800e65c:	bf00      	nop
 800e65e:	3708      	adds	r7, #8
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}

0800e664 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e664:	b580      	push	{r7, lr}
 800e666:	b082      	sub	sp, #8
 800e668:	af00      	add	r7, sp, #0
 800e66a:	6078      	str	r0, [r7, #4]
 800e66c:	460b      	mov	r3, r1
 800e66e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e676:	78fa      	ldrb	r2, [r7, #3]
 800e678:	4611      	mov	r1, r2
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7fe fc88 	bl	800cf90 <USBD_LL_IsoINIncomplete>
}
 800e680:	bf00      	nop
 800e682:	3708      	adds	r7, #8
 800e684:	46bd      	mov	sp, r7
 800e686:	bd80      	pop	{r7, pc}

0800e688 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e696:	4618      	mov	r0, r3
 800e698:	f7fe fcde 	bl	800d058 <USBD_LL_DevConnected>
}
 800e69c:	bf00      	nop
 800e69e:	3708      	adds	r7, #8
 800e6a0:	46bd      	mov	sp, r7
 800e6a2:	bd80      	pop	{r7, pc}

0800e6a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b082      	sub	sp, #8
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7fe fcdb 	bl	800d06e <USBD_LL_DevDisconnected>
}
 800e6b8:	bf00      	nop
 800e6ba:	3708      	adds	r7, #8
 800e6bc:	46bd      	mov	sp, r7
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b082      	sub	sp, #8
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	781b      	ldrb	r3, [r3, #0]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	d13c      	bne.n	800e74a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e6d0:	4a20      	ldr	r2, [pc, #128]	@ (800e754 <USBD_LL_Init+0x94>)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	4a1e      	ldr	r2, [pc, #120]	@ (800e754 <USBD_LL_Init+0x94>)
 800e6dc:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e6e0:	4b1c      	ldr	r3, [pc, #112]	@ (800e754 <USBD_LL_Init+0x94>)
 800e6e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e6e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e6e8:	4b1a      	ldr	r3, [pc, #104]	@ (800e754 <USBD_LL_Init+0x94>)
 800e6ea:	2204      	movs	r2, #4
 800e6ec:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e6ee:	4b19      	ldr	r3, [pc, #100]	@ (800e754 <USBD_LL_Init+0x94>)
 800e6f0:	2202      	movs	r2, #2
 800e6f2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e6f4:	4b17      	ldr	r3, [pc, #92]	@ (800e754 <USBD_LL_Init+0x94>)
 800e6f6:	2200      	movs	r2, #0
 800e6f8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e6fa:	4b16      	ldr	r3, [pc, #88]	@ (800e754 <USBD_LL_Init+0x94>)
 800e6fc:	2202      	movs	r2, #2
 800e6fe:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e700:	4b14      	ldr	r3, [pc, #80]	@ (800e754 <USBD_LL_Init+0x94>)
 800e702:	2200      	movs	r2, #0
 800e704:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e706:	4b13      	ldr	r3, [pc, #76]	@ (800e754 <USBD_LL_Init+0x94>)
 800e708:	2200      	movs	r2, #0
 800e70a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e70c:	4b11      	ldr	r3, [pc, #68]	@ (800e754 <USBD_LL_Init+0x94>)
 800e70e:	2200      	movs	r2, #0
 800e710:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e712:	4b10      	ldr	r3, [pc, #64]	@ (800e754 <USBD_LL_Init+0x94>)
 800e714:	2200      	movs	r2, #0
 800e716:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e718:	4b0e      	ldr	r3, [pc, #56]	@ (800e754 <USBD_LL_Init+0x94>)
 800e71a:	2200      	movs	r2, #0
 800e71c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e71e:	480d      	ldr	r0, [pc, #52]	@ (800e754 <USBD_LL_Init+0x94>)
 800e720:	f7f9 fa9c 	bl	8007c5c <HAL_PCD_Init>
 800e724:	4603      	mov	r3, r0
 800e726:	2b00      	cmp	r3, #0
 800e728:	d001      	beq.n	800e72e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e72a:	f7f3 fc17 	bl	8001f5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e72e:	2180      	movs	r1, #128	@ 0x80
 800e730:	4808      	ldr	r0, [pc, #32]	@ (800e754 <USBD_LL_Init+0x94>)
 800e732:	f7fa fcc8 	bl	80090c6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e736:	2240      	movs	r2, #64	@ 0x40
 800e738:	2100      	movs	r1, #0
 800e73a:	4806      	ldr	r0, [pc, #24]	@ (800e754 <USBD_LL_Init+0x94>)
 800e73c:	f7fa fc7c 	bl	8009038 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e740:	2280      	movs	r2, #128	@ 0x80
 800e742:	2101      	movs	r1, #1
 800e744:	4803      	ldr	r0, [pc, #12]	@ (800e754 <USBD_LL_Init+0x94>)
 800e746:	f7fa fc77 	bl	8009038 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e74a:	2300      	movs	r3, #0
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3708      	adds	r7, #8
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}
 800e754:	20001414 	.word	0x20001414

0800e758 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e760:	2300      	movs	r3, #0
 800e762:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e76e:	4618      	mov	r0, r3
 800e770:	f7f9 fb83 	bl	8007e7a <HAL_PCD_Start>
 800e774:	4603      	mov	r3, r0
 800e776:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e778:	7bfb      	ldrb	r3, [r7, #15]
 800e77a:	4618      	mov	r0, r3
 800e77c:	f000 f942 	bl	800ea04 <USBD_Get_USB_Status>
 800e780:	4603      	mov	r3, r0
 800e782:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e784:	7bbb      	ldrb	r3, [r7, #14]
}
 800e786:	4618      	mov	r0, r3
 800e788:	3710      	adds	r7, #16
 800e78a:	46bd      	mov	sp, r7
 800e78c:	bd80      	pop	{r7, pc}

0800e78e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e78e:	b580      	push	{r7, lr}
 800e790:	b084      	sub	sp, #16
 800e792:	af00      	add	r7, sp, #0
 800e794:	6078      	str	r0, [r7, #4]
 800e796:	4608      	mov	r0, r1
 800e798:	4611      	mov	r1, r2
 800e79a:	461a      	mov	r2, r3
 800e79c:	4603      	mov	r3, r0
 800e79e:	70fb      	strb	r3, [r7, #3]
 800e7a0:	460b      	mov	r3, r1
 800e7a2:	70bb      	strb	r3, [r7, #2]
 800e7a4:	4613      	mov	r3, r2
 800e7a6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e7b6:	78bb      	ldrb	r3, [r7, #2]
 800e7b8:	883a      	ldrh	r2, [r7, #0]
 800e7ba:	78f9      	ldrb	r1, [r7, #3]
 800e7bc:	f7fa f857 	bl	800886e <HAL_PCD_EP_Open>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e7c4:	7bfb      	ldrb	r3, [r7, #15]
 800e7c6:	4618      	mov	r0, r3
 800e7c8:	f000 f91c 	bl	800ea04 <USBD_Get_USB_Status>
 800e7cc:	4603      	mov	r3, r0
 800e7ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e7d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e7d2:	4618      	mov	r0, r3
 800e7d4:	3710      	adds	r7, #16
 800e7d6:	46bd      	mov	sp, r7
 800e7d8:	bd80      	pop	{r7, pc}

0800e7da <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e7da:	b580      	push	{r7, lr}
 800e7dc:	b084      	sub	sp, #16
 800e7de:	af00      	add	r7, sp, #0
 800e7e0:	6078      	str	r0, [r7, #4]
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e7f4:	78fa      	ldrb	r2, [r7, #3]
 800e7f6:	4611      	mov	r1, r2
 800e7f8:	4618      	mov	r0, r3
 800e7fa:	f7fa f8a2 	bl	8008942 <HAL_PCD_EP_Close>
 800e7fe:	4603      	mov	r3, r0
 800e800:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e802:	7bfb      	ldrb	r3, [r7, #15]
 800e804:	4618      	mov	r0, r3
 800e806:	f000 f8fd 	bl	800ea04 <USBD_Get_USB_Status>
 800e80a:	4603      	mov	r3, r0
 800e80c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e80e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e810:	4618      	mov	r0, r3
 800e812:	3710      	adds	r7, #16
 800e814:	46bd      	mov	sp, r7
 800e816:	bd80      	pop	{r7, pc}

0800e818 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b084      	sub	sp, #16
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
 800e820:	460b      	mov	r3, r1
 800e822:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e824:	2300      	movs	r3, #0
 800e826:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e828:	2300      	movs	r3, #0
 800e82a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e832:	78fa      	ldrb	r2, [r7, #3]
 800e834:	4611      	mov	r1, r2
 800e836:	4618      	mov	r0, r3
 800e838:	f7fa f95a 	bl	8008af0 <HAL_PCD_EP_SetStall>
 800e83c:	4603      	mov	r3, r0
 800e83e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e840:	7bfb      	ldrb	r3, [r7, #15]
 800e842:	4618      	mov	r0, r3
 800e844:	f000 f8de 	bl	800ea04 <USBD_Get_USB_Status>
 800e848:	4603      	mov	r3, r0
 800e84a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e84c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e84e:	4618      	mov	r0, r3
 800e850:	3710      	adds	r7, #16
 800e852:	46bd      	mov	sp, r7
 800e854:	bd80      	pop	{r7, pc}

0800e856 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e856:	b580      	push	{r7, lr}
 800e858:	b084      	sub	sp, #16
 800e85a:	af00      	add	r7, sp, #0
 800e85c:	6078      	str	r0, [r7, #4]
 800e85e:	460b      	mov	r3, r1
 800e860:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e862:	2300      	movs	r3, #0
 800e864:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e866:	2300      	movs	r3, #0
 800e868:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e870:	78fa      	ldrb	r2, [r7, #3]
 800e872:	4611      	mov	r1, r2
 800e874:	4618      	mov	r0, r3
 800e876:	f7fa f99e 	bl	8008bb6 <HAL_PCD_EP_ClrStall>
 800e87a:	4603      	mov	r3, r0
 800e87c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e87e:	7bfb      	ldrb	r3, [r7, #15]
 800e880:	4618      	mov	r0, r3
 800e882:	f000 f8bf 	bl	800ea04 <USBD_Get_USB_Status>
 800e886:	4603      	mov	r3, r0
 800e888:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e88a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e88c:	4618      	mov	r0, r3
 800e88e:	3710      	adds	r7, #16
 800e890:	46bd      	mov	sp, r7
 800e892:	bd80      	pop	{r7, pc}

0800e894 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e894:	b480      	push	{r7}
 800e896:	b085      	sub	sp, #20
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	460b      	mov	r3, r1
 800e89e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e8a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e8a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	da0b      	bge.n	800e8c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e8b0:	78fb      	ldrb	r3, [r7, #3]
 800e8b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8b6:	68f9      	ldr	r1, [r7, #12]
 800e8b8:	4613      	mov	r3, r2
 800e8ba:	00db      	lsls	r3, r3, #3
 800e8bc:	4413      	add	r3, r2
 800e8be:	009b      	lsls	r3, r3, #2
 800e8c0:	440b      	add	r3, r1
 800e8c2:	3316      	adds	r3, #22
 800e8c4:	781b      	ldrb	r3, [r3, #0]
 800e8c6:	e00b      	b.n	800e8e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e8c8:	78fb      	ldrb	r3, [r7, #3]
 800e8ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e8ce:	68f9      	ldr	r1, [r7, #12]
 800e8d0:	4613      	mov	r3, r2
 800e8d2:	00db      	lsls	r3, r3, #3
 800e8d4:	4413      	add	r3, r2
 800e8d6:	009b      	lsls	r3, r3, #2
 800e8d8:	440b      	add	r3, r1
 800e8da:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e8de:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3714      	adds	r7, #20
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b084      	sub	sp, #16
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e906:	78fa      	ldrb	r2, [r7, #3]
 800e908:	4611      	mov	r1, r2
 800e90a:	4618      	mov	r0, r3
 800e90c:	f7f9 ff8b 	bl	8008826 <HAL_PCD_SetAddress>
 800e910:	4603      	mov	r3, r0
 800e912:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e914:	7bfb      	ldrb	r3, [r7, #15]
 800e916:	4618      	mov	r0, r3
 800e918:	f000 f874 	bl	800ea04 <USBD_Get_USB_Status>
 800e91c:	4603      	mov	r3, r0
 800e91e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e920:	7bbb      	ldrb	r3, [r7, #14]
}
 800e922:	4618      	mov	r0, r3
 800e924:	3710      	adds	r7, #16
 800e926:	46bd      	mov	sp, r7
 800e928:	bd80      	pop	{r7, pc}

0800e92a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e92a:	b580      	push	{r7, lr}
 800e92c:	b086      	sub	sp, #24
 800e92e:	af00      	add	r7, sp, #0
 800e930:	60f8      	str	r0, [r7, #12]
 800e932:	607a      	str	r2, [r7, #4]
 800e934:	603b      	str	r3, [r7, #0]
 800e936:	460b      	mov	r3, r1
 800e938:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e93a:	2300      	movs	r3, #0
 800e93c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e93e:	2300      	movs	r3, #0
 800e940:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e942:	68fb      	ldr	r3, [r7, #12]
 800e944:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e948:	7af9      	ldrb	r1, [r7, #11]
 800e94a:	683b      	ldr	r3, [r7, #0]
 800e94c:	687a      	ldr	r2, [r7, #4]
 800e94e:	f7fa f895 	bl	8008a7c <HAL_PCD_EP_Transmit>
 800e952:	4603      	mov	r3, r0
 800e954:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e956:	7dfb      	ldrb	r3, [r7, #23]
 800e958:	4618      	mov	r0, r3
 800e95a:	f000 f853 	bl	800ea04 <USBD_Get_USB_Status>
 800e95e:	4603      	mov	r3, r0
 800e960:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e962:	7dbb      	ldrb	r3, [r7, #22]
}
 800e964:	4618      	mov	r0, r3
 800e966:	3718      	adds	r7, #24
 800e968:	46bd      	mov	sp, r7
 800e96a:	bd80      	pop	{r7, pc}

0800e96c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e96c:	b580      	push	{r7, lr}
 800e96e:	b086      	sub	sp, #24
 800e970:	af00      	add	r7, sp, #0
 800e972:	60f8      	str	r0, [r7, #12]
 800e974:	607a      	str	r2, [r7, #4]
 800e976:	603b      	str	r3, [r7, #0]
 800e978:	460b      	mov	r3, r1
 800e97a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e97c:	2300      	movs	r3, #0
 800e97e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e980:	2300      	movs	r3, #0
 800e982:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e98a:	7af9      	ldrb	r1, [r7, #11]
 800e98c:	683b      	ldr	r3, [r7, #0]
 800e98e:	687a      	ldr	r2, [r7, #4]
 800e990:	f7fa f821 	bl	80089d6 <HAL_PCD_EP_Receive>
 800e994:	4603      	mov	r3, r0
 800e996:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e998:	7dfb      	ldrb	r3, [r7, #23]
 800e99a:	4618      	mov	r0, r3
 800e99c:	f000 f832 	bl	800ea04 <USBD_Get_USB_Status>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e9a4:	7dbb      	ldrb	r3, [r7, #22]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3718      	adds	r7, #24
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	bd80      	pop	{r7, pc}

0800e9ae <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e9ae:	b580      	push	{r7, lr}
 800e9b0:	b082      	sub	sp, #8
 800e9b2:	af00      	add	r7, sp, #0
 800e9b4:	6078      	str	r0, [r7, #4]
 800e9b6:	460b      	mov	r3, r1
 800e9b8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e9c0:	78fa      	ldrb	r2, [r7, #3]
 800e9c2:	4611      	mov	r1, r2
 800e9c4:	4618      	mov	r0, r3
 800e9c6:	f7fa f841 	bl	8008a4c <HAL_PCD_EP_GetRxCount>
 800e9ca:	4603      	mov	r3, r0
}
 800e9cc:	4618      	mov	r0, r3
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e9dc:	4b03      	ldr	r3, [pc, #12]	@ (800e9ec <USBD_static_malloc+0x18>)
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	370c      	adds	r7, #12
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
 800e9ea:	bf00      	nop
 800e9ec:	200018f8 	.word	0x200018f8

0800e9f0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]

}
 800e9f8:	bf00      	nop
 800e9fa:	370c      	adds	r7, #12
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ea04:	b480      	push	{r7}
 800ea06:	b085      	sub	sp, #20
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ea12:	79fb      	ldrb	r3, [r7, #7]
 800ea14:	2b03      	cmp	r3, #3
 800ea16:	d817      	bhi.n	800ea48 <USBD_Get_USB_Status+0x44>
 800ea18:	a201      	add	r2, pc, #4	@ (adr r2, 800ea20 <USBD_Get_USB_Status+0x1c>)
 800ea1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea1e:	bf00      	nop
 800ea20:	0800ea31 	.word	0x0800ea31
 800ea24:	0800ea37 	.word	0x0800ea37
 800ea28:	0800ea3d 	.word	0x0800ea3d
 800ea2c:	0800ea43 	.word	0x0800ea43
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ea30:	2300      	movs	r3, #0
 800ea32:	73fb      	strb	r3, [r7, #15]
    break;
 800ea34:	e00b      	b.n	800ea4e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ea36:	2303      	movs	r3, #3
 800ea38:	73fb      	strb	r3, [r7, #15]
    break;
 800ea3a:	e008      	b.n	800ea4e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ea3c:	2301      	movs	r3, #1
 800ea3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ea40:	e005      	b.n	800ea4e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ea42:	2303      	movs	r3, #3
 800ea44:	73fb      	strb	r3, [r7, #15]
    break;
 800ea46:	e002      	b.n	800ea4e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ea48:	2303      	movs	r3, #3
 800ea4a:	73fb      	strb	r3, [r7, #15]
    break;
 800ea4c:	bf00      	nop
  }
  return usb_status;
 800ea4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3714      	adds	r7, #20
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <sniprintf>:
 800ea5c:	b40c      	push	{r2, r3}
 800ea5e:	b530      	push	{r4, r5, lr}
 800ea60:	4b18      	ldr	r3, [pc, #96]	@ (800eac4 <sniprintf+0x68>)
 800ea62:	1e0c      	subs	r4, r1, #0
 800ea64:	681d      	ldr	r5, [r3, #0]
 800ea66:	b09d      	sub	sp, #116	@ 0x74
 800ea68:	da08      	bge.n	800ea7c <sniprintf+0x20>
 800ea6a:	238b      	movs	r3, #139	@ 0x8b
 800ea6c:	602b      	str	r3, [r5, #0]
 800ea6e:	f04f 30ff 	mov.w	r0, #4294967295
 800ea72:	b01d      	add	sp, #116	@ 0x74
 800ea74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ea78:	b002      	add	sp, #8
 800ea7a:	4770      	bx	lr
 800ea7c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ea80:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ea84:	f04f 0300 	mov.w	r3, #0
 800ea88:	931b      	str	r3, [sp, #108]	@ 0x6c
 800ea8a:	bf14      	ite	ne
 800ea8c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ea90:	4623      	moveq	r3, r4
 800ea92:	9304      	str	r3, [sp, #16]
 800ea94:	9307      	str	r3, [sp, #28]
 800ea96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ea9a:	9002      	str	r0, [sp, #8]
 800ea9c:	9006      	str	r0, [sp, #24]
 800ea9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800eaa2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800eaa4:	ab21      	add	r3, sp, #132	@ 0x84
 800eaa6:	a902      	add	r1, sp, #8
 800eaa8:	4628      	mov	r0, r5
 800eaaa:	9301      	str	r3, [sp, #4]
 800eaac:	f000 f9a2 	bl	800edf4 <_svfiprintf_r>
 800eab0:	1c43      	adds	r3, r0, #1
 800eab2:	bfbc      	itt	lt
 800eab4:	238b      	movlt	r3, #139	@ 0x8b
 800eab6:	602b      	strlt	r3, [r5, #0]
 800eab8:	2c00      	cmp	r4, #0
 800eaba:	d0da      	beq.n	800ea72 <sniprintf+0x16>
 800eabc:	9b02      	ldr	r3, [sp, #8]
 800eabe:	2200      	movs	r2, #0
 800eac0:	701a      	strb	r2, [r3, #0]
 800eac2:	e7d6      	b.n	800ea72 <sniprintf+0x16>
 800eac4:	20000134 	.word	0x20000134

0800eac8 <memset>:
 800eac8:	4402      	add	r2, r0
 800eaca:	4603      	mov	r3, r0
 800eacc:	4293      	cmp	r3, r2
 800eace:	d100      	bne.n	800ead2 <memset+0xa>
 800ead0:	4770      	bx	lr
 800ead2:	f803 1b01 	strb.w	r1, [r3], #1
 800ead6:	e7f9      	b.n	800eacc <memset+0x4>

0800ead8 <__errno>:
 800ead8:	4b01      	ldr	r3, [pc, #4]	@ (800eae0 <__errno+0x8>)
 800eada:	6818      	ldr	r0, [r3, #0]
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop
 800eae0:	20000134 	.word	0x20000134

0800eae4 <__libc_init_array>:
 800eae4:	b570      	push	{r4, r5, r6, lr}
 800eae6:	4d0d      	ldr	r5, [pc, #52]	@ (800eb1c <__libc_init_array+0x38>)
 800eae8:	4c0d      	ldr	r4, [pc, #52]	@ (800eb20 <__libc_init_array+0x3c>)
 800eaea:	1b64      	subs	r4, r4, r5
 800eaec:	10a4      	asrs	r4, r4, #2
 800eaee:	2600      	movs	r6, #0
 800eaf0:	42a6      	cmp	r6, r4
 800eaf2:	d109      	bne.n	800eb08 <__libc_init_array+0x24>
 800eaf4:	4d0b      	ldr	r5, [pc, #44]	@ (800eb24 <__libc_init_array+0x40>)
 800eaf6:	4c0c      	ldr	r4, [pc, #48]	@ (800eb28 <__libc_init_array+0x44>)
 800eaf8:	f000 fc64 	bl	800f3c4 <_init>
 800eafc:	1b64      	subs	r4, r4, r5
 800eafe:	10a4      	asrs	r4, r4, #2
 800eb00:	2600      	movs	r6, #0
 800eb02:	42a6      	cmp	r6, r4
 800eb04:	d105      	bne.n	800eb12 <__libc_init_array+0x2e>
 800eb06:	bd70      	pop	{r4, r5, r6, pc}
 800eb08:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb0c:	4798      	blx	r3
 800eb0e:	3601      	adds	r6, #1
 800eb10:	e7ee      	b.n	800eaf0 <__libc_init_array+0xc>
 800eb12:	f855 3b04 	ldr.w	r3, [r5], #4
 800eb16:	4798      	blx	r3
 800eb18:	3601      	adds	r6, #1
 800eb1a:	e7f2      	b.n	800eb02 <__libc_init_array+0x1e>
 800eb1c:	0801097c 	.word	0x0801097c
 800eb20:	0801097c 	.word	0x0801097c
 800eb24:	0801097c 	.word	0x0801097c
 800eb28:	08010980 	.word	0x08010980

0800eb2c <__retarget_lock_acquire_recursive>:
 800eb2c:	4770      	bx	lr

0800eb2e <__retarget_lock_release_recursive>:
 800eb2e:	4770      	bx	lr

0800eb30 <memcpy>:
 800eb30:	440a      	add	r2, r1
 800eb32:	4291      	cmp	r1, r2
 800eb34:	f100 33ff 	add.w	r3, r0, #4294967295
 800eb38:	d100      	bne.n	800eb3c <memcpy+0xc>
 800eb3a:	4770      	bx	lr
 800eb3c:	b510      	push	{r4, lr}
 800eb3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eb42:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eb46:	4291      	cmp	r1, r2
 800eb48:	d1f9      	bne.n	800eb3e <memcpy+0xe>
 800eb4a:	bd10      	pop	{r4, pc}

0800eb4c <_free_r>:
 800eb4c:	b538      	push	{r3, r4, r5, lr}
 800eb4e:	4605      	mov	r5, r0
 800eb50:	2900      	cmp	r1, #0
 800eb52:	d041      	beq.n	800ebd8 <_free_r+0x8c>
 800eb54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eb58:	1f0c      	subs	r4, r1, #4
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	bfb8      	it	lt
 800eb5e:	18e4      	addlt	r4, r4, r3
 800eb60:	f000 f8e0 	bl	800ed24 <__malloc_lock>
 800eb64:	4a1d      	ldr	r2, [pc, #116]	@ (800ebdc <_free_r+0x90>)
 800eb66:	6813      	ldr	r3, [r2, #0]
 800eb68:	b933      	cbnz	r3, 800eb78 <_free_r+0x2c>
 800eb6a:	6063      	str	r3, [r4, #4]
 800eb6c:	6014      	str	r4, [r2, #0]
 800eb6e:	4628      	mov	r0, r5
 800eb70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb74:	f000 b8dc 	b.w	800ed30 <__malloc_unlock>
 800eb78:	42a3      	cmp	r3, r4
 800eb7a:	d908      	bls.n	800eb8e <_free_r+0x42>
 800eb7c:	6820      	ldr	r0, [r4, #0]
 800eb7e:	1821      	adds	r1, r4, r0
 800eb80:	428b      	cmp	r3, r1
 800eb82:	bf01      	itttt	eq
 800eb84:	6819      	ldreq	r1, [r3, #0]
 800eb86:	685b      	ldreq	r3, [r3, #4]
 800eb88:	1809      	addeq	r1, r1, r0
 800eb8a:	6021      	streq	r1, [r4, #0]
 800eb8c:	e7ed      	b.n	800eb6a <_free_r+0x1e>
 800eb8e:	461a      	mov	r2, r3
 800eb90:	685b      	ldr	r3, [r3, #4]
 800eb92:	b10b      	cbz	r3, 800eb98 <_free_r+0x4c>
 800eb94:	42a3      	cmp	r3, r4
 800eb96:	d9fa      	bls.n	800eb8e <_free_r+0x42>
 800eb98:	6811      	ldr	r1, [r2, #0]
 800eb9a:	1850      	adds	r0, r2, r1
 800eb9c:	42a0      	cmp	r0, r4
 800eb9e:	d10b      	bne.n	800ebb8 <_free_r+0x6c>
 800eba0:	6820      	ldr	r0, [r4, #0]
 800eba2:	4401      	add	r1, r0
 800eba4:	1850      	adds	r0, r2, r1
 800eba6:	4283      	cmp	r3, r0
 800eba8:	6011      	str	r1, [r2, #0]
 800ebaa:	d1e0      	bne.n	800eb6e <_free_r+0x22>
 800ebac:	6818      	ldr	r0, [r3, #0]
 800ebae:	685b      	ldr	r3, [r3, #4]
 800ebb0:	6053      	str	r3, [r2, #4]
 800ebb2:	4408      	add	r0, r1
 800ebb4:	6010      	str	r0, [r2, #0]
 800ebb6:	e7da      	b.n	800eb6e <_free_r+0x22>
 800ebb8:	d902      	bls.n	800ebc0 <_free_r+0x74>
 800ebba:	230c      	movs	r3, #12
 800ebbc:	602b      	str	r3, [r5, #0]
 800ebbe:	e7d6      	b.n	800eb6e <_free_r+0x22>
 800ebc0:	6820      	ldr	r0, [r4, #0]
 800ebc2:	1821      	adds	r1, r4, r0
 800ebc4:	428b      	cmp	r3, r1
 800ebc6:	bf04      	itt	eq
 800ebc8:	6819      	ldreq	r1, [r3, #0]
 800ebca:	685b      	ldreq	r3, [r3, #4]
 800ebcc:	6063      	str	r3, [r4, #4]
 800ebce:	bf04      	itt	eq
 800ebd0:	1809      	addeq	r1, r1, r0
 800ebd2:	6021      	streq	r1, [r4, #0]
 800ebd4:	6054      	str	r4, [r2, #4]
 800ebd6:	e7ca      	b.n	800eb6e <_free_r+0x22>
 800ebd8:	bd38      	pop	{r3, r4, r5, pc}
 800ebda:	bf00      	nop
 800ebdc:	20001c5c 	.word	0x20001c5c

0800ebe0 <sbrk_aligned>:
 800ebe0:	b570      	push	{r4, r5, r6, lr}
 800ebe2:	4e0f      	ldr	r6, [pc, #60]	@ (800ec20 <sbrk_aligned+0x40>)
 800ebe4:	460c      	mov	r4, r1
 800ebe6:	6831      	ldr	r1, [r6, #0]
 800ebe8:	4605      	mov	r5, r0
 800ebea:	b911      	cbnz	r1, 800ebf2 <sbrk_aligned+0x12>
 800ebec:	f000 fba4 	bl	800f338 <_sbrk_r>
 800ebf0:	6030      	str	r0, [r6, #0]
 800ebf2:	4621      	mov	r1, r4
 800ebf4:	4628      	mov	r0, r5
 800ebf6:	f000 fb9f 	bl	800f338 <_sbrk_r>
 800ebfa:	1c43      	adds	r3, r0, #1
 800ebfc:	d103      	bne.n	800ec06 <sbrk_aligned+0x26>
 800ebfe:	f04f 34ff 	mov.w	r4, #4294967295
 800ec02:	4620      	mov	r0, r4
 800ec04:	bd70      	pop	{r4, r5, r6, pc}
 800ec06:	1cc4      	adds	r4, r0, #3
 800ec08:	f024 0403 	bic.w	r4, r4, #3
 800ec0c:	42a0      	cmp	r0, r4
 800ec0e:	d0f8      	beq.n	800ec02 <sbrk_aligned+0x22>
 800ec10:	1a21      	subs	r1, r4, r0
 800ec12:	4628      	mov	r0, r5
 800ec14:	f000 fb90 	bl	800f338 <_sbrk_r>
 800ec18:	3001      	adds	r0, #1
 800ec1a:	d1f2      	bne.n	800ec02 <sbrk_aligned+0x22>
 800ec1c:	e7ef      	b.n	800ebfe <sbrk_aligned+0x1e>
 800ec1e:	bf00      	nop
 800ec20:	20001c58 	.word	0x20001c58

0800ec24 <_malloc_r>:
 800ec24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ec28:	1ccd      	adds	r5, r1, #3
 800ec2a:	f025 0503 	bic.w	r5, r5, #3
 800ec2e:	3508      	adds	r5, #8
 800ec30:	2d0c      	cmp	r5, #12
 800ec32:	bf38      	it	cc
 800ec34:	250c      	movcc	r5, #12
 800ec36:	2d00      	cmp	r5, #0
 800ec38:	4606      	mov	r6, r0
 800ec3a:	db01      	blt.n	800ec40 <_malloc_r+0x1c>
 800ec3c:	42a9      	cmp	r1, r5
 800ec3e:	d904      	bls.n	800ec4a <_malloc_r+0x26>
 800ec40:	230c      	movs	r3, #12
 800ec42:	6033      	str	r3, [r6, #0]
 800ec44:	2000      	movs	r0, #0
 800ec46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ed20 <_malloc_r+0xfc>
 800ec4e:	f000 f869 	bl	800ed24 <__malloc_lock>
 800ec52:	f8d8 3000 	ldr.w	r3, [r8]
 800ec56:	461c      	mov	r4, r3
 800ec58:	bb44      	cbnz	r4, 800ecac <_malloc_r+0x88>
 800ec5a:	4629      	mov	r1, r5
 800ec5c:	4630      	mov	r0, r6
 800ec5e:	f7ff ffbf 	bl	800ebe0 <sbrk_aligned>
 800ec62:	1c43      	adds	r3, r0, #1
 800ec64:	4604      	mov	r4, r0
 800ec66:	d158      	bne.n	800ed1a <_malloc_r+0xf6>
 800ec68:	f8d8 4000 	ldr.w	r4, [r8]
 800ec6c:	4627      	mov	r7, r4
 800ec6e:	2f00      	cmp	r7, #0
 800ec70:	d143      	bne.n	800ecfa <_malloc_r+0xd6>
 800ec72:	2c00      	cmp	r4, #0
 800ec74:	d04b      	beq.n	800ed0e <_malloc_r+0xea>
 800ec76:	6823      	ldr	r3, [r4, #0]
 800ec78:	4639      	mov	r1, r7
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	eb04 0903 	add.w	r9, r4, r3
 800ec80:	f000 fb5a 	bl	800f338 <_sbrk_r>
 800ec84:	4581      	cmp	r9, r0
 800ec86:	d142      	bne.n	800ed0e <_malloc_r+0xea>
 800ec88:	6821      	ldr	r1, [r4, #0]
 800ec8a:	1a6d      	subs	r5, r5, r1
 800ec8c:	4629      	mov	r1, r5
 800ec8e:	4630      	mov	r0, r6
 800ec90:	f7ff ffa6 	bl	800ebe0 <sbrk_aligned>
 800ec94:	3001      	adds	r0, #1
 800ec96:	d03a      	beq.n	800ed0e <_malloc_r+0xea>
 800ec98:	6823      	ldr	r3, [r4, #0]
 800ec9a:	442b      	add	r3, r5
 800ec9c:	6023      	str	r3, [r4, #0]
 800ec9e:	f8d8 3000 	ldr.w	r3, [r8]
 800eca2:	685a      	ldr	r2, [r3, #4]
 800eca4:	bb62      	cbnz	r2, 800ed00 <_malloc_r+0xdc>
 800eca6:	f8c8 7000 	str.w	r7, [r8]
 800ecaa:	e00f      	b.n	800eccc <_malloc_r+0xa8>
 800ecac:	6822      	ldr	r2, [r4, #0]
 800ecae:	1b52      	subs	r2, r2, r5
 800ecb0:	d420      	bmi.n	800ecf4 <_malloc_r+0xd0>
 800ecb2:	2a0b      	cmp	r2, #11
 800ecb4:	d917      	bls.n	800ece6 <_malloc_r+0xc2>
 800ecb6:	1961      	adds	r1, r4, r5
 800ecb8:	42a3      	cmp	r3, r4
 800ecba:	6025      	str	r5, [r4, #0]
 800ecbc:	bf18      	it	ne
 800ecbe:	6059      	strne	r1, [r3, #4]
 800ecc0:	6863      	ldr	r3, [r4, #4]
 800ecc2:	bf08      	it	eq
 800ecc4:	f8c8 1000 	streq.w	r1, [r8]
 800ecc8:	5162      	str	r2, [r4, r5]
 800ecca:	604b      	str	r3, [r1, #4]
 800eccc:	4630      	mov	r0, r6
 800ecce:	f000 f82f 	bl	800ed30 <__malloc_unlock>
 800ecd2:	f104 000b 	add.w	r0, r4, #11
 800ecd6:	1d23      	adds	r3, r4, #4
 800ecd8:	f020 0007 	bic.w	r0, r0, #7
 800ecdc:	1ac2      	subs	r2, r0, r3
 800ecde:	bf1c      	itt	ne
 800ece0:	1a1b      	subne	r3, r3, r0
 800ece2:	50a3      	strne	r3, [r4, r2]
 800ece4:	e7af      	b.n	800ec46 <_malloc_r+0x22>
 800ece6:	6862      	ldr	r2, [r4, #4]
 800ece8:	42a3      	cmp	r3, r4
 800ecea:	bf0c      	ite	eq
 800ecec:	f8c8 2000 	streq.w	r2, [r8]
 800ecf0:	605a      	strne	r2, [r3, #4]
 800ecf2:	e7eb      	b.n	800eccc <_malloc_r+0xa8>
 800ecf4:	4623      	mov	r3, r4
 800ecf6:	6864      	ldr	r4, [r4, #4]
 800ecf8:	e7ae      	b.n	800ec58 <_malloc_r+0x34>
 800ecfa:	463c      	mov	r4, r7
 800ecfc:	687f      	ldr	r7, [r7, #4]
 800ecfe:	e7b6      	b.n	800ec6e <_malloc_r+0x4a>
 800ed00:	461a      	mov	r2, r3
 800ed02:	685b      	ldr	r3, [r3, #4]
 800ed04:	42a3      	cmp	r3, r4
 800ed06:	d1fb      	bne.n	800ed00 <_malloc_r+0xdc>
 800ed08:	2300      	movs	r3, #0
 800ed0a:	6053      	str	r3, [r2, #4]
 800ed0c:	e7de      	b.n	800eccc <_malloc_r+0xa8>
 800ed0e:	230c      	movs	r3, #12
 800ed10:	6033      	str	r3, [r6, #0]
 800ed12:	4630      	mov	r0, r6
 800ed14:	f000 f80c 	bl	800ed30 <__malloc_unlock>
 800ed18:	e794      	b.n	800ec44 <_malloc_r+0x20>
 800ed1a:	6005      	str	r5, [r0, #0]
 800ed1c:	e7d6      	b.n	800eccc <_malloc_r+0xa8>
 800ed1e:	bf00      	nop
 800ed20:	20001c5c 	.word	0x20001c5c

0800ed24 <__malloc_lock>:
 800ed24:	4801      	ldr	r0, [pc, #4]	@ (800ed2c <__malloc_lock+0x8>)
 800ed26:	f7ff bf01 	b.w	800eb2c <__retarget_lock_acquire_recursive>
 800ed2a:	bf00      	nop
 800ed2c:	20001c54 	.word	0x20001c54

0800ed30 <__malloc_unlock>:
 800ed30:	4801      	ldr	r0, [pc, #4]	@ (800ed38 <__malloc_unlock+0x8>)
 800ed32:	f7ff befc 	b.w	800eb2e <__retarget_lock_release_recursive>
 800ed36:	bf00      	nop
 800ed38:	20001c54 	.word	0x20001c54

0800ed3c <__ssputs_r>:
 800ed3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed40:	688e      	ldr	r6, [r1, #8]
 800ed42:	461f      	mov	r7, r3
 800ed44:	42be      	cmp	r6, r7
 800ed46:	680b      	ldr	r3, [r1, #0]
 800ed48:	4682      	mov	sl, r0
 800ed4a:	460c      	mov	r4, r1
 800ed4c:	4690      	mov	r8, r2
 800ed4e:	d82d      	bhi.n	800edac <__ssputs_r+0x70>
 800ed50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ed54:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ed58:	d026      	beq.n	800eda8 <__ssputs_r+0x6c>
 800ed5a:	6965      	ldr	r5, [r4, #20]
 800ed5c:	6909      	ldr	r1, [r1, #16]
 800ed5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed62:	eba3 0901 	sub.w	r9, r3, r1
 800ed66:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ed6a:	1c7b      	adds	r3, r7, #1
 800ed6c:	444b      	add	r3, r9
 800ed6e:	106d      	asrs	r5, r5, #1
 800ed70:	429d      	cmp	r5, r3
 800ed72:	bf38      	it	cc
 800ed74:	461d      	movcc	r5, r3
 800ed76:	0553      	lsls	r3, r2, #21
 800ed78:	d527      	bpl.n	800edca <__ssputs_r+0x8e>
 800ed7a:	4629      	mov	r1, r5
 800ed7c:	f7ff ff52 	bl	800ec24 <_malloc_r>
 800ed80:	4606      	mov	r6, r0
 800ed82:	b360      	cbz	r0, 800edde <__ssputs_r+0xa2>
 800ed84:	6921      	ldr	r1, [r4, #16]
 800ed86:	464a      	mov	r2, r9
 800ed88:	f7ff fed2 	bl	800eb30 <memcpy>
 800ed8c:	89a3      	ldrh	r3, [r4, #12]
 800ed8e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ed92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed96:	81a3      	strh	r3, [r4, #12]
 800ed98:	6126      	str	r6, [r4, #16]
 800ed9a:	6165      	str	r5, [r4, #20]
 800ed9c:	444e      	add	r6, r9
 800ed9e:	eba5 0509 	sub.w	r5, r5, r9
 800eda2:	6026      	str	r6, [r4, #0]
 800eda4:	60a5      	str	r5, [r4, #8]
 800eda6:	463e      	mov	r6, r7
 800eda8:	42be      	cmp	r6, r7
 800edaa:	d900      	bls.n	800edae <__ssputs_r+0x72>
 800edac:	463e      	mov	r6, r7
 800edae:	6820      	ldr	r0, [r4, #0]
 800edb0:	4632      	mov	r2, r6
 800edb2:	4641      	mov	r1, r8
 800edb4:	f000 faa6 	bl	800f304 <memmove>
 800edb8:	68a3      	ldr	r3, [r4, #8]
 800edba:	1b9b      	subs	r3, r3, r6
 800edbc:	60a3      	str	r3, [r4, #8]
 800edbe:	6823      	ldr	r3, [r4, #0]
 800edc0:	4433      	add	r3, r6
 800edc2:	6023      	str	r3, [r4, #0]
 800edc4:	2000      	movs	r0, #0
 800edc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800edca:	462a      	mov	r2, r5
 800edcc:	f000 fac4 	bl	800f358 <_realloc_r>
 800edd0:	4606      	mov	r6, r0
 800edd2:	2800      	cmp	r0, #0
 800edd4:	d1e0      	bne.n	800ed98 <__ssputs_r+0x5c>
 800edd6:	6921      	ldr	r1, [r4, #16]
 800edd8:	4650      	mov	r0, sl
 800edda:	f7ff feb7 	bl	800eb4c <_free_r>
 800edde:	230c      	movs	r3, #12
 800ede0:	f8ca 3000 	str.w	r3, [sl]
 800ede4:	89a3      	ldrh	r3, [r4, #12]
 800ede6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800edea:	81a3      	strh	r3, [r4, #12]
 800edec:	f04f 30ff 	mov.w	r0, #4294967295
 800edf0:	e7e9      	b.n	800edc6 <__ssputs_r+0x8a>
	...

0800edf4 <_svfiprintf_r>:
 800edf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edf8:	4698      	mov	r8, r3
 800edfa:	898b      	ldrh	r3, [r1, #12]
 800edfc:	061b      	lsls	r3, r3, #24
 800edfe:	b09d      	sub	sp, #116	@ 0x74
 800ee00:	4607      	mov	r7, r0
 800ee02:	460d      	mov	r5, r1
 800ee04:	4614      	mov	r4, r2
 800ee06:	d510      	bpl.n	800ee2a <_svfiprintf_r+0x36>
 800ee08:	690b      	ldr	r3, [r1, #16]
 800ee0a:	b973      	cbnz	r3, 800ee2a <_svfiprintf_r+0x36>
 800ee0c:	2140      	movs	r1, #64	@ 0x40
 800ee0e:	f7ff ff09 	bl	800ec24 <_malloc_r>
 800ee12:	6028      	str	r0, [r5, #0]
 800ee14:	6128      	str	r0, [r5, #16]
 800ee16:	b930      	cbnz	r0, 800ee26 <_svfiprintf_r+0x32>
 800ee18:	230c      	movs	r3, #12
 800ee1a:	603b      	str	r3, [r7, #0]
 800ee1c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee20:	b01d      	add	sp, #116	@ 0x74
 800ee22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee26:	2340      	movs	r3, #64	@ 0x40
 800ee28:	616b      	str	r3, [r5, #20]
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee2e:	2320      	movs	r3, #32
 800ee30:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ee34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ee38:	2330      	movs	r3, #48	@ 0x30
 800ee3a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800efd8 <_svfiprintf_r+0x1e4>
 800ee3e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ee42:	f04f 0901 	mov.w	r9, #1
 800ee46:	4623      	mov	r3, r4
 800ee48:	469a      	mov	sl, r3
 800ee4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ee4e:	b10a      	cbz	r2, 800ee54 <_svfiprintf_r+0x60>
 800ee50:	2a25      	cmp	r2, #37	@ 0x25
 800ee52:	d1f9      	bne.n	800ee48 <_svfiprintf_r+0x54>
 800ee54:	ebba 0b04 	subs.w	fp, sl, r4
 800ee58:	d00b      	beq.n	800ee72 <_svfiprintf_r+0x7e>
 800ee5a:	465b      	mov	r3, fp
 800ee5c:	4622      	mov	r2, r4
 800ee5e:	4629      	mov	r1, r5
 800ee60:	4638      	mov	r0, r7
 800ee62:	f7ff ff6b 	bl	800ed3c <__ssputs_r>
 800ee66:	3001      	adds	r0, #1
 800ee68:	f000 80a7 	beq.w	800efba <_svfiprintf_r+0x1c6>
 800ee6c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee6e:	445a      	add	r2, fp
 800ee70:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee72:	f89a 3000 	ldrb.w	r3, [sl]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	f000 809f 	beq.w	800efba <_svfiprintf_r+0x1c6>
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ee82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee86:	f10a 0a01 	add.w	sl, sl, #1
 800ee8a:	9304      	str	r3, [sp, #16]
 800ee8c:	9307      	str	r3, [sp, #28]
 800ee8e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee92:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee94:	4654      	mov	r4, sl
 800ee96:	2205      	movs	r2, #5
 800ee98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee9c:	484e      	ldr	r0, [pc, #312]	@ (800efd8 <_svfiprintf_r+0x1e4>)
 800ee9e:	f7f1 f99f 	bl	80001e0 <memchr>
 800eea2:	9a04      	ldr	r2, [sp, #16]
 800eea4:	b9d8      	cbnz	r0, 800eede <_svfiprintf_r+0xea>
 800eea6:	06d0      	lsls	r0, r2, #27
 800eea8:	bf44      	itt	mi
 800eeaa:	2320      	movmi	r3, #32
 800eeac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeb0:	0711      	lsls	r1, r2, #28
 800eeb2:	bf44      	itt	mi
 800eeb4:	232b      	movmi	r3, #43	@ 0x2b
 800eeb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eeba:	f89a 3000 	ldrb.w	r3, [sl]
 800eebe:	2b2a      	cmp	r3, #42	@ 0x2a
 800eec0:	d015      	beq.n	800eeee <_svfiprintf_r+0xfa>
 800eec2:	9a07      	ldr	r2, [sp, #28]
 800eec4:	4654      	mov	r4, sl
 800eec6:	2000      	movs	r0, #0
 800eec8:	f04f 0c0a 	mov.w	ip, #10
 800eecc:	4621      	mov	r1, r4
 800eece:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eed2:	3b30      	subs	r3, #48	@ 0x30
 800eed4:	2b09      	cmp	r3, #9
 800eed6:	d94b      	bls.n	800ef70 <_svfiprintf_r+0x17c>
 800eed8:	b1b0      	cbz	r0, 800ef08 <_svfiprintf_r+0x114>
 800eeda:	9207      	str	r2, [sp, #28]
 800eedc:	e014      	b.n	800ef08 <_svfiprintf_r+0x114>
 800eede:	eba0 0308 	sub.w	r3, r0, r8
 800eee2:	fa09 f303 	lsl.w	r3, r9, r3
 800eee6:	4313      	orrs	r3, r2
 800eee8:	9304      	str	r3, [sp, #16]
 800eeea:	46a2      	mov	sl, r4
 800eeec:	e7d2      	b.n	800ee94 <_svfiprintf_r+0xa0>
 800eeee:	9b03      	ldr	r3, [sp, #12]
 800eef0:	1d19      	adds	r1, r3, #4
 800eef2:	681b      	ldr	r3, [r3, #0]
 800eef4:	9103      	str	r1, [sp, #12]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	bfbb      	ittet	lt
 800eefa:	425b      	neglt	r3, r3
 800eefc:	f042 0202 	orrlt.w	r2, r2, #2
 800ef00:	9307      	strge	r3, [sp, #28]
 800ef02:	9307      	strlt	r3, [sp, #28]
 800ef04:	bfb8      	it	lt
 800ef06:	9204      	strlt	r2, [sp, #16]
 800ef08:	7823      	ldrb	r3, [r4, #0]
 800ef0a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ef0c:	d10a      	bne.n	800ef24 <_svfiprintf_r+0x130>
 800ef0e:	7863      	ldrb	r3, [r4, #1]
 800ef10:	2b2a      	cmp	r3, #42	@ 0x2a
 800ef12:	d132      	bne.n	800ef7a <_svfiprintf_r+0x186>
 800ef14:	9b03      	ldr	r3, [sp, #12]
 800ef16:	1d1a      	adds	r2, r3, #4
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	9203      	str	r2, [sp, #12]
 800ef1c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ef20:	3402      	adds	r4, #2
 800ef22:	9305      	str	r3, [sp, #20]
 800ef24:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800efe8 <_svfiprintf_r+0x1f4>
 800ef28:	7821      	ldrb	r1, [r4, #0]
 800ef2a:	2203      	movs	r2, #3
 800ef2c:	4650      	mov	r0, sl
 800ef2e:	f7f1 f957 	bl	80001e0 <memchr>
 800ef32:	b138      	cbz	r0, 800ef44 <_svfiprintf_r+0x150>
 800ef34:	9b04      	ldr	r3, [sp, #16]
 800ef36:	eba0 000a 	sub.w	r0, r0, sl
 800ef3a:	2240      	movs	r2, #64	@ 0x40
 800ef3c:	4082      	lsls	r2, r0
 800ef3e:	4313      	orrs	r3, r2
 800ef40:	3401      	adds	r4, #1
 800ef42:	9304      	str	r3, [sp, #16]
 800ef44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef48:	4824      	ldr	r0, [pc, #144]	@ (800efdc <_svfiprintf_r+0x1e8>)
 800ef4a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ef4e:	2206      	movs	r2, #6
 800ef50:	f7f1 f946 	bl	80001e0 <memchr>
 800ef54:	2800      	cmp	r0, #0
 800ef56:	d036      	beq.n	800efc6 <_svfiprintf_r+0x1d2>
 800ef58:	4b21      	ldr	r3, [pc, #132]	@ (800efe0 <_svfiprintf_r+0x1ec>)
 800ef5a:	bb1b      	cbnz	r3, 800efa4 <_svfiprintf_r+0x1b0>
 800ef5c:	9b03      	ldr	r3, [sp, #12]
 800ef5e:	3307      	adds	r3, #7
 800ef60:	f023 0307 	bic.w	r3, r3, #7
 800ef64:	3308      	adds	r3, #8
 800ef66:	9303      	str	r3, [sp, #12]
 800ef68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ef6a:	4433      	add	r3, r6
 800ef6c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef6e:	e76a      	b.n	800ee46 <_svfiprintf_r+0x52>
 800ef70:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef74:	460c      	mov	r4, r1
 800ef76:	2001      	movs	r0, #1
 800ef78:	e7a8      	b.n	800eecc <_svfiprintf_r+0xd8>
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	3401      	adds	r4, #1
 800ef7e:	9305      	str	r3, [sp, #20]
 800ef80:	4619      	mov	r1, r3
 800ef82:	f04f 0c0a 	mov.w	ip, #10
 800ef86:	4620      	mov	r0, r4
 800ef88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef8c:	3a30      	subs	r2, #48	@ 0x30
 800ef8e:	2a09      	cmp	r2, #9
 800ef90:	d903      	bls.n	800ef9a <_svfiprintf_r+0x1a6>
 800ef92:	2b00      	cmp	r3, #0
 800ef94:	d0c6      	beq.n	800ef24 <_svfiprintf_r+0x130>
 800ef96:	9105      	str	r1, [sp, #20]
 800ef98:	e7c4      	b.n	800ef24 <_svfiprintf_r+0x130>
 800ef9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef9e:	4604      	mov	r4, r0
 800efa0:	2301      	movs	r3, #1
 800efa2:	e7f0      	b.n	800ef86 <_svfiprintf_r+0x192>
 800efa4:	ab03      	add	r3, sp, #12
 800efa6:	9300      	str	r3, [sp, #0]
 800efa8:	462a      	mov	r2, r5
 800efaa:	4b0e      	ldr	r3, [pc, #56]	@ (800efe4 <_svfiprintf_r+0x1f0>)
 800efac:	a904      	add	r1, sp, #16
 800efae:	4638      	mov	r0, r7
 800efb0:	f3af 8000 	nop.w
 800efb4:	1c42      	adds	r2, r0, #1
 800efb6:	4606      	mov	r6, r0
 800efb8:	d1d6      	bne.n	800ef68 <_svfiprintf_r+0x174>
 800efba:	89ab      	ldrh	r3, [r5, #12]
 800efbc:	065b      	lsls	r3, r3, #25
 800efbe:	f53f af2d 	bmi.w	800ee1c <_svfiprintf_r+0x28>
 800efc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800efc4:	e72c      	b.n	800ee20 <_svfiprintf_r+0x2c>
 800efc6:	ab03      	add	r3, sp, #12
 800efc8:	9300      	str	r3, [sp, #0]
 800efca:	462a      	mov	r2, r5
 800efcc:	4b05      	ldr	r3, [pc, #20]	@ (800efe4 <_svfiprintf_r+0x1f0>)
 800efce:	a904      	add	r1, sp, #16
 800efd0:	4638      	mov	r0, r7
 800efd2:	f000 f879 	bl	800f0c8 <_printf_i>
 800efd6:	e7ed      	b.n	800efb4 <_svfiprintf_r+0x1c0>
 800efd8:	08010940 	.word	0x08010940
 800efdc:	0801094a 	.word	0x0801094a
 800efe0:	00000000 	.word	0x00000000
 800efe4:	0800ed3d 	.word	0x0800ed3d
 800efe8:	08010946 	.word	0x08010946

0800efec <_printf_common>:
 800efec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eff0:	4616      	mov	r6, r2
 800eff2:	4698      	mov	r8, r3
 800eff4:	688a      	ldr	r2, [r1, #8]
 800eff6:	690b      	ldr	r3, [r1, #16]
 800eff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800effc:	4293      	cmp	r3, r2
 800effe:	bfb8      	it	lt
 800f000:	4613      	movlt	r3, r2
 800f002:	6033      	str	r3, [r6, #0]
 800f004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f008:	4607      	mov	r7, r0
 800f00a:	460c      	mov	r4, r1
 800f00c:	b10a      	cbz	r2, 800f012 <_printf_common+0x26>
 800f00e:	3301      	adds	r3, #1
 800f010:	6033      	str	r3, [r6, #0]
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	0699      	lsls	r1, r3, #26
 800f016:	bf42      	ittt	mi
 800f018:	6833      	ldrmi	r3, [r6, #0]
 800f01a:	3302      	addmi	r3, #2
 800f01c:	6033      	strmi	r3, [r6, #0]
 800f01e:	6825      	ldr	r5, [r4, #0]
 800f020:	f015 0506 	ands.w	r5, r5, #6
 800f024:	d106      	bne.n	800f034 <_printf_common+0x48>
 800f026:	f104 0a19 	add.w	sl, r4, #25
 800f02a:	68e3      	ldr	r3, [r4, #12]
 800f02c:	6832      	ldr	r2, [r6, #0]
 800f02e:	1a9b      	subs	r3, r3, r2
 800f030:	42ab      	cmp	r3, r5
 800f032:	dc26      	bgt.n	800f082 <_printf_common+0x96>
 800f034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f038:	6822      	ldr	r2, [r4, #0]
 800f03a:	3b00      	subs	r3, #0
 800f03c:	bf18      	it	ne
 800f03e:	2301      	movne	r3, #1
 800f040:	0692      	lsls	r2, r2, #26
 800f042:	d42b      	bmi.n	800f09c <_printf_common+0xb0>
 800f044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f048:	4641      	mov	r1, r8
 800f04a:	4638      	mov	r0, r7
 800f04c:	47c8      	blx	r9
 800f04e:	3001      	adds	r0, #1
 800f050:	d01e      	beq.n	800f090 <_printf_common+0xa4>
 800f052:	6823      	ldr	r3, [r4, #0]
 800f054:	6922      	ldr	r2, [r4, #16]
 800f056:	f003 0306 	and.w	r3, r3, #6
 800f05a:	2b04      	cmp	r3, #4
 800f05c:	bf02      	ittt	eq
 800f05e:	68e5      	ldreq	r5, [r4, #12]
 800f060:	6833      	ldreq	r3, [r6, #0]
 800f062:	1aed      	subeq	r5, r5, r3
 800f064:	68a3      	ldr	r3, [r4, #8]
 800f066:	bf0c      	ite	eq
 800f068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f06c:	2500      	movne	r5, #0
 800f06e:	4293      	cmp	r3, r2
 800f070:	bfc4      	itt	gt
 800f072:	1a9b      	subgt	r3, r3, r2
 800f074:	18ed      	addgt	r5, r5, r3
 800f076:	2600      	movs	r6, #0
 800f078:	341a      	adds	r4, #26
 800f07a:	42b5      	cmp	r5, r6
 800f07c:	d11a      	bne.n	800f0b4 <_printf_common+0xc8>
 800f07e:	2000      	movs	r0, #0
 800f080:	e008      	b.n	800f094 <_printf_common+0xa8>
 800f082:	2301      	movs	r3, #1
 800f084:	4652      	mov	r2, sl
 800f086:	4641      	mov	r1, r8
 800f088:	4638      	mov	r0, r7
 800f08a:	47c8      	blx	r9
 800f08c:	3001      	adds	r0, #1
 800f08e:	d103      	bne.n	800f098 <_printf_common+0xac>
 800f090:	f04f 30ff 	mov.w	r0, #4294967295
 800f094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f098:	3501      	adds	r5, #1
 800f09a:	e7c6      	b.n	800f02a <_printf_common+0x3e>
 800f09c:	18e1      	adds	r1, r4, r3
 800f09e:	1c5a      	adds	r2, r3, #1
 800f0a0:	2030      	movs	r0, #48	@ 0x30
 800f0a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f0a6:	4422      	add	r2, r4
 800f0a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f0ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f0b0:	3302      	adds	r3, #2
 800f0b2:	e7c7      	b.n	800f044 <_printf_common+0x58>
 800f0b4:	2301      	movs	r3, #1
 800f0b6:	4622      	mov	r2, r4
 800f0b8:	4641      	mov	r1, r8
 800f0ba:	4638      	mov	r0, r7
 800f0bc:	47c8      	blx	r9
 800f0be:	3001      	adds	r0, #1
 800f0c0:	d0e6      	beq.n	800f090 <_printf_common+0xa4>
 800f0c2:	3601      	adds	r6, #1
 800f0c4:	e7d9      	b.n	800f07a <_printf_common+0x8e>
	...

0800f0c8 <_printf_i>:
 800f0c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f0cc:	7e0f      	ldrb	r7, [r1, #24]
 800f0ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f0d0:	2f78      	cmp	r7, #120	@ 0x78
 800f0d2:	4691      	mov	r9, r2
 800f0d4:	4680      	mov	r8, r0
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	469a      	mov	sl, r3
 800f0da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f0de:	d807      	bhi.n	800f0f0 <_printf_i+0x28>
 800f0e0:	2f62      	cmp	r7, #98	@ 0x62
 800f0e2:	d80a      	bhi.n	800f0fa <_printf_i+0x32>
 800f0e4:	2f00      	cmp	r7, #0
 800f0e6:	f000 80d1 	beq.w	800f28c <_printf_i+0x1c4>
 800f0ea:	2f58      	cmp	r7, #88	@ 0x58
 800f0ec:	f000 80b8 	beq.w	800f260 <_printf_i+0x198>
 800f0f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f0f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f0f8:	e03a      	b.n	800f170 <_printf_i+0xa8>
 800f0fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f0fe:	2b15      	cmp	r3, #21
 800f100:	d8f6      	bhi.n	800f0f0 <_printf_i+0x28>
 800f102:	a101      	add	r1, pc, #4	@ (adr r1, 800f108 <_printf_i+0x40>)
 800f104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f108:	0800f161 	.word	0x0800f161
 800f10c:	0800f175 	.word	0x0800f175
 800f110:	0800f0f1 	.word	0x0800f0f1
 800f114:	0800f0f1 	.word	0x0800f0f1
 800f118:	0800f0f1 	.word	0x0800f0f1
 800f11c:	0800f0f1 	.word	0x0800f0f1
 800f120:	0800f175 	.word	0x0800f175
 800f124:	0800f0f1 	.word	0x0800f0f1
 800f128:	0800f0f1 	.word	0x0800f0f1
 800f12c:	0800f0f1 	.word	0x0800f0f1
 800f130:	0800f0f1 	.word	0x0800f0f1
 800f134:	0800f273 	.word	0x0800f273
 800f138:	0800f19f 	.word	0x0800f19f
 800f13c:	0800f22d 	.word	0x0800f22d
 800f140:	0800f0f1 	.word	0x0800f0f1
 800f144:	0800f0f1 	.word	0x0800f0f1
 800f148:	0800f295 	.word	0x0800f295
 800f14c:	0800f0f1 	.word	0x0800f0f1
 800f150:	0800f19f 	.word	0x0800f19f
 800f154:	0800f0f1 	.word	0x0800f0f1
 800f158:	0800f0f1 	.word	0x0800f0f1
 800f15c:	0800f235 	.word	0x0800f235
 800f160:	6833      	ldr	r3, [r6, #0]
 800f162:	1d1a      	adds	r2, r3, #4
 800f164:	681b      	ldr	r3, [r3, #0]
 800f166:	6032      	str	r2, [r6, #0]
 800f168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f16c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f170:	2301      	movs	r3, #1
 800f172:	e09c      	b.n	800f2ae <_printf_i+0x1e6>
 800f174:	6833      	ldr	r3, [r6, #0]
 800f176:	6820      	ldr	r0, [r4, #0]
 800f178:	1d19      	adds	r1, r3, #4
 800f17a:	6031      	str	r1, [r6, #0]
 800f17c:	0606      	lsls	r6, r0, #24
 800f17e:	d501      	bpl.n	800f184 <_printf_i+0xbc>
 800f180:	681d      	ldr	r5, [r3, #0]
 800f182:	e003      	b.n	800f18c <_printf_i+0xc4>
 800f184:	0645      	lsls	r5, r0, #25
 800f186:	d5fb      	bpl.n	800f180 <_printf_i+0xb8>
 800f188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f18c:	2d00      	cmp	r5, #0
 800f18e:	da03      	bge.n	800f198 <_printf_i+0xd0>
 800f190:	232d      	movs	r3, #45	@ 0x2d
 800f192:	426d      	negs	r5, r5
 800f194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f198:	4858      	ldr	r0, [pc, #352]	@ (800f2fc <_printf_i+0x234>)
 800f19a:	230a      	movs	r3, #10
 800f19c:	e011      	b.n	800f1c2 <_printf_i+0xfa>
 800f19e:	6821      	ldr	r1, [r4, #0]
 800f1a0:	6833      	ldr	r3, [r6, #0]
 800f1a2:	0608      	lsls	r0, r1, #24
 800f1a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800f1a8:	d402      	bmi.n	800f1b0 <_printf_i+0xe8>
 800f1aa:	0649      	lsls	r1, r1, #25
 800f1ac:	bf48      	it	mi
 800f1ae:	b2ad      	uxthmi	r5, r5
 800f1b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800f1b2:	4852      	ldr	r0, [pc, #328]	@ (800f2fc <_printf_i+0x234>)
 800f1b4:	6033      	str	r3, [r6, #0]
 800f1b6:	bf14      	ite	ne
 800f1b8:	230a      	movne	r3, #10
 800f1ba:	2308      	moveq	r3, #8
 800f1bc:	2100      	movs	r1, #0
 800f1be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f1c2:	6866      	ldr	r6, [r4, #4]
 800f1c4:	60a6      	str	r6, [r4, #8]
 800f1c6:	2e00      	cmp	r6, #0
 800f1c8:	db05      	blt.n	800f1d6 <_printf_i+0x10e>
 800f1ca:	6821      	ldr	r1, [r4, #0]
 800f1cc:	432e      	orrs	r6, r5
 800f1ce:	f021 0104 	bic.w	r1, r1, #4
 800f1d2:	6021      	str	r1, [r4, #0]
 800f1d4:	d04b      	beq.n	800f26e <_printf_i+0x1a6>
 800f1d6:	4616      	mov	r6, r2
 800f1d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800f1dc:	fb03 5711 	mls	r7, r3, r1, r5
 800f1e0:	5dc7      	ldrb	r7, [r0, r7]
 800f1e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f1e6:	462f      	mov	r7, r5
 800f1e8:	42bb      	cmp	r3, r7
 800f1ea:	460d      	mov	r5, r1
 800f1ec:	d9f4      	bls.n	800f1d8 <_printf_i+0x110>
 800f1ee:	2b08      	cmp	r3, #8
 800f1f0:	d10b      	bne.n	800f20a <_printf_i+0x142>
 800f1f2:	6823      	ldr	r3, [r4, #0]
 800f1f4:	07df      	lsls	r7, r3, #31
 800f1f6:	d508      	bpl.n	800f20a <_printf_i+0x142>
 800f1f8:	6923      	ldr	r3, [r4, #16]
 800f1fa:	6861      	ldr	r1, [r4, #4]
 800f1fc:	4299      	cmp	r1, r3
 800f1fe:	bfde      	ittt	le
 800f200:	2330      	movle	r3, #48	@ 0x30
 800f202:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f206:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f20a:	1b92      	subs	r2, r2, r6
 800f20c:	6122      	str	r2, [r4, #16]
 800f20e:	f8cd a000 	str.w	sl, [sp]
 800f212:	464b      	mov	r3, r9
 800f214:	aa03      	add	r2, sp, #12
 800f216:	4621      	mov	r1, r4
 800f218:	4640      	mov	r0, r8
 800f21a:	f7ff fee7 	bl	800efec <_printf_common>
 800f21e:	3001      	adds	r0, #1
 800f220:	d14a      	bne.n	800f2b8 <_printf_i+0x1f0>
 800f222:	f04f 30ff 	mov.w	r0, #4294967295
 800f226:	b004      	add	sp, #16
 800f228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	f043 0320 	orr.w	r3, r3, #32
 800f232:	6023      	str	r3, [r4, #0]
 800f234:	4832      	ldr	r0, [pc, #200]	@ (800f300 <_printf_i+0x238>)
 800f236:	2778      	movs	r7, #120	@ 0x78
 800f238:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f23c:	6823      	ldr	r3, [r4, #0]
 800f23e:	6831      	ldr	r1, [r6, #0]
 800f240:	061f      	lsls	r7, r3, #24
 800f242:	f851 5b04 	ldr.w	r5, [r1], #4
 800f246:	d402      	bmi.n	800f24e <_printf_i+0x186>
 800f248:	065f      	lsls	r7, r3, #25
 800f24a:	bf48      	it	mi
 800f24c:	b2ad      	uxthmi	r5, r5
 800f24e:	6031      	str	r1, [r6, #0]
 800f250:	07d9      	lsls	r1, r3, #31
 800f252:	bf44      	itt	mi
 800f254:	f043 0320 	orrmi.w	r3, r3, #32
 800f258:	6023      	strmi	r3, [r4, #0]
 800f25a:	b11d      	cbz	r5, 800f264 <_printf_i+0x19c>
 800f25c:	2310      	movs	r3, #16
 800f25e:	e7ad      	b.n	800f1bc <_printf_i+0xf4>
 800f260:	4826      	ldr	r0, [pc, #152]	@ (800f2fc <_printf_i+0x234>)
 800f262:	e7e9      	b.n	800f238 <_printf_i+0x170>
 800f264:	6823      	ldr	r3, [r4, #0]
 800f266:	f023 0320 	bic.w	r3, r3, #32
 800f26a:	6023      	str	r3, [r4, #0]
 800f26c:	e7f6      	b.n	800f25c <_printf_i+0x194>
 800f26e:	4616      	mov	r6, r2
 800f270:	e7bd      	b.n	800f1ee <_printf_i+0x126>
 800f272:	6833      	ldr	r3, [r6, #0]
 800f274:	6825      	ldr	r5, [r4, #0]
 800f276:	6961      	ldr	r1, [r4, #20]
 800f278:	1d18      	adds	r0, r3, #4
 800f27a:	6030      	str	r0, [r6, #0]
 800f27c:	062e      	lsls	r6, r5, #24
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	d501      	bpl.n	800f286 <_printf_i+0x1be>
 800f282:	6019      	str	r1, [r3, #0]
 800f284:	e002      	b.n	800f28c <_printf_i+0x1c4>
 800f286:	0668      	lsls	r0, r5, #25
 800f288:	d5fb      	bpl.n	800f282 <_printf_i+0x1ba>
 800f28a:	8019      	strh	r1, [r3, #0]
 800f28c:	2300      	movs	r3, #0
 800f28e:	6123      	str	r3, [r4, #16]
 800f290:	4616      	mov	r6, r2
 800f292:	e7bc      	b.n	800f20e <_printf_i+0x146>
 800f294:	6833      	ldr	r3, [r6, #0]
 800f296:	1d1a      	adds	r2, r3, #4
 800f298:	6032      	str	r2, [r6, #0]
 800f29a:	681e      	ldr	r6, [r3, #0]
 800f29c:	6862      	ldr	r2, [r4, #4]
 800f29e:	2100      	movs	r1, #0
 800f2a0:	4630      	mov	r0, r6
 800f2a2:	f7f0 ff9d 	bl	80001e0 <memchr>
 800f2a6:	b108      	cbz	r0, 800f2ac <_printf_i+0x1e4>
 800f2a8:	1b80      	subs	r0, r0, r6
 800f2aa:	6060      	str	r0, [r4, #4]
 800f2ac:	6863      	ldr	r3, [r4, #4]
 800f2ae:	6123      	str	r3, [r4, #16]
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f2b6:	e7aa      	b.n	800f20e <_printf_i+0x146>
 800f2b8:	6923      	ldr	r3, [r4, #16]
 800f2ba:	4632      	mov	r2, r6
 800f2bc:	4649      	mov	r1, r9
 800f2be:	4640      	mov	r0, r8
 800f2c0:	47d0      	blx	sl
 800f2c2:	3001      	adds	r0, #1
 800f2c4:	d0ad      	beq.n	800f222 <_printf_i+0x15a>
 800f2c6:	6823      	ldr	r3, [r4, #0]
 800f2c8:	079b      	lsls	r3, r3, #30
 800f2ca:	d413      	bmi.n	800f2f4 <_printf_i+0x22c>
 800f2cc:	68e0      	ldr	r0, [r4, #12]
 800f2ce:	9b03      	ldr	r3, [sp, #12]
 800f2d0:	4298      	cmp	r0, r3
 800f2d2:	bfb8      	it	lt
 800f2d4:	4618      	movlt	r0, r3
 800f2d6:	e7a6      	b.n	800f226 <_printf_i+0x15e>
 800f2d8:	2301      	movs	r3, #1
 800f2da:	4632      	mov	r2, r6
 800f2dc:	4649      	mov	r1, r9
 800f2de:	4640      	mov	r0, r8
 800f2e0:	47d0      	blx	sl
 800f2e2:	3001      	adds	r0, #1
 800f2e4:	d09d      	beq.n	800f222 <_printf_i+0x15a>
 800f2e6:	3501      	adds	r5, #1
 800f2e8:	68e3      	ldr	r3, [r4, #12]
 800f2ea:	9903      	ldr	r1, [sp, #12]
 800f2ec:	1a5b      	subs	r3, r3, r1
 800f2ee:	42ab      	cmp	r3, r5
 800f2f0:	dcf2      	bgt.n	800f2d8 <_printf_i+0x210>
 800f2f2:	e7eb      	b.n	800f2cc <_printf_i+0x204>
 800f2f4:	2500      	movs	r5, #0
 800f2f6:	f104 0619 	add.w	r6, r4, #25
 800f2fa:	e7f5      	b.n	800f2e8 <_printf_i+0x220>
 800f2fc:	08010951 	.word	0x08010951
 800f300:	08010962 	.word	0x08010962

0800f304 <memmove>:
 800f304:	4288      	cmp	r0, r1
 800f306:	b510      	push	{r4, lr}
 800f308:	eb01 0402 	add.w	r4, r1, r2
 800f30c:	d902      	bls.n	800f314 <memmove+0x10>
 800f30e:	4284      	cmp	r4, r0
 800f310:	4623      	mov	r3, r4
 800f312:	d807      	bhi.n	800f324 <memmove+0x20>
 800f314:	1e43      	subs	r3, r0, #1
 800f316:	42a1      	cmp	r1, r4
 800f318:	d008      	beq.n	800f32c <memmove+0x28>
 800f31a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f31e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f322:	e7f8      	b.n	800f316 <memmove+0x12>
 800f324:	4402      	add	r2, r0
 800f326:	4601      	mov	r1, r0
 800f328:	428a      	cmp	r2, r1
 800f32a:	d100      	bne.n	800f32e <memmove+0x2a>
 800f32c:	bd10      	pop	{r4, pc}
 800f32e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f332:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f336:	e7f7      	b.n	800f328 <memmove+0x24>

0800f338 <_sbrk_r>:
 800f338:	b538      	push	{r3, r4, r5, lr}
 800f33a:	4d06      	ldr	r5, [pc, #24]	@ (800f354 <_sbrk_r+0x1c>)
 800f33c:	2300      	movs	r3, #0
 800f33e:	4604      	mov	r4, r0
 800f340:	4608      	mov	r0, r1
 800f342:	602b      	str	r3, [r5, #0]
 800f344:	f7f3 fefc 	bl	8003140 <_sbrk>
 800f348:	1c43      	adds	r3, r0, #1
 800f34a:	d102      	bne.n	800f352 <_sbrk_r+0x1a>
 800f34c:	682b      	ldr	r3, [r5, #0]
 800f34e:	b103      	cbz	r3, 800f352 <_sbrk_r+0x1a>
 800f350:	6023      	str	r3, [r4, #0]
 800f352:	bd38      	pop	{r3, r4, r5, pc}
 800f354:	20001c50 	.word	0x20001c50

0800f358 <_realloc_r>:
 800f358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f35c:	4607      	mov	r7, r0
 800f35e:	4614      	mov	r4, r2
 800f360:	460d      	mov	r5, r1
 800f362:	b921      	cbnz	r1, 800f36e <_realloc_r+0x16>
 800f364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f368:	4611      	mov	r1, r2
 800f36a:	f7ff bc5b 	b.w	800ec24 <_malloc_r>
 800f36e:	b92a      	cbnz	r2, 800f37c <_realloc_r+0x24>
 800f370:	f7ff fbec 	bl	800eb4c <_free_r>
 800f374:	4625      	mov	r5, r4
 800f376:	4628      	mov	r0, r5
 800f378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f37c:	f000 f81a 	bl	800f3b4 <_malloc_usable_size_r>
 800f380:	4284      	cmp	r4, r0
 800f382:	4606      	mov	r6, r0
 800f384:	d802      	bhi.n	800f38c <_realloc_r+0x34>
 800f386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f38a:	d8f4      	bhi.n	800f376 <_realloc_r+0x1e>
 800f38c:	4621      	mov	r1, r4
 800f38e:	4638      	mov	r0, r7
 800f390:	f7ff fc48 	bl	800ec24 <_malloc_r>
 800f394:	4680      	mov	r8, r0
 800f396:	b908      	cbnz	r0, 800f39c <_realloc_r+0x44>
 800f398:	4645      	mov	r5, r8
 800f39a:	e7ec      	b.n	800f376 <_realloc_r+0x1e>
 800f39c:	42b4      	cmp	r4, r6
 800f39e:	4622      	mov	r2, r4
 800f3a0:	4629      	mov	r1, r5
 800f3a2:	bf28      	it	cs
 800f3a4:	4632      	movcs	r2, r6
 800f3a6:	f7ff fbc3 	bl	800eb30 <memcpy>
 800f3aa:	4629      	mov	r1, r5
 800f3ac:	4638      	mov	r0, r7
 800f3ae:	f7ff fbcd 	bl	800eb4c <_free_r>
 800f3b2:	e7f1      	b.n	800f398 <_realloc_r+0x40>

0800f3b4 <_malloc_usable_size_r>:
 800f3b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3b8:	1f18      	subs	r0, r3, #4
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	bfbc      	itt	lt
 800f3be:	580b      	ldrlt	r3, [r1, r0]
 800f3c0:	18c0      	addlt	r0, r0, r3
 800f3c2:	4770      	bx	lr

0800f3c4 <_init>:
 800f3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3c6:	bf00      	nop
 800f3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3ca:	bc08      	pop	{r3}
 800f3cc:	469e      	mov	lr, r3
 800f3ce:	4770      	bx	lr

0800f3d0 <_fini>:
 800f3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3d2:	bf00      	nop
 800f3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f3d6:	bc08      	pop	{r3}
 800f3d8:	469e      	mov	lr, r3
 800f3da:	4770      	bx	lr
